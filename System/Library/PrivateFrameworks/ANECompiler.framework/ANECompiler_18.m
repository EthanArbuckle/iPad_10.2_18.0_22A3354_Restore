uint64_t mlir::arith::SubFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  void *canMapOperands;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  llvm::APFloatBase *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t Value;
  void *v25;
  llvm::APFloatBase *v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t Type;
  int v33;
  unint64_t NumElements;
  llvm::APFloatBase *v35;
  llvm::APFloatBase *v36;
  void **v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  void **v42;
  char *v43;
  uint64_t v44;
  llvm::detail::DoubleAPFloat *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  const llvm::detail::DoubleAPFloat *v52;
  void *v53;
  uint64_t v54;
  char *v55;
  const llvm::detail::DoubleAPFloat *v56;
  void *v57;
  void *v58;
  llvm::APFloatBase *v59;
  void *v60;
  llvm::APFloatBase *v61;
  char *Address;
  llvm::detail::IEEEFloat *v63;
  const llvm::detail::DoubleAPFloat *v64;
  void *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  uint64_t v71;
  llvm::detail::DoubleAPFloat *v72;
  llvm::APFloatBase *v73;
  llvm::APFloatBase *v74;
  llvm::APFloatBase *v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  llvm::APFloatBase *v79;
  uint64_t v80;
  char v81;
  char v82;
  llvm::APFloatBase *v83;
  uint64_t v84;
  uint64_t v85;
  llvm::APFloatBase *v86;
  uint64_t v87;
  unsigned __int8 v88;
  _QWORD v89[2];
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[3];
  uint64_t v94;
  _QWORD v95[3];
  unint64_t v96;
  _QWORD v97[3];
  char v98;
  void *v99;
  uint64_t v100;
  _BYTE v101[16];
  char v102;
  _BYTE v103[8];
  _QWORD v104[2];
  char v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)(a2 + 48);
  v4 = v3[1];
  v99 = mlir::m_PosZeroFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke;
  if (v4)
  {
    if ((mlir::detail::constant_float_predicate_matcher::match((llvm::APFloatBase *)&v99, v4) & 1) != 0)
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) | 4;
    v3 = *(uint64_t **)(a2 + 48);
  }
  canMapOperands = (void *)*v3;
  if (*v3
    && *(_UNKNOWN **)(*(_QWORD *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v8 = v3[1];
  if (v8 && *(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8))
    {
      v9 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8);
      v99 = canMapOperands;
      v100 = v9;
      canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
    }
    else
    {
      canMapOperands = 0;
      v99 = 0;
      v100 = 0;
    }
  }
  else
  {
    v99 = 0;
    v100 = 0;
  }
  v10 = (_QWORD *)v3[1];
  if (!v10)
  {
    v99 = 0;
    v100 = 0;
    goto LABEL_67;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8))
  {
    v99 = 0;
    v100 = 0;
    goto LABEL_67;
  }
  v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8);
  v99 = v10;
  v100 = v11;
  v12 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
  v8 = 0;
  if (!canMapOperands || !v12 || canMapOperands != (void *)v12)
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  v13 = (void *)*v3;
  if (*v3 && *(_UNKNOWN **)(*(_QWORD *)v13 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v14 = v3[1];
  if (!v14)
  {
LABEL_67:
    v8 = 0;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v15 = *(void **)(*(_QWORD *)v14 + 136);
  if (v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    v8 = v3[1];
  else
    v8 = 0;
  if (!v13 || v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  if (v15 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || *(_UNKNOWN **)(*(_QWORD *)v13 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3))
      v20 = v13;
    else
      v20 = 0;
    v99 = v20;
    if (v20
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)
      && ((v21 = v3[1], !mlir::DenseElementsAttr::classof(v21)) ? (v22 = 0) : (v22 = (void *)v21),
          (v99 = v22) != 0 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)))
    {
      v23 = v3[1];
      v85 = *v3;
      v94 = v23;
      Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v85);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v94))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v85, (uint64_t)&v96);
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v94, (uint64_t)v103);
        mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
        v25 = (void *)v104[0];
        v27 = llvm::APFloatBase::PPCDoubleDouble(v26);
        if (v27 == v25)
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
        if (v27 == (void *)v97[0])
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
        if (v102)
        {
          v77 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
          v8 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v77, (uint64_t)&v99, 1);
          if (!v102)
            return v8 & 0xFFFFFFFFFFFFFFFBLL;
          if (v27 != (void *)v100)
            goto LABEL_61;
          goto LABEL_157;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v3 + 8)
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v3[1] + 8))
    {
      v28 = (_QWORD *)*v3;
      v29 = *v3 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v28 + 8) : 0;
      v90 = v28;
      v91 = v29;
      v30 = (_QWORD *)v3[1];
      v31 = v30 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8) : 0;
      v89[0] = v30;
      v89[1] = v31;
      Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v90);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v89))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v90, (uint64_t)v103);
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v89, (uint64_t)&v85);
        v8 = 0;
        v33 = v88;
        if (v105 && v88)
        {
          v81 = v103[0];
          v82 = v103[1];
          if (v103[0])
            v83 = (llvm::APFloatBase *)v104[0];
          else
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v104[0] + 16))(&v83);
          v84 = v104[1];
          v78 = v85;
          if ((_BYTE)v85)
            v79 = v86;
          else
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v86 + 16))(&v79);
          v80 = v87;
          v99 = v101;
          v100 = 0x400000000;
          NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (NumElements > HIDWORD(v100))
          {
            v96 = 0;
            v35 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v99, v101, NumElements, 32, &v96);
            v36 = v35;
            v37 = (void **)v99;
            v38 = v100;
            if ((_DWORD)v100)
            {
              v39 = llvm::APFloatBase::PPCDoubleDouble(v35);
              v40 = (_QWORD *)((char *)v36 + 8);
              v41 = 32 * v38;
              v42 = v37 + 1;
              do
              {
                while (v39 == *v42)
                {
                  v40 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v40, v42) + 4;
                  v42 += 4;
                  v41 -= 32;
                  if (!v41)
                    goto LABEL_83;
                }
                v40 = (_QWORD *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v40, (uint64_t)v42) + 32);
                v42 += 4;
                v41 -= 32;
              }
              while (v41);
LABEL_83:
              v37 = (void **)v99;
              if ((_DWORD)v100)
              {
                v43 = (char *)v99 - 24;
                v44 = 32 * v100;
                do
                {
                  while (1)
                  {
                    v45 = (llvm::detail::DoubleAPFloat *)&v43[v44];
                    if (v39 != *(void **)&v43[v44])
                      break;
                    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v45);
                    v44 -= 32;
                    if (!v44)
                      goto LABEL_88;
                  }
                  llvm::detail::IEEEFloat::~IEEEFloat(v45);
                  v44 -= 32;
                }
                while (v44);
LABEL_88:
                v37 = (void **)v99;
              }
            }
            v46 = v96;
            if (v37 != (void **)v101)
              free(v37);
            v99 = v36;
            HIDWORD(v100) = v46;
          }
          v47 = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (v47)
          {
            v48 = v47;
            v49 = v84;
            while (1)
            {
              v50 = v82 ? 0 : v49;
              if (v81)
              {
                v51 = (char *)v83 + 32 * v50;
                v53 = (void *)*((_QWORD *)v51 + 1);
                v52 = (const llvm::detail::DoubleAPFloat *)(v51 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v83) == v53)
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v95, v52);
                else
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v95, v52);
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v83 + 24))(&v94);
              }
              v54 = HIBYTE(v78) ? 0 : v80;
              if ((_BYTE)v78)
              {
                v55 = (char *)v79 + 32 * v54;
                v57 = (void *)*((_QWORD *)v55 + 1);
                v56 = (const llvm::detail::DoubleAPFloat *)(v55 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v79) == v57)
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v93, v56);
                else
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v93, v56);
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v79 + 24))(&v92);
              }
              mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v96, (uint64_t)&v94, (uint64_t)&v92);
              v58 = (void *)v93[0];
              v60 = llvm::APFloatBase::PPCDoubleDouble(v59);
              if (v60 == v58)
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v93);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v93);
              if (v60 == (void *)v95[0])
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v95);
              if (!v98)
                break;
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v99, (unint64_t)&v96, 1);
              v63 = (llvm::detail::IEEEFloat *)((char *)v99 + 32 * v100 + 8);
              v65 = (void *)*((_QWORD *)Address + 1);
              v64 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              if (v60 == v65)
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v63, v64);
              else
                llvm::detail::IEEEFloat::IEEEFloat(v63, v64);
              LODWORD(v100) = v100 + 1;
              if (v98)
              {
                if (v60 == (void *)v97[0])
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
                else
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
              }
              v49 = ++v84;
              ++v80;
              if (!--v48)
                goto LABEL_125;
            }
            v8 = 0;
          }
          else
          {
LABEL_125:
            v66 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
            v61 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v66, (uint64_t)v99, v100);
            v8 = (uint64_t)v61;
          }
          v67 = (char *)v99;
          v68 = v100;
          if ((_DWORD)v100)
          {
            v69 = llvm::APFloatBase::PPCDoubleDouble(v61);
            v70 = v67 - 24;
            v71 = 32 * v68;
            do
            {
              while (1)
              {
                v72 = (llvm::detail::DoubleAPFloat *)&v70[v71];
                if (v69 != *(void **)&v70[v71])
                  break;
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v72);
                v71 -= 32;
                if (!v71)
                  goto LABEL_132;
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v72);
              v71 -= 32;
            }
            while (v71);
LABEL_132:
            v67 = (char *)v99;
          }
          if (v67 != v101)
            free(v67);
          if (!(_BYTE)v78)
          {
            v73 = v79;
            v79 = 0;
            if (v73)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v73 + 8))(v73);
          }
          if (!v81)
          {
            v74 = v83;
            v83 = 0;
            if (v74)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v74 + 8))(v74);
          }
          v33 = v88;
        }
        if (v33)
        {
          if (!(_BYTE)v85)
          {
            v75 = v86;
            v86 = 0;
            if (v75)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v75 + 8))(v75);
          }
        }
        if (v105)
        {
          if (!v103[0])
          {
            v76 = v104[0];
            v104[0] = 0;
            if (v76)
              (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
          }
        }
        return v8 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_67;
  }
  v85 = *v3;
  v94 = v14;
  v16 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v85);
  if (v16 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v94))
    goto LABEL_67;
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v85, (uint64_t)&v96);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v94, (uint64_t)v103);
  mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
  v17 = (void *)v104[0];
  v19 = llvm::APFloatBase::PPCDoubleDouble(v18);
  if (v19 == v17)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
  if (v19 == (void *)v97[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
  if (!v102)
    goto LABEL_67;
  v8 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v99);
  if (v102)
  {
    if (v19 != (void *)v100)
    {
LABEL_61:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v100);
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_157:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v100);
  }
  return v8 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::MaximumFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  void *canMapOperands;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  llvm::APFloatBase *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t Value;
  llvm::APFloatBase *v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t Type;
  int v35;
  unint64_t NumElements;
  llvm::APFloatBase *v37;
  llvm::APFloatBase *v38;
  void **v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  void **v44;
  char *v45;
  uint64_t v46;
  llvm::detail::DoubleAPFloat *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  const llvm::detail::DoubleAPFloat *v54;
  void *v55;
  uint64_t v56;
  char *v57;
  const llvm::detail::DoubleAPFloat *v58;
  void *v59;
  void *v60;
  llvm::APFloatBase *v61;
  llvm::APFloatBase *v62;
  char *Address;
  llvm::detail::IEEEFloat *v64;
  const llvm::detail::DoubleAPFloat *v65;
  void *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void *v70;
  char *v71;
  uint64_t v72;
  llvm::detail::DoubleAPFloat *v73;
  llvm::APFloatBase *v74;
  llvm::APFloatBase *v75;
  llvm::APFloatBase *v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  llvm::APFloatBase *v80;
  uint64_t v81;
  char v82;
  char v83;
  llvm::APFloatBase *v84;
  uint64_t v85;
  uint64_t v86;
  llvm::APFloatBase *v87;
  uint64_t v88;
  unsigned __int8 v89;
  _QWORD v90[2];
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[3];
  uint64_t v95;
  _QWORD v96[3];
  unint64_t v97;
  _QWORD v98[3];
  char v99;
  void *v100;
  uint64_t v101;
  _BYTE v102[16];
  char v103;
  _BYTE v104[8];
  _QWORD v105[2];
  char v106;
  char v107[8];
  _QWORD v108[5];

  v108[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3 == *(_QWORD *)(v2 + 56))
    return v3 | 4;
  v5 = *(uint64_t **)(a2 + 48);
  v6 = v5[1];
  v100 = mlir::m_NegInfFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke;
  if (v6)
  {
    if ((mlir::detail::constant_float_predicate_matcher::match((llvm::APFloatBase *)&v100, v6) & 1) != 0)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
      return v3 | 4;
    }
    v5 = *(uint64_t **)(a2 + 48);
  }
  canMapOperands = (void *)*v5;
  if (*v5
    && *(_UNKNOWN **)(*(_QWORD *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    v10 = *v5;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v10 = v5[1];
  if (v10 && *(_UNKNOWN **)(*(_QWORD *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8))
    {
      v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8);
      v100 = canMapOperands;
      v101 = v11;
      canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
    }
    else
    {
      canMapOperands = 0;
      v100 = 0;
      v101 = 0;
    }
  }
  else
  {
    v100 = 0;
    v101 = 0;
  }
  v12 = (_QWORD *)v5[1];
  if (!v12)
  {
    v100 = 0;
    v101 = 0;
    goto LABEL_75;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v12 + 8))
  {
    v100 = 0;
    v101 = 0;
    goto LABEL_75;
  }
  v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v12 + 8);
  v100 = v12;
  v101 = v13;
  v14 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
  v10 = 0;
  if (!canMapOperands || !v14 || canMapOperands != (void *)v14)
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  v15 = (void *)*v5;
  if (*v5 && *(_UNKNOWN **)(*(_QWORD *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    v10 = *v5;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v16 = v5[1];
  if (!v16)
  {
LABEL_75:
    v10 = 0;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v17 = *(void **)(*(_QWORD *)v16 + 136);
  if (v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    v10 = v5[1];
  else
    v10 = 0;
  if (!v15 || v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  if (v17 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || *(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v5))
      v22 = v15;
    else
      v22 = 0;
    v100 = v22;
    if (v22
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100)
      && ((v23 = v5[1], !mlir::DenseElementsAttr::classof(v23)) ? (v24 = 0) : (v24 = (void *)v23),
          (v100 = v24) != 0 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100)))
    {
      v25 = v5[1];
      v86 = *v5;
      v95 = v25;
      Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v86);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v95))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v86, (uint64_t)v107);
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v95, (uint64_t)v104);
        v27 = (llvm::APFloatBase *)llvm::maximum((llvm *)v107, (const llvm::APFloat *)v104, (uint64_t)&v97);
        v28 = (void *)v98[0];
        v29 = llvm::APFloatBase::PPCDoubleDouble(v27);
        if (v29 == v28)
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v101, v98);
        else
          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v101, (uint64_t)v98);
        v103 = 1;
        if (v29 == (void *)v98[0])
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
        if (v29 == (void *)v105[0])
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v105);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v105);
        if (v29 == (void *)v108[0])
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
        if (v103)
        {
          v78 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
          v10 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v78, (uint64_t)&v100, 1);
          if (!v103)
            return v10 & 0xFFFFFFFFFFFFFFFBLL;
          if (v29 != (void *)v101)
            goto LABEL_69;
          goto LABEL_177;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v5 + 8)
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v5[1] + 8))
    {
      v30 = (_QWORD *)*v5;
      v31 = *v5 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8) : 0;
      v91 = v30;
      v92 = v31;
      v32 = (_QWORD *)v5[1];
      v33 = v32 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v32 + 8) : 0;
      v90[0] = v32;
      v90[1] = v33;
      Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v91);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v90))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v91, (uint64_t)v104);
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v90, (uint64_t)&v86);
        v10 = 0;
        v35 = v89;
        if (v106 && v89)
        {
          v82 = v104[0];
          v83 = v104[1];
          if (v104[0])
            v84 = (llvm::APFloatBase *)v105[0];
          else
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v105[0] + 16))(&v84);
          v85 = v105[1];
          v79 = v86;
          if ((_BYTE)v86)
            v80 = v87;
          else
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v87 + 16))(&v80);
          v81 = v88;
          v100 = v102;
          v101 = 0x400000000;
          NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v91, v92);
          if (NumElements > HIDWORD(v101))
          {
            v97 = 0;
            v37 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v100, v102, NumElements, 32, &v97);
            v38 = v37;
            v39 = (void **)v100;
            v40 = v101;
            if ((_DWORD)v101)
            {
              v41 = llvm::APFloatBase::PPCDoubleDouble(v37);
              v42 = (_QWORD *)((char *)v38 + 8);
              v43 = 32 * v40;
              v44 = v39 + 1;
              do
              {
                while (v41 == *v44)
                {
                  v42 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v42, v44) + 4;
                  v44 += 4;
                  v43 -= 32;
                  if (!v43)
                    goto LABEL_91;
                }
                v42 = (_QWORD *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v42, (uint64_t)v44) + 32);
                v44 += 4;
                v43 -= 32;
              }
              while (v43);
LABEL_91:
              v39 = (void **)v100;
              if ((_DWORD)v101)
              {
                v45 = (char *)v100 - 24;
                v46 = 32 * v101;
                do
                {
                  while (1)
                  {
                    v47 = (llvm::detail::DoubleAPFloat *)&v45[v46];
                    if (v41 != *(void **)&v45[v46])
                      break;
                    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v47);
                    v46 -= 32;
                    if (!v46)
                      goto LABEL_96;
                  }
                  llvm::detail::IEEEFloat::~IEEEFloat(v47);
                  v46 -= 32;
                }
                while (v46);
LABEL_96:
                v39 = (void **)v100;
              }
            }
            v48 = v97;
            if (v39 != (void **)v102)
              free(v39);
            v100 = v38;
            HIDWORD(v101) = v48;
          }
          v49 = mlir::ElementsAttr::getNumElements((uint64_t)v91, v92);
          if (v49)
          {
            v50 = v49;
            v51 = v85;
            while (1)
            {
              v52 = v83 ? 0 : v51;
              if (v82)
              {
                v53 = (char *)v84 + 32 * v52;
                v55 = (void *)*((_QWORD *)v53 + 1);
                v54 = (const llvm::detail::DoubleAPFloat *)(v53 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v84) == v55)
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v96, v54);
                else
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v96, v54);
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v84 + 24))(&v95);
              }
              v56 = HIBYTE(v79) ? 0 : v81;
              if ((_BYTE)v79)
              {
                v57 = (char *)v80 + 32 * v56;
                v59 = (void *)*((_QWORD *)v57 + 1);
                v58 = (const llvm::detail::DoubleAPFloat *)(v57 + 8);
                v60 = llvm::APFloatBase::PPCDoubleDouble(v80);
                if (v60 == v59)
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v94, v58);
                else
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v94, v58);
              }
              else
              {
                v61 = (llvm::APFloatBase *)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v80 + 24))(&v93);
                v60 = llvm::APFloatBase::PPCDoubleDouble(v61);
              }
              llvm::maximum((llvm *)&v95, (const llvm::APFloat *)&v93, (uint64_t)v107);
              if (v60 == (void *)v108[0])
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v98, v108);
              else
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v98, (uint64_t)v108);
              v99 = 1;
              if (v60 == (void *)v108[0])
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
              if (v60 == (void *)v94[0])
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v94);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v94);
              if (v60 == (void *)v96[0])
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v96);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v96);
              if (!v99)
                break;
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v100, (unint64_t)&v97, 1);
              v64 = (llvm::detail::IEEEFloat *)((char *)v100 + 32 * v101 + 8);
              v66 = (void *)*((_QWORD *)Address + 1);
              v65 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              if (v60 == v66)
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v64, v65);
              else
                llvm::detail::IEEEFloat::IEEEFloat(v64, v65);
              LODWORD(v101) = v101 + 1;
              if (v99)
              {
                if (v60 == (void *)v98[0])
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
                else
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
              }
              v51 = ++v85;
              ++v81;
              if (!--v50)
                goto LABEL_139;
            }
            v10 = 0;
          }
          else
          {
LABEL_139:
            v67 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
            v62 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v67, (uint64_t)v100, v101);
            v10 = (uint64_t)v62;
          }
          v68 = (char *)v100;
          v69 = v101;
          if ((_DWORD)v101)
          {
            v70 = llvm::APFloatBase::PPCDoubleDouble(v62);
            v71 = v68 - 24;
            v72 = 32 * v69;
            do
            {
              while (1)
              {
                v73 = (llvm::detail::DoubleAPFloat *)&v71[v72];
                if (v70 != *(void **)&v71[v72])
                  break;
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v73);
                v72 -= 32;
                if (!v72)
                  goto LABEL_146;
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v73);
              v72 -= 32;
            }
            while (v72);
LABEL_146:
            v68 = (char *)v100;
          }
          if (v68 != v102)
            free(v68);
          if (!(_BYTE)v79)
          {
            v74 = v80;
            v80 = 0;
            if (v74)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v74 + 8))(v74);
          }
          if (!v82)
          {
            v75 = v84;
            v84 = 0;
            if (v75)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v75 + 8))(v75);
          }
          v35 = v89;
        }
        if (v35)
        {
          if (!(_BYTE)v86)
          {
            v76 = v87;
            v87 = 0;
            if (v76)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v76 + 8))(v76);
          }
        }
        if (v106)
        {
          if (!v104[0])
          {
            v77 = v105[0];
            v105[0] = 0;
            if (v77)
              (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
          }
        }
        return v10 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_75;
  }
  v86 = *v5;
  v95 = v16;
  v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v86);
  if (v18 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v95))
    goto LABEL_75;
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v86, (uint64_t)v107);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v95, (uint64_t)v104);
  v19 = (llvm::APFloatBase *)llvm::maximum((llvm *)v107, (const llvm::APFloat *)v104, (uint64_t)&v97);
  v20 = (void *)v98[0];
  v21 = llvm::APFloatBase::PPCDoubleDouble(v19);
  if (v21 == v20)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v101, v98);
  else
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v101, (uint64_t)v98);
  v103 = 1;
  if (v21 == (void *)v98[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
  if (v21 == (void *)v105[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v105);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v105);
  if (v21 == (void *)v108[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
  if (!v103)
    goto LABEL_75;
  v10 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v100);
  if (v103)
  {
    if (v21 != (void *)v101)
    {
LABEL_69:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v101);
      return v10 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_177:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v101);
  }
  return v10 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::MaxSIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t canMapOperands;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t Value;
  int v22;
  const void **v23;
  unsigned int v24;
  unsigned int v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  const void **v33;
  unsigned int v34;
  unsigned int v35;
  const void *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t Type;
  int v44;
  unint64_t NumElements;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  const void **v54;
  unsigned int v55;
  unsigned int v56;
  const void *v57;
  char *Address;
  llvm::APInt *v59;
  unsigned int v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  unsigned int v70;
  const void *v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 v85;
  _QWORD v86[2];
  _QWORD *v87;
  uint64_t v88;
  char v89[8];
  unsigned int v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _OWORD v94[4];
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 == *(_QWORD *)(v3 + 56))
    return v4 | 4;
  DWORD2(v93) = 1;
  *(_QWORD *)&v93 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
  *(_QWORD *)&v91 = &v93;
  if (!v6)
  {
LABEL_21:
    v12 = *(uint64_t **)(a2 + 40);
    canMapOperands = *v12;
    if (*v12
      && *(_UNKNOWN **)(*(_QWORD *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
      v14 = *v12;
    }
    else
    {
      v14 = v12[1];
      if (!v14
        || *(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
      {
        if (canMapOperands)
        {
          if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8))
          {
            v15 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8);
            *(_QWORD *)&v93 = canMapOperands;
            *((_QWORD *)&v93 + 1) = v15;
            canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v93);
          }
          else
          {
            canMapOperands = 0;
            v93 = 0uLL;
          }
        }
        else
        {
          v93 = 0uLL;
        }
        v14 = v12[1];
        if (v14)
        {
          if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)v14 + 8))
          {
            v16 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)v14 + 8);
            *(_QWORD *)&v93 = v14;
            *((_QWORD *)&v93 + 1) = v16;
            v17 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v93);
            v14 = 0;
            if (canMapOperands && v17 && canMapOperands == v17)
            {
              v18 = *v12;
              if (*v12
                && *(_UNKNOWN **)(*(_QWORD *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
              {
                v14 = *v12;
              }
              else
              {
                v19 = v12[1];
                if (v19)
                {
                  v20 = *(void **)(*(_QWORD *)v19 + 136);
                  if (v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
                    v14 = v12[1];
                  else
                    v14 = 0;
                  if (!v18 || v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
                    return v14 & 0xFFFFFFFFFFFFFFFBLL;
                  if (v20 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
                    && *(_UNKNOWN **)(*(_QWORD *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                  {
                    v76 = *v12;
                    v73 = v19;
                    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v76);
                    if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v73))
                    {
                      mlir::IntegerAttr::getValue(&v76, (llvm::APInt *)&v82);
                      mlir::IntegerAttr::getValue(&v73, (llvm::APInt *)&v79);
                      v22 = llvm::APInt::compareSigned((llvm::APInt *)&v82, (const llvm::APInt *)&v79);
                      if (v22 <= 0)
                        v23 = (const void **)&v79;
                      else
                        v23 = (const void **)&v82;
                      v24 = v83;
                      v25 = v80;
                      if (v22 <= 0)
                        v24 = v80;
                      DWORD2(v91) = v24;
                      if (v24 >= 0x41)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v91, v23);
                        v24 = DWORD2(v91);
                        v25 = v80;
                        v23 = (const void **)&v91;
                      }
                      v26 = *v23;
                      DWORD2(v93) = v24;
                      *(_QWORD *)&v93 = v26;
                      LOBYTE(v94[0]) = 1;
                      if (v25 >= 0x41 && v79)
                        MEMORY[0x20BD002D4](v79, 0x1000C8000313F17);
                      if (v83 >= 0x41 && v82)
                        MEMORY[0x20BD002D4](v82, 0x1000C8000313F17);
                      v14 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v93);
                      if (!LOBYTE(v94[0]))
                        return v14 & 0xFFFFFFFFFFFFFFFBLL;
                      goto LABEL_64;
                    }
                  }
                  else
                  {
                    if (mlir::DenseElementsAttr::classof(*v12))
                      v27 = v18;
                    else
                      v27 = 0;
                    *(_QWORD *)&v93 = v27;
                    if (v27
                      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v93)
                      && ((v28 = v12[1], !mlir::DenseElementsAttr::classof(v28)) ? (v29 = 0) : (v29 = v28),
                          (*(_QWORD *)&v93 = v29) != 0
                       && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v93)))
                    {
                      v30 = v12[1];
                      v76 = *v12;
                      v73 = v30;
                      v31 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v76);
                      if (v31 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73))
                      {
                        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v76, (uint64_t)&v93);
                        v91 = v93;
                        v92 = v94[0];
                        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v91, (llvm::APInt *)&v82);
                        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v73, (uint64_t)&v93);
                        v91 = v93;
                        v92 = v94[0];
                        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v91, (llvm::APInt *)&v79);
                        v32 = llvm::APInt::compareSigned((llvm::APInt *)&v82, (const llvm::APInt *)&v79);
                        if (v32 <= 0)
                          v33 = (const void **)&v79;
                        else
                          v33 = (const void **)&v82;
                        v34 = v83;
                        v35 = v80;
                        if (v32 <= 0)
                          v34 = v80;
                        DWORD2(v91) = v34;
                        if (v34 >= 0x41)
                        {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v91, v33);
                          v34 = DWORD2(v91);
                          v35 = v80;
                          v33 = (const void **)&v91;
                        }
                        v36 = *v33;
                        DWORD2(v93) = v34;
                        *(_QWORD *)&v93 = v36;
                        LOBYTE(v94[0]) = 1;
                        if (v35 >= 0x41 && v79)
                          MEMORY[0x20BD002D4](v79, 0x1000C8000313F17);
                        if (v83 >= 0x41 && v82)
                          MEMORY[0x20BD002D4](v82, 0x1000C8000313F17);
                        v37 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
                        v14 = mlir::DenseElementsAttr::get(canMapOperands, v37, (llvm::APInt *)&v93, 1);
                        if (!LOBYTE(v94[0]))
                          return v14 & 0xFFFFFFFFFFFFFFFBLL;
LABEL_64:
                        if (DWORD2(v93) >= 0x41 && (_QWORD)v93)
                          MEMORY[0x20BD002D4](v93, 0x1000C8000313F17);
                        return v14 & 0xFFFFFFFFFFFFFFFBLL;
                      }
                    }
                    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v12 + 8)
                           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v12[1] + 8))
                    {
                      v38 = (_QWORD *)*v12;
                      v39 = *v12 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v38 + 8) : 0;
                      v87 = v38;
                      v88 = v39;
                      v40 = (_QWORD *)v12[1];
                      v41 = v40 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v40 + 8) : 0;
                      v86[0] = v40;
                      v86[1] = v41;
                      Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v87);
                      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v86))
                      {
                        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v87, (uint64_t)&v91);
                        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v86, (uint64_t)&v82);
                        v14 = 0;
                        v44 = v85;
                        if (BYTE8(v92) && v85)
                        {
                          LOWORD(v79) = v91;
                          if ((_BYTE)v91)
                            v80 = *((_QWORD *)&v91 + 1);
                          else
                            (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)&v91 + 1) + 16))(&v80);
                          v81 = v92;
                          LOWORD(v76) = v82;
                          if ((_BYTE)v82)
                            v77 = v83;
                          else
                            (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v83 + 16))(&v77);
                          v78 = v84;
                          *(_QWORD *)&v93 = v94;
                          *((_QWORD *)&v93 + 1) = 0x400000000;
                          NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v87, v88);
                          llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v93, NumElements);
                          v46 = mlir::ElementsAttr::getNumElements((uint64_t)v87, v88);
                          if (v46)
                          {
                            v47 = v46;
                            v48 = v81;
                            while (1)
                            {
                              if (BYTE1(v79))
                                v49 = 0;
                              else
                                v49 = v48;
                              if ((_BYTE)v79)
                              {
                                v50 = v80 + 16 * v49;
                                v72 = *(_DWORD *)(v50 + 8);
                                if (v72 > 0x40)
                                  llvm::APInt::initSlowCase((llvm::APInt *)&v71, (const void **)v50);
                                else
                                  v71 = *(const void **)v50;
                              }
                              else
                              {
                                (*(void (**)(const void **__return_ptr))(*(_QWORD *)v80 + 24))(&v71);
                              }
                              if (BYTE1(v76))
                                v51 = 0;
                              else
                                v51 = v78;
                              if ((_BYTE)v76)
                              {
                                v52 = v77 + 16 * v51;
                                v70 = *(_DWORD *)(v52 + 8);
                                if (v70 > 0x40)
                                  llvm::APInt::initSlowCase((llvm::APInt *)&v69, (const void **)v52);
                                else
                                  v69 = *(const void **)v52;
                              }
                              else
                              {
                                (*(void (**)(const void **__return_ptr))(*(_QWORD *)v77 + 24))(&v69);
                              }
                              v53 = llvm::APInt::compareSigned((llvm::APInt *)&v71, (const llvm::APInt *)&v69);
                              if (v53 <= 0)
                                v54 = &v69;
                              else
                                v54 = &v71;
                              v55 = v72;
                              v56 = v70;
                              if (v53 <= 0)
                                v55 = v70;
                              v90 = v55;
                              if (v55 >= 0x41)
                              {
                                llvm::APInt::initSlowCase((llvm::APInt *)v89, v54);
                                v55 = v90;
                                v56 = v70;
                                v54 = (const void **)v89;
                              }
                              v57 = *v54;
                              v74 = v55;
                              v73 = (uint64_t)v57;
                              v75 = 1;
                              if (v56 >= 0x41 && v69)
                                MEMORY[0x20BD002D4](v69, 0x1000C8000313F17);
                              if (v72 >= 0x41 && v71)
                                MEMORY[0x20BD002D4](v71, 0x1000C8000313F17);
                              if (!v75)
                                break;
                              Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v93, (unint64_t)&v73, 1);
                              v59 = (llvm::APInt *)(v93 + 16 * DWORD2(v93));
                              v60 = *((_DWORD *)Address + 2);
                              *((_DWORD *)v59 + 2) = v60;
                              if (v60 > 0x40)
                                llvm::APInt::initSlowCase(v59, (const void **)Address);
                              else
                                *(_QWORD *)v59 = *(_QWORD *)Address;
                              ++DWORD2(v93);
                              if (v75 && v74 >= 0x41 && v73)
                                MEMORY[0x20BD002D4](v73, 0x1000C8000313F17);
                              v48 = ++v81;
                              ++v78;
                              if (!--v47)
                                goto LABEL_154;
                            }
                            v14 = 0;
                          }
                          else
                          {
LABEL_154:
                            v61 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
                            v14 = mlir::DenseElementsAttr::get(canMapOperands, v61, (llvm::APInt *)v93, DWORD2(v93));
                          }
                          v62 = (char *)v93;
                          if (DWORD2(v93))
                          {
                            v63 = 16 * DWORD2(v93);
                            do
                            {
                              if (*(_DWORD *)&v62[v63 - 8] >= 0x41u)
                              {
                                v64 = *(_QWORD *)&v62[v63 - 16];
                                if (v64)
                                  MEMORY[0x20BD002D4](v64, 0x1000C8000313F17);
                              }
                              v63 -= 16;
                            }
                            while (v63);
                            v62 = (char *)v93;
                          }
                          if (v62 != (char *)v94)
                            free(v62);
                          if (!(_BYTE)v76)
                          {
                            v65 = v77;
                            v77 = 0;
                            if (v65)
                              (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
                          }
                          if (!(_BYTE)v79)
                          {
                            v66 = v80;
                            v80 = 0;
                            if (v66)
                              (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
                          }
                          v44 = v85;
                        }
                        if (v44)
                        {
                          if (!(_BYTE)v82)
                          {
                            v67 = v83;
                            v83 = 0;
                            if (v67)
                              (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
                          }
                        }
                        if (BYTE8(v92))
                        {
                          if (!(_BYTE)v91)
                          {
                            v68 = *((_QWORD *)&v91 + 1);
                            *((_QWORD *)&v91 + 1) = 0;
                            if (v68)
                              (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
                          }
                        }
                        return v14 & 0xFFFFFFFFFFFFFFFBLL;
                      }
                    }
                  }
                }
                v14 = 0;
              }
            }
          }
          else
          {
            v14 = 0;
            v93 = 0uLL;
          }
        }
        else
        {
          v93 = 0uLL;
        }
      }
    }
    return v14 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v8 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v91, v6);
  v9 = DWORD2(v93);
  if (v8)
  {
    if (DWORD2(v93) <= 0x40)
    {
      if ((_QWORD)v93 == ~(-1 << (BYTE8(v93) - 1)))
      {
        v10 = 1;
LABEL_14:
        v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 32 * v10 + 24) | 4;
        goto LABEL_15;
      }
      if ((_QWORD)v93 != 1 << (BYTE8(v93) - 1))
        goto LABEL_21;
LABEL_12:
      v10 = 0;
      goto LABEL_14;
    }
    v2 = (DWORD2(v93) - 1);
    if (((*(_QWORD *)(v93 + 8 * (v2 >> 6)) >> (BYTE8(v93) - 1)) & 1) != 0)
    {
      if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v93) == (_DWORD)v2)
        goto LABEL_12;
      LODWORD(v10) = 1;
    }
    else
    {
      v10 = 1;
      if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v93) == (_DWORD)v2)
        goto LABEL_14;
    }
    v11 = v93;
    if ((_QWORD)v93)
      goto LABEL_17;
    goto LABEL_20;
  }
LABEL_15:
  LODWORD(v10) = v8 ^ 1;
  if (v9 < 0x41 || (v11 = v93) == 0)
  {
LABEL_20:
    if (!(_DWORD)v10)
      return v2;
    goto LABEL_21;
  }
LABEL_17:
  MEMORY[0x20BD002D4](v11, 0x1000C8000313F17);
  if ((v10 & 1) != 0)
    goto LABEL_21;
  return v2;
}

uint64_t mlir::arith::MaxUIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t canMapOperands;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t Value;
  int v22;
  const void **v23;
  unsigned int v24;
  unsigned int v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  const void **v33;
  unsigned int v34;
  unsigned int v35;
  const void *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t Type;
  int v44;
  unint64_t NumElements;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  const void **v54;
  unsigned int v55;
  unsigned int v56;
  const void *v57;
  char *Address;
  llvm::APInt *v59;
  unsigned int v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  unsigned int v70;
  const void *v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 v85;
  _QWORD v86[2];
  _QWORD *v87;
  uint64_t v88;
  char v89[8];
  unsigned int v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _OWORD v94[4];
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 == *(_QWORD *)(v3 + 56))
    return v4 | 4;
  DWORD2(v93) = 1;
  *(_QWORD *)&v93 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
  *(_QWORD *)&v91 = &v93;
  if (!v6)
    goto LABEL_17;
  v8 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v91, v6);
  v9 = v8;
  v10 = DWORD2(v93);
  if (v8)
  {
    if (DWORD2(v93))
    {
      if (DWORD2(v93) > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v93) != v10)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v93) != v10)
          {
            if ((_QWORD)v93)
              MEMORY[0x20BD002D4](v93, 0x1000C8000313F17);
LABEL_17:
            v12 = *(uint64_t **)(a2 + 40);
            canMapOperands = *v12;
            if (*v12
              && *(_UNKNOWN **)(*(_QWORD *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
            {
              v14 = *v12;
            }
            else
            {
              v14 = v12[1];
              if (!v14
                || *(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
              {
                if (canMapOperands)
                {
                  if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8))
                  {
                    v15 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8);
                    *(_QWORD *)&v93 = canMapOperands;
                    *((_QWORD *)&v93 + 1) = v15;
                    canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v93);
                  }
                  else
                  {
                    canMapOperands = 0;
                    v93 = 0uLL;
                  }
                }
                else
                {
                  v93 = 0uLL;
                }
                v14 = v12[1];
                if (v14)
                {
                  if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)v14 + 8))
                  {
                    v16 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)v14 + 8);
                    *(_QWORD *)&v93 = v14;
                    *((_QWORD *)&v93 + 1) = v16;
                    v17 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v93);
                    v14 = 0;
                    if (canMapOperands && v17 && canMapOperands == v17)
                    {
                      v18 = *v12;
                      if (*v12
                        && *(_UNKNOWN **)(*(_QWORD *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
                      {
                        v14 = *v12;
                      }
                      else
                      {
                        v19 = v12[1];
                        if (v19)
                        {
                          v20 = *(void **)(*(_QWORD *)v19 + 136);
                          if (v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
                            v14 = v12[1];
                          else
                            v14 = 0;
                          if (!v18 || v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
                            return v14 & 0xFFFFFFFFFFFFFFFBLL;
                          if (v20 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
                            && *(_UNKNOWN **)(*(_QWORD *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                          {
                            v76 = *v12;
                            v73 = v19;
                            Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v76);
                            if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v73))
                            {
                              mlir::IntegerAttr::getValue(&v76, (llvm::APInt *)&v82);
                              mlir::IntegerAttr::getValue(&v73, (llvm::APInt *)&v79);
                              v22 = llvm::APInt::compare((llvm::APInt *)&v82, (const llvm::APInt *)&v79);
                              if (v22 <= 0)
                                v23 = (const void **)&v79;
                              else
                                v23 = (const void **)&v82;
                              v24 = v83;
                              v25 = v80;
                              if (v22 <= 0)
                                v24 = v80;
                              DWORD2(v91) = v24;
                              if (v24 >= 0x41)
                              {
                                llvm::APInt::initSlowCase((llvm::APInt *)&v91, v23);
                                v24 = DWORD2(v91);
                                v25 = v80;
                                v23 = (const void **)&v91;
                              }
                              v26 = *v23;
                              DWORD2(v93) = v24;
                              *(_QWORD *)&v93 = v26;
                              LOBYTE(v94[0]) = 1;
                              if (v25 >= 0x41 && v79)
                                MEMORY[0x20BD002D4](v79, 0x1000C8000313F17);
                              if (v83 >= 0x41 && v82)
                                MEMORY[0x20BD002D4](v82, 0x1000C8000313F17);
                              v14 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v93);
                              if (!LOBYTE(v94[0]))
                                return v14 & 0xFFFFFFFFFFFFFFFBLL;
                              goto LABEL_60;
                            }
                          }
                          else
                          {
                            if (mlir::DenseElementsAttr::classof(*v12))
                              v27 = v18;
                            else
                              v27 = 0;
                            *(_QWORD *)&v93 = v27;
                            if (v27
                              && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v93)
                              && ((v28 = v12[1], !mlir::DenseElementsAttr::classof(v28)) ? (v29 = 0) : (v29 = v28),
                                  (*(_QWORD *)&v93 = v29) != 0
                               && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v93)))
                            {
                              v30 = v12[1];
                              v76 = *v12;
                              v73 = v30;
                              v31 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v76);
                              if (v31 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73))
                              {
                                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v76, (uint64_t)&v93);
                                v91 = v93;
                                v92 = v94[0];
                                mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v91, (llvm::APInt *)&v82);
                                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v73, (uint64_t)&v93);
                                v91 = v93;
                                v92 = v94[0];
                                mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v91, (llvm::APInt *)&v79);
                                v32 = llvm::APInt::compare((llvm::APInt *)&v82, (const llvm::APInt *)&v79);
                                if (v32 <= 0)
                                  v33 = (const void **)&v79;
                                else
                                  v33 = (const void **)&v82;
                                v34 = v83;
                                v35 = v80;
                                if (v32 <= 0)
                                  v34 = v80;
                                DWORD2(v91) = v34;
                                if (v34 >= 0x41)
                                {
                                  llvm::APInt::initSlowCase((llvm::APInt *)&v91, v33);
                                  v34 = DWORD2(v91);
                                  v35 = v80;
                                  v33 = (const void **)&v91;
                                }
                                v36 = *v33;
                                DWORD2(v93) = v34;
                                *(_QWORD *)&v93 = v36;
                                LOBYTE(v94[0]) = 1;
                                if (v35 >= 0x41 && v79)
                                  MEMORY[0x20BD002D4](v79, 0x1000C8000313F17);
                                if (v83 >= 0x41 && v82)
                                  MEMORY[0x20BD002D4](v82, 0x1000C8000313F17);
                                v37 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
                                v14 = mlir::DenseElementsAttr::get(canMapOperands, v37, (llvm::APInt *)&v93, 1);
                                if (!LOBYTE(v94[0]))
                                  return v14 & 0xFFFFFFFFFFFFFFFBLL;
LABEL_60:
                                if (DWORD2(v93) >= 0x41 && (_QWORD)v93)
                                  MEMORY[0x20BD002D4](v93, 0x1000C8000313F17);
                                return v14 & 0xFFFFFFFFFFFFFFFBLL;
                              }
                            }
                            else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v12 + 8)
                                   && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v12[1] + 8))
                            {
                              v38 = (_QWORD *)*v12;
                              v39 = *v12 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v38 + 8) : 0;
                              v87 = v38;
                              v88 = v39;
                              v40 = (_QWORD *)v12[1];
                              v41 = v40 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v40 + 8) : 0;
                              v86[0] = v40;
                              v86[1] = v41;
                              Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v87);
                              if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v86))
                              {
                                mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v87, (uint64_t)&v91);
                                mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v86, (uint64_t)&v82);
                                v14 = 0;
                                v44 = v85;
                                if (BYTE8(v92) && v85)
                                {
                                  LOWORD(v79) = v91;
                                  if ((_BYTE)v91)
                                    v80 = *((_QWORD *)&v91 + 1);
                                  else
                                    (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)&v91 + 1) + 16))(&v80);
                                  v81 = v92;
                                  LOWORD(v76) = v82;
                                  if ((_BYTE)v82)
                                    v77 = v83;
                                  else
                                    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v83 + 16))(&v77);
                                  v78 = v84;
                                  *(_QWORD *)&v93 = v94;
                                  *((_QWORD *)&v93 + 1) = 0x400000000;
                                  NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v87, v88);
                                  llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v93, NumElements);
                                  v46 = mlir::ElementsAttr::getNumElements((uint64_t)v87, v88);
                                  if (v46)
                                  {
                                    v47 = v46;
                                    v48 = v81;
                                    while (1)
                                    {
                                      if (BYTE1(v79))
                                        v49 = 0;
                                      else
                                        v49 = v48;
                                      if ((_BYTE)v79)
                                      {
                                        v50 = v80 + 16 * v49;
                                        v72 = *(_DWORD *)(v50 + 8);
                                        if (v72 > 0x40)
                                          llvm::APInt::initSlowCase((llvm::APInt *)&v71, (const void **)v50);
                                        else
                                          v71 = *(const void **)v50;
                                      }
                                      else
                                      {
                                        (*(void (**)(const void **__return_ptr))(*(_QWORD *)v80 + 24))(&v71);
                                      }
                                      if (BYTE1(v76))
                                        v51 = 0;
                                      else
                                        v51 = v78;
                                      if ((_BYTE)v76)
                                      {
                                        v52 = v77 + 16 * v51;
                                        v70 = *(_DWORD *)(v52 + 8);
                                        if (v70 > 0x40)
                                          llvm::APInt::initSlowCase((llvm::APInt *)&v69, (const void **)v52);
                                        else
                                          v69 = *(const void **)v52;
                                      }
                                      else
                                      {
                                        (*(void (**)(const void **__return_ptr))(*(_QWORD *)v77 + 24))(&v69);
                                      }
                                      v53 = llvm::APInt::compare((llvm::APInt *)&v71, (const llvm::APInt *)&v69);
                                      if (v53 <= 0)
                                        v54 = &v69;
                                      else
                                        v54 = &v71;
                                      v55 = v72;
                                      v56 = v70;
                                      if (v53 <= 0)
                                        v55 = v70;
                                      v90 = v55;
                                      if (v55 >= 0x41)
                                      {
                                        llvm::APInt::initSlowCase((llvm::APInt *)v89, v54);
                                        v55 = v90;
                                        v56 = v70;
                                        v54 = (const void **)v89;
                                      }
                                      v57 = *v54;
                                      v74 = v55;
                                      v73 = (uint64_t)v57;
                                      v75 = 1;
                                      if (v56 >= 0x41 && v69)
                                        MEMORY[0x20BD002D4](v69, 0x1000C8000313F17);
                                      if (v72 >= 0x41 && v71)
                                        MEMORY[0x20BD002D4](v71, 0x1000C8000313F17);
                                      if (!v75)
                                        break;
                                      Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v93, (unint64_t)&v73, 1);
                                      v59 = (llvm::APInt *)(v93 + 16 * DWORD2(v93));
                                      v60 = *((_DWORD *)Address + 2);
                                      *((_DWORD *)v59 + 2) = v60;
                                      if (v60 > 0x40)
                                        llvm::APInt::initSlowCase(v59, (const void **)Address);
                                      else
                                        *(_QWORD *)v59 = *(_QWORD *)Address;
                                      ++DWORD2(v93);
                                      if (v75 && v74 >= 0x41 && v73)
                                        MEMORY[0x20BD002D4](v73, 0x1000C8000313F17);
                                      v48 = ++v81;
                                      ++v78;
                                      if (!--v47)
                                        goto LABEL_154;
                                    }
                                    v14 = 0;
                                  }
                                  else
                                  {
LABEL_154:
                                    v61 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
                                    v14 = mlir::DenseElementsAttr::get(canMapOperands, v61, (llvm::APInt *)v93, DWORD2(v93));
                                  }
                                  v62 = (char *)v93;
                                  if (DWORD2(v93))
                                  {
                                    v63 = 16 * DWORD2(v93);
                                    do
                                    {
                                      if (*(_DWORD *)&v62[v63 - 8] >= 0x41u)
                                      {
                                        v64 = *(_QWORD *)&v62[v63 - 16];
                                        if (v64)
                                          MEMORY[0x20BD002D4](v64, 0x1000C8000313F17);
                                      }
                                      v63 -= 16;
                                    }
                                    while (v63);
                                    v62 = (char *)v93;
                                  }
                                  if (v62 != (char *)v94)
                                    free(v62);
                                  if (!(_BYTE)v76)
                                  {
                                    v65 = v77;
                                    v77 = 0;
                                    if (v65)
                                      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
                                  }
                                  if (!(_BYTE)v79)
                                  {
                                    v66 = v80;
                                    v80 = 0;
                                    if (v66)
                                      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
                                  }
                                  v44 = v85;
                                }
                                if (v44)
                                {
                                  if (!(_BYTE)v82)
                                  {
                                    v67 = v83;
                                    v83 = 0;
                                    if (v67)
                                      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
                                  }
                                }
                                if (BYTE8(v92))
                                {
                                  if (!(_BYTE)v91)
                                  {
                                    v68 = *((_QWORD *)&v91 + 1);
                                    *((_QWORD *)&v91 + 1) = 0;
                                    if (v68)
                                      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
                                  }
                                }
                                return v14 & 0xFFFFFFFFFFFFFFFBLL;
                              }
                            }
                          }
                        }
                        v14 = 0;
                      }
                    }
                  }
                  else
                  {
                    v14 = 0;
                    v93 = 0uLL;
                  }
                }
                else
                {
                  v93 = 0uLL;
                }
              }
            }
            return v14 & 0xFFFFFFFFFFFFFFFBLL;
          }
          v11 = 0;
          goto LABEL_12;
        }
      }
      else
      {
        v11 = v93;
        if ((_QWORD)v93 != 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v93))
        {
          if ((_QWORD)v93)
            goto LABEL_17;
          goto LABEL_12;
        }
      }
    }
    v11 = 1;
LABEL_12:
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 32 * v11 + 24) | 4;
  }
  if (v10 >= 0x41 && (_QWORD)v93)
    MEMORY[0x20BD002D4](v93, 0x1000C8000313F17);
  if ((v9 & 1) == 0)
    goto LABEL_17;
  return v2;
}

uint64_t mlir::arith::MinimumFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  void *canMapOperands;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  llvm::APFloatBase *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t Value;
  llvm::APFloatBase *v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t Type;
  int v35;
  unint64_t NumElements;
  llvm::APFloatBase *v37;
  llvm::APFloatBase *v38;
  void **v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  void **v44;
  char *v45;
  uint64_t v46;
  llvm::detail::DoubleAPFloat *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  const llvm::detail::DoubleAPFloat *v54;
  void *v55;
  uint64_t v56;
  char *v57;
  const llvm::detail::DoubleAPFloat *v58;
  void *v59;
  void *v60;
  llvm::APFloatBase *v61;
  llvm::APFloatBase *v62;
  char *Address;
  llvm::detail::IEEEFloat *v64;
  const llvm::detail::DoubleAPFloat *v65;
  void *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void *v70;
  char *v71;
  uint64_t v72;
  llvm::detail::DoubleAPFloat *v73;
  llvm::APFloatBase *v74;
  llvm::APFloatBase *v75;
  llvm::APFloatBase *v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  llvm::APFloatBase *v80;
  uint64_t v81;
  char v82;
  char v83;
  llvm::APFloatBase *v84;
  uint64_t v85;
  uint64_t v86;
  llvm::APFloatBase *v87;
  uint64_t v88;
  unsigned __int8 v89;
  _QWORD v90[2];
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[3];
  uint64_t v95;
  _QWORD v96[3];
  unint64_t v97;
  _QWORD v98[3];
  char v99;
  void *v100;
  uint64_t v101;
  _BYTE v102[16];
  char v103;
  _BYTE v104[8];
  _QWORD v105[2];
  char v106;
  char v107[8];
  _QWORD v108[5];

  v108[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3 == *(_QWORD *)(v2 + 56))
    return v3 | 4;
  v5 = *(uint64_t **)(a2 + 48);
  v6 = v5[1];
  v100 = mlir::m_PosInfFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke;
  if (v6)
  {
    if ((mlir::detail::constant_float_predicate_matcher::match((llvm::APFloatBase *)&v100, v6) & 1) != 0)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
      return v3 | 4;
    }
    v5 = *(uint64_t **)(a2 + 48);
  }
  canMapOperands = (void *)*v5;
  if (*v5
    && *(_UNKNOWN **)(*(_QWORD *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    v10 = *v5;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v10 = v5[1];
  if (v10 && *(_UNKNOWN **)(*(_QWORD *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8))
    {
      v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8);
      v100 = canMapOperands;
      v101 = v11;
      canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
    }
    else
    {
      canMapOperands = 0;
      v100 = 0;
      v101 = 0;
    }
  }
  else
  {
    v100 = 0;
    v101 = 0;
  }
  v12 = (_QWORD *)v5[1];
  if (!v12)
  {
    v100 = 0;
    v101 = 0;
    goto LABEL_75;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v12 + 8))
  {
    v100 = 0;
    v101 = 0;
    goto LABEL_75;
  }
  v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v12 + 8);
  v100 = v12;
  v101 = v13;
  v14 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
  v10 = 0;
  if (!canMapOperands || !v14 || canMapOperands != (void *)v14)
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  v15 = (void *)*v5;
  if (*v5 && *(_UNKNOWN **)(*(_QWORD *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    v10 = *v5;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v16 = v5[1];
  if (!v16)
  {
LABEL_75:
    v10 = 0;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v17 = *(void **)(*(_QWORD *)v16 + 136);
  if (v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    v10 = v5[1];
  else
    v10 = 0;
  if (!v15 || v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  if (v17 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || *(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v5))
      v22 = v15;
    else
      v22 = 0;
    v100 = v22;
    if (v22
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100)
      && ((v23 = v5[1], !mlir::DenseElementsAttr::classof(v23)) ? (v24 = 0) : (v24 = (void *)v23),
          (v100 = v24) != 0 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100)))
    {
      v25 = v5[1];
      v86 = *v5;
      v95 = v25;
      Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v86);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v95))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v86, (uint64_t)v107);
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v95, (uint64_t)v104);
        v27 = (llvm::APFloatBase *)llvm::minimum((llvm *)v107, (const llvm::APFloat *)v104, (uint64_t)&v97);
        v28 = (void *)v98[0];
        v29 = llvm::APFloatBase::PPCDoubleDouble(v27);
        if (v29 == v28)
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v101, v98);
        else
          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v101, (uint64_t)v98);
        v103 = 1;
        if (v29 == (void *)v98[0])
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
        if (v29 == (void *)v105[0])
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v105);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v105);
        if (v29 == (void *)v108[0])
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
        if (v103)
        {
          v78 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
          v10 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v78, (uint64_t)&v100, 1);
          if (!v103)
            return v10 & 0xFFFFFFFFFFFFFFFBLL;
          if (v29 != (void *)v101)
            goto LABEL_69;
          goto LABEL_177;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v5 + 8)
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v5[1] + 8))
    {
      v30 = (_QWORD *)*v5;
      v31 = *v5 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8) : 0;
      v91 = v30;
      v92 = v31;
      v32 = (_QWORD *)v5[1];
      v33 = v32 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v32 + 8) : 0;
      v90[0] = v32;
      v90[1] = v33;
      Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v91);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v90))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v91, (uint64_t)v104);
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v90, (uint64_t)&v86);
        v10 = 0;
        v35 = v89;
        if (v106 && v89)
        {
          v82 = v104[0];
          v83 = v104[1];
          if (v104[0])
            v84 = (llvm::APFloatBase *)v105[0];
          else
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v105[0] + 16))(&v84);
          v85 = v105[1];
          v79 = v86;
          if ((_BYTE)v86)
            v80 = v87;
          else
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v87 + 16))(&v80);
          v81 = v88;
          v100 = v102;
          v101 = 0x400000000;
          NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v91, v92);
          if (NumElements > HIDWORD(v101))
          {
            v97 = 0;
            v37 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v100, v102, NumElements, 32, &v97);
            v38 = v37;
            v39 = (void **)v100;
            v40 = v101;
            if ((_DWORD)v101)
            {
              v41 = llvm::APFloatBase::PPCDoubleDouble(v37);
              v42 = (_QWORD *)((char *)v38 + 8);
              v43 = 32 * v40;
              v44 = v39 + 1;
              do
              {
                while (v41 == *v44)
                {
                  v42 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v42, v44) + 4;
                  v44 += 4;
                  v43 -= 32;
                  if (!v43)
                    goto LABEL_91;
                }
                v42 = (_QWORD *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v42, (uint64_t)v44) + 32);
                v44 += 4;
                v43 -= 32;
              }
              while (v43);
LABEL_91:
              v39 = (void **)v100;
              if ((_DWORD)v101)
              {
                v45 = (char *)v100 - 24;
                v46 = 32 * v101;
                do
                {
                  while (1)
                  {
                    v47 = (llvm::detail::DoubleAPFloat *)&v45[v46];
                    if (v41 != *(void **)&v45[v46])
                      break;
                    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v47);
                    v46 -= 32;
                    if (!v46)
                      goto LABEL_96;
                  }
                  llvm::detail::IEEEFloat::~IEEEFloat(v47);
                  v46 -= 32;
                }
                while (v46);
LABEL_96:
                v39 = (void **)v100;
              }
            }
            v48 = v97;
            if (v39 != (void **)v102)
              free(v39);
            v100 = v38;
            HIDWORD(v101) = v48;
          }
          v49 = mlir::ElementsAttr::getNumElements((uint64_t)v91, v92);
          if (v49)
          {
            v50 = v49;
            v51 = v85;
            while (1)
            {
              v52 = v83 ? 0 : v51;
              if (v82)
              {
                v53 = (char *)v84 + 32 * v52;
                v55 = (void *)*((_QWORD *)v53 + 1);
                v54 = (const llvm::detail::DoubleAPFloat *)(v53 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v84) == v55)
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v96, v54);
                else
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v96, v54);
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v84 + 24))(&v95);
              }
              v56 = HIBYTE(v79) ? 0 : v81;
              if ((_BYTE)v79)
              {
                v57 = (char *)v80 + 32 * v56;
                v59 = (void *)*((_QWORD *)v57 + 1);
                v58 = (const llvm::detail::DoubleAPFloat *)(v57 + 8);
                v60 = llvm::APFloatBase::PPCDoubleDouble(v80);
                if (v60 == v59)
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v94, v58);
                else
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v94, v58);
              }
              else
              {
                v61 = (llvm::APFloatBase *)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v80 + 24))(&v93);
                v60 = llvm::APFloatBase::PPCDoubleDouble(v61);
              }
              llvm::minimum((llvm *)&v95, (const llvm::APFloat *)&v93, (uint64_t)v107);
              if (v60 == (void *)v108[0])
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v98, v108);
              else
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v98, (uint64_t)v108);
              v99 = 1;
              if (v60 == (void *)v108[0])
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
              if (v60 == (void *)v94[0])
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v94);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v94);
              if (v60 == (void *)v96[0])
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v96);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v96);
              if (!v99)
                break;
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v100, (unint64_t)&v97, 1);
              v64 = (llvm::detail::IEEEFloat *)((char *)v100 + 32 * v101 + 8);
              v66 = (void *)*((_QWORD *)Address + 1);
              v65 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              if (v60 == v66)
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v64, v65);
              else
                llvm::detail::IEEEFloat::IEEEFloat(v64, v65);
              LODWORD(v101) = v101 + 1;
              if (v99)
              {
                if (v60 == (void *)v98[0])
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
                else
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
              }
              v51 = ++v85;
              ++v81;
              if (!--v50)
                goto LABEL_139;
            }
            v10 = 0;
          }
          else
          {
LABEL_139:
            v67 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
            v62 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v67, (uint64_t)v100, v101);
            v10 = (uint64_t)v62;
          }
          v68 = (char *)v100;
          v69 = v101;
          if ((_DWORD)v101)
          {
            v70 = llvm::APFloatBase::PPCDoubleDouble(v62);
            v71 = v68 - 24;
            v72 = 32 * v69;
            do
            {
              while (1)
              {
                v73 = (llvm::detail::DoubleAPFloat *)&v71[v72];
                if (v70 != *(void **)&v71[v72])
                  break;
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v73);
                v72 -= 32;
                if (!v72)
                  goto LABEL_146;
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v73);
              v72 -= 32;
            }
            while (v72);
LABEL_146:
            v68 = (char *)v100;
          }
          if (v68 != v102)
            free(v68);
          if (!(_BYTE)v79)
          {
            v74 = v80;
            v80 = 0;
            if (v74)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v74 + 8))(v74);
          }
          if (!v82)
          {
            v75 = v84;
            v84 = 0;
            if (v75)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v75 + 8))(v75);
          }
          v35 = v89;
        }
        if (v35)
        {
          if (!(_BYTE)v86)
          {
            v76 = v87;
            v87 = 0;
            if (v76)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v76 + 8))(v76);
          }
        }
        if (v106)
        {
          if (!v104[0])
          {
            v77 = v105[0];
            v105[0] = 0;
            if (v77)
              (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
          }
        }
        return v10 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_75;
  }
  v86 = *v5;
  v95 = v16;
  v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v86);
  if (v18 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v95))
    goto LABEL_75;
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v86, (uint64_t)v107);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v95, (uint64_t)v104);
  v19 = (llvm::APFloatBase *)llvm::minimum((llvm *)v107, (const llvm::APFloat *)v104, (uint64_t)&v97);
  v20 = (void *)v98[0];
  v21 = llvm::APFloatBase::PPCDoubleDouble(v19);
  if (v21 == v20)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v101, v98);
  else
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v101, (uint64_t)v98);
  v103 = 1;
  if (v21 == (void *)v98[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
  if (v21 == (void *)v105[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v105);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v105);
  if (v21 == (void *)v108[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
  if (!v103)
    goto LABEL_75;
  v10 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v100);
  if (v103)
  {
    if (v21 != (void *)v101)
    {
LABEL_69:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v101);
      return v10 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_177:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v101);
  }
  return v10 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::MinNumFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  void *canMapOperands;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  llvm::APFloatBase *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t Value;
  llvm::APFloatBase *v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t Type;
  int v35;
  unint64_t NumElements;
  llvm::APFloatBase *v37;
  llvm::APFloatBase *v38;
  void **v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  void **v44;
  char *v45;
  uint64_t v46;
  llvm::detail::DoubleAPFloat *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  const llvm::detail::DoubleAPFloat *v54;
  void *v55;
  uint64_t v56;
  char *v57;
  const llvm::detail::DoubleAPFloat *v58;
  void *v59;
  void *v60;
  llvm::APFloatBase *v61;
  llvm::APFloatBase *v62;
  char *Address;
  llvm::detail::IEEEFloat *v64;
  const llvm::detail::DoubleAPFloat *v65;
  void *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void *v70;
  char *v71;
  uint64_t v72;
  llvm::detail::DoubleAPFloat *v73;
  llvm::APFloatBase *v74;
  llvm::APFloatBase *v75;
  llvm::APFloatBase *v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  llvm::APFloatBase *v80;
  uint64_t v81;
  char v82;
  char v83;
  llvm::APFloatBase *v84;
  uint64_t v85;
  uint64_t v86;
  llvm::APFloatBase *v87;
  uint64_t v88;
  unsigned __int8 v89;
  _QWORD v90[2];
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[3];
  uint64_t v95;
  _QWORD v96[3];
  unint64_t v97;
  _QWORD v98[3];
  char v99;
  void *v100;
  uint64_t v101;
  _BYTE v102[16];
  char v103;
  _BYTE v104[8];
  _QWORD v105[2];
  char v106;
  char v107[8];
  _QWORD v108[5];

  v108[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3 == *(_QWORD *)(v2 + 56))
    return v3 | 4;
  v5 = *(uint64_t **)(a2 + 48);
  v6 = v5[1];
  v100 = mlir::m_PosInfFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke;
  if (v6)
  {
    if ((mlir::detail::constant_float_predicate_matcher::match((llvm::APFloatBase *)&v100, v6) & 1) != 0)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
      return v3 | 4;
    }
    v5 = *(uint64_t **)(a2 + 48);
  }
  canMapOperands = (void *)*v5;
  if (*v5
    && *(_UNKNOWN **)(*(_QWORD *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    v10 = *v5;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v10 = v5[1];
  if (v10 && *(_UNKNOWN **)(*(_QWORD *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8))
    {
      v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8);
      v100 = canMapOperands;
      v101 = v11;
      canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
    }
    else
    {
      canMapOperands = 0;
      v100 = 0;
      v101 = 0;
    }
  }
  else
  {
    v100 = 0;
    v101 = 0;
  }
  v12 = (_QWORD *)v5[1];
  if (!v12)
  {
    v100 = 0;
    v101 = 0;
    goto LABEL_75;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v12 + 8))
  {
    v100 = 0;
    v101 = 0;
    goto LABEL_75;
  }
  v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v12 + 8);
  v100 = v12;
  v101 = v13;
  v14 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
  v10 = 0;
  if (!canMapOperands || !v14 || canMapOperands != (void *)v14)
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  v15 = (void *)*v5;
  if (*v5 && *(_UNKNOWN **)(*(_QWORD *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    v10 = *v5;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v16 = v5[1];
  if (!v16)
  {
LABEL_75:
    v10 = 0;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v17 = *(void **)(*(_QWORD *)v16 + 136);
  if (v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    v10 = v5[1];
  else
    v10 = 0;
  if (!v15 || v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  if (v17 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || *(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v5))
      v22 = v15;
    else
      v22 = 0;
    v100 = v22;
    if (v22
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100)
      && ((v23 = v5[1], !mlir::DenseElementsAttr::classof(v23)) ? (v24 = 0) : (v24 = (void *)v23),
          (v100 = v24) != 0 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100)))
    {
      v25 = v5[1];
      v86 = *v5;
      v95 = v25;
      Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v86);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v95))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v86, (uint64_t)v107);
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v95, (uint64_t)v104);
        v27 = (llvm::APFloatBase *)llvm::minnum((llvm *)v107, (const llvm::APFloat *)v104, (uint64_t)&v97);
        v28 = (void *)v98[0];
        v29 = llvm::APFloatBase::PPCDoubleDouble(v27);
        if (v29 == v28)
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v101, v98);
        else
          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v101, (uint64_t)v98);
        v103 = 1;
        if (v29 == (void *)v98[0])
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
        if (v29 == (void *)v105[0])
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v105);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v105);
        if (v29 == (void *)v108[0])
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
        if (v103)
        {
          v78 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
          v10 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v78, (uint64_t)&v100, 1);
          if (!v103)
            return v10 & 0xFFFFFFFFFFFFFFFBLL;
          if (v29 != (void *)v101)
            goto LABEL_69;
          goto LABEL_177;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v5 + 8)
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v5[1] + 8))
    {
      v30 = (_QWORD *)*v5;
      v31 = *v5 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8) : 0;
      v91 = v30;
      v92 = v31;
      v32 = (_QWORD *)v5[1];
      v33 = v32 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v32 + 8) : 0;
      v90[0] = v32;
      v90[1] = v33;
      Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v91);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v90))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v91, (uint64_t)v104);
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v90, (uint64_t)&v86);
        v10 = 0;
        v35 = v89;
        if (v106 && v89)
        {
          v82 = v104[0];
          v83 = v104[1];
          if (v104[0])
            v84 = (llvm::APFloatBase *)v105[0];
          else
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v105[0] + 16))(&v84);
          v85 = v105[1];
          v79 = v86;
          if ((_BYTE)v86)
            v80 = v87;
          else
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v87 + 16))(&v80);
          v81 = v88;
          v100 = v102;
          v101 = 0x400000000;
          NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v91, v92);
          if (NumElements > HIDWORD(v101))
          {
            v97 = 0;
            v37 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v100, v102, NumElements, 32, &v97);
            v38 = v37;
            v39 = (void **)v100;
            v40 = v101;
            if ((_DWORD)v101)
            {
              v41 = llvm::APFloatBase::PPCDoubleDouble(v37);
              v42 = (_QWORD *)((char *)v38 + 8);
              v43 = 32 * v40;
              v44 = v39 + 1;
              do
              {
                while (v41 == *v44)
                {
                  v42 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v42, v44) + 4;
                  v44 += 4;
                  v43 -= 32;
                  if (!v43)
                    goto LABEL_91;
                }
                v42 = (_QWORD *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v42, (uint64_t)v44) + 32);
                v44 += 4;
                v43 -= 32;
              }
              while (v43);
LABEL_91:
              v39 = (void **)v100;
              if ((_DWORD)v101)
              {
                v45 = (char *)v100 - 24;
                v46 = 32 * v101;
                do
                {
                  while (1)
                  {
                    v47 = (llvm::detail::DoubleAPFloat *)&v45[v46];
                    if (v41 != *(void **)&v45[v46])
                      break;
                    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v47);
                    v46 -= 32;
                    if (!v46)
                      goto LABEL_96;
                  }
                  llvm::detail::IEEEFloat::~IEEEFloat(v47);
                  v46 -= 32;
                }
                while (v46);
LABEL_96:
                v39 = (void **)v100;
              }
            }
            v48 = v97;
            if (v39 != (void **)v102)
              free(v39);
            v100 = v38;
            HIDWORD(v101) = v48;
          }
          v49 = mlir::ElementsAttr::getNumElements((uint64_t)v91, v92);
          if (v49)
          {
            v50 = v49;
            v51 = v85;
            while (1)
            {
              v52 = v83 ? 0 : v51;
              if (v82)
              {
                v53 = (char *)v84 + 32 * v52;
                v55 = (void *)*((_QWORD *)v53 + 1);
                v54 = (const llvm::detail::DoubleAPFloat *)(v53 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v84) == v55)
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v96, v54);
                else
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v96, v54);
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v84 + 24))(&v95);
              }
              v56 = HIBYTE(v79) ? 0 : v81;
              if ((_BYTE)v79)
              {
                v57 = (char *)v80 + 32 * v56;
                v59 = (void *)*((_QWORD *)v57 + 1);
                v58 = (const llvm::detail::DoubleAPFloat *)(v57 + 8);
                v60 = llvm::APFloatBase::PPCDoubleDouble(v80);
                if (v60 == v59)
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v94, v58);
                else
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v94, v58);
              }
              else
              {
                v61 = (llvm::APFloatBase *)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v80 + 24))(&v93);
                v60 = llvm::APFloatBase::PPCDoubleDouble(v61);
              }
              llvm::minnum((llvm *)&v95, (const llvm::APFloat *)&v93, (uint64_t)v107);
              if (v60 == (void *)v108[0])
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v98, v108);
              else
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v98, (uint64_t)v108);
              v99 = 1;
              if (v60 == (void *)v108[0])
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
              if (v60 == (void *)v94[0])
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v94);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v94);
              if (v60 == (void *)v96[0])
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v96);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v96);
              if (!v99)
                break;
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v100, (unint64_t)&v97, 1);
              v64 = (llvm::detail::IEEEFloat *)((char *)v100 + 32 * v101 + 8);
              v66 = (void *)*((_QWORD *)Address + 1);
              v65 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              if (v60 == v66)
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v64, v65);
              else
                llvm::detail::IEEEFloat::IEEEFloat(v64, v65);
              LODWORD(v101) = v101 + 1;
              if (v99)
              {
                if (v60 == (void *)v98[0])
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
                else
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
              }
              v51 = ++v85;
              ++v81;
              if (!--v50)
                goto LABEL_139;
            }
            v10 = 0;
          }
          else
          {
LABEL_139:
            v67 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
            v62 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v67, (uint64_t)v100, v101);
            v10 = (uint64_t)v62;
          }
          v68 = (char *)v100;
          v69 = v101;
          if ((_DWORD)v101)
          {
            v70 = llvm::APFloatBase::PPCDoubleDouble(v62);
            v71 = v68 - 24;
            v72 = 32 * v69;
            do
            {
              while (1)
              {
                v73 = (llvm::detail::DoubleAPFloat *)&v71[v72];
                if (v70 != *(void **)&v71[v72])
                  break;
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v73);
                v72 -= 32;
                if (!v72)
                  goto LABEL_146;
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v73);
              v72 -= 32;
            }
            while (v72);
LABEL_146:
            v68 = (char *)v100;
          }
          if (v68 != v102)
            free(v68);
          if (!(_BYTE)v79)
          {
            v74 = v80;
            v80 = 0;
            if (v74)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v74 + 8))(v74);
          }
          if (!v82)
          {
            v75 = v84;
            v84 = 0;
            if (v75)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v75 + 8))(v75);
          }
          v35 = v89;
        }
        if (v35)
        {
          if (!(_BYTE)v86)
          {
            v76 = v87;
            v87 = 0;
            if (v76)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v76 + 8))(v76);
          }
        }
        if (v106)
        {
          if (!v104[0])
          {
            v77 = v105[0];
            v105[0] = 0;
            if (v77)
              (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
          }
        }
        return v10 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_75;
  }
  v86 = *v5;
  v95 = v16;
  v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v86);
  if (v18 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v95))
    goto LABEL_75;
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v86, (uint64_t)v107);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v95, (uint64_t)v104);
  v19 = (llvm::APFloatBase *)llvm::minnum((llvm *)v107, (const llvm::APFloat *)v104, (uint64_t)&v97);
  v20 = (void *)v98[0];
  v21 = llvm::APFloatBase::PPCDoubleDouble(v19);
  if (v21 == v20)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v101, v98);
  else
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v101, (uint64_t)v98);
  v103 = 1;
  if (v21 == (void *)v98[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
  if (v21 == (void *)v105[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v105);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v105);
  if (v21 == (void *)v108[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
  if (!v103)
    goto LABEL_75;
  v10 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v100);
  if (v103)
  {
    if (v21 != (void *)v101)
    {
LABEL_69:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v101);
      return v10 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_177:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v101);
  }
  return v10 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::MinSIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t canMapOperands;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t Value;
  int v22;
  const void **v23;
  unsigned int v24;
  unsigned int v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  const void **v33;
  unsigned int v34;
  unsigned int v35;
  const void *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t Type;
  int v44;
  unint64_t NumElements;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  const void **v54;
  unsigned int v55;
  unsigned int v56;
  const void *v57;
  char *Address;
  llvm::APInt *v59;
  unsigned int v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  unsigned int v70;
  const void *v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 v85;
  _QWORD v86[2];
  _QWORD *v87;
  uint64_t v88;
  char v89[8];
  unsigned int v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _OWORD v94[4];
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 == *(_QWORD *)(v3 + 56))
    return v4 | 4;
  DWORD2(v93) = 1;
  *(_QWORD *)&v93 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
  *(_QWORD *)&v91 = &v93;
  if (!v6)
    goto LABEL_22;
  v8 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v91, v6);
  v9 = DWORD2(v93);
  if (!v8)
    goto LABEL_16;
  if (DWORD2(v93) <= 0x40)
  {
    v10 = 1;
    if ((_QWORD)v93 != 1 << (BYTE8(v93) - 1))
    {
      if ((_QWORD)v93 != ~(-1 << (BYTE8(v93) - 1)))
        goto LABEL_22;
      goto LABEL_14;
    }
LABEL_15:
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 32 * v10 + 24) | 4;
LABEL_16:
    LODWORD(v10) = v8 ^ 1;
    if (v9 >= 0x41)
    {
      v11 = v93;
      if ((_QWORD)v93)
      {
LABEL_18:
        MEMORY[0x20BD002D4](v11, 0x1000C8000313F17);
        if ((v10 & 1) == 0)
          return v2;
LABEL_22:
        v12 = *(uint64_t **)(a2 + 40);
        canMapOperands = *v12;
        if (*v12
          && *(_UNKNOWN **)(*(_QWORD *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          v14 = *v12;
        }
        else
        {
          v14 = v12[1];
          if (!v14
            || *(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
          {
            if (canMapOperands)
            {
              if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8))
              {
                v15 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8);
                *(_QWORD *)&v93 = canMapOperands;
                *((_QWORD *)&v93 + 1) = v15;
                canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v93);
              }
              else
              {
                canMapOperands = 0;
                v93 = 0uLL;
              }
            }
            else
            {
              v93 = 0uLL;
            }
            v14 = v12[1];
            if (v14)
            {
              if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)v14 + 8))
              {
                v16 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)v14 + 8);
                *(_QWORD *)&v93 = v14;
                *((_QWORD *)&v93 + 1) = v16;
                v17 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v93);
                v14 = 0;
                if (canMapOperands && v17 && canMapOperands == v17)
                {
                  v18 = *v12;
                  if (*v12
                    && *(_UNKNOWN **)(*(_QWORD *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
                  {
                    v14 = *v12;
                  }
                  else
                  {
                    v19 = v12[1];
                    if (v19)
                    {
                      v20 = *(void **)(*(_QWORD *)v19 + 136);
                      if (v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
                        v14 = v12[1];
                      else
                        v14 = 0;
                      if (!v18 || v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
                        return v14 & 0xFFFFFFFFFFFFFFFBLL;
                      if (v20 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
                        && *(_UNKNOWN **)(*(_QWORD *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                      {
                        v76 = *v12;
                        v73 = v19;
                        Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v76);
                        if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v73))
                        {
                          mlir::IntegerAttr::getValue(&v76, (llvm::APInt *)&v82);
                          mlir::IntegerAttr::getValue(&v73, (llvm::APInt *)&v79);
                          v22 = llvm::APInt::compareSigned((llvm::APInt *)&v82, (const llvm::APInt *)&v79);
                          if (v22 >= 0)
                            v23 = (const void **)&v79;
                          else
                            v23 = (const void **)&v82;
                          v24 = v83;
                          v25 = v80;
                          if (v22 >= 0)
                            v24 = v80;
                          DWORD2(v91) = v24;
                          if (v24 >= 0x41)
                          {
                            llvm::APInt::initSlowCase((llvm::APInt *)&v91, v23);
                            v24 = DWORD2(v91);
                            v25 = v80;
                            v23 = (const void **)&v91;
                          }
                          v26 = *v23;
                          DWORD2(v93) = v24;
                          *(_QWORD *)&v93 = v26;
                          LOBYTE(v94[0]) = 1;
                          if (v25 >= 0x41 && v79)
                            MEMORY[0x20BD002D4](v79, 0x1000C8000313F17);
                          if (v83 >= 0x41 && v82)
                            MEMORY[0x20BD002D4](v82, 0x1000C8000313F17);
                          v14 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v93);
                          if (!LOBYTE(v94[0]))
                            return v14 & 0xFFFFFFFFFFFFFFFBLL;
                          goto LABEL_65;
                        }
                      }
                      else
                      {
                        if (mlir::DenseElementsAttr::classof(*v12))
                          v27 = v18;
                        else
                          v27 = 0;
                        *(_QWORD *)&v93 = v27;
                        if (v27
                          && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v93)
                          && ((v28 = v12[1], !mlir::DenseElementsAttr::classof(v28)) ? (v29 = 0) : (v29 = v28),
                              (*(_QWORD *)&v93 = v29) != 0
                           && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v93)))
                        {
                          v30 = v12[1];
                          v76 = *v12;
                          v73 = v30;
                          v31 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v76);
                          if (v31 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73))
                          {
                            mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v76, (uint64_t)&v93);
                            v91 = v93;
                            v92 = v94[0];
                            mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v91, (llvm::APInt *)&v82);
                            mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v73, (uint64_t)&v93);
                            v91 = v93;
                            v92 = v94[0];
                            mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v91, (llvm::APInt *)&v79);
                            v32 = llvm::APInt::compareSigned((llvm::APInt *)&v82, (const llvm::APInt *)&v79);
                            if (v32 >= 0)
                              v33 = (const void **)&v79;
                            else
                              v33 = (const void **)&v82;
                            v34 = v83;
                            v35 = v80;
                            if (v32 >= 0)
                              v34 = v80;
                            DWORD2(v91) = v34;
                            if (v34 >= 0x41)
                            {
                              llvm::APInt::initSlowCase((llvm::APInt *)&v91, v33);
                              v34 = DWORD2(v91);
                              v35 = v80;
                              v33 = (const void **)&v91;
                            }
                            v36 = *v33;
                            DWORD2(v93) = v34;
                            *(_QWORD *)&v93 = v36;
                            LOBYTE(v94[0]) = 1;
                            if (v35 >= 0x41 && v79)
                              MEMORY[0x20BD002D4](v79, 0x1000C8000313F17);
                            if (v83 >= 0x41 && v82)
                              MEMORY[0x20BD002D4](v82, 0x1000C8000313F17);
                            v37 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
                            v14 = mlir::DenseElementsAttr::get(canMapOperands, v37, (llvm::APInt *)&v93, 1);
                            if (!LOBYTE(v94[0]))
                              return v14 & 0xFFFFFFFFFFFFFFFBLL;
LABEL_65:
                            if (DWORD2(v93) >= 0x41 && (_QWORD)v93)
                              MEMORY[0x20BD002D4](v93, 0x1000C8000313F17);
                            return v14 & 0xFFFFFFFFFFFFFFFBLL;
                          }
                        }
                        else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v12 + 8)
                               && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v12[1] + 8))
                        {
                          v38 = (_QWORD *)*v12;
                          v39 = *v12 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v38 + 8) : 0;
                          v87 = v38;
                          v88 = v39;
                          v40 = (_QWORD *)v12[1];
                          v41 = v40 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v40 + 8) : 0;
                          v86[0] = v40;
                          v86[1] = v41;
                          Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v87);
                          if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v86))
                          {
                            mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v87, (uint64_t)&v91);
                            mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v86, (uint64_t)&v82);
                            v14 = 0;
                            v44 = v85;
                            if (BYTE8(v92) && v85)
                            {
                              LOWORD(v79) = v91;
                              if ((_BYTE)v91)
                                v80 = *((_QWORD *)&v91 + 1);
                              else
                                (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)&v91 + 1) + 16))(&v80);
                              v81 = v92;
                              LOWORD(v76) = v82;
                              if ((_BYTE)v82)
                                v77 = v83;
                              else
                                (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v83 + 16))(&v77);
                              v78 = v84;
                              *(_QWORD *)&v93 = v94;
                              *((_QWORD *)&v93 + 1) = 0x400000000;
                              NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v87, v88);
                              llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v93, NumElements);
                              v46 = mlir::ElementsAttr::getNumElements((uint64_t)v87, v88);
                              if (v46)
                              {
                                v47 = v46;
                                v48 = v81;
                                while (1)
                                {
                                  if (BYTE1(v79))
                                    v49 = 0;
                                  else
                                    v49 = v48;
                                  if ((_BYTE)v79)
                                  {
                                    v50 = v80 + 16 * v49;
                                    v72 = *(_DWORD *)(v50 + 8);
                                    if (v72 > 0x40)
                                      llvm::APInt::initSlowCase((llvm::APInt *)&v71, (const void **)v50);
                                    else
                                      v71 = *(const void **)v50;
                                  }
                                  else
                                  {
                                    (*(void (**)(const void **__return_ptr))(*(_QWORD *)v80 + 24))(&v71);
                                  }
                                  if (BYTE1(v76))
                                    v51 = 0;
                                  else
                                    v51 = v78;
                                  if ((_BYTE)v76)
                                  {
                                    v52 = v77 + 16 * v51;
                                    v70 = *(_DWORD *)(v52 + 8);
                                    if (v70 > 0x40)
                                      llvm::APInt::initSlowCase((llvm::APInt *)&v69, (const void **)v52);
                                    else
                                      v69 = *(const void **)v52;
                                  }
                                  else
                                  {
                                    (*(void (**)(const void **__return_ptr))(*(_QWORD *)v77 + 24))(&v69);
                                  }
                                  v53 = llvm::APInt::compareSigned((llvm::APInt *)&v71, (const llvm::APInt *)&v69);
                                  if (v53 >= 0)
                                    v54 = &v69;
                                  else
                                    v54 = &v71;
                                  v55 = v72;
                                  v56 = v70;
                                  if (v53 >= 0)
                                    v55 = v70;
                                  v90 = v55;
                                  if (v55 >= 0x41)
                                  {
                                    llvm::APInt::initSlowCase((llvm::APInt *)v89, v54);
                                    v55 = v90;
                                    v56 = v70;
                                    v54 = (const void **)v89;
                                  }
                                  v57 = *v54;
                                  v74 = v55;
                                  v73 = (uint64_t)v57;
                                  v75 = 1;
                                  if (v56 >= 0x41 && v69)
                                    MEMORY[0x20BD002D4](v69, 0x1000C8000313F17);
                                  if (v72 >= 0x41 && v71)
                                    MEMORY[0x20BD002D4](v71, 0x1000C8000313F17);
                                  if (!v75)
                                    break;
                                  Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v93, (unint64_t)&v73, 1);
                                  v59 = (llvm::APInt *)(v93 + 16 * DWORD2(v93));
                                  v60 = *((_DWORD *)Address + 2);
                                  *((_DWORD *)v59 + 2) = v60;
                                  if (v60 > 0x40)
                                    llvm::APInt::initSlowCase(v59, (const void **)Address);
                                  else
                                    *(_QWORD *)v59 = *(_QWORD *)Address;
                                  ++DWORD2(v93);
                                  if (v75 && v74 >= 0x41 && v73)
                                    MEMORY[0x20BD002D4](v73, 0x1000C8000313F17);
                                  v48 = ++v81;
                                  ++v78;
                                  if (!--v47)
                                    goto LABEL_155;
                                }
                                v14 = 0;
                              }
                              else
                              {
LABEL_155:
                                v61 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
                                v14 = mlir::DenseElementsAttr::get(canMapOperands, v61, (llvm::APInt *)v93, DWORD2(v93));
                              }
                              v62 = (char *)v93;
                              if (DWORD2(v93))
                              {
                                v63 = 16 * DWORD2(v93);
                                do
                                {
                                  if (*(_DWORD *)&v62[v63 - 8] >= 0x41u)
                                  {
                                    v64 = *(_QWORD *)&v62[v63 - 16];
                                    if (v64)
                                      MEMORY[0x20BD002D4](v64, 0x1000C8000313F17);
                                  }
                                  v63 -= 16;
                                }
                                while (v63);
                                v62 = (char *)v93;
                              }
                              if (v62 != (char *)v94)
                                free(v62);
                              if (!(_BYTE)v76)
                              {
                                v65 = v77;
                                v77 = 0;
                                if (v65)
                                  (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
                              }
                              if (!(_BYTE)v79)
                              {
                                v66 = v80;
                                v80 = 0;
                                if (v66)
                                  (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
                              }
                              v44 = v85;
                            }
                            if (v44)
                            {
                              if (!(_BYTE)v82)
                              {
                                v67 = v83;
                                v83 = 0;
                                if (v67)
                                  (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
                              }
                            }
                            if (BYTE8(v92))
                            {
                              if (!(_BYTE)v91)
                              {
                                v68 = *((_QWORD *)&v91 + 1);
                                *((_QWORD *)&v91 + 1) = 0;
                                if (v68)
                                  (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
                              }
                            }
                            return v14 & 0xFFFFFFFFFFFFFFFBLL;
                          }
                        }
                      }
                    }
                    v14 = 0;
                  }
                }
              }
              else
              {
                v14 = 0;
                v93 = 0uLL;
              }
            }
            else
            {
              v93 = 0uLL;
            }
          }
        }
        return v14 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_21;
  }
  v2 = (DWORD2(v93) - 1);
  if (((*(_QWORD *)(v93 + 8 * (v2 >> 6)) >> (BYTE8(v93) - 1)) & 1) != 0)
  {
    v10 = 1;
    if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v93) == (_DWORD)v2)
      goto LABEL_15;
    v11 = v93;
    if ((_QWORD)v93)
      goto LABEL_18;
  }
  else
  {
    if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v93) == (_DWORD)v2)
    {
LABEL_14:
      v10 = 0;
      goto LABEL_15;
    }
    LODWORD(v10) = 1;
    v11 = v93;
    if ((_QWORD)v93)
      goto LABEL_18;
  }
LABEL_21:
  if ((_DWORD)v10)
    goto LABEL_22;
  return v2;
}

uint64_t mlir::arith::MinUIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t canMapOperands;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t Value;
  int v22;
  const void **v23;
  unsigned int v24;
  unsigned int v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  const void **v33;
  unsigned int v34;
  unsigned int v35;
  const void *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t Type;
  int v44;
  unint64_t NumElements;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  const void **v54;
  unsigned int v55;
  unsigned int v56;
  const void *v57;
  char *Address;
  llvm::APInt *v59;
  unsigned int v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  unsigned int v70;
  const void *v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 v85;
  _QWORD v86[2];
  _QWORD *v87;
  uint64_t v88;
  char v89[8];
  unsigned int v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _OWORD v94[4];
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 == *(_QWORD *)(v3 + 56))
    return v4 | 4;
  DWORD2(v93) = 1;
  *(_QWORD *)&v93 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
  *(_QWORD *)&v91 = &v93;
  if (!v6)
    goto LABEL_19;
  v8 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v91, v6);
  v9 = v8;
  v10 = DWORD2(v93);
  if (v8)
  {
    if (DWORD2(v93) > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v93) != v10)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v93) != v10)
        {
          if ((_QWORD)v93)
            MEMORY[0x20BD002D4](v93, 0x1000C8000313F17);
LABEL_19:
          v12 = *(uint64_t **)(a2 + 40);
          canMapOperands = *v12;
          if (*v12
            && *(_UNKNOWN **)(*(_QWORD *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
          {
            v14 = *v12;
          }
          else
          {
            v14 = v12[1];
            if (!v14
              || *(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
            {
              if (canMapOperands)
              {
                if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8))
                {
                  v15 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8);
                  *(_QWORD *)&v93 = canMapOperands;
                  *((_QWORD *)&v93 + 1) = v15;
                  canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v93);
                }
                else
                {
                  canMapOperands = 0;
                  v93 = 0uLL;
                }
              }
              else
              {
                v93 = 0uLL;
              }
              v14 = v12[1];
              if (v14)
              {
                if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)v14 + 8))
                {
                  v16 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)v14 + 8);
                  *(_QWORD *)&v93 = v14;
                  *((_QWORD *)&v93 + 1) = v16;
                  v17 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v93);
                  v14 = 0;
                  if (canMapOperands && v17 && canMapOperands == v17)
                  {
                    v18 = *v12;
                    if (*v12
                      && *(_UNKNOWN **)(*(_QWORD *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
                    {
                      v14 = *v12;
                    }
                    else
                    {
                      v19 = v12[1];
                      if (v19)
                      {
                        v20 = *(void **)(*(_QWORD *)v19 + 136);
                        if (v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
                          v14 = v12[1];
                        else
                          v14 = 0;
                        if (!v18 || v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
                          return v14 & 0xFFFFFFFFFFFFFFFBLL;
                        if (v20 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
                          && *(_UNKNOWN **)(*(_QWORD *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                        {
                          v76 = *v12;
                          v73 = v19;
                          Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v76);
                          if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v73))
                          {
                            mlir::IntegerAttr::getValue(&v76, (llvm::APInt *)&v82);
                            mlir::IntegerAttr::getValue(&v73, (llvm::APInt *)&v79);
                            v22 = llvm::APInt::compare((llvm::APInt *)&v82, (const llvm::APInt *)&v79);
                            if (v22 >= 0)
                              v23 = (const void **)&v79;
                            else
                              v23 = (const void **)&v82;
                            v24 = v83;
                            v25 = v80;
                            if (v22 >= 0)
                              v24 = v80;
                            DWORD2(v91) = v24;
                            if (v24 >= 0x41)
                            {
                              llvm::APInt::initSlowCase((llvm::APInt *)&v91, v23);
                              v24 = DWORD2(v91);
                              v25 = v80;
                              v23 = (const void **)&v91;
                            }
                            v26 = *v23;
                            DWORD2(v93) = v24;
                            *(_QWORD *)&v93 = v26;
                            LOBYTE(v94[0]) = 1;
                            if (v25 >= 0x41 && v79)
                              MEMORY[0x20BD002D4](v79, 0x1000C8000313F17);
                            if (v83 >= 0x41 && v82)
                              MEMORY[0x20BD002D4](v82, 0x1000C8000313F17);
                            v14 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v93);
                            if (!LOBYTE(v94[0]))
                              return v14 & 0xFFFFFFFFFFFFFFFBLL;
                            goto LABEL_62;
                          }
                        }
                        else
                        {
                          if (mlir::DenseElementsAttr::classof(*v12))
                            v27 = v18;
                          else
                            v27 = 0;
                          *(_QWORD *)&v93 = v27;
                          if (v27
                            && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v93)
                            && ((v28 = v12[1], !mlir::DenseElementsAttr::classof(v28)) ? (v29 = 0) : (v29 = v28),
                                (*(_QWORD *)&v93 = v29) != 0
                             && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v93)))
                          {
                            v30 = v12[1];
                            v76 = *v12;
                            v73 = v30;
                            v31 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v76);
                            if (v31 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73))
                            {
                              mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v76, (uint64_t)&v93);
                              v91 = v93;
                              v92 = v94[0];
                              mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v91, (llvm::APInt *)&v82);
                              mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v73, (uint64_t)&v93);
                              v91 = v93;
                              v92 = v94[0];
                              mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v91, (llvm::APInt *)&v79);
                              v32 = llvm::APInt::compare((llvm::APInt *)&v82, (const llvm::APInt *)&v79);
                              if (v32 >= 0)
                                v33 = (const void **)&v79;
                              else
                                v33 = (const void **)&v82;
                              v34 = v83;
                              v35 = v80;
                              if (v32 >= 0)
                                v34 = v80;
                              DWORD2(v91) = v34;
                              if (v34 >= 0x41)
                              {
                                llvm::APInt::initSlowCase((llvm::APInt *)&v91, v33);
                                v34 = DWORD2(v91);
                                v35 = v80;
                                v33 = (const void **)&v91;
                              }
                              v36 = *v33;
                              DWORD2(v93) = v34;
                              *(_QWORD *)&v93 = v36;
                              LOBYTE(v94[0]) = 1;
                              if (v35 >= 0x41 && v79)
                                MEMORY[0x20BD002D4](v79, 0x1000C8000313F17);
                              if (v83 >= 0x41 && v82)
                                MEMORY[0x20BD002D4](v82, 0x1000C8000313F17);
                              v37 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
                              v14 = mlir::DenseElementsAttr::get(canMapOperands, v37, (llvm::APInt *)&v93, 1);
                              if (!LOBYTE(v94[0]))
                                return v14 & 0xFFFFFFFFFFFFFFFBLL;
LABEL_62:
                              if (DWORD2(v93) >= 0x41 && (_QWORD)v93)
                                MEMORY[0x20BD002D4](v93, 0x1000C8000313F17);
                              return v14 & 0xFFFFFFFFFFFFFFFBLL;
                            }
                          }
                          else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v12 + 8)
                                 && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v12[1] + 8))
                          {
                            v38 = (_QWORD *)*v12;
                            v39 = *v12 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v38 + 8) : 0;
                            v87 = v38;
                            v88 = v39;
                            v40 = (_QWORD *)v12[1];
                            v41 = v40 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v40 + 8) : 0;
                            v86[0] = v40;
                            v86[1] = v41;
                            Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v87);
                            if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v86))
                            {
                              mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v87, (uint64_t)&v91);
                              mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v86, (uint64_t)&v82);
                              v14 = 0;
                              v44 = v85;
                              if (BYTE8(v92) && v85)
                              {
                                LOWORD(v79) = v91;
                                if ((_BYTE)v91)
                                  v80 = *((_QWORD *)&v91 + 1);
                                else
                                  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)&v91 + 1) + 16))(&v80);
                                v81 = v92;
                                LOWORD(v76) = v82;
                                if ((_BYTE)v82)
                                  v77 = v83;
                                else
                                  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v83 + 16))(&v77);
                                v78 = v84;
                                *(_QWORD *)&v93 = v94;
                                *((_QWORD *)&v93 + 1) = 0x400000000;
                                NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v87, v88);
                                llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v93, NumElements);
                                v46 = mlir::ElementsAttr::getNumElements((uint64_t)v87, v88);
                                if (v46)
                                {
                                  v47 = v46;
                                  v48 = v81;
                                  while (1)
                                  {
                                    if (BYTE1(v79))
                                      v49 = 0;
                                    else
                                      v49 = v48;
                                    if ((_BYTE)v79)
                                    {
                                      v50 = v80 + 16 * v49;
                                      v72 = *(_DWORD *)(v50 + 8);
                                      if (v72 > 0x40)
                                        llvm::APInt::initSlowCase((llvm::APInt *)&v71, (const void **)v50);
                                      else
                                        v71 = *(const void **)v50;
                                    }
                                    else
                                    {
                                      (*(void (**)(const void **__return_ptr))(*(_QWORD *)v80 + 24))(&v71);
                                    }
                                    if (BYTE1(v76))
                                      v51 = 0;
                                    else
                                      v51 = v78;
                                    if ((_BYTE)v76)
                                    {
                                      v52 = v77 + 16 * v51;
                                      v70 = *(_DWORD *)(v52 + 8);
                                      if (v70 > 0x40)
                                        llvm::APInt::initSlowCase((llvm::APInt *)&v69, (const void **)v52);
                                      else
                                        v69 = *(const void **)v52;
                                    }
                                    else
                                    {
                                      (*(void (**)(const void **__return_ptr))(*(_QWORD *)v77 + 24))(&v69);
                                    }
                                    v53 = llvm::APInt::compare((llvm::APInt *)&v71, (const llvm::APInt *)&v69);
                                    if (v53 >= 0)
                                      v54 = &v69;
                                    else
                                      v54 = &v71;
                                    v55 = v72;
                                    v56 = v70;
                                    if (v53 >= 0)
                                      v55 = v70;
                                    v90 = v55;
                                    if (v55 >= 0x41)
                                    {
                                      llvm::APInt::initSlowCase((llvm::APInt *)v89, v54);
                                      v55 = v90;
                                      v56 = v70;
                                      v54 = (const void **)v89;
                                    }
                                    v57 = *v54;
                                    v74 = v55;
                                    v73 = (uint64_t)v57;
                                    v75 = 1;
                                    if (v56 >= 0x41 && v69)
                                      MEMORY[0x20BD002D4](v69, 0x1000C8000313F17);
                                    if (v72 >= 0x41 && v71)
                                      MEMORY[0x20BD002D4](v71, 0x1000C8000313F17);
                                    if (!v75)
                                      break;
                                    Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v93, (unint64_t)&v73, 1);
                                    v59 = (llvm::APInt *)(v93 + 16 * DWORD2(v93));
                                    v60 = *((_DWORD *)Address + 2);
                                    *((_DWORD *)v59 + 2) = v60;
                                    if (v60 > 0x40)
                                      llvm::APInt::initSlowCase(v59, (const void **)Address);
                                    else
                                      *(_QWORD *)v59 = *(_QWORD *)Address;
                                    ++DWORD2(v93);
                                    if (v75 && v74 >= 0x41 && v73)
                                      MEMORY[0x20BD002D4](v73, 0x1000C8000313F17);
                                    v48 = ++v81;
                                    ++v78;
                                    if (!--v47)
                                      goto LABEL_154;
                                  }
                                  v14 = 0;
                                }
                                else
                                {
LABEL_154:
                                  v61 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
                                  v14 = mlir::DenseElementsAttr::get(canMapOperands, v61, (llvm::APInt *)v93, DWORD2(v93));
                                }
                                v62 = (char *)v93;
                                if (DWORD2(v93))
                                {
                                  v63 = 16 * DWORD2(v93);
                                  do
                                  {
                                    if (*(_DWORD *)&v62[v63 - 8] >= 0x41u)
                                    {
                                      v64 = *(_QWORD *)&v62[v63 - 16];
                                      if (v64)
                                        MEMORY[0x20BD002D4](v64, 0x1000C8000313F17);
                                    }
                                    v63 -= 16;
                                  }
                                  while (v63);
                                  v62 = (char *)v93;
                                }
                                if (v62 != (char *)v94)
                                  free(v62);
                                if (!(_BYTE)v76)
                                {
                                  v65 = v77;
                                  v77 = 0;
                                  if (v65)
                                    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
                                }
                                if (!(_BYTE)v79)
                                {
                                  v66 = v80;
                                  v80 = 0;
                                  if (v66)
                                    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
                                }
                                v44 = v85;
                              }
                              if (v44)
                              {
                                if (!(_BYTE)v82)
                                {
                                  v67 = v83;
                                  v83 = 0;
                                  if (v67)
                                    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
                                }
                              }
                              if (BYTE8(v92))
                              {
                                if (!(_BYTE)v91)
                                {
                                  v68 = *((_QWORD *)&v91 + 1);
                                  *((_QWORD *)&v91 + 1) = 0;
                                  if (v68)
                                    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
                                }
                              }
                              return v14 & 0xFFFFFFFFFFFFFFFBLL;
                            }
                          }
                        }
                      }
                      v14 = 0;
                    }
                  }
                }
                else
                {
                  v14 = 0;
                  v93 = 0uLL;
                }
              }
              else
              {
                v93 = 0uLL;
              }
            }
          }
          return v14 & 0xFFFFFFFFFFFFFFFBLL;
        }
        v11 = 0;
        goto LABEL_14;
      }
    }
    else if ((_QWORD)v93)
    {
      v11 = 0;
      if (DWORD2(v93) && (_QWORD)v93 != 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v93))
        goto LABEL_19;
      goto LABEL_14;
    }
    v11 = 1;
LABEL_14:
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 32 * v11 + 24) | 4;
  }
  if (v10 >= 0x41 && (_QWORD)v93)
    MEMORY[0x20BD002D4](v93, 0x1000C8000313F17);
  if ((v9 & 1) == 0)
    goto LABEL_19;
  return v2;
}

uint64_t mlir::arith::MulFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  void *canMapOperands;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  llvm::APFloatBase *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t Value;
  void *v25;
  llvm::APFloatBase *v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t Type;
  int v33;
  unint64_t NumElements;
  llvm::APFloatBase *v35;
  llvm::APFloatBase *v36;
  void **v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  void **v42;
  char *v43;
  uint64_t v44;
  llvm::detail::DoubleAPFloat *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  const llvm::detail::DoubleAPFloat *v52;
  void *v53;
  uint64_t v54;
  char *v55;
  const llvm::detail::DoubleAPFloat *v56;
  void *v57;
  void *v58;
  llvm::APFloatBase *v59;
  void *v60;
  llvm::APFloatBase *v61;
  char *Address;
  llvm::detail::IEEEFloat *v63;
  const llvm::detail::DoubleAPFloat *v64;
  void *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  uint64_t v71;
  llvm::detail::DoubleAPFloat *v72;
  llvm::APFloatBase *v73;
  llvm::APFloatBase *v74;
  llvm::APFloatBase *v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  llvm::APFloatBase *v79;
  uint64_t v80;
  char v81;
  char v82;
  llvm::APFloatBase *v83;
  uint64_t v84;
  uint64_t v85;
  llvm::APFloatBase *v86;
  uint64_t v87;
  unsigned __int8 v88;
  _QWORD v89[2];
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[3];
  uint64_t v94;
  _QWORD v95[3];
  unint64_t v96;
  _QWORD v97[3];
  char v98;
  void *v99;
  uint64_t v100;
  _BYTE v101[16];
  char v102;
  _BYTE v103[8];
  _QWORD v104[2];
  char v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)(a2 + 48);
  v4 = v3[1];
  v99 = mlir::m_OneFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke;
  if (v4)
  {
    if ((mlir::detail::constant_float_predicate_matcher::match((llvm::APFloatBase *)&v99, v4) & 1) != 0)
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) | 4;
    v3 = *(uint64_t **)(a2 + 48);
  }
  canMapOperands = (void *)*v3;
  if (*v3
    && *(_UNKNOWN **)(*(_QWORD *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v8 = v3[1];
  if (v8 && *(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8))
    {
      v9 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8);
      v99 = canMapOperands;
      v100 = v9;
      canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
    }
    else
    {
      canMapOperands = 0;
      v99 = 0;
      v100 = 0;
    }
  }
  else
  {
    v99 = 0;
    v100 = 0;
  }
  v10 = (_QWORD *)v3[1];
  if (!v10)
  {
    v99 = 0;
    v100 = 0;
    goto LABEL_67;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8))
  {
    v99 = 0;
    v100 = 0;
    goto LABEL_67;
  }
  v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8);
  v99 = v10;
  v100 = v11;
  v12 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
  v8 = 0;
  if (!canMapOperands || !v12 || canMapOperands != (void *)v12)
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  v13 = (void *)*v3;
  if (*v3 && *(_UNKNOWN **)(*(_QWORD *)v13 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v14 = v3[1];
  if (!v14)
  {
LABEL_67:
    v8 = 0;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v15 = *(void **)(*(_QWORD *)v14 + 136);
  if (v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    v8 = v3[1];
  else
    v8 = 0;
  if (!v13 || v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  if (v15 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || *(_UNKNOWN **)(*(_QWORD *)v13 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3))
      v20 = v13;
    else
      v20 = 0;
    v99 = v20;
    if (v20
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)
      && ((v21 = v3[1], !mlir::DenseElementsAttr::classof(v21)) ? (v22 = 0) : (v22 = (void *)v21),
          (v99 = v22) != 0 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)))
    {
      v23 = v3[1];
      v85 = *v3;
      v94 = v23;
      Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v85);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v94))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v85, (uint64_t)&v96);
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v94, (uint64_t)v103);
        mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
        v25 = (void *)v104[0];
        v27 = llvm::APFloatBase::PPCDoubleDouble(v26);
        if (v27 == v25)
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
        if (v27 == (void *)v97[0])
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
        if (v102)
        {
          v77 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
          v8 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v77, (uint64_t)&v99, 1);
          if (!v102)
            return v8 & 0xFFFFFFFFFFFFFFFBLL;
          if (v27 != (void *)v100)
            goto LABEL_61;
          goto LABEL_157;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v3 + 8)
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v3[1] + 8))
    {
      v28 = (_QWORD *)*v3;
      v29 = *v3 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v28 + 8) : 0;
      v90 = v28;
      v91 = v29;
      v30 = (_QWORD *)v3[1];
      v31 = v30 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8) : 0;
      v89[0] = v30;
      v89[1] = v31;
      Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v90);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v89))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v90, (uint64_t)v103);
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v89, (uint64_t)&v85);
        v8 = 0;
        v33 = v88;
        if (v105 && v88)
        {
          v81 = v103[0];
          v82 = v103[1];
          if (v103[0])
            v83 = (llvm::APFloatBase *)v104[0];
          else
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v104[0] + 16))(&v83);
          v84 = v104[1];
          v78 = v85;
          if ((_BYTE)v85)
            v79 = v86;
          else
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v86 + 16))(&v79);
          v80 = v87;
          v99 = v101;
          v100 = 0x400000000;
          NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (NumElements > HIDWORD(v100))
          {
            v96 = 0;
            v35 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v99, v101, NumElements, 32, &v96);
            v36 = v35;
            v37 = (void **)v99;
            v38 = v100;
            if ((_DWORD)v100)
            {
              v39 = llvm::APFloatBase::PPCDoubleDouble(v35);
              v40 = (_QWORD *)((char *)v36 + 8);
              v41 = 32 * v38;
              v42 = v37 + 1;
              do
              {
                while (v39 == *v42)
                {
                  v40 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v40, v42) + 4;
                  v42 += 4;
                  v41 -= 32;
                  if (!v41)
                    goto LABEL_83;
                }
                v40 = (_QWORD *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v40, (uint64_t)v42) + 32);
                v42 += 4;
                v41 -= 32;
              }
              while (v41);
LABEL_83:
              v37 = (void **)v99;
              if ((_DWORD)v100)
              {
                v43 = (char *)v99 - 24;
                v44 = 32 * v100;
                do
                {
                  while (1)
                  {
                    v45 = (llvm::detail::DoubleAPFloat *)&v43[v44];
                    if (v39 != *(void **)&v43[v44])
                      break;
                    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v45);
                    v44 -= 32;
                    if (!v44)
                      goto LABEL_88;
                  }
                  llvm::detail::IEEEFloat::~IEEEFloat(v45);
                  v44 -= 32;
                }
                while (v44);
LABEL_88:
                v37 = (void **)v99;
              }
            }
            v46 = v96;
            if (v37 != (void **)v101)
              free(v37);
            v99 = v36;
            HIDWORD(v100) = v46;
          }
          v47 = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (v47)
          {
            v48 = v47;
            v49 = v84;
            while (1)
            {
              v50 = v82 ? 0 : v49;
              if (v81)
              {
                v51 = (char *)v83 + 32 * v50;
                v53 = (void *)*((_QWORD *)v51 + 1);
                v52 = (const llvm::detail::DoubleAPFloat *)(v51 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v83) == v53)
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v95, v52);
                else
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v95, v52);
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v83 + 24))(&v94);
              }
              v54 = HIBYTE(v78) ? 0 : v80;
              if ((_BYTE)v78)
              {
                v55 = (char *)v79 + 32 * v54;
                v57 = (void *)*((_QWORD *)v55 + 1);
                v56 = (const llvm::detail::DoubleAPFloat *)(v55 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v79) == v57)
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v93, v56);
                else
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v93, v56);
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v79 + 24))(&v92);
              }
              mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v96, (uint64_t)&v94, (uint64_t)&v92);
              v58 = (void *)v93[0];
              v60 = llvm::APFloatBase::PPCDoubleDouble(v59);
              if (v60 == v58)
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v93);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v93);
              if (v60 == (void *)v95[0])
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v95);
              if (!v98)
                break;
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v99, (unint64_t)&v96, 1);
              v63 = (llvm::detail::IEEEFloat *)((char *)v99 + 32 * v100 + 8);
              v65 = (void *)*((_QWORD *)Address + 1);
              v64 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              if (v60 == v65)
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v63, v64);
              else
                llvm::detail::IEEEFloat::IEEEFloat(v63, v64);
              LODWORD(v100) = v100 + 1;
              if (v98)
              {
                if (v60 == (void *)v97[0])
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
                else
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
              }
              v49 = ++v84;
              ++v80;
              if (!--v48)
                goto LABEL_125;
            }
            v8 = 0;
          }
          else
          {
LABEL_125:
            v66 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
            v61 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v66, (uint64_t)v99, v100);
            v8 = (uint64_t)v61;
          }
          v67 = (char *)v99;
          v68 = v100;
          if ((_DWORD)v100)
          {
            v69 = llvm::APFloatBase::PPCDoubleDouble(v61);
            v70 = v67 - 24;
            v71 = 32 * v68;
            do
            {
              while (1)
              {
                v72 = (llvm::detail::DoubleAPFloat *)&v70[v71];
                if (v69 != *(void **)&v70[v71])
                  break;
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v72);
                v71 -= 32;
                if (!v71)
                  goto LABEL_132;
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v72);
              v71 -= 32;
            }
            while (v71);
LABEL_132:
            v67 = (char *)v99;
          }
          if (v67 != v101)
            free(v67);
          if (!(_BYTE)v78)
          {
            v73 = v79;
            v79 = 0;
            if (v73)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v73 + 8))(v73);
          }
          if (!v81)
          {
            v74 = v83;
            v83 = 0;
            if (v74)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v74 + 8))(v74);
          }
          v33 = v88;
        }
        if (v33)
        {
          if (!(_BYTE)v85)
          {
            v75 = v86;
            v86 = 0;
            if (v75)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v75 + 8))(v75);
          }
        }
        if (v105)
        {
          if (!v103[0])
          {
            v76 = v104[0];
            v104[0] = 0;
            if (v76)
              (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
          }
        }
        return v8 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_67;
  }
  v85 = *v3;
  v94 = v14;
  v16 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v85);
  if (v16 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v94))
    goto LABEL_67;
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v85, (uint64_t)&v96);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v94, (uint64_t)v103);
  mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
  v17 = (void *)v104[0];
  v19 = llvm::APFloatBase::PPCDoubleDouble(v18);
  if (v19 == v17)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
  if (v19 == (void *)v97[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
  if (!v102)
    goto LABEL_67;
  v8 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v99);
  if (v102)
  {
    if (v19 != (void *)v100)
    {
LABEL_61:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v100);
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_157:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v100);
  }
  return v8 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::MulFOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  const char *v39;
  unint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v38, 3);
  v39 = "arith.mulf";
  v40 = 10;
  mlir::Pattern::Pattern(v4 + 8, (uint64_t)"arith.mulf", 10, v38, a2, &v39, 1uLL);
  *(_QWORD *)v4 = &off_24C028520;
  if (*(_QWORD *)(v4 + 72))
  {
    v5 = *(unsigned int *)(v4 + 88);
    if (v5 <= *(_DWORD *)(v4 + 92))
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 80, (void *)(v4 + 96), v5, 16);
    *(_DWORD *)(v4 + 88) = *(_DWORD *)(v4 + 88);
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v39 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::MulFOfNegF]";
  v40 = 83;
  v9 = llvm::StringRef::find((uint64_t *)&v39, "DesiredTypeName = ", 0x12uLL, 0);
  if (v40 >= v9)
    v10 = v9;
  else
    v10 = v40;
  v11 = &v39[v10];
  v12 = v40 - v10;
  if (v40 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v40 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *(_QWORD *)(v4 + 64) = v14;
  *(_QWORD *)(v4 + 72) = v15;
  v5 = *(unsigned int *)(v4 + 88);
  if (v5 > *(_DWORD *)(v4 + 92))
    goto LABEL_14;
LABEL_3:
  *(_DWORD *)(v4 + 88) = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v4;
    v8 = (uint64_t)(v22 + 1);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (uint64_t *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v22
        && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 = (uint64_t *)((char *)v22 - v27);
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *--v22 = v34;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
}

uint64_t mlir::arith::DivFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  void *canMapOperands;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  llvm::APFloatBase *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t Value;
  void *v25;
  llvm::APFloatBase *v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t Type;
  int v33;
  unint64_t NumElements;
  llvm::APFloatBase *v35;
  llvm::APFloatBase *v36;
  void **v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  void **v42;
  char *v43;
  uint64_t v44;
  llvm::detail::DoubleAPFloat *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  const llvm::detail::DoubleAPFloat *v52;
  void *v53;
  uint64_t v54;
  char *v55;
  const llvm::detail::DoubleAPFloat *v56;
  void *v57;
  void *v58;
  llvm::APFloatBase *v59;
  void *v60;
  llvm::APFloatBase *v61;
  char *Address;
  llvm::detail::IEEEFloat *v63;
  const llvm::detail::DoubleAPFloat *v64;
  void *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  uint64_t v71;
  llvm::detail::DoubleAPFloat *v72;
  llvm::APFloatBase *v73;
  llvm::APFloatBase *v74;
  llvm::APFloatBase *v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  llvm::APFloatBase *v79;
  uint64_t v80;
  char v81;
  char v82;
  llvm::APFloatBase *v83;
  uint64_t v84;
  uint64_t v85;
  llvm::APFloatBase *v86;
  uint64_t v87;
  unsigned __int8 v88;
  _QWORD v89[2];
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[3];
  uint64_t v94;
  _QWORD v95[3];
  unint64_t v96;
  _QWORD v97[3];
  char v98;
  void *v99;
  uint64_t v100;
  _BYTE v101[16];
  char v102;
  _BYTE v103[8];
  _QWORD v104[2];
  char v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)(a2 + 48);
  v4 = v3[1];
  v99 = mlir::m_OneFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke;
  if (v4)
  {
    if ((mlir::detail::constant_float_predicate_matcher::match((llvm::APFloatBase *)&v99, v4) & 1) != 0)
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) | 4;
    v3 = *(uint64_t **)(a2 + 48);
  }
  canMapOperands = (void *)*v3;
  if (*v3
    && *(_UNKNOWN **)(*(_QWORD *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v8 = v3[1];
  if (v8 && *(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8))
    {
      v9 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8);
      v99 = canMapOperands;
      v100 = v9;
      canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
    }
    else
    {
      canMapOperands = 0;
      v99 = 0;
      v100 = 0;
    }
  }
  else
  {
    v99 = 0;
    v100 = 0;
  }
  v10 = (_QWORD *)v3[1];
  if (!v10)
  {
    v99 = 0;
    v100 = 0;
    goto LABEL_67;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8))
  {
    v99 = 0;
    v100 = 0;
    goto LABEL_67;
  }
  v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8);
  v99 = v10;
  v100 = v11;
  v12 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
  v8 = 0;
  if (!canMapOperands || !v12 || canMapOperands != (void *)v12)
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  v13 = (void *)*v3;
  if (*v3 && *(_UNKNOWN **)(*(_QWORD *)v13 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v14 = v3[1];
  if (!v14)
  {
LABEL_67:
    v8 = 0;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v15 = *(void **)(*(_QWORD *)v14 + 136);
  if (v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    v8 = v3[1];
  else
    v8 = 0;
  if (!v13 || v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  if (v15 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || *(_UNKNOWN **)(*(_QWORD *)v13 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3))
      v20 = v13;
    else
      v20 = 0;
    v99 = v20;
    if (v20
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)
      && ((v21 = v3[1], !mlir::DenseElementsAttr::classof(v21)) ? (v22 = 0) : (v22 = (void *)v21),
          (v99 = v22) != 0 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)))
    {
      v23 = v3[1];
      v85 = *v3;
      v94 = v23;
      Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v85);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v94))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v85, (uint64_t)&v96);
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v94, (uint64_t)v103);
        mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
        v25 = (void *)v104[0];
        v27 = llvm::APFloatBase::PPCDoubleDouble(v26);
        if (v27 == v25)
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
        if (v27 == (void *)v97[0])
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
        if (v102)
        {
          v77 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
          v8 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v77, (uint64_t)&v99, 1);
          if (!v102)
            return v8 & 0xFFFFFFFFFFFFFFFBLL;
          if (v27 != (void *)v100)
            goto LABEL_61;
          goto LABEL_157;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v3 + 8)
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v3[1] + 8))
    {
      v28 = (_QWORD *)*v3;
      v29 = *v3 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v28 + 8) : 0;
      v90 = v28;
      v91 = v29;
      v30 = (_QWORD *)v3[1];
      v31 = v30 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8) : 0;
      v89[0] = v30;
      v89[1] = v31;
      Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v90);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v89))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v90, (uint64_t)v103);
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v89, (uint64_t)&v85);
        v8 = 0;
        v33 = v88;
        if (v105 && v88)
        {
          v81 = v103[0];
          v82 = v103[1];
          if (v103[0])
            v83 = (llvm::APFloatBase *)v104[0];
          else
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v104[0] + 16))(&v83);
          v84 = v104[1];
          v78 = v85;
          if ((_BYTE)v85)
            v79 = v86;
          else
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v86 + 16))(&v79);
          v80 = v87;
          v99 = v101;
          v100 = 0x400000000;
          NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (NumElements > HIDWORD(v100))
          {
            v96 = 0;
            v35 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v99, v101, NumElements, 32, &v96);
            v36 = v35;
            v37 = (void **)v99;
            v38 = v100;
            if ((_DWORD)v100)
            {
              v39 = llvm::APFloatBase::PPCDoubleDouble(v35);
              v40 = (_QWORD *)((char *)v36 + 8);
              v41 = 32 * v38;
              v42 = v37 + 1;
              do
              {
                while (v39 == *v42)
                {
                  v40 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v40, v42) + 4;
                  v42 += 4;
                  v41 -= 32;
                  if (!v41)
                    goto LABEL_83;
                }
                v40 = (_QWORD *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v40, (uint64_t)v42) + 32);
                v42 += 4;
                v41 -= 32;
              }
              while (v41);
LABEL_83:
              v37 = (void **)v99;
              if ((_DWORD)v100)
              {
                v43 = (char *)v99 - 24;
                v44 = 32 * v100;
                do
                {
                  while (1)
                  {
                    v45 = (llvm::detail::DoubleAPFloat *)&v43[v44];
                    if (v39 != *(void **)&v43[v44])
                      break;
                    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v45);
                    v44 -= 32;
                    if (!v44)
                      goto LABEL_88;
                  }
                  llvm::detail::IEEEFloat::~IEEEFloat(v45);
                  v44 -= 32;
                }
                while (v44);
LABEL_88:
                v37 = (void **)v99;
              }
            }
            v46 = v96;
            if (v37 != (void **)v101)
              free(v37);
            v99 = v36;
            HIDWORD(v100) = v46;
          }
          v47 = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (v47)
          {
            v48 = v47;
            v49 = v84;
            while (1)
            {
              v50 = v82 ? 0 : v49;
              if (v81)
              {
                v51 = (char *)v83 + 32 * v50;
                v53 = (void *)*((_QWORD *)v51 + 1);
                v52 = (const llvm::detail::DoubleAPFloat *)(v51 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v83) == v53)
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v95, v52);
                else
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v95, v52);
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v83 + 24))(&v94);
              }
              v54 = HIBYTE(v78) ? 0 : v80;
              if ((_BYTE)v78)
              {
                v55 = (char *)v79 + 32 * v54;
                v57 = (void *)*((_QWORD *)v55 + 1);
                v56 = (const llvm::detail::DoubleAPFloat *)(v55 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v79) == v57)
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v93, v56);
                else
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v93, v56);
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v79 + 24))(&v92);
              }
              mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v96, (uint64_t)&v94, (uint64_t)&v92);
              v58 = (void *)v93[0];
              v60 = llvm::APFloatBase::PPCDoubleDouble(v59);
              if (v60 == v58)
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v93);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v93);
              if (v60 == (void *)v95[0])
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v95);
              if (!v98)
                break;
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v99, (unint64_t)&v96, 1);
              v63 = (llvm::detail::IEEEFloat *)((char *)v99 + 32 * v100 + 8);
              v65 = (void *)*((_QWORD *)Address + 1);
              v64 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              if (v60 == v65)
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v63, v64);
              else
                llvm::detail::IEEEFloat::IEEEFloat(v63, v64);
              LODWORD(v100) = v100 + 1;
              if (v98)
              {
                if (v60 == (void *)v97[0])
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
                else
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
              }
              v49 = ++v84;
              ++v80;
              if (!--v48)
                goto LABEL_125;
            }
            v8 = 0;
          }
          else
          {
LABEL_125:
            v66 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
            v61 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v66, (uint64_t)v99, v100);
            v8 = (uint64_t)v61;
          }
          v67 = (char *)v99;
          v68 = v100;
          if ((_DWORD)v100)
          {
            v69 = llvm::APFloatBase::PPCDoubleDouble(v61);
            v70 = v67 - 24;
            v71 = 32 * v68;
            do
            {
              while (1)
              {
                v72 = (llvm::detail::DoubleAPFloat *)&v70[v71];
                if (v69 != *(void **)&v70[v71])
                  break;
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v72);
                v71 -= 32;
                if (!v71)
                  goto LABEL_132;
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v72);
              v71 -= 32;
            }
            while (v71);
LABEL_132:
            v67 = (char *)v99;
          }
          if (v67 != v101)
            free(v67);
          if (!(_BYTE)v78)
          {
            v73 = v79;
            v79 = 0;
            if (v73)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v73 + 8))(v73);
          }
          if (!v81)
          {
            v74 = v83;
            v83 = 0;
            if (v74)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v74 + 8))(v74);
          }
          v33 = v88;
        }
        if (v33)
        {
          if (!(_BYTE)v85)
          {
            v75 = v86;
            v86 = 0;
            if (v75)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v75 + 8))(v75);
          }
        }
        if (v105)
        {
          if (!v103[0])
          {
            v76 = v104[0];
            v104[0] = 0;
            if (v76)
              (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
          }
        }
        return v8 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_67;
  }
  v85 = *v3;
  v94 = v14;
  v16 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v85);
  if (v16 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v94))
    goto LABEL_67;
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v85, (uint64_t)&v96);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v94, (uint64_t)v103);
  mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
  v17 = (void *)v104[0];
  v19 = llvm::APFloatBase::PPCDoubleDouble(v18);
  if (v19 == v17)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
  if (v19 == (void *)v97[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
  if (!v102)
    goto LABEL_67;
  v8 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v99);
  if (v102)
  {
    if (v19 != (void *)v100)
    {
LABEL_61:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v100);
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_157:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v100);
  }
  return v8 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::DivFOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  const char *v39;
  unint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v38, 3);
  v39 = "arith.divf";
  v40 = 10;
  mlir::Pattern::Pattern(v4 + 8, (uint64_t)"arith.divf", 10, v38, a2, &v39, 1uLL);
  *(_QWORD *)v4 = &off_24C0284E0;
  if (*(_QWORD *)(v4 + 72))
  {
    v5 = *(unsigned int *)(v4 + 88);
    if (v5 <= *(_DWORD *)(v4 + 92))
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 80, (void *)(v4 + 96), v5, 16);
    *(_DWORD *)(v4 + 88) = *(_DWORD *)(v4 + 88);
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v39 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::DivFOfNegF]";
  v40 = 83;
  v9 = llvm::StringRef::find((uint64_t *)&v39, "DesiredTypeName = ", 0x12uLL, 0);
  if (v40 >= v9)
    v10 = v9;
  else
    v10 = v40;
  v11 = &v39[v10];
  v12 = v40 - v10;
  if (v40 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v40 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *(_QWORD *)(v4 + 64) = v14;
  *(_QWORD *)(v4 + 72) = v15;
  v5 = *(unsigned int *)(v4 + 88);
  if (v5 > *(_DWORD *)(v4 + 92))
    goto LABEL_14;
LABEL_3:
  *(_DWORD *)(v4 + 88) = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v4;
    v8 = (uint64_t)(v22 + 1);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (uint64_t *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v22
        && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 = (uint64_t *)((char *)v22 - v27);
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *--v22 = v34;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
}

unint64_t mlir::arith::RemFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  void *canMapOperands;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  llvm::APFloatBase *v19;
  void *v20;
  uint64_t Value;
  void *v22;
  llvm::APFloatBase *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t Type;
  int v31;
  unint64_t NumElements;
  llvm::APFloatBase *v33;
  llvm::APFloatBase *v34;
  void **v35;
  uint64_t v36;
  void *v37;
  _QWORD *v38;
  uint64_t v39;
  void **v40;
  char *v41;
  uint64_t v42;
  llvm::detail::DoubleAPFloat *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  const llvm::detail::DoubleAPFloat *v50;
  void *v51;
  uint64_t v52;
  char *v53;
  const llvm::detail::DoubleAPFloat *v54;
  void *v55;
  void *v56;
  llvm::APFloatBase *v57;
  void *v58;
  llvm::APFloatBase *v59;
  char *Address;
  llvm::detail::IEEEFloat *v61;
  const llvm::detail::DoubleAPFloat *v62;
  void *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void *v67;
  char *v68;
  uint64_t v69;
  llvm::detail::DoubleAPFloat *v70;
  llvm::APFloatBase *v71;
  llvm::APFloatBase *v72;
  llvm::APFloatBase *v73;
  uint64_t v74;
  uint64_t v75;
  __int16 v76;
  llvm::APFloatBase *v77;
  uint64_t v78;
  char v79;
  char v80;
  llvm::APFloatBase *v81;
  uint64_t v82;
  uint64_t v83;
  llvm::APFloatBase *v84;
  uint64_t v85;
  unsigned __int8 v86;
  _QWORD v87[2];
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[3];
  uint64_t v92;
  _QWORD v93[3];
  unint64_t v94;
  _QWORD v95[3];
  char v96;
  void *v97;
  uint64_t v98;
  _BYTE v99[16];
  char v100;
  _BYTE v101[8];
  _QWORD v102[2];
  char v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a2 + 48);
  canMapOperands = (void *)*v2;
  if (*v2
    && *(_UNKNOWN **)(*(_QWORD *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    v4 = *v2;
  }
  else
  {
    v4 = v2[1];
    if (!v4 || *(_UNKNOWN **)(*(_QWORD *)v4 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
      if (canMapOperands)
      {
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8))
        {
          v5 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8);
          v97 = canMapOperands;
          v98 = v5;
          canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v97);
        }
        else
        {
          canMapOperands = 0;
          v97 = 0;
          v98 = 0;
        }
      }
      else
      {
        v97 = 0;
        v98 = 0;
      }
      v6 = (_QWORD *)v2[1];
      if (!v6)
      {
        v97 = 0;
        v98 = 0;
        goto LABEL_65;
      }
      if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v6 + 8))
      {
        v97 = 0;
        v98 = 0;
        goto LABEL_65;
      }
      v7 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v6 + 8);
      v97 = v6;
      v98 = v7;
      v8 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v97);
      v4 = 0;
      if (canMapOperands && v8 && canMapOperands == (void *)v8)
      {
        v9 = (void *)*v2;
        if (*v2
          && *(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          v4 = *v2;
        }
        else
        {
          v10 = v2[1];
          if (!v10)
            goto LABEL_65;
          v11 = *(void **)(*(_QWORD *)v10 + 136);
          if (v11 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
            v4 = v2[1];
          else
            v4 = 0;
          if (v9 && v11 != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
          {
            if (v11 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
              && *(_QWORD *)(*(_QWORD *)v9 + 136) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
            {
              v83 = *v2;
              v92 = v10;
              Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v83);
              if (Value != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v92))
                goto LABEL_65;
              mlir::FloatAttr::getValue((mlir::FloatAttr *)&v83, (uint64_t)&v94);
              mlir::FloatAttr::getValue((mlir::FloatAttr *)&v92, (uint64_t)v101);
              mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v97, (uint64_t)&v94, (uint64_t)v101);
              v22 = (void *)v102[0];
              v24 = llvm::APFloatBase::PPCDoubleDouble(v23);
              if (v24 == v22)
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v102);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v102);
              if (v24 == (void *)v95[0])
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v95);
              if (!v100)
                goto LABEL_65;
              v4 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v97);
              if (v100)
              {
                if (v24 == (void *)v98)
                {
LABEL_155:
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v98);
                  return v4 & 0xFFFFFFFFFFFFFFFBLL;
                }
LABEL_59:
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v98);
              }
            }
            else
            {
              if (mlir::DenseElementsAttr::classof(*v2))
                v13 = v9;
              else
                v13 = 0;
              v97 = v13;
              if (v13 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v97))
              {
                v14 = v2[1];
                v15 = mlir::DenseElementsAttr::classof(v14) ? (void *)v14 : 0;
                v97 = v15;
                if (v15)
                {
                  if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v97))
                  {
                    v16 = v2[1];
                    v83 = *v2;
                    v92 = v16;
                    v17 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v83);
                    if (v17 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v92))
                    {
                      mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v83, (uint64_t)&v94);
                      mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v92, (uint64_t)v101);
                      mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v97, (uint64_t)&v94, (uint64_t)v101);
                      v18 = (void *)v102[0];
                      v20 = llvm::APFloatBase::PPCDoubleDouble(v19);
                      if (v20 == v18)
                        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v102);
                      else
                        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v102);
                      if (v20 == (void *)v95[0])
                        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95);
                      else
                        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v95);
                      if (v100)
                      {
                        v75 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
                        v4 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v75, (uint64_t)&v97, 1);
                        if (!v100)
                          return v4 & 0xFFFFFFFFFFFFFFFBLL;
                        if (v20 == (void *)v98)
                          goto LABEL_155;
                        goto LABEL_59;
                      }
                    }
LABEL_65:
                    v4 = 0;
                    return v4 & 0xFFFFFFFFFFFFFFFBLL;
                  }
                }
              }
              if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v2 + 8)
                || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v2[1] + 8))
              {
                goto LABEL_65;
              }
              v25 = (_QWORD *)*v2;
              v26 = *v2 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v25 + 8) : 0;
              v88 = v25;
              v89 = v26;
              v27 = (_QWORD *)v2[1];
              v28 = v27 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v27 + 8) : 0;
              v87[0] = v27;
              v87[1] = v28;
              Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v88);
              if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v87))
                goto LABEL_65;
              mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v88, (uint64_t)v101);
              mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v87, (uint64_t)&v83);
              v4 = 0;
              v31 = v86;
              if (v103 && v86)
              {
                v79 = v101[0];
                v80 = v101[1];
                if (v101[0])
                  v81 = (llvm::APFloatBase *)v102[0];
                else
                  (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v102[0] + 16))(&v81);
                v82 = v102[1];
                v76 = v83;
                if ((_BYTE)v83)
                  v77 = v84;
                else
                  (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v84 + 16))(&v77);
                v78 = v85;
                v97 = v99;
                v98 = 0x400000000;
                NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v88, v89);
                if (NumElements > HIDWORD(v98))
                {
                  v94 = 0;
                  v33 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v97, v99, NumElements, 32, &v94);
                  v34 = v33;
                  v35 = (void **)v97;
                  v36 = v98;
                  if ((_DWORD)v98)
                  {
                    v37 = llvm::APFloatBase::PPCDoubleDouble(v33);
                    v38 = (_QWORD *)((char *)v34 + 8);
                    v39 = 32 * v36;
                    v40 = v35 + 1;
                    do
                    {
                      while (v37 == *v40)
                      {
                        v38 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v38, v40) + 4;
                        v40 += 4;
                        v39 -= 32;
                        if (!v39)
                          goto LABEL_81;
                      }
                      v38 = (_QWORD *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v38, (uint64_t)v40) + 32);
                      v40 += 4;
                      v39 -= 32;
                    }
                    while (v39);
LABEL_81:
                    v35 = (void **)v97;
                    if ((_DWORD)v98)
                    {
                      v41 = (char *)v97 - 24;
                      v42 = 32 * v98;
                      do
                      {
                        while (1)
                        {
                          v43 = (llvm::detail::DoubleAPFloat *)&v41[v42];
                          if (v37 != *(void **)&v41[v42])
                            break;
                          llvm::detail::DoubleAPFloat::~DoubleAPFloat(v43);
                          v42 -= 32;
                          if (!v42)
                            goto LABEL_86;
                        }
                        llvm::detail::IEEEFloat::~IEEEFloat(v43);
                        v42 -= 32;
                      }
                      while (v42);
LABEL_86:
                      v35 = (void **)v97;
                    }
                  }
                  v44 = v94;
                  if (v35 != (void **)v99)
                    free(v35);
                  v97 = v34;
                  HIDWORD(v98) = v44;
                }
                v45 = mlir::ElementsAttr::getNumElements((uint64_t)v88, v89);
                if (v45)
                {
                  v46 = v45;
                  v47 = v82;
                  while (1)
                  {
                    v48 = v80 ? 0 : v47;
                    if (v79)
                    {
                      v49 = (char *)v81 + 32 * v48;
                      v51 = (void *)*((_QWORD *)v49 + 1);
                      v50 = (const llvm::detail::DoubleAPFloat *)(v49 + 8);
                      if (llvm::APFloatBase::PPCDoubleDouble(v81) == v51)
                        llvm::detail::DoubleAPFloat::DoubleAPFloat(v93, v50);
                      else
                        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v93, v50);
                    }
                    else
                    {
                      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v81 + 24))(&v92);
                    }
                    v52 = HIBYTE(v76) ? 0 : v78;
                    if ((_BYTE)v76)
                    {
                      v53 = (char *)v77 + 32 * v52;
                      v55 = (void *)*((_QWORD *)v53 + 1);
                      v54 = (const llvm::detail::DoubleAPFloat *)(v53 + 8);
                      if (llvm::APFloatBase::PPCDoubleDouble(v77) == v55)
                        llvm::detail::DoubleAPFloat::DoubleAPFloat(v91, v54);
                      else
                        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v91, v54);
                    }
                    else
                    {
                      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v77 + 24))(&v90);
                    }
                    mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v94, (uint64_t)&v92, (uint64_t)&v90);
                    v56 = (void *)v91[0];
                    v58 = llvm::APFloatBase::PPCDoubleDouble(v57);
                    if (v58 == v56)
                      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v91);
                    else
                      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v91);
                    if (v58 == (void *)v93[0])
                      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v93);
                    else
                      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v93);
                    if (!v96)
                      break;
                    Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v97, (unint64_t)&v94, 1);
                    v61 = (llvm::detail::IEEEFloat *)((char *)v97 + 32 * v98 + 8);
                    v63 = (void *)*((_QWORD *)Address + 1);
                    v62 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
                    if (v58 == v63)
                      llvm::detail::DoubleAPFloat::DoubleAPFloat(v61, v62);
                    else
                      llvm::detail::IEEEFloat::IEEEFloat(v61, v62);
                    LODWORD(v98) = v98 + 1;
                    if (v96)
                    {
                      if (v58 == (void *)v95[0])
                        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95);
                      else
                        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v95);
                    }
                    v47 = ++v82;
                    ++v78;
                    if (!--v46)
                      goto LABEL_123;
                  }
                  v4 = 0;
                }
                else
                {
LABEL_123:
                  v64 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
                  v59 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v64, (uint64_t)v97, v98);
                  v4 = (uint64_t)v59;
                }
                v65 = (char *)v97;
                v66 = v98;
                if ((_DWORD)v98)
                {
                  v67 = llvm::APFloatBase::PPCDoubleDouble(v59);
                  v68 = v65 - 24;
                  v69 = 32 * v66;
                  do
                  {
                    while (1)
                    {
                      v70 = (llvm::detail::DoubleAPFloat *)&v68[v69];
                      if (v67 != *(void **)&v68[v69])
                        break;
                      llvm::detail::DoubleAPFloat::~DoubleAPFloat(v70);
                      v69 -= 32;
                      if (!v69)
                        goto LABEL_130;
                    }
                    llvm::detail::IEEEFloat::~IEEEFloat(v70);
                    v69 -= 32;
                  }
                  while (v69);
LABEL_130:
                  v65 = (char *)v97;
                }
                if (v65 != v99)
                  free(v65);
                if (!(_BYTE)v76)
                {
                  v71 = v77;
                  v77 = 0;
                  if (v71)
                    (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v71 + 8))(v71);
                }
                if (!v79)
                {
                  v72 = v81;
                  v81 = 0;
                  if (v72)
                    (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v72 + 8))(v72);
                }
                v31 = v86;
              }
              if (v31)
              {
                if (!(_BYTE)v83)
                {
                  v73 = v84;
                  v84 = 0;
                  if (v73)
                    (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v73 + 8))(v73);
                }
              }
              if (v103)
              {
                if (!v101[0])
                {
                  v74 = v102[0];
                  v102[0] = 0;
                  if (v74)
                    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
                }
              }
            }
          }
        }
      }
    }
  }
  return v4 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::ExtUIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t DefiningOp;
  unsigned int Width;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t NumElements;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *Address;
  llvm::APInt *v26;
  unsigned int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  void *v45[2];
  _OWORD v46[4];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v45[0] = *(void **)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v45);
  if (!DefiningOp
    || *(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
  {
    v45[0] = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) & 0xFFFFFFFFFFFFFFF8));
    Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v45);
    v6 = *(uint64_t **)(a2 + 40);
    v7 = *v6;
    if (!*v6)
      return v7 & 0xFFFFFFFFFFFFFFFBLL;
    v8 = *(void **)(*(_QWORD *)v7 + 136);
    if (v8 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
      return v7 & 0xFFFFFFFFFFFFFFFBLL;
    v9 = Width;
    v10 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) & 0xFFFFFFFFFFFFFFF8);
    if (v8 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      v38 = *v6;
      mlir::IntegerAttr::getValue(&v38, (llvm::APInt *)&v43);
      llvm::APInt::zext((llvm::APInt *)&v43, v9, (uint64_t)v45);
      if (DWORD2(v43) >= 0x41 && (_QWORD)v43)
        MEMORY[0x20BD002D4](v43, 0x1000C8000313F17);
      v7 = mlir::IntegerAttr::get((uint64_t)v10, (llvm::APInt *)v45);
      if (LODWORD(v45[1]) < 0x41)
        return v7 & 0xFFFFFFFFFFFFFFFBLL;
LABEL_37:
      if (v45[0])
        MEMORY[0x20BD002D4](v45[0], 0x1000C8000313F17);
      return v7 & 0xFFFFFFFFFFFFFFFBLL;
    }
    if (mlir::DenseElementsAttr::classof(*v6))
      v11 = (void *)v7;
    else
      v11 = 0;
    v45[0] = v11;
    if (v11 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v45))
    {
      v41 = *v6;
      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v41, (uint64_t)v45);
      v43 = *(_OWORD *)v45;
      v44 = v46[0];
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v43, (llvm::APInt *)&v38);
      llvm::APInt::zext((llvm::APInt *)&v38, v9, (uint64_t)v45);
      if (v39 >= 0x41 && v38)
        MEMORY[0x20BD002D4](v38, 0x1000C8000313F17);
      if (v10)
        v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
      else
        v12 = 0;
      v7 = mlir::DenseElementsAttr::get((uint64_t)v10, v12, (llvm::APInt *)v45, 1);
      if (LODWORD(v45[1]) < 0x41)
        return v7 & 0xFFFFFFFFFFFFFFFBLL;
      goto LABEL_37;
    }
    v7 = *v6;
    if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v6 + 8))
    {
      v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v7 + 8);
      v41 = v7;
      v42 = v18;
      if (!v7)
        return v7 & 0xFFFFFFFFFFFFFFFBLL;
      mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v41, (uint64_t)&v43);
      if (BYTE8(v44))
      {
        LOWORD(v38) = v43;
        if ((_BYTE)v43)
          v39 = *((_QWORD *)&v43 + 1);
        else
          (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)&v43 + 1) + 16))(&v39);
        v40 = v44;
        v45[0] = v46;
        v45[1] = (void *)0x300000000;
        NumElements = mlir::ElementsAttr::getNumElements(v41, v42);
        llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)v45, NumElements);
        v20 = mlir::ElementsAttr::getNumElements(v41, v42);
        if (!v20)
        {
LABEL_60:
          if (v10)
            v28 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
          else
            v28 = 0;
          v7 = mlir::DenseElementsAttr::get((uint64_t)v10, v28, (llvm::APInt *)v45[0], LODWORD(v45[1]));
          v29 = (char *)v45[0];
          if (LODWORD(v45[1]))
          {
            v30 = 16 * LODWORD(v45[1]);
            do
            {
              if (*(_DWORD *)&v29[v30 - 8] >= 0x41u)
              {
                v31 = *(_QWORD *)&v29[v30 - 16];
                if (v31)
                  MEMORY[0x20BD002D4](v31, 0x1000C8000313F17);
              }
              v30 -= 16;
            }
            while (v30);
            v29 = (char *)v45[0];
          }
          if (v29 != (char *)v46)
            free(v29);
          if (!(_BYTE)v38)
          {
            v32 = v39;
            v39 = 0;
            if (v32)
              (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          }
          if (BYTE8(v44))
          {
            if (!(_BYTE)v43)
            {
              v33 = *((_QWORD *)&v43 + 1);
              *((_QWORD *)&v43 + 1) = 0;
              if (v33)
                (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
            }
          }
          return v7 & 0xFFFFFFFFFFFFFFFBLL;
        }
        v21 = v20;
        v22 = v40;
        while (1)
        {
          if (BYTE1(v38))
            v23 = 0;
          else
            v23 = v22;
          if ((_BYTE)v38)
          {
            v24 = v39 + 16 * v23;
            v35 = *(_DWORD *)(v24 + 8);
            if (v35 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v34, (const void **)v24);
            else
              v34 = *(const void **)v24;
          }
          else
          {
            (*(void (**)(const void **__return_ptr))(*(_QWORD *)v39 + 24))(&v34);
          }
          llvm::APInt::zext((llvm::APInt *)&v34, v9, (uint64_t)&v36);
          if (v35 >= 0x41 && v34)
            MEMORY[0x20BD002D4](v34, 0x1000C8000313F17);
          Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)v45, (unint64_t)&v36, 1);
          v26 = (llvm::APInt *)((char *)v45[0] + 16 * LODWORD(v45[1]));
          v27 = *((_DWORD *)Address + 2);
          *((_DWORD *)v26 + 2) = v27;
          if (v27 > 0x40)
          {
            llvm::APInt::initSlowCase(v26, (const void **)Address);
            ++LODWORD(v45[1]);
            if (v37 >= 0x41)
            {
LABEL_58:
              if (v36)
                MEMORY[0x20BD002D4](v36, 0x1000C8000313F17);
            }
          }
          else
          {
            *(_QWORD *)v26 = *(_QWORD *)Address;
            ++LODWORD(v45[1]);
            if (v37 >= 0x41)
              goto LABEL_58;
          }
          v22 = ++v40;
          if (!--v21)
            goto LABEL_60;
        }
      }
      v7 = 0;
    }
    else
    {
      v7 = 0;
      v41 = 0;
      v42 = 0;
    }
    return v7 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v13 = *(uint64_t **)(*(_QWORD *)a1 + 72);
  v14 = *(uint64_t **)(*(_QWORD *)(DefiningOp + 72) + 24);
  v15 = (uint64_t *)v13[1];
  if (v15)
  {
    *v15 = *v13;
    if (*v13)
      *(_QWORD *)(*v13 + 8) = v13[1];
  }
  v13[3] = (uint64_t)v14;
  v13[1] = (uint64_t)v14;
  v16 = *v14;
  *v13 = *v14;
  if (v16)
    *(_QWORD *)(v16 + 8) = v13;
  *v14 = (uint64_t)v13;
  return (*(_QWORD *)a1 - 16) | 4;
}

BOOL checkWidthChangeCast<std::greater,mlir::IntegerType>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;
  _QWORD *v7;
  void *v8;
  BOOL v9;
  BOOL v10;
  uint64_t ElementTypeOrSelf;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unsigned int IntOrFloatBitWidth;
  uint64_t v21;
  uint64_t v22;

  result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    v7 = (_QWORD *)mlir::TypeRange::dereference_iterator(a1, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8)
      || ((v8 = *(void **)(*v7 + 136), v8 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (v9 = v8 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (v9 = 1),
          !v9 ? (v10 = v8 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (v10 = 1),
          v10))
    {
      ElementTypeOrSelf = mlir::getElementTypeOrSelf(v7);
      if (*(_UNKNOWN **)(*(_QWORD *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
        v12 = ElementTypeOrSelf;
      else
        v12 = 0;
    }
    else
    {
      v12 = 0;
    }
    v22 = v12;
    v13 = (_QWORD *)mlir::TypeRange::dereference_iterator(a3, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8)
      || ((v14 = *(void **)(*v13 + 136), v14 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (v15 = v14 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (v15 = 1),
          !v15 ? (v16 = v14 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (v16 = 1),
          v16))
    {
      v17 = mlir::getElementTypeOrSelf(v13);
      if (*(_UNKNOWN **)(*(_QWORD *)v17 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
        v18 = v17;
      else
        v18 = 0;
      v21 = v18;
      if (v12)
        v19 = v18 == 0;
      else
        v19 = 1;
      if (v19)
      {
        return 0;
      }
      else
      {
        IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v21);
        return IntOrFloatBitWidth > mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v22);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::arith::ExtUIOp::verify(uint64_t **this)
{
  uint64_t ElementTypeOrSelf;
  uint64_t v2;
  unsigned int Width;
  uint64_t v4;
  int *v5;
  char *v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  int64_t v33;
  _QWORD v34[4];
  __int16 v35;
  uint64_t *v36;
  int v37;
  const char *v38;
  uint64_t v39;
  _QWORD v40[3];
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD *v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v36 = *this;
  ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v36[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  v2 = mlir::getElementTypeOrSelf((_QWORD *)(*(v36 - 1) & 0xFFFFFFFFFFFFFFF8));
  v40[0] = ElementTypeOrSelf;
  Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v40);
  v34[0] = v2;
  if (Width < mlir::IntegerType::getWidth((mlir::IntegerType *)v34))
    return 1;
  v34[0] = "result type ";
  v35 = 259;
  mlir::OpState::emitError(&v36, (uint64_t)v34, (uint64_t)v40);
  if (v40[0])
  {
    v5 = &v37;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, v2);
    v6 = (char *)v41;
    if (v42 >= v43)
    {
      v27 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        v31 = (char *)&v37 - (_BYTE *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        v6 = (char *)v41;
        v5 = (int *)((char *)v41 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        v5 = &v37;
        v6 = (char *)v41;
      }
    }
    v7 = &v6[24 * v42];
    v8 = *(_OWORD *)v5;
    *((_QWORD *)v7 + 2) = *((_QWORD *)v5 + 2);
    *(_OWORD *)v7 = v8;
    v9 = ++v42;
    if (v40[0])
    {
      v37 = 3;
      v38 = " must be wider than operand type ";
      v39 = 33;
      v10 = &v37;
      v11 = (char *)v41;
      if (v9 >= v43)
      {
        v28 = v9 + 1;
        v29 = (char *)v41 + 24 * v9 > (char *)&v37;
        if (v41 <= &v37 && v29)
        {
          v32 = (char *)&v37 - (_BYTE *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          v11 = (char *)v41;
          v10 = (int *)((char *)v41 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          v10 = &v37;
          v11 = (char *)v41;
        }
      }
      v12 = &v11[24 * v42];
      v13 = *(_OWORD *)v10;
      *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v12 = v13;
      ++v42;
      if (v40[0])
      {
        v14 = &v37;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, ElementTypeOrSelf);
        v15 = (char *)v41;
        if (v42 >= v43)
        {
          v30 = v42 + 1;
          if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
          {
            v33 = (char *)&v37 - (_BYTE *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            v15 = (char *)v41;
            v14 = (int *)((char *)v41 + v33);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            v14 = &v37;
            v15 = (char *)v41;
          }
        }
        v16 = &v15[24 * v42];
        v17 = *(_OWORD *)v14;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v16 = v17;
        ++v42;
      }
    }
  }
  v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  if (v49)
  {
    v18 = __p;
    if (__p)
    {
      v19 = v48;
      v20 = __p;
      if (v48 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v48 = v18;
      operator delete(v20);
    }
    v21 = v45;
    if (v45)
    {
      v22 = v46;
      v23 = v45;
      if (v46 != v45)
      {
        do
        {
          v25 = *--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
        }
        while (v22 != v21);
        v23 = v45;
      }
      v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44)
      free(v41);
  }
  return v4;
}

uint64_t mlir::arith::ExtSIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t DefiningOp;
  unsigned int Width;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t NumElements;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *Address;
  llvm::APInt *v26;
  unsigned int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  void *v45[2];
  _OWORD v46[4];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v45[0] = *(void **)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v45);
  if (!DefiningOp
    || *(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
  {
    v45[0] = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) & 0xFFFFFFFFFFFFFFF8));
    Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v45);
    v6 = *(uint64_t **)(a2 + 40);
    v7 = *v6;
    if (!*v6)
      return v7 & 0xFFFFFFFFFFFFFFFBLL;
    v8 = *(void **)(*(_QWORD *)v7 + 136);
    if (v8 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
      return v7 & 0xFFFFFFFFFFFFFFFBLL;
    v9 = Width;
    v10 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) & 0xFFFFFFFFFFFFFFF8);
    if (v8 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      v38 = *v6;
      mlir::IntegerAttr::getValue(&v38, (llvm::APInt *)&v43);
      llvm::APInt::sext(&v43, v9, (uint64_t)v45);
      if (DWORD2(v43) >= 0x41 && (_QWORD)v43)
        MEMORY[0x20BD002D4](v43, 0x1000C8000313F17);
      v7 = mlir::IntegerAttr::get((uint64_t)v10, (llvm::APInt *)v45);
      if (LODWORD(v45[1]) < 0x41)
        return v7 & 0xFFFFFFFFFFFFFFFBLL;
LABEL_37:
      if (v45[0])
        MEMORY[0x20BD002D4](v45[0], 0x1000C8000313F17);
      return v7 & 0xFFFFFFFFFFFFFFFBLL;
    }
    if (mlir::DenseElementsAttr::classof(*v6))
      v11 = (void *)v7;
    else
      v11 = 0;
    v45[0] = v11;
    if (v11 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v45))
    {
      v41 = *v6;
      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v41, (uint64_t)v45);
      v43 = *(_OWORD *)v45;
      v44 = v46[0];
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v43, (llvm::APInt *)&v38);
      llvm::APInt::sext(&v38, v9, (uint64_t)v45);
      if (v39 >= 0x41 && v38)
        MEMORY[0x20BD002D4](v38, 0x1000C8000313F17);
      if (v10)
        v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
      else
        v12 = 0;
      v7 = mlir::DenseElementsAttr::get((uint64_t)v10, v12, (llvm::APInt *)v45, 1);
      if (LODWORD(v45[1]) < 0x41)
        return v7 & 0xFFFFFFFFFFFFFFFBLL;
      goto LABEL_37;
    }
    v7 = *v6;
    if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v6 + 8))
    {
      v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v7 + 8);
      v41 = v7;
      v42 = v18;
      if (!v7)
        return v7 & 0xFFFFFFFFFFFFFFFBLL;
      mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v41, (uint64_t)&v43);
      if (BYTE8(v44))
      {
        LOWORD(v38) = v43;
        if ((_BYTE)v43)
          v39 = *((_QWORD *)&v43 + 1);
        else
          (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)&v43 + 1) + 16))(&v39);
        v40 = v44;
        v45[0] = v46;
        v45[1] = (void *)0x300000000;
        NumElements = mlir::ElementsAttr::getNumElements(v41, v42);
        llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)v45, NumElements);
        v20 = mlir::ElementsAttr::getNumElements(v41, v42);
        if (!v20)
        {
LABEL_60:
          if (v10)
            v28 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
          else
            v28 = 0;
          v7 = mlir::DenseElementsAttr::get((uint64_t)v10, v28, (llvm::APInt *)v45[0], LODWORD(v45[1]));
          v29 = (char *)v45[0];
          if (LODWORD(v45[1]))
          {
            v30 = 16 * LODWORD(v45[1]);
            do
            {
              if (*(_DWORD *)&v29[v30 - 8] >= 0x41u)
              {
                v31 = *(_QWORD *)&v29[v30 - 16];
                if (v31)
                  MEMORY[0x20BD002D4](v31, 0x1000C8000313F17);
              }
              v30 -= 16;
            }
            while (v30);
            v29 = (char *)v45[0];
          }
          if (v29 != (char *)v46)
            free(v29);
          if (!(_BYTE)v38)
          {
            v32 = v39;
            v39 = 0;
            if (v32)
              (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          }
          if (BYTE8(v44))
          {
            if (!(_BYTE)v43)
            {
              v33 = *((_QWORD *)&v43 + 1);
              *((_QWORD *)&v43 + 1) = 0;
              if (v33)
                (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
            }
          }
          return v7 & 0xFFFFFFFFFFFFFFFBLL;
        }
        v21 = v20;
        v22 = v40;
        while (1)
        {
          if (BYTE1(v38))
            v23 = 0;
          else
            v23 = v22;
          if ((_BYTE)v38)
          {
            v24 = v39 + 16 * v23;
            v35 = *(_DWORD *)(v24 + 8);
            if (v35 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v34, (const void **)v24);
            else
              v34 = *(const void **)v24;
          }
          else
          {
            (*(void (**)(const void **__return_ptr))(*(_QWORD *)v39 + 24))(&v34);
          }
          llvm::APInt::sext(&v34, v9, (uint64_t)&v36);
          if (v35 >= 0x41 && v34)
            MEMORY[0x20BD002D4](v34, 0x1000C8000313F17);
          Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)v45, (unint64_t)&v36, 1);
          v26 = (llvm::APInt *)((char *)v45[0] + 16 * LODWORD(v45[1]));
          v27 = *((_DWORD *)Address + 2);
          *((_DWORD *)v26 + 2) = v27;
          if (v27 > 0x40)
          {
            llvm::APInt::initSlowCase(v26, (const void **)Address);
            ++LODWORD(v45[1]);
            if (v37 >= 0x41)
            {
LABEL_58:
              if (v36)
                MEMORY[0x20BD002D4](v36, 0x1000C8000313F17);
            }
          }
          else
          {
            *(_QWORD *)v26 = *(_QWORD *)Address;
            ++LODWORD(v45[1]);
            if (v37 >= 0x41)
              goto LABEL_58;
          }
          v22 = ++v40;
          if (!--v21)
            goto LABEL_60;
        }
      }
      v7 = 0;
    }
    else
    {
      v7 = 0;
      v41 = 0;
      v42 = 0;
    }
    return v7 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v13 = *(uint64_t **)(*(_QWORD *)a1 + 72);
  v14 = *(uint64_t **)(*(_QWORD *)(DefiningOp + 72) + 24);
  v15 = (uint64_t *)v13[1];
  if (v15)
  {
    *v15 = *v13;
    if (*v13)
      *(_QWORD *)(*v13 + 8) = v13[1];
  }
  v13[3] = (uint64_t)v14;
  v13[1] = (uint64_t)v14;
  v16 = *v14;
  *v13 = *v14;
  if (v16)
    *(_QWORD *)(v16 + 8) = v13;
  *v14 = (uint64_t)v13;
  return (*(_QWORD *)a1 - 16) | 4;
}

void mlir::arith::ExtSIOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  const char *v39;
  unint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v38, 2);
  v39 = "arith.extui";
  v40 = 11;
  mlir::Pattern::Pattern(v4 + 8, (uint64_t)"arith.extsi", 11, v38, a2, &v39, 1uLL);
  *(_QWORD *)v4 = &off_24C028678;
  if (*(_QWORD *)(v4 + 72))
  {
    v5 = *(unsigned int *)(v4 + 88);
    if (v5 <= *(_DWORD *)(v4 + 92))
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 80, (void *)(v4 + 96), v5, 16);
    *(_DWORD *)(v4 + 88) = *(_DWORD *)(v4 + 88);
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v39 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ExtSIOfExtUI]";
  v40 = 85;
  v9 = llvm::StringRef::find((uint64_t *)&v39, "DesiredTypeName = ", 0x12uLL, 0);
  if (v40 >= v9)
    v10 = v9;
  else
    v10 = v40;
  v11 = &v39[v10];
  v12 = v40 - v10;
  if (v40 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v40 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *(_QWORD *)(v4 + 64) = v14;
  *(_QWORD *)(v4 + 72) = v15;
  v5 = *(unsigned int *)(v4 + 88);
  if (v5 > *(_DWORD *)(v4 + 92))
    goto LABEL_14;
LABEL_3:
  *(_DWORD *)(v4 + 88) = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v4;
    v8 = (uint64_t)(v22 + 1);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (uint64_t *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v22
        && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 = (uint64_t *)((char *)v22 - v27);
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *--v22 = v34;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
}

unint64_t mlir::arith::ExtFOp::fold(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  double v4;
  llvm::APFloatBase *v5;
  unint64_t v6;
  void *v7;
  uint64_t v9;
  _BYTE v10[8];
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v2 = **(_QWORD **)(a2 + 40);
  if (!v2)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v2 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
    v2 = 0;
  v9 = v2;
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v9, (uint64_t)v10);
  v4 = llvm::APFloat::convertToDouble((llvm::APFloat *)v10);
  v5 = mlir::FloatAttr::get(v3, v4);
  v6 = (unint64_t)v5 & 0xFFFFFFFFFFFFFFFBLL;
  v7 = (void *)v11[0];
  if (llvm::APFloatBase::PPCDoubleDouble(v5) == v7)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v11);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v11);
  return v6;
}

void llvm::APFloat::~APFloat(llvm::APFloat *this)
{
  llvm::detail::DoubleAPFloat *v1;
  void *v2;

  v1 = (llvm::APFloat *)((char *)this + 8);
  v2 = (void *)*((_QWORD *)this + 1);
  if (llvm::APFloatBase::PPCDoubleDouble(this) == v2)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v1);
  else
    llvm::detail::IEEEFloat::~IEEEFloat(v1);
}

BOOL mlir::arith::ExtFOp::areCastCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;
  _QWORD *v7;
  void *v8;
  BOOL v9;
  BOOL v10;
  uint64_t ElementTypeOrSelf;
  void *v12;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  unsigned int IntOrFloatBitWidth;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    v7 = (_QWORD *)mlir::TypeRange::dereference_iterator(a1, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8)
      || ((v8 = *(void **)(*v7 + 136), v8 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (v9 = v8 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (v9 = 1),
          !v9 ? (v10 = v8 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (v10 = 1),
          v10))
    {
      ElementTypeOrSelf = mlir::getElementTypeOrSelf(v7);
      v12 = *(void **)(*(_QWORD *)ElementTypeOrSelf + 136);
      if (v12 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        v29 = ElementTypeOrSelf;
      }
      else
      {
        v29 = 0;
      }
    }
    else
    {
      v29 = 0;
    }
    v31 = v29;
    v24 = (_QWORD *)mlir::TypeRange::dereference_iterator(a3, 0);
    if ((!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v24 + 8)
       || (v25 = *(void **)(*v24 + 136), v25 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
       || v25 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
       || v25 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      && ((v26 = mlir::getElementTypeOrSelf(v24),
           v27 = *(void **)(*(_QWORD *)v26 + 136),
           v27 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      && (v30 = v26, v29))
    {
      IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v30);
      return IntOrFloatBitWidth > mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v31);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::arith::ExtFOp::verify(uint64_t **this)
{
  uint64_t ElementTypeOrSelf;
  uint64_t v2;
  unsigned int Width;
  uint64_t v4;
  int *v5;
  char *v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  int64_t v33;
  _QWORD v34[4];
  __int16 v35;
  uint64_t *v36;
  int v37;
  const char *v38;
  uint64_t v39;
  _QWORD v40[3];
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD *v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v36 = *this;
  ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v36[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  v2 = mlir::getElementTypeOrSelf((_QWORD *)(*(v36 - 1) & 0xFFFFFFFFFFFFFFF8));
  v40[0] = ElementTypeOrSelf;
  Width = mlir::FloatType::getWidth((mlir::FloatType *)v40);
  v34[0] = v2;
  if (Width < mlir::FloatType::getWidth((mlir::FloatType *)v34))
    return 1;
  v34[0] = "result type ";
  v35 = 259;
  mlir::OpState::emitError(&v36, (uint64_t)v34, (uint64_t)v40);
  if (v40[0])
  {
    v5 = &v37;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, v2);
    v6 = (char *)v41;
    if (v42 >= v43)
    {
      v27 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        v31 = (char *)&v37 - (_BYTE *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        v6 = (char *)v41;
        v5 = (int *)((char *)v41 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        v5 = &v37;
        v6 = (char *)v41;
      }
    }
    v7 = &v6[24 * v42];
    v8 = *(_OWORD *)v5;
    *((_QWORD *)v7 + 2) = *((_QWORD *)v5 + 2);
    *(_OWORD *)v7 = v8;
    v9 = ++v42;
    if (v40[0])
    {
      v37 = 3;
      v38 = " must be wider than operand type ";
      v39 = 33;
      v10 = &v37;
      v11 = (char *)v41;
      if (v9 >= v43)
      {
        v28 = v9 + 1;
        v29 = (char *)v41 + 24 * v9 > (char *)&v37;
        if (v41 <= &v37 && v29)
        {
          v32 = (char *)&v37 - (_BYTE *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          v11 = (char *)v41;
          v10 = (int *)((char *)v41 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          v10 = &v37;
          v11 = (char *)v41;
        }
      }
      v12 = &v11[24 * v42];
      v13 = *(_OWORD *)v10;
      *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v12 = v13;
      ++v42;
      if (v40[0])
      {
        v14 = &v37;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, ElementTypeOrSelf);
        v15 = (char *)v41;
        if (v42 >= v43)
        {
          v30 = v42 + 1;
          if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
          {
            v33 = (char *)&v37 - (_BYTE *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            v15 = (char *)v41;
            v14 = (int *)((char *)v41 + v33);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            v14 = &v37;
            v15 = (char *)v41;
          }
        }
        v16 = &v15[24 * v42];
        v17 = *(_OWORD *)v14;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v16 = v17;
        ++v42;
      }
    }
  }
  v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  if (v49)
  {
    v18 = __p;
    if (__p)
    {
      v19 = v48;
      v20 = __p;
      if (v48 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v48 = v18;
      operator delete(v20);
    }
    v21 = v45;
    if (v45)
    {
      v22 = v46;
      v23 = v45;
      if (v46 != v45)
      {
        do
        {
          v25 = *--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
        }
        while (v22 != v21);
        v23 = v45;
      }
      v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44)
      free(v41);
  }
  return v4;
}

uint64_t mlir::arith::TruncIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t DefiningOp;
  uint64_t v5;
  uint64_t v6;
  unsigned int Width;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t ElementTypeOrSelf;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t NumElements;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *Address;
  llvm::APInt *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v50);
  if (DefiningOp
    && *(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id
    || (*(_QWORD *)&v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24),
        (v5 = mlir::Value::getDefiningOp((mlir::Value *)&v50)) != 0)
    && *(_UNKNOWN **)(*(_QWORD *)(v5 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
  {
    *(_QWORD *)&v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
    v15 = *(_QWORD *)(*(_QWORD *)(mlir::Value::getDefiningOp((mlir::Value *)&v50) + 72) + 24);
    ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8));
    v17 = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) & 0xFFFFFFFFFFFFFFF8));
    *(_QWORD *)&v50 = ElementTypeOrSelf;
    LODWORD(ElementTypeOrSelf) = mlir::IntegerType::getWidth((mlir::IntegerType *)&v50);
    *(_QWORD *)&v48 = v17;
    if (ElementTypeOrSelf <= mlir::IntegerType::getWidth((mlir::IntegerType *)&v48))
      return v15 | 4;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 72);
    v19 = (_QWORD *)v18[1];
    if (v19)
    {
      *v19 = *v18;
      if (*v18)
        *(_QWORD *)(*v18 + 8) = v18[1];
    }
    v18[3] = v15;
    v18[1] = v15;
    v20 = *(_QWORD *)v15;
    *v18 = *(_QWORD *)v15;
    if (v20)
      *(_QWORD *)(v20 + 8) = v18;
    *(_QWORD *)v15 = v18;
    return (*(_QWORD *)a1 - 16) | 4;
  }
  *(_QWORD *)&v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  v6 = mlir::Value::getDefiningOp((mlir::Value *)&v50);
  if (v6
    && *(_UNKNOWN **)(*(_QWORD *)(v6 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::TruncIOp,void>::id)
  {
    *(_QWORD *)&v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
    v22 = *(uint64_t **)(*(_QWORD *)(mlir::Value::getDefiningOp((mlir::Value *)&v50) + 72) + 24);
    v23 = *(uint64_t **)(*(_QWORD *)a1 + 72);
    v24 = (uint64_t *)v23[1];
    if (v24)
    {
      *v24 = *v23;
      if (*v23)
        *(_QWORD *)(*v23 + 8) = v23[1];
    }
    v23[3] = (uint64_t)v22;
    v23[1] = (uint64_t)v22;
    v25 = *v22;
    *v23 = *v22;
    if (v25)
      *(_QWORD *)(v25 + 8) = v23;
    *v22 = (uint64_t)v23;
    return (*(_QWORD *)a1 - 16) | 4;
  }
  *(_QWORD *)&v50 = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) & 0xFFFFFFFFFFFFFFF8));
  Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&v50);
  v8 = *(uint64_t **)(a2 + 40);
  v9 = *v8;
  if (!*v8)
    return v9 & 0xFFFFFFFFFFFFFFFBLL;
  v10 = *(void **)(*(_QWORD *)v9 + 136);
  if (v10 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    return v9 & 0xFFFFFFFFFFFFFFFBLL;
  v11 = Width;
  v12 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v10 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v43 = *v8;
    mlir::IntegerAttr::getValue(&v43, (llvm::APInt *)&v48);
    llvm::APInt::trunc((char *)&v48, v11, (uint64_t)&v50);
    if (DWORD2(v48) >= 0x41 && (_QWORD)v48)
      MEMORY[0x20BD002D4](v48, 0x1000C8000313F17);
    v9 = mlir::IntegerAttr::get((uint64_t)v12, (llvm::APInt *)&v50);
    if (DWORD2(v50) < 0x41)
      return v9 & 0xFFFFFFFFFFFFFFFBLL;
LABEL_50:
    if ((_QWORD)v50)
      MEMORY[0x20BD002D4](v50, 0x1000C8000313F17);
    return v9 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (mlir::DenseElementsAttr::classof(*v8))
    v13 = v9;
  else
    v13 = 0;
  *(_QWORD *)&v50 = v13;
  if (v13 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v50))
  {
    v46 = *v8;
    mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v46, (uint64_t)&v50);
    v48 = v50;
    v49 = v51;
    mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v48, (llvm::APInt *)&v43);
    llvm::APInt::trunc((char *)&v43, v11, (uint64_t)&v50);
    if (v44 >= 0x41 && v43)
      MEMORY[0x20BD002D4](v43, 0x1000C8000313F17);
    if (v12)
      v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8);
    else
      v14 = 0;
    v9 = mlir::DenseElementsAttr::get((uint64_t)v12, v14, (llvm::APInt *)&v50, 1);
    if (DWORD2(v50) < 0x41)
      return v9 & 0xFFFFFFFFFFFFFFFBLL;
    goto LABEL_50;
  }
  v9 = *v8;
  if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v8 + 8))
  {
    v26 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v9 + 8);
    v46 = v9;
    v47 = v26;
    if (!v9)
      return v9 & 0xFFFFFFFFFFFFFFFBLL;
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v46, (uint64_t)&v48);
    if (BYTE8(v49))
    {
      LOWORD(v43) = v48;
      if ((_BYTE)v48)
        v44 = *((_QWORD *)&v48 + 1);
      else
        (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)&v48 + 1) + 16))(&v44);
      v45 = v49;
      *(_QWORD *)&v50 = &v51;
      *((_QWORD *)&v50 + 1) = 0x300000000;
      NumElements = mlir::ElementsAttr::getNumElements(v46, v47);
      llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v50, NumElements);
      v28 = mlir::ElementsAttr::getNumElements(v46, v47);
      if (!v28)
      {
LABEL_73:
        if (v12)
          v36 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8);
        else
          v36 = 0;
        v9 = mlir::DenseElementsAttr::get((uint64_t)v12, v36, (llvm::APInt *)v50, DWORD2(v50));
        llvm::SmallVector<llvm::APInt,4u>::~SmallVector((char **)&v50);
        if (!(_BYTE)v43)
        {
          v37 = v44;
          v44 = 0;
          if (v37)
            (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        }
        if (BYTE8(v49))
        {
          if (!(_BYTE)v48)
          {
            v38 = *((_QWORD *)&v48 + 1);
            *((_QWORD *)&v48 + 1) = 0;
            if (v38)
              (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
          }
        }
        return v9 & 0xFFFFFFFFFFFFFFFBLL;
      }
      v29 = v28;
      v30 = v45;
      while (1)
      {
        if (BYTE1(v43))
          v31 = 0;
        else
          v31 = v30;
        if ((_BYTE)v43)
        {
          v32 = v44 + 16 * v31;
          v40 = *(_DWORD *)(v32 + 8);
          if (v40 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v39, (const void **)v32);
          else
            v39 = *(const void **)v32;
        }
        else
        {
          (*(void (**)(const void **__return_ptr))(*(_QWORD *)v44 + 24))(&v39);
        }
        llvm::APInt::trunc((char *)&v39, v11, (uint64_t)&v41);
        if (v40 >= 0x41 && v39)
          MEMORY[0x20BD002D4](v39, 0x1000C8000313F17);
        Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v50, (unint64_t)&v41, 1);
        v34 = (llvm::APInt *)(v50 + 16 * DWORD2(v50));
        v35 = *((_DWORD *)Address + 2);
        *((_DWORD *)v34 + 2) = v35;
        if (v35 > 0x40)
        {
          llvm::APInt::initSlowCase(v34, (const void **)Address);
          ++DWORD2(v50);
          if (v42 >= 0x41)
          {
LABEL_71:
            if (v41)
              MEMORY[0x20BD002D4](v41, 0x1000C8000313F17);
          }
        }
        else
        {
          *(_QWORD *)v34 = *(_QWORD *)Address;
          ++DWORD2(v50);
          if (v42 >= 0x41)
            goto LABEL_71;
        }
        v30 = ++v45;
        if (!--v29)
          goto LABEL_73;
      }
    }
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v46 = 0;
    v47 = 0;
  }
  return v9 & 0xFFFFFFFFFFFFFFFBLL;
}

BOOL mlir::arith::TruncIOp::areCastCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;
  _QWORD *v7;
  void *v8;
  BOOL v9;
  BOOL v10;
  uint64_t ElementTypeOrSelf;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unsigned int IntOrFloatBitWidth;
  uint64_t v21;
  uint64_t v22;

  result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    v7 = (_QWORD *)mlir::TypeRange::dereference_iterator(a1, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8)
      || ((v8 = *(void **)(*v7 + 136), v8 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (v9 = v8 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (v9 = 1),
          !v9 ? (v10 = v8 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (v10 = 1),
          v10))
    {
      ElementTypeOrSelf = mlir::getElementTypeOrSelf(v7);
      if (*(_UNKNOWN **)(*(_QWORD *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
        v12 = ElementTypeOrSelf;
      else
        v12 = 0;
    }
    else
    {
      v12 = 0;
    }
    v22 = v12;
    v13 = (_QWORD *)mlir::TypeRange::dereference_iterator(a3, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8)
      || ((v14 = *(void **)(*v13 + 136), v14 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (v15 = v14 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (v15 = 1),
          !v15 ? (v16 = v14 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (v16 = 1),
          v16))
    {
      v17 = mlir::getElementTypeOrSelf(v13);
      if (*(_UNKNOWN **)(*(_QWORD *)v17 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
        v18 = v17;
      else
        v18 = 0;
      v21 = v18;
      if (v12)
        v19 = v18 == 0;
      else
        v19 = 1;
      if (v19)
      {
        return 0;
      }
      else
      {
        IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v21);
        return IntOrFloatBitWidth < mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v22);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void mlir::arith::TruncIOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t *v90;
  char *v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  uint64_t *v124;
  char *v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  uint64_t *v158;
  char *v159;
  char *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  __int16 v174;
  _OWORD v175[3];
  uint64_t v176;

  v176 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v174, 2);
  *(_QWORD *)&v175[0] = "arith.extsi";
  *((_QWORD *)&v175[0] + 1) = 11;
  mlir::Pattern::Pattern(v4 + 8, (uint64_t)"arith.trunci", 12, v174, a2, v175, 1uLL);
  *(_QWORD *)v4 = &off_24C0297C8;
  if (*(_QWORD *)(v4 + 72))
  {
    v5 = *(unsigned int *)(v4 + 88);
    if (v5 <= *(_DWORD *)(v4 + 92))
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 80, (void *)(v4 + 96), v5, 16);
    *(_DWORD *)(v4 + 88) = *(_DWORD *)(v4 + 88);
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  *(_QWORD *)&v175[0] = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::TruncIExtSIToExtSI]";
  *((_QWORD *)&v175[0] + 1) = 91;
  v9 = llvm::StringRef::find((uint64_t *)v175, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((_QWORD *)&v175[0] + 1) >= v9)
    v10 = v9;
  else
    v10 = *((_QWORD *)&v175[0] + 1);
  v11 = *(_QWORD *)&v175[0] + v10;
  v12 = *((_QWORD *)&v175[0] + 1) - v10;
  if (*((_QWORD *)&v175[0] + 1) - v10 >= 0x12)
    v13 = 18;
  else
    v13 = *((_QWORD *)&v175[0] + 1) - v10;
  v14 = v11 + v13;
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *(_QWORD *)(v4 + 64) = v14;
  *(_QWORD *)(v4 + 72) = v15;
  v5 = *(unsigned int *)(v4 + 88);
  if (v5 > *(_DWORD *)(v4 + 92))
    goto LABEL_14;
LABEL_3:
  *(_DWORD *)(v4 + 88) = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_192;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_193;
    v21 = (char *)operator new(8 * v20);
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v4;
    v8 = (uint64_t)(v22 + 1);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (uint64_t *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v22
        && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_196;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 = (uint64_t *)((char *)v22 - v27);
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_196:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *--v22 = v34;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v174, 2);
  *(_QWORD *)&v175[0] = "arith.extui";
  *((_QWORD *)&v175[0] + 1) = 11;
  mlir::Pattern::Pattern(v38 + 8, (uint64_t)"arith.trunci", 12, v174, a2, v175, 1uLL);
  *(_QWORD *)v38 = &off_24C029808;
  if (*(_QWORD *)(v38 + 72))
  {
    v39 = *(unsigned int *)(v38 + 88);
    if (v39 <= *(_DWORD *)(v38 + 92))
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v38 + 80, (void *)(v38 + 96), v39, 16);
    *(_DWORD *)(v38 + 88) = *(_DWORD *)(v38 + 88);
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  *(_QWORD *)&v175[0] = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::TruncIExtUIToExtUI]";
  *((_QWORD *)&v175[0] + 1) = 91;
  v43 = llvm::StringRef::find((uint64_t *)v175, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((_QWORD *)&v175[0] + 1) >= v43)
    v44 = v43;
  else
    v44 = *((_QWORD *)&v175[0] + 1);
  v45 = *(_QWORD *)&v175[0] + v44;
  v46 = *((_QWORD *)&v175[0] + 1) - v44;
  if (*((_QWORD *)&v175[0] + 1) - v44 >= 0x12)
    v47 = 18;
  else
    v47 = *((_QWORD *)&v175[0] + 1) - v44;
  v48 = v45 + v47;
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *(_QWORD *)(v38 + 64) = v48;
  *(_QWORD *)(v38 + 72) = v49;
  v39 = *(unsigned int *)(v38 + 88);
  if (v39 > *(_DWORD *)(v38 + 92))
    goto LABEL_52;
LABEL_41:
  *(_DWORD *)(v38 + 88) = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
    goto LABEL_192;
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (v54)
  {
    if (v54 >> 61)
      goto LABEL_193;
    v55 = (char *)operator new(8 * v54);
    v56 = (uint64_t *)&v55[8 * v51];
    v57 = &v55[8 * v54];
    *v56 = v38;
    v42 = (uint64_t)(v56 + 1);
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
  }
  else
  {
    v55 = 0;
    v56 = (uint64_t *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
    {
LABEL_62:
      v59 = (unint64_t)(v58 - 8);
      if (v59 < 0x78
        || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v56
        && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
      {
        goto LABEL_197;
      }
      v60 = (v59 >> 3) + 1;
      v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
      v62 = &v41[-v61];
      v56 = (uint64_t *)((char *)v56 - v61);
      v63 = &v55[8 * v51 - 16];
      v64 = v41 - 16;
      v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v67 = *((_OWORD *)v64 - 1);
        v66 = *(_OWORD *)v64;
        *((_OWORD *)v64 - 1) = 0uLL;
        *(_OWORD *)v64 = 0uLL;
        *((_OWORD *)v63 - 1) = v67;
        *(_OWORD *)v63 = v66;
        v63 -= 32;
        v64 -= 32;
        v65 -= 4;
      }
      while (v65);
      v41 = v62;
      if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_197:
        do
        {
          v68 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *(_QWORD *)v41 = 0;
          *--v56 = v68;
        }
        while (v41 != v50);
      }
      v41 = (char *)a1[1];
      v69 = (char *)a1[2];
      a1[1] = v56;
      a1[2] = v42;
      a1[3] = v57;
      while (v69 != v41)
      {
        v71 = *((_QWORD *)v69 - 1);
        v69 -= 8;
        v70 = v71;
        *(_QWORD *)v69 = 0;
        if (v71)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
      }
      goto LABEL_75;
    }
  }
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
  v72 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v174, 2);
  v175[0] = xmmword_24C060AB0;
  v175[1] = *(_OWORD *)&off_24C060AC0;
  v175[2] = xmmword_24C060AD0;
  mlir::Pattern::Pattern(v72 + 8, (uint64_t)"arith.trunci", 12, v174, a2, v175, 3uLL);
  *(_QWORD *)v72 = &off_24C02A850;
  if (*(_QWORD *)(v72 + 72))
  {
    v73 = *(unsigned int *)(v72 + 88);
    if (v73 <= *(_DWORD *)(v72 + 92))
      goto LABEL_79;
LABEL_90:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v72 + 80, (void *)(v72 + 96), v73, 16);
    *(_DWORD *)(v72 + 88) = *(_DWORD *)(v72 + 88);
    v75 = (char *)a1[2];
    v74 = a1[3];
    if ((unint64_t)v75 < v74)
      goto LABEL_80;
    goto LABEL_91;
  }
  *(_QWORD *)&v175[0] = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::TruncIShrSIToTrunciShrUI]";
  *((_QWORD *)&v175[0] + 1) = 97;
  v77 = llvm::StringRef::find((uint64_t *)v175, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((_QWORD *)&v175[0] + 1) >= v77)
    v78 = v77;
  else
    v78 = *((_QWORD *)&v175[0] + 1);
  v79 = *(_QWORD *)&v175[0] + v78;
  v80 = *((_QWORD *)&v175[0] + 1) - v78;
  if (*((_QWORD *)&v175[0] + 1) - v78 >= 0x12)
    v81 = 18;
  else
    v81 = *((_QWORD *)&v175[0] + 1) - v78;
  v82 = v79 + v81;
  v83 = v80 - v81;
  if (v83 >= v83 - 1)
    --v83;
  *(_QWORD *)(v72 + 64) = v82;
  *(_QWORD *)(v72 + 72) = v83;
  v73 = *(unsigned int *)(v72 + 88);
  if (v73 > *(_DWORD *)(v72 + 92))
    goto LABEL_90;
LABEL_79:
  *(_DWORD *)(v72 + 88) = v73;
  v75 = (char *)a1[2];
  v74 = a1[3];
  if ((unint64_t)v75 < v74)
  {
LABEL_80:
    *(_QWORD *)v75 = v72;
    v76 = (uint64_t)(v75 + 8);
    goto LABEL_115;
  }
LABEL_91:
  v84 = (char *)a1[1];
  v85 = (v75 - v84) >> 3;
  v86 = v85 + 1;
  if ((unint64_t)(v85 + 1) >> 61)
    goto LABEL_192;
  v87 = v74 - (_QWORD)v84;
  if (v87 >> 2 > v86)
    v86 = v87 >> 2;
  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
    v88 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v88 = v86;
  if (v88)
  {
    if (v88 >> 61)
      goto LABEL_193;
    v89 = (char *)operator new(8 * v88);
    v90 = (uint64_t *)&v89[8 * v85];
    v91 = &v89[8 * v88];
    *v90 = v72;
    v76 = (uint64_t)(v90 + 1);
    v92 = (char *)(v75 - v84);
    if (v75 != v84)
      goto LABEL_100;
  }
  else
  {
    v89 = 0;
    v90 = (uint64_t *)(8 * v85);
    v91 = 0;
    *(_QWORD *)(8 * v85) = v72;
    v76 = 8 * v85 + 8;
    v92 = (char *)(v75 - v84);
    if (v75 != v84)
    {
LABEL_100:
      v93 = (unint64_t)(v92 - 8);
      if (v93 < 0x78
        || &v75[-(v93 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v90
        && &v89[v75 - v84 - (v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v75)
      {
        goto LABEL_198;
      }
      v94 = (v93 >> 3) + 1;
      v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      v96 = &v75[-v95];
      v90 = (uint64_t *)((char *)v90 - v95);
      v97 = &v89[8 * v85 - 16];
      v98 = v75 - 16;
      v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v101 = *((_OWORD *)v98 - 1);
        v100 = *(_OWORD *)v98;
        *((_OWORD *)v98 - 1) = 0uLL;
        *(_OWORD *)v98 = 0uLL;
        *((_OWORD *)v97 - 1) = v101;
        *(_OWORD *)v97 = v100;
        v97 -= 32;
        v98 -= 32;
        v99 -= 4;
      }
      while (v99);
      v75 = v96;
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_198:
        do
        {
          v102 = *((_QWORD *)v75 - 1);
          v75 -= 8;
          *(_QWORD *)v75 = 0;
          *--v90 = v102;
        }
        while (v75 != v84);
      }
      v75 = (char *)a1[1];
      v103 = (char *)a1[2];
      a1[1] = v90;
      a1[2] = v76;
      a1[3] = v91;
      while (v103 != v75)
      {
        v105 = *((_QWORD *)v103 - 1);
        v103 -= 8;
        v104 = v105;
        *(_QWORD *)v103 = 0;
        if (v105)
          (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
      }
      goto LABEL_113;
    }
  }
  a1[1] = v90;
  a1[2] = v76;
  a1[3] = v91;
LABEL_113:
  if (v75)
    operator delete(v75);
LABEL_115:
  a1[2] = v76;
  v106 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v174, 5);
  *(_QWORD *)&v175[0] = "arith.mulsi_extended";
  *((_QWORD *)&v175[0] + 1) = 20;
  mlir::Pattern::Pattern(v106 + 8, (uint64_t)"arith.trunci", 12, v174, a2, v175, 1uLL);
  *(_QWORD *)v106 = &off_24C02AEE0;
  if (*(_QWORD *)(v106 + 72))
  {
    v107 = *(unsigned int *)(v106 + 88);
    if (v107 <= *(_DWORD *)(v106 + 92))
      goto LABEL_117;
LABEL_128:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v106 + 80, (void *)(v106 + 96), v107, 16);
    *(_DWORD *)(v106 + 88) = *(_DWORD *)(v106 + 88);
    v109 = (char *)a1[2];
    v108 = a1[3];
    if ((unint64_t)v109 < v108)
      goto LABEL_118;
    goto LABEL_129;
  }
  *(_QWORD *)&v175[0] = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::TruncIShrUIMulIToMulSIExtended]";
  *((_QWORD *)&v175[0] + 1) = 103;
  v111 = llvm::StringRef::find((uint64_t *)v175, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((_QWORD *)&v175[0] + 1) >= v111)
    v112 = v111;
  else
    v112 = *((_QWORD *)&v175[0] + 1);
  v113 = *(_QWORD *)&v175[0] + v112;
  v114 = *((_QWORD *)&v175[0] + 1) - v112;
  if (*((_QWORD *)&v175[0] + 1) - v112 >= 0x12)
    v115 = 18;
  else
    v115 = *((_QWORD *)&v175[0] + 1) - v112;
  v116 = v113 + v115;
  v117 = v114 - v115;
  if (v117 >= v117 - 1)
    --v117;
  *(_QWORD *)(v106 + 64) = v116;
  *(_QWORD *)(v106 + 72) = v117;
  v107 = *(unsigned int *)(v106 + 88);
  if (v107 > *(_DWORD *)(v106 + 92))
    goto LABEL_128;
LABEL_117:
  *(_DWORD *)(v106 + 88) = v107;
  v109 = (char *)a1[2];
  v108 = a1[3];
  if ((unint64_t)v109 < v108)
  {
LABEL_118:
    *(_QWORD *)v109 = v106;
    v110 = (uint64_t)(v109 + 8);
    goto LABEL_153;
  }
LABEL_129:
  v118 = (char *)a1[1];
  v119 = (v109 - v118) >> 3;
  v120 = v119 + 1;
  if ((unint64_t)(v119 + 1) >> 61)
    goto LABEL_192;
  v121 = v108 - (_QWORD)v118;
  if (v121 >> 2 > v120)
    v120 = v121 >> 2;
  if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
    v122 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v122 = v120;
  if (v122)
  {
    if (v122 >> 61)
      goto LABEL_193;
    v123 = (char *)operator new(8 * v122);
    v124 = (uint64_t *)&v123[8 * v119];
    v125 = &v123[8 * v122];
    *v124 = v106;
    v110 = (uint64_t)(v124 + 1);
    v126 = (char *)(v109 - v118);
    if (v109 != v118)
      goto LABEL_138;
  }
  else
  {
    v123 = 0;
    v124 = (uint64_t *)(8 * v119);
    v125 = 0;
    *(_QWORD *)(8 * v119) = v106;
    v110 = 8 * v119 + 8;
    v126 = (char *)(v109 - v118);
    if (v109 != v118)
    {
LABEL_138:
      v127 = (unint64_t)(v126 - 8);
      if (v127 < 0x78
        || &v109[-(v127 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v124
        && &v123[v109 - v118 - (v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v109)
      {
        goto LABEL_199;
      }
      v128 = (v127 >> 3) + 1;
      v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
      v130 = &v109[-v129];
      v124 = (uint64_t *)((char *)v124 - v129);
      v131 = &v123[8 * v119 - 16];
      v132 = v109 - 16;
      v133 = v128 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v135 = *((_OWORD *)v132 - 1);
        v134 = *(_OWORD *)v132;
        *((_OWORD *)v132 - 1) = 0uLL;
        *(_OWORD *)v132 = 0uLL;
        *((_OWORD *)v131 - 1) = v135;
        *(_OWORD *)v131 = v134;
        v131 -= 32;
        v132 -= 32;
        v133 -= 4;
      }
      while (v133);
      v109 = v130;
      if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_199:
        do
        {
          v136 = *((_QWORD *)v109 - 1);
          v109 -= 8;
          *(_QWORD *)v109 = 0;
          *--v124 = v136;
        }
        while (v109 != v118);
      }
      v109 = (char *)a1[1];
      v137 = (char *)a1[2];
      a1[1] = v124;
      a1[2] = v110;
      a1[3] = v125;
      while (v137 != v109)
      {
        v139 = *((_QWORD *)v137 - 1);
        v137 -= 8;
        v138 = v139;
        *(_QWORD *)v137 = 0;
        if (v139)
          (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
      }
      goto LABEL_151;
    }
  }
  a1[1] = v124;
  a1[2] = v110;
  a1[3] = v125;
LABEL_151:
  if (v109)
    operator delete(v109);
LABEL_153:
  a1[2] = v110;
  v140 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v174, 5);
  *(_QWORD *)&v175[0] = "arith.mului_extended";
  *((_QWORD *)&v175[0] + 1) = 20;
  mlir::Pattern::Pattern(v140 + 8, (uint64_t)"arith.trunci", 12, v174, a2, v175, 1uLL);
  *(_QWORD *)v140 = &off_24C02AF20;
  if (*(_QWORD *)(v140 + 72))
  {
    v141 = *(unsigned int *)(v140 + 88);
    if (v141 <= *(_DWORD *)(v140 + 92))
      goto LABEL_155;
LABEL_166:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v140 + 80, (void *)(v140 + 96), v141, 16);
    *(_DWORD *)(v140 + 88) = *(_DWORD *)(v140 + 88);
    v143 = (char *)a1[2];
    v142 = a1[3];
    if ((unint64_t)v143 < v142)
      goto LABEL_156;
    goto LABEL_167;
  }
  *(_QWORD *)&v175[0] = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::TruncIShrUIMulIToMulUIExtended]";
  *((_QWORD *)&v175[0] + 1) = 103;
  v145 = llvm::StringRef::find((uint64_t *)v175, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((_QWORD *)&v175[0] + 1) >= v145)
    v146 = v145;
  else
    v146 = *((_QWORD *)&v175[0] + 1);
  v147 = *(_QWORD *)&v175[0] + v146;
  v148 = *((_QWORD *)&v175[0] + 1) - v146;
  if (*((_QWORD *)&v175[0] + 1) - v146 >= 0x12)
    v149 = 18;
  else
    v149 = *((_QWORD *)&v175[0] + 1) - v146;
  v150 = v147 + v149;
  v151 = v148 - v149;
  if (v151 >= v151 - 1)
    --v151;
  *(_QWORD *)(v140 + 64) = v150;
  *(_QWORD *)(v140 + 72) = v151;
  v141 = *(unsigned int *)(v140 + 88);
  if (v141 > *(_DWORD *)(v140 + 92))
    goto LABEL_166;
LABEL_155:
  *(_DWORD *)(v140 + 88) = v141;
  v143 = (char *)a1[2];
  v142 = a1[3];
  if ((unint64_t)v143 < v142)
  {
LABEL_156:
    *(_QWORD *)v143 = v140;
    v144 = (uint64_t)(v143 + 8);
    goto LABEL_191;
  }
LABEL_167:
  v152 = (char *)a1[1];
  v153 = (v143 - v152) >> 3;
  v154 = v153 + 1;
  if ((unint64_t)(v153 + 1) >> 61)
LABEL_192:
    abort();
  v155 = v142 - (_QWORD)v152;
  if (v155 >> 2 > v154)
    v154 = v155 >> 2;
  if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8)
    v156 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v156 = v154;
  if (!v156)
  {
    v157 = 0;
    v158 = (uint64_t *)(8 * v153);
    v159 = 0;
    *(_QWORD *)(8 * v153) = v140;
    v144 = 8 * v153 + 8;
    v160 = (char *)(v143 - v152);
    if (v143 != v152)
      goto LABEL_176;
    goto LABEL_188;
  }
  if (v156 >> 61)
LABEL_193:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v157 = (char *)operator new(8 * v156);
  v158 = (uint64_t *)&v157[8 * v153];
  v159 = &v157[8 * v156];
  *v158 = v140;
  v144 = (uint64_t)(v158 + 1);
  v160 = (char *)(v143 - v152);
  if (v143 != v152)
  {
LABEL_176:
    v161 = (unint64_t)(v160 - 8);
    if (v161 < 0x78
      || &v143[-(v161 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v158
      && &v157[v143 - v152 - (v161 & 0xFFFFFFFFFFFFFFF8) - 8] < v143)
    {
      goto LABEL_200;
    }
    v162 = (v161 >> 3) + 1;
    v163 = 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
    v164 = &v143[-v163];
    v158 = (uint64_t *)((char *)v158 - v163);
    v165 = &v157[8 * v153 - 16];
    v166 = v143 - 16;
    v167 = v162 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v169 = *((_OWORD *)v166 - 1);
      v168 = *(_OWORD *)v166;
      *((_OWORD *)v166 - 1) = 0uLL;
      *(_OWORD *)v166 = 0uLL;
      *((_OWORD *)v165 - 1) = v169;
      *(_OWORD *)v165 = v168;
      v165 -= 32;
      v166 -= 32;
      v167 -= 4;
    }
    while (v167);
    v143 = v164;
    if (v162 != (v162 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_200:
      do
      {
        v170 = *((_QWORD *)v143 - 1);
        v143 -= 8;
        *(_QWORD *)v143 = 0;
        *--v158 = v170;
      }
      while (v143 != v152);
    }
    v143 = (char *)a1[1];
    v171 = (char *)a1[2];
    a1[1] = v158;
    a1[2] = v144;
    a1[3] = v159;
    while (v171 != v143)
    {
      v173 = *((_QWORD *)v171 - 1);
      v171 -= 8;
      v172 = v173;
      *(_QWORD *)v171 = 0;
      if (v173)
        (*(void (**)(uint64_t))(*(_QWORD *)v172 + 8))(v172);
    }
    goto LABEL_189;
  }
LABEL_188:
  a1[1] = v158;
  a1[2] = v144;
  a1[3] = v159;
LABEL_189:
  if (v143)
    operator delete(v143);
LABEL_191:
  a1[2] = v144;
}

uint64_t mlir::arith::TruncIOp::verify(uint64_t **this)
{
  uint64_t ElementTypeOrSelf;
  uint64_t v2;
  unsigned int Width;
  uint64_t v4;
  int *v5;
  char *v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  int64_t v33;
  _QWORD v34[4];
  __int16 v35;
  uint64_t *v36;
  int v37;
  const char *v38;
  uint64_t v39;
  _QWORD v40[3];
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD *v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v36 = *this;
  ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v36[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  v2 = mlir::getElementTypeOrSelf((_QWORD *)(*(v36 - 1) & 0xFFFFFFFFFFFFFFF8));
  v40[0] = ElementTypeOrSelf;
  Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v40);
  v34[0] = v2;
  if (Width > mlir::IntegerType::getWidth((mlir::IntegerType *)v34))
    return 1;
  v34[0] = "result type ";
  v35 = 259;
  mlir::OpState::emitError(&v36, (uint64_t)v34, (uint64_t)v40);
  if (v40[0])
  {
    v5 = &v37;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, v2);
    v6 = (char *)v41;
    if (v42 >= v43)
    {
      v27 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        v31 = (char *)&v37 - (_BYTE *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        v6 = (char *)v41;
        v5 = (int *)((char *)v41 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        v5 = &v37;
        v6 = (char *)v41;
      }
    }
    v7 = &v6[24 * v42];
    v8 = *(_OWORD *)v5;
    *((_QWORD *)v7 + 2) = *((_QWORD *)v5 + 2);
    *(_OWORD *)v7 = v8;
    v9 = ++v42;
    if (v40[0])
    {
      v37 = 3;
      v38 = " must be shorter than operand type ";
      v39 = 35;
      v10 = &v37;
      v11 = (char *)v41;
      if (v9 >= v43)
      {
        v28 = v9 + 1;
        v29 = (char *)v41 + 24 * v9 > (char *)&v37;
        if (v41 <= &v37 && v29)
        {
          v32 = (char *)&v37 - (_BYTE *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          v11 = (char *)v41;
          v10 = (int *)((char *)v41 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          v10 = &v37;
          v11 = (char *)v41;
        }
      }
      v12 = &v11[24 * v42];
      v13 = *(_OWORD *)v10;
      *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v12 = v13;
      ++v42;
      if (v40[0])
      {
        v14 = &v37;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, ElementTypeOrSelf);
        v15 = (char *)v41;
        if (v42 >= v43)
        {
          v30 = v42 + 1;
          if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
          {
            v33 = (char *)&v37 - (_BYTE *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            v15 = (char *)v41;
            v14 = (int *)((char *)v41 + v33);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            v14 = &v37;
            v15 = (char *)v41;
          }
        }
        v16 = &v15[24 * v42];
        v17 = *(_OWORD *)v14;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v16 = v17;
        ++v42;
      }
    }
  }
  v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  if (v49)
  {
    v18 = __p;
    if (__p)
    {
      v19 = v48;
      v20 = __p;
      if (v48 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v48 = v18;
      operator delete(v20);
    }
    v21 = v45;
    if (v45)
    {
      v22 = v46;
      v23 = v45;
      if (v46 != v45)
      {
        do
        {
          v25 = *--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
        }
        while (v22 != v21);
        v23 = v45;
      }
      v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44)
      free(v41);
  }
  return v4;
}

unint64_t mlir::arith::TruncFOp::fold(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  double v5;
  void *v6;
  llvm::APFloatBase *v7;
  void *v8;
  double v9;
  llvm::APFloatBase *v10;
  _BYTE v11[8];
  _QWORD v12[4];

  v12[3] = *MEMORY[0x24BDAC8D0];
  v2 = **(_QWORD **)(a2 + 40);
  if (!v2 || *(_UNKNOWN **)(*(_QWORD *)v2 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
    return 0;
  v10 = **(llvm::APFloatBase ***)(a2 + 40);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v10, (uint64_t)v11);
  v5 = llvm::APFloat::convertToDouble((llvm::APFloat *)v11);
  v6 = (void *)v12[0];
  v8 = llvm::APFloatBase::PPCDoubleDouble(v7);
  if (v8 == v6)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v12);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v12);
  v10 = mlir::FloatAttr::get(*(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8, v5);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v10, (uint64_t)v11);
  v9 = llvm::APFloat::convertToDouble((llvm::APFloat *)v11);
  if (v8 == (void *)v12[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v12);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v12);
  if (v5 == v9)
    return (unint64_t)v10 & 0xFFFFFFFFFFFFFFFBLL;
  else
    return 0;
}

BOOL mlir::arith::TruncFOp::areCastCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;
  _QWORD *v7;
  void *v8;
  BOOL v9;
  BOOL v10;
  uint64_t ElementTypeOrSelf;
  void *v12;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  unsigned int IntOrFloatBitWidth;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    v7 = (_QWORD *)mlir::TypeRange::dereference_iterator(a1, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8)
      || ((v8 = *(void **)(*v7 + 136), v8 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (v9 = v8 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (v9 = 1),
          !v9 ? (v10 = v8 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (v10 = 1),
          v10))
    {
      ElementTypeOrSelf = mlir::getElementTypeOrSelf(v7);
      v12 = *(void **)(*(_QWORD *)ElementTypeOrSelf + 136);
      if (v12 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        v29 = ElementTypeOrSelf;
      }
      else
      {
        v29 = 0;
      }
    }
    else
    {
      v29 = 0;
    }
    v31 = v29;
    v24 = (_QWORD *)mlir::TypeRange::dereference_iterator(a3, 0);
    if ((!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v24 + 8)
       || (v25 = *(void **)(*v24 + 136), v25 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
       || v25 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
       || v25 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      && ((v26 = mlir::getElementTypeOrSelf(v24),
           v27 = *(void **)(*(_QWORD *)v26 + 136),
           v27 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      && (v30 = v26, v29))
    {
      IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v30);
      return IntOrFloatBitWidth < mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v31);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::arith::TruncFOp::verify(uint64_t **this)
{
  uint64_t ElementTypeOrSelf;
  uint64_t v2;
  unsigned int Width;
  uint64_t v4;
  int *v5;
  char *v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  int64_t v33;
  _QWORD v34[4];
  __int16 v35;
  uint64_t *v36;
  int v37;
  const char *v38;
  uint64_t v39;
  _QWORD v40[3];
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD *v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v36 = *this;
  ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v36[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  v2 = mlir::getElementTypeOrSelf((_QWORD *)(*(v36 - 1) & 0xFFFFFFFFFFFFFFF8));
  v40[0] = ElementTypeOrSelf;
  Width = mlir::FloatType::getWidth((mlir::FloatType *)v40);
  v34[0] = v2;
  if (Width > mlir::FloatType::getWidth((mlir::FloatType *)v34))
    return 1;
  v34[0] = "result type ";
  v35 = 259;
  mlir::OpState::emitError(&v36, (uint64_t)v34, (uint64_t)v40);
  if (v40[0])
  {
    v5 = &v37;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, v2);
    v6 = (char *)v41;
    if (v42 >= v43)
    {
      v27 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        v31 = (char *)&v37 - (_BYTE *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        v6 = (char *)v41;
        v5 = (int *)((char *)v41 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        v5 = &v37;
        v6 = (char *)v41;
      }
    }
    v7 = &v6[24 * v42];
    v8 = *(_OWORD *)v5;
    *((_QWORD *)v7 + 2) = *((_QWORD *)v5 + 2);
    *(_OWORD *)v7 = v8;
    v9 = ++v42;
    if (v40[0])
    {
      v37 = 3;
      v38 = " must be shorter than operand type ";
      v39 = 35;
      v10 = &v37;
      v11 = (char *)v41;
      if (v9 >= v43)
      {
        v28 = v9 + 1;
        v29 = (char *)v41 + 24 * v9 > (char *)&v37;
        if (v41 <= &v37 && v29)
        {
          v32 = (char *)&v37 - (_BYTE *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          v11 = (char *)v41;
          v10 = (int *)((char *)v41 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          v10 = &v37;
          v11 = (char *)v41;
        }
      }
      v12 = &v11[24 * v42];
      v13 = *(_OWORD *)v10;
      *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v12 = v13;
      ++v42;
      if (v40[0])
      {
        v14 = &v37;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, ElementTypeOrSelf);
        v15 = (char *)v41;
        if (v42 >= v43)
        {
          v30 = v42 + 1;
          if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
          {
            v33 = (char *)&v37 - (_BYTE *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            v15 = (char *)v41;
            v14 = (int *)((char *)v41 + v33);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            v14 = &v37;
            v15 = (char *)v41;
          }
        }
        v16 = &v15[24 * v42];
        v17 = *(_OWORD *)v14;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v16 = v17;
        ++v42;
      }
    }
  }
  v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  if (v49)
  {
    v18 = __p;
    if (__p)
    {
      v19 = v48;
      v20 = __p;
      if (v48 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v48 = v18;
      operator delete(v20);
    }
    v21 = v45;
    if (v45)
    {
      v22 = v46;
      v23 = v45;
      if (v46 != v45)
      {
        do
        {
          v25 = *--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
        }
        while (v22 != v21);
        v23 = v45;
      }
      v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44)
      free(v41);
  }
  return v4;
}

void mlir::arith::AndIOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v72, 3);
  v73 = xmmword_24C060AE0;
  v74 = *(_OWORD *)&off_24C060AF0;
  mlir::Pattern::Pattern(v4 + 8, (uint64_t)"arith.andi", 10, v72, a2, &v73, 2uLL);
  *(_QWORD *)v4 = &off_24C0284A0;
  if (*(_QWORD *)(v4 + 72))
  {
    v5 = *(unsigned int *)(v4 + 88);
    if (v5 <= *(_DWORD *)(v4 + 92))
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 80, (void *)(v4 + 96), v5, 16);
    *(_DWORD *)(v4 + 88) = *(_DWORD *)(v4 + 88);
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  *(_QWORD *)&v73 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::AndOfExtUI]";
  *((_QWORD *)&v73 + 1) = 83;
  v9 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((_QWORD *)&v73 + 1) >= v9)
    v10 = v9;
  else
    v10 = *((_QWORD *)&v73 + 1);
  v11 = v73 + v10;
  v12 = *((_QWORD *)&v73 + 1) - v10;
  if (*((_QWORD *)&v73 + 1) - v10 >= 0x12)
    v13 = 18;
  else
    v13 = *((_QWORD *)&v73 + 1) - v10;
  v14 = v11 + v13;
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *(_QWORD *)(v4 + 64) = v14;
  *(_QWORD *)(v4 + 72) = v15;
  v5 = *(unsigned int *)(v4 + 88);
  if (v5 > *(_DWORD *)(v4 + 92))
    goto LABEL_14;
LABEL_3:
  *(_DWORD *)(v4 + 88) = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_78;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_79;
    v21 = (char *)operator new(8 * v20);
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v4;
    v8 = (uint64_t)(v22 + 1);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (uint64_t *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v22
        && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 = (uint64_t *)((char *)v22 - v27);
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *--v22 = v34;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v72, 3);
  v73 = xmmword_24C060B00;
  v74 = *(_OWORD *)&off_24C060B10;
  mlir::Pattern::Pattern(v38 + 8, (uint64_t)"arith.andi", 10, v72, a2, &v73, 2uLL);
  *(_QWORD *)v38 = &off_24C028460;
  if (*(_QWORD *)(v38 + 72))
  {
    v39 = *(unsigned int *)(v38 + 88);
    if (v39 <= *(_DWORD *)(v38 + 92))
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v38 + 80, (void *)(v38 + 96), v39, 16);
    *(_DWORD *)(v38 + 88) = *(_DWORD *)(v38 + 88);
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  *(_QWORD *)&v73 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::AndOfExtSI]";
  *((_QWORD *)&v73 + 1) = 83;
  v43 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((_QWORD *)&v73 + 1) >= v43)
    v44 = v43;
  else
    v44 = *((_QWORD *)&v73 + 1);
  v45 = v73 + v44;
  v46 = *((_QWORD *)&v73 + 1) - v44;
  if (*((_QWORD *)&v73 + 1) - v44 >= 0x12)
    v47 = 18;
  else
    v47 = *((_QWORD *)&v73 + 1) - v44;
  v48 = v45 + v47;
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *(_QWORD *)(v38 + 64) = v48;
  *(_QWORD *)(v38 + 72) = v49;
  v39 = *(unsigned int *)(v38 + 88);
  if (v39 > *(_DWORD *)(v38 + 92))
    goto LABEL_52;
LABEL_41:
  *(_DWORD *)(v38 + 88) = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
LABEL_78:
    abort();
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (!v54)
  {
    v55 = 0;
    v56 = (uint64_t *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
    goto LABEL_74;
  }
  if (v54 >> 61)
LABEL_79:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v55 = (char *)operator new(8 * v54);
  v56 = (uint64_t *)&v55[8 * v51];
  v57 = &v55[8 * v54];
  *v56 = v38;
  v42 = (uint64_t)(v56 + 1);
  v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v56
      && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    v60 = (v59 >> 3) + 1;
    v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    v62 = &v41[-v61];
    v56 = (uint64_t *)((char *)v56 - v61);
    v63 = &v55[8 * v51 - 16];
    v64 = v41 - 16;
    v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v67 = *((_OWORD *)v64 - 1);
      v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        v68 = *((_QWORD *)v41 - 1);
        v41 -= 8;
        *(_QWORD *)v41 = 0;
        *--v56 = v68;
      }
      while (v41 != v50);
    }
    v41 = (char *)a1[1];
    v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      v71 = *((_QWORD *)v69 - 1);
      v69 -= 8;
      v70 = v71;
      *(_QWORD *)v69 = 0;
      if (v71)
        (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
}

void mlir::arith::OrIOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v72, 3);
  v73 = xmmword_24C060B20;
  v74 = *(_OWORD *)&off_24C060B30;
  mlir::Pattern::Pattern(v4 + 8, (uint64_t)"arith.ori", 9, v72, a2, &v73, 2uLL);
  *(_QWORD *)v4 = &off_24C02B348;
  if (*(_QWORD *)(v4 + 72))
  {
    v5 = *(unsigned int *)(v4 + 88);
    if (v5 <= *(_DWORD *)(v4 + 92))
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 80, (void *)(v4 + 96), v5, 16);
    *(_DWORD *)(v4 + 88) = *(_DWORD *)(v4 + 88);
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  *(_QWORD *)&v73 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::OrOfExtUI]";
  *((_QWORD *)&v73 + 1) = 82;
  v9 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((_QWORD *)&v73 + 1) >= v9)
    v10 = v9;
  else
    v10 = *((_QWORD *)&v73 + 1);
  v11 = v73 + v10;
  v12 = *((_QWORD *)&v73 + 1) - v10;
  if (*((_QWORD *)&v73 + 1) - v10 >= 0x12)
    v13 = 18;
  else
    v13 = *((_QWORD *)&v73 + 1) - v10;
  v14 = v11 + v13;
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *(_QWORD *)(v4 + 64) = v14;
  *(_QWORD *)(v4 + 72) = v15;
  v5 = *(unsigned int *)(v4 + 88);
  if (v5 > *(_DWORD *)(v4 + 92))
    goto LABEL_14;
LABEL_3:
  *(_DWORD *)(v4 + 88) = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_78;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_79;
    v21 = (char *)operator new(8 * v20);
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v4;
    v8 = (uint64_t)(v22 + 1);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (uint64_t *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v22
        && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 = (uint64_t *)((char *)v22 - v27);
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *--v22 = v34;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v72, 3);
  v73 = xmmword_24C060B40;
  v74 = *(_OWORD *)&off_24C060B50;
  mlir::Pattern::Pattern(v38 + 8, (uint64_t)"arith.ori", 9, v72, a2, &v73, 2uLL);
  *(_QWORD *)v38 = &off_24C02B308;
  if (*(_QWORD *)(v38 + 72))
  {
    v39 = *(unsigned int *)(v38 + 88);
    if (v39 <= *(_DWORD *)(v38 + 92))
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v38 + 80, (void *)(v38 + 96), v39, 16);
    *(_DWORD *)(v38 + 88) = *(_DWORD *)(v38 + 88);
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  *(_QWORD *)&v73 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::OrOfExtSI]";
  *((_QWORD *)&v73 + 1) = 82;
  v43 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((_QWORD *)&v73 + 1) >= v43)
    v44 = v43;
  else
    v44 = *((_QWORD *)&v73 + 1);
  v45 = v73 + v44;
  v46 = *((_QWORD *)&v73 + 1) - v44;
  if (*((_QWORD *)&v73 + 1) - v44 >= 0x12)
    v47 = 18;
  else
    v47 = *((_QWORD *)&v73 + 1) - v44;
  v48 = v45 + v47;
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *(_QWORD *)(v38 + 64) = v48;
  *(_QWORD *)(v38 + 72) = v49;
  v39 = *(unsigned int *)(v38 + 88);
  if (v39 > *(_DWORD *)(v38 + 92))
    goto LABEL_52;
LABEL_41:
  *(_DWORD *)(v38 + 88) = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
LABEL_78:
    abort();
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (!v54)
  {
    v55 = 0;
    v56 = (uint64_t *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
    goto LABEL_74;
  }
  if (v54 >> 61)
LABEL_79:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v55 = (char *)operator new(8 * v54);
  v56 = (uint64_t *)&v55[8 * v51];
  v57 = &v55[8 * v54];
  *v56 = v38;
  v42 = (uint64_t)(v56 + 1);
  v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v56
      && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    v60 = (v59 >> 3) + 1;
    v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    v62 = &v41[-v61];
    v56 = (uint64_t *)((char *)v56 - v61);
    v63 = &v55[8 * v51 - 16];
    v64 = v41 - 16;
    v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v67 = *((_OWORD *)v64 - 1);
      v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        v68 = *((_QWORD *)v41 - 1);
        v41 -= 8;
        *(_QWORD *)v41 = 0;
        *--v56 = v68;
      }
      while (v41 != v50);
    }
    v41 = (char *)a1[1];
    v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      v71 = *((_QWORD *)v69 - 1);
      v69 -= 8;
      v70 = v71;
      *(_QWORD *)v69 = 0;
      if (v71)
        (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
}

BOOL checkIntFloatCast<mlir::IntegerType,mlir::FloatType>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;
  _QWORD *v8;
  void *v9;
  BOOL v10;
  BOOL v11;
  uint64_t ElementTypeOrSelf;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  BOOL v16;
  uint64_t v18;
  void *v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;

  result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    v8 = (_QWORD *)mlir::TypeRange::dereference_iterator(a1, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8)
      || ((v9 = *(void **)(*v8 + 136), v9 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (v10 = v9 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (v10 = 1),
          !v10 ? (v11 = v9 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (v11 = 1),
          v11))
    {
      ElementTypeOrSelf = mlir::getElementTypeOrSelf(v8);
      if (*(_UNKNOWN **)(*(_QWORD *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
        v13 = ElementTypeOrSelf;
      else
        v13 = 0;
    }
    else
    {
      v13 = 0;
    }
    v14 = (_QWORD *)mlir::TypeRange::dereference_iterator(a3, a4 - 1);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v14 + 8))
    {
      v15 = *(void **)(*v14 + 136);
      v16 = v15 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
         || v15 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
      if (!v16 && v15 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        goto LABEL_61;
    }
    v18 = mlir::getElementTypeOrSelf(v14);
    v19 = *(void **)(*(_QWORD *)v18 + 136);
    v20 = v19 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
       || v19 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
    v21 = v20 || v19 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
    v22 = v21 || v19 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
    v23 = v22 || v19 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
    v24 = v23 || v19 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
    v25 = v24 || v19 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
    v26 = v25 || v19 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
    v27 = v26 || v19 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
    v28 = v27 || v19 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
    v29 = v28 || v19 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
    if (v29 || v19 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      if (!v13)
        return 0;
    }
    else
    {
LABEL_61:
      v18 = 0;
      if (!v13)
        return 0;
    }
    return v18 != 0;
  }
  return result;
}

unint64_t mlir::arith::UIToFPOp::fold(_QWORD *a1, uint64_t a2)
{
  uint64_t ElementTypeOrSelf;
  uint64_t *v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  llvm::APFloatBase *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  llvm::detail::IEEEFloat *v14;
  void *v15;
  void *v16;
  unint64_t NumElements;
  llvm::APFloatBase *v19;
  llvm::APFloatBase *v20;
  void **v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  void **v26;
  char *v27;
  uint64_t v28;
  llvm::detail::DoubleAPFloat *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *Address;
  llvm::detail::IEEEFloat *v37;
  const llvm::detail::DoubleAPFloat *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  llvm::APFloatBase *v42;
  char *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  llvm::detail::DoubleAPFloat *v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  _QWORD v61[3];
  void *v62[2];
  _OWORD v63[4];
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8));
  v5 = *(uint64_t **)(a2 + 40);
  v6 = *v5;
  if (!*v5)
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  v7 = *(void **)(*(_QWORD *)v6 + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  v8 = ElementTypeOrSelf;
  v9 = (llvm::APFloatBase *)(*(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v60 = *v5;
    mlir::IntegerAttr::getValue(&v60, (llvm::APInt *)&v58);
    mlir::arith::UIToFPOp::fold(mlir::arith::UIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()((uint64_t)v62, v8, (uint64_t)&v58);
    if (DWORD2(v58) >= 0x41 && (_QWORD)v58)
      MEMORY[0x20BD002D4](v58, 0x1000C8000313F17);
    v6 = mlir::FloatAttr::get((uint64_t)v9, (uint64_t)v62);
    v14 = (llvm::detail::IEEEFloat *)&v62[1];
    v15 = v62[1];
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v6) == v15)
      goto LABEL_29;
LABEL_21:
    llvm::detail::IEEEFloat::~IEEEFloat(v14);
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (mlir::DenseElementsAttr::classof(*v5))
    v10 = (void *)v6;
  else
    v10 = 0;
  v62[0] = v10;
  if (v10 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v62))
  {
    v53 = *v5;
    mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v53, (uint64_t)v62);
    v58 = *(_OWORD *)v62;
    v59 = v63[0];
    mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v58, (llvm::APInt *)v62);
    mlir::arith::UIToFPOp::fold(mlir::arith::UIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()((uint64_t)&v60, v8, (uint64_t)v62);
    if (LODWORD(v62[1]) >= 0x41 && v62[0])
      MEMORY[0x20BD002D4](v62[0], 0x1000C8000313F17);
    if (v9)
      v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v9 + 8);
    else
      v11 = 0;
    v6 = mlir::DenseElementsAttr::get(v9, v11, (uint64_t)&v60, 1);
    v14 = (llvm::detail::IEEEFloat *)v61;
    v16 = (void *)v61[0];
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v6) == v16)
    {
LABEL_29:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat(v14);
      return v6 & 0xFFFFFFFFFFFFFFFBLL;
    }
    goto LABEL_21;
  }
  v12 = (_QWORD *)*v5;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v12 + 8))
  {
    v56 = 0;
    v57 = 0;
LABEL_26:
    v6 = 0;
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v12 + 8);
  v56 = v12;
  v57 = v13;
  if (!v12)
    goto LABEL_26;
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v56, (uint64_t)&v58);
  if (!BYTE8(v59))
    goto LABEL_26;
  LOWORD(v53) = v58;
  if ((_BYTE)v58)
    v54 = *((_QWORD *)&v58 + 1);
  else
    (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)&v58 + 1) + 16))(&v54);
  v55 = v59;
  v62[0] = v63;
  v62[1] = (void *)0x100000000;
  NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v56, v57);
  if (NumElements > HIDWORD(v62[1]))
  {
    v60 = 0;
    v19 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v62, v63, NumElements, 32, (unint64_t *)&v60);
    v20 = v19;
    v21 = (void **)v62[0];
    v22 = LODWORD(v62[1]);
    if (LODWORD(v62[1]))
    {
      v23 = llvm::APFloatBase::PPCDoubleDouble(v19);
      v24 = (_QWORD *)((char *)v20 + 8);
      v25 = 32 * v22;
      v26 = v21 + 1;
      do
      {
        while (v23 == *v26)
        {
          v24 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v24, v26) + 4;
          v26 += 4;
          v25 -= 32;
          if (!v25)
            goto LABEL_38;
        }
        v24 = (_QWORD *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v24, (uint64_t)v26) + 32);
        v26 += 4;
        v25 -= 32;
      }
      while (v25);
LABEL_38:
      v21 = (void **)v62[0];
      if (LODWORD(v62[1]))
      {
        v27 = (char *)v62[0] - 24;
        v28 = 32 * LODWORD(v62[1]);
        do
        {
          while (1)
          {
            v29 = (llvm::detail::DoubleAPFloat *)&v27[v28];
            if (v23 != *(void **)&v27[v28])
              break;
            llvm::detail::DoubleAPFloat::~DoubleAPFloat(v29);
            v28 -= 32;
            if (!v28)
              goto LABEL_43;
          }
          llvm::detail::IEEEFloat::~IEEEFloat(v29);
          v28 -= 32;
        }
        while (v28);
LABEL_43:
        v21 = (void **)v62[0];
      }
    }
    v30 = v60;
    if (v21 != (void **)v63)
      free(v21);
    v62[0] = v20;
    HIDWORD(v62[1]) = v30;
  }
  v31 = mlir::ElementsAttr::getNumElements((uint64_t)v56, v57);
  if (v31)
  {
    v32 = v31;
    v33 = v55;
    do
    {
      while (1)
      {
        if (BYTE1(v53))
          v34 = 0;
        else
          v34 = v33;
        if ((_BYTE)v53)
        {
          v35 = v54 + 16 * v34;
          v52 = *(_DWORD *)(v35 + 8);
          if (v52 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v51, (const void **)v35);
          else
            v51 = *(const void **)v35;
        }
        else
        {
          (*(void (**)(const void **__return_ptr))(*(_QWORD *)v54 + 24))(&v51);
        }
        mlir::arith::UIToFPOp::fold(mlir::arith::UIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()((uint64_t)&v60, v8, (uint64_t)&v51);
        if (v52 >= 0x41 && v51)
          MEMORY[0x20BD002D4](v51, 0x1000C8000313F17);
        Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)v62, (unint64_t)&v60, 1);
        v37 = (llvm::detail::IEEEFloat *)((char *)v62[0] + 32 * LODWORD(v62[1]) + 8);
        v38 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
        v39 = (void *)*((_QWORD *)Address + 1);
        v40 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)Address);
        if (v40 == v39)
          llvm::detail::DoubleAPFloat::DoubleAPFloat(v37, v38);
        else
          llvm::detail::IEEEFloat::IEEEFloat(v37, v38);
        ++LODWORD(v62[1]);
        if (v40 != (void *)v61[0])
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v61);
        v33 = ++v55;
        if (!--v32)
          goto LABEL_66;
      }
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v61);
      v33 = ++v55;
      --v32;
    }
    while (v32);
  }
LABEL_66:
  if (v9)
    v41 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v9 + 8);
  else
    v41 = 0;
  v42 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get(v9, v41, (uint64_t)v62[0], LODWORD(v62[1]));
  v6 = (unint64_t)v42;
  v43 = (char *)v62[0];
  v44 = LODWORD(v62[1]);
  if (LODWORD(v62[1]))
  {
    v45 = llvm::APFloatBase::PPCDoubleDouble(v42);
    v46 = v43 - 24;
    v47 = 32 * v44;
    do
    {
      while (1)
      {
        v48 = (llvm::detail::DoubleAPFloat *)&v46[v47];
        if (v45 != *(void **)&v46[v47])
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v48);
        v47 -= 32;
        if (!v47)
          goto LABEL_74;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v48);
      v47 -= 32;
    }
    while (v47);
LABEL_74:
    v43 = (char *)v62[0];
  }
  if (v43 != (char *)v63)
    free(v43);
  if (!(_BYTE)v53)
  {
    v49 = v54;
    v54 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  }
  if (BYTE8(v59))
  {
    if (!(_BYTE)v58)
    {
      v50 = *((_QWORD *)&v58 + 1);
      *((_QWORD *)&v58 + 1) = 0;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    }
  }
  return v6 & 0xFFFFFFFFFFFFFFFBLL;
}

unint64_t mlir::arith::SIToFPOp::fold(_QWORD *a1, uint64_t a2)
{
  uint64_t ElementTypeOrSelf;
  uint64_t *v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  llvm::APFloatBase *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  llvm::detail::IEEEFloat *v14;
  void *v15;
  void *v16;
  unint64_t NumElements;
  llvm::APFloatBase *v19;
  llvm::APFloatBase *v20;
  void **v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  void **v26;
  char *v27;
  uint64_t v28;
  llvm::detail::DoubleAPFloat *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *Address;
  llvm::detail::IEEEFloat *v37;
  const llvm::detail::DoubleAPFloat *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  llvm::APFloatBase *v42;
  char *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  llvm::detail::DoubleAPFloat *v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  _QWORD v61[3];
  void *v62[2];
  _OWORD v63[4];
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8));
  v5 = *(uint64_t **)(a2 + 40);
  v6 = *v5;
  if (!*v5)
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  v7 = *(void **)(*(_QWORD *)v6 + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  v8 = ElementTypeOrSelf;
  v9 = (llvm::APFloatBase *)(*(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v60 = *v5;
    mlir::IntegerAttr::getValue(&v60, (llvm::APInt *)&v58);
    mlir::arith::SIToFPOp::fold(mlir::arith::SIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()((uint64_t)v62, v8, (uint64_t)&v58);
    if (DWORD2(v58) >= 0x41 && (_QWORD)v58)
      MEMORY[0x20BD002D4](v58, 0x1000C8000313F17);
    v6 = mlir::FloatAttr::get((uint64_t)v9, (uint64_t)v62);
    v14 = (llvm::detail::IEEEFloat *)&v62[1];
    v15 = v62[1];
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v6) == v15)
      goto LABEL_29;
LABEL_21:
    llvm::detail::IEEEFloat::~IEEEFloat(v14);
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (mlir::DenseElementsAttr::classof(*v5))
    v10 = (void *)v6;
  else
    v10 = 0;
  v62[0] = v10;
  if (v10 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v62))
  {
    v53 = *v5;
    mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v53, (uint64_t)v62);
    v58 = *(_OWORD *)v62;
    v59 = v63[0];
    mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v58, (llvm::APInt *)v62);
    mlir::arith::SIToFPOp::fold(mlir::arith::SIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()((uint64_t)&v60, v8, (uint64_t)v62);
    if (LODWORD(v62[1]) >= 0x41 && v62[0])
      MEMORY[0x20BD002D4](v62[0], 0x1000C8000313F17);
    if (v9)
      v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v9 + 8);
    else
      v11 = 0;
    v6 = mlir::DenseElementsAttr::get(v9, v11, (uint64_t)&v60, 1);
    v14 = (llvm::detail::IEEEFloat *)v61;
    v16 = (void *)v61[0];
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v6) == v16)
    {
LABEL_29:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat(v14);
      return v6 & 0xFFFFFFFFFFFFFFFBLL;
    }
    goto LABEL_21;
  }
  v12 = (_QWORD *)*v5;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v12 + 8))
  {
    v56 = 0;
    v57 = 0;
LABEL_26:
    v6 = 0;
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v12 + 8);
  v56 = v12;
  v57 = v13;
  if (!v12)
    goto LABEL_26;
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v56, (uint64_t)&v58);
  if (!BYTE8(v59))
    goto LABEL_26;
  LOWORD(v53) = v58;
  if ((_BYTE)v58)
    v54 = *((_QWORD *)&v58 + 1);
  else
    (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)&v58 + 1) + 16))(&v54);
  v55 = v59;
  v62[0] = v63;
  v62[1] = (void *)0x100000000;
  NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v56, v57);
  if (NumElements > HIDWORD(v62[1]))
  {
    v60 = 0;
    v19 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v62, v63, NumElements, 32, (unint64_t *)&v60);
    v20 = v19;
    v21 = (void **)v62[0];
    v22 = LODWORD(v62[1]);
    if (LODWORD(v62[1]))
    {
      v23 = llvm::APFloatBase::PPCDoubleDouble(v19);
      v24 = (_QWORD *)((char *)v20 + 8);
      v25 = 32 * v22;
      v26 = v21 + 1;
      do
      {
        while (v23 == *v26)
        {
          v24 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v24, v26) + 4;
          v26 += 4;
          v25 -= 32;
          if (!v25)
            goto LABEL_38;
        }
        v24 = (_QWORD *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v24, (uint64_t)v26) + 32);
        v26 += 4;
        v25 -= 32;
      }
      while (v25);
LABEL_38:
      v21 = (void **)v62[0];
      if (LODWORD(v62[1]))
      {
        v27 = (char *)v62[0] - 24;
        v28 = 32 * LODWORD(v62[1]);
        do
        {
          while (1)
          {
            v29 = (llvm::detail::DoubleAPFloat *)&v27[v28];
            if (v23 != *(void **)&v27[v28])
              break;
            llvm::detail::DoubleAPFloat::~DoubleAPFloat(v29);
            v28 -= 32;
            if (!v28)
              goto LABEL_43;
          }
          llvm::detail::IEEEFloat::~IEEEFloat(v29);
          v28 -= 32;
        }
        while (v28);
LABEL_43:
        v21 = (void **)v62[0];
      }
    }
    v30 = v60;
    if (v21 != (void **)v63)
      free(v21);
    v62[0] = v20;
    HIDWORD(v62[1]) = v30;
  }
  v31 = mlir::ElementsAttr::getNumElements((uint64_t)v56, v57);
  if (v31)
  {
    v32 = v31;
    v33 = v55;
    do
    {
      while (1)
      {
        if (BYTE1(v53))
          v34 = 0;
        else
          v34 = v33;
        if ((_BYTE)v53)
        {
          v35 = v54 + 16 * v34;
          v52 = *(_DWORD *)(v35 + 8);
          if (v52 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v51, (const void **)v35);
          else
            v51 = *(const void **)v35;
        }
        else
        {
          (*(void (**)(const void **__return_ptr))(*(_QWORD *)v54 + 24))(&v51);
        }
        mlir::arith::SIToFPOp::fold(mlir::arith::SIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()((uint64_t)&v60, v8, (uint64_t)&v51);
        if (v52 >= 0x41 && v51)
          MEMORY[0x20BD002D4](v51, 0x1000C8000313F17);
        Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)v62, (unint64_t)&v60, 1);
        v37 = (llvm::detail::IEEEFloat *)((char *)v62[0] + 32 * LODWORD(v62[1]) + 8);
        v38 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
        v39 = (void *)*((_QWORD *)Address + 1);
        v40 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)Address);
        if (v40 == v39)
          llvm::detail::DoubleAPFloat::DoubleAPFloat(v37, v38);
        else
          llvm::detail::IEEEFloat::IEEEFloat(v37, v38);
        ++LODWORD(v62[1]);
        if (v40 != (void *)v61[0])
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v61);
        v33 = ++v55;
        if (!--v32)
          goto LABEL_66;
      }
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v61);
      v33 = ++v55;
      --v32;
    }
    while (v32);
  }
LABEL_66:
  if (v9)
    v41 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v9 + 8);
  else
    v41 = 0;
  v42 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get(v9, v41, (uint64_t)v62[0], LODWORD(v62[1]));
  v6 = (unint64_t)v42;
  v43 = (char *)v62[0];
  v44 = LODWORD(v62[1]);
  if (LODWORD(v62[1]))
  {
    v45 = llvm::APFloatBase::PPCDoubleDouble(v42);
    v46 = v43 - 24;
    v47 = 32 * v44;
    do
    {
      while (1)
      {
        v48 = (llvm::detail::DoubleAPFloat *)&v46[v47];
        if (v45 != *(void **)&v46[v47])
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v48);
        v47 -= 32;
        if (!v47)
          goto LABEL_74;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v48);
      v47 -= 32;
    }
    while (v47);
LABEL_74:
    v43 = (char *)v62[0];
  }
  if (v43 != (char *)v63)
    free(v43);
  if (!(_BYTE)v53)
  {
    v49 = v54;
    v54 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  }
  if (BYTE8(v59))
  {
    if (!(_BYTE)v58)
    {
      v50 = *((_QWORD *)&v58 + 1);
      *((_QWORD *)&v58 + 1) = 0;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    }
  }
  return v6 & 0xFFFFFFFFFFFFFFFBLL;
}

BOOL checkIntFloatCast<mlir::FloatType,mlir::IntegerType>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;
  _QWORD *v8;
  void *v9;
  BOOL v10;
  BOOL v11;
  uint64_t ElementTypeOrSelf;
  void *v13;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;

  result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    v8 = (_QWORD *)mlir::TypeRange::dereference_iterator(a1, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8)
      || ((v9 = *(void **)(*v8 + 136), v9 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (v10 = v9 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (v10 = 1),
          !v10 ? (v11 = v9 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (v11 = 1),
          v11))
    {
      ElementTypeOrSelf = mlir::getElementTypeOrSelf(v8);
      v13 = *(void **)(*(_QWORD *)ElementTypeOrSelf + 136);
      if (v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        v25 = ElementTypeOrSelf;
      }
      else
      {
        v25 = 0;
      }
    }
    else
    {
      v25 = 0;
    }
    v26 = (_QWORD *)mlir::TypeRange::dereference_iterator(a3, a4 - 1);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v26 + 8)
      || (v27 = *(void **)(*v26 + 136), v27 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
      || v27 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
      || v27 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      v29 = mlir::getElementTypeOrSelf(v26);
      if (*(_UNKNOWN **)(*(_QWORD *)v29 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
        v28 = v29;
      else
        v28 = 0;
      if (!v25)
        return 0;
    }
    else
    {
      v28 = 0;
      if (!v25)
        return 0;
    }
    return v28 != 0;
  }
  return result;
}

unint64_t mlir::arith::FPToUIOp::fold(_QWORD *a1, uint64_t a2)
{
  unsigned int Width;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  llvm::APFloatBase *v12;
  int v13;
  void *v14;
  uint64_t v15;
  llvm::APFloatBase *v16;
  int v17;
  void *v18;
  uint64_t v19;
  unint64_t NumElements;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  const llvm::detail::DoubleAPFloat *v26;
  void *v27;
  llvm::APFloatBase *v28;
  int v29;
  void *v30;
  char *Address;
  llvm::APInt *v32;
  unsigned int v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::APFloatBase *v38;
  llvm::APFloatBase *v39;
  uint64_t v41;
  unsigned int v42;
  char v43;
  __int16 v44;
  llvm::APFloatBase *v45;
  uint64_t v46;
  uint64_t v47;
  llvm::APFloatBase *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  _QWORD v55[3];
  void *ElementTypeOrSelf;
  uint64_t v57;
  _QWORD v58[7];

  v58[6] = *MEMORY[0x24BDAC8D0];
  ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8));
  Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&ElementTypeOrSelf);
  v5 = *(uint64_t **)(a2 + 40);
  v6 = *v5;
  if (!*v5)
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  v7 = *(void **)(*(_QWORD *)v6 + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  v8 = Width;
  v9 = (_QWORD *)(*(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    v54 = *v5;
    mlir::FloatAttr::getValue((mlir::FloatAttr *)&v54, (uint64_t)&ElementTypeOrSelf);
    LODWORD(v48) = v8;
    if (v8 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v47, 0, 0);
    else
      v47 = 0;
    LOBYTE(v44) = 0;
    BYTE4(v48) = 1;
    v12 = (llvm::APFloatBase *)llvm::APFloat::convertToInteger((uint64_t)&ElementTypeOrSelf, (uint64_t)&v47, 0, &v44);
    v13 = (int)v12;
    v14 = (void *)v57;
    if (llvm::APFloatBase::PPCDoubleDouble(v12) == v14)
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v57);
      if (v13 == 1)
        goto LABEL_30;
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v57);
      if (v13 == 1)
        goto LABEL_30;
    }
    v15 = mlir::IntegerAttr::get((uint64_t)v9, (llvm::APInt *)&v47);
    goto LABEL_86;
  }
  if (mlir::DenseElementsAttr::classof(*v5))
    v10 = (void *)v6;
  else
    v10 = 0;
  ElementTypeOrSelf = v10;
  if (v10 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&ElementTypeOrSelf))
  {
    v54 = *v5;
    mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v54, (uint64_t)&ElementTypeOrSelf);
    LODWORD(v48) = v8;
    if (v8 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v47, 0, 0);
    else
      v47 = 0;
    LOBYTE(v44) = 0;
    BYTE4(v48) = 1;
    v16 = (llvm::APFloatBase *)llvm::APFloat::convertToInteger((uint64_t)&ElementTypeOrSelf, (uint64_t)&v47, 0, &v44);
    v17 = (int)v16;
    v18 = (void *)v57;
    if (llvm::APFloatBase::PPCDoubleDouble(v16) != v18)
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v57);
      if (v17 == 1)
        goto LABEL_30;
      goto LABEL_33;
    }
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v57);
    if (v17 != 1)
    {
LABEL_33:
      if (v9)
        v19 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
      else
        v19 = 0;
      v15 = mlir::DenseElementsAttr::get((uint64_t)v9, v19, (llvm::APInt *)&v47, 1);
LABEL_86:
      v6 = v15;
      if (v48 < 0x41)
        return v6 & 0xFFFFFFFFFFFFFFFBLL;
LABEL_87:
      if (v47)
        MEMORY[0x20BD002D4](v47, 0x1000C8000313F17);
      return v6 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_30:
    v6 = 0;
    if (v48 < 0x41)
      return v6 & 0xFFFFFFFFFFFFFFFBLL;
    goto LABEL_87;
  }
  v6 = *v5;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v5 + 8))
  {
    v6 = 0;
    v51 = 0;
    v52 = 0;
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v6 + 8);
  v51 = v6;
  v52 = v11;
  if (!v6)
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v51, (uint64_t)&v47);
  if (!v50)
  {
    v6 = 0;
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v44 = v47;
  if ((_BYTE)v47)
    v45 = v48;
  else
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v48 + 16))(&v45);
  v46 = v49;
  ElementTypeOrSelf = v58;
  v57 = 0x300000000;
  NumElements = mlir::ElementsAttr::getNumElements(v51, v52);
  llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&ElementTypeOrSelf, NumElements);
  v21 = mlir::ElementsAttr::getNumElements(v51, v52);
  if (v21)
  {
    v22 = v21;
    v23 = v46;
    do
    {
      if (HIBYTE(v44))
        v24 = 0;
      else
        v24 = v23;
      if ((_BYTE)v44)
      {
        v25 = (char *)v45 + 32 * v24;
        v27 = (void *)*((_QWORD *)v25 + 1);
        v26 = (const llvm::detail::DoubleAPFloat *)(v25 + 8);
        if (llvm::APFloatBase::PPCDoubleDouble(v45) == v27)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(v55, v26);
          v42 = v8;
          if (v8 <= 0x40)
          {
LABEL_44:
            v41 = 0;
            goto LABEL_47;
          }
        }
        else
        {
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v55, v26);
          v42 = v8;
          if (v8 <= 0x40)
            goto LABEL_44;
        }
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v45 + 24))(&v54);
        v42 = v8;
        if (v8 <= 0x40)
          goto LABEL_44;
      }
      llvm::APInt::initSlowCase((llvm::APInt *)&v41, 0, 0);
LABEL_47:
      v53 = 0;
      v43 = 1;
      v28 = (llvm::APFloatBase *)llvm::APFloat::convertToInteger((uint64_t)&v54, (uint64_t)&v41, 0, &v53);
      v29 = (int)v28;
      v30 = (void *)v55[0];
      if (llvm::APFloatBase::PPCDoubleDouble(v28) == v30)
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v55);
        if (v29 == 1)
        {
LABEL_49:
          if (v42 < 0x41)
            goto LABEL_58;
          goto LABEL_56;
        }
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v55);
        if (v29 == 1)
          goto LABEL_49;
      }
      Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&ElementTypeOrSelf, (unint64_t)&v41, 1);
      v32 = (llvm::APInt *)((char *)ElementTypeOrSelf + 16 * v57);
      v33 = *((_DWORD *)Address + 2);
      *((_DWORD *)v32 + 2) = v33;
      if (v33 > 0x40)
      {
        llvm::APInt::initSlowCase(v32, (const void **)Address);
        LODWORD(v57) = v57 + 1;
        if (v42 < 0x41)
          goto LABEL_58;
      }
      else
      {
        *(_QWORD *)v32 = *(_QWORD *)Address;
        LODWORD(v57) = v57 + 1;
        if (v42 < 0x41)
          goto LABEL_58;
      }
LABEL_56:
      if (v41)
        MEMORY[0x20BD002D4](v41, 0x1000C8000313F17);
LABEL_58:
      if (v29 == 1)
      {
        v6 = 0;
        goto LABEL_68;
      }
      v23 = ++v46;
      --v22;
    }
    while (v22);
  }
  if (v9)
    v34 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
  else
    v34 = 0;
  v6 = mlir::DenseElementsAttr::get((uint64_t)v9, v34, (llvm::APInt *)ElementTypeOrSelf, v57);
LABEL_68:
  v35 = (char *)ElementTypeOrSelf;
  if ((_DWORD)v57)
  {
    v36 = 16 * v57;
    do
    {
      if (*(_DWORD *)&v35[v36 - 8] >= 0x41u)
      {
        v37 = *(_QWORD *)&v35[v36 - 16];
        if (v37)
          MEMORY[0x20BD002D4](v37, 0x1000C8000313F17);
      }
      v36 -= 16;
    }
    while (v36);
    v35 = (char *)ElementTypeOrSelf;
  }
  if (v35 != (char *)v58)
    free(v35);
  if (!(_BYTE)v44)
  {
    v38 = v45;
    v45 = 0;
    if (v38)
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v38 + 8))(v38);
  }
  if (v50)
  {
    if (!(_BYTE)v47)
    {
      v39 = v48;
      v48 = 0;
      if (v39)
        (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v39 + 8))(v39);
    }
  }
  return v6 & 0xFFFFFFFFFFFFFFFBLL;
}

unint64_t mlir::arith::FPToSIOp::fold(_QWORD *a1, uint64_t a2)
{
  unsigned int Width;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  llvm::APFloatBase *v12;
  int v13;
  void *v14;
  uint64_t v15;
  llvm::APFloatBase *v16;
  int v17;
  void *v18;
  uint64_t v19;
  unint64_t NumElements;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  const llvm::detail::DoubleAPFloat *v26;
  void *v27;
  llvm::APFloatBase *v28;
  int v29;
  void *v30;
  char *Address;
  llvm::APInt *v32;
  unsigned int v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::APFloatBase *v38;
  llvm::APFloatBase *v39;
  uint64_t v41;
  unsigned int v42;
  char v43;
  __int16 v44;
  llvm::APFloatBase *v45;
  uint64_t v46;
  uint64_t v47;
  llvm::APFloatBase *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  _QWORD v55[3];
  void *ElementTypeOrSelf;
  uint64_t v57;
  _QWORD v58[7];

  v58[6] = *MEMORY[0x24BDAC8D0];
  ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8));
  Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&ElementTypeOrSelf);
  v5 = *(uint64_t **)(a2 + 40);
  v6 = *v5;
  if (!*v5)
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  v7 = *(void **)(*(_QWORD *)v6 + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  v8 = Width;
  v9 = (_QWORD *)(*(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    v54 = *v5;
    mlir::FloatAttr::getValue((mlir::FloatAttr *)&v54, (uint64_t)&ElementTypeOrSelf);
    LODWORD(v48) = v8;
    if (v8 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v47, 0, 0);
    else
      v47 = 0;
    LOBYTE(v44) = 0;
    BYTE4(v48) = 0;
    v12 = (llvm::APFloatBase *)llvm::APFloat::convertToInteger((uint64_t)&ElementTypeOrSelf, (uint64_t)&v47, 0, &v44);
    v13 = (int)v12;
    v14 = (void *)v57;
    if (llvm::APFloatBase::PPCDoubleDouble(v12) == v14)
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v57);
      if (v13 == 1)
        goto LABEL_30;
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v57);
      if (v13 == 1)
        goto LABEL_30;
    }
    v15 = mlir::IntegerAttr::get((uint64_t)v9, (llvm::APInt *)&v47);
    goto LABEL_86;
  }
  if (mlir::DenseElementsAttr::classof(*v5))
    v10 = (void *)v6;
  else
    v10 = 0;
  ElementTypeOrSelf = v10;
  if (v10 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&ElementTypeOrSelf))
  {
    v54 = *v5;
    mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v54, (uint64_t)&ElementTypeOrSelf);
    LODWORD(v48) = v8;
    if (v8 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v47, 0, 0);
    else
      v47 = 0;
    LOBYTE(v44) = 0;
    BYTE4(v48) = 0;
    v16 = (llvm::APFloatBase *)llvm::APFloat::convertToInteger((uint64_t)&ElementTypeOrSelf, (uint64_t)&v47, 0, &v44);
    v17 = (int)v16;
    v18 = (void *)v57;
    if (llvm::APFloatBase::PPCDoubleDouble(v16) != v18)
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v57);
      if (v17 == 1)
        goto LABEL_30;
      goto LABEL_33;
    }
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v57);
    if (v17 != 1)
    {
LABEL_33:
      if (v9)
        v19 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
      else
        v19 = 0;
      v15 = mlir::DenseElementsAttr::get((uint64_t)v9, v19, (llvm::APInt *)&v47, 1);
LABEL_86:
      v6 = v15;
      if (v48 < 0x41)
        return v6 & 0xFFFFFFFFFFFFFFFBLL;
LABEL_87:
      if (v47)
        MEMORY[0x20BD002D4](v47, 0x1000C8000313F17);
      return v6 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_30:
    v6 = 0;
    if (v48 < 0x41)
      return v6 & 0xFFFFFFFFFFFFFFFBLL;
    goto LABEL_87;
  }
  v6 = *v5;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v5 + 8))
  {
    v6 = 0;
    v51 = 0;
    v52 = 0;
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v6 + 8);
  v51 = v6;
  v52 = v11;
  if (!v6)
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v51, (uint64_t)&v47);
  if (!v50)
  {
    v6 = 0;
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v44 = v47;
  if ((_BYTE)v47)
    v45 = v48;
  else
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v48 + 16))(&v45);
  v46 = v49;
  ElementTypeOrSelf = v58;
  v57 = 0x300000000;
  NumElements = mlir::ElementsAttr::getNumElements(v51, v52);
  llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&ElementTypeOrSelf, NumElements);
  v21 = mlir::ElementsAttr::getNumElements(v51, v52);
  if (v21)
  {
    v22 = v21;
    v23 = v46;
    do
    {
      if (HIBYTE(v44))
        v24 = 0;
      else
        v24 = v23;
      if ((_BYTE)v44)
      {
        v25 = (char *)v45 + 32 * v24;
        v27 = (void *)*((_QWORD *)v25 + 1);
        v26 = (const llvm::detail::DoubleAPFloat *)(v25 + 8);
        if (llvm::APFloatBase::PPCDoubleDouble(v45) == v27)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(v55, v26);
          v42 = v8;
          if (v8 <= 0x40)
          {
LABEL_44:
            v41 = 0;
            goto LABEL_47;
          }
        }
        else
        {
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v55, v26);
          v42 = v8;
          if (v8 <= 0x40)
            goto LABEL_44;
        }
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v45 + 24))(&v54);
        v42 = v8;
        if (v8 <= 0x40)
          goto LABEL_44;
      }
      llvm::APInt::initSlowCase((llvm::APInt *)&v41, 0, 0);
LABEL_47:
      v53 = 0;
      v43 = 0;
      v28 = (llvm::APFloatBase *)llvm::APFloat::convertToInteger((uint64_t)&v54, (uint64_t)&v41, 0, &v53);
      v29 = (int)v28;
      v30 = (void *)v55[0];
      if (llvm::APFloatBase::PPCDoubleDouble(v28) == v30)
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v55);
        if (v29 == 1)
        {
LABEL_49:
          if (v42 < 0x41)
            goto LABEL_58;
          goto LABEL_56;
        }
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v55);
        if (v29 == 1)
          goto LABEL_49;
      }
      Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&ElementTypeOrSelf, (unint64_t)&v41, 1);
      v32 = (llvm::APInt *)((char *)ElementTypeOrSelf + 16 * v57);
      v33 = *((_DWORD *)Address + 2);
      *((_DWORD *)v32 + 2) = v33;
      if (v33 > 0x40)
      {
        llvm::APInt::initSlowCase(v32, (const void **)Address);
        LODWORD(v57) = v57 + 1;
        if (v42 < 0x41)
          goto LABEL_58;
      }
      else
      {
        *(_QWORD *)v32 = *(_QWORD *)Address;
        LODWORD(v57) = v57 + 1;
        if (v42 < 0x41)
          goto LABEL_58;
      }
LABEL_56:
      if (v41)
        MEMORY[0x20BD002D4](v41, 0x1000C8000313F17);
LABEL_58:
      if (v29 == 1)
      {
        v6 = 0;
        goto LABEL_68;
      }
      v23 = ++v46;
      --v22;
    }
    while (v22);
  }
  if (v9)
    v34 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
  else
    v34 = 0;
  v6 = mlir::DenseElementsAttr::get((uint64_t)v9, v34, (llvm::APInt *)ElementTypeOrSelf, v57);
LABEL_68:
  v35 = (char *)ElementTypeOrSelf;
  if ((_DWORD)v57)
  {
    v36 = 16 * v57;
    do
    {
      if (*(_DWORD *)&v35[v36 - 8] >= 0x41u)
      {
        v37 = *(_QWORD *)&v35[v36 - 16];
        if (v37)
          MEMORY[0x20BD002D4](v37, 0x1000C8000313F17);
      }
      v36 -= 16;
    }
    while (v36);
    v35 = (char *)ElementTypeOrSelf;
  }
  if (v35 != (char *)v58)
    free(v35);
  if (!(_BYTE)v44)
  {
    v38 = v45;
    v45 = 0;
    if (v38)
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v38 + 8))(v38);
  }
  if (v50)
  {
    if (!(_BYTE)v47)
    {
      v39 = v48;
      v48 = 0;
      if (v39)
        (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v39 + 8))(v39);
    }
  }
  return v6 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t areIndexCastCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v7;
  void *v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  uint64_t ElementTypeOrSelf;
  void *v13;
  _QWORD *v15;
  void *v16;
  BOOL v17;
  BOOL v18;
  uint64_t v20;
  void *v21;
  BOOL v22;
  uint64_t v23;
  _BOOL4 isIndex;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if ((_DWORD)result)
  {
    v7 = (_QWORD *)mlir::TypeRange::dereference_iterator(a1, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8)
      || ((v8 = *(void **)(*v7 + 136), v8 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (v9 = v8 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
        : (v9 = 1),
          !v9 ? (v10 = v8 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) : (v10 = 1),
          !v10 ? (v11 = v8 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (v11 = 1),
          v11))
    {
      ElementTypeOrSelf = mlir::getElementTypeOrSelf(v7);
      v13 = *(void **)(*(_QWORD *)ElementTypeOrSelf + 136);
      if (v13 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        v26 = ElementTypeOrSelf;
      }
      else
      {
        v26 = 0;
      }
    }
    else
    {
      v26 = 0;
    }
    v28 = v26;
    v15 = (_QWORD *)mlir::TypeRange::dereference_iterator(a3, 0);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8))
    {
      v16 = *(void **)(*v15 + 136);
      v17 = v16 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
         || v16 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id;
      v18 = v17 || v16 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
      if (!v18 && v16 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        return 0;
    }
    v20 = mlir::getElementTypeOrSelf(v15);
    v21 = *(void **)(*(_QWORD *)v20 + 136);
    v22 = v21 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id
       || v21 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
    v23 = v22 ? v20 : 0;
    v27 = v23;
    if (!v26 || v23 == 0)
    {
      return 0;
    }
    else
    {
      isIndex = mlir::Type::isIndex((mlir::Type *)&v28);
      if (isIndex && mlir::Type::isSignlessInteger((mlir::Type *)&v27))
      {
        return 1;
      }
      else
      {
        result = mlir::Type::isSignlessInteger((mlir::Type *)&v28);
        if ((_DWORD)result)
          return mlir::Type::isIndex((mlir::Type *)&v27);
      }
    }
  }
  return result;
}

unint64_t mlir::arith::IndexCastOp::fold(_QWORD *a1, uint64_t a2)
{
  uint64_t ElementTypeOrSelf;
  void *v5;
  unsigned int Width;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t NumElements;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *Address;
  llvm::APInt *v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  void *v41[2];
  _OWORD v42[4];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8));
  if (*(_UNKNOWN **)(*(_QWORD *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v5 = (void *)ElementTypeOrSelf;
  else
    v5 = 0;
  v41[0] = v5;
  if (v5)
  {
    Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v41);
    v7 = *(uint64_t **)(a2 + 40);
    v8 = *v7;
    if (!*v7)
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  else
  {
    Width = 64;
    v7 = *(uint64_t **)(a2 + 40);
    v8 = *v7;
    if (!*v7)
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v9 = *(void **)(*(_QWORD *)v8 + 136);
  if (v9 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  v10 = (_QWORD *)(*(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v9 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v34 = v8;
    mlir::IntegerAttr::getValue(&v34, (llvm::APInt *)&v39);
    llvm::APInt::sextOrTrunc((char *)&v39, Width, (uint64_t)v41);
    if (DWORD2(v39) >= 0x41 && (_QWORD)v39)
      MEMORY[0x20BD002D4](v39, 0x1000C8000313F17);
    v8 = mlir::IntegerAttr::get((uint64_t)v10, (llvm::APInt *)v41);
    if (LODWORD(v41[1]) >= 0x41)
      goto LABEL_35;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (mlir::DenseElementsAttr::classof(v8))
    v11 = (void *)v8;
  else
    v11 = 0;
  v41[0] = v11;
  if (!v11 || !mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v41))
  {
    v8 = *v7;
    if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v7 + 8))
    {
      v8 = 0;
      v37 = 0;
      v38 = 0;
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
    v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v8 + 8);
    v37 = v8;
    v38 = v13;
    if (!v8)
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v37, (uint64_t)&v39);
    if (!BYTE8(v40))
    {
      v8 = 0;
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
    LOWORD(v34) = v39;
    if ((_BYTE)v39)
      v35 = *((_QWORD *)&v39 + 1);
    else
      (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)&v39 + 1) + 16))(&v35);
    v36 = v40;
    v41[0] = v42;
    v41[1] = (void *)0x300000000;
    NumElements = mlir::ElementsAttr::getNumElements(v37, v38);
    llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)v41, NumElements);
    v15 = mlir::ElementsAttr::getNumElements(v37, v38);
    if (!v15)
    {
LABEL_58:
      if (v10)
        v23 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
      else
        v23 = 0;
      v8 = mlir::DenseElementsAttr::get((uint64_t)v10, v23, (llvm::APInt *)v41[0], LODWORD(v41[1]));
      v24 = (char *)v41[0];
      if (LODWORD(v41[1]))
      {
        v25 = 16 * LODWORD(v41[1]);
        do
        {
          if (*(_DWORD *)&v24[v25 - 8] >= 0x41u)
          {
            v26 = *(_QWORD *)&v24[v25 - 16];
            if (v26)
              MEMORY[0x20BD002D4](v26, 0x1000C8000313F17);
          }
          v25 -= 16;
        }
        while (v25);
        v24 = (char *)v41[0];
      }
      if (v24 != (char *)v42)
        free(v24);
      if (!(_BYTE)v34)
      {
        v27 = v35;
        v35 = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      }
      if (BYTE8(v40))
      {
        if (!(_BYTE)v39)
        {
          v28 = *((_QWORD *)&v39 + 1);
          *((_QWORD *)&v39 + 1) = 0;
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
      }
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
    v16 = v15;
    v17 = v36;
    while (1)
    {
      if (BYTE1(v34))
        v18 = 0;
      else
        v18 = v17;
      if ((_BYTE)v34)
      {
        v19 = v35 + 16 * v18;
        v31 = *(_DWORD *)(v19 + 8);
        if (v31 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v30, (const void **)v19);
        else
          v30 = *(const void **)v19;
      }
      else
      {
        (*(void (**)(const void **__return_ptr))(*(_QWORD *)v35 + 24))(&v30);
      }
      llvm::APInt::sextOrTrunc((char *)&v30, Width, (uint64_t)&v32);
      if (v31 >= 0x41 && v30)
        MEMORY[0x20BD002D4](v30, 0x1000C8000313F17);
      Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)v41, (unint64_t)&v32, 1);
      v21 = (llvm::APInt *)((char *)v41[0] + 16 * LODWORD(v41[1]));
      v22 = *((_DWORD *)Address + 2);
      *((_DWORD *)v21 + 2) = v22;
      if (v22 > 0x40)
      {
        llvm::APInt::initSlowCase(v21, (const void **)Address);
        ++LODWORD(v41[1]);
        if (v33 >= 0x41)
        {
LABEL_56:
          if (v32)
            MEMORY[0x20BD002D4](v32, 0x1000C8000313F17);
        }
      }
      else
      {
        *(_QWORD *)v21 = *(_QWORD *)Address;
        ++LODWORD(v41[1]);
        if (v33 >= 0x41)
          goto LABEL_56;
      }
      v17 = ++v36;
      if (!--v16)
        goto LABEL_58;
    }
  }
  v37 = *v7;
  mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v37, (uint64_t)v41);
  v39 = *(_OWORD *)v41;
  v40 = v42[0];
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v39, (llvm::APInt *)&v34);
  llvm::APInt::sextOrTrunc((char *)&v34, Width, (uint64_t)v41);
  if (v35 >= 0x41 && v34)
    MEMORY[0x20BD002D4](v34, 0x1000C8000313F17);
  if (v10)
    v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
  else
    v12 = 0;
  v8 = mlir::DenseElementsAttr::get((uint64_t)v10, v12, (llvm::APInt *)v41, 1);
  if (LODWORD(v41[1]) >= 0x41)
  {
LABEL_35:
    if (v41[0])
      MEMORY[0x20BD002D4](v41[0], 0x1000C8000313F17);
  }
  return v8 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::IndexCastOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  const char *v73;
  unint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v73, 2);
  mlir::Pattern::Pattern(v4 + 8, (uint64_t)"arith.index_cast", 16, (__int16)v73, a2, 0, 0);
  *(_QWORD *)v4 = &off_24C029CA8;
  if (*(_QWORD *)(v4 + 72))
  {
    v5 = *(unsigned int *)(v4 + 88);
    if (v5 <= *(_DWORD *)(v4 + 92))
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 80, (void *)(v4 + 96), v5, 16);
    *(_DWORD *)(v4 + 88) = *(_DWORD *)(v4 + 88);
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v73 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::IndexCastOfIndexCast]";
  v74 = 93;
  v9 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (v74 >= v9)
    v10 = v9;
  else
    v10 = v74;
  v11 = &v73[v10];
  v12 = v74 - v10;
  if (v74 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v74 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *(_QWORD *)(v4 + 64) = v14;
  *(_QWORD *)(v4 + 72) = v15;
  v5 = *(unsigned int *)(v4 + 88);
  if (v5 > *(_DWORD *)(v4 + 92))
    goto LABEL_14;
LABEL_3:
  *(_DWORD *)(v4 + 88) = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_78;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_79;
    v21 = (char *)operator new(8 * v20);
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v4;
    v8 = (uint64_t)(v22 + 1);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (uint64_t *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v22
        && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 = (uint64_t *)((char *)v22 - v27);
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *--v22 = v34;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v72, 2);
  v73 = "arith.index_cast";
  v74 = 16;
  mlir::Pattern::Pattern(v38 + 8, (uint64_t)"arith.index_cast", 16, v72, a2, &v73, 1uLL);
  *(_QWORD *)v38 = &off_24C028A68;
  if (*(_QWORD *)(v38 + 72))
  {
    v39 = *(unsigned int *)(v38 + 88);
    if (v39 <= *(_DWORD *)(v38 + 92))
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v38 + 80, (void *)(v38 + 96), v39, 16);
    *(_DWORD *)(v38 + 88) = *(_DWORD *)(v38 + 88);
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  v73 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::IndexCastOfExtSI]";
  v74 = 89;
  v43 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (v74 >= v43)
    v44 = v43;
  else
    v44 = v74;
  v45 = &v73[v44];
  v46 = v74 - v44;
  if (v74 - v44 >= 0x12)
    v47 = 18;
  else
    v47 = v74 - v44;
  v48 = &v45[v47];
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *(_QWORD *)(v38 + 64) = v48;
  *(_QWORD *)(v38 + 72) = v49;
  v39 = *(unsigned int *)(v38 + 88);
  if (v39 > *(_DWORD *)(v38 + 92))
    goto LABEL_52;
LABEL_41:
  *(_DWORD *)(v38 + 88) = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
LABEL_78:
    abort();
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (!v54)
  {
    v55 = 0;
    v56 = (uint64_t *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
    goto LABEL_74;
  }
  if (v54 >> 61)
LABEL_79:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v55 = (char *)operator new(8 * v54);
  v56 = (uint64_t *)&v55[8 * v51];
  v57 = &v55[8 * v54];
  *v56 = v38;
  v42 = (uint64_t)(v56 + 1);
  v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v56
      && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    v60 = (v59 >> 3) + 1;
    v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    v62 = &v41[-v61];
    v56 = (uint64_t *)((char *)v56 - v61);
    v63 = &v55[8 * v51 - 16];
    v64 = v41 - 16;
    v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v67 = *((_OWORD *)v64 - 1);
      v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        v68 = *((_QWORD *)v41 - 1);
        v41 -= 8;
        *(_QWORD *)v41 = 0;
        *--v56 = v68;
      }
      while (v41 != v50);
    }
    v41 = (char *)a1[1];
    v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      v71 = *((_QWORD *)v69 - 1);
      v69 -= 8;
      v70 = v71;
      *(_QWORD *)v69 = 0;
      if (v71)
        (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
}

unint64_t mlir::arith::IndexCastUIOp::fold(_QWORD *a1, uint64_t a2)
{
  uint64_t ElementTypeOrSelf;
  void *v5;
  unsigned int Width;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t NumElements;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *Address;
  llvm::APInt *v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  void *v41[2];
  _OWORD v42[4];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8));
  if (*(_UNKNOWN **)(*(_QWORD *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v5 = (void *)ElementTypeOrSelf;
  else
    v5 = 0;
  v41[0] = v5;
  if (v5)
  {
    Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v41);
    v7 = *(uint64_t **)(a2 + 40);
    v8 = *v7;
    if (!*v7)
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  else
  {
    Width = 64;
    v7 = *(uint64_t **)(a2 + 40);
    v8 = *v7;
    if (!*v7)
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v9 = *(void **)(*(_QWORD *)v8 + 136);
  if (v9 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  v10 = (_QWORD *)(*(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v9 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v34 = v8;
    mlir::IntegerAttr::getValue(&v34, (llvm::APInt *)&v39);
    llvm::APInt::zextOrTrunc((llvm::APInt *)&v39, Width, (uint64_t)v41);
    if (DWORD2(v39) >= 0x41 && (_QWORD)v39)
      MEMORY[0x20BD002D4](v39, 0x1000C8000313F17);
    v8 = mlir::IntegerAttr::get((uint64_t)v10, (llvm::APInt *)v41);
    if (LODWORD(v41[1]) >= 0x41)
      goto LABEL_35;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (mlir::DenseElementsAttr::classof(v8))
    v11 = (void *)v8;
  else
    v11 = 0;
  v41[0] = v11;
  if (!v11 || !mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v41))
  {
    v8 = *v7;
    if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v7 + 8))
    {
      v8 = 0;
      v37 = 0;
      v38 = 0;
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
    v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v8 + 8);
    v37 = v8;
    v38 = v13;
    if (!v8)
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v37, (uint64_t)&v39);
    if (!BYTE8(v40))
    {
      v8 = 0;
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
    LOWORD(v34) = v39;
    if ((_BYTE)v39)
      v35 = *((_QWORD *)&v39 + 1);
    else
      (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)&v39 + 1) + 16))(&v35);
    v36 = v40;
    v41[0] = v42;
    v41[1] = (void *)0x300000000;
    NumElements = mlir::ElementsAttr::getNumElements(v37, v38);
    llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)v41, NumElements);
    v15 = mlir::ElementsAttr::getNumElements(v37, v38);
    if (!v15)
    {
LABEL_58:
      if (v10)
        v23 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
      else
        v23 = 0;
      v8 = mlir::DenseElementsAttr::get((uint64_t)v10, v23, (llvm::APInt *)v41[0], LODWORD(v41[1]));
      v24 = (char *)v41[0];
      if (LODWORD(v41[1]))
      {
        v25 = 16 * LODWORD(v41[1]);
        do
        {
          if (*(_DWORD *)&v24[v25 - 8] >= 0x41u)
          {
            v26 = *(_QWORD *)&v24[v25 - 16];
            if (v26)
              MEMORY[0x20BD002D4](v26, 0x1000C8000313F17);
          }
          v25 -= 16;
        }
        while (v25);
        v24 = (char *)v41[0];
      }
      if (v24 != (char *)v42)
        free(v24);
      if (!(_BYTE)v34)
      {
        v27 = v35;
        v35 = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      }
      if (BYTE8(v40))
      {
        if (!(_BYTE)v39)
        {
          v28 = *((_QWORD *)&v39 + 1);
          *((_QWORD *)&v39 + 1) = 0;
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
      }
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
    v16 = v15;
    v17 = v36;
    while (1)
    {
      if (BYTE1(v34))
        v18 = 0;
      else
        v18 = v17;
      if ((_BYTE)v34)
      {
        v19 = v35 + 16 * v18;
        v31 = *(_DWORD *)(v19 + 8);
        if (v31 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v30, (const void **)v19);
        else
          v30 = *(const void **)v19;
      }
      else
      {
        (*(void (**)(const void **__return_ptr))(*(_QWORD *)v35 + 24))(&v30);
      }
      llvm::APInt::zextOrTrunc((llvm::APInt *)&v30, Width, (uint64_t)&v32);
      if (v31 >= 0x41 && v30)
        MEMORY[0x20BD002D4](v30, 0x1000C8000313F17);
      Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)v41, (unint64_t)&v32, 1);
      v21 = (llvm::APInt *)((char *)v41[0] + 16 * LODWORD(v41[1]));
      v22 = *((_DWORD *)Address + 2);
      *((_DWORD *)v21 + 2) = v22;
      if (v22 > 0x40)
      {
        llvm::APInt::initSlowCase(v21, (const void **)Address);
        ++LODWORD(v41[1]);
        if (v33 >= 0x41)
        {
LABEL_56:
          if (v32)
            MEMORY[0x20BD002D4](v32, 0x1000C8000313F17);
        }
      }
      else
      {
        *(_QWORD *)v21 = *(_QWORD *)Address;
        ++LODWORD(v41[1]);
        if (v33 >= 0x41)
          goto LABEL_56;
      }
      v17 = ++v36;
      if (!--v16)
        goto LABEL_58;
    }
  }
  v37 = *v7;
  mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v37, (uint64_t)v41);
  v39 = *(_OWORD *)v41;
  v40 = v42[0];
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v39, (llvm::APInt *)&v34);
  llvm::APInt::zextOrTrunc((llvm::APInt *)&v34, Width, (uint64_t)v41);
  if (v35 >= 0x41 && v34)
    MEMORY[0x20BD002D4](v34, 0x1000C8000313F17);
  if (v10)
    v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
  else
    v12 = 0;
  v8 = mlir::DenseElementsAttr::get((uint64_t)v10, v12, (llvm::APInt *)v41, 1);
  if (LODWORD(v41[1]) >= 0x41)
  {
LABEL_35:
    if (v41[0])
      MEMORY[0x20BD002D4](v41[0], 0x1000C8000313F17);
  }
  return v8 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::IndexCastUIOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  const char *v73;
  unint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v73, 2);
  mlir::Pattern::Pattern(v4 + 8, (uint64_t)"arith.index_castui", 18, (__int16)v73, a2, 0, 0);
  *(_QWORD *)v4 = &off_24C02A810;
  if (*(_QWORD *)(v4 + 72))
  {
    v5 = *(unsigned int *)(v4 + 88);
    if (v5 <= *(_DWORD *)(v4 + 92))
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 80, (void *)(v4 + 96), v5, 16);
    *(_DWORD *)(v4 + 88) = *(_DWORD *)(v4 + 88);
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v73 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::IndexCastUIOfIndexCastUI]";
  v74 = 97;
  v9 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (v74 >= v9)
    v10 = v9;
  else
    v10 = v74;
  v11 = &v73[v10];
  v12 = v74 - v10;
  if (v74 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v74 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *(_QWORD *)(v4 + 64) = v14;
  *(_QWORD *)(v4 + 72) = v15;
  v5 = *(unsigned int *)(v4 + 88);
  if (v5 > *(_DWORD *)(v4 + 92))
    goto LABEL_14;
LABEL_3:
  *(_DWORD *)(v4 + 88) = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_78;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_79;
    v21 = (char *)operator new(8 * v20);
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v4;
    v8 = (uint64_t)(v22 + 1);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (uint64_t *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v22
        && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 = (uint64_t *)((char *)v22 - v27);
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *--v22 = v34;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v72, 2);
  v73 = "arith.index_castui";
  v74 = 18;
  mlir::Pattern::Pattern(v38 + 8, (uint64_t)"arith.index_castui", 18, v72, a2, &v73, 1uLL);
  *(_QWORD *)v38 = &off_24C0295E8;
  if (*(_QWORD *)(v38 + 72))
  {
    v39 = *(unsigned int *)(v38 + 88);
    if (v39 <= *(_DWORD *)(v38 + 92))
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v38 + 80, (void *)(v38 + 96), v39, 16);
    *(_DWORD *)(v38 + 88) = *(_DWORD *)(v38 + 88);
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  v73 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::IndexCastUIOfExtUI]";
  v74 = 91;
  v43 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (v74 >= v43)
    v44 = v43;
  else
    v44 = v74;
  v45 = &v73[v44];
  v46 = v74 - v44;
  if (v74 - v44 >= 0x12)
    v47 = 18;
  else
    v47 = v74 - v44;
  v48 = &v45[v47];
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *(_QWORD *)(v38 + 64) = v48;
  *(_QWORD *)(v38 + 72) = v49;
  v39 = *(unsigned int *)(v38 + 88);
  if (v39 > *(_DWORD *)(v38 + 92))
    goto LABEL_52;
LABEL_41:
  *(_DWORD *)(v38 + 88) = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
LABEL_78:
    abort();
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (!v54)
  {
    v55 = 0;
    v56 = (uint64_t *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
    goto LABEL_74;
  }
  if (v54 >> 61)
LABEL_79:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v55 = (char *)operator new(8 * v54);
  v56 = (uint64_t *)&v55[8 * v51];
  v57 = &v55[8 * v54];
  *v56 = v38;
  v42 = (uint64_t)(v56 + 1);
  v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v56
      && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    v60 = (v59 >> 3) + 1;
    v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    v62 = &v41[-v61];
    v56 = (uint64_t *)((char *)v56 - v61);
    v63 = &v55[8 * v51 - 16];
    v64 = v41 - 16;
    v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v67 = *((_OWORD *)v64 - 1);
      v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        v68 = *((_QWORD *)v41 - 1);
        v41 -= 8;
        *(_QWORD *)v41 = 0;
        *--v56 = v68;
      }
      while (v41 != v50);
    }
    v41 = (char *)a1[1];
    v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      v71 = *((_QWORD *)v69 - 1);
      v69 -= 8;
      v70 = v71;
      *(_QWORD *)v69 = 0;
      if (v71)
        (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
}

BOOL mlir::arith::BitcastOp::areCastCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int IntOrFloatBitWidth;
  uint64_t v11;
  uint64_t v12;

  result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    v7 = (_QWORD *)mlir::TypeRange::dereference_iterator(a1, 0);
    v12 = getTypeIfLikeOrMemRef<mlir::IntegerType,mlir::IndexType,mlir::FloatType>(v7);
    v8 = (_QWORD *)mlir::TypeRange::dereference_iterator(a3, 0);
    v9 = getTypeIfLikeOrMemRef<mlir::IntegerType,mlir::IndexType,mlir::FloatType>(v8);
    result = 0;
    v11 = v9;
    if (v12)
    {
      if (v9)
      {
        IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v12);
        return IntOrFloatBitWidth == mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v11);
      }
    }
  }
  return result;
}

BOOL areValidCastInputsAndOutputs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t Values;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15[2];
  unint64_t v16[3];

  result = 0;
  v16[2] = *MEMORY[0x24BDAC8D0];
  if (a2 == 1 && a4 == 1)
  {
    v7 = mlir::TypeRange::dereference_iterator(a1, 0);
    v8 = mlir::TypeRange::dereference_iterator(a3, 0);
    if (*(_UNKNOWN **)(*(_QWORD *)v7 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
      v9 = v7;
    else
      v9 = 0;
    v14 = v9;
    if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
      v10 = v8;
    else
      v10 = 0;
    v13 = v10;
    if (v9)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (v11
      || (Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v14),
          Values == mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v13)))
    {
      v14 = mlir::TypeRange::dereference_iterator(a1, 0);
      mlir::ValueRange::ValueRange(v16, (uint64_t)&v14, 1uLL);
      v13 = mlir::TypeRange::dereference_iterator(a3, 0);
      mlir::ValueRange::ValueRange(v15, (uint64_t)&v13, 1uLL);
      return mlir::verifyCompatibleShapes(v16[0], v16[1], v15[0], v15[1]) != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t getTypeIfLikeOrMemRef<mlir::IntegerType,mlir::IndexType,mlir::FloatType>(_QWORD *a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  uint64_t result;
  void *v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;

  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a1 + 8))
  {
    v2 = *(void **)(*a1 + 136);
    v3 = v2 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
      || v2 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id;
    v4 = v3 || v2 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
    if (!v4 && v2 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      return 0;
  }
  result = mlir::getElementTypeOrSelf(a1);
  v7 = *(void **)(*(_QWORD *)result + 136);
  v8 = v7 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
    || v7 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
  v9 = v8 || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id;
  v10 = v9 || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  v11 = v10 || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  v12 = v11 || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  v13 = v12 || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  v14 = v13 || v7 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  v15 = v14 || v7 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  v16 = v15 || v7 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  v17 = v16 || v7 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  v18 = v17 || v7 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  v19 = v18 || v7 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
  if (!v19 && v7 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    return 0;
  return result;
}

unint64_t mlir::arith::BitcastOp::fold(_QWORD *a1, uint64_t a2)
{
  const llvm::APInt *v2;
  unint64_t v3;
  _BOOL4 v4;
  const llvm::APInt *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t OperandRange;
  llvm::APFloatBase *Value;
  void *v11;
  void *v12;
  void *v13;
  BOOL v24;
  llvm::APFloatBase *FloatSemantics;
  llvm::APFloatBase *v26;
  uint64_t v27;
  const llvm::APInt *v28;
  unint64_t v29;
  const llvm::APInt *v30;
  unsigned int v31;
  unint64_t v32;
  _QWORD v33[4];

  v33[3] = *MEMORY[0x24BDAC8D0];
  v2 = **(const llvm::APInt ***)(a2 + 40);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8;
  v4 = mlir::DenseElementsAttr::classof(**(_QWORD **)(a2 + 40));
  if (v4)
    v5 = v2;
  else
    v5 = 0;
  v30 = v5;
  if (v4)
  {
    if (v3)
      v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v3 + 8);
    else
      v6 = 0;
    v32 = v3;
    v33[0] = v6;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v32);
    return mlir::DenseElementsAttr::bitcast((uint64_t)&v30, OperandRange) & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v3 + 8))
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v2 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    v29 = (unint64_t)v2;
    Value = (llvm::APFloatBase *)mlir::FloatAttr::getValue((mlir::FloatAttr *)&v29, (uint64_t)&v32);
    v11 = (void *)v33[0];
    v12 = llvm::APFloatBase::PPCDoubleDouble(Value);
    if (v12 == v11)
    {
      llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v33, (llvm::APInt *)&v30);
      if (v12 != (void *)v33[0])
        goto LABEL_17;
    }
    else
    {
      llvm::detail::IEEEFloat::bitcastToAPInt(v33, (uint64_t)&v30);
      if (v12 != (void *)v33[0])
      {
LABEL_17:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v33);
        goto LABEL_20;
      }
    }
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v33);
    goto LABEL_20;
  }
  v28 = v2;
  mlir::IntegerAttr::getValue(&v28, (llvm::APInt *)&v30);
LABEL_20:
  v13 = *(void **)(*(_QWORD *)v3 + 136);
  v24 = v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
  if (v24 && (v29 = v3) != 0)
  {
    FloatSemantics = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v29);
    v26 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(FloatSemantics);
    if (v26 == FloatSemantics)
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v33, (uint64_t)v26, (uint64_t)&v30);
    else
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v33, FloatSemantics, &v30);
    v27 = mlir::FloatAttr::get(v3, (uint64_t)&v32);
    if (v26 == (llvm::APFloatBase *)v33[0])
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v33);
      v7 = v27 & 0xFFFFFFFFFFFFFFFBLL;
      if (v31 < 0x41)
        return v7;
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v33);
      v7 = v27 & 0xFFFFFFFFFFFFFFFBLL;
      if (v31 < 0x41)
        return v7;
    }
  }
  else
  {
    v7 = mlir::IntegerAttr::get(v3, (llvm::APInt *)&v30) & 0xFFFFFFFFFFFFFFFBLL;
    if (v31 < 0x41)
      return v7;
  }
  if (v30)
    MEMORY[0x20BD002D4](v30, 0x1000C8000313F17);
  return v7;
}

llvm::APFloatBase *llvm::APFloat::APFloat(llvm::APFloatBase *a1, void *a2, const llvm::APInt **a3)
{
  llvm::detail::IEEEFloat *v6;

  v6 = (llvm::APFloatBase *)((char *)a1 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == a2)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v6, (uint64_t)a2, (uint64_t)a3);
  else
    llvm::detail::IEEEFloat::IEEEFloat(v6, a2, a3);
  return a1;
}

void mlir::arith::BitcastOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;

  v4 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v38, 2);
  mlir::Pattern::Pattern(v4 + 8, (uint64_t)"arith.bitcast", 13, (__int16)v38, a2, 0, 0);
  *(_QWORD *)v4 = &off_24C028920;
  if (*(_QWORD *)(v4 + 72))
  {
    v5 = *(unsigned int *)(v4 + 88);
    if (v5 <= *(_DWORD *)(v4 + 92))
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 80, (void *)(v4 + 96), v5, 16);
    *(_DWORD *)(v4 + 88) = *(_DWORD *)(v4 + 88);
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::BitcastOfBitcast]";
  v39 = 89;
  v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9)
    v10 = v9;
  else
    v10 = v39;
  v11 = &v38[v10];
  v12 = v39 - v10;
  if (v39 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v39 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *(_QWORD *)(v4 + 64) = v14;
  *(_QWORD *)(v4 + 72) = v15;
  v5 = *(unsigned int *)(v4 + 88);
  if (v5 > *(_DWORD *)(v4 + 92))
    goto LABEL_14;
LABEL_3:
  *(_DWORD *)(v4 + 88) = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v4;
    v8 = (uint64_t)(v22 + 1);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (uint64_t *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v22
        && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 = (uint64_t *)((char *)v22 - v27);
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *--v22 = v34;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
}

void mlir::arith::applyCmpPredicate(uint64_t a1)
{
  __asm { BR              X9 }
}

BOOL sub_20716C150(int a1, const void **this, const void **a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (*((_DWORD *)this + 2) > 0x40u)
    return llvm::APInt::equalSlowCase(this, a3);
  else
    return *this == *a3;
}

uint64_t mlir::arith::CmpIOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  _BOOL4 v7;
  mlir::MLIRContext *v8;
  mlir::BoolAttr *Context;
  uint64_t I1SameShape;
  _QWORD *v11;
  uint64_t v12;
  uint64_t DefiningOp;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int64x2_t *v26;
  uint64_t *v27;
  _QWORD *canMapOperands;
  uint64_t Int;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t Value;
  _QWORD *v60;
  uint64_t v61;
  uint64_t Type;
  uint64_t v63;
  int v64;
  unsigned int v65;
  unint64_t NumElements;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  char *Address;
  llvm::APInt *v77;
  unsigned int v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  const void *v89;
  unsigned int v90;
  const void *v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int v94;
  char v95;
  __int16 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 v105;
  _QWORD v106[2];
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  __int128 v117;
  __int128 v118;
  _BYTE v119[40];
  int64x2_t v120;
  __int128 v121;
  int64x2_t v122;
  __int128 v123;
  int64x2_t v124;
  uint64_t v125;
  _QWORD v126[2];
  int64x2_t v127;
  uint64_t v128;

  v128 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24) == *(_QWORD *)(*(_QWORD *)(*a1 + 72) + 56))
  {
    *(_QWORD *)v119 = *(_QWORD *)(*a1 + 80);
    v8 = (mlir::MLIRContext *)((0x2A9u >> mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v119)) & 1);
    *(_QWORD *)v119 = *(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8;
    Context = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Attribute *)v119);
    I1SameShape = mlir::BoolAttr::get(Context, v8);
    *(_QWORD *)&v117 = I1SameShape;
    v11 = *(_QWORD **)v119;
    if (*(_QWORD *)v119)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(**(_QWORD **)v119 + 8))
      {
        v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
        if (v11)
          I1SameShape = mlir::DenseElementsAttr::get((uint64_t)v11, v12, (uint64_t *)&v117, 1uLL);
      }
    }
    return I1SameShape & 0xFFFFFFFFFFFFFFFBLL;
  }
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8);
  if (!v4)
    goto LABEL_50;
  *(_DWORD *)&v119[8] = 1;
  *(_QWORD *)v119 = 0;
  *(_QWORD *)&v117 = v119;
  v5 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v117, v4);
  v6 = *(_DWORD *)&v119[8];
  if (v5)
  {
    if (*(_DWORD *)&v119[8] < 0x41u)
    {
      v7 = *(_QWORD *)v119 == 0;
      goto LABEL_17;
    }
    if (v6 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v119) > 0x40)
    {
      if (*(_QWORD *)v119)
        MEMORY[0x20BD002D4](*(_QWORD *)v119, 0x1000C8000313F17);
      goto LABEL_50;
    }
    v7 = **(_QWORD **)v119 == 0;
  }
  else
  {
    v7 = 0;
    if (*(_DWORD *)&v119[8] < 0x41u)
      goto LABEL_17;
  }
  if (!*(_QWORD *)v119)
  {
LABEL_17:
    if (!v7)
      goto LABEL_50;
    goto LABEL_18;
  }
  MEMORY[0x20BD002D4](*(_QWORD *)v119, 0x1000C8000313F17);
  if (!v7)
    goto LABEL_50;
LABEL_18:
  *(_QWORD *)v119 = *(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v119);
  if (!DefiningOp)
    goto LABEL_20;
  v14 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
    goto LABEL_20;
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(void **)(*(_QWORD *)v19 + 136);
  if (v20 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  else
    v21 = 0;
  *(_QWORD *)v119 = v21;
  if (!v21)
  {
    if (v20 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
      v19 = 0;
    *(_QWORD *)v119 = v19;
    if (!v19)
      goto LABEL_20;
    *(_QWORD *)&v117 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v119);
    if (mlir::IntegerType::getWidth((mlir::IntegerType *)&v117) != 1)
      goto LABEL_20;
LABEL_42:
    *(_QWORD *)v119 = *(_QWORD *)(*a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64);
    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v119) == 1)
      return *(_QWORD *)(*(_QWORD *)(v14 + 72) + 24) | 4;
    goto LABEL_20;
  }
  if (mlir::IntegerType::getWidth((mlir::IntegerType *)v119) == 1)
    goto LABEL_42;
LABEL_20:
  *(_QWORD *)v119 = *(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24);
  v15 = mlir::Value::getDefiningOp((mlir::Value *)v119);
  if (!v15)
    goto LABEL_50;
  v14 = v15;
  if (*(_UNKNOWN **)(*(_QWORD *)(v15 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
    goto LABEL_50;
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(void **)(*(_QWORD *)v16 + 136);
  if (v17 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  else
    v18 = 0;
  *(_QWORD *)v119 = v18;
  if (v18)
  {
    if (mlir::IntegerType::getWidth((mlir::IntegerType *)v119) != 1)
      goto LABEL_50;
  }
  else
  {
    if (v17 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
      v16 = 0;
    *(_QWORD *)v119 = v16;
    if (!v16)
      goto LABEL_50;
    *(_QWORD *)&v117 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v119);
    if (mlir::IntegerType::getWidth((mlir::IntegerType *)&v117) != 1)
      goto LABEL_50;
  }
  *(_QWORD *)v119 = *(_QWORD *)(*a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64);
  if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v119) == 1)
    return *(_QWORD *)(*(_QWORD *)(v14 + 72) + 24) | 4;
LABEL_50:
  v23 = *(_QWORD *)(a2 + 48);
  v24 = *(_QWORD **)v23;
  if (!*(_QWORD *)v23)
  {
    v87 = 0;
    v88 = 0;
    return 0;
  }
  if (!*(_QWORD *)(v23 + 8))
  {
    *(int64x2_t *)&v119[8] = vdupq_n_s64(4uLL);
    *(_OWORD *)&v119[24] = xmmword_207AB5570;
    v120 = vdupq_n_s64(5uLL);
    v121 = xmmword_207AB5580;
    v122 = vdupq_n_s64(8uLL);
    v123 = xmmword_207AB5590;
    v124 = vdupq_n_s64(9uLL);
    v126[0] = 0;
    v126[1] = 0;
    v125 = 7;
    v127 = vdupq_n_s64(1uLL);
    *(_QWORD *)&v117 = *(_QWORD *)(*a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64);
    result = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v117);
    v26 = (int64x2_t *)v119;
    switch(result)
    {
      case 0:
        v26 = (int64x2_t *)v126;
        goto LABEL_94;
      case 1:
        v26 = &v127;
        goto LABEL_94;
      case 2:
        goto LABEL_94;
      case 3:
        v26 = (int64x2_t *)&v119[32];
        goto LABEL_94;
      case 4:
        v26 = (int64x2_t *)&v119[16];
        goto LABEL_94;
      case 5:
        v26 = (int64x2_t *)&v120.u64[1];
        goto LABEL_94;
      case 6:
        v26 = (int64x2_t *)((char *)&v121 + 8);
        goto LABEL_94;
      case 7:
        v26 = (int64x2_t *)((char *)&v123 + 8);
        goto LABEL_94;
      case 8:
        v26 = (int64x2_t *)&v122.u64[1];
        goto LABEL_94;
      case 9:
        v26 = (int64x2_t *)&v124.u64[1];
LABEL_94:
        v43 = v26->i64[1];
        v44 = *a1;
        v45 = **(_QWORD **)(*(_QWORD *)(*a1 + 48) + 96);
        v46 = mlir::Attribute::getContext((mlir::Attribute *)(*a1 + 24));
        v47 = mlir::IntegerType::get(v46, 0x40u, 0);
        v48 = mlir::IntegerAttr::get(v47, v43);
        mlir::Operation::setAttr(v44, v45, v48);
        v49 = *(uint64_t **)(*a1 + 72);
        v50 = (uint64_t *)v49[3];
        v51 = (uint64_t *)v49[7];
        v52 = (uint64_t *)v49[1];
        if (v52)
        {
          *v52 = *v49;
          if (*v49)
            *(_QWORD *)(*v49 + 8) = v49[1];
        }
        v49[3] = (uint64_t)v51;
        v49[1] = (uint64_t)v51;
        v53 = *v51;
        *v49 = *v51;
        if (v53)
          *(_QWORD *)(v53 + 8) = v49;
        *v51 = (uint64_t)v49;
        v54 = *(_QWORD **)(*a1 + 72);
        v55 = v54 + 4;
        v56 = (_QWORD *)v54[5];
        if (v56)
        {
          *v56 = *v55;
          if (*v55)
            *(_QWORD *)(*v55 + 8) = v54[5];
        }
        v54[7] = v50;
        v54[5] = v50;
        v57 = *v50;
        v54[4] = *v50;
        if (v57)
          *(_QWORD *)(v57 + 8) = v55;
        *v50 = (uint64_t)v55;
        if (*(_DWORD *)(*a1 + 36))
          v58 = *a1 - 16;
        else
          v58 = 0;
        result = mlir::detail::OpResultImpl::getNextResultAtOffset(v58, 0) | 4;
        break;
      default:
        return result;
    }
    return result;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v24 + 8))
  {
    v87 = 0;
    v88 = 0;
    return 0;
  }
  v25 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v24 + 8);
  v87 = v24;
  v88 = v25;
  if (!v24)
    return 0;
  v27 = *(uint64_t **)(a2 + 48);
  canMapOperands = (_QWORD *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v87);
  I1SameShape = getI1SameShape(canMapOperands);
  *(_QWORD *)v119 = *(_QWORD *)(*a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64);
  Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v119);
  if (!I1SameShape)
    return I1SameShape & 0xFFFFFFFFFFFFFFFBLL;
  v30 = *v27;
  if (!*v27)
    goto LABEL_109;
  v31 = v27[1];
  if (!v31)
    goto LABEL_109;
  v32 = Int;
  if (*(_UNKNOWN **)(*(_QWORD *)v30 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    && *(_UNKNOWN **)(*(_QWORD *)v31 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    *(_QWORD *)&v117 = *v27;
    v102 = v31;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v117);
    if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v102))
    {
      mlir::IntegerAttr::getValue(&v117, (llvm::APInt *)&v115);
      mlir::IntegerAttr::getValue(&v102, (llvm::APInt *)&v113);
      mlir::arith::applyCmpPredicate(v32);
      *(_DWORD *)&v119[8] = 1;
      *(_QWORD *)v119 = v65;
      v119[16] = 1;
      if (v114 >= 0x41 && v113)
        MEMORY[0x20BD002D4](v113, 0x1000C8000313F17);
      if (v116 >= 0x41 && v115)
        MEMORY[0x20BD002D4](v115, 0x1000C8000313F17);
      v40 = mlir::IntegerAttr::get(I1SameShape, (llvm::APInt *)v119);
      goto LABEL_128;
    }
    goto LABEL_109;
  }
  if (mlir::DenseElementsAttr::classof(*v27))
    v33 = v30;
  else
    v33 = 0;
  *(_QWORD *)v119 = v33;
  if (v33 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v119))
  {
    v34 = v27[1];
    v35 = mlir::DenseElementsAttr::classof(v34) ? v34 : 0;
    *(_QWORD *)v119 = v35;
    if (v35)
    {
      if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v119))
      {
        v36 = v27[1];
        v102 = *v27;
        v99 = v36;
        v37 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v102);
        if (v37 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v99))
        {
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v102, (uint64_t)v119);
          v117 = *(_OWORD *)v119;
          v118 = *(_OWORD *)&v119[16];
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v117, (llvm::APInt *)&v111);
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v99, (uint64_t)v119);
          v117 = *(_OWORD *)v119;
          v118 = *(_OWORD *)&v119[16];
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v117, (llvm::APInt *)&v109);
          mlir::arith::applyCmpPredicate(v32);
          *(_DWORD *)&v119[8] = 1;
          *(_QWORD *)v119 = v38;
          v119[16] = 1;
          if (v110 >= 0x41 && v109)
            MEMORY[0x20BD002D4](v109, 0x1000C8000313F17);
          if (v112 >= 0x41 && v111)
            MEMORY[0x20BD002D4](v111, 0x1000C8000313F17);
          v39 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)I1SameShape + 8);
          v40 = mlir::DenseElementsAttr::get(I1SameShape, v39, (llvm::APInt *)v119, 1);
LABEL_128:
          I1SameShape = v40;
          if (v119[16] && *(_DWORD *)&v119[8] >= 0x41u)
          {
            if (*(_QWORD *)v119)
              MEMORY[0x20BD002D4](*(_QWORD *)v119, 0x1000C8000313F17);
          }
          return I1SameShape & 0xFFFFFFFFFFFFFFFBLL;
        }
        goto LABEL_109;
      }
    }
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v27 + 8)
    || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v27[1] + 8))
  {
LABEL_109:
    I1SameShape = 0;
    return I1SameShape & 0xFFFFFFFFFFFFFFFBLL;
  }
  v41 = (_QWORD *)*v27;
  if (*v27)
    v42 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v41 + 8);
  else
    v42 = 0;
  v107 = v41;
  v108 = v42;
  v60 = (_QWORD *)v27[1];
  if (v60)
    v61 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v60 + 8);
  else
    v61 = 0;
  v106[0] = v60;
  v106[1] = v61;
  Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v107);
  if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v106))
    return 0;
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v107, (uint64_t)&v117);
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v106, (uint64_t)&v102);
  v63 = 0;
  v64 = v105;
  if (!BYTE8(v118) || !v105)
    goto LABEL_188;
  LOWORD(v99) = v117;
  if ((_BYTE)v117)
    v100 = *((_QWORD *)&v117 + 1);
  else
    (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)&v117 + 1) + 16))(&v100);
  v101 = v118;
  v96 = v102;
  if ((_BYTE)v102)
    v97 = v103;
  else
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v103 + 16))(&v97);
  v98 = v104;
  *(_QWORD *)v119 = &v119[16];
  *(_QWORD *)&v119[8] = 0x400000000;
  NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v107, v108);
  llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)v119, NumElements);
  v67 = mlir::ElementsAttr::getNumElements((uint64_t)v107, v108);
  if (!v67)
  {
LABEL_170:
    v79 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)I1SameShape + 8);
    v63 = mlir::DenseElementsAttr::get(I1SameShape, v79, *(llvm::APInt **)v119, *(unsigned int *)&v119[8]);
    goto LABEL_172;
  }
  v68 = v67;
  v69 = v101;
  while (1)
  {
    if (BYTE1(v99))
      v70 = 0;
    else
      v70 = v69;
    if ((_BYTE)v99)
    {
      v71 = v100 + 16 * v70;
      v92 = *(_DWORD *)(v71 + 8);
      if (v92 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v91, (const void **)v71);
      else
        v91 = *(const void **)v71;
    }
    else
    {
      (*(void (**)(const void **__return_ptr))(*(_QWORD *)v100 + 24))(&v91);
    }
    if (HIBYTE(v96))
      v72 = 0;
    else
      v72 = v98;
    if (!(_BYTE)v96)
    {
      (*(void (**)(const void **__return_ptr))(*(_QWORD *)v97 + 24))(&v89);
LABEL_155:
      v74 = v90;
      goto LABEL_156;
    }
    v73 = v97 + 16 * v72;
    v74 = *(_DWORD *)(v73 + 8);
    v90 = v74;
    if (v74 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v89, (const void **)v73);
      goto LABEL_155;
    }
    v89 = *(const void **)v73;
LABEL_156:
    mlir::arith::applyCmpPredicate(v32);
    v94 = 1;
    v93 = v75;
    v95 = 1;
    if (v74 >= 0x41 && v89)
      MEMORY[0x20BD002D4](v89, 0x1000C8000313F17);
    if (v92 >= 0x41 && v91)
      MEMORY[0x20BD002D4](v91, 0x1000C8000313F17);
    if (!v95)
      break;
    Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)v119, (unint64_t)&v93, 1);
    v77 = (llvm::APInt *)(*(_QWORD *)v119 + 16 * *(unsigned int *)&v119[8]);
    v78 = *((_DWORD *)Address + 2);
    *((_DWORD *)v77 + 2) = v78;
    if (v78 > 0x40)
      llvm::APInt::initSlowCase(v77, (const void **)Address);
    else
      *(_QWORD *)v77 = *(_QWORD *)Address;
    ++*(_DWORD *)&v119[8];
    if (v95 && v94 >= 0x41 && v93)
      MEMORY[0x20BD002D4](v93, 0x1000C8000313F17);
    v69 = ++v101;
    ++v98;
    if (!--v68)
      goto LABEL_170;
  }
  v63 = 0;
LABEL_172:
  v80 = *(char **)v119;
  if (*(_DWORD *)&v119[8])
  {
    v81 = 16 * *(unsigned int *)&v119[8];
    do
    {
      if (*(_DWORD *)&v80[v81 - 8] >= 0x41u)
      {
        v82 = *(_QWORD *)&v80[v81 - 16];
        if (v82)
          MEMORY[0x20BD002D4](v82, 0x1000C8000313F17);
      }
      v81 -= 16;
    }
    while (v81);
    v80 = *(char **)v119;
  }
  if (v80 != &v119[16])
    free(v80);
  if (!(_BYTE)v96)
  {
    v83 = v97;
    v97 = 0;
    if (v83)
      (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  }
  if (!(_BYTE)v99)
  {
    v84 = v100;
    v100 = 0;
    if (v84)
      (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
  }
  v64 = v105;
LABEL_188:
  if (v64)
  {
    if (!(_BYTE)v102)
    {
      v85 = v103;
      v103 = 0;
      if (v85)
        (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
    }
  }
  if (BYTE8(v118))
  {
    if (!(_BYTE)v117)
    {
      v86 = *((_QWORD *)&v117 + 1);
      *((_QWORD *)&v117 + 1) = 0;
      if (v86)
        (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
    }
  }
  return v63 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::CmpIOp::getPredicate(mlir::arith::CmpIOp *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64);
  return mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v2);
}

void mlir::arith::CmpIOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  const char *v73;
  unint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v72, 3);
  v73 = "arith.cmpi";
  v74 = 10;
  mlir::Pattern::Pattern(v4 + 8, (uint64_t)"arith.cmpi", 10, v72, a2, &v73, 1uLL);
  *(_QWORD *)v4 = &off_24C02B288;
  if (*(_QWORD *)(v4 + 72))
  {
    v5 = *(unsigned int *)(v4 + 88);
    if (v5 <= *(_DWORD *)(v4 + 92))
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 80, (void *)(v4 + 96), v5, 16);
    *(_DWORD *)(v4 + 88) = *(_DWORD *)(v4 + 88);
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v73 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::CmpIExtSI]";
  v74 = 82;
  v9 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (v74 >= v9)
    v10 = v9;
  else
    v10 = v74;
  v11 = &v73[v10];
  v12 = v74 - v10;
  if (v74 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v74 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *(_QWORD *)(v4 + 64) = v14;
  *(_QWORD *)(v4 + 72) = v15;
  v5 = *(unsigned int *)(v4 + 88);
  if (v5 > *(_DWORD *)(v4 + 92))
    goto LABEL_14;
LABEL_3:
  *(_DWORD *)(v4 + 88) = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_78;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_79;
    v21 = (char *)operator new(8 * v20);
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v4;
    v8 = (uint64_t)(v22 + 1);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (uint64_t *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v22
        && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 = (uint64_t *)((char *)v22 - v27);
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *--v22 = v34;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v72, 3);
  v73 = "arith.cmpi";
  v74 = 10;
  mlir::Pattern::Pattern(v38 + 8, (uint64_t)"arith.cmpi", 10, v72, a2, &v73, 1uLL);
  *(_QWORD *)v38 = &off_24C02B2C8;
  if (*(_QWORD *)(v38 + 72))
  {
    v39 = *(unsigned int *)(v38 + 88);
    if (v39 <= *(_DWORD *)(v38 + 92))
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v38 + 80, (void *)(v38 + 96), v39, 16);
    *(_DWORD *)(v38 + 88) = *(_DWORD *)(v38 + 88);
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  v73 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::CmpIExtUI]";
  v74 = 82;
  v43 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (v74 >= v43)
    v44 = v43;
  else
    v44 = v74;
  v45 = &v73[v44];
  v46 = v74 - v44;
  if (v74 - v44 >= 0x12)
    v47 = 18;
  else
    v47 = v74 - v44;
  v48 = &v45[v47];
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *(_QWORD *)(v38 + 64) = v48;
  *(_QWORD *)(v38 + 72) = v49;
  v39 = *(unsigned int *)(v38 + 88);
  if (v39 > *(_DWORD *)(v38 + 92))
    goto LABEL_52;
LABEL_41:
  *(_DWORD *)(v38 + 88) = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
LABEL_78:
    abort();
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (!v54)
  {
    v55 = 0;
    v56 = (uint64_t *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
    goto LABEL_74;
  }
  if (v54 >> 61)
LABEL_79:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v55 = (char *)operator new(8 * v54);
  v56 = (uint64_t *)&v55[8 * v51];
  v57 = &v55[8 * v54];
  *v56 = v38;
  v42 = (uint64_t)(v56 + 1);
  v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v56
      && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    v60 = (v59 >> 3) + 1;
    v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    v62 = &v41[-v61];
    v56 = (uint64_t *)((char *)v56 - v61);
    v63 = &v55[8 * v51 - 16];
    v64 = v41 - 16;
    v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v67 = *((_OWORD *)v64 - 1);
      v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        v68 = *((_QWORD *)v41 - 1);
        v41 -= 8;
        *(_QWORD *)v41 = 0;
        *--v56 = v68;
      }
      while (v41 != v50);
    }
    v41 = (char *)a1[1];
    v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      v71 = *((_QWORD *)v69 - 1);
      v69 -= 8;
      v70 = v71;
      *(_QWORD *)v69 = 0;
      if (v71)
        (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
}

void mlir::arith::applyCmpPredicate(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3)
{
  llvm::detail::DoubleAPFloat *v5;
  void *v6;
  void *v7;
  const llvm::detail::DoubleAPFloat *v8;

  v5 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  v6 = *(void **)(a2 + 8);
  v7 = llvm::APFloatBase::PPCDoubleDouble(a1);
  v8 = (const llvm::detail::DoubleAPFloat *)(a3 + 8);
  if (v7 == v6)
    llvm::detail::DoubleAPFloat::compare(v5, v8);
  else
    llvm::detail::IEEEFloat::compare(v5, v8);
  __asm { BR              X10 }
}

BOOL sub_20716D658@<W0>(int a1@<W8>)
{
  return a1 == 1;
}

BOOL sub_20716D670@<W0>(int a1@<W8>)
{
  return a1 == 2;
}

BOOL sub_20716D688@<W0>(int a1@<W8>)
{
  return (a1 - 1) < 2;
}

BOOL sub_20716D6A4@<W0>(int a1@<W8>)
{
  return a1 == 0;
}

BOOL sub_20716D6BC@<W0>(unsigned int a1@<W8>)
{
  return a1 < 2;
}

BOOL sub_20716D6D4@<W0>(int a1@<W8>)
{
  return (a1 & 0xFFFFFFFD) != 1;
}

BOOL sub_20716D6F0@<W0>(int a1@<W8>)
{
  return a1 != 3;
}

BOOL sub_20716D708@<W0>(int a1@<W8>)
{
  return (a1 & 0xFFFFFFFD) == 1;
}

BOOL sub_20716D724@<W0>(int a1@<W8>)
{
  return (a1 & 0xFFFFFFFE) == 2;
}

BOOL sub_20716D740@<W0>(int a1@<W8>)
{
  return a1 == 1 || (a1 & 0xFFFFFFFE) == 2;
}

BOOL sub_20716D760@<W0>(int a1@<W8>)
{
  return a1 == 3 || a1 == 0;
}

uint64_t sub_20716D77C@<X0>(unsigned int a1@<W8>)
{
  BOOL v1;
  unsigned int v2;

  v1 = a1 >= 4;
  v2 = (0xBu >> (a1 & 0xF)) & 1;
  if (v1)
    return 0;
  else
    return v2;
}

BOOL sub_20716D7A4@<W0>(int a1@<W8>)
{
  return a1 != 1;
}

BOOL sub_20716D7BC@<W0>(int a1@<W8>)
{
  return a1 == 3;
}

uint64_t sub_20716D7D4()
{
  return 1;
}

unint64_t mlir::arith::CmpFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::APFloatBase *Value;
  void *v8;
  void *v9;
  uint64_t *v10;
  int v11;
  llvm::APFloatBase *v12;
  void *v13;
  void *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  unint64_t result;
  llvm::APFloatBase *Int;
  llvm::APFloatBase *v20;
  mlir::MLIRContext *v21;
  void *v22;
  void *v23;
  mlir::BoolAttr *Context;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[8];
  _QWORD v28[3];
  uint64_t v29;
  void *v30;
  uint64_t *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)(a2 + 48);
  v4 = *v3;
  if (*v3 && *(_UNKNOWN **)(*(_QWORD *)v4 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
    v4 = 0;
  v26 = v4;
  v5 = v3[1];
  if (!v5)
  {
    v6 = 0;
    v25 = 0;
    if (!v4)
      goto LABEL_16;
LABEL_11:
    Value = (llvm::APFloatBase *)mlir::FloatAttr::getValue((mlir::FloatAttr *)&v26, (uint64_t)&v29);
    v8 = v30;
    v9 = llvm::APFloatBase::PPCDoubleDouble(Value);
    v10 = v31;
    if (v9 != v8)
      v10 = &v29;
    v11 = *((_BYTE *)v10 + 28) & 7;
    if (v9 == v8)
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v30);
      if (v11 != 1)
        goto LABEL_16;
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v30);
      if (v11 != 1)
        goto LABEL_16;
    }
    v6 = v26;
    v25 = v26;
    goto LABEL_16;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
    v6 = v5;
  else
    v6 = 0;
  v25 = v6;
  if (v4)
    goto LABEL_11;
LABEL_16:
  if (v6)
  {
    v12 = (llvm::APFloatBase *)mlir::FloatAttr::getValue((mlir::FloatAttr *)&v25, (uint64_t)&v29);
    v13 = v30;
    v14 = llvm::APFloatBase::PPCDoubleDouble(v12);
    v15 = v31;
    if (v14 != v13)
      v15 = &v29;
    v16 = *((_BYTE *)v15 + 28) & 7;
    if (v14 == v13)
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v30);
      if (v16 == 1)
      {
LABEL_21:
        v17 = v25;
        v26 = v25;
        result = 0;
        if (!v25)
          return result;
LABEL_29:
        if (!v17)
          return result;
        v29 = *(_QWORD *)(*(_QWORD *)a1
                        + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1)
                        + 64);
        Int = (llvm::APFloatBase *)mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v29);
        mlir::FloatAttr::getValue((mlir::FloatAttr *)&v26, (uint64_t)&v29);
        mlir::FloatAttr::getValue((mlir::FloatAttr *)&v25, (uint64_t)v27);
        mlir::arith::applyCmpPredicate(Int, (uint64_t)&v29, (uint64_t)v27);
        v21 = v20;
        v22 = (void *)v28[0];
        v23 = llvm::APFloatBase::PPCDoubleDouble(v20);
        if (v23 == v22)
        {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v28);
          if (v23 != v30)
            goto LABEL_32;
        }
        else
        {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v28);
          if (v23 != v30)
          {
LABEL_32:
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v30);
LABEL_35:
            Context = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
            return mlir::BoolAttr::get(Context, v21) & 0xFFFFFFFFFFFFFFFBLL;
          }
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v30);
        goto LABEL_35;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v30);
      if (v16 == 1)
        goto LABEL_21;
    }
    v17 = v25;
    result = 0;
    if (!v26)
      return result;
    goto LABEL_29;
  }
  v17 = 0;
  result = 0;
  if (v26)
    goto LABEL_29;
  return result;
}

void mlir::arith::CmpFOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::RewritePatternSet::addImpl<CmpFIntToFPConst,mlir::MLIRContext *&>(a1, 0, 0, &v2);
}

void mlir::arith::SelectOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t *v91;
  char *v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  uint64_t *v126;
  char *v127;
  char *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  char *v160;
  uint64_t *v161;
  char *v162;
  char *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  char *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  char *v195;
  uint64_t *v196;
  char *v197;
  char *v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  char *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  char *v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  char *v230;
  uint64_t *v231;
  char *v232;
  char *v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  char *v238;
  char *v239;
  uint64_t v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  __int16 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  uint64_t v253;

  v253 = *MEMORY[0x24BDAC8D0];
  v247 = a2;
  v4 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v248, 2);
  *(_QWORD *)&v249 = "arith.select";
  *((_QWORD *)&v249 + 1) = 12;
  mlir::Pattern::Pattern(v4 + 8, (uint64_t)"arith.select", 12, v248, a2, &v249, 1uLL);
  *(_QWORD *)v4 = &off_24BFFE548;
  if (*(_QWORD *)(v4 + 72))
  {
    v5 = *(unsigned int *)(v4 + 88);
    if (v5 <= *(_DWORD *)(v4 + 92))
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 80, (void *)(v4 + 96), v5, 16);
    *(_DWORD *)(v4 + 88) = *(_DWORD *)(v4 + 88);
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  *(_QWORD *)&v249 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::RedundantSelectFalse]";
  *((_QWORD *)&v249 + 1) = 93;
  v9 = llvm::StringRef::find((uint64_t *)&v249, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((_QWORD *)&v249 + 1) >= v9)
    v10 = v9;
  else
    v10 = *((_QWORD *)&v249 + 1);
  v11 = v249 + v10;
  v12 = *((_QWORD *)&v249 + 1) - v10;
  if (*((_QWORD *)&v249 + 1) - v10 >= 0x12)
    v13 = 18;
  else
    v13 = *((_QWORD *)&v249 + 1) - v10;
  v14 = v11 + v13;
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *(_QWORD *)(v4 + 64) = v14;
  *(_QWORD *)(v4 + 72) = v15;
  v5 = *(unsigned int *)(v4 + 88);
  if (v5 > *(_DWORD *)(v4 + 92))
    goto LABEL_14;
LABEL_3:
  *(_DWORD *)(v4 + 88) = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_268;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_269;
    v21 = (char *)operator new(8 * v20);
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v4;
    v8 = (uint64_t)(v22 + 1);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (uint64_t *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v22
        && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_272;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 = (uint64_t *)((char *)v22 - v27);
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_272:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *--v22 = v34;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v248, 2);
  *(_QWORD *)&v249 = "arith.select";
  *((_QWORD *)&v249 + 1) = 12;
  mlir::Pattern::Pattern(v38 + 8, (uint64_t)"arith.select", 12, v248, v247, &v249, 1uLL);
  *(_QWORD *)v38 = &off_24BFFE508;
  if (*(_QWORD *)(v38 + 72))
  {
    v39 = *(unsigned int *)(v38 + 88);
    if (v39 <= *(_DWORD *)(v38 + 92))
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v38 + 80, (void *)(v38 + 96), v39, 16);
    *(_DWORD *)(v38 + 88) = *(_DWORD *)(v38 + 88);
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  *(_QWORD *)&v249 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::RedundantSelectTrue]";
  *((_QWORD *)&v249 + 1) = 92;
  v43 = llvm::StringRef::find((uint64_t *)&v249, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((_QWORD *)&v249 + 1) >= v43)
    v44 = v43;
  else
    v44 = *((_QWORD *)&v249 + 1);
  v45 = v249 + v44;
  v46 = *((_QWORD *)&v249 + 1) - v44;
  if (*((_QWORD *)&v249 + 1) - v44 >= 0x12)
    v47 = 18;
  else
    v47 = *((_QWORD *)&v249 + 1) - v44;
  v48 = v45 + v47;
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *(_QWORD *)(v38 + 64) = v48;
  *(_QWORD *)(v38 + 72) = v49;
  v39 = *(unsigned int *)(v38 + 88);
  if (v39 > *(_DWORD *)(v38 + 92))
    goto LABEL_52;
LABEL_41:
  *(_DWORD *)(v38 + 88) = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
    goto LABEL_268;
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (v54)
  {
    if (v54 >> 61)
      goto LABEL_269;
    v55 = (char *)operator new(8 * v54);
    v56 = (uint64_t *)&v55[8 * v51];
    v57 = &v55[8 * v54];
    *v56 = v38;
    v42 = (uint64_t)(v56 + 1);
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
  }
  else
  {
    v55 = 0;
    v56 = (uint64_t *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
    {
LABEL_62:
      v59 = (unint64_t)(v58 - 8);
      if (v59 < 0x78
        || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v56
        && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
      {
        goto LABEL_273;
      }
      v60 = (v59 >> 3) + 1;
      v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
      v62 = &v41[-v61];
      v56 = (uint64_t *)((char *)v56 - v61);
      v63 = &v55[8 * v51 - 16];
      v64 = v41 - 16;
      v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v67 = *((_OWORD *)v64 - 1);
        v66 = *(_OWORD *)v64;
        *((_OWORD *)v64 - 1) = 0uLL;
        *(_OWORD *)v64 = 0uLL;
        *((_OWORD *)v63 - 1) = v67;
        *(_OWORD *)v63 = v66;
        v63 -= 32;
        v64 -= 32;
        v65 -= 4;
      }
      while (v65);
      v41 = v62;
      if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_273:
        do
        {
          v68 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *(_QWORD *)v41 = 0;
          *--v56 = v68;
        }
        while (v41 != v50);
      }
      v41 = (char *)a1[1];
      v69 = (char *)a1[2];
      a1[1] = v56;
      a1[2] = v42;
      a1[3] = v57;
      while (v69 != v41)
      {
        v71 = *((_QWORD *)v69 - 1);
        v69 -= 8;
        v70 = v71;
        *(_QWORD *)v69 = 0;
        if (v71)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
      }
      goto LABEL_75;
    }
  }
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
  mlir::RewritePatternSet::addImpl<SelectI1Simplify,mlir::MLIRContext *&>(a1, 0, 0, &v247);
  v72 = operator new();
  v73 = v247;
  mlir::PatternBenefit::PatternBenefit(&v248, 2);
  v249 = xmmword_24C060B60;
  v250 = *(_OWORD *)&off_24C060B70;
  mlir::Pattern::Pattern(v72 + 8, (uint64_t)"arith.select", 12, v248, v73, &v249, 2uLL);
  *(_QWORD *)v72 = &off_24BFFE408;
  if (*(_QWORD *)(v72 + 72))
  {
    v74 = *(unsigned int *)(v72 + 88);
    if (v74 <= *(_DWORD *)(v72 + 92))
      goto LABEL_79;
LABEL_90:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v72 + 80, (void *)(v72 + 96), v74, 16);
    *(_DWORD *)(v72 + 88) = *(_DWORD *)(v72 + 88);
    v76 = (char *)a1[2];
    v75 = a1[3];
    if ((unint64_t)v76 < v75)
      goto LABEL_80;
    goto LABEL_91;
  }
  *(_QWORD *)&v249 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SelectAndCond]";
  *((_QWORD *)&v249 + 1) = 86;
  v78 = llvm::StringRef::find((uint64_t *)&v249, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((_QWORD *)&v249 + 1) >= v78)
    v79 = v78;
  else
    v79 = *((_QWORD *)&v249 + 1);
  v80 = v249 + v79;
  v81 = *((_QWORD *)&v249 + 1) - v79;
  if (*((_QWORD *)&v249 + 1) - v79 >= 0x12)
    v82 = 18;
  else
    v82 = *((_QWORD *)&v249 + 1) - v79;
  v83 = v80 + v82;
  v84 = v81 - v82;
  if (v84 >= v84 - 1)
    --v84;
  *(_QWORD *)(v72 + 64) = v83;
  *(_QWORD *)(v72 + 72) = v84;
  v74 = *(unsigned int *)(v72 + 88);
  if (v74 > *(_DWORD *)(v72 + 92))
    goto LABEL_90;
LABEL_79:
  *(_DWORD *)(v72 + 88) = v74;
  v76 = (char *)a1[2];
  v75 = a1[3];
  if ((unint64_t)v76 < v75)
  {
LABEL_80:
    *(_QWORD *)v76 = v72;
    v77 = (uint64_t)(v76 + 8);
    goto LABEL_115;
  }
LABEL_91:
  v85 = (char *)a1[1];
  v86 = (v76 - v85) >> 3;
  v87 = v86 + 1;
  if ((unint64_t)(v86 + 1) >> 61)
    goto LABEL_268;
  v88 = v75 - (_QWORD)v85;
  if (v88 >> 2 > v87)
    v87 = v88 >> 2;
  if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
    v89 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v89 = v87;
  if (v89)
  {
    if (v89 >> 61)
      goto LABEL_269;
    v90 = (char *)operator new(8 * v89);
    v91 = (uint64_t *)&v90[8 * v86];
    v92 = &v90[8 * v89];
    *v91 = v72;
    v77 = (uint64_t)(v91 + 1);
    v93 = (char *)(v76 - v85);
    if (v76 != v85)
      goto LABEL_100;
  }
  else
  {
    v90 = 0;
    v91 = (uint64_t *)(8 * v86);
    v92 = 0;
    *(_QWORD *)(8 * v86) = v72;
    v77 = 8 * v86 + 8;
    v93 = (char *)(v76 - v85);
    if (v76 != v85)
    {
LABEL_100:
      v94 = (unint64_t)(v93 - 8);
      if (v94 < 0x78
        || &v76[-(v94 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v91
        && &v90[v76 - v85 - (v94 & 0xFFFFFFFFFFFFFFF8) - 8] < v76)
      {
        goto LABEL_274;
      }
      v95 = (v94 >> 3) + 1;
      v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
      v97 = &v76[-v96];
      v91 = (uint64_t *)((char *)v91 - v96);
      v98 = &v90[8 * v86 - 16];
      v99 = v76 - 16;
      v100 = v95 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v102 = *((_OWORD *)v99 - 1);
        v101 = *(_OWORD *)v99;
        *((_OWORD *)v99 - 1) = 0uLL;
        *(_OWORD *)v99 = 0uLL;
        *((_OWORD *)v98 - 1) = v102;
        *(_OWORD *)v98 = v101;
        v98 -= 32;
        v99 -= 32;
        v100 -= 4;
      }
      while (v100);
      v76 = v97;
      if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_274:
        do
        {
          v103 = *((_QWORD *)v76 - 1);
          v76 -= 8;
          *(_QWORD *)v76 = 0;
          *--v91 = v103;
        }
        while (v76 != v85);
      }
      v76 = (char *)a1[1];
      v104 = (char *)a1[2];
      a1[1] = v91;
      a1[2] = v77;
      a1[3] = v92;
      while (v104 != v76)
      {
        v106 = *((_QWORD *)v104 - 1);
        v104 -= 8;
        v105 = v106;
        *(_QWORD *)v104 = 0;
        if (v106)
          (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
      }
      goto LABEL_113;
    }
  }
  a1[1] = v91;
  a1[2] = v77;
  a1[3] = v92;
LABEL_113:
  if (v76)
    operator delete(v76);
LABEL_115:
  a1[2] = v77;
  v107 = operator new();
  v108 = v247;
  mlir::PatternBenefit::PatternBenefit(&v248, 2);
  v249 = xmmword_24C060B80;
  v250 = *(_OWORD *)&off_24C060B90;
  v251 = xmmword_24C060BA0;
  v252 = *(_OWORD *)&off_24C060BB0;
  mlir::Pattern::Pattern(v107 + 8, (uint64_t)"arith.select", 12, v248, v108, &v249, 4uLL);
  *(_QWORD *)v107 = &off_24BFFE4C8;
  if (*(_QWORD *)(v107 + 72))
  {
    v109 = *(unsigned int *)(v107 + 88);
    if (v109 <= *(_DWORD *)(v107 + 92))
      goto LABEL_117;
LABEL_128:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v107 + 80, (void *)(v107 + 96), v109, 16);
    *(_DWORD *)(v107 + 88) = *(_DWORD *)(v107 + 88);
    v111 = (char *)a1[2];
    v110 = a1[3];
    if ((unint64_t)v111 < v110)
      goto LABEL_118;
    goto LABEL_129;
  }
  *(_QWORD *)&v249 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SelectAndNotCond]";
  *((_QWORD *)&v249 + 1) = 89;
  v113 = llvm::StringRef::find((uint64_t *)&v249, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((_QWORD *)&v249 + 1) >= v113)
    v114 = v113;
  else
    v114 = *((_QWORD *)&v249 + 1);
  v115 = v249 + v114;
  v116 = *((_QWORD *)&v249 + 1) - v114;
  if (*((_QWORD *)&v249 + 1) - v114 >= 0x12)
    v117 = 18;
  else
    v117 = *((_QWORD *)&v249 + 1) - v114;
  v118 = v115 + v117;
  v119 = v116 - v117;
  if (v119 >= v119 - 1)
    --v119;
  *(_QWORD *)(v107 + 64) = v118;
  *(_QWORD *)(v107 + 72) = v119;
  v109 = *(unsigned int *)(v107 + 88);
  if (v109 > *(_DWORD *)(v107 + 92))
    goto LABEL_128;
LABEL_117:
  *(_DWORD *)(v107 + 88) = v109;
  v111 = (char *)a1[2];
  v110 = a1[3];
  if ((unint64_t)v111 < v110)
  {
LABEL_118:
    *(_QWORD *)v111 = v107;
    v112 = (uint64_t)(v111 + 8);
    goto LABEL_153;
  }
LABEL_129:
  v120 = (char *)a1[1];
  v121 = (v111 - v120) >> 3;
  v122 = v121 + 1;
  if ((unint64_t)(v121 + 1) >> 61)
    goto LABEL_268;
  v123 = v110 - (_QWORD)v120;
  if (v123 >> 2 > v122)
    v122 = v123 >> 2;
  if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8)
    v124 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v124 = v122;
  if (v124)
  {
    if (v124 >> 61)
      goto LABEL_269;
    v125 = (char *)operator new(8 * v124);
    v126 = (uint64_t *)&v125[8 * v121];
    v127 = &v125[8 * v124];
    *v126 = v107;
    v112 = (uint64_t)(v126 + 1);
    v128 = (char *)(v111 - v120);
    if (v111 != v120)
      goto LABEL_138;
  }
  else
  {
    v125 = 0;
    v126 = (uint64_t *)(8 * v121);
    v127 = 0;
    *(_QWORD *)(8 * v121) = v107;
    v112 = 8 * v121 + 8;
    v128 = (char *)(v111 - v120);
    if (v111 != v120)
    {
LABEL_138:
      v129 = (unint64_t)(v128 - 8);
      if (v129 < 0x78
        || &v111[-(v129 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v126
        && &v125[v111 - v120 - (v129 & 0xFFFFFFFFFFFFFFF8) - 8] < v111)
      {
        goto LABEL_275;
      }
      v130 = (v129 >> 3) + 1;
      v131 = 8 * (v130 & 0x3FFFFFFFFFFFFFFCLL);
      v132 = &v111[-v131];
      v126 = (uint64_t *)((char *)v126 - v131);
      v133 = &v125[8 * v121 - 16];
      v134 = v111 - 16;
      v135 = v130 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v137 = *((_OWORD *)v134 - 1);
        v136 = *(_OWORD *)v134;
        *((_OWORD *)v134 - 1) = 0uLL;
        *(_OWORD *)v134 = 0uLL;
        *((_OWORD *)v133 - 1) = v137;
        *(_OWORD *)v133 = v136;
        v133 -= 32;
        v134 -= 32;
        v135 -= 4;
      }
      while (v135);
      v111 = v132;
      if (v130 != (v130 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_275:
        do
        {
          v138 = *((_QWORD *)v111 - 1);
          v111 -= 8;
          *(_QWORD *)v111 = 0;
          *--v126 = v138;
        }
        while (v111 != v120);
      }
      v111 = (char *)a1[1];
      v139 = (char *)a1[2];
      a1[1] = v126;
      a1[2] = v112;
      a1[3] = v127;
      while (v139 != v111)
      {
        v141 = *((_QWORD *)v139 - 1);
        v139 -= 8;
        v140 = v141;
        *(_QWORD *)v139 = 0;
        if (v141)
          (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
      }
      goto LABEL_151;
    }
  }
  a1[1] = v126;
  a1[2] = v112;
  a1[3] = v127;
LABEL_151:
  if (v111)
    operator delete(v111);
LABEL_153:
  a1[2] = v112;
  v142 = operator new();
  v143 = v247;
  mlir::PatternBenefit::PatternBenefit(&v248, 2);
  v249 = xmmword_24C060BC0;
  v250 = *(_OWORD *)&off_24C060BD0;
  mlir::Pattern::Pattern(v142 + 8, (uint64_t)"arith.select", 12, v248, v143, &v249, 2uLL);
  *(_QWORD *)v142 = &off_24BFFE3C8;
  if (*(_QWORD *)(v142 + 72))
  {
    v144 = *(unsigned int *)(v142 + 88);
    if (v144 <= *(_DWORD *)(v142 + 92))
      goto LABEL_155;
LABEL_166:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v142 + 80, (void *)(v142 + 96), v144, 16);
    *(_DWORD *)(v142 + 88) = *(_DWORD *)(v142 + 88);
    v146 = (char *)a1[2];
    v145 = a1[3];
    if ((unint64_t)v146 < v145)
      goto LABEL_156;
    goto LABEL_167;
  }
  *(_QWORD *)&v249 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SelectOrCond]";
  *((_QWORD *)&v249 + 1) = 85;
  v148 = llvm::StringRef::find((uint64_t *)&v249, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((_QWORD *)&v249 + 1) >= v148)
    v149 = v148;
  else
    v149 = *((_QWORD *)&v249 + 1);
  v150 = v249 + v149;
  v151 = *((_QWORD *)&v249 + 1) - v149;
  if (*((_QWORD *)&v249 + 1) - v149 >= 0x12)
    v152 = 18;
  else
    v152 = *((_QWORD *)&v249 + 1) - v149;
  v153 = v150 + v152;
  v154 = v151 - v152;
  if (v154 >= v154 - 1)
    --v154;
  *(_QWORD *)(v142 + 64) = v153;
  *(_QWORD *)(v142 + 72) = v154;
  v144 = *(unsigned int *)(v142 + 88);
  if (v144 > *(_DWORD *)(v142 + 92))
    goto LABEL_166;
LABEL_155:
  *(_DWORD *)(v142 + 88) = v144;
  v146 = (char *)a1[2];
  v145 = a1[3];
  if ((unint64_t)v146 < v145)
  {
LABEL_156:
    *(_QWORD *)v146 = v142;
    v147 = (uint64_t)(v146 + 8);
    goto LABEL_191;
  }
LABEL_167:
  v155 = (char *)a1[1];
  v156 = (v146 - v155) >> 3;
  v157 = v156 + 1;
  if ((unint64_t)(v156 + 1) >> 61)
    goto LABEL_268;
  v158 = v145 - (_QWORD)v155;
  if (v158 >> 2 > v157)
    v157 = v158 >> 2;
  if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF8)
    v159 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v159 = v157;
  if (v159)
  {
    if (v159 >> 61)
      goto LABEL_269;
    v160 = (char *)operator new(8 * v159);
    v161 = (uint64_t *)&v160[8 * v156];
    v162 = &v160[8 * v159];
    *v161 = v142;
    v147 = (uint64_t)(v161 + 1);
    v163 = (char *)(v146 - v155);
    if (v146 != v155)
      goto LABEL_176;
  }
  else
  {
    v160 = 0;
    v161 = (uint64_t *)(8 * v156);
    v162 = 0;
    *(_QWORD *)(8 * v156) = v142;
    v147 = 8 * v156 + 8;
    v163 = (char *)(v146 - v155);
    if (v146 != v155)
    {
LABEL_176:
      v164 = (unint64_t)(v163 - 8);
      if (v164 < 0x78
        || &v146[-(v164 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v161
        && &v160[v146 - v155 - (v164 & 0xFFFFFFFFFFFFFFF8) - 8] < v146)
      {
        goto LABEL_276;
      }
      v165 = (v164 >> 3) + 1;
      v166 = 8 * (v165 & 0x3FFFFFFFFFFFFFFCLL);
      v167 = &v146[-v166];
      v161 = (uint64_t *)((char *)v161 - v166);
      v168 = &v160[8 * v156 - 16];
      v169 = v146 - 16;
      v170 = v165 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v172 = *((_OWORD *)v169 - 1);
        v171 = *(_OWORD *)v169;
        *((_OWORD *)v169 - 1) = 0uLL;
        *(_OWORD *)v169 = 0uLL;
        *((_OWORD *)v168 - 1) = v172;
        *(_OWORD *)v168 = v171;
        v168 -= 32;
        v169 -= 32;
        v170 -= 4;
      }
      while (v170);
      v146 = v167;
      if (v165 != (v165 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_276:
        do
        {
          v173 = *((_QWORD *)v146 - 1);
          v146 -= 8;
          *(_QWORD *)v146 = 0;
          *--v161 = v173;
        }
        while (v146 != v155);
      }
      v146 = (char *)a1[1];
      v174 = (char *)a1[2];
      a1[1] = v161;
      a1[2] = v147;
      a1[3] = v162;
      while (v174 != v146)
      {
        v176 = *((_QWORD *)v174 - 1);
        v174 -= 8;
        v175 = v176;
        *(_QWORD *)v174 = 0;
        if (v176)
          (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
      }
      goto LABEL_189;
    }
  }
  a1[1] = v161;
  a1[2] = v147;
  a1[3] = v162;
LABEL_189:
  if (v146)
    operator delete(v146);
LABEL_191:
  a1[2] = v147;
  v177 = operator new();
  v178 = v247;
  mlir::PatternBenefit::PatternBenefit(&v248, 2);
  v249 = xmmword_24C060BE0;
  v250 = *(_OWORD *)&off_24C060BF0;
  v251 = xmmword_24C060C00;
  v252 = *(_OWORD *)&off_24C060C10;
  mlir::Pattern::Pattern(v177 + 8, (uint64_t)"arith.select", 12, v248, v178, &v249, 4uLL);
  *(_QWORD *)v177 = &off_24BFFE488;
  if (*(_QWORD *)(v177 + 72))
  {
    v179 = *(unsigned int *)(v177 + 88);
    if (v179 <= *(_DWORD *)(v177 + 92))
      goto LABEL_193;
LABEL_204:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v177 + 80, (void *)(v177 + 96), v179, 16);
    *(_DWORD *)(v177 + 88) = *(_DWORD *)(v177 + 88);
    v181 = (char *)a1[2];
    v180 = a1[3];
    if ((unint64_t)v181 < v180)
      goto LABEL_194;
    goto LABEL_205;
  }
  *(_QWORD *)&v249 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SelectOrNotCond]";
  *((_QWORD *)&v249 + 1) = 88;
  v183 = llvm::StringRef::find((uint64_t *)&v249, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((_QWORD *)&v249 + 1) >= v183)
    v184 = v183;
  else
    v184 = *((_QWORD *)&v249 + 1);
  v185 = v249 + v184;
  v186 = *((_QWORD *)&v249 + 1) - v184;
  if (*((_QWORD *)&v249 + 1) - v184 >= 0x12)
    v187 = 18;
  else
    v187 = *((_QWORD *)&v249 + 1) - v184;
  v188 = v185 + v187;
  v189 = v186 - v187;
  if (v189 >= v189 - 1)
    --v189;
  *(_QWORD *)(v177 + 64) = v188;
  *(_QWORD *)(v177 + 72) = v189;
  v179 = *(unsigned int *)(v177 + 88);
  if (v179 > *(_DWORD *)(v177 + 92))
    goto LABEL_204;
LABEL_193:
  *(_DWORD *)(v177 + 88) = v179;
  v181 = (char *)a1[2];
  v180 = a1[3];
  if ((unint64_t)v181 < v180)
  {
LABEL_194:
    *(_QWORD *)v181 = v177;
    v182 = (uint64_t)(v181 + 8);
    goto LABEL_229;
  }
LABEL_205:
  v190 = (char *)a1[1];
  v191 = (v181 - v190) >> 3;
  v192 = v191 + 1;
  if ((unint64_t)(v191 + 1) >> 61)
    goto LABEL_268;
  v193 = v180 - (_QWORD)v190;
  if (v193 >> 2 > v192)
    v192 = v193 >> 2;
  if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFF8)
    v194 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v194 = v192;
  if (v194)
  {
    if (v194 >> 61)
      goto LABEL_269;
    v195 = (char *)operator new(8 * v194);
    v196 = (uint64_t *)&v195[8 * v191];
    v197 = &v195[8 * v194];
    *v196 = v177;
    v182 = (uint64_t)(v196 + 1);
    v198 = (char *)(v181 - v190);
    if (v181 != v190)
      goto LABEL_214;
  }
  else
  {
    v195 = 0;
    v196 = (uint64_t *)(8 * v191);
    v197 = 0;
    *(_QWORD *)(8 * v191) = v177;
    v182 = 8 * v191 + 8;
    v198 = (char *)(v181 - v190);
    if (v181 != v190)
    {
LABEL_214:
      v199 = (unint64_t)(v198 - 8);
      if (v199 < 0x78
        || &v181[-(v199 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v196
        && &v195[v181 - v190 - (v199 & 0xFFFFFFFFFFFFFFF8) - 8] < v181)
      {
        goto LABEL_277;
      }
      v200 = (v199 >> 3) + 1;
      v201 = 8 * (v200 & 0x3FFFFFFFFFFFFFFCLL);
      v202 = &v181[-v201];
      v196 = (uint64_t *)((char *)v196 - v201);
      v203 = &v195[8 * v191 - 16];
      v204 = v181 - 16;
      v205 = v200 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v207 = *((_OWORD *)v204 - 1);
        v206 = *(_OWORD *)v204;
        *((_OWORD *)v204 - 1) = 0uLL;
        *(_OWORD *)v204 = 0uLL;
        *((_OWORD *)v203 - 1) = v207;
        *(_OWORD *)v203 = v206;
        v203 -= 32;
        v204 -= 32;
        v205 -= 4;
      }
      while (v205);
      v181 = v202;
      if (v200 != (v200 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_277:
        do
        {
          v208 = *((_QWORD *)v181 - 1);
          v181 -= 8;
          *(_QWORD *)v181 = 0;
          *--v196 = v208;
        }
        while (v181 != v190);
      }
      v181 = (char *)a1[1];
      v209 = (char *)a1[2];
      a1[1] = v196;
      a1[2] = v182;
      a1[3] = v197;
      while (v209 != v181)
      {
        v211 = *((_QWORD *)v209 - 1);
        v209 -= 8;
        v210 = v211;
        *(_QWORD *)v209 = 0;
        if (v211)
          (*(void (**)(uint64_t))(*(_QWORD *)v210 + 8))(v210);
      }
      goto LABEL_227;
    }
  }
  a1[1] = v196;
  a1[2] = v182;
  a1[3] = v197;
LABEL_227:
  if (v181)
    operator delete(v181);
LABEL_229:
  a1[2] = v182;
  v212 = operator new();
  v213 = v247;
  mlir::PatternBenefit::PatternBenefit(&v248, 2);
  *(_QWORD *)&v249 = "arith.select";
  *((_QWORD *)&v249 + 1) = 12;
  mlir::Pattern::Pattern(v212 + 8, (uint64_t)"arith.select", 12, v248, v213, &v249, 1uLL);
  *(_QWORD *)v212 = &off_24BFFE448;
  if (*(_QWORD *)(v212 + 72))
  {
    v214 = *(unsigned int *)(v212 + 88);
    if (v214 <= *(_DWORD *)(v212 + 92))
      goto LABEL_231;
LABEL_242:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v212 + 80, (void *)(v212 + 96), v214, 16);
    *(_DWORD *)(v212 + 88) = *(_DWORD *)(v212 + 88);
    v216 = (char *)a1[2];
    v215 = a1[3];
    if ((unint64_t)v216 < v215)
      goto LABEL_232;
    goto LABEL_243;
  }
  *(_QWORD *)&v249 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SelectNotCond]";
  *((_QWORD *)&v249 + 1) = 86;
  v218 = llvm::StringRef::find((uint64_t *)&v249, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((_QWORD *)&v249 + 1) >= v218)
    v219 = v218;
  else
    v219 = *((_QWORD *)&v249 + 1);
  v220 = v249 + v219;
  v221 = *((_QWORD *)&v249 + 1) - v219;
  if (*((_QWORD *)&v249 + 1) - v219 >= 0x12)
    v222 = 18;
  else
    v222 = *((_QWORD *)&v249 + 1) - v219;
  v223 = v220 + v222;
  v224 = v221 - v222;
  if (v224 >= v224 - 1)
    --v224;
  *(_QWORD *)(v212 + 64) = v223;
  *(_QWORD *)(v212 + 72) = v224;
  v214 = *(unsigned int *)(v212 + 88);
  if (v214 > *(_DWORD *)(v212 + 92))
    goto LABEL_242;
LABEL_231:
  *(_DWORD *)(v212 + 88) = v214;
  v216 = (char *)a1[2];
  v215 = a1[3];
  if ((unint64_t)v216 < v215)
  {
LABEL_232:
    *(_QWORD *)v216 = v212;
    v217 = (uint64_t)(v216 + 8);
    goto LABEL_267;
  }
LABEL_243:
  v225 = (char *)a1[1];
  v226 = (v216 - v225) >> 3;
  v227 = v226 + 1;
  if ((unint64_t)(v226 + 1) >> 61)
LABEL_268:
    abort();
  v228 = v215 - (_QWORD)v225;
  if (v228 >> 2 > v227)
    v227 = v228 >> 2;
  if ((unint64_t)v228 >= 0x7FFFFFFFFFFFFFF8)
    v229 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v229 = v227;
  if (!v229)
  {
    v230 = 0;
    v231 = (uint64_t *)(8 * v226);
    v232 = 0;
    *(_QWORD *)(8 * v226) = v212;
    v217 = 8 * v226 + 8;
    v233 = (char *)(v216 - v225);
    if (v216 != v225)
      goto LABEL_252;
    goto LABEL_264;
  }
  if (v229 >> 61)
LABEL_269:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v230 = (char *)operator new(8 * v229);
  v231 = (uint64_t *)&v230[8 * v226];
  v232 = &v230[8 * v229];
  *v231 = v212;
  v217 = (uint64_t)(v231 + 1);
  v233 = (char *)(v216 - v225);
  if (v216 != v225)
  {
LABEL_252:
    v234 = (unint64_t)(v233 - 8);
    if (v234 < 0x78
      || &v216[-(v234 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v231
      && &v230[v216 - v225 - (v234 & 0xFFFFFFFFFFFFFFF8) - 8] < v216)
    {
      goto LABEL_278;
    }
    v235 = (v234 >> 3) + 1;
    v236 = 8 * (v235 & 0x3FFFFFFFFFFFFFFCLL);
    v237 = &v216[-v236];
    v231 = (uint64_t *)((char *)v231 - v236);
    v238 = &v230[8 * v226 - 16];
    v239 = v216 - 16;
    v240 = v235 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v242 = *((_OWORD *)v239 - 1);
      v241 = *(_OWORD *)v239;
      *((_OWORD *)v239 - 1) = 0uLL;
      *(_OWORD *)v239 = 0uLL;
      *((_OWORD *)v238 - 1) = v242;
      *(_OWORD *)v238 = v241;
      v238 -= 32;
      v239 -= 32;
      v240 -= 4;
    }
    while (v240);
    v216 = v237;
    if (v235 != (v235 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_278:
      do
      {
        v243 = *((_QWORD *)v216 - 1);
        v216 -= 8;
        *(_QWORD *)v216 = 0;
        *--v231 = v243;
      }
      while (v216 != v225);
    }
    v216 = (char *)a1[1];
    v244 = (char *)a1[2];
    a1[1] = v231;
    a1[2] = v217;
    a1[3] = v232;
    while (v244 != v216)
    {
      v246 = *((_QWORD *)v244 - 1);
      v244 -= 8;
      v245 = v246;
      *(_QWORD *)v244 = 0;
      if (v246)
        (*(void (**)(uint64_t))(*(_QWORD *)v245 + 8))(v245);
    }
    goto LABEL_265;
  }
LABEL_264:
  a1[1] = v231;
  a1[2] = v217;
  a1[3] = v232;
LABEL_265:
  if (v216)
    operator delete(v216);
LABEL_267:
  a1[2] = v217;
  mlir::RewritePatternSet::addImpl<SelectToExtUI,mlir::MLIRContext *&>(a1, 0, 0, &v247);
}

uint64_t mlir::arith::SelectOp::fold(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  _BOOL4 v12;
  uint64_t v13;
  int v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  _QWORD *v22;
  unint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t DefiningOp;
  uint64_t v28;
  unint64_t Int;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;
  uint64_t *v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL4 v45;
  uint64_t v46;
  unint64_t NumElements;
  __n128 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t Value;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  _QWORD v82[8];

  v82[6] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(*(_QWORD *)a1 + 72);
  v3 = v2[7];
  v4 = v2[11];
  if (v3 == v4)
    return v3 | 4;
  v7 = v2[3];
  v74 = v7;
  v8 = *(uint64_t **)(a2 + 40);
  v9 = *v8;
  if (!*v8)
    goto LABEL_25;
  LODWORD(v81) = 1;
  v80 = 0;
  v75.n128_u64[0] = (unint64_t)&v80;
  v10 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v75, v9);
  v11 = v81;
  if (!v10)
  {
    v12 = 0;
    if (v81 < 0x41)
      goto LABEL_12;
    goto LABEL_7;
  }
  if (v81 < 0x41)
  {
    v12 = v80 == (void *)1;
    goto LABEL_12;
  }
  if (v11 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v80) <= 0x40)
  {
    v12 = *(_QWORD *)v80 == 1;
LABEL_7:
    if (v80)
    {
      MEMORY[0x20BD002D4](v80, 0x1000C8000313F17);
      if (!v12)
        goto LABEL_16;
      return v3 | 4;
    }
LABEL_12:
    if (!v12)
      goto LABEL_16;
    return v3 | 4;
  }
  if (v80)
    MEMORY[0x20BD002D4](v80, 0x1000C8000313F17);
LABEL_16:
  v8 = *(uint64_t **)(a2 + 40);
  v13 = *v8;
  if (*v8)
  {
    LODWORD(v81) = 1;
    v80 = 0;
    v75.n128_u64[0] = (unint64_t)&v80;
    v14 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v75, v13);
    v15 = v81;
    if (v14)
    {
      if (v81 < 0x41)
      {
        v16 = v80 == 0;
        goto LABEL_23;
      }
      if (v15 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v80) > 0x40)
      {
        if (v80)
          MEMORY[0x20BD002D4](v80, 0x1000C8000313F17);
LABEL_24:
        v8 = *(uint64_t **)(a2 + 40);
        goto LABEL_25;
      }
      v16 = *(_QWORD *)v80 == 0;
    }
    else
    {
      v16 = 0;
      if (v81 < 0x41)
        goto LABEL_23;
    }
    if (v80)
      MEMORY[0x20BD002D4](v80, 0x1000C8000313F17);
LABEL_23:
    if (v16)
      return v4 | 4;
    goto LABEL_24;
  }
LABEL_25:
  v17 = v8[1];
  if (v17 && *(_UNKNOWN **)(*(_QWORD *)v17 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    return v4 | 4;
  v18 = v8[2];
  if (v18 && *(_UNKNOWN **)(*(_QWORD *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    return v3 | 4;
  v68 = *(_QWORD *)(*(_QWORD *)a1 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (!mlir::Type::isInteger((mlir::Type *)&v68, 1))
    goto LABEL_60;
  v19 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
  if (!v19)
    goto LABEL_60;
  LODWORD(v81) = 1;
  v80 = 0;
  v75.n128_u64[0] = (unint64_t)&v80;
  v20 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v75, v19);
  v21 = v81;
  if (!v20)
  {
    v24 = 0;
    if (v81 >= 0x41)
      goto LABEL_43;
LABEL_46:
    if (!v24)
      goto LABEL_60;
LABEL_47:
    v25 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 16);
    if (v25)
    {
      LODWORD(v81) = 1;
      v80 = 0;
      v75.n128_u64[0] = (unint64_t)&v80;
      if (mlir::detail::constant_int_value_binder::match((uint64_t *)&v75, v25))
        v26 = mlir::m_Zero(void)::{lambda(llvm::APInt const&)#1}::__invoke((llvm::APInt *)&v80);
      else
        v26 = 0;
      if (v81 >= 0x41 && v80)
        MEMORY[0x20BD002D4](v80, 0x1000C8000313F17);
      if (v26)
        return v7 | 4;
    }
    goto LABEL_60;
  }
  if (v81 >= 0x41)
  {
    if (v21 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v80) > 0x40)
    {
      if (v80)
        MEMORY[0x20BD002D4](v80, 0x1000C8000313F17);
      goto LABEL_60;
    }
    v22 = v80;
  }
  else
  {
    v22 = &v80;
  }
  v24 = *v22 == 1;
  if (v21 < 0x41)
    goto LABEL_46;
LABEL_43:
  if (!v80)
    goto LABEL_46;
  MEMORY[0x20BD002D4](v80, 0x1000C8000313F17);
  if (v24)
    goto LABEL_47;
LABEL_60:
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v74);
  if (!DefiningOp)
    goto LABEL_71;
  v28 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id)
    goto LABEL_71;
  v80 = *(void **)(DefiningOp + 16 * (((unint64_t)*(unsigned int *)(DefiningOp + 44) >> 23) & 1) + 64);
  Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v80);
  if (Int > 1)
    goto LABEL_71;
  v30 = *(_QWORD *)(v28 + 72);
  v31 = *(_QWORD *)(v30 + 24);
  v32 = *(_QWORD *)(v30 + 56);
  v33 = v31 == v3 && v32 == v4;
  if (v33 || (v31 == v4 ? (v34 = v32 == v3) : (v34 = 0), v34))
  {
    if (Int == 1)
      v58 = v3;
    else
      v58 = v4;
    return v58 | 4;
  }
  else
  {
LABEL_71:
    v35 = *(uint64_t **)(a2 + 40);
    v36 = *v35;
    if (!*v35)
      return 0;
    v37 = mlir::DenseElementsAttr::classof(*v35);
    v38 = v37 ? v36 : 0;
    v73 = v38;
    if (!v37)
      return 0;
    v39 = *(_QWORD *)(a2 + 40);
    v40 = *(_QWORD *)(v39 + 8);
    if (!v40)
      return 0;
    v41 = mlir::DenseElementsAttr::classof(*(_QWORD *)(v39 + 8));
    v42 = v41 ? v40 : 0;
    if ((v72 = v42, v41)
      && (v43 = *(_QWORD *)(a2 + 40), (v44 = *(_QWORD *)(v43 + 16)) != 0)
      && (!(v45 = mlir::DenseElementsAttr::classof(*(_QWORD *)(v43 + 16))) ? (v46 = 0) : (v46 = v44), v71 = v46, v45))
    {
      v80 = v82;
      v81 = 0x600000000;
      NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v73);
      if (NumElements > HIDWORD(v81))
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v82, NumElements, 8);
      mlir::DenseElementsAttr::tryGetValues<mlir::BoolAttr,void>((mlir::ArrayAttr *)&v73, &v75);
      v48 = v75;
      mlir::DenseElementsAttr::tryGetValues<mlir::BoolAttr,void>((mlir::ArrayAttr *)&v73, &v75);
      v49 = v76;
      v50 = v77;
      v51 = mlir::DenseElementsAttr::value_begin<mlir::Attribute>((mlir::ArrayAttr *)&v72);
      v53 = v52;
      mlir::DenseElementsAttr::value_end<mlir::Attribute>((mlir::ArrayAttr *)&v72);
      v54 = mlir::DenseElementsAttr::value_begin<mlir::Attribute>((mlir::ArrayAttr *)&v71);
      v56 = v55;
      mlir::DenseElementsAttr::value_end<mlir::Attribute>((mlir::ArrayAttr *)&v71);
      v75 = v48;
      v76 = v51;
      v77 = v53;
      v78 = v54;
      v79 = v56;
      if (*(_OWORD *)&v48 != __PAIR128__(v50, v49))
      {
        do
        {
          v59 = mlir::DenseElementsAttr::AttributeElementIterator::operator*(&v75);
          v60 = mlir::DenseElementsAttr::AttributeElementIterator::operator*(&v76);
          v61 = mlir::DenseElementsAttr::AttributeElementIterator::operator*(&v78);
          v68 = v59;
          v69 = v60;
          v70 = v61;
          if (mlir::BoolAttr::getValue((mlir::BoolAttr *)&v68))
            v62 = &v69;
          else
            v62 = &v70;
          v63 = *v62;
          v64 = v81;
          if (v81 >= (unint64_t)HIDWORD(v81))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v82, v81 + 1, 8);
            v64 = v81;
          }
          *((_QWORD *)v80 + v64) = v63;
          LODWORD(v81) = v81 + 1;
          v65 = ++v75.n128_u64[1];
          ++v77;
          ++v79;
        }
        while (v75.n128_u64[0] != v49 || v65 != v50);
      }
      Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v72);
      v23 = mlir::DenseElementsAttr::get(Value, v67, (uint64_t *)v80, v81) & 0xFFFFFFFFFFFFFFFBLL;
      if (v80 != v82)
        free(v80);
    }
    else
    {
      return 0;
    }
  }
  return v23;
}

uint64_t mlir::DenseElementsAttr::value_begin<mlir::Attribute>(mlir::ArrayAttr *a1)
{
  uint64_t v2;
  uint64_t NumElements;
  uint64_t v5;
  uint64_t v6;

  mlir::ArrayAttr::getValue(a1);
  ZinMirCacheTensors::ZinMirCacheTensors(&v6, *(_QWORD *)a1, 0);
  v2 = *(_QWORD *)a1;
  NumElements = mlir::DenseElementsAttr::getNumElements(a1);
  ZinMirCacheTensors::ZinMirCacheTensors(&v5, v2, NumElements);
  return v6;
}

uint64_t mlir::DenseElementsAttr::value_end<mlir::Attribute>(mlir::ArrayAttr *a1)
{
  uint64_t v2;
  uint64_t NumElements;
  uint64_t v5;
  uint64_t v6;

  mlir::ArrayAttr::getValue(a1);
  ZinMirCacheTensors::ZinMirCacheTensors(&v6, *(_QWORD *)a1, 0);
  v2 = *(_QWORD *)a1;
  NumElements = mlir::DenseElementsAttr::getNumElements(a1);
  ZinMirCacheTensors::ZinMirCacheTensors(&v5, v2, NumElements);
  return v5;
}

uint64_t mlir::arith::SelectOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t I1Type;
  uint64_t v5;
  void *v6;
  mlir::Builder *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;
  _QWORD v13[3];
  void *v14[2];
  _QWORD v15[13];

  v15[12] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v14[0] = v15;
  v14[1] = (void *)0x300000000;
  if ((*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, v14, 0, 1, 3)&& (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112)&& (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 544))(a1, &v12))
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1))
    {
      I1Type = v12;
      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v12))
        goto LABEL_6;
    }
    else
    {
      v8 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      I1Type = mlir::Builder::getI1Type(v8);
    }
    v9 = *(unsigned int *)(a2 + 72);
    if (v9 >= *(_DWORD *)(a2 + 76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 72);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v9) = v12;
    ++*(_DWORD *)(a2 + 72);
    v13[0] = I1Type;
    v13[1] = v12;
    v13[2] = v12;
    v11[0] = v13;
    v11[1] = 3;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v5 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,3u> &,llvm::ArrayRef<mlir::Type>>(a1, (uint64_t *)v14, v11, v10, a2 + 16);
    v6 = v14[0];
    if (v14[0] != v15)
      goto LABEL_7;
    return v5;
  }
LABEL_6:
  v5 = 0;
  v6 = v14[0];
  if (v14[0] != v15)
LABEL_7:
    free(v6);
  return v5;
}

void mlir::OperationState::addTypes(uint64_t a1, void *__src, uint64_t a3)
{
  size_t v6;
  uint64_t v7;
  unint64_t v8;

  v6 = 8 * a3;
  v7 = *(unsigned int *)(a1 + 72);
  v8 = v7 + ((8 * a3) >> 3);
  if (v8 > *(unsigned int *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, (void *)(a1 + 80), v8, 8);
    LODWORD(v7) = *(_DWORD *)(a1 + 72);
  }
  if (a3)
  {
    memcpy((void *)(*(_QWORD *)(a1 + 64) + 8 * v7), __src, v6);
    LODWORD(v7) = *(_DWORD *)(a1 + 72);
  }
  *(_DWORD *)(a1 + 72) = v7 + (v6 >> 3);
}

uint64_t mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,3u> &,llvm::ArrayRef<mlir::Type>>(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  const char *v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  int *v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  int *v23;
  char *v24;
  char *v25;
  __int128 v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  BOOL v40;
  int64_t v41;
  int64_t v42;
  int64_t v43;
  char v44[32];
  __int16 v45;
  int v46;
  const char *v47;
  uint64_t v48;
  _QWORD v49[3];
  void *v50;
  unsigned int v51;
  unsigned int v52;
  _BYTE v53[96];
  void *v54;
  _QWORD *v55;
  void *__p;
  _QWORD *v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v6 = (const char *)*((unsigned int *)a2 + 2);
  v7 = (const char *)a3[1];
  if (v7 == v6)
  {
    if ((_DWORD)v6)
    {
      v9 = *a2;
      v10 = (_QWORD *)*a3;
      v11 = 32 * (_QWORD)v6;
      while ((*(unsigned __int8 (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, *v10, a5))
      {
        v9 += 32;
        ++v10;
        v11 -= 32;
        if (!v11)
          return 1;
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v45 = 257;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)a1 + 24))(v49, a1, a4, v44);
    if (v49[0])
    {
      v46 = 5;
      v47 = v6;
      v13 = &v46;
      v14 = (char *)v50;
      if (v51 >= v52)
      {
        v36 = v51 + 1;
        if (v50 <= &v46 && (char *)v50 + 24 * v51 > (char *)&v46)
        {
          v41 = (char *)&v46 - (_BYTE *)v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v36, 24);
          v14 = (char *)v50;
          v13 = (int *)((char *)v50 + v41);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v36, 24);
          v13 = &v46;
          v14 = (char *)v50;
        }
      }
      v15 = &v14[24 * v51];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = *((_QWORD *)v13 + 2);
      *(_OWORD *)v15 = v16;
      v17 = ++v51;
      if (v49[0])
      {
        v46 = 3;
        v47 = " operands present, but expected ";
        v48 = 32;
        v18 = &v46;
        v19 = (char *)v50;
        if (v17 >= v52)
        {
          v37 = v17 + 1;
          v38 = (char *)v50 + 24 * v17 > (char *)&v46;
          if (v50 <= &v46 && v38)
          {
            v42 = (char *)&v46 - (_BYTE *)v50;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
            v19 = (char *)v50;
            v18 = (int *)((char *)v50 + v42);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
            v18 = &v46;
            v19 = (char *)v50;
          }
        }
        v20 = &v19[24 * v51];
        v21 = *(_OWORD *)v18;
        *((_QWORD *)v20 + 2) = *((_QWORD *)v18 + 2);
        *(_OWORD *)v20 = v21;
        v22 = ++v51;
        if (v49[0])
        {
          v46 = 5;
          v47 = v7;
          v23 = &v46;
          v24 = (char *)v50;
          if (v22 >= v52)
          {
            v39 = v22 + 1;
            v40 = (char *)v50 + 24 * v22 > (char *)&v46;
            if (v50 <= &v46 && v40)
            {
              v43 = (char *)&v46 - (_BYTE *)v50;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v39, 24);
              v24 = (char *)v50;
              v23 = (int *)((char *)v50 + v43);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v39, 24);
              v23 = &v46;
              v24 = (char *)v50;
            }
          }
          v25 = &v24[24 * v51];
          v26 = *(_OWORD *)v23;
          *((_QWORD *)v25 + 2) = *((_QWORD *)v23 + 2);
          *(_OWORD *)v25 = v26;
          ++v51;
        }
      }
    }
    v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v49);
    if (v49[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v49);
    if (v58)
    {
      v27 = __p;
      if (__p)
      {
        v28 = v57;
        v29 = __p;
        if (v57 != __p)
        {
          do
            v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          v29 = __p;
        }
        v57 = v27;
        operator delete(v29);
      }
      v30 = v54;
      if (v54)
      {
        v31 = v55;
        v32 = v54;
        if (v55 != v54)
        {
          do
          {
            v34 = *--v31;
            v33 = v34;
            *v31 = 0;
            if (v34)
              MEMORY[0x20BD002D4](v33, 0x1000C8077774924);
          }
          while (v31 != v30);
          v32 = v54;
        }
        v55 = v30;
        operator delete(v32);
      }
      if (v50 != v53)
        free(v50);
    }
  }
  return v12;
}

uint64_t mlir::arith::SelectOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  mlir::Operation *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  mlir::Operation *v10;
  mlir::ArrayAttr *v11;
  uint64_t Value;
  uint64_t v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  _QWORD *v16;
  llvm::raw_ostream *v17;
  _WORD *v18;
  _QWORD v20[2];

  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
    v6 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
      goto LABEL_3;
  }
  else
  {
    *v5 = 32;
    ++*((_QWORD *)v4 + 4);
    v6 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
LABEL_3:
      v7 = *((_QWORD *)v6 + 9);
      v8 = *((unsigned int *)v6 + 17);
      goto LABEL_4;
    }
  }
  v7 = 0;
  v8 = 0;
LABEL_4:
  v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v20[0] = ", ";
  v20[1] = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v7, 0, v7, v8, (uint64_t)a2, v9, (uint64_t)v20);
  v10 = *this;
  if (*((_BYTE *)*this + 47))
  {
    v20[0] = mlir::Operation::getAttrDictionary(v10);
    v11 = (mlir::ArrayAttr *)v20;
  }
  else
  {
    v11 = (mlir::Operation *)((char *)v10 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v11);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v13, 0, 0);
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = *((_QWORD *)v14 + 4);
  if ((unint64_t)(*((_QWORD *)v14 + 3) - v15) > 2)
  {
    *(_BYTE *)(v15 + 2) = 32;
    *(_WORD *)v15 = 14880;
    *((_QWORD *)v14 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v14, " : ", 3uLL);
  }
  v16 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8))
  {
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8);
    if (v16)
    {
      (*(void (**)(mlir::OpAsmPrinter *, _QWORD *))(*(_QWORD *)a2 + 32))(a2, v16);
      v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
      v18 = (_WORD *)*((_QWORD *)v17 + 4);
      if (*((_QWORD *)v17 + 3) - (_QWORD)v18 > 1uLL)
      {
        *v18 = 8236;
        *((_QWORD *)v17 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v17, ", ", 2uLL);
      }
    }
  }
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *((_QWORD *)*this - 1) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t mlir::arith::SelectOp::verify(uint64_t **this)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  uint64_t I1SameShape;
  uint64_t v8;
  int *v9;
  char *v10;
  char *v11;
  __int128 v12;
  int *v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  int *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int *v22;
  char *v23;
  char *v24;
  __int128 v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  char *v35;
  char *v36;
  __int128 v37;
  int *v38;
  char *v39;
  char *v40;
  __int128 v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  BOOL v54;
  unint64_t v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  int64_t v59;
  int64_t v60;
  int64_t v61;
  const void **v62[4];
  __int16 v63;
  unint64_t v64;
  int v65;
  const char *v66;
  uint64_t v67;
  _QWORD v68[3];
  void *v69;
  unsigned int v70;
  unsigned int v71;
  _BYTE v72[96];
  void *v73;
  _QWORD *v74;
  void *__p;
  _QWORD *v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v64 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v2 = 1;
  if (mlir::Type::isSignlessInteger((mlir::Type *)&v64, 1))
    return v2;
  v3 = (_QWORD *)(*(*this - 1) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)(*v3 + 136);
  if (v4 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    I1SameShape = getI1SameShape(v3);
    if (v64 != I1SameShape)
    {
      v8 = I1SameShape;
      v63 = 257;
      mlir::OpState::emitOpError(this, v62, (uint64_t)v68);
      if (v68[0])
      {
        v65 = 3;
        v66 = "expected condition type to have the same shape as the result type, expected ";
        v67 = 76;
        v9 = &v65;
        v10 = (char *)v69;
        if (v70 >= v71)
        {
          v50 = v70 + 1;
          if (v69 <= &v65 && (char *)v69 + 24 * v70 > (char *)&v65)
          {
            v57 = (char *)&v65 - (_BYTE *)v69;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v50, 24);
            v10 = (char *)v69;
            v9 = (int *)((char *)v69 + v57);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v50, 24);
            v9 = &v65;
            v10 = (char *)v69;
          }
        }
        v11 = &v10[24 * v70];
        v12 = *(_OWORD *)v9;
        *((_QWORD *)v11 + 2) = *((_QWORD *)v9 + 2);
        *(_OWORD *)v11 = v12;
        ++v70;
        if (v68[0])
        {
          v13 = &v65;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v65, v8);
          v14 = (char *)v69;
          if (v70 >= v71)
          {
            v52 = v70 + 1;
            if (v69 <= &v65 && (char *)v69 + 24 * v70 > (char *)&v65)
            {
              v59 = (char *)&v65 - (_BYTE *)v69;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v52, 24);
              v14 = (char *)v69;
              v13 = (int *)((char *)v69 + v59);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v52, 24);
              v13 = &v65;
              v14 = (char *)v69;
            }
          }
          v15 = &v14[24 * v70];
          v16 = *(_OWORD *)v13;
          *((_QWORD *)v15 + 2) = *((_QWORD *)v13 + 2);
          *(_OWORD *)v15 = v16;
          v17 = ++v70;
          if (v68[0])
          {
            v65 = 3;
            v66 = ", but got ";
            v67 = 10;
            v18 = &v65;
            v19 = (char *)v69;
            if (v17 >= v71)
            {
              v53 = v17 + 1;
              v54 = (char *)v69 + 24 * v17 > (char *)&v65;
              if (v69 <= &v65 && v54)
              {
                v60 = (char *)&v65 - (_BYTE *)v69;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v53, 24);
                v19 = (char *)v69;
                v18 = (int *)((char *)v69 + v60);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v53, 24);
                v18 = &v65;
                v19 = (char *)v69;
              }
            }
            v20 = &v19[24 * v70];
            v21 = *(_OWORD *)v18;
            *((_QWORD *)v20 + 2) = *((_QWORD *)v18 + 2);
            *(_OWORD *)v20 = v21;
            ++v70;
            if (v68[0])
            {
              v22 = &v65;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v65, v64);
              v23 = (char *)v69;
              if (v70 >= v71)
              {
                v55 = v70 + 1;
                if (v69 <= &v65 && (char *)v69 + 24 * v70 > (char *)&v65)
                {
                  v61 = (char *)&v65 - (_BYTE *)v69;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v55, 24);
                  v23 = (char *)v69;
                  v22 = (int *)((char *)v69 + v61);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v55, 24);
                  v22 = &v65;
                  v23 = (char *)v69;
                }
              }
              v24 = &v23[24 * v70];
              v25 = *(_OWORD *)v22;
              *((_QWORD *)v24 + 2) = *((_QWORD *)v22 + 2);
              *(_OWORD *)v24 = v25;
              ++v70;
            }
          }
        }
      }
      v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v68);
      if (v68[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v68);
      if (v77)
      {
        v26 = __p;
        if (__p)
        {
          v27 = v76;
          v28 = __p;
          if (v76 != __p)
          {
            do
              v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
            while (v27 != v26);
            v28 = __p;
          }
          v76 = v26;
          operator delete(v28);
        }
        v29 = v73;
        if (!v73)
          goto LABEL_55;
        v30 = v74;
        v31 = v73;
        if (v74 == v73)
          goto LABEL_54;
        do
        {
          v33 = *--v30;
          v32 = v33;
          *v30 = 0;
          if (v33)
            MEMORY[0x20BD002D4](v32, 0x1000C8077774924);
        }
        while (v30 != v29);
        goto LABEL_53;
      }
    }
  }
  else
  {
    v63 = 257;
    mlir::OpState::emitOpError(this, v62, (uint64_t)v68);
    if (v68[0])
    {
      v65 = 3;
      v66 = "expected condition to be a signless i1, but got ";
      v67 = 48;
      v34 = &v65;
      v35 = (char *)v69;
      if (v70 >= v71)
      {
        v49 = v70 + 1;
        if (v69 <= &v65 && (char *)v69 + 24 * v70 > (char *)&v65)
        {
          v56 = (char *)&v65 - (_BYTE *)v69;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v49, 24);
          v35 = (char *)v69;
          v34 = (int *)((char *)v69 + v56);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v49, 24);
          v34 = &v65;
          v35 = (char *)v69;
        }
      }
      v36 = &v35[24 * v70];
      v37 = *(_OWORD *)v34;
      *((_QWORD *)v36 + 2) = *((_QWORD *)v34 + 2);
      *(_OWORD *)v36 = v37;
      ++v70;
      if (v68[0])
      {
        v38 = &v65;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v65, v64);
        v39 = (char *)v69;
        if (v70 >= v71)
        {
          v51 = v70 + 1;
          if (v69 <= &v65 && (char *)v69 + 24 * v70 > (char *)&v65)
          {
            v58 = (char *)&v65 - (_BYTE *)v69;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v51, 24);
            v39 = (char *)v69;
            v38 = (int *)((char *)v69 + v58);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v51, 24);
            v38 = &v65;
            v39 = (char *)v69;
          }
        }
        v40 = &v39[24 * v70];
        v41 = *(_OWORD *)v38;
        *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
        *(_OWORD *)v40 = v41;
        ++v70;
      }
    }
    v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v68);
    if (v68[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v68);
    if (v77)
    {
      v42 = __p;
      if (__p)
      {
        v43 = v76;
        v44 = __p;
        if (v76 != __p)
        {
          do
            v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
          while (v43 != v42);
          v44 = __p;
        }
        v76 = v42;
        operator delete(v44);
      }
      v29 = v73;
      if (!v73)
        goto LABEL_55;
      v45 = v74;
      v31 = v73;
      if (v74 == v73)
      {
LABEL_54:
        v74 = v29;
        operator delete(v31);
LABEL_55:
        if (v69 != v72)
          free(v69);
        return v2;
      }
      do
      {
        v47 = *--v45;
        v46 = v47;
        *v45 = 0;
        if (v47)
          MEMORY[0x20BD002D4](v46, 0x1000C8077774924);
      }
      while (v45 != v29);
LABEL_53:
      v31 = v73;
      goto LABEL_54;
    }
  }
  return v2;
}

uint64_t mlir::arith::ShLIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v6;
  unsigned int v7;
  __int128 *v8;
  BOOL v9;
  uint64_t canMapOperands;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t Value;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t Type;
  uint64_t v36;
  int v37;
  unint64_t NumElements;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  const void **v47;
  char *Address;
  llvm::APInt *v49;
  unsigned int v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const void **v60;
  unsigned int v61;
  const void *v62;
  unsigned int v63;
  const void *v64;
  unsigned int v65;
  char v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 v76;
  _QWORD v77[2];
  _QWORD *v78;
  uint64_t v79;
  unint64_t *v80;
  unsigned int v81;
  const void *v82;
  unsigned int v83;
  unint64_t *v84;
  unsigned int v85;
  const void *v86;
  unsigned int v87;
  const void *v88;
  unsigned int v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _OWORD v93[4];
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)(a2 + 40);
  v4 = v3[1];
  if (!v4)
    goto LABEL_17;
  DWORD2(v92) = 1;
  *(_QWORD *)&v92 = 0;
  *(_QWORD *)&v90 = &v92;
  v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v90, v4);
  v7 = DWORD2(v92);
  if (!v6)
  {
    v9 = 0;
    if (DWORD2(v92) < 0x41)
      goto LABEL_12;
    goto LABEL_10;
  }
  if (DWORD2(v92) < 0x41)
  {
    v8 = &v92;
    goto LABEL_9;
  }
  if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v92) <= 0x40)
  {
    v8 = (__int128 *)v92;
LABEL_9:
    v9 = *(_QWORD *)v8 == 0;
    if (v7 < 0x41)
      goto LABEL_12;
LABEL_10:
    if ((_QWORD)v92)
      MEMORY[0x20BD002D4](v92, 0x1000C8000313F17);
LABEL_12:
    if (v9)
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) | 4;
    goto LABEL_16;
  }
  if ((_QWORD)v92)
    MEMORY[0x20BD002D4](v92, 0x1000C8000313F17);
LABEL_16:
  v3 = *(uint64_t **)(a2 + 40);
LABEL_17:
  canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(_QWORD *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    goto LABEL_70;
  }
  v12 = v3[1];
  if (v12)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v12 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
      goto LABEL_70;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8))
    {
      v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8);
      *(_QWORD *)&v92 = canMapOperands;
      *((_QWORD *)&v92 + 1) = v13;
      canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v92);
    }
    else
    {
      canMapOperands = 0;
      v92 = 0uLL;
    }
  }
  else
  {
    v92 = 0uLL;
  }
  v14 = (_QWORD *)v3[1];
  if (!v14)
  {
    v92 = 0uLL;
LABEL_70:
    v36 = 0;
    return v36 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v14 + 8))
  {
    v92 = 0uLL;
    goto LABEL_70;
  }
  v15 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v14 + 8);
  *(_QWORD *)&v92 = v14;
  *((_QWORD *)&v92 + 1) = v15;
  v16 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v92);
  if (!canMapOperands)
    goto LABEL_70;
  if (!v16)
    goto LABEL_70;
  if (canMapOperands != v16)
    goto LABEL_70;
  v17 = *v3;
  if (*v3)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v17 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
      goto LABEL_70;
  }
  v18 = v3[1];
  if (!v18)
    goto LABEL_70;
  if (!v17)
    goto LABEL_70;
  v19 = *(void **)(*(_QWORD *)v18 + 136);
  if (v19 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    goto LABEL_70;
  if (v19 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    || *(_UNKNOWN **)(*(_QWORD *)v17 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3))
      v24 = v17;
    else
      v24 = 0;
    *(_QWORD *)&v92 = v24;
    if (v24 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v92))
    {
      v25 = v3[1];
      v26 = mlir::DenseElementsAttr::classof(v25) ? v25 : 0;
      *(_QWORD *)&v92 = v26;
      if (v26)
      {
        if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v92))
        {
          v27 = v3[1];
          v73 = *v3;
          v70 = v27;
          Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73);
          if (Value != mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v70))
            goto LABEL_68;
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v73, (uint64_t)&v92);
          v90 = v92;
          v91 = v93[0];
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v90, (llvm::APInt *)&v82);
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v70, (uint64_t)&v92);
          v90 = v92;
          v91 = v93[0];
          v29 = (unint64_t *)&v80;
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v90, (llvm::APInt *)&v80);
          v30 = v81;
          if (v81 >= 0x41)
          {
            if (v30 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v80) > 0x40)
            {
              v23 = 0;
              goto LABEL_166;
            }
            v29 = v80;
          }
          v23 = *v29 <= v30;
LABEL_166:
          DWORD2(v90) = v83;
          if (v83 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v90, &v82);
          else
            *(_QWORD *)&v90 = v82;
          llvm::APInt::operator<<=((uint64_t)&v90, (uint64_t)&v80);
          DWORD2(v92) = DWORD2(v90);
          *(_QWORD *)&v92 = v90;
          LOBYTE(v93[0]) = 1;
          if (v81 >= 0x41 && v80)
            MEMORY[0x20BD002D4](v80, 0x1000C8000313F17);
          if (v83 >= 0x41 && v82)
            MEMORY[0x20BD002D4](v82, 0x1000C8000313F17);
          v59 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
          v36 = mlir::DenseElementsAttr::get(canMapOperands, v59, (llvm::APInt *)&v92, 1);
          if (LOBYTE(v93[0]))
            goto LABEL_88;
          goto LABEL_69;
        }
      }
    }
    if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v3 + 8)
      || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v3[1] + 8))
    {
      goto LABEL_70;
    }
    v31 = (_QWORD *)*v3;
    if (*v3)
      v32 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v31 + 8);
    else
      v32 = 0;
    v78 = v31;
    v79 = v32;
    v33 = (_QWORD *)v3[1];
    if (v33)
      v34 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v33 + 8);
    else
      v34 = 0;
    v77[0] = v33;
    v77[1] = v34;
    Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v78);
    if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77))
      goto LABEL_68;
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v78, (uint64_t)&v90);
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v77, (uint64_t)&v73);
    v36 = 0;
    v23 = 0;
    v37 = v76;
    if (BYTE8(v91) && v76)
    {
      LOWORD(v70) = v90;
      if ((_BYTE)v90)
        v71 = *((_QWORD *)&v90 + 1);
      else
        (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)&v90 + 1) + 16))(&v71);
      v72 = v91;
      v67 = v73;
      if ((_BYTE)v73)
        v68 = v74;
      else
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v74 + 16))(&v68);
      v69 = v75;
      *(_QWORD *)&v92 = v93;
      *((_QWORD *)&v92 + 1) = 0x400000000;
      NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v78, v79);
      llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v92, NumElements);
      v39 = mlir::ElementsAttr::getNumElements((uint64_t)v78, v79);
      if (v39)
      {
        v40 = v39;
        v41 = v72;
        while (1)
        {
          if (BYTE1(v70))
            v42 = 0;
          else
            v42 = v41;
          if ((_BYTE)v70)
          {
            v43 = v71 + 16 * v42;
            v63 = *(_DWORD *)(v43 + 8);
            if (v63 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v62, (const void **)v43);
            else
              v62 = *(const void **)v43;
          }
          else
          {
            (*(void (**)(const void **__return_ptr))(*(_QWORD *)v71 + 24))(&v62);
          }
          if (HIBYTE(v67))
            v44 = 0;
          else
            v44 = v69;
          if ((_BYTE)v67)
          {
            v45 = v68 + 16 * v44;
            v46 = *(_DWORD *)(v45 + 8);
            v61 = v46;
            if (v46 <= 0x40)
            {
              v60 = *(const void ***)v45;
              v47 = (const void **)&v60;
              goto LABEL_119;
            }
            llvm::APInt::initSlowCase((llvm::APInt *)&v60, (const void **)v45);
          }
          else
          {
            (*(void (**)(const void ***__return_ptr))(*(_QWORD *)v68 + 24))(&v60);
          }
          v46 = v61;
          if (v61 >= 0x41)
          {
            if (v46 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v60) > 0x40)
            {
              v23 = 0;
              goto LABEL_120;
            }
            v47 = v60;
          }
          else
          {
            v47 = (const void **)&v60;
          }
LABEL_119:
          v23 = (unint64_t)*v47 <= v46;
LABEL_120:
          v89 = v63;
          if (v63 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v88, &v62);
          else
            v88 = v62;
          llvm::APInt::operator<<=((uint64_t)&v88, (uint64_t)&v60);
          v65 = v89;
          v64 = v88;
          v66 = 1;
          if (v61 >= 0x41 && v60)
            MEMORY[0x20BD002D4](v60, 0x1000C8000313F17);
          if (v63 >= 0x41 && v62)
            MEMORY[0x20BD002D4](v62, 0x1000C8000313F17);
          if (!v66)
          {
            v36 = 0;
            goto LABEL_140;
          }
          Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v92, (unint64_t)&v64, 1);
          v49 = (llvm::APInt *)(v92 + 16 * DWORD2(v92));
          v50 = *((_DWORD *)Address + 2);
          *((_DWORD *)v49 + 2) = v50;
          if (v50 > 0x40)
            llvm::APInt::initSlowCase(v49, (const void **)Address);
          else
            *(_QWORD *)v49 = *(_QWORD *)Address;
          ++DWORD2(v92);
          if (v66 && v65 >= 0x41 && v64)
            MEMORY[0x20BD002D4](v64, 0x1000C8000313F17);
          v41 = ++v72;
          ++v69;
          if (!--v40)
            goto LABEL_138;
        }
      }
      v23 = 0;
LABEL_138:
      v51 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
      v36 = mlir::DenseElementsAttr::get(canMapOperands, v51, (llvm::APInt *)v92, DWORD2(v92));
LABEL_140:
      v52 = (char *)v92;
      if (DWORD2(v92))
      {
        v53 = 16 * DWORD2(v92);
        do
        {
          if (*(_DWORD *)&v52[v53 - 8] >= 0x41u)
          {
            v54 = *(_QWORD *)&v52[v53 - 16];
            if (v54)
              MEMORY[0x20BD002D4](v54, 0x1000C8000313F17);
          }
          v53 -= 16;
        }
        while (v53);
        v52 = (char *)v92;
      }
      if (v52 != (char *)v93)
        free(v52);
      if (!(_BYTE)v67)
      {
        v55 = v68;
        v68 = 0;
        if (v55)
          (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
      }
      if (!(_BYTE)v70)
      {
        v56 = v71;
        v71 = 0;
        if (v56)
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
      }
      v37 = v76;
    }
    if (v37)
    {
      if (!(_BYTE)v73)
      {
        v57 = v74;
        v74 = 0;
        if (v57)
          (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
      }
    }
    if (BYTE8(v91))
    {
      if (!(_BYTE)v90)
      {
        v58 = *((_QWORD *)&v90 + 1);
        *((_QWORD *)&v90 + 1) = 0;
        if (v58)
          (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
      }
    }
    goto LABEL_69;
  }
  v73 = *v3;
  v70 = v18;
  v20 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v73);
  if (v20 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v70))
  {
LABEL_68:
    v23 = 0;
    v36 = 0;
    goto LABEL_69;
  }
  mlir::IntegerAttr::getValue(&v73, (llvm::APInt *)&v86);
  v21 = (unint64_t *)&v84;
  mlir::IntegerAttr::getValue(&v70, (llvm::APInt *)&v84);
  v22 = v85;
  if (v85 >= 0x41)
  {
    if (v22 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v84) > 0x40)
    {
      v23 = 0;
      goto LABEL_78;
    }
    v21 = v84;
  }
  v23 = *v21 <= v22;
LABEL_78:
  DWORD2(v90) = v87;
  if (v87 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v90, &v86);
  else
    *(_QWORD *)&v90 = v86;
  llvm::APInt::operator<<=((uint64_t)&v90, (uint64_t)&v84);
  DWORD2(v92) = DWORD2(v90);
  *(_QWORD *)&v92 = v90;
  LOBYTE(v93[0]) = 1;
  if (v85 >= 0x41 && v84)
    MEMORY[0x20BD002D4](v84, 0x1000C8000313F17);
  if (v87 >= 0x41 && v86)
    MEMORY[0x20BD002D4](v86, 0x1000C8000313F17);
  v36 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v92);
  if (LOBYTE(v93[0]))
  {
LABEL_88:
    if (DWORD2(v92) >= 0x41)
    {
      if ((_QWORD)v92)
        MEMORY[0x20BD002D4](v92, 0x1000C8000313F17);
    }
  }
LABEL_69:
  if (!v23)
    goto LABEL_70;
  return v36 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::ShRUIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v6;
  unsigned int v7;
  __int128 *v8;
  BOOL v9;
  uint64_t canMapOperands;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t Value;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t Type;
  uint64_t v36;
  int v37;
  unint64_t NumElements;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  const void **v47;
  char *Address;
  llvm::APInt *v49;
  unsigned int v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const void **v60;
  unsigned int v61;
  const void *v62;
  unsigned int v63;
  const void *v64;
  unsigned int v65;
  char v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 v76;
  _QWORD v77[2];
  _QWORD *v78;
  uint64_t v79;
  unint64_t *v80;
  unsigned int v81;
  const void *v82;
  unsigned int v83;
  unint64_t *v84;
  unsigned int v85;
  const void *v86;
  unsigned int v87;
  const void *v88;
  unsigned int v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _OWORD v93[4];
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)(a2 + 40);
  v4 = v3[1];
  if (!v4)
    goto LABEL_17;
  DWORD2(v92) = 1;
  *(_QWORD *)&v92 = 0;
  *(_QWORD *)&v90 = &v92;
  v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v90, v4);
  v7 = DWORD2(v92);
  if (!v6)
  {
    v9 = 0;
    if (DWORD2(v92) < 0x41)
      goto LABEL_12;
    goto LABEL_10;
  }
  if (DWORD2(v92) < 0x41)
  {
    v8 = &v92;
    goto LABEL_9;
  }
  if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v92) <= 0x40)
  {
    v8 = (__int128 *)v92;
LABEL_9:
    v9 = *(_QWORD *)v8 == 0;
    if (v7 < 0x41)
      goto LABEL_12;
LABEL_10:
    if ((_QWORD)v92)
      MEMORY[0x20BD002D4](v92, 0x1000C8000313F17);
LABEL_12:
    if (v9)
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) | 4;
    goto LABEL_16;
  }
  if ((_QWORD)v92)
    MEMORY[0x20BD002D4](v92, 0x1000C8000313F17);
LABEL_16:
  v3 = *(uint64_t **)(a2 + 40);
LABEL_17:
  canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(_QWORD *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    goto LABEL_70;
  }
  v12 = v3[1];
  if (v12)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v12 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
      goto LABEL_70;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8))
    {
      v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8);
      *(_QWORD *)&v92 = canMapOperands;
      *((_QWORD *)&v92 + 1) = v13;
      canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v92);
    }
    else
    {
      canMapOperands = 0;
      v92 = 0uLL;
    }
  }
  else
  {
    v92 = 0uLL;
  }
  v14 = (_QWORD *)v3[1];
  if (!v14)
  {
    v92 = 0uLL;
LABEL_70:
    v36 = 0;
    return v36 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v14 + 8))
  {
    v92 = 0uLL;
    goto LABEL_70;
  }
  v15 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v14 + 8);
  *(_QWORD *)&v92 = v14;
  *((_QWORD *)&v92 + 1) = v15;
  v16 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v92);
  if (!canMapOperands)
    goto LABEL_70;
  if (!v16)
    goto LABEL_70;
  if (canMapOperands != v16)
    goto LABEL_70;
  v17 = *v3;
  if (*v3)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v17 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
      goto LABEL_70;
  }
  v18 = v3[1];
  if (!v18)
    goto LABEL_70;
  if (!v17)
    goto LABEL_70;
  v19 = *(void **)(*(_QWORD *)v18 + 136);
  if (v19 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    goto LABEL_70;
  if (v19 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    || *(_UNKNOWN **)(*(_QWORD *)v17 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3))
      v24 = v17;
    else
      v24 = 0;
    *(_QWORD *)&v92 = v24;
    if (v24 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v92))
    {
      v25 = v3[1];
      v26 = mlir::DenseElementsAttr::classof(v25) ? v25 : 0;
      *(_QWORD *)&v92 = v26;
      if (v26)
      {
        if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v92))
        {
          v27 = v3[1];
          v73 = *v3;
          v70 = v27;
          Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73);
          if (Value != mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v70))
            goto LABEL_68;
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v73, (uint64_t)&v92);
          v90 = v92;
          v91 = v93[0];
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v90, (llvm::APInt *)&v82);
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v70, (uint64_t)&v92);
          v90 = v92;
          v91 = v93[0];
          v29 = (unint64_t *)&v80;
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v90, (llvm::APInt *)&v80);
          v30 = v81;
          if (v81 >= 0x41)
          {
            if (v30 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v80) > 0x40)
            {
              v23 = 0;
              goto LABEL_166;
            }
            v29 = v80;
          }
          v23 = *v29 <= v30;
LABEL_166:
          DWORD2(v90) = v83;
          if (v83 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v90, &v82);
          else
            *(_QWORD *)&v90 = v82;
          llvm::APInt::lshrInPlace((llvm::APInt *)&v90, (const llvm::APInt *)&v80);
          DWORD2(v92) = DWORD2(v90);
          *(_QWORD *)&v92 = v90;
          LOBYTE(v93[0]) = 1;
          if (v81 >= 0x41 && v80)
            MEMORY[0x20BD002D4](v80, 0x1000C8000313F17);
          if (v83 >= 0x41 && v82)
            MEMORY[0x20BD002D4](v82, 0x1000C8000313F17);
          v59 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
          v36 = mlir::DenseElementsAttr::get(canMapOperands, v59, (llvm::APInt *)&v92, 1);
          if (LOBYTE(v93[0]))
            goto LABEL_88;
          goto LABEL_69;
        }
      }
    }
    if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v3 + 8)
      || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v3[1] + 8))
    {
      goto LABEL_70;
    }
    v31 = (_QWORD *)*v3;
    if (*v3)
      v32 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v31 + 8);
    else
      v32 = 0;
    v78 = v31;
    v79 = v32;
    v33 = (_QWORD *)v3[1];
    if (v33)
      v34 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v33 + 8);
    else
      v34 = 0;
    v77[0] = v33;
    v77[1] = v34;
    Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v78);
    if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77))
      goto LABEL_68;
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v78, (uint64_t)&v90);
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v77, (uint64_t)&v73);
    v36 = 0;
    v23 = 0;
    v37 = v76;
    if (BYTE8(v91) && v76)
    {
      LOWORD(v70) = v90;
      if ((_BYTE)v90)
        v71 = *((_QWORD *)&v90 + 1);
      else
        (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)&v90 + 1) + 16))(&v71);
      v72 = v91;
      v67 = v73;
      if ((_BYTE)v73)
        v68 = v74;
      else
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v74 + 16))(&v68);
      v69 = v75;
      *(_QWORD *)&v92 = v93;
      *((_QWORD *)&v92 + 1) = 0x400000000;
      NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v78, v79);
      llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v92, NumElements);
      v39 = mlir::ElementsAttr::getNumElements((uint64_t)v78, v79);
      if (v39)
      {
        v40 = v39;
        v41 = v72;
        while (1)
        {
          if (BYTE1(v70))
            v42 = 0;
          else
            v42 = v41;
          if ((_BYTE)v70)
          {
            v43 = v71 + 16 * v42;
            v63 = *(_DWORD *)(v43 + 8);
            if (v63 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v62, (const void **)v43);
            else
              v62 = *(const void **)v43;
          }
          else
          {
            (*(void (**)(const void **__return_ptr))(*(_QWORD *)v71 + 24))(&v62);
          }
          if (HIBYTE(v67))
            v44 = 0;
          else
            v44 = v69;
          if ((_BYTE)v67)
          {
            v45 = v68 + 16 * v44;
            v46 = *(_DWORD *)(v45 + 8);
            v61 = v46;
            if (v46 <= 0x40)
            {
              v60 = *(const void ***)v45;
              v47 = (const void **)&v60;
              goto LABEL_119;
            }
            llvm::APInt::initSlowCase((llvm::APInt *)&v60, (const void **)v45);
          }
          else
          {
            (*(void (**)(const void ***__return_ptr))(*(_QWORD *)v68 + 24))(&v60);
          }
          v46 = v61;
          if (v61 >= 0x41)
          {
            if (v46 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v60) > 0x40)
            {
              v23 = 0;
              goto LABEL_120;
            }
            v47 = v60;
          }
          else
          {
            v47 = (const void **)&v60;
          }
LABEL_119:
          v23 = (unint64_t)*v47 <= v46;
LABEL_120:
          v89 = v63;
          if (v63 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v88, &v62);
          else
            v88 = v62;
          llvm::APInt::lshrInPlace((llvm::APInt *)&v88, (const llvm::APInt *)&v60);
          v65 = v89;
          v64 = v88;
          v66 = 1;
          if (v61 >= 0x41 && v60)
            MEMORY[0x20BD002D4](v60, 0x1000C8000313F17);
          if (v63 >= 0x41 && v62)
            MEMORY[0x20BD002D4](v62, 0x1000C8000313F17);
          if (!v66)
          {
            v36 = 0;
            goto LABEL_140;
          }
          Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v92, (unint64_t)&v64, 1);
          v49 = (llvm::APInt *)(v92 + 16 * DWORD2(v92));
          v50 = *((_DWORD *)Address + 2);
          *((_DWORD *)v49 + 2) = v50;
          if (v50 > 0x40)
            llvm::APInt::initSlowCase(v49, (const void **)Address);
          else
            *(_QWORD *)v49 = *(_QWORD *)Address;
          ++DWORD2(v92);
          if (v66 && v65 >= 0x41 && v64)
            MEMORY[0x20BD002D4](v64, 0x1000C8000313F17);
          v41 = ++v72;
          ++v69;
          if (!--v40)
            goto LABEL_138;
        }
      }
      v23 = 0;
LABEL_138:
      v51 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
      v36 = mlir::DenseElementsAttr::get(canMapOperands, v51, (llvm::APInt *)v92, DWORD2(v92));
LABEL_140:
      v52 = (char *)v92;
      if (DWORD2(v92))
      {
        v53 = 16 * DWORD2(v92);
        do
        {
          if (*(_DWORD *)&v52[v53 - 8] >= 0x41u)
          {
            v54 = *(_QWORD *)&v52[v53 - 16];
            if (v54)
              MEMORY[0x20BD002D4](v54, 0x1000C8000313F17);
          }
          v53 -= 16;
        }
        while (v53);
        v52 = (char *)v92;
      }
      if (v52 != (char *)v93)
        free(v52);
      if (!(_BYTE)v67)
      {
        v55 = v68;
        v68 = 0;
        if (v55)
          (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
      }
      if (!(_BYTE)v70)
      {
        v56 = v71;
        v71 = 0;
        if (v56)
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
      }
      v37 = v76;
    }
    if (v37)
    {
      if (!(_BYTE)v73)
      {
        v57 = v74;
        v74 = 0;
        if (v57)
          (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
      }
    }
    if (BYTE8(v91))
    {
      if (!(_BYTE)v90)
      {
        v58 = *((_QWORD *)&v90 + 1);
        *((_QWORD *)&v90 + 1) = 0;
        if (v58)
          (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
      }
    }
    goto LABEL_69;
  }
  v73 = *v3;
  v70 = v18;
  v20 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v73);
  if (v20 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v70))
  {
LABEL_68:
    v23 = 0;
    v36 = 0;
    goto LABEL_69;
  }
  mlir::IntegerAttr::getValue(&v73, (llvm::APInt *)&v86);
  v21 = (unint64_t *)&v84;
  mlir::IntegerAttr::getValue(&v70, (llvm::APInt *)&v84);
  v22 = v85;
  if (v85 >= 0x41)
  {
    if (v22 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v84) > 0x40)
    {
      v23 = 0;
      goto LABEL_78;
    }
    v21 = v84;
  }
  v23 = *v21 <= v22;
LABEL_78:
  DWORD2(v90) = v87;
  if (v87 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v90, &v86);
  else
    *(_QWORD *)&v90 = v86;
  llvm::APInt::lshrInPlace((llvm::APInt *)&v90, (const llvm::APInt *)&v84);
  DWORD2(v92) = DWORD2(v90);
  *(_QWORD *)&v92 = v90;
  LOBYTE(v93[0]) = 1;
  if (v85 >= 0x41 && v84)
    MEMORY[0x20BD002D4](v84, 0x1000C8000313F17);
  if (v87 >= 0x41 && v86)
    MEMORY[0x20BD002D4](v86, 0x1000C8000313F17);
  v36 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v92);
  if (LOBYTE(v93[0]))
  {
LABEL_88:
    if (DWORD2(v92) >= 0x41)
    {
      if ((_QWORD)v92)
        MEMORY[0x20BD002D4](v92, 0x1000C8000313F17);
    }
  }
LABEL_69:
  if (!v23)
    goto LABEL_70;
  return v36 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::ShRSIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v6;
  unsigned int v7;
  __int128 *v8;
  BOOL v9;
  uint64_t canMapOperands;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t **v21;
  unint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t Value;
  unint64_t **v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t Type;
  uint64_t v36;
  int v37;
  unint64_t NumElements;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t **v47;
  char *Address;
  llvm::APInt *v49;
  unsigned int v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t **v60;
  unsigned int v61;
  const void *v62;
  unsigned int v63;
  const void *v64;
  unsigned int v65;
  char v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 v76;
  _QWORD v77[2];
  _QWORD *v78;
  uint64_t v79;
  unint64_t **v80;
  unsigned int v81;
  const void *v82;
  unsigned int v83;
  unint64_t **v84;
  unsigned int v85;
  const void *v86;
  unsigned int v87;
  const void *v88;
  unsigned int v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _OWORD v93[4];
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)(a2 + 40);
  v4 = v3[1];
  if (!v4)
    goto LABEL_17;
  DWORD2(v92) = 1;
  *(_QWORD *)&v92 = 0;
  *(_QWORD *)&v90 = &v92;
  v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v90, v4);
  v7 = DWORD2(v92);
  if (!v6)
  {
    v9 = 0;
    if (DWORD2(v92) < 0x41)
      goto LABEL_12;
    goto LABEL_10;
  }
  if (DWORD2(v92) < 0x41)
  {
    v8 = &v92;
    goto LABEL_9;
  }
  if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v92) <= 0x40)
  {
    v8 = (__int128 *)v92;
LABEL_9:
    v9 = *(_QWORD *)v8 == 0;
    if (v7 < 0x41)
      goto LABEL_12;
LABEL_10:
    if ((_QWORD)v92)
      MEMORY[0x20BD002D4](v92, 0x1000C8000313F17);
LABEL_12:
    if (v9)
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) | 4;
    goto LABEL_16;
  }
  if ((_QWORD)v92)
    MEMORY[0x20BD002D4](v92, 0x1000C8000313F17);
LABEL_16:
  v3 = *(uint64_t **)(a2 + 40);
LABEL_17:
  canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(_QWORD *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    goto LABEL_70;
  }
  v12 = v3[1];
  if (v12)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v12 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
      goto LABEL_70;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8))
    {
      v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)canMapOperands + 8);
      *(_QWORD *)&v92 = canMapOperands;
      *((_QWORD *)&v92 + 1) = v13;
      canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v92);
    }
    else
    {
      canMapOperands = 0;
      v92 = 0uLL;
    }
  }
  else
  {
    v92 = 0uLL;
  }
  v14 = (_QWORD *)v3[1];
  if (!v14)
  {
    v92 = 0uLL;
LABEL_70:
    v36 = 0;
    return v36 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v14 + 8))
  {
    v92 = 0uLL;
    goto LABEL_70;
  }
  v15 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v14 + 8);
  *(_QWORD *)&v92 = v14;
  *((_QWORD *)&v92 + 1) = v15;
  v16 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v92);
  if (!canMapOperands)
    goto LABEL_70;
  if (!v16)
    goto LABEL_70;
  if (canMapOperands != v16)
    goto LABEL_70;
  v17 = *v3;
  if (*v3)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v17 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
      goto LABEL_70;
  }
  v18 = v3[1];
  if (!v18)
    goto LABEL_70;
  if (!v17)
    goto LABEL_70;
  v19 = *(void **)(*(_QWORD *)v18 + 136);
  if (v19 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    goto LABEL_70;
  if (v19 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    || *(_UNKNOWN **)(*(_QWORD *)v17 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3))
      v24 = v17;
    else
      v24 = 0;
    *(_QWORD *)&v92 = v24;
    if (v24 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v92))
    {
      v25 = v3[1];
      v26 = mlir::DenseElementsAttr::classof(v25) ? v25 : 0;
      *(_QWORD *)&v92 = v26;
      if (v26)
      {
        if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v92))
        {
          v27 = v3[1];
          v73 = *v3;
          v70 = v27;
          Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73);
          if (Value != mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v70))
            goto LABEL_68;
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v73, (uint64_t)&v92);
          v90 = v92;
          v91 = v93[0];
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v90, (llvm::APInt *)&v82);
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v70, (uint64_t)&v92);
          v90 = v92;
          v91 = v93[0];
          v29 = (unint64_t **)&v80;
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v90, (llvm::APInt *)&v80);
          v30 = v81;
          if (v81 >= 0x41)
          {
            if (v30 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v80) > 0x40)
            {
              v23 = 0;
              goto LABEL_166;
            }
            v29 = v80;
          }
          v23 = (unint64_t)*v29 <= v30;
LABEL_166:
          DWORD2(v90) = v83;
          if (v83 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v90, &v82);
          else
            *(_QWORD *)&v90 = v82;
          llvm::APInt::ashrInPlace((unsigned int *)&v90, (unint64_t **)&v80);
          DWORD2(v92) = DWORD2(v90);
          *(_QWORD *)&v92 = v90;
          LOBYTE(v93[0]) = 1;
          if (v81 >= 0x41 && v80)
            MEMORY[0x20BD002D4](v80, 0x1000C8000313F17);
          if (v83 >= 0x41 && v82)
            MEMORY[0x20BD002D4](v82, 0x1000C8000313F17);
          v59 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
          v36 = mlir::DenseElementsAttr::get(canMapOperands, v59, (llvm::APInt *)&v92, 1);
          if (LOBYTE(v93[0]))
            goto LABEL_88;
          goto LABEL_69;
        }
      }
    }
    if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*v3 + 8)
      || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v3[1] + 8))
    {
      goto LABEL_70;
    }
    v31 = (_QWORD *)*v3;
    if (*v3)
      v32 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v31 + 8);
    else
      v32 = 0;
    v78 = v31;
    v79 = v32;
    v33 = (_QWORD *)v3[1];
    if (v33)
      v34 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v33 + 8);
    else
      v34 = 0;
    v77[0] = v33;
    v77[1] = v34;
    Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v78);
    if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77))
      goto LABEL_68;
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v78, (uint64_t)&v90);
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v77, (uint64_t)&v73);
    v36 = 0;
    v23 = 0;
    v37 = v76;
    if (BYTE8(v91) && v76)
    {
      LOWORD(v70) = v90;
      if ((_BYTE)v90)
        v71 = *((_QWORD *)&v90 + 1);
      else
        (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)&v90 + 1) + 16))(&v71);
      v72 = v91;
      v67 = v73;
      if ((_BYTE)v73)
        v68 = v74;
      else
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v74 + 16))(&v68);
      v69 = v75;
      *(_QWORD *)&v92 = v93;
      *((_QWORD *)&v92 + 1) = 0x400000000;
      NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v78, v79);
      llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v92, NumElements);
      v39 = mlir::ElementsAttr::getNumElements((uint64_t)v78, v79);
      if (v39)
      {
        v40 = v39;
        v41 = v72;
        while (1)
        {
          if (BYTE1(v70))
            v42 = 0;
          else
            v42 = v41;
          if ((_BYTE)v70)
          {
            v43 = v71 + 16 * v42;
            v63 = *(_DWORD *)(v43 + 8);
            if (v63 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v62, (const void **)v43);
            else
              v62 = *(const void **)v43;
          }
          else
          {
            (*(void (**)(const void **__return_ptr))(*(_QWORD *)v71 + 24))(&v62);
          }
          if (HIBYTE(v67))
            v44 = 0;
          else
            v44 = v69;
          if ((_BYTE)v67)
          {
            v45 = v68 + 16 * v44;
            v46 = *(_DWORD *)(v45 + 8);
            v61 = v46;
            if (v46 <= 0x40)
            {
              v60 = *(unint64_t ***)v45;
              v47 = (unint64_t **)&v60;
              goto LABEL_119;
            }
            llvm::APInt::initSlowCase((llvm::APInt *)&v60, (const void **)v45);
          }
          else
          {
            (*(void (**)(unint64_t ***__return_ptr))(*(_QWORD *)v68 + 24))(&v60);
          }
          v46 = v61;
          if (v61 >= 0x41)
          {
            if (v46 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v60) > 0x40)
            {
              v23 = 0;
              goto LABEL_120;
            }
            v47 = v60;
          }
          else
          {
            v47 = (unint64_t **)&v60;
          }
LABEL_119:
          v23 = (unint64_t)*v47 <= v46;
LABEL_120:
          v89 = v63;
          if (v63 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v88, &v62);
          else
            v88 = v62;
          llvm::APInt::ashrInPlace((unsigned int *)&v88, (unint64_t **)&v60);
          v65 = v89;
          v64 = v88;
          v66 = 1;
          if (v61 >= 0x41 && v60)
            MEMORY[0x20BD002D4](v60, 0x1000C8000313F17);
          if (v63 >= 0x41 && v62)
            MEMORY[0x20BD002D4](v62, 0x1000C8000313F17);
          if (!v66)
          {
            v36 = 0;
            goto LABEL_140;
          }
          Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v92, (unint64_t)&v64, 1);
          v49 = (llvm::APInt *)(v92 + 16 * DWORD2(v92));
          v50 = *((_DWORD *)Address + 2);
          *((_DWORD *)v49 + 2) = v50;
          if (v50 > 0x40)
            llvm::APInt::initSlowCase(v49, (const void **)Address);
          else
            *(_QWORD *)v49 = *(_QWORD *)Address;
          ++DWORD2(v92);
          if (v66 && v65 >= 0x41 && v64)
            MEMORY[0x20BD002D4](v64, 0x1000C8000313F17);
          v41 = ++v72;
          ++v69;
          if (!--v40)
            goto LABEL_138;
        }
      }
      v23 = 0;
LABEL_138:
      v51 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)canMapOperands + 8);
      v36 = mlir::DenseElementsAttr::get(canMapOperands, v51, (llvm::APInt *)v92, DWORD2(v92));
LABEL_140:
      v52 = (char *)v92;
      if (DWORD2(v92))
      {
        v53 = 16 * DWORD2(v92);
        do
        {
          if (*(_DWORD *)&v52[v53 - 8] >= 0x41u)
          {
            v54 = *(_QWORD *)&v52[v53 - 16];
            if (v54)
              MEMORY[0x20BD002D4](v54, 0x1000C8000313F17);
          }
          v53 -= 16;
        }
        while (v53);
        v52 = (char *)v92;
      }
      if (v52 != (char *)v93)
        free(v52);
      if (!(_BYTE)v67)
      {
        v55 = v68;
        v68 = 0;
        if (v55)
          (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
      }
      if (!(_BYTE)v70)
      {
        v56 = v71;
        v71 = 0;
        if (v56)
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
      }
      v37 = v76;
    }
    if (v37)
    {
      if (!(_BYTE)v73)
      {
        v57 = v74;
        v74 = 0;
        if (v57)
          (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
      }
    }
    if (BYTE8(v91))
    {
      if (!(_BYTE)v90)
      {
        v58 = *((_QWORD *)&v90 + 1);
        *((_QWORD *)&v90 + 1) = 0;
        if (v58)
          (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
      }
    }
    goto LABEL_69;
  }
  v73 = *v3;
  v70 = v18;
  v20 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v73);
  if (v20 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v70))
  {
LABEL_68:
    v23 = 0;
    v36 = 0;
    goto LABEL_69;
  }
  mlir::IntegerAttr::getValue(&v73, (llvm::APInt *)&v86);
  v21 = (unint64_t **)&v84;
  mlir::IntegerAttr::getValue(&v70, (llvm::APInt *)&v84);
  v22 = v85;
  if (v85 >= 0x41)
  {
    if (v22 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v84) > 0x40)
    {
      v23 = 0;
      goto LABEL_78;
    }
    v21 = v84;
  }
  v23 = (unint64_t)*v21 <= v22;
LABEL_78:
  DWORD2(v90) = v87;
  if (v87 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v90, &v86);
  else
    *(_QWORD *)&v90 = v86;
  llvm::APInt::ashrInPlace((unsigned int *)&v90, (unint64_t **)&v84);
  DWORD2(v92) = DWORD2(v90);
  *(_QWORD *)&v92 = v90;
  LOBYTE(v93[0]) = 1;
  if (v85 >= 0x41 && v84)
    MEMORY[0x20BD002D4](v84, 0x1000C8000313F17);
  if (v87 >= 0x41 && v86)
    MEMORY[0x20BD002D4](v86, 0x1000C8000313F17);
  v36 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v92);
  if (LOBYTE(v93[0]))
  {
LABEL_88:
    if (DWORD2(v92) >= 0x41)
    {
      if ((_QWORD)v92)
        MEMORY[0x20BD002D4](v92, 0x1000C8000313F17);
    }
  }
LABEL_69:
  if (!v23)
    goto LABEL_70;
  return v36 & 0xFFFFFFFFFFFFFFFBLL;
}

void llvm::APFloat::getLargest(llvm::APFloatBase *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  llvm::APFloatBase *v6;
  llvm::detail::IEEEFloat *v7;
  int v8;

  v5 = (uint64_t *)(a3 + 8);
  v6 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(a1);
  if (v6 == a1)
  {
    v7 = (llvm::detail::IEEEFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v5, (uint64_t)a1);
    v8 = a2;
    if (v6 != (llvm::APFloatBase *)*v5)
      goto LABEL_3;
  }
  else
  {
    v7 = (llvm::detail::IEEEFloat *)llvm::detail::IEEEFloat::IEEEFloat(v5, (uint64_t)a1);
    v8 = a2;
    if (v6 != (llvm::APFloatBase *)*v5)
    {
LABEL_3:
      llvm::detail::IEEEFloat::makeLargest(v7, v8);
      return;
    }
  }
  llvm::detail::DoubleAPFloat::makeLargest(v7, v8);
}

void llvm::APInt::getSignedMinValue(llvm::APInt *this@<X0>, llvm::APInt *a2@<X8>)
{
  int v2;
  uint64_t v3;

  v2 = (int)this;
  v3 = (uint64_t)a2;
  *((_DWORD *)a2 + 2) = (_DWORD)this;
  if (this > 0x40)
  {
    llvm::APInt::initSlowCase(a2, 0, 0);
    LODWORD(a2) = v2 - 1;
    if (*(_DWORD *)(v3 + 8) > 0x40u)
      v3 = *(_QWORD *)v3 + 8 * (a2 >> 6);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    LOBYTE(a2) = (_BYTE)this - 1;
  }
  *(_QWORD *)v3 |= 1 << (char)a2;
}

void llvm::APInt::getSignedMaxValue(llvm::APInt *this@<X0>, llvm::APInt *a2@<X8>)
{
  int v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (int)this;
  v3 = (uint64_t)a2;
  *((_DWORD *)a2 + 2) = (_DWORD)this;
  if (this > 0x40)
  {
    llvm::APInt::initSlowCase(a2, -1, 1);
    LODWORD(v4) = v2 - 1;
    if (*(_DWORD *)(v3 + 8) > 0x40u)
      v3 = *(_QWORD *)v3 + 8 * (v4 >> 6);
  }
  else
  {
    v4 = 0xFFFFFFFFFFFFFFFFLL >> -(char)this;
    if (!(_DWORD)this)
      v4 = 0;
    *(_QWORD *)v3 = v4;
    LOBYTE(v4) = (_BYTE)this - 1;
  }
  *(_QWORD *)v3 &= ~(1 << v4);
}

void llvm::APInt::getMaxValue(llvm::APInt *this@<X0>, llvm::APInt *a2@<X8>)
{
  unint64_t v2;

  *((_DWORD *)a2 + 2) = (_DWORD)this;
  if (this > 0x40)
  {
    llvm::APInt::initSlowCase(a2, -1, 1);
  }
  else
  {
    v2 = 0xFFFFFFFFFFFFFFFFLL >> -(char)this;
    if (!(_DWORD)this)
      v2 = 0;
    *(_QWORD *)a2 = v2;
  }
}

uint64_t mlir::emitOptionalError<char const(&)[39]>(uint64_t a1, char a2, const char *a3)
{
  int *v4;
  char *v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  int64_t v19;
  int v20;
  const char *v21;
  size_t v22;
  _QWORD v23[3];
  void *v24;
  unsigned int v25;
  unsigned int v26;
  _BYTE v27[96];
  void *v28;
  _QWORD *v29;
  void *__p;
  _QWORD *v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  mlir::emitError(a1, (uint64_t)v23);
  if (v23[0])
  {
    v20 = 3;
    v21 = a3;
    v22 = strlen(a3);
    v4 = &v20;
    v5 = (char *)v24;
    if (v25 >= v26)
    {
      v18 = v25 + 1;
      if (v24 <= &v20 && (char *)v24 + 24 * v25 > (char *)&v20)
      {
        v19 = (char *)&v20 - (_BYTE *)v24;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v18, 24);
        v5 = (char *)v24;
        v4 = (int *)((char *)v24 + v19);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v18, 24);
        v4 = &v20;
        v5 = (char *)v24;
      }
    }
    v6 = &v5[24 * v25];
    v7 = *(_OWORD *)v4;
    *((_QWORD *)v6 + 2) = *((_QWORD *)v4 + 2);
    *(_OWORD *)v6 = v7;
    ++v25;
  }
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
  if (v23[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  if (v32)
  {
    v9 = __p;
    if (__p)
    {
      v10 = v31;
      v11 = __p;
      if (v31 != __p)
      {
        do
          v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
        while (v10 != v9);
        v11 = __p;
      }
      v31 = v9;
      operator delete(v11);
    }
    v12 = v28;
    if (v28)
    {
      v13 = v29;
      v14 = v28;
      if (v29 != v28)
      {
        do
        {
          v16 = *--v13;
          v15 = v16;
          *v13 = 0;
          if (v16)
            MEMORY[0x20BD002D4](v15, 0x1000C8077774924);
        }
        while (v13 != v12);
        v14 = v28;
      }
      v29 = v12;
      operator delete(v14);
    }
    if (v24 != v27)
      free(v24);
  }
  return v8;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::OrIOp,mlir::Value &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  ZinIrHalH13g *v12;
  ZinIrHalH13g *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  _QWORD v20[39];

  v20[38] = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.ori", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"arith.ori";
    v18[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::arith::AndIOp::build(v11, (uint64_t)v20, *a3, *a4);
  v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::OrIOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v13;
}

uint64_t mlir::arith::detail::AddFOpGenericAdaptorBase::AddFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.addf", 10, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::arith::AddFOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;
  int v44;
  const char *v45;
  uint64_t v46;
  _QWORD v47[3];
  void *v48;
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[96];
  void *v52;
  _QWORD *v53;
  void *__p;
  _QWORD *v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v43 = v6;
  if (!v6)
  {
    a3(v47, a4);
    if (v47[0])
    {
      v44 = 3;
      v45 = "expected DictionaryAttr to set properties";
      v46 = 41;
      v26 = &v44;
      v27 = (char *)v48;
      if (v49 >= v50)
      {
        v37 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          v40 = (char *)&v44 - (_BYTE *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          v27 = (char *)v48;
          v26 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          v26 = &v44;
          v27 = (char *)v48;
        }
      }
      v28 = &v27[24 * v49];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v28 = v29;
      ++v49;
      if (v47[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
    }
    if (!v56)
      return 0;
    v30 = __p;
    if (__p)
    {
      v31 = v55;
      v32 = __p;
      if (v55 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v55 = v30;
      operator delete(v32);
    }
    v21 = v52;
    if (!v52)
      goto LABEL_43;
    v33 = v53;
    v23 = v52;
    if (v53 == v52)
      goto LABEL_42;
    do
    {
      v35 = *--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        MEMORY[0x20BD002D4](v34, 0x1000C8077774924);
    }
    while (v33 != v21);
    goto LABEL_41;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v43, "fastmath", 8uLL);
  if (!v8)
    return 1;
  v9 = v8;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v47, a4);
  if (v47[0])
  {
    v44 = 3;
    v46 = 53;
    v10 = &v44;
    v11 = (char *)v48;
    if (v49 >= v50)
    {
      v38 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        v41 = (char *)&v44 - (_BYTE *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        v11 = (char *)v48;
        v10 = (int *)((char *)v48 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        v10 = &v44;
        v11 = (char *)v48;
      }
    }
    v12 = &v11[24 * v49];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v12 = v13;
    ++v49;
    if (v47[0])
    {
      v14 = &v44;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, v9);
      v15 = (char *)v48;
      if (v49 >= v50)
      {
        v39 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          v42 = (char *)&v44 - (_BYTE *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          v15 = (char *)v48;
          v14 = (int *)((char *)v48 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          v14 = &v44;
          v15 = (char *)v48;
        }
      }
      v16 = &v15[24 * v49];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      ++v49;
      if (v47[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
    }
  }
  if (!v56)
    return 0;
  v18 = __p;
  if (__p)
  {
    v19 = v55;
    v20 = __p;
    if (v55 != __p)
    {
      do
        v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
      while (v19 != v18);
      v20 = __p;
    }
    v55 = v18;
    operator delete(v20);
  }
  v21 = v52;
  if (v52)
  {
    v22 = v53;
    v23 = v52;
    if (v53 == v52)
      goto LABEL_42;
    do
    {
      v25 = *--v22;
      v24 = v25;
      *v22 = 0;
      if (v25)
        MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
    }
    while (v22 != v21);
LABEL_41:
    v23 = v52;
LABEL_42:
    v53 = v21;
    operator delete(v23);
  }
LABEL_43:
  if (v48 != v51)
    free(v48);
  return 0;
}

uint64_t mlir::arith::AddFOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t DictionaryAttr;
  mlir::DictionaryAttr *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  v13 = v15;
  v14 = 0x300000000;
  if (!*a2)
    return 0;
  NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"fastmath", 8, *a2);
  v4 = v3;
  v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    v5 = v14;
  }
  v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *v6 = NamedAttr;
  v6[1] = v4;
  v7 = v13;
  v8 = __CFADD__((_DWORD)v14, 1);
  v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    DictionaryAttr = 0;
    if (v13 == v15)
      return DictionaryAttr;
    goto LABEL_10;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (mlir::MLIRContext *)v13, v9);
  v7 = v13;
  if (v13 != v15)
LABEL_10:
    free(v7);
  return DictionaryAttr;
}

unint64_t mlir::arith::AddFOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1;
  unsigned __int8 v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *a1;
  v3 = &unk_254519000;
  if ((v2 & 1) == 0)
  {
    v18 = *a1;
    v1 = v18;
    v3 = &unk_254519000;
    if (v13)
    {
      v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v14 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      v1 = v18;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v4 = v3[373];
  if ((v5 & 1) == 0)
  {
    v17 = v3[373];
    v19 = v1;
    v4 = v17;
    v1 = v19;
    v3 = &unk_254519000;
    if (v15)
    {
      v16 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v16 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v16;
      v4 = v17;
      v1 = v19;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v6 = HIDWORD(v1);
  v7 = (v4 + 8 * v1) ^ HIDWORD(v1);
  v8 = 0x9DDFEA08EB382D69 * (v6 ^ ((0x9DDFEA08EB382D69 * v7) >> 47) ^ (0x9DDFEA08EB382D69 * v7));
  v9 = v8 ^ (v8 >> 47);
  v10 = v3[373] ^ ((0x9DDFEA08EB382D69 * v9) >> 32);
  v11 = 0x9DDFEA08EB382D69 * (v10 ^ (((0x759C16B48 * v9) & 0x7FFFFFFF8) + 8));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) ^ ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) >> 47));
}

unint64_t mlir::arith::AddFOp::getInherentAttr(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  if (a4 == 8 && *a3 == 0x6874616D74736166)
    return *a2 & 0xFFFFFFFFFFFFFF00 | *a2;
  else
    return 0;
}

_QWORD *mlir::arith::AddFOp::setInherentAttr(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a3 == 8 && *a2 == 0x6874616D74736166)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id)
        v4 = a4;
      else
        v4 = 0;
      *result = v4;
    }
    else
    {
      *result = 0;
    }
  }
  return result;
}

void mlir::arith::AddFOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"fastmath", 8, *a2);
}

BOOL mlir::arith::AddFOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;

  v6 = mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  return !v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, a3, a4);
}

uint64_t mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  const void ***v7;
  char *v8;
  char *v9;
  __int128 v10;
  const void ***v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  const void **v29;
  const char *v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE v38[96];
  void *v39;
  _QWORD *v40;
  void *__p;
  _QWORD *v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (!a1
    || *(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id)
  {
    return 1;
  }
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    v30 = "attribute '";
    v31 = 11;
    v7 = &v29;
    v8 = (char *)v35;
    if (v36 >= v37)
    {
      v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        v27 = (char *)&v29 - (_BYTE *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        v8 = (char *)v35;
        v7 = (const void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        v7 = &v29;
        v8 = (char *)v35;
      }
    }
    v9 = &v8[24 * v36];
    v10 = *(_OWORD *)v7;
    *((_QWORD *)v9 + 2) = v7[2];
    *(_OWORD *)v9 = v10;
    ++v36;
    if (v33)
    {
      v32 = 261;
      v29 = a2;
      v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        v30 = "' failed to satisfy constraint: Floating point fast math flags";
        v31 = 62;
        v11 = &v29;
        v12 = (char *)v35;
        if (v36 >= v37)
        {
          v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            v28 = (char *)&v29 - (_BYTE *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            v12 = (char *)v35;
            v11 = (const void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            v11 = &v29;
            v12 = (char *)v35;
          }
        }
        v13 = &v12[24 * v36];
        v14 = *(_OWORD *)v11;
        *((_QWORD *)v13 + 2) = v11[2];
        *(_OWORD *)v13 = v14;
        ++v36;
      }
    }
  }
  v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  if (v43)
  {
    v16 = __p;
    if (__p)
    {
      v17 = v42;
      v18 = __p;
      if (v42 != __p)
      {
        do
          v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        v18 = __p;
      }
      v42 = v16;
      operator delete(v18);
    }
    v19 = v39;
    if (v39)
    {
      v20 = v40;
      v21 = v39;
      if (v40 != v39)
      {
        do
        {
          v23 = *--v20;
          v22 = v23;
          *v20 = 0;
          if (v23)
            MEMORY[0x20BD002D4](v22, 0x1000C8077774924);
        }
        while (v20 != v19);
        v21 = v39;
      }
      v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38)
      free(v35);
  }
  return v15;
}

BOOL mlir::arith::AddFOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451A000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451A000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::AddFOpGenericAdaptorBase::Properties]";
        v15 = 107;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451A000;
      }
    }
    a1[33] = v5[276];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const void ***v14;
  char *v15;
  char *v16;
  __int128 v17;
  const void ***v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  _WORD v38[20];
  uint64_t v39;
  const void **v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[96];
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD *v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(a1, &v39))
    return 0;
  v4 = v39;
  if (!v39)
    return 1;
  v5 = *(void **)(*(_QWORD *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id)
    v4 = 0;
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id)
    return 1;
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    v41 = (unint64_t)"expected ";
    v42 = 9;
    v6 = &v40;
    v7 = (char *)v46;
    if (v47 >= v48)
    {
      v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v7 = (char *)v46;
        v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v6 = &v40;
        v7 = (char *)v46;
      }
    }
    v8 = &v7[24 * v47];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::FastMathFlagsAttr]";
  v41 = 80;
  v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10)
      v11 = v10;
    else
      v11 = v41;
    v12 = 18;
    if (v41 - v11 < 0x12)
      v12 = v41 - v11;
    v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1)
      --v13;
    v43 = 261;
    v40 = (const void **)((char *)v40 + v11 + v12);
    v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      v41 = (unint64_t)", but got: ";
      v42 = 11;
      v14 = &v40;
      v15 = (char *)v46;
      if (v47 >= v48)
      {
        v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          v36 = (char *)&v40 - (_BYTE *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v15 = (char *)v46;
          v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v14 = &v40;
          v15 = (char *)v46;
        }
      }
      v16 = &v15[24 * v47];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = v14[2];
      *(_OWORD *)v16 = v17;
      ++v47;
      if (v44)
      {
        v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        v19 = (char *)v46;
        if (v47 >= v48)
        {
          v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            v37 = (char *)&v40 - (_BYTE *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v19 = (char *)v46;
            v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v18 = &v40;
            v19 = (char *)v46;
          }
        }
        v20 = &v19[24 * v47];
        v21 = *(_OWORD *)v18;
        *((_QWORD *)v20 + 2) = v18[2];
        *(_OWORD *)v20 = v21;
        ++v47;
      }
    }
  }
  v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v23 = __p;
    if (__p)
    {
      v24 = v53;
      v25 = __p;
      if (v53 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p;
      }
      v53 = v23;
      operator delete(v25);
    }
    v26 = v50;
    if (v50)
    {
      v27 = v51;
      v28 = v50;
      if (v51 != v50)
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v50;
      }
      v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49)
      free(v46);
  }
  return v22;
}

uint64_t mlir::arith::AddFOp::writeProperties(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(*(_QWORD *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1) + 64));
}

uint64_t mlir::arith::AddFOp::getFastmathAttr(mlir::arith::AddFOp *this)
{
  return *(_QWORD *)(*(_QWORD *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)
                   + 64);
}

uint64_t mlir::arith::AddFOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v11;
  unsigned int v12;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v14[0] = a4;
  v14[1] = a5;
  v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        v12 = 0;
LABEL_6:
        bzero((void *)(*(_QWORD *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1)
        goto LABEL_6;
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  **(_QWORD **)a11 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  return 1;
}

mlir::MLIRContext *mlir::arith::AddFOp::populateDefaultProperties(uint64_t a1, mlir::MLIRContext **a2)
{
  mlir::MLIRContext *result;
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  result = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v4);
  if (!*a2)
  {
    result = (mlir::MLIRContext *)mlir::arith::FastMathFlagsAttr::get(result, 0);
    *a2 = result;
  }
  return result;
}

BOOL mlir::arith::AddFOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t NextResultAtOffset;
  uint64_t *v7;

  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v7 = v2;
  if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v3, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v7)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v4 = (uint64_t)(*this - 2);
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v5;
  void *v6;
  uint64_t v16;
  void *v19;
  const void ***v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  const void ***v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  const void ***v30;
  char *v31;
  char *v32;
  __int128 v33;
  const void ***v34;
  char *v35;
  char *v36;
  __int128 v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  unint64_t v53;
  BOOL v54;
  unint64_t v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  int64_t v59;
  const void **v60;
  const void **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  const void **v68;
  uint64_t v69;
  __int16 v70;
  const void **v71;
  const char *v72;
  uint64_t v73;
  _QWORD v74[3];
  void *v75;
  unsigned int v76;
  unsigned int v77;
  _BYTE v78[96];
  void *v79;
  _QWORD *v80;
  void *__p;
  _QWORD *v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v6 = (void *)*((_QWORD *)*a2 + 17);
  if (v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
  {
    return 1;
  }
  if (v6 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 1;
  }
  if (v6 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    v61 = a3;
    v63 = a4;
    v65 = a1;
    v71 = a2;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
    v5 = *a2;
    if (v47 < 1)
    {
      a4 = v63;
      a1 = v65;
      a3 = v61;
    }
    else
    {
      v48 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v5 + 1));
      v74[0] = a2;
      v74[1] = v48;
      v49 = *(void **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v74)
                     + 136);
      a4 = v63;
      a1 = v65;
      a3 = v61;
      if (v49 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        return 1;
      }
      v5 = *a2;
    }
  }
  v19 = (void *)v5[17];
  if (v19 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v19 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v60 = a3;
    v62 = a4;
    v64 = a1;
    v68 = a2;
    v69 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v5 + 1));
    v46 = *(void **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v68) + 136);
    if (v46 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
    {
      v16 = 1;
      a4 = v62;
      a1 = v64;
      a3 = v60;
      if (v46 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v46 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        return v16;
      }
      goto LABEL_39;
    }
    return 1;
  }
LABEL_39:
  v70 = 261;
  v68 = a3;
  v69 = a4;
  mlir::Operation::emitOpError(a1, &v68, (uint64_t)v74);
  if (v74[0])
  {
    LODWORD(v71) = 3;
    v72 = " #";
    v73 = 2;
    v20 = &v71;
    v21 = (char *)v75;
    if (v76 >= v77)
    {
      v50 = v76 + 1;
      if (v75 <= &v71 && (char *)v75 + 24 * v76 > (char *)&v71)
      {
        v56 = (char *)&v71 - (_BYTE *)v75;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v50, 24);
        v21 = (char *)v75;
        v20 = (const void ***)((char *)v75 + v56);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v50, 24);
        v20 = &v71;
        v21 = (char *)v75;
      }
    }
    v22 = &v21[24 * v76];
    v23 = *(_OWORD *)v20;
    *((_QWORD *)v22 + 2) = v20[2];
    *(_OWORD *)v22 = v23;
    v24 = ++v76;
    if (v74[0])
    {
      LODWORD(v71) = 5;
      v72 = (const char *)a5;
      v25 = &v71;
      v26 = (char *)v75;
      if (v24 >= v77)
      {
        v51 = v24 + 1;
        v52 = (char *)v75 + 24 * v24 > (char *)&v71;
        if (v75 <= &v71 && v52)
        {
          v57 = (char *)&v71 - (_BYTE *)v75;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v51, 24);
          v26 = (char *)v75;
          v25 = (const void ***)((char *)v75 + v57);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v51, 24);
          v25 = &v71;
          v26 = (char *)v75;
        }
      }
      v27 = &v26[24 * v76];
      v28 = *(_OWORD *)v25;
      *((_QWORD *)v27 + 2) = v25[2];
      *(_OWORD *)v27 = v28;
      v29 = ++v76;
      if (v74[0])
      {
        LODWORD(v71) = 3;
        v72 = " must be floating-point-like, but got ";
        v73 = 38;
        v30 = &v71;
        v31 = (char *)v75;
        if (v29 >= v77)
        {
          v53 = v29 + 1;
          v54 = (char *)v75 + 24 * v29 > (char *)&v71;
          if (v75 <= &v71 && v54)
          {
            v58 = (char *)&v71 - (_BYTE *)v75;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v53, 24);
            v31 = (char *)v75;
            v30 = (const void ***)((char *)v75 + v58);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v53, 24);
            v30 = &v71;
            v31 = (char *)v75;
          }
        }
        v32 = &v31[24 * v76];
        v33 = *(_OWORD *)v30;
        *((_QWORD *)v32 + 2) = v30[2];
        *(_OWORD *)v32 = v33;
        ++v76;
        if (v74[0])
        {
          v34 = &v71;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v71, (uint64_t)a2);
          v35 = (char *)v75;
          if (v76 >= v77)
          {
            v55 = v76 + 1;
            if (v75 <= &v71 && (char *)v75 + 24 * v76 > (char *)&v71)
            {
              v59 = (char *)&v71 - (_BYTE *)v75;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v55, 24);
              v35 = (char *)v75;
              v34 = (const void ***)((char *)v75 + v59);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v55, 24);
              v34 = &v71;
              v35 = (char *)v75;
            }
          }
          v36 = &v35[24 * v76];
          v37 = *(_OWORD *)v34;
          *((_QWORD *)v36 + 2) = v34[2];
          *(_OWORD *)v36 = v37;
          ++v76;
        }
      }
    }
  }
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v74);
  if (v74[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v74);
  if (v83)
  {
    v38 = __p;
    if (__p)
    {
      v39 = v82;
      v40 = __p;
      if (v82 != __p)
      {
        do
          v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
        while (v39 != v38);
        v40 = __p;
      }
      v82 = v38;
      operator delete(v40);
    }
    v41 = v79;
    if (v79)
    {
      v42 = v80;
      v43 = v79;
      if (v80 != v79)
      {
        do
        {
          v45 = *--v42;
          v44 = v45;
          *v42 = 0;
          if (v45)
            MEMORY[0x20BD002D4](v44, 0x1000C8077774924);
        }
        while (v42 != v41);
        v43 = v79;
      }
      v80 = v41;
      operator delete(v43);
    }
    if (v75 != v78)
      free(v75);
  }
  return v16;
}

BOOL mlir::arith::AddFOp::parse(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD __src[3];
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  v10 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v13, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v12, 1))
    return 0;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0;
    if (v10)
    {
      v4 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties>(a2);
      *v4 = v10;
    }
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
  {
    v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::AddFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
      {
        v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  _QWORD v21[3];
  void *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  void *__p;
  _QWORD *v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v20 = 0;
  v21[0] = a1;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t, BOOL (*)(mlir::AsmParser **, uint64_t *), _QWORD *))(*(_QWORD *)a1 + 416))(a1, &v20, a3, _ZN4llvm12function_refIFN4mlir11ParseResultERNS1_9AttributeENS1_4TypeEEE11callback_fnIZNS1_9AsmParser32parseCustomAttributeWithFallbackINS1_5arith17FastMathFlagsAttrEEENSt3__19enable_ifIXsr23detect_has_parse_methodIT_EE5valueES2_E4typeERSF_S5_EUlS4_S5_E_EES2_lS4_S5_, v21))return 0;
  v7 = v20;
  if (*(_UNKNOWN **)(*(_QWORD *)v20 + 136) != &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id)
    v7 = 0;
  *a2 = v7;
  if (v7)
    return 1;
  v18 = "invalid kind of attribute specified";
  v19 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v21, a1, v6, &v18);
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  if (v21[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
  if (v28)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v27;
      v12 = __p;
      if (v27 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v27 = v10;
      operator delete(v12);
    }
    v13 = v24;
    if (v24)
    {
      v14 = v25;
      v15 = v24;
      if (v25 != v24)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v24;
      }
      v25 = v13;
      operator delete(v15);
    }
    if (v22 != &v23)
      free(v22);
  }
  return v8;
}

void mlir::arith::AddFOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  uint64_t v10;
  mlir::MLIRContext *Context;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  mlir::MLIRContext *v18;
  uint64_t v19;
  mlir::Operation *v20;
  mlir::ArrayAttr *p_AttrDictionary;
  unsigned int v22;
  _QWORD *v23;
  uint64_t Value;
  uint64_t v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  llvm::raw_ostream *v28;
  _BYTE *v29;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t NextResultAtOffset;
  unint64_t AttrDictionary;
  void *v35;
  uint64_t v36;
  _QWORD v37[5];

  v37[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ",", 1uLL);
  }
  else
  {
    *v7 = 44;
    ++*((_QWORD *)v6 + 4);
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 56));
  v10 = *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v10)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
    if (v10 != mlir::arith::FastMathFlagsAttr::get(Context, 0))
    {
      v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
      v13 = (_BYTE *)*((_QWORD *)v12 + 4);
      if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
      {
        llvm::raw_ostream::write(v12, 32);
      }
      else
      {
        *((_QWORD *)v12 + 4) = v13 + 1;
        *v13 = 32;
      }
      v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
      v15 = (_QWORD *)*((_QWORD *)v14 + 4);
      if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 7uLL)
      {
        *v15 = 0x6874616D74736166;
        *((_QWORD *)v14 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v14, "fastmath", 8uLL);
      }
      v35 = (void *)*((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
      if (!(*(unsigned __int8 (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 104))(a2))
      {
        v16 = (_QWORD *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
        v17 = (*(uint64_t (**)(_QWORD *))(*v16 + 80))(v16) + v16[4] - v16[2];
        mlir::arith::FastMathFlagsAttr::print((mlir::arith::FastMathFlagsAttr *)&v35, a2);
        if (v17 == (*(uint64_t (**)(_QWORD *))(*v16 + 80))(v16) + v16[4] - v16[2])
          (*(void (**)(mlir::OpAsmPrinter *, void *))(*(_QWORD *)a2 + 40))(a2, v35);
      }
    }
  }
  v35 = v37;
  v37[0] = "fastmath";
  v37[1] = 8;
  v36 = 0x200000001;
  v18 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
  v19 = *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v19 && v19 == mlir::arith::FastMathFlagsAttr::get(v18, 0))
  {
    v22 = v36;
    if (v36 >= HIDWORD(v36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v37, v36 + 1, 16);
      v22 = v36;
    }
    v23 = (char *)v35 + 16 * v22;
    *v23 = "fastmath";
    v23[1] = 8;
    LODWORD(v36) = v36 + 1;
    v20 = *this;
    if (!*((_BYTE *)*this + 47))
      goto LABEL_24;
  }
  else
  {
    v20 = *this;
    if (!*((_BYTE *)*this + 47))
    {
LABEL_24:
      p_AttrDictionary = (mlir::Operation *)((char *)v20 + 56);
      goto LABEL_29;
    }
  }
  AttrDictionary = mlir::Operation::getAttrDictionary(v20);
  p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
LABEL_29:
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v25, v35, v36);
  v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v27 = (_BYTE *)*((_QWORD *)v26 + 4);
  if ((unint64_t)v27 >= *((_QWORD *)v26 + 3))
  {
    llvm::raw_ostream::write(v26, 32);
  }
  else
  {
    *((_QWORD *)v26 + 4) = v27 + 1;
    *v27 = 32;
  }
  v28 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v29 = (_BYTE *)*((_QWORD *)v28 + 4);
  if (*((_BYTE **)v28 + 3) == v29)
  {
    llvm::raw_ostream::write(v28, ":", 1uLL);
  }
  else
  {
    *v29 = 58;
    ++*((_QWORD *)v28 + 4);
  }
  v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v31 = (_BYTE *)*((_QWORD *)v30 + 4);
  if ((unint64_t)v31 >= *((_QWORD *)v30 + 3))
  {
    llvm::raw_ostream::write(v30, 32);
  }
  else
  {
    *((_QWORD *)v30 + 4) = v31 + 1;
    *v31 = 32;
  }
  if (*((_DWORD *)*this + 9))
    v32 = (uint64_t)*this - 16;
  else
    v32 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v32, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v35 != v37)
    free(v35);
}

uint64_t mlir::arith::detail::AddIOpGenericAdaptorBase::AddIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.addi", 10, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::arith::AddIOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v11;
  mlir::MLIRContext *Context;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *__src;
  uint64_t v21;
  _BYTE v22[16];
  _QWORD v23[3];

  v23[2] = *MEMORY[0x24BDAC8D0];
  mlir::OperationState::addOperands(a2, a3, a4);
  *(_QWORD *)(a2 + 192) = 0;
  v11 = *(unsigned int *)(a2 + 120);
  if (a6 + v11 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v11, 16);
    LODWORD(v11) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v11), a5, 16 * a6);
    LODWORD(v11) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v11 + a6;
  __src = v22;
  v21 = 0x200000000;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v19, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  v23[0] = a3;
  v23[1] = a4;
  if ((_DWORD)v21 != 1)
  {
    if (!(_DWORD)v21)
    {
      if (HIDWORD(v21))
      {
        v13 = 0;
LABEL_10:
        bzero((char *)__src + 8 * v13, 8 - 8 * v13);
        goto LABEL_11;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v22, 1uLL, 8);
      v13 = v21;
      if ((_DWORD)v21 != 1)
        goto LABEL_10;
    }
LABEL_11:
    LODWORD(v21) = 1;
  }
  v14 = mlir::ValueRange::dereference_iterator(v23, 0);
  *(_QWORD *)__src = *(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8;
  v15 = __src;
  v16 = v21;
  v17 = *(unsigned int *)(a2 + 72);
  v18 = v17 + v21;
  if (v18 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v16)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v17), v15, 8 * v16);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v17 + v16;
  if (__src != v22)
    free(__src);
}

BOOL mlir::arith::AddIOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;

  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 0)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 1u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(uint64_t *a1, uint64_t a2, const void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  const void **v11;
  const void *v12;
  void *v13;
  uint64_t *p_OperandRange;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  __int128 v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  unint64_t v46;
  BOOL v47;
  unint64_t v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  const void **v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  const void **v57;
  uint64_t OperandRange;
  const char *v59;
  uint64_t v60;
  _QWORD v61[3];
  void *v62;
  unsigned int v63;
  unsigned int v64;
  _BYTE v65[96];
  void *v66;
  _QWORD *v67;
  void *__p;
  _QWORD *v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v57 = (const void **)a2;
  if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&v57))
    return 1;
  v11 = v57;
  if (*((_UNKNOWN **)*v57 + 17) == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    v56 = (uint64_t)v57;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
    v11 = v57;
    if (v41 >= 1)
    {
      if (v57)
        v42 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v57 + 8);
      else
        v42 = 0;
      v61[0] = v11;
      v61[1] = v42;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v61);
      if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange))
        return 1;
      v11 = v57;
    }
  }
  v12 = *v11;
  v13 = (void *)*((_QWORD *)*v11 + 17);
  if (v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v53 = v11;
    v54 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8);
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v53);
    if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange))
      return 1;
  }
  v55 = 261;
  v53 = a3;
  v54 = a4;
  mlir::Operation::emitOpError(a1, &v53, (uint64_t)v61);
  if (v61[0])
  {
    LODWORD(OperandRange) = 3;
    v59 = " #";
    v60 = 2;
    p_OperandRange = &OperandRange;
    v16 = (char *)v62;
    if (v63 >= v64)
    {
      v43 = v63 + 1;
      if (v62 <= &OperandRange && (char *)v62 + 24 * v63 > (char *)&OperandRange)
      {
        v49 = (char *)&OperandRange - (_BYTE *)v62;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v43, 24);
        v16 = (char *)v62;
        p_OperandRange = (uint64_t *)((char *)v62 + v49);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v43, 24);
        p_OperandRange = &OperandRange;
        v16 = (char *)v62;
      }
    }
    v17 = &v16[24 * v63];
    v18 = *(_OWORD *)p_OperandRange;
    *((_QWORD *)v17 + 2) = p_OperandRange[2];
    *(_OWORD *)v17 = v18;
    v19 = ++v63;
    if (v61[0])
    {
      LODWORD(OperandRange) = 5;
      v59 = (const char *)a5;
      v20 = &OperandRange;
      v21 = (char *)v62;
      if (v19 >= v64)
      {
        v44 = v19 + 1;
        v45 = (char *)v62 + 24 * v19 > (char *)&OperandRange;
        if (v62 <= &OperandRange && v45)
        {
          v50 = (char *)&OperandRange - (_BYTE *)v62;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v44, 24);
          v21 = (char *)v62;
          v20 = (uint64_t *)((char *)v62 + v50);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v44, 24);
          v20 = &OperandRange;
          v21 = (char *)v62;
        }
      }
      v22 = &v21[24 * v63];
      v23 = *(_OWORD *)v20;
      *((_QWORD *)v22 + 2) = v20[2];
      *(_OWORD *)v22 = v23;
      v24 = ++v63;
      if (v61[0])
      {
        LODWORD(OperandRange) = 3;
        v59 = " must be signless-integer-like, but got ";
        v60 = 40;
        v25 = &OperandRange;
        v26 = (char *)v62;
        if (v24 >= v64)
        {
          v46 = v24 + 1;
          v47 = (char *)v62 + 24 * v24 > (char *)&OperandRange;
          if (v62 <= &OperandRange && v47)
          {
            v51 = (char *)&OperandRange - (_BYTE *)v62;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v46, 24);
            v26 = (char *)v62;
            v25 = (uint64_t *)((char *)v62 + v51);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v46, 24);
            v25 = &OperandRange;
            v26 = (char *)v62;
          }
        }
        v27 = &v26[24 * v63];
        v28 = *(_OWORD *)v25;
        *((_QWORD *)v27 + 2) = v25[2];
        *(_OWORD *)v27 = v28;
        ++v63;
        if (v61[0])
        {
          v29 = &OperandRange;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&OperandRange, (uint64_t)v57);
          v30 = (char *)v62;
          if (v63 >= v64)
          {
            v48 = v63 + 1;
            if (v62 <= &OperandRange && (char *)v62 + 24 * v63 > (char *)&OperandRange)
            {
              v52 = (char *)&OperandRange - (_BYTE *)v62;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v48, 24);
              v30 = (char *)v62;
              v29 = (uint64_t *)((char *)v62 + v52);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v48, 24);
              v29 = &OperandRange;
              v30 = (char *)v62;
            }
          }
          v31 = &v30[24 * v63];
          v32 = *(_OWORD *)v29;
          *((_QWORD *)v31 + 2) = v29[2];
          *(_OWORD *)v31 = v32;
          ++v63;
        }
      }
    }
  }
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v61);
  if (v61[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v61);
  if (v70)
  {
    v33 = __p;
    if (__p)
    {
      v34 = v69;
      v35 = __p;
      if (v69 != __p)
      {
        do
          v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
        while (v34 != v33);
        v35 = __p;
      }
      v69 = v33;
      operator delete(v35);
    }
    v36 = v66;
    if (v66)
    {
      v37 = v67;
      v38 = v66;
      if (v67 != v66)
      {
        do
        {
          v40 = *--v37;
          v39 = v40;
          *v37 = 0;
          if (v40)
            MEMORY[0x20BD002D4](v39, 0x1000C8077774924);
        }
        while (v37 != v36);
        v38 = v66;
      }
      v67 = v36;
      operator delete(v38);
    }
    if (v62 != v65)
      free(v62);
  }
  return v9;
}

BOOL mlir::arith::AddIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t __src;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    && (__src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

void mlir::arith::AddIOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  mlir::Operation *v10;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t NextResultAtOffset;
  unint64_t AttrDictionary;
  void *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ",", 1uLL);
  }
  else
  {
    *v7 = 44;
    ++*((_QWORD *)v6 + 4);
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 56));
  v23 = v25;
  v24 = 0x200000000;
  v10 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v10);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v10 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v13, v23, v24);
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((_QWORD *)v14 + 4) = v15 + 1;
    *v15 = 32;
  }
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if (*((_BYTE **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ":", 1uLL);
  }
  else
  {
    *v17 = 58;
    ++*((_QWORD *)v16 + 4);
  }
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_BYTE *)*((_QWORD *)v18 + 4);
  if ((unint64_t)v19 >= *((_QWORD *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((_QWORD *)v18 + 4) = v19 + 1;
    *v19 = 32;
  }
  if (*((_DWORD *)*this + 9))
    v20 = (uint64_t)*this - 16;
  else
    v20 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v23 != v25)
    free(v23);
}

uint64_t mlir::arith::detail::AddUIExtendedOpGenericAdaptorBase::AddUIExtendedOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.addui_extended", 20, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::arith::AddUIExtendedOp::getAsmResultNames(uint64_t a1, void (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v5;
  uint64_t NextResultAtOffset;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v5 = *(_QWORD *)a1 - 16;
  else
    v5 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  a2(a3, NextResultAtOffset, "sum", 3);
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v7 = *(_QWORD *)a1 - 16;
  else
    v7 = 0;
  v8 = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 1);
  v9 = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
  return ((uint64_t (*)(uint64_t, uint64_t, const char *, uint64_t))a2)(a3, v9, "overflow", 8);
}

uint64_t mlir::arith::AddUIExtendedOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  const void **v24;
  __int16 v25;
  _QWORD v26[3];
  void *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 0)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 1u))
  {
    return 0;
  }
  v2 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", 6, 0))return 0;
  v4 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  v5 = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 1);
  v6 = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps2(*this, *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", 6, 1u))return 0;
  v7 = *this;
  v8 = (*this)[9];
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v9 == (*(_QWORD *)(*(_QWORD *)(v8 + 56) + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    v10 = *((_DWORD *)v7 + 9);
    v11 = v7 - 2;
    v12 = v10 ? (uint64_t)v11 : 0;
    if (v9 == (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      v13 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
      if ((*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 0) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
        return 1;
    }
  }
  v24 = (const void **)"failed to verify that all of {lhs, rhs, sum} have same type";
  v25 = 259;
  mlir::OpState::emitOpError(this, &v24, (uint64_t)v26);
  v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
  if (v26[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
  if (v33)
  {
    v15 = __p;
    if (__p)
    {
      v16 = v32;
      v17 = __p;
      if (v32 != __p)
      {
        do
          v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        v17 = __p;
      }
      v32 = v15;
      operator delete(v17);
    }
    v18 = v29;
    if (v29)
    {
      v19 = v30;
      v20 = v29;
      if (v30 != v29)
      {
        do
        {
          v22 = *--v19;
          v21 = v22;
          *v19 = 0;
          if (v22)
            MEMORY[0x20BD002D4](v21, 0x1000C8077774924);
        }
        while (v19 != v18);
        v20 = v29;
      }
      v30 = v18;
      operator delete(v20);
    }
    if (v27 != &v28)
      free(v27);
  }
  return v14;
}

uint64_t mlir::arith::__mlir_ods_local_type_constraint_ArithOps2(uint64_t *a1, uint64_t a2, const void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  const void **v11;
  const void *v12;
  void *v13;
  BOOL v14;
  uint64_t *p_OperandRange;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  __int128 v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  unint64_t v46;
  BOOL v47;
  unint64_t v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  const void **v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  const void **v57;
  uint64_t OperandRange;
  const char *v59;
  uint64_t v60;
  _QWORD v61[3];
  void *v62;
  unsigned int v63;
  unsigned int v64;
  _BYTE v65[96];
  void *v66;
  _QWORD *v67;
  void *__p;
  _QWORD *v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v57 = (const void **)a2;
  if (mlir::Type::isSignlessInteger((mlir::Type *)&v57, 1))
    return 1;
  v11 = v57;
  if (*((_UNKNOWN **)*v57 + 17) == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    v56 = (uint64_t)v57;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
    v11 = v57;
    if (v41 >= 1)
    {
      if (v57)
        v42 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v57 + 8);
      else
        v42 = 0;
      v61[0] = v11;
      v61[1] = v42;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v61);
      if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 1))
        return 1;
      v11 = v57;
    }
  }
  v12 = *v11;
  v13 = (void *)*((_QWORD *)*v11 + 17);
  v14 = v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  if (!v14
    || (v53 = v11,
        v54 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8),
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v53),
        v9 = 1,
        !mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 1)))
  {
    v55 = 261;
    v53 = a3;
    v54 = a4;
    mlir::Operation::emitOpError(a1, &v53, (uint64_t)v61);
    if (v61[0])
    {
      LODWORD(OperandRange) = 3;
      v59 = " #";
      v60 = 2;
      p_OperandRange = &OperandRange;
      v16 = (char *)v62;
      if (v63 >= v64)
      {
        v43 = v63 + 1;
        if (v62 <= &OperandRange && (char *)v62 + 24 * v63 > (char *)&OperandRange)
        {
          v49 = (char *)&OperandRange - (_BYTE *)v62;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v43, 24);
          v16 = (char *)v62;
          p_OperandRange = (uint64_t *)((char *)v62 + v49);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v43, 24);
          p_OperandRange = &OperandRange;
          v16 = (char *)v62;
        }
      }
      v17 = &v16[24 * v63];
      v18 = *(_OWORD *)p_OperandRange;
      *((_QWORD *)v17 + 2) = p_OperandRange[2];
      *(_OWORD *)v17 = v18;
      v19 = ++v63;
      if (v61[0])
      {
        LODWORD(OperandRange) = 5;
        v59 = (const char *)a5;
        v20 = &OperandRange;
        v21 = (char *)v62;
        if (v19 >= v64)
        {
          v44 = v19 + 1;
          v45 = (char *)v62 + 24 * v19 > (char *)&OperandRange;
          if (v62 <= &OperandRange && v45)
          {
            v50 = (char *)&OperandRange - (_BYTE *)v62;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v44, 24);
            v21 = (char *)v62;
            v20 = (uint64_t *)((char *)v62 + v50);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v44, 24);
            v20 = &OperandRange;
            v21 = (char *)v62;
          }
        }
        v22 = &v21[24 * v63];
        v23 = *(_OWORD *)v20;
        *((_QWORD *)v22 + 2) = v20[2];
        *(_OWORD *)v22 = v23;
        v24 = ++v63;
        if (v61[0])
        {
          LODWORD(OperandRange) = 3;
          v59 = " must be BOOL-like, but got ";
          v60 = 28;
          v25 = &OperandRange;
          v26 = (char *)v62;
          if (v24 >= v64)
          {
            v46 = v24 + 1;
            v47 = (char *)v62 + 24 * v24 > (char *)&OperandRange;
            if (v62 <= &OperandRange && v47)
            {
              v51 = (char *)&OperandRange - (_BYTE *)v62;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v46, 24);
              v26 = (char *)v62;
              v25 = (uint64_t *)((char *)v62 + v51);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v46, 24);
              v25 = &OperandRange;
              v26 = (char *)v62;
            }
          }
          v27 = &v26[24 * v63];
          v28 = *(_OWORD *)v25;
          *((_QWORD *)v27 + 2) = v25[2];
          *(_OWORD *)v27 = v28;
          ++v63;
          if (v61[0])
          {
            v29 = &OperandRange;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&OperandRange, (uint64_t)v57);
            v30 = (char *)v62;
            if (v63 >= v64)
            {
              v48 = v63 + 1;
              if (v62 <= &OperandRange && (char *)v62 + 24 * v63 > (char *)&OperandRange)
              {
                v52 = (char *)&OperandRange - (_BYTE *)v62;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v48, 24);
                v30 = (char *)v62;
                v29 = (uint64_t *)((char *)v62 + v52);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v48, 24);
                v29 = &OperandRange;
                v30 = (char *)v62;
              }
            }
            v31 = &v30[24 * v63];
            v32 = *(_OWORD *)v29;
            *((_QWORD *)v31 + 2) = v29[2];
            *(_OWORD *)v31 = v32;
            ++v63;
          }
        }
      }
    }
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v61);
    if (v61[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v61);
    if (v70)
    {
      v33 = __p;
      if (__p)
      {
        v34 = v69;
        v35 = __p;
        if (v69 != __p)
        {
          do
            v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
          while (v34 != v33);
          v35 = __p;
        }
        v69 = v33;
        operator delete(v35);
      }
      v36 = v66;
      if (v66)
      {
        v37 = v67;
        v38 = v66;
        if (v67 != v66)
        {
          do
          {
            v40 = *--v37;
            v39 = v40;
            *v37 = 0;
            if (v40)
              MEMORY[0x20BD002D4](v39, 0x1000C8077774924);
          }
          while (v37 != v36);
          v38 = v66;
        }
        v67 = v36;
        operator delete(v38);
      }
      if (v62 != v65)
        free(v62);
    }
  }
  return v9;
}

BOOL mlir::arith::AddUIExtendedOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t __src;
  _QWORD v9[4];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, 24);
  memset(v9, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v7 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v7))
    && (__src = v7, (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    && (v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    && (v7 = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        mlir::OperationState::addTypes(a2, &v7, 1),
        v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v10, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

void mlir::arith::AddUIExtendedOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  mlir::Operation *v10;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t NextResultAtOffset;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t AttrDictionary;
  void *v30;
  uint64_t v31;
  _QWORD v32[5];

  v32[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ",", 1uLL);
  }
  else
  {
    *v7 = 44;
    ++*((_QWORD *)v6 + 4);
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 56));
  v30 = v32;
  v31 = 0x200000000;
  v10 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v10);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v10 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v13, v30, v31);
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((_QWORD *)v14 + 4) = v15 + 1;
    *v15 = 32;
  }
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if (*((_BYTE **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ":", 1uLL);
  }
  else
  {
    *v17 = 58;
    ++*((_QWORD *)v16 + 4);
  }
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_BYTE *)*((_QWORD *)v18 + 4);
  if ((unint64_t)v19 >= *((_QWORD *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((_QWORD *)v18 + 4) = v19 + 1;
    *v19 = 32;
  }
  if (*((_DWORD *)*this + 9))
    v20 = (uint64_t)*this - 16;
  else
    v20 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v23 = (_BYTE *)*((_QWORD *)v22 + 4);
  if (*((_BYTE **)v22 + 3) == v23)
  {
    llvm::raw_ostream::write(v22, ",", 1uLL);
  }
  else
  {
    *v23 = 44;
    ++*((_QWORD *)v22 + 4);
  }
  v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v25 = (_BYTE *)*((_QWORD *)v24 + 4);
  if ((unint64_t)v25 >= *((_QWORD *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, 32);
  }
  else
  {
    *((_QWORD *)v24 + 4) = v25 + 1;
    *v25 = 32;
  }
  if (*((_DWORD *)*this + 9))
    v26 = (uint64_t)*this - 16;
  else
    v26 = 0;
  v27 = mlir::detail::OpResultImpl::getNextResultAtOffset(v26, 1);
  v28 = mlir::detail::OpResultImpl::getNextResultAtOffset(v27, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v30 != v32)
    free(v30);
}

uint64_t mlir::arith::detail::AndIOpGenericAdaptorBase::AndIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.andi", 10, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::arith::AndIOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  void *__src;
  uint64_t v17;
  _BYTE v18[16];
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v12 = a4;
  v13 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v13, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v12, 1);
  __src = v18;
  v17 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v15, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v14, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  v19 = v15;
  if ((_DWORD)v17 != 1)
  {
    if (!(_DWORD)v17)
    {
      if (HIDWORD(v17))
      {
        v6 = 0;
LABEL_6:
        bzero((char *)__src + 8 * v6, 8 - 8 * v6);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v18, 1uLL, 8);
      v6 = v17;
      if ((_DWORD)v17 != 1)
        goto LABEL_6;
    }
LABEL_7:
    LODWORD(v17) = 1;
  }
  v7 = mlir::ValueRange::dereference_iterator(&v19, 0);
  *(_QWORD *)__src = *(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8;
  v8 = __src;
  v9 = v17;
  v10 = *(unsigned int *)(a2 + 72);
  v11 = v10 + v17;
  if (v11 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11, 8);
    LODWORD(v10) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v9)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v10), v8, 8 * v9);
    LODWORD(v10) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v10 + v9;
  if (__src != v18)
    free(__src);
}

BOOL mlir::arith::AndIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t __src;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    && (__src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::BitcastOpGenericAdaptorBase::BitcastOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.bitcast", 13, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::BitcastOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;

  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps3(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 0))return 0;
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps3(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::arith::__mlir_ods_local_type_constraint_ArithOps3(uint64_t *a1, uint64_t a2, const void **a3, uint64_t a4, unsigned int a5)
{
  const void **v9;
  void *v10;
  uint64_t v12;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  void *v29;
  const void ***v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  const void ***v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  const void ***v40;
  char *v41;
  char *v42;
  __int128 v43;
  const void ***v44;
  char *v45;
  char *v46;
  __int128 v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  _QWORD *v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  unint64_t v63;
  unint64_t v64;
  BOOL v65;
  unint64_t v66;
  BOOL v67;
  unint64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  const void **v73;
  uint64_t v74;
  __int16 v75;
  _QWORD v76[2];
  _QWORD v77[2];
  const void **v78;
  uint64_t v79;
  const void **v80;
  uint64_t OperandRange;
  const void **v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[3];
  void *v86;
  unsigned int v87;
  unsigned int v88;
  _BYTE v89[96];
  void *v90;
  _QWORD *v91;
  void *__p;
  _QWORD *v93;
  char v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  v80 = (const void **)a2;
  if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&v80))
    return 1;
  v9 = v80;
  if (*((_UNKNOWN **)*v80 + 17) == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    v79 = (uint64_t)v80;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v79);
    v9 = v80;
    if (v26 >= 1)
    {
      if (v80)
        v27 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v80 + 8);
      else
        v27 = 0;
      v85[0] = v9;
      v85[1] = v27;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v85);
      if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange))
        return 1;
      v9 = v80;
    }
  }
  v10 = (void *)*((_QWORD *)*v9 + 17);
  if (v10 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v9 + 8);
    v73 = v9;
    v74 = v12;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v73);
    if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange))
      return 1;
    v9 = v80;
    v10 = (void *)*((_QWORD *)*v80 + 17);
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 1;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    v78 = v9;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v78);
    v9 = v80;
    if (v60 >= 1)
    {
      if (v80)
        v61 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v80 + 8);
      else
        v61 = 0;
      v82 = v9;
      v83 = v61;
      v62 = *(void **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v82)
                     + 136);
      if (v62 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        return 1;
      }
      v9 = v80;
    }
  }
  v28 = *v9;
  v29 = (void *)*((_QWORD *)*v9 + 17);
  if (v29 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v29 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v56 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v28 + 8);
    v77[0] = v9;
    v77[1] = v56;
    v57 = *(void **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v77) + 136);
    if (v57 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      return 1;
    }
    v9 = v80;
    v28 = *v80;
    if (*((_UNKNOWN **)*v80 + 17) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      goto LABEL_57;
    goto LABEL_93;
  }
  if (v29 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
LABEL_93:
    v58 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v28 + 8);
    v76[0] = v9;
    v76[1] = v58;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v76);
    if (!mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange))
    {
      v59 = *(void **)(*(_QWORD *)OperandRange + 136);
      if (v59 != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
      {
        v24 = 1;
        if (v59 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
          || v59 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        {
          return v24;
        }
        goto LABEL_57;
      }
    }
    return 1;
  }
LABEL_57:
  v75 = 261;
  v73 = a3;
  v74 = a4;
  mlir::Operation::emitOpError(a1, &v73, (uint64_t)v85);
  if (v85[0])
  {
    LODWORD(v82) = 3;
    v83 = (uint64_t)" #";
    v84 = 2;
    v30 = &v82;
    v31 = (char *)v86;
    if (v87 >= v88)
    {
      v63 = v87 + 1;
      if (v86 <= &v82 && (char *)v86 + 24 * v87 > (char *)&v82)
      {
        v69 = (char *)&v82 - (_BYTE *)v86;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v63, 24);
        v31 = (char *)v86;
        v30 = (const void ***)((char *)v86 + v69);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v63, 24);
        v30 = &v82;
        v31 = (char *)v86;
      }
    }
    v32 = &v31[24 * v87];
    v33 = *(_OWORD *)v30;
    *((_QWORD *)v32 + 2) = v30[2];
    *(_OWORD *)v32 = v33;
    v34 = ++v87;
    if (v85[0])
    {
      LODWORD(v82) = 5;
      v83 = a5;
      v35 = &v82;
      v36 = (char *)v86;
      if (v34 >= v88)
      {
        v64 = v34 + 1;
        v65 = (char *)v86 + 24 * v34 > (char *)&v82;
        if (v86 <= &v82 && v65)
        {
          v70 = (char *)&v82 - (_BYTE *)v86;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v64, 24);
          v36 = (char *)v86;
          v35 = (const void ***)((char *)v86 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v64, 24);
          v35 = &v82;
          v36 = (char *)v86;
        }
      }
      v37 = &v36[24 * v87];
      v38 = *(_OWORD *)v35;
      *((_QWORD *)v37 + 2) = v35[2];
      *(_OWORD *)v37 = v38;
      v39 = ++v87;
      if (v85[0])
      {
        LODWORD(v82) = 3;
        v83 = (uint64_t)" must be signless-integer-or-float-like or memref of signless-integer or float, but got ";
        v84 = 88;
        v40 = &v82;
        v41 = (char *)v86;
        if (v39 >= v88)
        {
          v66 = v39 + 1;
          v67 = (char *)v86 + 24 * v39 > (char *)&v82;
          if (v86 <= &v82 && v67)
          {
            v71 = (char *)&v82 - (_BYTE *)v86;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v66, 24);
            v41 = (char *)v86;
            v40 = (const void ***)((char *)v86 + v71);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v66, 24);
            v40 = &v82;
            v41 = (char *)v86;
          }
        }
        v42 = &v41[24 * v87];
        v43 = *(_OWORD *)v40;
        *((_QWORD *)v42 + 2) = v40[2];
        *(_OWORD *)v42 = v43;
        ++v87;
        if (v85[0])
        {
          v44 = &v82;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v82, (uint64_t)v80);
          v45 = (char *)v86;
          if (v87 >= v88)
          {
            v68 = v87 + 1;
            if (v86 <= &v82 && (char *)v86 + 24 * v87 > (char *)&v82)
            {
              v72 = (char *)&v82 - (_BYTE *)v86;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v68, 24);
              v45 = (char *)v86;
              v44 = (const void ***)((char *)v86 + v72);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v68, 24);
              v44 = &v82;
              v45 = (char *)v86;
            }
          }
          v46 = &v45[24 * v87];
          v47 = *(_OWORD *)v44;
          *((_QWORD *)v46 + 2) = v44[2];
          *(_OWORD *)v46 = v47;
          ++v87;
        }
      }
    }
  }
  v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v85);
  if (v85[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v85);
  if (v94)
  {
    v48 = __p;
    if (__p)
    {
      v49 = v93;
      v50 = __p;
      if (v93 != __p)
      {
        do
          v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
        while (v49 != v48);
        v50 = __p;
      }
      v93 = v48;
      operator delete(v50);
    }
    v51 = v90;
    if (v90)
    {
      v52 = v91;
      v53 = v90;
      if (v91 != v90)
      {
        do
        {
          v55 = *--v52;
          v54 = v55;
          *v52 = 0;
          if (v55)
            MEMORY[0x20BD002D4](v54, 0x1000C8077774924);
        }
        while (v52 != v51);
        v53 = v90;
      }
      v91 = v51;
      operator delete(v53);
    }
    if (v86 != v89)
      free(v86);
  }
  return v24;
}

BOOL mlir::arith::BitcastOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8[2];
  uint64_t v9;
  _QWORD v10[4];
  _QWORD __src[4];
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 504))(a1, __src))
    return 0;
  v9 = __src[0];
  v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))return 0;
  v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    return 0;
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  const char *v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  int *v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  int *v23;
  char *v24;
  char *v25;
  __int128 v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  BOOL v40;
  int64_t v41;
  int64_t v42;
  int64_t v43;
  char v44[32];
  __int16 v45;
  int v46;
  const char *v47;
  uint64_t v48;
  _QWORD v49[3];
  void *v50;
  unsigned int v51;
  unsigned int v52;
  _BYTE v53[96];
  void *v54;
  _QWORD *v55;
  void *__p;
  _QWORD *v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v6 = (const char *)a2[1];
  v7 = (const char *)a3[1];
  if (v6 == v7)
  {
    if (v6)
    {
      v9 = *a2;
      v10 = (_QWORD *)*a3;
      v11 = 32 * (_QWORD)v6;
      while ((*(unsigned __int8 (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, *v10, a5))
      {
        v9 += 32;
        ++v10;
        v11 -= 32;
        if (!v11)
          return 1;
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v45 = 257;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)a1 + 24))(v49, a1, a4, v44);
    if (v49[0])
    {
      v46 = 5;
      v47 = v6;
      v13 = &v46;
      v14 = (char *)v50;
      if (v51 >= v52)
      {
        v36 = v51 + 1;
        if (v50 <= &v46 && (char *)v50 + 24 * v51 > (char *)&v46)
        {
          v41 = (char *)&v46 - (_BYTE *)v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v36, 24);
          v14 = (char *)v50;
          v13 = (int *)((char *)v50 + v41);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v36, 24);
          v13 = &v46;
          v14 = (char *)v50;
        }
      }
      v15 = &v14[24 * v51];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = *((_QWORD *)v13 + 2);
      *(_OWORD *)v15 = v16;
      v17 = ++v51;
      if (v49[0])
      {
        v46 = 3;
        v47 = " operands present, but expected ";
        v48 = 32;
        v18 = &v46;
        v19 = (char *)v50;
        if (v17 >= v52)
        {
          v37 = v17 + 1;
          v38 = (char *)v50 + 24 * v17 > (char *)&v46;
          if (v50 <= &v46 && v38)
          {
            v42 = (char *)&v46 - (_BYTE *)v50;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
            v19 = (char *)v50;
            v18 = (int *)((char *)v50 + v42);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
            v18 = &v46;
            v19 = (char *)v50;
          }
        }
        v20 = &v19[24 * v51];
        v21 = *(_OWORD *)v18;
        *((_QWORD *)v20 + 2) = *((_QWORD *)v18 + 2);
        *(_OWORD *)v20 = v21;
        v22 = ++v51;
        if (v49[0])
        {
          v46 = 5;
          v47 = v7;
          v23 = &v46;
          v24 = (char *)v50;
          if (v22 >= v52)
          {
            v39 = v22 + 1;
            v40 = (char *)v50 + 24 * v22 > (char *)&v46;
            if (v50 <= &v46 && v40)
            {
              v43 = (char *)&v46 - (_BYTE *)v50;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v39, 24);
              v24 = (char *)v50;
              v23 = (int *)((char *)v50 + v43);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v39, 24);
              v23 = &v46;
              v24 = (char *)v50;
            }
          }
          v25 = &v24[24 * v51];
          v26 = *(_OWORD *)v23;
          *((_QWORD *)v25 + 2) = *((_QWORD *)v23 + 2);
          *(_OWORD *)v25 = v26;
          ++v51;
        }
      }
    }
    v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v49);
    if (v49[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v49);
    if (v58)
    {
      v27 = __p;
      if (__p)
      {
        v28 = v57;
        v29 = __p;
        if (v57 != __p)
        {
          do
            v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          v29 = __p;
        }
        v57 = v27;
        operator delete(v29);
      }
      v30 = v54;
      if (v54)
      {
        v31 = v55;
        v32 = v54;
        if (v55 != v54)
        {
          do
          {
            v34 = *--v31;
            v33 = v34;
            *v31 = 0;
            if (v34)
              MEMORY[0x20BD002D4](v33, 0x1000C8077774924);
          }
          while (v31 != v30);
          v32 = v54;
        }
        v55 = v30;
        operator delete(v32);
      }
      if (v50 != v53)
        free(v50);
    }
  }
  return v12;
}

void mlir::arith::BitcastOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  mlir::Operation *v6;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  _WORD *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t NextResultAtOffset;
  unint64_t AttrDictionary;
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v25 = v27;
  v26 = 0x200000000;
  v6 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v6);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v6 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v9, v25, v26);
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 32;
  }
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if (*((_BYTE **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, ":", 1uLL);
  }
  else
  {
    *v13 = 58;
    ++*((_QWORD *)v12 + 4);
  }
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((_QWORD *)v14 + 4) = v15 + 1;
    *v15 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((_QWORD *)v16 + 4) = v17 + 1;
    *v17 = 32;
  }
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_WORD *)*((_QWORD *)v18 + 4);
  if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 1uLL)
  {
    *v19 = 28532;
    *((_QWORD *)v18 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v18, "to", 2uLL);
  }
  v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v21 = (_BYTE *)*((_QWORD *)v20 + 4);
  if ((unint64_t)v21 >= *((_QWORD *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 32);
  }
  else
  {
    *((_QWORD *)v20 + 4) = v21 + 1;
    *v21 = 32;
  }
  if (*((_DWORD *)*this + 9))
    v22 = (uint64_t)*this - 16;
  else
    v22 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v22, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v25 != v27)
    free(v25);
}

uint64_t mlir::arith::detail::CeilDivSIOpGenericAdaptorBase::CeilDivSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.ceildivsi", 15, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::CeilDivSIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t __src;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    && (__src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::CeilDivUIOpGenericAdaptorBase::CeilDivUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.ceildivui", 15, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::CeilDivUIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t __src;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    && (__src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::CmpFOpGenericAdaptorBase::CmpFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.cmpf", 10, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::arith::CmpFOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v11;
  char *v12;
  char *v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  char *v24;
  char *v25;
  __int128 v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  char *v34;
  char *v35;
  __int128 v36;
  int *v37;
  char *v38;
  char *v39;
  __int128 v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  int v56;
  const char *v57;
  uint64_t v58;
  _QWORD v59[3];
  void *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[96];
  void *v64;
  _QWORD *v65;
  void *__p;
  _QWORD *v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected DictionaryAttr to set properties";
      v58 = 41;
      v11 = &v56;
      v12 = (char *)v60;
      if (v61 >= v62)
      {
        v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v51 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v12 = (char *)v60;
          v11 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v11 = &v56;
          v12 = (char *)v60;
        }
      }
      v13 = &v12[24 * v61];
      v14 = *(_OWORD *)v11;
      *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
      *(_OWORD *)v13 = v14;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v15 = __p;
    if (__p)
    {
      v16 = v67;
      v17 = __p;
      if (v67 != __p)
      {
        do
          v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        v17 = __p;
      }
      v67 = v15;
      operator delete(v17);
    }
    v18 = v64;
    if (!v64)
      goto LABEL_60;
    v19 = v65;
    v20 = v64;
    if (v65 == v64)
      goto LABEL_59;
    do
    {
      v22 = *--v19;
      v21 = v22;
      *v19 = 0;
      if (v22)
        MEMORY[0x20BD002D4](v21, 0x1000C8077774924);
    }
    while (v19 != v18);
    goto LABEL_58;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "predicate", 9uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected key entry for predicate in DictionaryAttr to set Properties.";
      v58 = 69;
      v23 = &v56;
      v24 = (char *)v60;
      if (v61 >= v62)
      {
        v48 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v52 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          v24 = (char *)v60;
          v23 = (int *)((char *)v60 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          v23 = &v56;
          v24 = (char *)v60;
        }
      }
      v25 = &v24[24 * v61];
      v26 = *(_OWORD *)v23;
      *((_QWORD *)v25 + 2) = *((_QWORD *)v23 + 2);
      *(_OWORD *)v25 = v26;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v27 = __p;
    if (__p)
    {
      v28 = v67;
      v29 = __p;
      if (v67 != __p)
      {
        do
          v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        v29 = __p;
      }
      v67 = v27;
      operator delete(v29);
    }
    v18 = v64;
    if (!v64)
      goto LABEL_60;
    v30 = v65;
    v20 = v64;
    if (v65 == v64)
      goto LABEL_59;
    do
    {
      v32 = *--v30;
      v31 = v32;
      *v30 = 0;
      if (v32)
        MEMORY[0x20BD002D4](v31, 0x1000C8077774924);
    }
    while (v30 != v18);
    goto LABEL_58;
  }
  v9 = v8;
  if ((mlir::arith::CmpFPredicateAttr::classof(v8) & 1) != 0)
  {
    *a1 = v9;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    v56 = 3;
    v58 = 54;
    v33 = &v56;
    v34 = (char *)v60;
    if (v61 >= v62)
    {
      v49 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        v53 = (char *)&v56 - (_BYTE *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        v34 = (char *)v60;
        v33 = (int *)((char *)v60 + v53);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        v33 = &v56;
        v34 = (char *)v60;
      }
    }
    v35 = &v34[24 * v61];
    v36 = *(_OWORD *)v33;
    *((_QWORD *)v35 + 2) = *((_QWORD *)v33 + 2);
    *(_OWORD *)v35 = v36;
    ++v61;
    if (v59[0])
    {
      v37 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      v38 = (char *)v60;
      if (v61 >= v62)
      {
        v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v54 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v38 = (char *)v60;
          v37 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v37 = &v56;
          v38 = (char *)v60;
        }
      }
      v39 = &v38[24 * v61];
      v40 = *(_OWORD *)v37;
      *((_QWORD *)v39 + 2) = *((_QWORD *)v37 + 2);
      *(_OWORD *)v39 = v40;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
  }
  if (v68)
  {
    v41 = __p;
    if (__p)
    {
      v42 = v67;
      v43 = __p;
      if (v67 != __p)
      {
        do
          v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
        while (v42 != v41);
        v43 = __p;
      }
      v67 = v41;
      operator delete(v43);
    }
    v18 = v64;
    if (!v64)
      goto LABEL_60;
    v44 = v65;
    v20 = v64;
    if (v65 == v64)
    {
LABEL_59:
      v65 = v18;
      operator delete(v20);
LABEL_60:
      if (v60 != v63)
        free(v60);
      return 0;
    }
    do
    {
      v46 = *--v44;
      v45 = v46;
      *v44 = 0;
      if (v46)
        MEMORY[0x20BD002D4](v45, 0x1000C8077774924);
    }
    while (v44 != v18);
LABEL_58:
    v20 = v64;
    goto LABEL_59;
  }
  return 0;
}

uint64_t mlir::arith::CmpFOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t DictionaryAttr;
  mlir::DictionaryAttr *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  v13 = v15;
  v14 = 0x300000000;
  if (!*a2)
    return 0;
  NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"predicate", 9, *a2);
  v4 = v3;
  v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    v5 = v14;
  }
  v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *v6 = NamedAttr;
  v6[1] = v4;
  v7 = v13;
  v8 = __CFADD__((_DWORD)v14, 1);
  v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    DictionaryAttr = 0;
    if (v13 == v15)
      return DictionaryAttr;
    goto LABEL_10;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (mlir::MLIRContext *)v13, v9);
  v7 = v13;
  if (v13 != v15)
LABEL_10:
    free(v7);
  return DictionaryAttr;
}

unint64_t mlir::arith::CmpFOp::getInherentAttr(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;

  if (a4 == 9 && (*(_QWORD *)a3 == 0x7461636964657270 ? (v4 = *(_BYTE *)(a3 + 8) == 101) : (v4 = 0), v4))
    return *a2 & 0xFFFFFFFFFFFFFF00 | *a2;
  else
    return 0;
}

uint64_t mlir::arith::CmpFOp::setInherentAttr(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;

  if (a3 == 9 && *(_QWORD *)a2 == 0x7461636964657270 && *(_BYTE *)(a2 + 8) == 101)
  {
    v6 = (_QWORD *)result;
    if (a4)
    {
      result = mlir::arith::CmpFPredicateAttr::classof(a4);
      if ((_DWORD)result)
        v7 = a4;
      else
        v7 = 0;
    }
    else
    {
      v7 = 0;
    }
    *v6 = v7;
  }
  return result;
}

void mlir::arith::CmpFOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"predicate", 9, *a2);
}

BOOL mlir::arith::CmpFOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;

  v6 = mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  return !v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps1(v6, (const void **)"predicate", (const char *)9, a3, a4);
}

uint64_t mlir::arith::__mlir_ods_local_attr_constraint_ArithOps1(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v9;
  const void ***v11;
  char *v12;
  char *v13;
  __int128 v14;
  const void ***v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  const void **v31;
  const char *v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unsigned int v38;
  unsigned int v39;
  _BYTE v40[96];
  void *v41;
  _QWORD *v42;
  void *__p;
  _QWORD *v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (!a1 || (mlir::arith::CmpFPredicateAttr::classof(a1) & 1) != 0)
    return 1;
  a4(&v35, a5);
  if (v35)
  {
    LODWORD(v31) = 3;
    v32 = "attribute '";
    v33 = 11;
    v11 = &v31;
    v12 = (char *)v37;
    if (v38 >= v39)
    {
      v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        v29 = (char *)&v31 - (_BYTE *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        v12 = (char *)v37;
        v11 = (const void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        v11 = &v31;
        v12 = (char *)v37;
      }
    }
    v13 = &v12[24 * v38];
    v14 = *(_OWORD *)v11;
    *((_QWORD *)v13 + 2) = v11[2];
    *(_OWORD *)v13 = v14;
    ++v38;
    if (v35)
    {
      v34 = 261;
      v31 = a2;
      v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (v35)
      {
        LODWORD(v31) = 3;
        v32 = "' failed to satisfy constraint: allowed 64-bit signless integer cases: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1"
              "1, 12, 13, 14, 15";
        v33 = 123;
        v15 = &v31;
        v16 = (char *)v37;
        if (v38 >= v39)
        {
          v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            v30 = (char *)&v31 - (_BYTE *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            v16 = (char *)v37;
            v15 = (const void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            v15 = &v31;
            v16 = (char *)v37;
          }
        }
        v17 = &v16[24 * v38];
        v18 = *(_OWORD *)v15;
        *((_QWORD *)v17 + 2) = v15[2];
        *(_OWORD *)v17 = v18;
        ++v38;
      }
    }
  }
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v35);
  if (v35)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
  if (v45)
  {
    v19 = __p;
    if (__p)
    {
      v20 = v44;
      v21 = __p;
      if (v44 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v44 = v19;
      operator delete(v21);
    }
    v22 = v41;
    if (v41)
    {
      v23 = v42;
      v24 = v41;
      if (v42 != v41)
      {
        do
        {
          v26 = *--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            MEMORY[0x20BD002D4](v25, 0x1000C8077774924);
        }
        while (v23 != v22);
        v24 = v41;
      }
      v42 = v22;
      operator delete(v24);
    }
    if (v37 != v40)
      free(v37);
  }
  return v9;
}

BOOL mlir::arith::CmpFOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::arith::CmpFPredicateAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451A000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451A000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties]";
        v15 = 107;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451A000;
      }
    }
    a1[33] = v5[278];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::arith::CmpFPredicateAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void ***v8;
  char *v9;
  char *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const void ***v16;
  char *v17;
  char *v18;
  __int128 v19;
  const void ***v20;
  char *v21;
  char *v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  _WORD v38[20];
  uint64_t v39;
  const void **v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[96];
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD *v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v39))
    return 0;
  v4 = v39;
  if (mlir::arith::CmpFPredicateAttr::classof(v39))
    v5 = v4;
  else
    v5 = 0;
  *a2 = v5;
  if (v5)
    return 1;
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    v41 = (unint64_t)"expected ";
    v42 = 9;
    v8 = &v40;
    v9 = (char *)v46;
    if (v47 >= v48)
    {
      v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v9 = (char *)v46;
        v8 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v8 = &v40;
        v9 = (char *)v46;
      }
    }
    v10 = &v9[24 * v47];
    v11 = *(_OWORD *)v8;
    *((_QWORD *)v10 + 2) = v8[2];
    *(_OWORD *)v10 = v11;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::CmpFPredicateAttr]";
  v41 = 80;
  v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12)
      v13 = v12;
    else
      v13 = v41;
    v14 = 18;
    if (v41 - v13 < 0x12)
      v14 = v41 - v13;
    v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1)
      --v15;
    v43 = 261;
    v40 = (const void **)((char *)v40 + v13 + v14);
    v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      v41 = (unint64_t)", but got: ";
      v42 = 11;
      v16 = &v40;
      v17 = (char *)v46;
      if (v47 >= v48)
      {
        v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          v36 = (char *)&v40 - (_BYTE *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v17 = (char *)v46;
          v16 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v16 = &v40;
          v17 = (char *)v46;
        }
      }
      v18 = &v17[24 * v47];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = v16[2];
      *(_OWORD *)v18 = v19;
      ++v47;
      if (v44)
      {
        v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        v21 = (char *)v46;
        if (v47 >= v48)
        {
          v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            v37 = (char *)&v40 - (_BYTE *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v21 = (char *)v46;
            v20 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v20 = &v40;
            v21 = (char *)v46;
          }
        }
        v22 = &v21[24 * v47];
        v23 = *(_OWORD *)v20;
        *((_QWORD *)v22 + 2) = v20[2];
        *(_OWORD *)v22 = v23;
        ++v47;
      }
    }
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v24 = __p;
    if (__p)
    {
      v25 = v53;
      v26 = __p;
      if (v53 != __p)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = __p;
      }
      v53 = v24;
      operator delete(v26);
    }
    v27 = v50;
    if (v50)
    {
      v28 = v51;
      v29 = v50;
      if (v51 != v50)
      {
        do
        {
          v31 = *--v28;
          v30 = v31;
          *v28 = 0;
          if (v31)
            MEMORY[0x20BD002D4](v30, 0x1000C8077774924);
        }
        while (v28 != v27);
        v29 = v50;
      }
      v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49)
      free(v46);
  }
  return v6;
}

uint64_t mlir::arith::CmpFOp::writeProperties(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1) + 64));
}

uint64_t mlir::arith::CmpFOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  v15[0] = a4;
  v15[1] = a5;
  v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        v12 = 0;
LABEL_6:
        bzero((void *)(*(_QWORD *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1)
        goto LABEL_6;
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  v13 = mlir::ValueRange::dereference_iterator(v15, 0);
  **(_QWORD **)a11 = getI1SameShape((_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8));
  return 1;
}

uint64_t mlir::arith::CmpFOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t NextResultAtOffset;
  uint64_t I1SameShape;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  const void **v24[4];
  __int16 v25;
  _QWORD v26[3];
  void *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v26[0] = v2;
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps1(v3, (const void **)"predicate", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v26)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u))
    {
      return 0;
    }
    if (*((_DWORD *)*this + 9))
      v4 = (uint64_t)(*this - 2);
    else
      v4 = 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
    if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps2(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", 6, 0))return 0;
    I1SameShape = getI1SameShape((_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
    if (*((_DWORD *)*this + 9))
      v7 = (uint64_t)(*this - 2);
    else
      v7 = 0;
    if (I1SameShape == (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
      return 1;
    v24[0] = (const void **)"failed to verify that result type has i1 element type and same shape as operands";
    v25 = 259;
    mlir::OpState::emitOpError(this, v24, (uint64_t)v26);
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    if (v33)
    {
      v9 = __p;
      if (__p)
      {
        v10 = v32;
        v11 = __p;
        if (v32 != __p)
        {
          do
            v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
          while (v10 != v9);
          v11 = __p;
        }
        v32 = v9;
        operator delete(v11);
      }
      v12 = v29;
      if (!v29)
        goto LABEL_44;
      v13 = v30;
      v14 = v29;
      if (v30 == v29)
      {
LABEL_43:
        v30 = v12;
        operator delete(v14);
LABEL_44:
        if (v27 != &v28)
          free(v27);
        return v8;
      }
      do
      {
        v16 = *--v13;
        v15 = v16;
        *v13 = 0;
        if (v16)
          MEMORY[0x20BD002D4](v15, 0x1000C8077774924);
      }
      while (v13 != v12);
LABEL_42:
      v14 = v29;
      goto LABEL_43;
    }
  }
  else
  {
    v24[0] = (const void **)"requires attribute 'predicate'";
    v25 = 259;
    mlir::OpState::emitOpError(this, v24, (uint64_t)v26);
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    if (v33)
    {
      v17 = __p;
      if (__p)
      {
        v18 = v32;
        v19 = __p;
        if (v32 != __p)
        {
          do
            v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          v19 = __p;
        }
        v32 = v17;
        operator delete(v19);
      }
      v12 = v29;
      if (!v29)
        goto LABEL_44;
      v20 = v30;
      v14 = v29;
      if (v30 == v29)
        goto LABEL_43;
      do
      {
        v22 = *--v20;
        v21 = v22;
        *v20 = 0;
        if (v22)
          MEMORY[0x20BD002D4](v21, 0x1000C8077774924);
      }
      while (v20 != v12);
      goto LABEL_42;
    }
  }
  return v8;
}

BOOL mlir::arith::CmpFOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  mlir::NoneType **v18;
  mlir::MLIRContext *v19;
  uint64_t NoneType;
  unsigned __int16 v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  const void ***v36;
  char *v37;
  char *v38;
  __int128 v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t OperandRange;
  uint64_t v50;
  unint64_t v52;
  int64_t v53;
  uint64_t v54[4];
  __int16 v55;
  const void **AttrData;
  const char *v57;
  _QWORD v58[2];
  uint64_t v59[2];
  const void **v60;
  const char *v61;
  uint64_t v62;
  __int16 v63;
  __int128 __src;
  void *v65[2];
  _OWORD v66[6];
  void *v67[2];
  __int128 v68;
  void *__p[2];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _WORD *v75;
  uint64_t v76;
  _WORD v77[32];
  uint64_t v78;
  _QWORD *v79;
  _QWORD v80[4];
  _QWORD v81[5];

  v81[4] = *MEMORY[0x24BDAC8D0];
  memset(v81, 0, 24);
  v59[0] = (uint64_t)v81;
  v59[1] = 1;
  memset(v80, 0, 24);
  v58[0] = &v79;
  v58[1] = 1;
  AttrData = 0;
  v57 = 0;
  v75 = v77;
  v76 = 0x400000000;
  v78 = 4;
  v79 = 0;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v71 = xmmword_24C060900;
  v72 = *(_OWORD *)&off_24C060910;
  v73 = xmmword_24C060920;
  v74 = *(_OWORD *)&off_24C060930;
  *(_OWORD *)v67 = xmmword_24C0608C0;
  v68 = *(_OWORD *)&off_24C0608D0;
  *(_OWORD *)__p = xmmword_24C0608E0;
  v70 = *(_OWORD *)&off_24C0608F0;
  v66[2] = xmmword_24C060880;
  v66[3] = *(_OWORD *)&off_24C060890;
  v66[4] = xmmword_24C0608A0;
  v66[5] = *(_OWORD *)&off_24C0608B0;
  __src = xmmword_24C060840;
  *(_OWORD *)v65 = *(_OWORD *)&off_24C060850;
  v66[0] = xmmword_24C060860;
  v66[1] = *(_OWORD *)&off_24C060870;
  if ((*(unsigned __int8 (**)(uint64_t, const void ***, __int128 *, uint64_t))(*(_QWORD *)a1 + 392))(a1, &AttrData, &__src, 16))
  {
    v5 = (uint64_t)v57;
    if (!v57)
      goto LABEL_3;
    goto LABEL_50;
  }
  v54[0] = 0;
  v18 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  NoneType = mlir::Builder::getNoneType(v18, v19);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 440))(a1, v54, NoneType);
  if (v21 >= 0x100u && (_BYTE)v21)
  {
    mlir::NamedAttrList::append((uint64_t)&v75, (uint64_t)"predicate", 9, v54[0]);
  }
  else
  {
    if (v21 < 0x100u)
    {
      v60 = (const void **)"expected string or keyword containing one of the following enum values for attribute 'predica"
                           "te' [false, oeq, ogt, oge, olt, ole, one, ord, ueq, ugt, uge, ult, ule, une, uno, true]";
      v63 = 259;
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, const void ***))(*(_QWORD *)a1 + 24))(&__src, a1, v4, &v60);
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__src);
      if ((_QWORD)__src)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__src);
      if (!BYTE8(v70))
      {
LABEL_76:
        v46 = v75;
        if (v75 == v77)
          return v17;
LABEL_77:
        free(v46);
        return v17;
      }
      v22 = __p[0];
      if (__p[0])
      {
        v23 = __p[1];
        v24 = __p[0];
        if (__p[1] != __p[0])
        {
          do
            v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
          while (v23 != v22);
          v24 = __p[0];
        }
        __p[1] = v22;
        operator delete(v24);
      }
      v25 = v67[1];
      if (!v67[1])
      {
LABEL_74:
        if (v65[1] != (char *)v66 + 8)
          free(v65[1]);
        goto LABEL_76;
      }
      v26 = (_QWORD *)v68;
      v27 = v67[1];
      if ((void *)v68 == v67[1])
      {
LABEL_73:
        *(_QWORD *)&v68 = v25;
        operator delete(v27);
        goto LABEL_74;
      }
      do
      {
        v29 = *--v26;
        v28 = v29;
        *v26 = 0;
        if (v29)
          MEMORY[0x20BD002D4](v28, 0x1000C8077774924);
      }
      while (v26 != v25);
LABEL_72:
      v27 = v67[1];
      goto LABEL_73;
    }
    if (!(_BYTE)v21)
    {
      v17 = 0;
      v46 = v75;
      if (v75 == v77)
        return v17;
      goto LABEL_77;
    }
  }
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v54);
  v57 = (const char *)v5;
  if (v5)
  {
LABEL_50:
    v30 = mlir::arith::symbolizeCmpFPredicate((uint64_t)AttrData, v5);
    if (v31)
    {
      v32 = v30;
      v33 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      v34 = mlir::IntegerType::get(*v33, 0x40u, 0);
      v35 = mlir::IntegerAttr::get(v34, v32);
      *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties>(a2) = v35;
      v6 = v75;
      if (v75 == v77)
        goto LABEL_5;
      goto LABEL_4;
    }
    v54[0] = (uint64_t)"invalid ";
    v55 = 259;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(&__src, a1, v4, v54);
    if ((_QWORD)__src)
    {
      LODWORD(v60) = 3;
      v61 = "predicate attribute specification: \"";
      v62 = 36;
      v36 = &v60;
      v37 = (char *)v65[1];
      if (LODWORD(v66[0]) >= DWORD1(v66[0]))
      {
        v52 = LODWORD(v66[0]) + 1;
        if (v65[1] <= &v60 && (char *)v65[1] + 24 * LODWORD(v66[0]) > (char *)&v60)
        {
          v53 = (char *)&v60 - (char *)v65[1];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65[1], (char *)v66 + 8, v52, 24);
          v37 = (char *)v65[1];
          v36 = (const void ***)((char *)v65[1] + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65[1], (char *)v66 + 8, v52, 24);
          v36 = &v60;
          v37 = (char *)v65[1];
        }
      }
      v38 = &v37[24 * LODWORD(v66[0])];
      v39 = *(_OWORD *)v36;
      *((_QWORD *)v38 + 2) = v36[2];
      *(_OWORD *)v38 = v39;
      ++LODWORD(v66[0]);
      if ((_QWORD)__src)
      {
        v63 = 261;
        v60 = AttrData;
        v61 = v57;
        mlir::Diagnostic::operator<<((uint64_t)&__src + 8, &v60);
        if ((_QWORD)__src)
          mlir::Diagnostic::operator<<((uint64_t)&__src + 8, 34);
      }
    }
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__src);
    if ((_QWORD)__src)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__src);
    if (!BYTE8(v70))
      goto LABEL_76;
    v40 = __p[0];
    if (__p[0])
    {
      v41 = __p[1];
      v42 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        v42 = __p[0];
      }
      __p[1] = v40;
      operator delete(v42);
    }
    v25 = v67[1];
    if (!v67[1])
      goto LABEL_74;
    v43 = (_QWORD *)v68;
    v27 = v67[1];
    if ((void *)v68 == v67[1])
      goto LABEL_73;
    do
    {
      v45 = *--v43;
      v44 = v45;
      *v43 = 0;
      if (v45)
        MEMORY[0x20BD002D4](v44, 0x1000C8077774924);
    }
    while (v43 != v25);
    goto LABEL_72;
  }
LABEL_3:
  v6 = v75;
  if (v75 != v77)
LABEL_4:
    free(v6);
LABEL_5:
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v81, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v80, 1))
    return 0;
  v75 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    return 0;
  v8 = a2[1];
  *(_QWORD *)&__src = a1;
  *((_QWORD *)&__src + 1) = &v75;
  v65[0] = a2;
  if (!mlir::arith::CmpFOp::verifyInherentAttrs(v8, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::CmpFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&__src))return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  *(_QWORD *)&__src = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 504))(a1, &__src))
    return 0;
  v9 = (_WORD *)__src;
  v79 = (_QWORD *)__src;
  v60 = (const void **)__src;
  v10 = *(void **)(*(_QWORD *)__src + 136);
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
    goto LABEL_82;
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
    goto LABEL_82;
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id)
    goto LABEL_82;
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
    goto LABEL_82;
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id)
    goto LABEL_82;
  if (v10 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
    goto LABEL_82;
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id)
    goto LABEL_82;
  if (v10 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
    goto LABEL_82;
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id)
    goto LABEL_82;
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
    goto LABEL_82;
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id)
    goto LABEL_82;
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    goto LABEL_82;
  if (v10 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    v54[0] = __src;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v54);
    if (v47 >= 1)
    {
      v48 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v9 + 8);
      *(_QWORD *)&__src = v9;
      *((_QWORD *)&__src + 1) = v48;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&__src);
      if (mlir::arith::CmpFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_1::operator()(OperandRange))
        goto LABEL_82;
    }
  }
  v11 = *(void **)(*(_QWORD *)v9 + 136);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v9 + 8);
    v75 = v9;
    v76 = v12;
    v13 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v75);
    if (mlir::arith::CmpFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_1::operator()(v13))
    {
LABEL_82:
      *(_QWORD *)&__src = getI1SameShape(v79);
      mlir::OperationState::addTypes((uint64_t)a2, &__src, 1);
      v50 = (uint64_t)(a2 + 2);
      if (mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v59, v58, v7, v50))return (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)a1 + 696))(a1, v80, *(_QWORD *)v58[0], v50) != 0;
      return 0;
    }
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v77[8] = 257;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, _WORD **))(*(_QWORD *)a1 + 24))(&__src, a1, v14, &v75);
  v15 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__src, "'lhs' must be floating-point-like, but got ");
  v16 = mlir::InFlightDiagnostic::append<mlir::Type &>(v15, (uint64_t *)&v60);
  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v16);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&__src);
  return v17;
}

uint64_t mlir::arith::symbolizeCmpFPredicate(uint64_t a1, uint64_t a2)
{
  switch(a2)
  {
    case 3:
      if (*(_WORD *)a1 == 25967 && *(_BYTE *)(a1 + 2) == 113)
      {
        return 1;
      }
      else if (*(_WORD *)a1 == 26479 && *(_BYTE *)(a1 + 2) == 116)
      {
        return 2;
      }
      else if (*(_WORD *)a1 == 26479 && *(_BYTE *)(a1 + 2) == 101)
      {
        return 3;
      }
      else if (*(_WORD *)a1 == 27759 && *(_BYTE *)(a1 + 2) == 116)
      {
        return 4;
      }
      else if (*(_WORD *)a1 == 27759 && *(_BYTE *)(a1 + 2) == 101)
      {
        return 5;
      }
      else if (*(_WORD *)a1 == 28271 && *(_BYTE *)(a1 + 2) == 101)
      {
        return 6;
      }
      else if (*(_WORD *)a1 == 29295 && *(_BYTE *)(a1 + 2) == 100)
      {
        return 7;
      }
      else if (*(_WORD *)a1 == 25973 && *(_BYTE *)(a1 + 2) == 113)
      {
        return 8;
      }
      else if (*(_WORD *)a1 == 26485 && *(_BYTE *)(a1 + 2) == 116)
      {
        return 9;
      }
      else if (*(_WORD *)a1 == 26485 && *(_BYTE *)(a1 + 2) == 101)
      {
        return 10;
      }
      else if (*(_WORD *)a1 == 27765 && *(_BYTE *)(a1 + 2) == 116)
      {
        return 11;
      }
      else if (*(_WORD *)a1 == 27765 && *(_BYTE *)(a1 + 2) == 101)
      {
        return 12;
      }
      else if (*(_WORD *)a1 == 28277 && *(_BYTE *)(a1 + 2) == 101)
      {
        return 13;
      }
      else
      {
        if (*(_WORD *)a1 != 28277 || *(_BYTE *)(a1 + 2) != 111)
          return 0;
        return 14;
      }
    case 4:
      if (*(_DWORD *)a1 == 1702195828)
        return 15;
      else
        return 0;
    case 5:
      if (*(_DWORD *)a1 != 1936482662 || *(_BYTE *)(a1 + 4) != 101)
        return 0;
      return 0;
    default:
      return 0;
  }
}

BOOL mlir::arith::CmpFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_1::operator()(uint64_t a1)
{
  void *v1;
  _BOOL8 result;

  v1 = *(void **)(*(_QWORD *)a1 + 136);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
  {
    return 1;
  }
  result = 1;
  if (v1 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v1 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
  {
    return v1 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v1 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
  }
  return result;
}

uint64_t mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(uint64_t a1, char *__s)
{
  size_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  char *v16;
  size_t v17;

  if (*(_QWORD *)a1)
  {
    v4 = strlen(__s);
    v5 = a1 + 24;
    v6 = *(_QWORD *)(a1 + 24);
    v15 = 3;
    v16 = __s;
    v17 = v4;
    v7 = *(unsigned int *)(a1 + 32);
    v8 = &v15;
    if (v7 >= *(_DWORD *)(a1 + 36))
    {
      v12 = v7 + 1;
      v13 = v6 + 24 * v7 > (unint64_t)&v15;
      if (v6 <= (unint64_t)&v15 && v13)
      {
        v14 = (char *)&v15 - v6;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 40), v12, 24);
        v6 = *(_QWORD *)(a1 + 24);
        v8 = (int *)&v14[v6];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 40), v12, 24);
        v6 = *(_QWORD *)(a1 + 24);
        v8 = &v15;
      }
    }
    v9 = v6 + 24 * *(unsigned int *)(a1 + 32);
    v10 = *(_OWORD *)v8;
    *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
    *(_OWORD *)v9 = v10;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

void mlir::arith::CmpFOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  char v6;
  char *v7;
  size_t v8;
  llvm::raw_ostream *v9;
  void *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  mlir::Operation *v19;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  unint64_t AttrDictionary;
  void *v30;
  uint64_t v31;
  _QWORD v32[5];

  v32[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  v30 = (void *)*((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  v6 = 0;
  v7 = "false";
  v8 = 5;
  switch(mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v30))
  {
    case 0:
      break;
    case 1:
      v6 = 0;
      v7 = "oeq";
      v8 = 3;
      break;
    case 2:
      v6 = 0;
      v7 = "ogt";
      v8 = 3;
      break;
    case 3:
      v6 = 0;
      v7 = "oge";
      v8 = 3;
      break;
    case 4:
      v6 = 0;
      v7 = "olt";
      v8 = 3;
      break;
    case 5:
      v6 = 0;
      v7 = "ole";
      v8 = 3;
      break;
    case 6:
      v6 = 0;
      v7 = "one";
      v8 = 3;
      break;
    case 7:
      v6 = 0;
      v7 = "ord";
      v8 = 3;
      break;
    case 8:
      v6 = 0;
      v7 = "ueq";
      v8 = 3;
      break;
    case 9:
      v6 = 0;
      v7 = "ugt";
      v8 = 3;
      break;
    case 10:
      v6 = 0;
      v7 = "uge";
      v8 = 3;
      break;
    case 11:
      v6 = 0;
      v7 = "ult";
      v8 = 3;
      break;
    case 12:
      v6 = 0;
      v7 = "ule";
      v8 = 3;
      break;
    case 13:
      v6 = 0;
      v7 = "une";
      v8 = 3;
      break;
    case 14:
      v6 = 0;
      v7 = "uno";
      v8 = 3;
      break;
    case 15:
      v6 = 0;
      v7 = "true";
      v8 = 4;
      break;
    default:
      v8 = 0;
      v7 = &byte_207AF6795;
      v6 = 1;
      break;
  }
  v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v10 = (void *)*((_QWORD *)v9 + 4);
  if (v8 <= *((_QWORD *)v9 + 3) - (_QWORD)v10)
  {
    if ((v6 & 1) == 0)
    {
      memcpy(v10, v7, v8);
      *((_QWORD *)v9 + 4) += v8;
    }
  }
  else
  {
    llvm::raw_ostream::write(v9, v7, v8);
  }
  v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v12 = (_BYTE *)*((_QWORD *)v11 + 4);
  if (*((_BYTE **)v11 + 3) == v12)
  {
    llvm::raw_ostream::write(v11, ",", 1uLL);
  }
  else
  {
    *v12 = 44;
    ++*((_QWORD *)v11 + 4);
  }
  v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 32);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v16 = (_BYTE *)*((_QWORD *)v15 + 4);
  if (*((_BYTE **)v15 + 3) == v16)
  {
    llvm::raw_ostream::write(v15, ",", 1uLL);
  }
  else
  {
    *v16 = 44;
    ++*((_QWORD *)v15 + 4);
  }
  v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v18 = (_BYTE *)*((_QWORD *)v17 + 4);
  if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 32);
  }
  else
  {
    *((_QWORD *)v17 + 4) = v18 + 1;
    *v18 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 56));
  v30 = v32;
  v32[0] = "predicate";
  v32[1] = 9;
  v31 = 0x200000001;
  v19 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v19);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v19 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v22, v30, v31);
  v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v24 = (_BYTE *)*((_QWORD *)v23 + 4);
  if ((unint64_t)v24 >= *((_QWORD *)v23 + 3))
  {
    llvm::raw_ostream::write(v23, 32);
  }
  else
  {
    *((_QWORD *)v23 + 4) = v24 + 1;
    *v24 = 32;
  }
  v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v26 = (_BYTE *)*((_QWORD *)v25 + 4);
  if (*((_BYTE **)v25 + 3) == v26)
  {
    llvm::raw_ostream::write(v25, ":", 1uLL);
  }
  else
  {
    *v26 = 58;
    ++*((_QWORD *)v25 + 4);
  }
  v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v28 = (_BYTE *)*((_QWORD *)v27 + 4);
  if ((unint64_t)v28 >= *((_QWORD *)v27 + 3))
  {
    llvm::raw_ostream::write(v27, 32);
  }
  else
  {
    *((_QWORD *)v27 + 4) = v28 + 1;
    *v28 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v30 != v32)
    free(v30);
}

uint64_t mlir::arith::detail::CmpIOpGenericAdaptorBase::CmpIOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.cmpi", 10, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::arith::CmpIOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v11;
  char *v12;
  char *v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  char *v24;
  char *v25;
  __int128 v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  char *v34;
  char *v35;
  __int128 v36;
  int *v37;
  char *v38;
  char *v39;
  __int128 v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  int v56;
  const char *v57;
  uint64_t v58;
  _QWORD v59[3];
  void *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[96];
  void *v64;
  _QWORD *v65;
  void *__p;
  _QWORD *v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected DictionaryAttr to set properties";
      v58 = 41;
      v11 = &v56;
      v12 = (char *)v60;
      if (v61 >= v62)
      {
        v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v51 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v12 = (char *)v60;
          v11 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v11 = &v56;
          v12 = (char *)v60;
        }
      }
      v13 = &v12[24 * v61];
      v14 = *(_OWORD *)v11;
      *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
      *(_OWORD *)v13 = v14;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v15 = __p;
    if (__p)
    {
      v16 = v67;
      v17 = __p;
      if (v67 != __p)
      {
        do
          v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        v17 = __p;
      }
      v67 = v15;
      operator delete(v17);
    }
    v18 = v64;
    if (!v64)
      goto LABEL_60;
    v19 = v65;
    v20 = v64;
    if (v65 == v64)
      goto LABEL_59;
    do
    {
      v22 = *--v19;
      v21 = v22;
      *v19 = 0;
      if (v22)
        MEMORY[0x20BD002D4](v21, 0x1000C8077774924);
    }
    while (v19 != v18);
    goto LABEL_58;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "predicate", 9uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected key entry for predicate in DictionaryAttr to set Properties.";
      v58 = 69;
      v23 = &v56;
      v24 = (char *)v60;
      if (v61 >= v62)
      {
        v48 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v52 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          v24 = (char *)v60;
          v23 = (int *)((char *)v60 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          v23 = &v56;
          v24 = (char *)v60;
        }
      }
      v25 = &v24[24 * v61];
      v26 = *(_OWORD *)v23;
      *((_QWORD *)v25 + 2) = *((_QWORD *)v23 + 2);
      *(_OWORD *)v25 = v26;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v27 = __p;
    if (__p)
    {
      v28 = v67;
      v29 = __p;
      if (v67 != __p)
      {
        do
          v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        v29 = __p;
      }
      v67 = v27;
      operator delete(v29);
    }
    v18 = v64;
    if (!v64)
      goto LABEL_60;
    v30 = v65;
    v20 = v64;
    if (v65 == v64)
      goto LABEL_59;
    do
    {
      v32 = *--v30;
      v31 = v32;
      *v30 = 0;
      if (v32)
        MEMORY[0x20BD002D4](v31, 0x1000C8077774924);
    }
    while (v30 != v18);
    goto LABEL_58;
  }
  v9 = v8;
  if ((mlir::arith::CmpIPredicateAttr::classof(v8) & 1) != 0)
  {
    *a1 = v9;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    v56 = 3;
    v58 = 54;
    v33 = &v56;
    v34 = (char *)v60;
    if (v61 >= v62)
    {
      v49 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        v53 = (char *)&v56 - (_BYTE *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        v34 = (char *)v60;
        v33 = (int *)((char *)v60 + v53);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        v33 = &v56;
        v34 = (char *)v60;
      }
    }
    v35 = &v34[24 * v61];
    v36 = *(_OWORD *)v33;
    *((_QWORD *)v35 + 2) = *((_QWORD *)v33 + 2);
    *(_OWORD *)v35 = v36;
    ++v61;
    if (v59[0])
    {
      v37 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      v38 = (char *)v60;
      if (v61 >= v62)
      {
        v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v54 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v38 = (char *)v60;
          v37 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v37 = &v56;
          v38 = (char *)v60;
        }
      }
      v39 = &v38[24 * v61];
      v40 = *(_OWORD *)v37;
      *((_QWORD *)v39 + 2) = *((_QWORD *)v37 + 2);
      *(_OWORD *)v39 = v40;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
  }
  if (v68)
  {
    v41 = __p;
    if (__p)
    {
      v42 = v67;
      v43 = __p;
      if (v67 != __p)
      {
        do
          v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
        while (v42 != v41);
        v43 = __p;
      }
      v67 = v41;
      operator delete(v43);
    }
    v18 = v64;
    if (!v64)
      goto LABEL_60;
    v44 = v65;
    v20 = v64;
    if (v65 == v64)
    {
LABEL_59:
      v65 = v18;
      operator delete(v20);
LABEL_60:
      if (v60 != v63)
        free(v60);
      return 0;
    }
    do
    {
      v46 = *--v44;
      v45 = v46;
      *v44 = 0;
      if (v46)
        MEMORY[0x20BD002D4](v45, 0x1000C8077774924);
    }
    while (v44 != v18);
LABEL_58:
    v20 = v64;
    goto LABEL_59;
  }
  return 0;
}

uint64_t mlir::arith::CmpIOp::setInherentAttr(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;

  if (a3 == 9 && *(_QWORD *)a2 == 0x7461636964657270 && *(_BYTE *)(a2 + 8) == 101)
  {
    v6 = (_QWORD *)result;
    if (a4)
    {
      result = mlir::arith::CmpIPredicateAttr::classof(a4);
      if ((_DWORD)result)
        v7 = a4;
      else
        v7 = 0;
    }
    else
    {
      v7 = 0;
    }
    *v6 = v7;
  }
  return result;
}

BOOL mlir::arith::CmpIOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;

  v6 = mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  return !v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps2(v6, (const void **)"predicate", (const char *)9, a3, a4);
}

uint64_t mlir::arith::__mlir_ods_local_attr_constraint_ArithOps2(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v9;
  const void ***v11;
  char *v12;
  char *v13;
  __int128 v14;
  const void ***v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  const void **v31;
  const char *v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unsigned int v38;
  unsigned int v39;
  _BYTE v40[96];
  void *v41;
  _QWORD *v42;
  void *__p;
  _QWORD *v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (!a1 || (mlir::arith::CmpIPredicateAttr::classof(a1) & 1) != 0)
    return 1;
  a4(&v35, a5);
  if (v35)
  {
    LODWORD(v31) = 3;
    v32 = "attribute '";
    v33 = 11;
    v11 = &v31;
    v12 = (char *)v37;
    if (v38 >= v39)
    {
      v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        v29 = (char *)&v31 - (_BYTE *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        v12 = (char *)v37;
        v11 = (const void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        v11 = &v31;
        v12 = (char *)v37;
      }
    }
    v13 = &v12[24 * v38];
    v14 = *(_OWORD *)v11;
    *((_QWORD *)v13 + 2) = v11[2];
    *(_OWORD *)v13 = v14;
    ++v38;
    if (v35)
    {
      v34 = 261;
      v31 = a2;
      v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (v35)
      {
        LODWORD(v31) = 3;
        v32 = "' failed to satisfy constraint: allowed 64-bit signless integer cases: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9";
        v33 = 99;
        v15 = &v31;
        v16 = (char *)v37;
        if (v38 >= v39)
        {
          v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            v30 = (char *)&v31 - (_BYTE *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            v16 = (char *)v37;
            v15 = (const void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            v15 = &v31;
            v16 = (char *)v37;
          }
        }
        v17 = &v16[24 * v38];
        v18 = *(_OWORD *)v15;
        *((_QWORD *)v17 + 2) = v15[2];
        *(_OWORD *)v17 = v18;
        ++v38;
      }
    }
  }
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v35);
  if (v35)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
  if (v45)
  {
    v19 = __p;
    if (__p)
    {
      v20 = v44;
      v21 = __p;
      if (v44 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v44 = v19;
      operator delete(v21);
    }
    v22 = v41;
    if (v41)
    {
      v23 = v42;
      v24 = v41;
      if (v42 != v41)
      {
        do
        {
          v26 = *--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            MEMORY[0x20BD002D4](v25, 0x1000C8077774924);
        }
        while (v23 != v22);
        v24 = v41;
      }
      v42 = v22;
      operator delete(v24);
    }
    if (v37 != v40)
      free(v37);
  }
  return v9;
}

BOOL mlir::arith::CmpIOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::arith::CmpIPredicateAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451A000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451A000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties]";
        v15 = 107;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451A000;
      }
    }
    a1[33] = v5[280];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::arith::CmpIPredicateAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void ***v8;
  char *v9;
  char *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const void ***v16;
  char *v17;
  char *v18;
  __int128 v19;
  const void ***v20;
  char *v21;
  char *v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  _WORD v38[20];
  uint64_t v39;
  const void **v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[96];
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD *v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v39))
    return 0;
  v4 = v39;
  if (mlir::arith::CmpIPredicateAttr::classof(v39))
    v5 = v4;
  else
    v5 = 0;
  *a2 = v5;
  if (v5)
    return 1;
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    v41 = (unint64_t)"expected ";
    v42 = 9;
    v8 = &v40;
    v9 = (char *)v46;
    if (v47 >= v48)
    {
      v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v9 = (char *)v46;
        v8 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v8 = &v40;
        v9 = (char *)v46;
      }
    }
    v10 = &v9[24 * v47];
    v11 = *(_OWORD *)v8;
    *((_QWORD *)v10 + 2) = v8[2];
    *(_OWORD *)v10 = v11;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::CmpIPredicateAttr]";
  v41 = 80;
  v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12)
      v13 = v12;
    else
      v13 = v41;
    v14 = 18;
    if (v41 - v13 < 0x12)
      v14 = v41 - v13;
    v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1)
      --v15;
    v43 = 261;
    v40 = (const void **)((char *)v40 + v13 + v14);
    v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      v41 = (unint64_t)", but got: ";
      v42 = 11;
      v16 = &v40;
      v17 = (char *)v46;
      if (v47 >= v48)
      {
        v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          v36 = (char *)&v40 - (_BYTE *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v17 = (char *)v46;
          v16 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v16 = &v40;
          v17 = (char *)v46;
        }
      }
      v18 = &v17[24 * v47];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = v16[2];
      *(_OWORD *)v18 = v19;
      ++v47;
      if (v44)
      {
        v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        v21 = (char *)v46;
        if (v47 >= v48)
        {
          v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            v37 = (char *)&v40 - (_BYTE *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v21 = (char *)v46;
            v20 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v20 = &v40;
            v21 = (char *)v46;
          }
        }
        v22 = &v21[24 * v47];
        v23 = *(_OWORD *)v20;
        *((_QWORD *)v22 + 2) = v20[2];
        *(_OWORD *)v22 = v23;
        ++v47;
      }
    }
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v24 = __p;
    if (__p)
    {
      v25 = v53;
      v26 = __p;
      if (v53 != __p)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = __p;
      }
      v53 = v24;
      operator delete(v26);
    }
    v27 = v50;
    if (v50)
    {
      v28 = v51;
      v29 = v50;
      if (v51 != v50)
      {
        do
        {
          v31 = *--v28;
          v30 = v31;
          *v28 = 0;
          if (v31)
            MEMORY[0x20BD002D4](v30, 0x1000C8077774924);
        }
        while (v28 != v27);
        v29 = v50;
      }
      v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49)
      free(v46);
  }
  return v6;
}

void mlir::arith::CmpIOp::build(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  mlir::MLIRContext *Context;
  unsigned int v11;
  uint64_t v12;
  uint64_t I1SameShape;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  void *__src;
  uint64_t v23;
  _BYTE v24[16];
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v18 = a5;
  v19 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v18, 1);
  v8 = mlir::IntegerType::get(*a1, 0x40u, 0);
  v9 = mlir::IntegerAttr::get(v8, a3);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties>((_QWORD *)a2) = v9;
  __src = v24;
  v23 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v21, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v20, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  v25 = v21;
  if ((_DWORD)v23 != 1)
  {
    if (!(_DWORD)v23)
    {
      if (HIDWORD(v23))
      {
        v11 = 0;
LABEL_6:
        bzero((char *)__src + 8 * v11, 8 - 8 * v11);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v24, 1uLL, 8);
      v11 = v23;
      if ((_DWORD)v23 != 1)
        goto LABEL_6;
    }
LABEL_7:
    LODWORD(v23) = 1;
  }
  v12 = mlir::ValueRange::dereference_iterator(&v25, 0);
  I1SameShape = getI1SameShape((_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
  *(_QWORD *)__src = I1SameShape;
  v14 = __src;
  v15 = v23;
  v16 = *(unsigned int *)(a2 + 72);
  v17 = v16 + v23;
  if (v17 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v17, 8);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v15)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v16), v14, 8 * v15);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v16 + v15;
  if (__src != v24)
    free(__src);
}

void mlir::arith::CmpIOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  mlir::OperationState::addOperands(a2, a5, a6);
  *(_QWORD *)(a2 + 192) = 0;
  v13 = *(unsigned int *)(a2 + 120);
  if (a8 + v13 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a8 + v13, 16);
    LODWORD(v13) = *(_DWORD *)(a2 + 120);
  }
  if (a8)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v13), a7, 16 * a8);
    LODWORD(v13) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v13 + a8;
  v14 = *(unsigned int *)(a2 + 72);
  if (a4 + v14 > (unint64_t)*(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), a4 + v14, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  if (a4)
  {
    v15 = 0;
    v16 = *(_QWORD *)(a2 + 64) + 8 * v14;
    do
    {
      *(_QWORD *)(v16 + 8 * v15) = mlir::TypeRange::dereference_iterator(a3, v15);
      ++v15;
    }
    while (a4 != v15);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v14 + a4;
}

uint64_t mlir::arith::CmpIOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t NextResultAtOffset;
  uint64_t *v6;
  const void **v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t *p_OperandRange;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  __int128 v28;
  char v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t I1SameShape;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  BOOL v60;
  unint64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  const void **v66;
  uint64_t v67;
  __int16 v68;
  unint64_t v69;
  uint64_t OperandRange;
  const char *v71;
  uint64_t v72;
  _QWORD v73[3];
  void *v74;
  unsigned int v75;
  unsigned int v76;
  _BYTE v77[96];
  void *v78;
  _QWORD *v79;
  void *__p;
  _QWORD *v81;
  char v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v73[0] = v2;
    if (mlir::arith::__mlir_ods_local_attr_constraint_ArithOps2(v3, (const void **)"predicate", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v73)&& mlir::arith::__mlir_ods_local_type_constraint_ArithOps4(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 0)&& mlir::arith::__mlir_ods_local_type_constraint_ArithOps4(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 1u))
    {
      v4 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      v6 = *this;
      v69 = *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
      if (mlir::Type::isSignlessInteger((mlir::Type *)&v69, 1))
        goto LABEL_57;
      v7 = (const void **)v69;
      v8 = *(_QWORD *)v69;
      v9 = *(void **)(*(_QWORD *)v69 + 136);
      if (v9 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
      {
        v10 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v8 + 8);
        v73[0] = v7;
        v73[1] = v10;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v73);
        if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 1))
          goto LABEL_57;
        v7 = (const void **)v69;
        v8 = *(_QWORD *)v69;
        v9 = *(void **)(*(_QWORD *)v69 + 136);
      }
      if (v9 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        || v9 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        v66 = v7;
        v67 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v8 + 8);
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66);
        if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 1))
          goto LABEL_57;
      }
      v68 = 261;
      v66 = (const void **)"result";
      v67 = 6;
      mlir::Operation::emitOpError(v6, &v66, (uint64_t)v73);
      if (v73[0])
      {
        LODWORD(OperandRange) = 3;
        v71 = " #";
        v72 = 2;
        p_OperandRange = &OperandRange;
        v12 = (char *)v74;
        if (v75 >= v76)
        {
          v56 = v75 + 1;
          if (v74 <= &OperandRange && (char *)v74 + 24 * v75 > (char *)&OperandRange)
          {
            v62 = (char *)&OperandRange - (_BYTE *)v74;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v56, 24);
            v12 = (char *)v74;
            p_OperandRange = (uint64_t *)((char *)v74 + v62);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v56, 24);
            p_OperandRange = &OperandRange;
            v12 = (char *)v74;
          }
        }
        v13 = &v12[24 * v75];
        v14 = *(_OWORD *)p_OperandRange;
        *((_QWORD *)v13 + 2) = p_OperandRange[2];
        *(_OWORD *)v13 = v14;
        v15 = ++v75;
        if (v73[0])
        {
          LODWORD(OperandRange) = 5;
          v71 = 0;
          v16 = &OperandRange;
          v17 = (char *)v74;
          if (v15 >= v76)
          {
            v57 = v15 + 1;
            v58 = (char *)v74 + 24 * v15 > (char *)&OperandRange;
            if (v74 <= &OperandRange && v58)
            {
              v63 = (char *)&OperandRange - (_BYTE *)v74;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v57, 24);
              v17 = (char *)v74;
              v16 = (uint64_t *)((char *)v74 + v63);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v57, 24);
              v16 = &OperandRange;
              v17 = (char *)v74;
            }
          }
          v18 = &v17[24 * v75];
          v19 = *(_OWORD *)v16;
          *((_QWORD *)v18 + 2) = v16[2];
          *(_OWORD *)v18 = v19;
          v20 = ++v75;
          if (v73[0])
          {
            LODWORD(OperandRange) = 3;
            v71 = " must be BOOL-like, but got ";
            v72 = 28;
            v21 = &OperandRange;
            v22 = (char *)v74;
            if (v20 >= v76)
            {
              v59 = v20 + 1;
              v60 = (char *)v74 + 24 * v20 > (char *)&OperandRange;
              if (v74 <= &OperandRange && v60)
              {
                v64 = (char *)&OperandRange - (_BYTE *)v74;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v59, 24);
                v22 = (char *)v74;
                v21 = (uint64_t *)((char *)v74 + v64);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v59, 24);
                v21 = &OperandRange;
                v22 = (char *)v74;
              }
            }
            v23 = &v22[24 * v75];
            v24 = *(_OWORD *)v21;
            *((_QWORD *)v23 + 2) = v21[2];
            *(_OWORD *)v23 = v24;
            ++v75;
            if (v73[0])
            {
              v25 = &OperandRange;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&OperandRange, v69);
              v26 = (char *)v74;
              if (v75 >= v76)
              {
                v61 = v75 + 1;
                if (v74 <= &OperandRange && (char *)v74 + 24 * v75 > (char *)&OperandRange)
                {
                  v65 = (char *)&OperandRange - (_BYTE *)v74;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v61, 24);
                  v26 = (char *)v74;
                  v25 = (uint64_t *)((char *)v74 + v65);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v61, 24);
                  v25 = &OperandRange;
                  v26 = (char *)v74;
                }
              }
              v27 = &v26[24 * v75];
              v28 = *(_OWORD *)v25;
              *((_QWORD *)v27 + 2) = v25[2];
              *(_OWORD *)v27 = v28;
              ++v75;
            }
          }
        }
      }
      v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v73);
      if (v73[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v73);
      if (v82)
      {
        v30 = __p;
        if (__p)
        {
          v31 = v81;
          v32 = __p;
          if (v81 != __p)
          {
            do
              v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
            while (v31 != v30);
            v32 = __p;
          }
          v81 = v30;
          operator delete(v32);
        }
        v33 = v78;
        if (v78)
        {
          v34 = v79;
          v35 = v78;
          if (v79 != v78)
          {
            do
            {
              v46 = *--v34;
              v45 = v46;
              *v34 = 0;
              if (v46)
                MEMORY[0x20BD002D4](v45, 0x1000C8077774924);
            }
            while (v34 != v33);
            v35 = v78;
          }
          v79 = v33;
          operator delete(v35);
        }
        if (v74 != v77)
          free(v74);
      }
      if (v29)
      {
LABEL_57:
        I1SameShape = getI1SameShape((_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
        if (*((_DWORD *)*this + 9))
          v48 = (uint64_t)(*this - 2);
        else
          v48 = 0;
        if (I1SameShape == (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v48, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
          return 1;
        v66 = (const void **)"failed to verify that result type has i1 element type and same shape as operands";
        v68 = 259;
        mlir::OpState::emitOpError(this, &v66, (uint64_t)v73);
        v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v73);
        if (v73[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v73);
        if (v82)
        {
          v49 = __p;
          if (__p)
          {
            v50 = v81;
            v51 = __p;
            if (v81 != __p)
            {
              do
                v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
              while (v50 != v49);
              v51 = __p;
            }
            v81 = v49;
            operator delete(v51);
          }
          v40 = v78;
          if (!v78)
            goto LABEL_78;
          v52 = v79;
          v42 = v78;
          if (v79 == v78)
          {
LABEL_77:
            v79 = v40;
            operator delete(v42);
LABEL_78:
            if (v74 != v77)
              free(v74);
            return v36;
          }
          do
          {
            v54 = *--v52;
            v53 = v54;
            *v52 = 0;
            if (v54)
              MEMORY[0x20BD002D4](v53, 0x1000C8077774924);
          }
          while (v52 != v40);
LABEL_76:
          v42 = v78;
          goto LABEL_77;
        }
        return v36;
      }
    }
    return 0;
  }
  v66 = (const void **)"requires attribute 'predicate'";
  v68 = 259;
  mlir::OpState::emitOpError(this, &v66, (uint64_t)v73);
  v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v73);
  if (v73[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v73);
  if (v82)
  {
    v37 = __p;
    if (__p)
    {
      v38 = v81;
      v39 = __p;
      if (v81 != __p)
      {
        do
          v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
        while (v38 != v37);
        v39 = __p;
      }
      v81 = v37;
      operator delete(v39);
    }
    v40 = v78;
    if (!v78)
      goto LABEL_78;
    v41 = v79;
    v42 = v78;
    if (v79 == v78)
      goto LABEL_77;
    do
    {
      v44 = *--v41;
      v43 = v44;
      *v41 = 0;
      if (v44)
        MEMORY[0x20BD002D4](v43, 0x1000C8077774924);
    }
    while (v41 != v40);
    goto LABEL_76;
  }
  return v36;
}

uint64_t mlir::arith::__mlir_ods_local_type_constraint_ArithOps4(uint64_t *a1, uint64_t a2, const void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  const void **v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  uint64_t *p_OperandRange;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  __int128 v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  BOOL v46;
  unint64_t v47;
  int64_t v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  const void **v52;
  uint64_t v53;
  __int16 v54;
  const void **v55;
  uint64_t OperandRange;
  const char *v57;
  uint64_t v58;
  _QWORD v59[3];
  void *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[96];
  void *v64;
  _QWORD *v65;
  void *__p;
  _QWORD *v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v55 = (const void **)a2;
  if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&v55))
    return 1;
  v11 = v55;
  v12 = *v55;
  v13 = (void *)*((_QWORD *)*v55 + 17);
  if (v13 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8);
    v59[0] = v11;
    v59[1] = v14;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v59);
    if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange))
      return 1;
    v11 = v55;
    v12 = *v55;
    v13 = (void *)*((_QWORD *)*v55 + 17);
  }
  if (v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v52 = v11;
    v53 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8);
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v52);
    if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange))
      return 1;
  }
  v54 = 261;
  v52 = a3;
  v53 = a4;
  mlir::Operation::emitOpError(a1, &v52, (uint64_t)v59);
  if (v59[0])
  {
    LODWORD(OperandRange) = 3;
    v57 = " #";
    v58 = 2;
    p_OperandRange = &OperandRange;
    v17 = (char *)v60;
    if (v61 >= v62)
    {
      v42 = v61 + 1;
      if (v60 <= &OperandRange && (char *)v60 + 24 * v61 > (char *)&OperandRange)
      {
        v48 = (char *)&OperandRange - (_BYTE *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v42, 24);
        v17 = (char *)v60;
        p_OperandRange = (uint64_t *)((char *)v60 + v48);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v42, 24);
        p_OperandRange = &OperandRange;
        v17 = (char *)v60;
      }
    }
    v18 = &v17[24 * v61];
    v19 = *(_OWORD *)p_OperandRange;
    *((_QWORD *)v18 + 2) = p_OperandRange[2];
    *(_OWORD *)v18 = v19;
    v20 = ++v61;
    if (v59[0])
    {
      LODWORD(OperandRange) = 5;
      v57 = (const char *)a5;
      v21 = &OperandRange;
      v22 = (char *)v60;
      if (v20 >= v62)
      {
        v43 = v20 + 1;
        v44 = (char *)v60 + 24 * v20 > (char *)&OperandRange;
        if (v60 <= &OperandRange && v44)
        {
          v49 = (char *)&OperandRange - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v43, 24);
          v22 = (char *)v60;
          v21 = (uint64_t *)((char *)v60 + v49);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v43, 24);
          v21 = &OperandRange;
          v22 = (char *)v60;
        }
      }
      v23 = &v22[24 * v61];
      v24 = *(_OWORD *)v21;
      *((_QWORD *)v23 + 2) = v21[2];
      *(_OWORD *)v23 = v24;
      v25 = ++v61;
      if (v59[0])
      {
        LODWORD(OperandRange) = 3;
        v57 = " must be signless-integer-like, but got ";
        v58 = 40;
        v26 = &OperandRange;
        v27 = (char *)v60;
        if (v25 >= v62)
        {
          v45 = v25 + 1;
          v46 = (char *)v60 + 24 * v25 > (char *)&OperandRange;
          if (v60 <= &OperandRange && v46)
          {
            v50 = (char *)&OperandRange - (_BYTE *)v60;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v45, 24);
            v27 = (char *)v60;
            v26 = (uint64_t *)((char *)v60 + v50);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v45, 24);
            v26 = &OperandRange;
            v27 = (char *)v60;
          }
        }
        v28 = &v27[24 * v61];
        v29 = *(_OWORD *)v26;
        *((_QWORD *)v28 + 2) = v26[2];
        *(_OWORD *)v28 = v29;
        ++v61;
        if (v59[0])
        {
          v30 = &OperandRange;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&OperandRange, (uint64_t)v55);
          v31 = (char *)v60;
          if (v61 >= v62)
          {
            v47 = v61 + 1;
            if (v60 <= &OperandRange && (char *)v60 + 24 * v61 > (char *)&OperandRange)
            {
              v51 = (char *)&OperandRange - (_BYTE *)v60;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
              v31 = (char *)v60;
              v30 = (uint64_t *)((char *)v60 + v51);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
              v30 = &OperandRange;
              v31 = (char *)v60;
            }
          }
          v32 = &v31[24 * v61];
          v33 = *(_OWORD *)v30;
          *((_QWORD *)v32 + 2) = v30[2];
          *(_OWORD *)v32 = v33;
          ++v61;
        }
      }
    }
  }
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v59);
  if (v59[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
  if (v68)
  {
    v34 = __p;
    if (__p)
    {
      v35 = v67;
      v36 = __p;
      if (v67 != __p)
      {
        do
          v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
        while (v35 != v34);
        v36 = __p;
      }
      v67 = v34;
      operator delete(v36);
    }
    v37 = v64;
    if (v64)
    {
      v38 = v65;
      v39 = v64;
      if (v65 != v64)
      {
        do
        {
          v41 = *--v38;
          v40 = v41;
          *v38 = 0;
          if (v41)
            MEMORY[0x20BD002D4](v40, 0x1000C8077774924);
        }
        while (v38 != v37);
        v39 = v64;
      }
      v65 = v37;
      operator delete(v39);
    }
    if (v60 != v63)
      free(v60);
  }
  return v9;
}

BOOL mlir::arith::CmpIOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  mlir::NoneType **v11;
  mlir::MLIRContext *v12;
  uint64_t NoneType;
  unsigned __int16 v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  const void ***v29;
  char *v30;
  char *v31;
  __int128 v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51[4];
  __int16 v52;
  unsigned __int16 *AttrData;
  const char *v54;
  _QWORD v55[2];
  uint64_t v56[2];
  const void **OperandRange;
  const char *v58;
  uint64_t v59;
  __int16 v60;
  __int128 __src;
  void *v62[2];
  _OWORD v63[6];
  void *v64[2];
  __int128 v65;
  void *__p;
  _QWORD *v67;
  char v68;
  _WORD *v69;
  uint64_t v70;
  _WORD v71[32];
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[4];
  _QWORD v75[5];

  v75[4] = *MEMORY[0x24BDAC8D0];
  memset(v75, 0, 24);
  v56[0] = (uint64_t)v75;
  v56[1] = 1;
  memset(v74, 0, 24);
  v55[0] = &v73;
  v55[1] = 1;
  AttrData = 0;
  v54 = 0;
  v69 = v71;
  v70 = 0x400000000;
  v72 = 4;
  v73 = 0;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v63[4] = xmmword_24C0609A0;
  v63[5] = *(_OWORD *)&off_24C0609B0;
  *(_OWORD *)v64 = xmmword_24C0609C0;
  v65 = *(_OWORD *)&off_24C0609D0;
  v63[0] = xmmword_24C060960;
  v63[1] = *(_OWORD *)&off_24C060970;
  v63[2] = xmmword_24C060980;
  v63[3] = *(_OWORD *)&off_24C060990;
  __src = xmmword_24C060940;
  *(_OWORD *)v62 = *(_OWORD *)&off_24C060950;
  if ((*(unsigned __int8 (**)(uint64_t, unsigned __int16 **, __int128 *, uint64_t))(*(_QWORD *)a1 + 392))(a1, &AttrData, &__src, 10))
  {
    v5 = (uint64_t)v54;
    if (!v54)
      goto LABEL_3;
    goto LABEL_37;
  }
  v51[0] = 0;
  v11 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  NoneType = mlir::Builder::getNoneType(v11, v12);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 440))(a1, v51, NoneType);
  if (v14 >= 0x100u && (_BYTE)v14)
  {
    mlir::NamedAttrList::append((uint64_t)&v69, (uint64_t)"predicate", 9, v51[0]);
  }
  else
  {
    if (v14 < 0x100u)
    {
      OperandRange = (const void **)"expected string or keyword containing one of the following enum values for attribute"
                                    " 'predicate' [eq, ne, slt, sle, sgt, sge, ult, ule, ugt, uge]";
      v60 = 259;
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, const void ***))(*(_QWORD *)a1 + 24))(&__src, a1, v4, &OperandRange);
      v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__src);
      if ((_QWORD)__src)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__src);
      if (!v68)
      {
LABEL_63:
        v39 = v69;
        if (v69 == v71)
          return v10;
LABEL_64:
        free(v39);
        return v10;
      }
      v15 = __p;
      if (__p)
      {
        v16 = v67;
        v17 = __p;
        if (v67 != __p)
        {
          do
            v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          v17 = __p;
        }
        v67 = v15;
        operator delete(v17);
      }
      v18 = v64[1];
      if (!v64[1])
      {
LABEL_61:
        if (v62[1] != (char *)v63 + 8)
          free(v62[1]);
        goto LABEL_63;
      }
      v19 = (_QWORD *)v65;
      v20 = v64[1];
      if ((void *)v65 == v64[1])
      {
LABEL_60:
        *(_QWORD *)&v65 = v18;
        operator delete(v20);
        goto LABEL_61;
      }
      do
      {
        v22 = *--v19;
        v21 = v22;
        *v19 = 0;
        if (v22)
          MEMORY[0x20BD002D4](v21, 0x1000C8077774924);
      }
      while (v19 != v18);
LABEL_59:
      v20 = v64[1];
      goto LABEL_60;
    }
    if (!(_BYTE)v14)
    {
      v10 = 0;
      v39 = v69;
      if (v69 == v71)
        return v10;
      goto LABEL_64;
    }
  }
  AttrData = (unsigned __int16 *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v51);
  v54 = (const char *)v5;
  if (v5)
  {
LABEL_37:
    v23 = mlir::arith::symbolizeCmpIPredicate(AttrData, v5);
    if (v24)
    {
      v25 = v23;
      v26 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      v27 = mlir::IntegerType::get(*v26, 0x40u, 0);
      v28 = mlir::IntegerAttr::get(v27, v25);
      *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties>(a2) = v28;
      v6 = v69;
      if (v69 == v71)
        goto LABEL_5;
      goto LABEL_4;
    }
    v51[0] = (uint64_t)"invalid ";
    v52 = 259;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(&__src, a1, v4, v51);
    if ((_QWORD)__src)
    {
      LODWORD(OperandRange) = 3;
      v58 = "predicate attribute specification: \"";
      v59 = 36;
      v29 = &OperandRange;
      v30 = (char *)v62[1];
      if (LODWORD(v63[0]) >= DWORD1(v63[0]))
      {
        v49 = LODWORD(v63[0]) + 1;
        if (v62[1] <= &OperandRange && (char *)v62[1] + 24 * LODWORD(v63[0]) > (char *)&OperandRange)
        {
          v50 = (char *)&OperandRange - (char *)v62[1];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62[1], (char *)v63 + 8, v49, 24);
          v30 = (char *)v62[1];
          v29 = (const void ***)((char *)v62[1] + v50);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62[1], (char *)v63 + 8, v49, 24);
          v29 = &OperandRange;
          v30 = (char *)v62[1];
        }
      }
      v31 = &v30[24 * LODWORD(v63[0])];
      v32 = *(_OWORD *)v29;
      *((_QWORD *)v31 + 2) = v29[2];
      *(_OWORD *)v31 = v32;
      ++LODWORD(v63[0]);
      if ((_QWORD)__src)
      {
        v60 = 261;
        OperandRange = (const void **)AttrData;
        v58 = v54;
        mlir::Diagnostic::operator<<((uint64_t)&__src + 8, &OperandRange);
        if ((_QWORD)__src)
          mlir::Diagnostic::operator<<((uint64_t)&__src + 8, 34);
      }
    }
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__src);
    if ((_QWORD)__src)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__src);
    if (!v68)
      goto LABEL_63;
    v33 = __p;
    if (__p)
    {
      v34 = v67;
      v35 = __p;
      if (v67 != __p)
      {
        do
          v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
        while (v34 != v33);
        v35 = __p;
      }
      v67 = v33;
      operator delete(v35);
    }
    v18 = v64[1];
    if (!v64[1])
      goto LABEL_61;
    v36 = (_QWORD *)v65;
    v20 = v64[1];
    if ((void *)v65 == v64[1])
      goto LABEL_60;
    do
    {
      v38 = *--v36;
      v37 = v38;
      *v36 = 0;
      if (v38)
        MEMORY[0x20BD002D4](v37, 0x1000C8077774924);
    }
    while (v36 != v18);
    goto LABEL_59;
  }
LABEL_3:
  v6 = v69;
  if (v69 != v71)
LABEL_4:
    free(v6);
LABEL_5:
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v75, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v74, 1))
    return 0;
  v69 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    return 0;
  v8 = a2[1];
  *(_QWORD *)&__src = a1;
  *((_QWORD *)&__src + 1) = &v69;
  v62[0] = a2;
  if (!mlir::arith::CmpIOp::verifyInherentAttrs(v8, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::CmpIOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&__src))return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  *(_QWORD *)&__src = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 504))(a1, &__src))
    return 0;
  v73 = __src;
  v51[0] = __src;
  if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)v51))
    goto LABEL_14;
  v41 = v51[0];
  v42 = *(_QWORD *)v51[0];
  v43 = *(void **)(*(_QWORD *)v51[0] + 136);
  if (v43 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    v44 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v42 + 8);
    *(_QWORD *)&__src = v41;
    *((_QWORD *)&__src + 1) = v44;
    OperandRange = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&__src);
    if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange))
      goto LABEL_14;
    v41 = v51[0];
    v42 = *(_QWORD *)v51[0];
    v43 = *(void **)(*(_QWORD *)v51[0] + 136);
  }
  if (v43 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v43 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || (v45 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v42 + 8),
        v69 = (_WORD *)v41,
        v70 = v45,
        OperandRange = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v69),
        !mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange)))
  {
    v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v71[8] = 257;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, _WORD **))(*(_QWORD *)a1 + 24))(&__src, a1, v46, &v69);
    v47 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__src, "'lhs' must be signless-integer-like, but got ");
    v48 = mlir::InFlightDiagnostic::append<mlir::Type &>(v47, v51);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v48);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&__src);
    return v10;
  }
LABEL_14:
  *(_QWORD *)&__src = getI1SameShape(*(_QWORD **)v55[0]);
  mlir::OperationState::addTypes((uint64_t)a2, &__src, 1);
  v9 = (uint64_t)(a2 + 2);
  if (!mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v56, v55, v7, v9))return 0;
  return (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)a1 + 696))(a1, v74, *(_QWORD *)v55[0], v9) != 0;
}

uint64_t mlir::arith::symbolizeCmpIPredicate(unsigned __int16 *a1, uint64_t a2)
{
  if (a2 == 3)
  {
    if (*a1 == 27763 && *((_BYTE *)a1 + 2) == 116)
    {
      return 2;
    }
    else if (*a1 == 27763 && *((_BYTE *)a1 + 2) == 101)
    {
      return 3;
    }
    else if (*a1 == 26483 && *((_BYTE *)a1 + 2) == 116)
    {
      return 4;
    }
    else if (*a1 == 26483 && *((_BYTE *)a1 + 2) == 101)
    {
      return 5;
    }
    else if (*a1 == 27765 && *((_BYTE *)a1 + 2) == 116)
    {
      return 6;
    }
    else if (*a1 == 27765 && *((_BYTE *)a1 + 2) == 101)
    {
      return 7;
    }
    else if (*a1 == 26485 && *((_BYTE *)a1 + 2) == 116)
    {
      return 8;
    }
    else if (*a1 ^ 0x6775 | *((unsigned __int8 *)a1 + 2) ^ 0x65)
    {
      return 0;
    }
    else
    {
      return 9;
    }
  }
  else
  {
    if (a2 != 2)
      return 0;
    return *a1 != 29029 && *a1 == 25966;
  }
}

void mlir::arith::CmpIOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  char v6;
  char *v7;
  size_t v8;
  llvm::raw_ostream *v9;
  void *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  mlir::Operation *v19;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  unint64_t AttrDictionary;
  void *v30;
  uint64_t v31;
  _QWORD v32[5];

  v32[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  v30 = (void *)*((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  v6 = 0;
  v7 = "eq";
  v8 = 2;
  switch(mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v30))
  {
    case 0:
      break;
    case 1:
      v6 = 0;
      v7 = "ne";
      v8 = 2;
      break;
    case 2:
      v6 = 0;
      v7 = "slt";
      goto LABEL_15;
    case 3:
      v6 = 0;
      v7 = "sle";
      goto LABEL_15;
    case 4:
      v6 = 0;
      v7 = "sgt";
      goto LABEL_15;
    case 5:
      v6 = 0;
      v7 = "sge";
      goto LABEL_15;
    case 6:
      v6 = 0;
      v7 = "ult";
      goto LABEL_15;
    case 7:
      v6 = 0;
      v7 = "ule";
      goto LABEL_15;
    case 8:
      v6 = 0;
      v7 = "ugt";
      goto LABEL_15;
    case 9:
      v6 = 0;
      v7 = "uge";
LABEL_15:
      v8 = 3;
      break;
    default:
      v8 = 0;
      v7 = &byte_207AF6795;
      v6 = 1;
      break;
  }
  v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v10 = (void *)*((_QWORD *)v9 + 4);
  if (v8 <= *((_QWORD *)v9 + 3) - (_QWORD)v10)
  {
    if ((v6 & 1) == 0)
    {
      memcpy(v10, v7, v8);
      *((_QWORD *)v9 + 4) += v8;
    }
  }
  else
  {
    llvm::raw_ostream::write(v9, v7, v8);
  }
  v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v12 = (_BYTE *)*((_QWORD *)v11 + 4);
  if (*((_BYTE **)v11 + 3) == v12)
  {
    llvm::raw_ostream::write(v11, ",", 1uLL);
  }
  else
  {
    *v12 = 44;
    ++*((_QWORD *)v11 + 4);
  }
  v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 32);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v16 = (_BYTE *)*((_QWORD *)v15 + 4);
  if (*((_BYTE **)v15 + 3) == v16)
  {
    llvm::raw_ostream::write(v15, ",", 1uLL);
  }
  else
  {
    *v16 = 44;
    ++*((_QWORD *)v15 + 4);
  }
  v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v18 = (_BYTE *)*((_QWORD *)v17 + 4);
  if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 32);
  }
  else
  {
    *((_QWORD *)v17 + 4) = v18 + 1;
    *v18 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 56));
  v30 = v32;
  v32[0] = "predicate";
  v32[1] = 9;
  v31 = 0x200000001;
  v19 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v19);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v19 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v22, v30, v31);
  v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v24 = (_BYTE *)*((_QWORD *)v23 + 4);
  if ((unint64_t)v24 >= *((_QWORD *)v23 + 3))
  {
    llvm::raw_ostream::write(v23, 32);
  }
  else
  {
    *((_QWORD *)v23 + 4) = v24 + 1;
    *v24 = 32;
  }
  v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v26 = (_BYTE *)*((_QWORD *)v25 + 4);
  if (*((_BYTE **)v25 + 3) == v26)
  {
    llvm::raw_ostream::write(v25, ":", 1uLL);
  }
  else
  {
    *v26 = 58;
    ++*((_QWORD *)v25 + 4);
  }
  v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v28 = (_BYTE *)*((_QWORD *)v27 + 4);
  if ((unint64_t)v28 >= *((_QWORD *)v27 + 3))
  {
    llvm::raw_ostream::write(v27, 32);
  }
  else
  {
    *((_QWORD *)v27 + 4) = v28 + 1;
    *v28 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v30 != v32)
    free(v30);
}

uint64_t mlir::arith::detail::ConstantOpGenericAdaptorBase::ConstantOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t Context;
  unint64_t v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_OWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  else
    v5 = 0;
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v11, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  v8 = *(_OWORD *)v11;
  *(_OWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 40) = v8;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.constant", 14, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::arith::ConstantOp::setPropertiesFromAttr(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int *v12;
  char *v13;
  char *v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  char *v25;
  char *v26;
  __int128 v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  char *v35;
  char *v36;
  __int128 v37;
  int *v38;
  char *v39;
  char *v40;
  __int128 v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56;
  int v57;
  const char *v58;
  uint64_t v59;
  _QWORD v60[3];
  void *v61;
  unsigned int v62;
  unsigned int v63;
  _BYTE v64[96];
  void *v65;
  _QWORD *v66;
  void *__p;
  _QWORD *v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v56 = v6;
  if (!v6)
  {
    a3(v60, a4);
    if (v60[0])
    {
      v57 = 3;
      v58 = "expected DictionaryAttr to set properties";
      v59 = 41;
      v12 = &v57;
      v13 = (char *)v61;
      if (v62 >= v63)
      {
        v48 = v62 + 1;
        if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
        {
          v52 = (char *)&v57 - (_BYTE *)v61;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
          v13 = (char *)v61;
          v12 = (int *)((char *)v61 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
          v12 = &v57;
          v13 = (char *)v61;
        }
      }
      v14 = &v13[24 * v62];
      v15 = *(_OWORD *)v12;
      *((_QWORD *)v14 + 2) = *((_QWORD *)v12 + 2);
      *(_OWORD *)v14 = v15;
      ++v62;
      if (v60[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
    }
    if (!v69)
      return 0;
    v16 = __p;
    if (__p)
    {
      v17 = v68;
      v18 = __p;
      if (v68 != __p)
      {
        do
          v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        v18 = __p;
      }
      v68 = v16;
      operator delete(v18);
    }
    v19 = v65;
    if (!v65)
      goto LABEL_60;
    v20 = v66;
    v21 = v65;
    if (v66 == v65)
      goto LABEL_59;
    do
    {
      v23 = *--v20;
      v22 = v23;
      *v20 = 0;
      if (v23)
        MEMORY[0x20BD002D4](v22, 0x1000C8077774924);
    }
    while (v20 != v19);
    goto LABEL_58;
  }
  v8 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v56, "value", 5uLL);
  if (!v8)
  {
    a3(v60, a4);
    if (v60[0])
    {
      v57 = 3;
      v58 = "expected key entry for value in DictionaryAttr to set Properties.";
      v59 = 65;
      v24 = &v57;
      v25 = (char *)v61;
      if (v62 >= v63)
      {
        v49 = v62 + 1;
        if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
        {
          v53 = (char *)&v57 - (_BYTE *)v61;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v49, 24);
          v25 = (char *)v61;
          v24 = (int *)((char *)v61 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v49, 24);
          v24 = &v57;
          v25 = (char *)v61;
        }
      }
      v26 = &v25[24 * v62];
      v27 = *(_OWORD *)v24;
      *((_QWORD *)v26 + 2) = *((_QWORD *)v24 + 2);
      *(_OWORD *)v26 = v27;
      ++v62;
      if (v60[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
    }
    if (!v69)
      return 0;
    v28 = __p;
    if (__p)
    {
      v29 = v68;
      v30 = __p;
      if (v68 != __p)
      {
        do
          v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        v30 = __p;
      }
      v68 = v28;
      operator delete(v30);
    }
    v19 = v65;
    if (!v65)
      goto LABEL_60;
    v31 = v66;
    v21 = v65;
    if (v66 == v65)
      goto LABEL_59;
    do
    {
      v33 = *--v31;
      v32 = v33;
      *v31 = 0;
      if (v33)
        MEMORY[0x20BD002D4](v32, 0x1000C8077774924);
    }
    while (v31 != v19);
    goto LABEL_58;
  }
  v9 = v8;
  if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v8 + 8))
  {
    v10 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v9 + 8);
    *a1 = v9;
    a1[1] = v10;
    return 1;
  }
  a3(v60, a4);
  if (v60[0])
  {
    v57 = 3;
    v59 = 50;
    v34 = &v57;
    v35 = (char *)v61;
    if (v62 >= v63)
    {
      v50 = v62 + 1;
      if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
      {
        v54 = (char *)&v57 - (_BYTE *)v61;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
        v35 = (char *)v61;
        v34 = (int *)((char *)v61 + v54);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
        v34 = &v57;
        v35 = (char *)v61;
      }
    }
    v36 = &v35[24 * v62];
    v37 = *(_OWORD *)v34;
    *((_QWORD *)v36 + 2) = *((_QWORD *)v34 + 2);
    *(_OWORD *)v36 = v37;
    ++v62;
    if (v60[0])
    {
      v38 = &v57;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v57, (uint64_t)v9);
      v39 = (char *)v61;
      if (v62 >= v63)
      {
        v51 = v62 + 1;
        if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
        {
          v55 = (char *)&v57 - (_BYTE *)v61;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v51, 24);
          v39 = (char *)v61;
          v38 = (int *)((char *)v61 + v55);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v51, 24);
          v38 = &v57;
          v39 = (char *)v61;
        }
      }
      v40 = &v39[24 * v62];
      v41 = *(_OWORD *)v38;
      *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
      *(_OWORD *)v40 = v41;
      ++v62;
      if (v60[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
    }
  }
  if (v69)
  {
    v42 = __p;
    if (__p)
    {
      v43 = v68;
      v44 = __p;
      if (v68 != __p)
      {
        do
          v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
        while (v43 != v42);
        v44 = __p;
      }
      v68 = v42;
      operator delete(v44);
    }
    v19 = v65;
    if (!v65)
      goto LABEL_60;
    v45 = v66;
    v21 = v65;
    if (v66 == v65)
    {
LABEL_59:
      v66 = v19;
      operator delete(v21);
LABEL_60:
      if (v61 != v64)
        free(v61);
      return 0;
    }
    do
    {
      v47 = *--v45;
      v46 = v47;
      *v45 = 0;
      if (v47)
        MEMORY[0x20BD002D4](v46, 0x1000C8077774924);
    }
    while (v45 != v19);
LABEL_58:
    v21 = v65;
    goto LABEL_59;
  }
  return 0;
}

uint64_t mlir::arith::ConstantOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t DictionaryAttr;
  mlir::DictionaryAttr *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  v13 = v15;
  v14 = 0x300000000;
  if (!*a2)
    return 0;
  NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"value", 5, *a2);
  v4 = v3;
  v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    v5 = v14;
  }
  v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *v6 = NamedAttr;
  v6[1] = v4;
  v7 = v13;
  v8 = __CFADD__((_DWORD)v14, 1);
  v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    DictionaryAttr = 0;
    if (v13 == v15)
      return DictionaryAttr;
    goto LABEL_10;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (mlir::MLIRContext *)v13, v9);
  v7 = v13;
  if (v13 != v15)
LABEL_10:
    free(v7);
  return DictionaryAttr;
}

unint64_t mlir::arith::ConstantOp::getInherentAttr(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;

  if (a4 == 5 && (*(_DWORD *)a3 == 1970037110 ? (v4 = *(_BYTE *)(a3 + 4) == 101) : (v4 = 0), v4))
    return *a2 & 0xFFFFFFFFFFFFFF00 | *a2;
  else
    return 0;
}

uint64_t mlir::arith::ConstantOp::setInherentAttr(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD *v6;

  if (a3 == 5 && *(_DWORD *)a2 == 1970037110 && *(_BYTE *)(a2 + 4) == 101)
  {
    v5 = a4;
    v6 = (_QWORD *)result;
    if (a4)
    {
      result = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*a4 + 8);
      if (result)
        result = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v5 + 8);
      else
        v5 = 0;
    }
    else
    {
      result = 0;
    }
    *v6 = v5;
    v6[1] = result;
  }
  return result;
}

void mlir::arith::ConstantOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"value", 5, *a2);
}

BOOL mlir::arith::ConstantOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  _QWORD *v6;

  v6 = (_QWORD *)mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  return !v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps3(v6, (const void **)"value", (const char *)5, a3, a4);
}

uint64_t mlir::arith::__mlir_ods_local_attr_constraint_ArithOps3(_QWORD *a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v9;
  const void ***v11;
  char *v12;
  char *v13;
  __int128 v14;
  const void ***v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  const void **v31;
  const char *v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unsigned int v38;
  unsigned int v39;
  _BYTE v40[96];
  void *v41;
  _QWORD *v42;
  void *__p;
  _QWORD *v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (!a1 || mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*a1 + 8))
    return 1;
  a4(&v35, a5);
  if (v35)
  {
    LODWORD(v31) = 3;
    v32 = "attribute '";
    v33 = 11;
    v11 = &v31;
    v12 = (char *)v37;
    if (v38 >= v39)
    {
      v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        v29 = (char *)&v31 - (_BYTE *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        v12 = (char *)v37;
        v11 = (const void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        v11 = &v31;
        v12 = (char *)v37;
      }
    }
    v13 = &v12[24 * v38];
    v14 = *(_OWORD *)v11;
    *((_QWORD *)v13 + 2) = v11[2];
    *(_OWORD *)v13 = v14;
    ++v38;
    if (v35)
    {
      v34 = 261;
      v31 = a2;
      v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (v35)
      {
        LODWORD(v31) = 3;
        v32 = "' failed to satisfy constraint: TypedAttr instance";
        v33 = 50;
        v15 = &v31;
        v16 = (char *)v37;
        if (v38 >= v39)
        {
          v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            v30 = (char *)&v31 - (_BYTE *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            v16 = (char *)v37;
            v15 = (const void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            v15 = &v31;
            v16 = (char *)v37;
          }
        }
        v17 = &v16[24 * v38];
        v18 = *(_OWORD *)v15;
        *((_QWORD *)v17 + 2) = v15[2];
        *(_OWORD *)v17 = v18;
        ++v38;
      }
    }
  }
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v35);
  if (v35)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
  if (v45)
  {
    v19 = __p;
    if (__p)
    {
      v20 = v44;
      v21 = __p;
      if (v44 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v44 = v19;
      operator delete(v21);
    }
    v22 = v41;
    if (v41)
    {
      v23 = v42;
      v24 = v41;
      if (v42 != v41)
      {
        do
        {
          v26 = *--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            MEMORY[0x20BD002D4](v25, 0x1000C8077774924);
        }
        while (v23 != v22);
        v24 = v41;
      }
      v42 = v22;
      operator delete(v24);
    }
    if (v37 != v40)
      free(v37);
  }
  return v9;
}

BOOL mlir::arith::ConstantOp::readProperties(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::TypedAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451A000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451A000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties]";
        v15 = 111;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451A000;
      }
    }
    a1[33] = v5[282];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::TypedAttr>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  const void ***v8;
  char *v9;
  char *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const void ***v16;
  char *v17;
  char *v18;
  __int128 v19;
  const void ***v20;
  char *v21;
  char *v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  _WORD v38[20];
  _QWORD *v39;
  const void **v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[96];
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD *v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD **))(*(_QWORD *)a1 + 48))(a1, &v39))
    return 0;
  v4 = v39;
  if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v39 + 8))
  {
    v5 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v4 + 8);
    *a2 = v4;
    a2[1] = v5;
    if (v4)
      return 1;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    v41 = (unint64_t)"expected ";
    v42 = 9;
    v8 = &v40;
    v9 = (char *)v46;
    if (v47 >= v48)
    {
      v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v9 = (char *)v46;
        v8 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v8 = &v40;
        v9 = (char *)v46;
      }
    }
    v10 = &v9[24 * v47];
    v11 = *(_OWORD *)v8;
    *((_QWORD *)v10 + 2) = v8[2];
    *(_OWORD *)v10 = v11;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
  v41 = 65;
  v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12)
      v13 = v12;
    else
      v13 = v41;
    v14 = 18;
    if (v41 - v13 < 0x12)
      v14 = v41 - v13;
    v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1)
      --v15;
    v43 = 261;
    v40 = (const void **)((char *)v40 + v13 + v14);
    v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      v41 = (unint64_t)", but got: ";
      v42 = 11;
      v16 = &v40;
      v17 = (char *)v46;
      if (v47 >= v48)
      {
        v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          v36 = (char *)&v40 - (_BYTE *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v17 = (char *)v46;
          v16 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v16 = &v40;
          v17 = (char *)v46;
        }
      }
      v18 = &v17[24 * v47];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = v16[2];
      *(_OWORD *)v18 = v19;
      ++v47;
      if (v44)
      {
        v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, (uint64_t)v39);
        v21 = (char *)v46;
        if (v47 >= v48)
        {
          v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            v37 = (char *)&v40 - (_BYTE *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v21 = (char *)v46;
            v20 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v20 = &v40;
            v21 = (char *)v46;
          }
        }
        v22 = &v21[24 * v47];
        v23 = *(_OWORD *)v20;
        *((_QWORD *)v22 + 2) = v20[2];
        *(_OWORD *)v22 = v23;
        ++v47;
      }
    }
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v24 = __p;
    if (__p)
    {
      v25 = v53;
      v26 = __p;
      if (v53 != __p)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = __p;
      }
      v53 = v24;
      operator delete(v26);
    }
    v27 = v50;
    if (v50)
    {
      v28 = v51;
      v29 = v50;
      if (v51 != v50)
      {
        do
        {
          v31 = *--v28;
          v30 = v31;
          *v28 = 0;
          if (v31)
            MEMORY[0x20BD002D4](v30, 0x1000C8077774924);
        }
        while (v28 != v27);
        v29 = v50;
      }
      v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49)
      free(v46);
  }
  return v6;
}

void mlir::arith::ConstantOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  __int128 *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *__src;
  uint64_t v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  v7 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>((_QWORD *)a2);
  *v7 = a3;
  v7[1] = a4;
  __src = v27;
  v26 = 0x200000000;
  mlir::ValueRange::ValueRange(&v24, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v10 = *(__int128 **)(a2 + 256);
  v11 = mlir::ValueRange::ValueRange(&v23, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::arith::ConstantOp::inferReturnTypes((uint64_t)v11, v12, v13, v14, v15, Dictionary, v10, v16, v21, v22, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v17 = __src;
  v18 = v26;
  v19 = *(unsigned int *)(a2 + 72);
  v20 = v19 + v26;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v18)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v27)
    free(__src);
}

uint64_t mlir::arith::ConstantOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v12;
  unsigned int v13;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;

  v18 = a6;
  v12 = *(_DWORD *)(a11 + 8);
  if (v12 != 1)
  {
    if (!v12)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        v13 = 0;
LABEL_6:
        bzero((void *)(*(_QWORD *)a11 + 8 * v13), 8 - 8 * v13);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      v13 = *(_DWORD *)(a11 + 8);
      if (v13 != 1)
        goto LABEL_6;
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  if (a7)
  {
    v17 = *a7;
    if ((_QWORD)v17)
    {
LABEL_10:
      **(_QWORD **)a11 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v17);
      return 1;
    }
  }
  else
  {
    v15 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v18, "value", 5uLL);
    v16 = v15;
    if (v15)
    {
      if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v15 + 8))
      {
        v17 = 0uLL;
        return 0;
      }
      v15 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v16 + 8);
    }
    *(_QWORD *)&v17 = v16;
    *((_QWORD *)&v17 + 1) = v15;
    if (v16)
      goto LABEL_10;
  }
  return 0;
}

uint64_t mlir::arith::ConstantOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t canMapOperands;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  const void **v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  const void **v29;
  uint64_t v30;
  __int16 v31;
  _QWORD v32[3];
  void *v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  void *__p;
  _QWORD *v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v3 = (_QWORD *)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v32[0] = v2;
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps3(v3, (const void **)"value", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v32))return 0;
    if (*((_DWORD *)*this + 9))
      v4 = (uint64_t)(*this - 2);
    else
      v4 = 0;
    mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
    v5 = (_QWORD *)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
    if (v5)
      v6 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v5 + 8);
    else
      v6 = 0;
    v32[0] = v5;
    v32[1] = v6;
    canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)v32);
    if (*((_DWORD *)*this + 9))
      v17 = (uint64_t)(*this - 2);
    else
      v17 = 0;
    if (canMapOperands == (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v17, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      if (*((_DWORD *)*this + 9))
        v18 = (uint64_t)(*this - 2);
      else
        v18 = 0;
      v19 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v18, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      v20 = (const void **)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
      if (v20)
      {
        v21 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>((uint64_t)*v20 + 8);
        v29 = v20;
        v30 = v21;
        if (v19 != mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v29))
          goto LABEL_33;
        return 1;
      }
      v29 = 0;
      v30 = 0;
      if (v19 == mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v29))
        return 1;
    }
LABEL_33:
    v29 = (const void **)"failed to verify that all of {value, result} have same type";
    v31 = 259;
    mlir::OpState::emitOpError(this, &v29, (uint64_t)v32);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
    if (v32[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
    if (v39)
    {
      v22 = __p;
      if (__p)
      {
        v23 = v38;
        v24 = __p;
        if (v38 != __p)
        {
          do
            v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
          while (v23 != v22);
          v24 = __p;
        }
        v38 = v22;
        operator delete(v24);
      }
      v11 = v35;
      if (!v35)
        goto LABEL_49;
      v25 = v36;
      v13 = v35;
      if (v36 == v35)
      {
LABEL_48:
        v36 = v11;
        operator delete(v13);
LABEL_49:
        if (v33 != &v34)
          free(v33);
        return v7;
      }
      do
      {
        v27 = *--v25;
        v26 = v27;
        *v25 = 0;
        if (v27)
          MEMORY[0x20BD002D4](v26, 0x1000C8077774924);
      }
      while (v25 != v11);
LABEL_47:
      v13 = v35;
      goto LABEL_48;
    }
    return v7;
  }
  v29 = (const void **)"requires attribute 'value'";
  v31 = 259;
  mlir::OpState::emitOpError(this, &v29, (uint64_t)v32);
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
  if (v32[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
  if (v39)
  {
    v8 = __p;
    if (__p)
    {
      v9 = v38;
      v10 = __p;
      if (v38 != __p)
      {
        do
          v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        v10 = __p;
      }
      v38 = v8;
      operator delete(v10);
    }
    v11 = v35;
    if (!v35)
      goto LABEL_49;
    v12 = v36;
    v13 = v35;
    if (v36 == v35)
      goto LABEL_48;
    do
    {
      v15 = *--v12;
      v14 = v15;
      *v12 = 0;
      if (v15)
        MEMORY[0x20BD002D4](v14, 0x1000C8077774924);
    }
    while (v12 != v11);
    goto LABEL_47;
  }
  return v7;
}

uint64_t mlir::arith::ConstantOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _OWORD *v6;
  uint64_t canMapOperands;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  __int128 v12;

  v12 = 0uLL;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v4 = *(_QWORD *)(a2 + 8);
  v10[0] = a1;
  v10[1] = &v11;
  v10[2] = a2;
  v5 = (_QWORD *)mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v4 + 96));
  if (v5)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps3(v5, (const void **)"value", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::ConstantOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v10))return 0;
  }
  if (!mlir::AsmParser::parseAttribute<mlir::TypedAttr>(a1, &v12, 0))
    return 0;
  if ((_QWORD)v12)
  {
    v6 = (_OWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>((_QWORD *)a2);
    *v6 = v12;
  }
  canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v12);
  v8 = *(unsigned int *)(a2 + 72);
  if (v8 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v8) = canMapOperands;
  ++*(_DWORD *)(a2 + 72);
  return 1;
}

void mlir::arith::ConstantOp::print(mlir::arith::ConstantOp *this, mlir::OpAsmPrinter *a2)
{
  _BYTE *v4;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  _QWORD *v10;
  unint64_t AttrDictionary;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x24BDAC8D0];
  v12 = v14;
  v14[0] = "value";
  v14[1] = 5;
  v13 = 0x200000001;
  v4 = *(_BYTE **)this;
  if (v4[47])
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v4 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v7, v12, v13);
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
    v10 = *(_QWORD **)(*(_QWORD *)this
                     + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)
                     + 64);
    if (!v10)
      goto LABEL_9;
    goto LABEL_8;
  }
  *((_QWORD *)v8 + 4) = v9 + 1;
  *v9 = 32;
  v10 = *(_QWORD **)(*(_QWORD *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)
                   + 64);
  if (v10)
LABEL_8:
    mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8);
LABEL_9:
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v10);
  if (v12 != v14)
    free(v12);
}

uint64_t mlir::arith::detail::DivFOpGenericAdaptorBase::DivFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.divf", 10, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::DivFOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451A000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451A000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::DivFOpGenericAdaptorBase::Properties]";
        v15 = 107;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451A000;
      }
    }
    a1[33] = v5[284];
    return a1[32];
  }
  return result;
}

BOOL mlir::arith::DivFOp::parse(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD __src[3];
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  v10 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v13, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v12, 1))
    return 0;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0;
    if (v10)
    {
      v4 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties>(a2);
      *v4 = v10;
    }
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
  {
    v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::DivFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
      {
        v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::DivSIOpGenericAdaptorBase::DivSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.divsi", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::DivSIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t __src;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    && (__src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::DivUIOpGenericAdaptorBase::DivUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.divui", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::DivUIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t __src;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    && (__src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::ExtFOpGenericAdaptorBase::ExtFOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.extf", 10, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::ExtFOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;

  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))return 0;
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

BOOL mlir::arith::ExtFOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8[2];
  uint64_t v9;
  _QWORD v10[4];
  _QWORD __src[4];
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 504))(a1, __src))
    return 0;
  v9 = __src[0];
  v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))return 0;
  v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    return 0;
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::ExtSIOpGenericAdaptorBase::ExtSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.extsi", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::ExtSIOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;

  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps7(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 0))return 0;
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps7(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::arith::__mlir_ods_local_type_constraint_ArithOps7(uint64_t *a1, uint64_t a2, const void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  const void **v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  uint64_t *p_OperandRange;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  __int128 v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  BOOL v46;
  unint64_t v47;
  int64_t v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  const void **v52;
  uint64_t v53;
  __int16 v54;
  const void **v55;
  uint64_t OperandRange;
  const char *v57;
  uint64_t v58;
  _QWORD v59[3];
  void *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[96];
  void *v64;
  _QWORD *v65;
  void *__p;
  _QWORD *v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v55 = (const void **)a2;
  if (mlir::Type::isSignlessInteger((mlir::Type *)&v55))
    return 1;
  v11 = v55;
  v12 = *v55;
  v13 = (void *)*((_QWORD *)*v55 + 17);
  if (v13 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8);
    v59[0] = v11;
    v59[1] = v14;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v59);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange))
      return 1;
    v11 = v55;
    v12 = *v55;
    v13 = (void *)*((_QWORD *)*v55 + 17);
  }
  if (v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v52 = v11;
    v53 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8);
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v52);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange))
      return 1;
  }
  v54 = 261;
  v52 = a3;
  v53 = a4;
  mlir::Operation::emitOpError(a1, &v52, (uint64_t)v59);
  if (v59[0])
  {
    LODWORD(OperandRange) = 3;
    v57 = " #";
    v58 = 2;
    p_OperandRange = &OperandRange;
    v17 = (char *)v60;
    if (v61 >= v62)
    {
      v42 = v61 + 1;
      if (v60 <= &OperandRange && (char *)v60 + 24 * v61 > (char *)&OperandRange)
      {
        v48 = (char *)&OperandRange - (_BYTE *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v42, 24);
        v17 = (char *)v60;
        p_OperandRange = (uint64_t *)((char *)v60 + v48);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v42, 24);
        p_OperandRange = &OperandRange;
        v17 = (char *)v60;
      }
    }
    v18 = &v17[24 * v61];
    v19 = *(_OWORD *)p_OperandRange;
    *((_QWORD *)v18 + 2) = p_OperandRange[2];
    *(_OWORD *)v18 = v19;
    v20 = ++v61;
    if (v59[0])
    {
      LODWORD(OperandRange) = 5;
      v57 = (const char *)a5;
      v21 = &OperandRange;
      v22 = (char *)v60;
      if (v20 >= v62)
      {
        v43 = v20 + 1;
        v44 = (char *)v60 + 24 * v20 > (char *)&OperandRange;
        if (v60 <= &OperandRange && v44)
        {
          v49 = (char *)&OperandRange - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v43, 24);
          v22 = (char *)v60;
          v21 = (uint64_t *)((char *)v60 + v49);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v43, 24);
          v21 = &OperandRange;
          v22 = (char *)v60;
        }
      }
      v23 = &v22[24 * v61];
      v24 = *(_OWORD *)v21;
      *((_QWORD *)v23 + 2) = v21[2];
      *(_OWORD *)v23 = v24;
      v25 = ++v61;
      if (v59[0])
      {
        LODWORD(OperandRange) = 3;
        v57 = " must be signless-fixed-width-integer-like, but got ";
        v58 = 52;
        v26 = &OperandRange;
        v27 = (char *)v60;
        if (v25 >= v62)
        {
          v45 = v25 + 1;
          v46 = (char *)v60 + 24 * v25 > (char *)&OperandRange;
          if (v60 <= &OperandRange && v46)
          {
            v50 = (char *)&OperandRange - (_BYTE *)v60;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v45, 24);
            v27 = (char *)v60;
            v26 = (uint64_t *)((char *)v60 + v50);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v45, 24);
            v26 = &OperandRange;
            v27 = (char *)v60;
          }
        }
        v28 = &v27[24 * v61];
        v29 = *(_OWORD *)v26;
        *((_QWORD *)v28 + 2) = v26[2];
        *(_OWORD *)v28 = v29;
        ++v61;
        if (v59[0])
        {
          v30 = &OperandRange;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&OperandRange, (uint64_t)v55);
          v31 = (char *)v60;
          if (v61 >= v62)
          {
            v47 = v61 + 1;
            if (v60 <= &OperandRange && (char *)v60 + 24 * v61 > (char *)&OperandRange)
            {
              v51 = (char *)&OperandRange - (_BYTE *)v60;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
              v31 = (char *)v60;
              v30 = (uint64_t *)((char *)v60 + v51);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
              v30 = &OperandRange;
              v31 = (char *)v60;
            }
          }
          v32 = &v31[24 * v61];
          v33 = *(_OWORD *)v30;
          *((_QWORD *)v32 + 2) = v30[2];
          *(_OWORD *)v32 = v33;
          ++v61;
        }
      }
    }
  }
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v59);
  if (v59[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
  if (v68)
  {
    v34 = __p;
    if (__p)
    {
      v35 = v67;
      v36 = __p;
      if (v67 != __p)
      {
        do
          v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
        while (v35 != v34);
        v36 = __p;
      }
      v67 = v34;
      operator delete(v36);
    }
    v37 = v64;
    if (v64)
    {
      v38 = v65;
      v39 = v64;
      if (v65 != v64)
      {
        do
        {
          v41 = *--v38;
          v40 = v41;
          *v38 = 0;
          if (v41)
            MEMORY[0x20BD002D4](v40, 0x1000C8077774924);
        }
        while (v38 != v37);
        v39 = v64;
      }
      v65 = v37;
      operator delete(v39);
    }
    if (v60 != v63)
      free(v60);
  }
  return v9;
}

BOOL mlir::arith::ExtSIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8[2];
  uint64_t v9;
  _QWORD v10[4];
  _QWORD __src[4];
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 504))(a1, __src))
    return 0;
  v9 = __src[0];
  v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))return 0;
  v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    return 0;
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::ExtUIOpGenericAdaptorBase::ExtUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.extui", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::ExtUIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8[2];
  uint64_t v9;
  _QWORD v10[4];
  _QWORD __src[4];
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 504))(a1, __src))
    return 0;
  v9 = __src[0];
  v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))return 0;
  v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    return 0;
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::FPToSIOpGenericAdaptorBase::FPToSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.fptosi", 12, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::FPToSIOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;

  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))return 0;
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps7(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", 6, 0) != 0;
}

BOOL mlir::arith::FPToSIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8[2];
  uint64_t v9;
  _QWORD v10[4];
  _QWORD __src[4];
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 504))(a1, __src))
    return 0;
  v9 = __src[0];
  v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))return 0;
  v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    return 0;
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::FPToUIOpGenericAdaptorBase::FPToUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.fptoui", 12, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::FPToUIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8[2];
  uint64_t v9;
  _QWORD v10[4];
  _QWORD __src[4];
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 504))(a1, __src))
    return 0;
  v9 = __src[0];
  v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))return 0;
  v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    return 0;
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::FloorDivSIOpGenericAdaptorBase::FloorDivSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.floordivsi", 16, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::FloorDivSIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t __src;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    && (__src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::IndexCastOpGenericAdaptorBase::IndexCastOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.index_cast", 16, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::IndexCastOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;

  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps8(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 0))return 0;
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps8(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::arith::__mlir_ods_local_type_constraint_ArithOps8(uint64_t *a1, uint64_t a2, const void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  const void **v11;
  const void *v12;
  void *v13;
  const void ***v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  const void ***v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  const void ***v25;
  char *v26;
  char *v27;
  __int128 v28;
  const void ***v29;
  char *v30;
  char *v31;
  __int128 v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  const void **v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  const void **v58;
  uint64_t OperandRange;
  const void **v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  void *v64;
  unsigned int v65;
  unsigned int v66;
  _BYTE v67[96];
  void *v68;
  _QWORD *v69;
  void *__p;
  _QWORD *v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v58 = (const void **)a2;
  if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&v58))
    return 1;
  v11 = v58;
  if (*((_UNKNOWN **)*v58 + 17) == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    v57 = (uint64_t)v58;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
    v11 = v58;
    if (v41 >= 1)
    {
      if (v58)
        v42 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v58 + 8);
      else
        v42 = 0;
      v63[0] = v11;
      v63[1] = v42;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v63);
      if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange))
        return 1;
      v11 = v58;
    }
  }
  v12 = *v11;
  v13 = (void *)*((_QWORD *)*v11 + 17);
  if (v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v54 = v11;
    v55 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8);
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v54);
    if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange))
      return 1;
    v11 = v58;
    v12 = *v58;
    v13 = (void *)*((_QWORD *)*v58 + 17);
  }
  if (v13 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    v43 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8);
    v60 = v11;
    v61 = v43;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v60);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange)
      || *(_UNKNOWN **)(*(_QWORD *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
    {
      return 1;
    }
  }
  v56 = 261;
  v54 = a3;
  v55 = a4;
  mlir::Operation::emitOpError(a1, &v54, (uint64_t)v63);
  if (v63[0])
  {
    LODWORD(v60) = 3;
    v61 = (uint64_t)" #";
    v62 = 2;
    v15 = &v60;
    v16 = (char *)v64;
    if (v65 >= v66)
    {
      v44 = v65 + 1;
      if (v64 <= &v60 && (char *)v64 + 24 * v65 > (char *)&v60)
      {
        v50 = (char *)&v60 - (_BYTE *)v64;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v44, 24);
        v16 = (char *)v64;
        v15 = (const void ***)((char *)v64 + v50);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v44, 24);
        v15 = &v60;
        v16 = (char *)v64;
      }
    }
    v17 = &v16[24 * v65];
    v18 = *(_OWORD *)v15;
    *((_QWORD *)v17 + 2) = v15[2];
    *(_OWORD *)v17 = v18;
    v19 = ++v65;
    if (v63[0])
    {
      LODWORD(v60) = 5;
      v61 = a5;
      v20 = &v60;
      v21 = (char *)v64;
      if (v19 >= v66)
      {
        v45 = v19 + 1;
        v46 = (char *)v64 + 24 * v19 > (char *)&v60;
        if (v64 <= &v60 && v46)
        {
          v51 = (char *)&v60 - (_BYTE *)v64;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v45, 24);
          v21 = (char *)v64;
          v20 = (const void ***)((char *)v64 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v45, 24);
          v20 = &v60;
          v21 = (char *)v64;
        }
      }
      v22 = &v21[24 * v65];
      v23 = *(_OWORD *)v20;
      *((_QWORD *)v22 + 2) = v20[2];
      *(_OWORD *)v22 = v23;
      v24 = ++v65;
      if (v63[0])
      {
        LODWORD(v60) = 3;
        v61 = (uint64_t)" must be signless-integer-like or memref of signless-integer, but got ";
        v62 = 70;
        v25 = &v60;
        v26 = (char *)v64;
        if (v24 >= v66)
        {
          v47 = v24 + 1;
          v48 = (char *)v64 + 24 * v24 > (char *)&v60;
          if (v64 <= &v60 && v48)
          {
            v52 = (char *)&v60 - (_BYTE *)v64;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v47, 24);
            v26 = (char *)v64;
            v25 = (const void ***)((char *)v64 + v52);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v47, 24);
            v25 = &v60;
            v26 = (char *)v64;
          }
        }
        v27 = &v26[24 * v65];
        v28 = *(_OWORD *)v25;
        *((_QWORD *)v27 + 2) = v25[2];
        *(_OWORD *)v27 = v28;
        ++v65;
        if (v63[0])
        {
          v29 = &v60;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v60, (uint64_t)v58);
          v30 = (char *)v64;
          if (v65 >= v66)
          {
            v49 = v65 + 1;
            if (v64 <= &v60 && (char *)v64 + 24 * v65 > (char *)&v60)
            {
              v53 = (char *)&v60 - (_BYTE *)v64;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v49, 24);
              v30 = (char *)v64;
              v29 = (const void ***)((char *)v64 + v53);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v49, 24);
              v29 = &v60;
              v30 = (char *)v64;
            }
          }
          v31 = &v30[24 * v65];
          v32 = *(_OWORD *)v29;
          *((_QWORD *)v31 + 2) = v29[2];
          *(_OWORD *)v31 = v32;
          ++v65;
        }
      }
    }
  }
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v63);
  if (v63[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v63);
  if (v72)
  {
    v33 = __p;
    if (__p)
    {
      v34 = v71;
      v35 = __p;
      if (v71 != __p)
      {
        do
          v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
        while (v34 != v33);
        v35 = __p;
      }
      v71 = v33;
      operator delete(v35);
    }
    v36 = v68;
    if (v68)
    {
      v37 = v69;
      v38 = v68;
      if (v69 != v68)
      {
        do
        {
          v40 = *--v37;
          v39 = v40;
          *v37 = 0;
          if (v40)
            MEMORY[0x20BD002D4](v39, 0x1000C8077774924);
        }
        while (v37 != v36);
        v38 = v68;
      }
      v69 = v36;
      operator delete(v38);
    }
    if (v64 != v67)
      free(v64);
  }
  return v9;
}

BOOL mlir::arith::IndexCastOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8[2];
  uint64_t v9;
  _QWORD v10[4];
  _QWORD __src[4];
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 504))(a1, __src))
    return 0;
  v9 = __src[0];
  v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))return 0;
  v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    return 0;
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::IndexCastUIOpGenericAdaptorBase::IndexCastUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.index_castui", 18, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::IndexCastUIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8[2];
  uint64_t v9;
  _QWORD v10[4];
  _QWORD __src[4];
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 504))(a1, __src))
    return 0;
  v9 = __src[0];
  v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))return 0;
  v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    return 0;
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::MaxNumFOpGenericAdaptorBase::MaxNumFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.maxnumf", 13, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MaxNumFOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451A000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451A000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties]";
        v15 = 110;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451A000;
      }
    }
    a1[33] = v5[286];
    return a1[32];
  }
  return result;
}

BOOL mlir::arith::MaxNumFOp::parse(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD __src[3];
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  v10 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v13, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v12, 1))
    return 0;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0;
    if (v10)
    {
      v4 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties>(a2);
      *v4 = v10;
    }
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
  {
    v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MaxNumFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
      {
        v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::MaxSIOpGenericAdaptorBase::MaxSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.maxsi", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MaxSIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t __src;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    && (__src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::MaxUIOpGenericAdaptorBase::MaxUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.maxui", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MaxUIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t __src;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    && (__src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::MaximumFOpGenericAdaptorBase::MaximumFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.maximumf", 14, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MaximumFOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451A000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451A000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties]";
        v15 = 111;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451A000;
      }
    }
    a1[33] = v5[288];
    return a1[32];
  }
  return result;
}

BOOL mlir::arith::MaximumFOp::parse(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD __src[3];
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  v10 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v13, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v12, 1))
    return 0;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0;
    if (v10)
    {
      v4 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties>(a2);
      *v4 = v10;
    }
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
  {
    v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MaximumFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
      {
        v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::MinNumFOpGenericAdaptorBase::MinNumFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.minnumf", 13, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MinNumFOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451A000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451A000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties]";
        v15 = 110;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451A000;
      }
    }
    a1[33] = v5[290];
    return a1[32];
  }
  return result;
}

BOOL mlir::arith::MinNumFOp::parse(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD __src[3];
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  v10 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v13, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v12, 1))
    return 0;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0;
    if (v10)
    {
      v4 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties>(a2);
      *v4 = v10;
    }
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
  {
    v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MinNumFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
      {
        v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::MinSIOpGenericAdaptorBase::MinSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.minsi", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MinSIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t __src;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    && (__src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::MinUIOpGenericAdaptorBase::MinUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.minui", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MinUIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t __src;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    && (__src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::MinimumFOpGenericAdaptorBase::MinimumFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.minimumf", 14, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MinimumFOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451A000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451A000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties]";
        v15 = 111;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451A000;
      }
    }
    a1[33] = v5[292];
    return a1[32];
  }
  return result;
}

BOOL mlir::arith::MinimumFOp::parse(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD __src[3];
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  v10 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v13, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v12, 1))
    return 0;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0;
    if (v10)
    {
      v4 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties>(a2);
      *v4 = v10;
    }
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
  {
    v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MinimumFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
      {
        v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::MulFOpGenericAdaptorBase::MulFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.mulf", 10, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MulFOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451A000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451A000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::MulFOpGenericAdaptorBase::Properties]";
        v15 = 107;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451A000;
      }
    }
    a1[33] = v5[294];
    return a1[32];
  }
  return result;
}

BOOL mlir::arith::MulFOp::parse(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD __src[3];
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  v10 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v13, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v12, 1))
    return 0;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0;
    if (v10)
    {
      v4 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties>(a2);
      *v4 = v10;
    }
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
  {
    v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MulFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
      {
        v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::MulIOpGenericAdaptorBase::MulIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.muli", 10, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MulIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t __src;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    && (__src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::MulSIExtendedOpGenericAdaptorBase::MulSIExtendedOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.mulsi_extended", 20, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::arith::MulSIExtendedOp::getAsmResultNames(uint64_t a1, void (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v5;
  uint64_t NextResultAtOffset;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v5 = *(_QWORD *)a1 - 16;
  else
    v5 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  a2(a3, NextResultAtOffset, "low", 3);
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v7 = *(_QWORD *)a1 - 16;
  else
    v7 = 0;
  v8 = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 1);
  v9 = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
  return ((uint64_t (*)(uint64_t, uint64_t, const char *, uint64_t))a2)(a3, v9, "high", 4);
}

void mlir::arith::MulSIExtendedOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  void *__src;
  uint64_t v18;
  _BYTE v19[16];
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v13 = a4;
  v14 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v14, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v13, 1);
  __src = v19;
  v18 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v16, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v15, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  v20 = v16;
  v6 = v18;
  if ((_DWORD)v18 != 2)
  {
    if (v18 <= 2)
    {
      if (HIDWORD(v18) > 1
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v19, 2uLL, 8), v6 = v18, (_DWORD)v18 != 2))
      {
        bzero((char *)__src + 8 * v6, 16 - 8 * v6);
      }
    }
    LODWORD(v18) = 2;
  }
  v7 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v20, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v20, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)__src = v7;
  v9 = __src;
  *((_QWORD *)__src + 1) = v8;
  v10 = v18;
  v11 = *(unsigned int *)(a2 + 72);
  v12 = v11 + v18;
  if (v12 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v12, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v10)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v11), v9, 8 * v10);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v11 + v10;
  if (__src != v19)
    free(__src);
}

uint64_t mlir::arith::MulSIExtendedOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  v15[0] = a4;
  v15[1] = a5;
  v11 = a11[2];
  if (v11 != 2)
  {
    if (v11 <= 2)
    {
      if (a11[3] > 1u
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a11, a11 + 4, 2uLL, 8), v11 = a11[2], v11 != 2))
      {
        bzero((void *)(*(_QWORD *)a11 + 8 * v11), 16 - 8 * v11);
      }
    }
    a11[2] = 2;
  }
  v12 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v15, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v15, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  **(_QWORD **)a11 = v12;
  *(_QWORD *)(*(_QWORD *)a11 + 8) = v13;
  return 1;
}

uint64_t mlir::arith::MulSIExtendedOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  const void **v29;
  __int16 v30;
  _QWORD v31[3];
  void *v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  void *__p;
  _QWORD *v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 0)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 1u))
  {
    return 0;
  }
  v2 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", 6, 0))return 0;
  v4 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  v5 = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 1);
  v6 = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*this, *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", 6, 1u))return 0;
  v7 = *this;
  v8 = (*this)[9];
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v9 != (*(_QWORD *)(*(_QWORD *)(v8 + 56) + 8) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_27;
  v10 = *((_DWORD *)v7 + 9);
  v11 = v7 - 2;
  v12 = v10 ? (uint64_t)v11 : 0;
  if (v9 != (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0) + 8) & 0xFFFFFFFFFFFFFFF8)
    || (*((_DWORD *)*this + 9) ? (v13 = (uint64_t)(*this - 2)) : (v13 = 0),
        (v14 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 0) + 8) & 0xFFFFFFFFFFFFFFF8,
         *((_DWORD *)*this + 9))
      ? (v15 = (uint64_t)(*this - 2))
      : (v15 = 0),
        (v16 = mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 1),
         v14 != (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v16, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
     || (*((_DWORD *)*this + 9) ? (v17 = (uint64_t)(*this - 2)) : (v17 = 0),
         v18 = 1,
         v19 = mlir::detail::OpResultImpl::getNextResultAtOffset(v17, 1),
         (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v19, 0) + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8))))
  {
LABEL_27:
    v29 = (const void **)"failed to verify that all of {lhs, rhs, low, high} have same type";
    v30 = 259;
    mlir::OpState::emitOpError(this, &v29, (uint64_t)v31);
    v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v31);
    if (v31[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v31);
    if (v38)
    {
      v20 = __p;
      if (__p)
      {
        v21 = v37;
        v22 = __p;
        if (v37 != __p)
        {
          do
            v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          v22 = __p;
        }
        v37 = v20;
        operator delete(v22);
      }
      v23 = v34;
      if (v34)
      {
        v24 = v35;
        v25 = v34;
        if (v35 != v34)
        {
          do
          {
            v27 = *--v24;
            v26 = v27;
            *v24 = 0;
            if (v27)
              MEMORY[0x20BD002D4](v26, 0x1000C8077774924);
          }
          while (v24 != v23);
          v25 = v34;
        }
        v35 = v23;
        operator delete(v25);
      }
      if (v32 != &v33)
        free(v32);
    }
  }
  return v18;
}

BOOL mlir::arith::MulSIExtendedOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[2];
  uint64_t v9[2];
  uint64_t __src;
  _QWORD v11[4];
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  memset(v12, 0, 24);
  v9[0] = (uint64_t)v12;
  v9[1] = 1;
  memset(v11, 0, 24);
  __src = 0;
  v8[0] = &__src;
  v8[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v12, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v11, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v7 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v7))
    && (__src = v7,
        mlir::OperationState::addTypes(a2, &__src, 1),
        mlir::OperationState::addTypes(a2, &__src, 1),
        v5 = a2 + 16,
        mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v9, v8, v4, v5)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)a1 + 696))(a1, v11, *(_QWORD *)v8[0], v5) != 0;
  }
  else
  {
    return 0;
  }
}

void mlir::arith::MulSIExtendedOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  mlir::Operation *v10;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  unint64_t AttrDictionary;
  void *v21;
  uint64_t v22;
  _QWORD v23[5];

  v23[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ",", 1uLL);
  }
  else
  {
    *v7 = 44;
    ++*((_QWORD *)v6 + 4);
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 56));
  v21 = v23;
  v22 = 0x200000000;
  v10 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v10);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v10 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v13, v21, v22);
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((_QWORD *)v14 + 4) = v15 + 1;
    *v15 = 32;
  }
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if (*((_BYTE **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ":", 1uLL);
  }
  else
  {
    *v17 = 58;
    ++*((_QWORD *)v16 + 4);
  }
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_BYTE *)*((_QWORD *)v18 + 4);
  if ((unint64_t)v19 >= *((_QWORD *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((_QWORD *)v18 + 4) = v19 + 1;
    *v19 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v21 != v23)
    free(v21);
}

uint64_t mlir::arith::detail::MulUIExtendedOpGenericAdaptorBase::MulUIExtendedOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.mului_extended", 20, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MulUIExtendedOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[2];
  uint64_t v9[2];
  uint64_t __src;
  _QWORD v11[4];
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  memset(v12, 0, 24);
  v9[0] = (uint64_t)v12;
  v9[1] = 1;
  memset(v11, 0, 24);
  __src = 0;
  v8[0] = &__src;
  v8[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v12, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v11, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v7 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v7))
    && (__src = v7,
        mlir::OperationState::addTypes(a2, &__src, 1),
        mlir::OperationState::addTypes(a2, &__src, 1),
        v5 = a2 + 16,
        mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v9, v8, v4, v5)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)a1 + 696))(a1, v11, *(_QWORD *)v8[0], v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::NegFOpGenericAdaptorBase::NegFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.negf", 10, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::NegFOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451A000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451A000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::NegFOpGenericAdaptorBase::Properties]";
        v15 = 107;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451A000;
      }
    }
    a1[33] = v5[296];
    return a1[32];
  }
  return result;
}

void mlir::arith::NegFOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v11, 1);
  v9 = mlir::arith::FastMathFlagsAttr::get(*a1, a5);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties>((_QWORD *)a2) = v9;
  v10 = *(unsigned int *)(a2 + 72);
  if (v10 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v10 + 1, 8);
    LODWORD(v10) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v10) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::arith::NegFOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t NextResultAtOffset;
  uint64_t *v7;

  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v7 = v2;
  if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v3, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v7)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v4 = (uint64_t)(*this - 2);
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

BOOL mlir::arith::NegFOp::parse(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  memset(v13, 0, 24);
  v12 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v13, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
    goto LABEL_6;
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v12, 0))return 0;
  if (v12)
  {
    v4 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties>((_QWORD *)a2);
    *v4 = v12;
  }
LABEL_6:
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v5 = *(_QWORD *)(a2 + 8);
  v10[0] = a1;
  v10[1] = &v11;
  v10[2] = a2;
  v6 = mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v5 + 96));
  if (v6)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::NegFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v10))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v10[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 504))(a1, v10))
    return 0;
  v7 = v10[0];
  v8 = *(unsigned int *)(a2 + 72);
  if (v8 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v8) = v7;
  ++*(_DWORD *)(a2 + 72);
  return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v13, v7, a2 + 16) != 0;
}

void mlir::arith::NegFOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  uint64_t v6;
  mlir::MLIRContext *Context;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t v15;
  mlir::Operation *v16;
  mlir::ArrayAttr *p_AttrDictionary;
  unsigned int v18;
  _QWORD *v19;
  uint64_t Value;
  uint64_t v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t NextResultAtOffset;
  unint64_t AttrDictionary;
  void *v31;
  uint64_t v32;
  _QWORD v33[5];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v6)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
    if (v6 != mlir::arith::FastMathFlagsAttr::get(Context, 0))
    {
      v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
      v9 = (_BYTE *)*((_QWORD *)v8 + 4);
      if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
      {
        llvm::raw_ostream::write(v8, 32);
      }
      else
      {
        *((_QWORD *)v8 + 4) = v9 + 1;
        *v9 = 32;
      }
      v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
      v11 = (_QWORD *)*((_QWORD *)v10 + 4);
      if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 7uLL)
      {
        *v11 = 0x6874616D74736166;
        *((_QWORD *)v10 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v10, "fastmath", 8uLL);
      }
      v31 = (void *)*((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
      if (!(*(unsigned __int8 (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 104))(a2))
      {
        v12 = (_QWORD *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
        v13 = (*(uint64_t (**)(_QWORD *))(*v12 + 80))(v12) + v12[4] - v12[2];
        mlir::arith::FastMathFlagsAttr::print((mlir::arith::FastMathFlagsAttr *)&v31, a2);
        if (v13 == (*(uint64_t (**)(_QWORD *))(*v12 + 80))(v12) + v12[4] - v12[2])
          (*(void (**)(mlir::OpAsmPrinter *, void *))(*(_QWORD *)a2 + 40))(a2, v31);
      }
    }
  }
  v31 = v33;
  v33[0] = "fastmath";
  v33[1] = 8;
  v32 = 0x200000001;
  v14 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
  v15 = *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v15 && v15 == mlir::arith::FastMathFlagsAttr::get(v14, 0))
  {
    v18 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      v18 = v32;
    }
    v19 = (char *)v31 + 16 * v18;
    *v19 = "fastmath";
    v19[1] = 8;
    LODWORD(v32) = v32 + 1;
    v16 = *this;
    if (!*((_BYTE *)*this + 47))
      goto LABEL_18;
  }
  else
  {
    v16 = *this;
    if (!*((_BYTE *)*this + 47))
    {
LABEL_18:
      p_AttrDictionary = (mlir::Operation *)((char *)v16 + 56);
      goto LABEL_23;
    }
  }
  AttrDictionary = mlir::Operation::getAttrDictionary(v16);
  p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
LABEL_23:
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v21, v31, v32);
  v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v23 = (_BYTE *)*((_QWORD *)v22 + 4);
  if ((unint64_t)v23 >= *((_QWORD *)v22 + 3))
  {
    llvm::raw_ostream::write(v22, 32);
  }
  else
  {
    *((_QWORD *)v22 + 4) = v23 + 1;
    *v23 = 32;
  }
  v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v25 = (_BYTE *)*((_QWORD *)v24 + 4);
  if (*((_BYTE **)v24 + 3) == v25)
  {
    llvm::raw_ostream::write(v24, ":", 1uLL);
  }
  else
  {
    *v25 = 58;
    ++*((_QWORD *)v24 + 4);
  }
  v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v27 = (_BYTE *)*((_QWORD *)v26 + 4);
  if ((unint64_t)v27 >= *((_QWORD *)v26 + 3))
  {
    llvm::raw_ostream::write(v26, 32);
  }
  else
  {
    *((_QWORD *)v26 + 4) = v27 + 1;
    *v27 = 32;
  }
  if (*((_DWORD *)*this + 9))
    v28 = (uint64_t)*this - 16;
  else
    v28 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v28, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v31 != v33)
    free(v31);
}

uint64_t mlir::arith::detail::OrIOpGenericAdaptorBase::OrIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.ori", 9, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::OrIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t __src;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    && (__src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::RemFOpGenericAdaptorBase::RemFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.remf", 10, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::RemFOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451A000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451A000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::RemFOpGenericAdaptorBase::Properties]";
        v15 = 107;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451A000;
      }
    }
    a1[33] = v5[298];
    return a1[32];
  }
  return result;
}

BOOL mlir::arith::RemFOp::parse(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD __src[3];
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  v10 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v13, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v12, 1))
    return 0;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0;
    if (v10)
    {
      v4 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties>(a2);
      *v4 = v10;
    }
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
  {
    v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::RemFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
      {
        v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::RemSIOpGenericAdaptorBase::RemSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.remsi", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::RemSIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t __src;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    && (__src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::RemUIOpGenericAdaptorBase::RemUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.remui", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::RemUIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t __src;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    && (__src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::SIToFPOpGenericAdaptorBase::SIToFPOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.sitofp", 12, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::SIToFPOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;

  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps7(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 0))return 0;
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

BOOL mlir::arith::SIToFPOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8[2];
  uint64_t v9;
  _QWORD v10[4];
  _QWORD __src[4];
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 504))(a1, __src))
    return 0;
  v9 = __src[0];
  v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))return 0;
  v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    return 0;
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::ShLIOpGenericAdaptorBase::ShLIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.shli", 10, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::ShLIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t __src;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    && (__src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::ShRSIOpGenericAdaptorBase::ShRSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.shrsi", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::ShRSIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t __src;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    && (__src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::ShRUIOpGenericAdaptorBase::ShRUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.shrui", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::ShRUIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t __src;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    && (__src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::SubFOpGenericAdaptorBase::SubFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.subf", 10, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::SubFOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451A000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451A000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::SubFOpGenericAdaptorBase::Properties]";
        v15 = 107;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451A000;
      }
    }
    a1[33] = v5[300];
    return a1[32];
  }
  return result;
}

BOOL mlir::arith::SubFOp::parse(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD __src[3];
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  v10 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v13, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v12, 1))
    return 0;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0;
    if (v10)
    {
      v4 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties>(a2);
      *v4 = v10;
    }
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
  {
    v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::SubFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
      {
        v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::SubIOpGenericAdaptorBase::SubIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.subi", 10, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::SubIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t __src;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    && (__src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::TruncFOpGenericAdaptorBase::TruncFOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.truncf", 12, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::TruncFOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8[2];
  uint64_t v9;
  _QWORD v10[4];
  _QWORD __src[4];
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 504))(a1, __src))
    return 0;
  v9 = __src[0];
  v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))return 0;
  v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    return 0;
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::TruncIOpGenericAdaptorBase::TruncIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.trunci", 12, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::TruncIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8[2];
  uint64_t v9;
  _QWORD v10[4];
  _QWORD __src[4];
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 504))(a1, __src))
    return 0;
  v9 = __src[0];
  v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))return 0;
  v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    return 0;
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::UIToFPOpGenericAdaptorBase::UIToFPOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.uitofp", 12, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::UIToFPOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8[2];
  uint64_t v9;
  _QWORD v10[4];
  _QWORD __src[4];
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 504))(a1, __src))
    return 0;
  v9 = __src[0];
  v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))return 0;
  v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    return 0;
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::XOrIOpGenericAdaptorBase::XOrIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.xori", 10, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::XOrIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t __src;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    && (__src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::SelectOpGenericAdaptorBase::SelectOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "arith.select", 12, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::arith::SelectOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::MLIRContext *Context;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  void *__src;
  uint64_t v19;
  _BYTE v20[16];
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v14 = a4;
  v15 = a3;
  v13 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v15, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v14, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v13, 1);
  __src = v20;
  v19 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v17, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v16, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  v21 = v17;
  if ((_DWORD)v19 != 1)
  {
    if (!(_DWORD)v19)
    {
      if (HIDWORD(v19))
      {
        v7 = 0;
LABEL_6:
        bzero((char *)__src + 8 * v7, 8 - 8 * v7);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v20, 1uLL, 8);
      v7 = v19;
      if ((_DWORD)v19 != 1)
        goto LABEL_6;
    }
LABEL_7:
    LODWORD(v19) = 1;
  }
  v8 = mlir::ValueRange::dereference_iterator(&v21, 2);
  *(_QWORD *)__src = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
  v9 = __src;
  v10 = v19;
  v11 = *(unsigned int *)(a2 + 72);
  v12 = v11 + v19;
  if (v12 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v12, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v10)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v11), v9, 8 * v10);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v11 + v10;
  if (__src != v20)
    free(__src);
}

uint64_t mlir::arith::SelectOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v11;
  unsigned int v12;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v14[0] = a4;
  v14[1] = a5;
  v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        v12 = 0;
LABEL_6:
        bzero((void *)(*(_QWORD *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1)
        goto LABEL_6;
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  **(_QWORD **)a11 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v14, 2) + 8) & 0xFFFFFFFFFFFFFFF8;
  return 1;
}

uint64_t mlir::arith::SelectOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t NextResultAtOffset;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  const void *Shape;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  const void **v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  const void *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v48[2];
  _QWORD v49[2];
  unint64_t v50;
  const void **v51[4];
  __int16 v52;
  _QWORD v53[3];
  void *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  void *__p;
  _QWORD *v59;
  char v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps2(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 0))return 0;
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  v3 = *this;
  v4 = (*this)[9];
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v5 == (*(_QWORD *)(*(_QWORD *)(v4 + 88) + 8) & 0xFFFFFFFFFFFFFFF8)
    && ((v6 = *((_DWORD *)v3 + 9), v7 = v3 - 2, v6) ? (v8 = (uint64_t)v7) : (v8 = 0),
        v5 == (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0) + 8) & 0xFFFFFFFFFFFFFFF8)
     && (*((_DWORD *)*this + 9) ? (v9 = (uint64_t)(*this - 2)) : (v9 = 0),
         NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v9, 0),
         v11 = (*this)[9],
         (*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)(v11 + 56) + 8) & 0xFFFFFFFFFFFFFFF8))))
  {
    v50 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (mlir::Type::isSignlessInteger((mlir::Type *)&v50, 1))
      return 1;
    v21 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    v22 = v21 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8) : 0;
    v53[0] = v21;
    v53[1] = v22;
    Shape = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v53);
    v25 = v24;
    v26 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
    v27 = (const void **)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v26, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    v28 = v27 ? (const void **)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v27 + 8) : 0;
    v51[0] = v27;
    v51[1] = v28;
    v29 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v51);
    if (v25 == v30 && !memcmp(Shape, v29, 8 * v25))
    {
      v31 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
      v32 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v31, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      v33 = v32 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v32 + 8) : 0;
      v49[0] = v32;
      v49[1] = v33;
      v34 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v49);
      v36 = v35;
      v37 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
      v38 = v37 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v37 + 8) : 0;
      v48[0] = v37;
      v48[1] = v38;
      v39 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v48);
      if (v36 == v40 && !memcmp(v34, v39, 8 * v36))
        return 1;
    }
    v51[0] = (const void **)"failed to verify that condition is scalar or has matching shape";
    v52 = 259;
    mlir::OpState::emitOpError(this, v51, (uint64_t)v53);
    v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    if (v60)
    {
      v41 = __p;
      if (__p)
      {
        v42 = v59;
        v43 = __p;
        if (v59 != __p)
        {
          do
            v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
          while (v42 != v41);
          v43 = __p;
        }
        v59 = v41;
        operator delete(v43);
      }
      v16 = v56;
      if (!v56)
        goto LABEL_69;
      v44 = v57;
      v18 = v56;
      if (v57 == v56)
        goto LABEL_68;
      do
      {
        v46 = *--v44;
        v45 = v46;
        *v44 = 0;
        if (v46)
          MEMORY[0x20BD002D4](v45, 0x1000C8077774924);
      }
      while (v44 != v16);
      goto LABEL_67;
    }
  }
  else
  {
    v51[0] = (const void **)"failed to verify that all of {true_value, false_value, result} have same type";
    v52 = 259;
    mlir::OpState::emitOpError(this, v51, (uint64_t)v53);
    v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    if (v60)
    {
      v13 = __p;
      if (__p)
      {
        v14 = v59;
        v15 = __p;
        if (v59 != __p)
        {
          do
            v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          v15 = __p;
        }
        v59 = v13;
        operator delete(v15);
      }
      v16 = v56;
      if (!v56)
        goto LABEL_69;
      v17 = v57;
      v18 = v56;
      if (v57 == v56)
      {
LABEL_68:
        v57 = v16;
        operator delete(v18);
LABEL_69:
        if (v54 != &v55)
          free(v54);
        return v12;
      }
      do
      {
        v20 = *--v17;
        v19 = v20;
        *v17 = 0;
        if (v20)
          MEMORY[0x20BD002D4](v19, 0x1000C8077774924);
      }
      while (v17 != v16);
LABEL_67:
      v18 = v56;
      goto LABEL_68;
    }
  }
  return v12;
}

uint64_t mlir::arith::CmpFPredicateAttr::classof(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Value;

  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    return 0;
  v19 = a1;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v19);
  result = mlir::Type::isSignlessInteger((mlir::Type *)&Value, 64);
  if ((_DWORD)result)
  {
    v18 = a1;
    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v18))
    {
      v17 = a1;
      result = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v17);
      if (result == 1)
        return result;
      v16 = a1;
      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v16) != 2)
      {
        v15 = a1;
        if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v15) != 3)
        {
          v14 = a1;
          if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v14) != 4)
          {
            v13 = a1;
            if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v13) != 5)
            {
              v12 = a1;
              if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v12) != 6)
              {
                v11 = a1;
                if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v11) != 7)
                {
                  v10 = a1;
                  if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v10) != 8)
                  {
                    v9 = a1;
                    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v9) != 9)
                    {
                      v8 = a1;
                      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v8) != 10)
                      {
                        v7 = a1;
                        if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v7) != 11)
                        {
                          v6 = a1;
                          if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v6) != 12)
                          {
                            v5 = a1;
                            if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v5) != 13)
                            {
                              v4 = a1;
                              if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v4) != 14)
                              {
                                v3 = a1;
                                return mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v3) == 15;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return 1;
  }
  return result;
}

uint64_t mlir::arith::CmpIPredicateAttr::classof(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Value;

  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    return 0;
  v13 = a1;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v13);
  result = mlir::Type::isSignlessInteger((mlir::Type *)&Value, 64);
  if ((_DWORD)result)
  {
    v12 = a1;
    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v12))
    {
      v11 = a1;
      result = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v11);
      if (result == 1)
        return result;
      v10 = a1;
      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v10) != 2)
      {
        v9 = a1;
        if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v9) != 3)
        {
          v8 = a1;
          if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v8) != 4)
          {
            v7 = a1;
            if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v7) != 5)
            {
              v6 = a1;
              if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v6) != 6)
              {
                v5 = a1;
                if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v5) != 7)
                {
                  v4 = a1;
                  if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v4) != 8)
                  {
                    v3 = a1;
                    return mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v3) == 9;
                  }
                }
              }
            }
          }
        }
      }
    }
    return 1;
  }
  return result;
}

char *mlir::arith::stringifyAtomicRMWKind(unint64_t a1)
{
  if (a1 > 0xE)
    return &byte_207AF6795;
  else
    return off_24C060C20[a1];
}

uint64_t mlir::arith::symbolizeAtomicRMWKind(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  switch(a2)
  {
    case 3:
      if (*(_WORD *)a1 != 29295 || *(_BYTE *)(a1 + 2) != 105)
        goto LABEL_33;
      result = 11;
      break;
    case 4:
      switch(*(_DWORD *)a1)
      {
        case 0x66646461:
          result = 0;
          break;
        case 0x69646461:
          result = 1;
          break;
        case 0x7378616D:
          result = 4;
          break;
        case 0x7578616D:
          result = 5;
          break;
        case 0x736E696D:
          result = 7;
          break;
        case 0x756E696D:
          result = 8;
          break;
        case 0x666C756D:
          result = 9;
          break;
        case 0x696C756D:
          result = 10;
          break;
        case 0x69646E61:
          result = 12;
          break;
        default:
          goto LABEL_33;
      }
      break;
    case 6:
      if (*(_DWORD *)a1 != 1769173857 || *(_WORD *)(a1 + 4) != 28263)
        goto LABEL_33;
      result = 2;
      break;
    case 7:
      if (*(_DWORD *)a1 == 1853383021 && *(_DWORD *)(a1 + 3) == 1718449518)
      {
        result = 13;
      }
      else if (*(_DWORD *)a1 ^ 0x6E6E696D | *(_DWORD *)(a1 + 3) ^ 0x666D756E)
      {
        result = 0;
      }
      else
      {
        result = 14;
      }
      break;
    case 8:
      if (*(_QWORD *)a1 == 0x666D756D6978616DLL)
      {
        result = 3;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x666D756D696E696DLL)
          goto LABEL_33;
        result = 6;
      }
      break;
    default:
LABEL_33:
      result = 0;
      break;
  }
  return result;
}

unint64_t mlir::arith::symbolizeAtomicRMWKind(unint64_t this)
{
  if (this >= 0xF)
    return 0;
  return this;
}

uint64_t mlir::arith::AtomicRMWKindAttr::classof(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Value;

  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    return 0;
  v18 = a1;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v18);
  result = mlir::Type::isSignlessInteger((mlir::Type *)&Value, 64);
  if ((_DWORD)result)
  {
    v17 = a1;
    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v17))
    {
      v16 = a1;
      result = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v16);
      if (result == 1)
        return result;
      v15 = a1;
      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v15) != 2)
      {
        v14 = a1;
        if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v14) != 3)
        {
          v13 = a1;
          if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v13) != 4)
          {
            v12 = a1;
            if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v12) != 5)
            {
              v11 = a1;
              if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v11) != 6)
              {
                v10 = a1;
                if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v10) != 7)
                {
                  v9 = a1;
                  if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v9) != 8)
                  {
                    v8 = a1;
                    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v8) != 9)
                    {
                      v7 = a1;
                      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v7) != 10)
                      {
                        v6 = a1;
                        if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v6) != 11)
                        {
                          v5 = a1;
                          if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v5) != 12)
                          {
                            v4 = a1;
                            if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v4) != 13)
                            {
                              v3 = a1;
                              return mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v3) == 14;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return 1;
  }
  return result;
}

void mlir::arith::stringifyFastMathFlags(int a1@<W0>, uint64_t a2@<X8>)
{
  char v3;
  char *v4;
  char *v5;
  unsigned int v6;
  std::string::size_type v7;
  unint64_t v8;
  char *v9;
  const char **v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  int64x2_t v20;
  const double *v21;
  const double *v22;
  unsigned __int128 v23;
  unsigned __int128 v24;
  char *v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  void *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    *(_BYTE *)(a2 + 23) = 4;
    strcpy((char *)a2, "none");
    return;
  }
  v3 = a1;
  v28 = &v30;
  v29 = 0x200000000;
  if ((~a1 & 0x7F) == 0)
  {
    v30 = "fast";
    v31 = 4;
    LODWORD(v29) = 1;
    v4 = (char *)v28;
    v5 = (char *)v28 + 16;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v6 = 1;
    v7 = 0;
    v8 = v5 - v4 - 16;
    v9 = v4;
    if (v8 >= 0x40)
      goto LABEL_34;
    goto LABEL_39;
  }
  if ((a1 & 1) != 0)
  {
    v30 = "reassoc";
    v31 = 7;
    v6 = 1;
    LODWORD(v29) = 1;
    if ((a1 & 2) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  v6 = 0;
  if ((a1 & 2) != 0)
  {
LABEL_10:
    v10 = &(&v30)[2 * v6];
    *v10 = "nnan";
    v10[1] = (const char *)4;
    v6 = v29 + 1;
    LODWORD(v29) = v29 + 1;
  }
LABEL_11:
  if ((a1 & 4) != 0)
  {
    if (v6 >= HIDWORD(v29))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, &v30, v6 + 1, 16);
      v6 = v29;
    }
    v11 = (char *)v28 + 16 * v6;
    *v11 = "ninf";
    v11[1] = 4;
    v6 = v29 + 1;
    LODWORD(v29) = v29 + 1;
    if ((v3 & 8) == 0)
    {
LABEL_13:
      if ((v3 & 0x10) == 0)
        goto LABEL_14;
      goto LABEL_24;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_13;
  }
  if (v6 >= HIDWORD(v29))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, &v30, v6 + 1, 16);
    v6 = v29;
  }
  v12 = (char *)v28 + 16 * v6;
  *v12 = "nsz";
  v12[1] = 3;
  v6 = v29 + 1;
  LODWORD(v29) = v29 + 1;
  if ((v3 & 0x10) == 0)
  {
LABEL_14:
    if ((v3 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_24:
  if (v6 >= HIDWORD(v29))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, &v30, v6 + 1, 16);
    v6 = v29;
  }
  v13 = (char *)v28 + 16 * v6;
  *v13 = "arcp";
  v13[1] = 4;
  v6 = v29 + 1;
  LODWORD(v29) = v29 + 1;
  if ((v3 & 0x20) == 0)
  {
LABEL_15:
    if ((v3 & 0x40) == 0)
      goto LABEL_16;
LABEL_30:
    if (v6 >= HIDWORD(v29))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, &v30, v6 + 1, 16);
      v6 = v29;
    }
    v15 = (char *)v28 + 16 * v6;
    *v15 = "afn";
    v15[1] = 3;
    LODWORD(v29) = v29 + 1;
    v6 = v29;
    v4 = (char *)v28;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    if (!v6)
      goto LABEL_43;
LABEL_33:
    v5 = &v4[16 * v6];
    v7 = v6 - 1;
    v8 = 16 * v6 - 16;
    v9 = v4;
    if (v8 >= 0x40)
    {
LABEL_34:
      v16 = (v8 >> 4) + 1;
      v17 = v16 & 3;
      if ((v16 & 3) == 0)
        v17 = 4;
      v18 = v16 - v17;
      v9 = &v4[16 * v18];
      v19 = 0uLL;
      v20 = (int64x2_t)v7;
      v21 = (const double *)(v4 + 40);
      do
      {
        v22 = v21 - 4;
        v23 = (unsigned __int128)vld2q_f64(v22);
        v24 = (unsigned __int128)vld2q_f64(v21);
        v20 = vaddq_s64((int64x2_t)v23, v20);
        v19 = vaddq_s64((int64x2_t)v24, v19);
        v21 += 8;
        v18 -= 4;
      }
      while (v18);
      v7 = vaddvq_s64(vaddq_s64(v19, v20));
      goto LABEL_39;
    }
    do
    {
LABEL_39:
      v7 += *((_QWORD *)v9 + 1);
      v9 += 16;
    }
    while (v9 != v5);
    std::string::reserve((std::string *)a2, v7);
    std::string::append((std::string *)a2, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
    if (v6 != 1)
    {
      v25 = v4 + 16;
      do
      {
        std::string::append((std::string *)a2, ",", 1uLL);
        v26 = *(const std::string::value_type **)v25;
        v27 = *((_QWORD *)v25 + 1);
        v25 += 16;
        std::string::append((std::string *)a2, v26, v27);
      }
      while (v25 != v5);
    }
    goto LABEL_43;
  }
LABEL_27:
  if (v6 >= HIDWORD(v29))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, &v30, v6 + 1, 16);
    v6 = v29;
  }
  v14 = (char *)v28 + 16 * v6;
  *v14 = "contract";
  v14[1] = 8;
  v6 = v29 + 1;
  LODWORD(v29) = v29 + 1;
  if ((v3 & 0x40) != 0)
    goto LABEL_30;
LABEL_16:
  v4 = (char *)v28;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  if (v6)
    goto LABEL_33;
LABEL_43:
  if (v28 != &v30)
    free(v28);
}

uint64_t mlir::arith::symbolizeFastMathFlags(_DWORD *a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  __int128 *v4;
  char v5;
  unint64_t first_not_of;
  unint64_t v7;
  unint64_t v8;
  uint64_t last_not_of;
  unint64_t v10;
  unint64_t v11;
  uint64_t v15;
  void *v16;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[5];

  v24[4] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v19 = a1;
  *((_QWORD *)&v19 + 1) = a2;
  if (a2 == 4 && *a1 == 1701736302)
  {
    v2 = 0;
    v15 = 0x100000000;
    return v15 & 0x100000000 | v2;
  }
  v22 = v24;
  v23 = 0x200000000;
  llvm::StringRef::split(&v19, (uint64_t)&v22, ",", 1uLL, -1, 1);
  if (!(_DWORD)v23)
  {
    v2 = 0;
LABEL_43:
    v15 = 0x100000000;
    v16 = v22;
    if (v22 != v24)
      goto LABEL_44;
    return v15 & 0x100000000 | v2;
  }
  v2 = 0;
  v3 = 16 * v23;
  v4 = (__int128 *)v22;
  while (2)
  {
    v18 = *v4;
    first_not_of = llvm::StringRef::find_first_not_of(&v18, " \t\n\v\f\r", 6, 0);
    if (first_not_of >= *((_QWORD *)&v18 + 1))
      v7 = *((_QWORD *)&v18 + 1);
    else
      v7 = first_not_of;
    v8 = *((_QWORD *)&v18 + 1) - v7;
    v20 = v18 + v7;
    v21 = *((_QWORD *)&v18 + 1) - v7;
    last_not_of = llvm::StringRef::find_last_not_of(&v20, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
    if (last_not_of + 1 < v21)
      v10 = last_not_of + 1;
    else
      v10 = v21;
    v11 = v21 - v8 + v10;
    if (v21 < v11)
      v11 = v21;
    switch(v11)
    {
      case 3uLL:
        if (*(_WORD *)v20 == 29550 && *(_BYTE *)(v20 + 2) == 122)
        {
          v5 = 8;
          goto LABEL_6;
        }
        if (*(_WORD *)v20 == 26209 && *(_BYTE *)(v20 + 2) == 110)
        {
          v5 = 64;
          goto LABEL_6;
        }
        goto LABEL_46;
      case 4uLL:
        switch(*(_DWORD *)v20)
        {
          case 0x6E616E6E:
            v5 = 2;
LABEL_6:
            v2 |= v5;
            ++v4;
            v3 -= 16;
            if (!v3)
              goto LABEL_43;
            continue;
          case 0x666E696E:
            v5 = 4;
            goto LABEL_6;
          case 0x70637261:
            v5 = 16;
            goto LABEL_6;
          case 0x74736166:
            v5 = 127;
            goto LABEL_6;
        }
LABEL_46:
        v15 = 0;
        v2 = 0;
        v16 = v22;
        if (v22 == v24)
          return v15 & 0x100000000 | v2;
LABEL_44:
        free(v16);
        return v15 & 0x100000000 | v2;
      case 7uLL:
        if (*(_DWORD *)v20 != 1935762802 || *(_DWORD *)(v20 + 3) != 1668248435)
          goto LABEL_46;
        v5 = 1;
        goto LABEL_6;
      case 8uLL:
        if (*(_QWORD *)v20 != 0x74636172746E6F63)
          goto LABEL_46;
        v5 = 32;
        goto LABEL_6;
      default:
        goto LABEL_46;
    }
  }
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      v23 = 65;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[268];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

BOOL mlir::m_Zero(void)::{lambda(llvm::APInt const&)#1}::__invoke(llvm::APInt *this)
{
  llvm::APInt *v1;
  unsigned int v2;

  v1 = this;
  v2 = *((_DWORD *)this + 2);
  if (v2 < 0x41)
    return *(_QWORD *)v1 == 0;
  if (v2 - llvm::APInt::countLeadingZerosSlowCase(this) <= 0x40)
  {
    v1 = *(llvm::APInt **)v1;
    return *(_QWORD *)v1 == 0;
  }
  return 0;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &unk_254519000;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = (_QWORD *)&unk_254519000;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType]";
      v23 = 66;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::ShapedType,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = (_QWORD *)&unk_254519000;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[369];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

BOOL mlir::m_One(void)::{lambda(llvm::APInt const&)#1}::__invoke(llvm::APInt *this)
{
  llvm::APInt *v1;
  unsigned int v2;

  v1 = this;
  v2 = *((_DWORD *)this + 2);
  if (v2 < 0x41)
    return *(_QWORD *)v1 == 1;
  if (v2 - llvm::APInt::countLeadingZerosSlowCase(this) <= 0x40)
  {
    v1 = *(llvm::APInt **)v1;
    return *(_QWORD *)v1 == 1;
  }
  return 0;
}

BOOL mlir::m_NonZero(void)::{lambda(llvm::APInt const&)#1}::__invoke(llvm::APInt *this)
{
  llvm::APInt *v1;
  unsigned int v2;

  v1 = this;
  v2 = *((_DWORD *)this + 2);
  if (v2 < 0x41)
    return *(_QWORD *)v1 != 0;
  if (v2 - llvm::APInt::countLeadingZerosSlowCase(this) <= 0x40)
  {
    v1 = *(llvm::APInt **)v1;
    return *(_QWORD *)v1 != 0;
  }
  return 1;
}

uint64_t mlir::m_NegZeroFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke(uint64_t a1)
{
  void *v2;
  unsigned int v3;

  v2 = *(void **)(a1 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v2)
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 28);
    if ((v3 & 7) == 3)
      return (v3 >> 3) & 1;
  }
  else
  {
    v3 = *(unsigned __int8 *)(a1 + 28);
    if ((v3 & 7) == 3)
      return (v3 >> 3) & 1;
  }
  return 0;
}

BOOL mlir::m_PosZeroFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke(uint64_t a1)
{
  void *v2;
  char v3;

  v2 = *(void **)(a1 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v2)
  {
    v3 = *(_BYTE *)(*(_QWORD *)(a1 + 16) + 28);
    if ((v3 & 7) == 3)
      return (v3 & 8) == 0;
  }
  else
  {
    v3 = *(_BYTE *)(a1 + 28);
    if ((v3 & 7) == 3)
      return (v3 & 8) == 0;
  }
  return 0;
}

BOOL mlir::m_NegInfFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke(uint64_t a1)
{
  void *v2;
  char v3;

  v2 = *(void **)(a1 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v2)
  {
    v3 = *(_BYTE *)(*(_QWORD *)(a1 + 16) + 28);
    if ((v3 & 8) == 0)
      return 0;
  }
  else
  {
    v3 = *(_BYTE *)(a1 + 28);
    if ((v3 & 8) == 0)
      return 0;
  }
  return (v3 & 7) == 0;
}

BOOL mlir::m_PosInfFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke(uint64_t a1)
{
  void *v2;
  char v3;

  v2 = *(void **)(a1 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v2)
  {
    v3 = *(_BYTE *)(*(_QWORD *)(a1 + 16) + 28);
    if ((v3 & 8) == 0)
      return (v3 & 7) == 0;
  }
  else
  {
    v3 = *(_BYTE *)(a1 + 28);
    if ((v3 & 8) == 0)
      return (v3 & 7) == 0;
  }
  return 0;
}

BOOL mlir::m_OneFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke(llvm::APFloatBase *a1)
{
  const llvm::detail::DoubleAPFloat *v1;
  uint64_t v2;
  void *v3;
  llvm::detail::DoubleAPFloat *v4;
  const llvm::detail::DoubleAPFloat *v5;
  int v6;
  int v7;
  int v8;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x24BDAC8D0];
  v1 = (llvm::APFloatBase *)((char *)a1 + 8);
  v2 = *((_QWORD *)a1 + 1);
  v3 = llvm::APFloatBase::PPCDoubleDouble(a1);
  if (v3 != (void *)v2)
  {
    v4 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, v2, (llvm::APInt *)1);
    v5 = v1;
    if (v3 != (void *)v10[0])
      goto LABEL_3;
LABEL_6:
    llvm::detail::DoubleAPFloat::compare(v4, v5);
    v7 = v8;
    if (v3 != (void *)v10[0])
      goto LABEL_4;
LABEL_7:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v10);
    return v7 == 1;
  }
  v4 = (llvm::detail::DoubleAPFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v2, 1);
  v5 = v1;
  if (v3 == (void *)v10[0])
    goto LABEL_6;
LABEL_3:
  llvm::detail::IEEEFloat::compare(v4, v5);
  v7 = v6;
  if (v3 == (void *)v10[0])
    goto LABEL_7;
LABEL_4:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v10);
  return v7 == 1;
}

BOOL llvm::APFloat::operator==(_QWORD *a1, uint64_t a2)
{
  llvm::detail::DoubleAPFloat *v3;
  void *v4;
  void *v5;
  const llvm::detail::DoubleAPFloat *v6;
  int v7;

  v3 = (llvm::detail::DoubleAPFloat *)(a1 + 1);
  v4 = (void *)a1[1];
  v5 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  v6 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v5 == v4)
    llvm::detail::DoubleAPFloat::compare(v3, v6);
  else
    llvm::detail::IEEEFloat::compare(v3, v6);
  return v7 == 1;
}

__n128 mlir::DenseElementsAttr::tryGetValues<mlir::BoolAttr,void>@<Q0>(mlir::ArrayAttr *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t Value;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t NumElements;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;
  __n128 v14;
  _QWORD v15[2];

  Value = mlir::ArrayAttr::getValue(a1);
  v6 = v5;
  mlir::ArrayAttr::getValue(a1);
  ZinMirCacheTensors::ZinMirCacheTensors(v15, *(_QWORD *)a1, 0);
  v7 = *(_QWORD *)a1;
  NumElements = mlir::DenseElementsAttr::getNumElements(a1);
  ZinMirCacheTensors::ZinMirCacheTensors(&v14, v7, NumElements);
  v9 = v15[0];
  v10 = v15[1];
  mlir::ArrayAttr::getValue(a1);
  ZinMirCacheTensors::ZinMirCacheTensors(v15, *(_QWORD *)a1, 0);
  v11 = *(_QWORD *)a1;
  v12 = mlir::DenseElementsAttr::getNumElements(a1);
  ZinMirCacheTensors::ZinMirCacheTensors(&v14, v11, v12);
  result = v14;
  a2->n128_u64[0] = v9;
  a2->n128_u64[1] = v10;
  a2[1] = result;
  a2[2].n128_u64[0] = Value;
  a2[2].n128_u64[1] = v6;
  a2[3].n128_u8[0] = 1;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

uint64_t mlir::detail::constant_int_value_binder::match(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t NumElements;
  uint64_t v10;
  void *v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  int v19;

  v2 = *a1;
  v3 = *(void **)(*(_QWORD *)a2 + 136);
  v4 = v3 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  if (v3 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    v5 = a2;
  else
    v5 = 0;
  v17[0] = v5;
  if (v4)
  {
    mlir::IntegerAttr::getValue(v17, (llvm::APInt *)&v18);
    if (*(_DWORD *)(v2 + 8) >= 0x41u && *(_QWORD *)v2)
      MEMORY[0x20BD002D4](*(_QWORD *)v2, 0x1000C8000313F17);
    *(_QWORD *)v2 = v18;
    *(_DWORD *)(v2 + 8) = v19;
    return 1;
  }
  else
  {
    if (mlir::DenseElementsAttr::classof(a2))
      v7 = a2;
    else
      v7 = 0;
    v18 = v7;
    if (v7
      && (!mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v18) ? (v7 = 0) : (v7 = a2),
          (v16 = v7) != 0))
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v16);
      ZinMirCacheTensors::ZinMirCacheTensors(&v18, v16, 0);
      v8 = v16;
      NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v16);
      ZinMirCacheTensors::ZinMirCacheTensors(v17, v8, NumElements);
      v10 = mlir::DenseElementsAttr::AttributeElementIterator::operator*(&v18);
      v11 = *(void **)(*(_QWORD *)v10 + 136);
      v12 = v11 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
      v13 = v11 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
      if (v11 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        v14 = v10;
      else
        v14 = 0;
      v17[0] = v14;
      if (v12)
      {
        mlir::IntegerAttr::getValue(v17, (llvm::APInt *)&v18);
        if (*(_DWORD *)(v2 + 8) >= 0x41u)
        {
          if (*(_QWORD *)v2)
            MEMORY[0x20BD002D4](*(_QWORD *)v2, 0x1000C8000313F17);
        }
        *(_QWORD *)v2 = v18;
        *(_DWORD *)(v2 + 8) = v19;
      }
      return v13;
    }
    else
    {
      return v7 & a2;
    }
  }
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &unk_254519000;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = (_QWORD *)&unk_254519000;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ElementsAttr]";
      v23 = 68;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::ElementsAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = (_QWORD *)&unk_254519000;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[403];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

void mlir::DenseElementsAttr::getSplatValue<llvm::APInt>(mlir::DenseElementsAttr *a1@<X0>, llvm::APInt *a2@<X8>)
{
  _OWORD v3[2];
  _OWORD v4[5];

  mlir::DenseElementsAttr::getValues<llvm::APInt>(a1, (uint64_t)v4);
  v3[0] = v4[0];
  v3[1] = v4[1];
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)v3, a2);
}

uint64_t mlir::ElementsAttr::try_value_begin<llvm::APInt>@<X0>(mlir::BranchOpInterface *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  uint64_t result;
  char v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  mlir::BranchOpInterface *v18;
  const char *v19;
  unint64_t v20;
  char v21;

  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v18 = a1;
    v4 = (_QWORD *)&unk_25451A000;
    v10 = v9;
    a1 = v18;
    if (v10)
    {
      v19 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APInt]";
      v20 = 61;
      v11 = llvm::StringRef::find((uint64_t *)&v19, "DesiredTypeName = ", 0x12uLL, 0);
      if (v20 >= v11)
        v12 = v11;
      else
        v12 = v20;
      v13 = &v19[v12];
      v14 = v20 - v12;
      if (v20 - v12 >= 0x12)
        v15 = 18;
      else
        v15 = v20 - v12;
      v16 = v14 - v15;
      if (v16 >= v16 - 1)
        v17 = v16 - 1;
      else
        v17 = v16;
      mlir::detail::TypeIDResolver<llvm::APInt,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
      v4 = (_QWORD *)&unk_25451A000;
      a1 = v18;
    }
  }
  result = mlir::BranchOpInterface::getSuccessorOperands(a1, v4[274]);
  if (v21)
  {
    v6 = BYTE1(v19);
    if ((_BYTE)v19)
    {
      v7 = v20;
      *(_BYTE *)a2 = (_BYTE)v19;
      *(_BYTE *)(a2 + 1) = v6;
      *(_QWORD *)(a2 + 8) = v7;
    }
    else
    {
      v8 = v20;
      v20 = 0;
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 1) = v6;
      *(_QWORD *)(a2 + 8) = v8;
    }
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  return result;
}

void llvm::SmallVectorImpl<llvm::APInt>::reserve(uint64_t a1, unint64_t a2)
{
  _DWORD *v3;
  char *v4;
  char *v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;

  if (*(unsigned int *)(a1 + 12) < a2)
  {
    v15 = 0;
    v3 = (_DWORD *)(a1 + 16);
    v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 16, &v15);
    v5 = v4;
    v6 = *(_DWORD **)a1;
    v7 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v7)
    {
      v8 = v4 + 8;
      v9 = 16 * v7;
      v10 = v6 + 2;
      do
      {
        *v8 = *v10;
        *((_QWORD *)v8 - 1) = *((_QWORD *)v10 - 1);
        *v10 = 0;
        v10 += 4;
        v8 += 4;
        v9 -= 16;
      }
      while (v9);
      v6 = *(_DWORD **)a1;
      v11 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v11)
      {
        v12 = 4 * v11;
        do
        {
          if (v6[v12 - 2] >= 0x41u)
          {
            v13 = *(_QWORD *)&v6[v12 - 4];
            if (v13)
              MEMORY[0x20BD002D4](v13, 0x1000C8000313F17);
          }
          v12 -= 4;
        }
        while (v12 * 4);
        v6 = *(_DWORD **)a1;
      }
    }
    v14 = v15;
    if (v6 != v3)
      free(v6);
    *(_QWORD *)a1 = v5;
    *(_DWORD *)(a1 + 12) = v14;
  }
}

llvm::APInt *llvm::SmallVectorTemplateBase<llvm::APInt,false>::push_back(uint64_t a1, unint64_t a2)
{
  char *Address;
  llvm::APInt *result;
  unsigned int v5;

  Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress(a1, a2, 1);
  result = (llvm::APInt *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 8));
  v5 = *((_DWORD *)Address + 2);
  *((_DWORD *)result + 2) = v5;
  if (v5 > 0x40)
    result = (llvm::APInt *)llvm::APInt::initSlowCase(result, (const void **)Address);
  else
    *(_QWORD *)result = *(_QWORD *)Address;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

char **llvm::SmallVector<llvm::APInt,4u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    do
    {
      if (*(_DWORD *)&v2[v4 - 8] >= 0x41u)
      {
        v5 = *(_QWORD *)&v2[v4 - 16];
        if (v5)
          MEMORY[0x20BD002D4](v5, 0x1000C8000313F17);
      }
      v4 -= 16;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

double mlir::DenseElementsAttr::getValues<llvm::APInt>@<D0>(mlir::DenseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t NumElements;
  char v9;
  __int128 v10;
  double result;
  __int128 v12;
  __int128 v13;
  char v14;
  _BYTE v15[31];
  __int128 v16;
  __int128 v17;
  _BYTE v18[31];
  _BYTE v19[63];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v19 = mlir::DenseElementsAttr::getElementType(a1);
  if (mlir::Type::isIntOrIndex((mlir::Type *)v19))
  {
    Value = mlir::ArrayAttr::getValue(a1);
    v2 = v6;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v14, *(_QWORD *)a1, 0);
    v7 = *(_QWORD *)a1;
    NumElements = mlir::DenseElementsAttr::getNumElements(a1);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v12, v7, NumElements);
    v9 = v14;
    *(_OWORD *)v19 = *(_OWORD *)v15;
    *(_OWORD *)&v19[15] = *(_OWORD *)&v15[15];
    *(_OWORD *)&v19[31] = v12;
    *(_OWORD *)&v19[47] = v13;
    *(_OWORD *)&v18[15] = v13;
    v16 = *(_OWORD *)v19;
    v17 = *(_OWORD *)&v19[16];
    *(_OWORD *)v18 = *(_OWORD *)&v19[32];
  }
  else
  {
    v9 = 0;
  }
  *(_BYTE *)a2 = v9;
  v10 = v17;
  *(_OWORD *)(a2 + 1) = v16;
  *(_OWORD *)(a2 + 17) = v10;
  *(_OWORD *)(a2 + 33) = *(_OWORD *)v18;
  result = *(double *)&v18[15];
  *(_OWORD *)(a2 + 48) = *(_OWORD *)&v18[15];
  *(_QWORD *)(a2 + 64) = Value;
  *(_QWORD *)(a2 + 72) = v2;
  return result;
}

char *llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  _DWORD *v10;
  char *v11;
  char *v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  char *v24;
  char *v25;
  _DWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v8 = *(_QWORD *)a1 + 16 * v4;
    if (*(_QWORD *)a1 <= a2 && v8 > a2)
    {
      v22 = a2 - *(_QWORD *)a1;
      v36 = 0;
      v23 = (_DWORD *)(a1 + 16);
      v24 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 16, &v36);
      v25 = v24;
      v26 = *(_DWORD **)a1;
      v27 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v27)
      {
        v28 = v24 + 8;
        v29 = 16 * v27;
        v30 = v26 + 2;
        do
        {
          *v28 = *v30;
          *((_QWORD *)v28 - 1) = *((_QWORD *)v30 - 1);
          *v30 = 0;
          v30 += 4;
          v28 += 4;
          v29 -= 16;
        }
        while (v29);
        v26 = *(_DWORD **)a1;
        v31 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v31)
        {
          v32 = 4 * v31;
          do
          {
            if (v26[v32 - 2] >= 0x41u)
            {
              v33 = *(_QWORD *)&v26[v32 - 4];
              if (v33)
                MEMORY[0x20BD002D4](v33, 0x1000C8000313F17);
            }
            v32 -= 4;
          }
          while (v32 * 4);
          v26 = *(_DWORD **)a1;
        }
      }
      v34 = v22 >> 4;
      v35 = v36;
      if (v26 != v23)
        free(v26);
      *(_QWORD *)a1 = v25;
      *(_DWORD *)(a1 + 12) = v35;
      return &v25[16 * v34];
    }
    else
    {
      v36 = 0;
      v10 = (_DWORD *)(a1 + 16);
      v11 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 16, &v36);
      v12 = v11;
      v13 = *(_DWORD **)a1;
      v14 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v14)
      {
        v15 = v11 + 8;
        v16 = 16 * v14;
        v17 = v13 + 2;
        do
        {
          *v15 = *v17;
          *((_QWORD *)v15 - 1) = *((_QWORD *)v17 - 1);
          *v17 = 0;
          v17 += 4;
          v15 += 4;
          v16 -= 16;
        }
        while (v16);
        v13 = *(_DWORD **)a1;
        v18 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v18)
        {
          v19 = 4 * v18;
          do
          {
            if (v13[v19 - 2] >= 0x41u)
            {
              v20 = *(_QWORD *)&v13[v19 - 4];
              if (v20)
                MEMORY[0x20BD002D4](v20, 0x1000C8000313F17);
            }
            v19 -= 4;
          }
          while (v19 * 4);
          v13 = *(_DWORD **)a1;
        }
      }
      v21 = v36;
      if (v13 != v10)
        free(v13);
      *(_QWORD *)a1 = v12;
      *(_DWORD *)(a1 + 12) = v21;
    }
  }
  return (char *)v3;
}

void `anonymous namespace'::AddIAddConstant::~AddIAddConstant(_anonymous_namespace_::AddIAddConstant *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::AddIAddConstant::matchAndRewrite(_anonymous_namespace_::AddIAddConstant *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v4;
  uint64_t v5;
  mlir::Operation *v6;
  uint64_t DefiningOp;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 (*v16)(uint64_t, uint64_t);
  void *v17;
  unint64_t v19;
  _QWORD v20[2];
  unint64_t v21;
  void *v22[2];
  _QWORD *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    v4 = *((_QWORD *)a2 + 9);
    v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v20[0] = v4;
  v20[1] = v5;
  v19 = 0;
  v23 = v25;
  v25[0] = a2;
  v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v22[0] = *(void **)(*((_QWORD *)v6 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    v8 = DefiningOp;
    v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((_QWORD *)v6 + 9) + 56);
    v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      v11 = v10;
      {
        v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      v14 = 0;
      v17 = v23;
      if (v23 == v25)
        return v14;
      goto LABEL_26;
    }
    v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14))
        goto LABEL_23;
      v15 = *((_QWORD *)v6 + 3);
LABEL_21:
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v14 + 64))(v14, v15, v16, v22);
      v17 = v23;
      if (v23 == v25)
        return v14;
      goto LABEL_26;
    }
  }
  else
  {
    v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14))
        goto LABEL_23;
      v15 = *((_QWORD *)v6 + 3);
      goto LABEL_21;
    }
  }
  v17 = v23;
  if (v23 != v25)
LABEL_26:
    free(v17);
  return v14;
}

uint64_t `anonymous namespace'::static_dag_matcher_1(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t *a5)
{
  uint64_t v9;
  uint64_t DefiningOp;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;

  if (a2 && *(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id)
  {
    if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
      v9 = *(_QWORD *)(a2 + 72);
    else
      v9 = 0;
    *a4 = v9;
    a4[1] = 1;
    v17 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 56);
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v17);
    if (DefiningOp)
    {
      v11 = DefiningOp;
      {
        v12 = *(unsigned int *)(a3 + 8);
        if (v12 >= *(_DWORD *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v12 + 1, 8);
          LODWORD(v12) = *(_DWORD *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
        ++*(_DWORD *)(a3 + 8);
        return 1;
      }
      return 0;
    }
    v15 = *(_QWORD *)(a1 + 16);
    if (!v15)
      return 0;
    result = mlir::RewriterBase::Listener::classof(*(_QWORD *)(a1 + 16));
    if ((_DWORD)result)
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 16);
    if (!v14)
      return 0;
    result = mlir::RewriterBase::Listener::classof(*(_QWORD *)(a1 + 16));
    if ((_DWORD)result)
  }
  return result;
}

uint64_t `anonymous namespace'::static_dag_matcher_2(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t DefiningOp;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void **v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  v12 = (void **)(a2 - 16);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (!DefiningOp)
    goto LABEL_11;
  v7 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
    goto LABEL_11;
  v13 = v15;
  v14 = 0x100000000;
  mlir::Operation::fold(v7, 0, 0, (uint64_t)&v13);
  v8 = *(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8;
  if (v13 != v15)
    free(v13);
  if (v8)
  {
    *a3 = v8;
    v9 = *(_QWORD *)(a1 + 16);
    v13 = "operand 0 of native code call '::mlir::success(::mlir::matchPattern($_self->getResult(0), ::mlir::m_Constant(&"
          "$0)))' failed to satisfy constraint: 'arbitrary integer attribute'";
    v14 = 176;
    if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      return 1;
    v12 = &v13;
    if (v9 && mlir::RewriterBase::Listener::classof(v9))
    return 0;
  }
  else
  {
LABEL_11:
    v11 = *(_QWORD *)(a1 + 16);
    if (!v11)
      return 0;
    result = mlir::RewriterBase::Listener::classof(v11);
    if ((_DWORD)result)
  }
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::IntegerAttr &>(mlir::OpBuilder *a1, uint64_t a2, _QWORD **a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.constant", (const unsigned __int8 *)0xE, Context);
  if (!v8)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"arith.constant";
    v17[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v7);
  v9 = *a3;
  if (v9)
    v10 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v9 + 8);
  else
    v10 = 0;
  mlir::arith::ConstantOp::build((uint64_t)a1, (uint64_t)v19, (uint64_t)v9, v10);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ConstantOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::AddIOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t *v11;
  ZinIrHalH13g *v12;
  ZinIrHalH13g *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  unint64_t v20[2];
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.addi", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"arith.addi";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = mlir::ValueRange::ValueRange(v20, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::AddIAddConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t `anonymous namespace'::static_dag_matcher_0(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t DefiningOp;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void **v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  v12 = (void **)(a2 - 16);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (!DefiningOp)
    goto LABEL_11;
  v7 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
    goto LABEL_11;
  v13 = v15;
  v14 = 0x100000000;
  mlir::Operation::fold(v7, 0, 0, (uint64_t)&v13);
  v8 = *(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8;
  if (v13 != v15)
    free(v13);
  if (v8)
  {
    *a3 = v8;
    v9 = *(_QWORD *)(a1 + 16);
    v13 = "operand 0 of native code call '::mlir::success(::mlir::matchPattern($_self->getResult(0), ::mlir::m_Constant(&"
          "$0)))' failed to satisfy constraint: 'arbitrary integer attribute'";
    v14 = 176;
    if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      return 1;
    v12 = &v13;
    if (v9 && mlir::RewriterBase::Listener::classof(v9))
    return 0;
  }
  else
  {
LABEL_11:
    v11 = *(_QWORD *)(a1 + 16);
    if (!v11)
      return 0;
    result = mlir::RewriterBase::Listener::classof(v11);
    if ((_DWORD)result)
  }
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::static_dag_matcher_1(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::Attribute &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::AddIOp type";
  v14 = 43;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::static_dag_matcher_1(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::Attribute &)::$_1>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp1";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>(_QWORD *a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = &unk_254519000;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = (_QWORD *)&unk_254519000;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ConstantLike<Empty>]";
      v15 = 84;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = (_QWORD *)&unk_254519000;
      a1 = v13;
    }
  }
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v2[375]);
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::Attribute &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "::mlir::success(::mlir::matchPattern(op0->getResult(0), ::mlir::m_Constant(&arg1_0))) return ::mlir::failure";
  v14 = 108;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::__mlir_ods_local_attr_constraint_ArithCanonicalization0(mlir::PatternRewriter &,mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(const void ****a1, uint64_t a2)
{
  const void **v2;
  const void **v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __n128 *v8;
  __n128 *v9;
  __n128 result;
  unint64_t v11;
  BOOL v12;
  char *v13;
  const void **v14[4];
  __int16 v15;
  int v16;
  const char *v17;
  uint64_t v18;

  v3 = **a1;
  v2 = (*a1)[1];
  v15 = 261;
  v14[0] = v3;
  v14[1] = v2;
  v4 = mlir::Diagnostic::operator<<(a2, v14);
  v5 = v4 + 16;
  v6 = *(_QWORD *)(v4 + 16);
  v16 = 3;
  v17 = ": arbitrary integer attribute";
  v18 = 29;
  v7 = *(unsigned int *)(v4 + 24);
  v8 = (__n128 *)&v16;
  if (v7 >= *(_DWORD *)(v4 + 28))
  {
    v11 = v7 + 1;
    v12 = v6 + 24 * v7 > (unint64_t)&v16;
    if (v6 <= (unint64_t)&v16 && v12)
    {
      v13 = (char *)&v16 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v4 + 32), v11, 24);
      v6 = *(_QWORD *)(v4 + 16);
      v8 = (__n128 *)&v13[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v4 + 32), v11, 24);
      v6 = *(_QWORD *)(v4 + 16);
      v8 = (__n128 *)&v16;
    }
  }
  v9 = (__n128 *)(v6 + 24 * *(unsigned int *)(v4 + 24));
  result = *v8;
  v9[1].n128_u64[0] = v8[1].n128_u64[0];
  *v9 = result;
  ++*(_DWORD *)(v4 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::AddIAddConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::static_dag_matcher_2(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::Attribute &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "::mlir::success(::mlir::matchPattern(op0->getResult(0), ::mlir::m_Constant(&arg1_0))) return ::mlir::failure";
  v14 = 108;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t applyToIntegerAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t *), uint64_t a5)
{
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;

  v13 = a2;
  mlir::IntegerAttr::getValue(&v13, (llvm::APInt *)&v15);
  v11 = a3;
  mlir::IntegerAttr::getValue(&v11, (llvm::APInt *)&v13);
  a4(&v11, a5, &v15, &v13);
  v9 = mlir::IntegerAttr::get(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8, (llvm::APInt *)&v11);
  if (v12 >= 0x41 && v11)
    MEMORY[0x20BD002D4](v11, 0x1000C8000313F17);
  if (v14 >= 0x41 && v13)
    MEMORY[0x20BD002D4](v13, 0x1000C8000313F17);
  if (v16 >= 0x41 && v15)
    MEMORY[0x20BD002D4](v15, 0x1000C8000313F17);
  return v9;
}

uint64_t llvm::function_ref<llvm::APInt ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<std::plus<llvm::APInt>>@<X0>(uint64_t a1@<X1>, _QWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  const void *v6;
  unsigned int v7;

  v7 = *(_DWORD *)(a1 + 8);
  if (v7 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v6, (const void **)a1);
  else
    v6 = *(const void **)a1;
  result = llvm::APInt::operator+=((uint64_t)&v6, a2);
  *(_DWORD *)(a3 + 8) = v7;
  *(_QWORD *)a3 = v6;
  return result;
}

void `anonymous namespace'::AddISubConstantRHS::~AddISubConstantRHS(_anonymous_namespace_::AddISubConstantRHS *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::AddISubConstantRHS::matchAndRewrite(_anonymous_namespace_::AddISubConstantRHS *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v4;
  uint64_t v5;
  mlir::Operation *v6;
  uint64_t DefiningOp;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 (*v16)(uint64_t, uint64_t);
  void *v17;
  unint64_t v19;
  _QWORD v20[2];
  unint64_t v21;
  void *v22[2];
  _QWORD *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    v4 = *((_QWORD *)a2 + 9);
    v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v20[0] = v4;
  v20[1] = v5;
  v19 = 0;
  v23 = v25;
  v25[0] = a2;
  v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v22[0] = *(void **)(*((_QWORD *)v6 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    v8 = DefiningOp;
    v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((_QWORD *)v6 + 9) + 56);
    v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      v11 = v10;
      {
        v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      v14 = 0;
      v17 = v23;
      if (v23 == v25)
        return v14;
      goto LABEL_26;
    }
    v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14))
        goto LABEL_23;
      v15 = *((_QWORD *)v6 + 3);
LABEL_21:
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v14 + 64))(v14, v15, v16, v22);
      v17 = v23;
      if (v23 == v25)
        return v14;
      goto LABEL_26;
    }
  }
  else
  {
    v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14))
        goto LABEL_23;
      v15 = *((_QWORD *)v6 + 3);
      goto LABEL_21;
    }
  }
  v17 = v23;
  if (v23 != v25)
LABEL_26:
    free(v17);
  return v14;
}

uint64_t `anonymous namespace'::static_dag_matcher_5(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t *a5)
{
  uint64_t v9;
  uint64_t DefiningOp;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;

  if (a2 && *(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id)
  {
    if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
      v9 = *(_QWORD *)(a2 + 72);
    else
      v9 = 0;
    *a4 = v9;
    a4[1] = 1;
    v17 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 56);
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v17);
    if (DefiningOp)
    {
      v11 = DefiningOp;
      {
        v12 = *(unsigned int *)(a3 + 8);
        if (v12 >= *(_DWORD *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v12 + 1, 8);
          LODWORD(v12) = *(_DWORD *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
        ++*(_DWORD *)(a3 + 8);
        return 1;
      }
      return 0;
    }
    v15 = *(_QWORD *)(a1 + 16);
    if (!v15)
      return 0;
    result = mlir::RewriterBase::Listener::classof(*(_QWORD *)(a1 + 16));
    if ((_DWORD)result)
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 16);
    if (!v14)
      return 0;
    result = mlir::RewriterBase::Listener::classof(*(_QWORD *)(a1 + 16));
    if ((_DWORD)result)
  }
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::AddISubConstantRHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::static_dag_matcher_5(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::Attribute &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::SubIOp type";
  v14 = 43;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::static_dag_matcher_5(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::Attribute &)::$_1>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp1";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::AddISubConstantRHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t llvm::function_ref<llvm::APInt ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<std::minus<llvm::APInt>>@<X0>(uint64_t a1@<X1>, _QWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  const void *v6;
  unsigned int v7;

  v7 = *(_DWORD *)(a1 + 8);
  if (v7 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v6, (const void **)a1);
  else
    v6 = *(const void **)a1;
  result = llvm::APInt::operator-=((uint64_t)&v6, a2);
  *(_DWORD *)(a3 + 8) = v7;
  *(_QWORD *)a3 = v6;
  return result;
}

void `anonymous namespace'::AddISubConstantLHS::~AddISubConstantLHS(_anonymous_namespace_::AddISubConstantLHS *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::AddISubConstantLHS::matchAndRewrite(_anonymous_namespace_::AddISubConstantLHS *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v4;
  uint64_t v5;
  mlir::Operation *v6;
  uint64_t DefiningOp;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 (*v16)(uint64_t, uint64_t);
  void *v17;
  _QWORD v19[2];
  unint64_t v20;
  unint64_t v21;
  void *v22[2];
  _QWORD *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v21 = 0;
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    v4 = *((_QWORD *)a2 + 9);
    v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v19[0] = v4;
  v19[1] = v5;
  v23 = v25;
  v25[0] = a2;
  v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v22[0] = *(void **)(*((_QWORD *)v6 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    v8 = DefiningOp;
    v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((_QWORD *)v6 + 9) + 56);
    v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      v11 = v10;
      {
        v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      v14 = 0;
      v17 = v23;
      if (v23 == v25)
        return v14;
      goto LABEL_26;
    }
    v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14))
        goto LABEL_23;
      v15 = *((_QWORD *)v6 + 3);
LABEL_21:
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v14 + 64))(v14, v15, v16, v22);
      v17 = v23;
      if (v23 == v25)
        return v14;
      goto LABEL_26;
    }
  }
  else
  {
    v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14))
        goto LABEL_23;
      v15 = *((_QWORD *)v6 + 3);
      goto LABEL_21;
    }
  }
  v17 = v23;
  if (v23 != v25)
LABEL_26:
    free(v17);
  return v14;
}

uint64_t `anonymous namespace'::static_dag_matcher_4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, _QWORD *a5)
{
  uint64_t DefiningOp;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;

  if (a2 && *(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v18);
    if (DefiningOp)
    {
      v11 = DefiningOp;
      {
        v12 = *(unsigned int *)(a3 + 8);
        if (v12 >= *(_DWORD *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v12 + 1, 8);
          LODWORD(v12) = *(_DWORD *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
        ++*(_DWORD *)(a3 + 8);
        if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
          v13 = *(_QWORD *)(a2 + 72);
        else
          v13 = 0;
        result = 1;
        *a5 = v13 + 32;
        a5[1] = 1;
        return result;
      }
      return 0;
    }
    v16 = *(_QWORD *)(a1 + 16);
    if (!v16)
      return 0;
    result = mlir::RewriterBase::Listener::classof(*(_QWORD *)(a1 + 16));
    if ((_DWORD)result)
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 16);
    if (!v15)
      return 0;
    result = mlir::RewriterBase::Listener::classof(*(_QWORD *)(a1 + 16));
    if ((_DWORD)result)
  }
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::SubIOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t *v11;
  ZinIrHalH13g *v12;
  ZinIrHalH13g *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  unint64_t v20[2];
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.subi", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"arith.subi";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = mlir::ValueRange::ValueRange(v20, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::AddISubConstantLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::static_dag_matcher_4(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::Attribute &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::SubIOp type";
  v14 = 43;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::static_dag_matcher_4(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::Attribute &,mlir::OperandRange &)::$_1>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp1";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::AddISubConstantLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::AddIMulNegativeOneRhs::~AddIMulNegativeOneRhs(_anonymous_namespace_::AddIMulNegativeOneRhs *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::AddIMulNegativeOneRhs::matchAndRewrite(_anonymous_namespace_::AddIMulNegativeOneRhs *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  mlir::Operation *v5;
  uint64_t DefiningOp;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  void *v20;
  int v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD v36[6];

  v36[4] = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  v34 = v36;
  v36[0] = a2;
  v35 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id)
    v5 = a2;
  else
    v5 = 0;
  v28 = *(void **)(*((_QWORD *)v5 + 9) + 56);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v28);
  if (!DefiningOp)
  {
    v8 = *((_QWORD *)a3 + 2);
    if (!v8)
      goto LABEL_48;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v9 = *((_QWORD *)v5 + 3);
      goto LABEL_12;
    }
    goto LABEL_47;
  }
  v7 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::MulIOp,void>::id)
  {
    v8 = *((_QWORD *)a3 + 2);
    if (!v8)
      goto LABEL_48;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v9 = *(_QWORD *)(v7 + 24);
LABEL_12:
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v8 + 64))(v8, v9, v10, &v28);
      goto LABEL_13;
    }
    goto LABEL_47;
  }
  v28 = *(void **)(*(_QWORD *)(DefiningOp + 72) + 56);
  v13 = mlir::Value::getDefiningOp((mlir::Value *)&v28);
  if (v13)
  {
    v14 = v13;
    {
      v15 = v35;
      if (v35 >= HIDWORD(v35))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v35 + 1, 8);
        v15 = v35;
      }
      v34[v15] = v14;
      v16 = (v35 + 1);
      LODWORD(v35) = v16;
      if (v16 >= HIDWORD(v35))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v16 + 1, 8);
        LODWORD(v16) = v35;
      }
      v34[v16] = v7;
      LODWORD(v35) = v35 + 1;
      v17 = v27;
      LODWORD(v29) = 1;
      v28 = 0;
      v32 = &v28;
      if (v27)
      {
        v18 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v32, v27);
        v19 = v29;
        if ((v18 & 1) != 0)
        {
          v20 = v28;
          LODWORD(v33) = 1;
          v32 = 0;
          v31 = &v32;
          v21 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v31, v17);
          v22 = v33;
          if (v21)
          {
            LODWORD(v29) = v33;
            v28 = v32;
            LOBYTE(v30) = 1;
          }
          else
          {
            LOBYTE(v28) = 0;
            LOBYTE(v30) = 0;
            if (v33 >= 0x41)
            {
              if (v32)
                MEMORY[0x20BD002D4](v32, 0x1000C8000313F17);
              goto LABEL_37;
            }
          }
          if (!(_DWORD)v33)
          {
            if (v19 >= 0x41 && v20)
              MEMORY[0x20BD002D4](v20, 0x1000C8000313F17);
            goto LABEL_54;
          }
          if (v33 <= 0x40)
          {
            v23 = v28 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v33);
            goto LABEL_40;
          }
LABEL_37:
          v23 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v28) == v22;
          if (v21 && v28)
            MEMORY[0x20BD002D4](v28, 0x1000C8000313F17);
LABEL_40:
          if (v19 >= 0x41 && v20)
            MEMORY[0x20BD002D4](v20, 0x1000C8000313F17);
          if (!v23)
            goto LABEL_44;
LABEL_54:
          v26 = *(_QWORD *)(v34[1] + 24);
          v28 = *(void **)(*v34 + 24);
          v29 = v26;
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&v28, (mlir::MLIRContext *)2, 0);
        }
        if (v29 >= 0x41 && v28)
          MEMORY[0x20BD002D4](v28, 0x1000C8000313F17);
      }
LABEL_44:
      v24 = *((_QWORD *)a3 + 2);
      if (v24 && mlir::RewriterBase::Listener::classof(v24))
      {
LABEL_13:
        v8 = v11;
        v12 = v34;
        if (v34 == v36)
          return v8;
        goto LABEL_49;
      }
    }
  }
  else
  {
    v8 = *((_QWORD *)a3 + 2);
    if (!v8)
      goto LABEL_48;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v9 = *(_QWORD *)(v7 + 24);
      goto LABEL_12;
    }
  }
LABEL_47:
  v8 = 0;
LABEL_48:
  v12 = v34;
  if (v34 != v36)
LABEL_49:
    free(v12);
  return v8;
}

uint64_t `anonymous namespace'::static_dag_matcher_3(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t DefiningOp;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  void *v12[2];
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  v11 = a2 - 16;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v11);
  if (!DefiningOp)
    goto LABEL_7;
  v7 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
    goto LABEL_7;
  v12[0] = v13;
  v12[1] = (void *)0x100000000;
  mlir::Operation::fold(v7, 0, 0, (uint64_t)v12);
  v8 = *(_QWORD *)v12[0] & 0xFFFFFFFFFFFFFFF8;
  if (v12[0] != v13)
    free(v12[0]);
  if (v8)
  {
    *a3 = v8;
    return 1;
  }
  else
  {
LABEL_7:
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      result = mlir::RewriterBase::Listener::classof(v10);
      if ((_DWORD)result)
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::AddIMulNegativeOneRhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::AddIMulNegativeOneRhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::MulIOp type";
  v14 = 43;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::AddIMulNegativeOneRhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp1";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::static_dag_matcher_3(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::Attribute &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "::mlir::success(::mlir::matchPattern(op0->getResult(0), ::mlir::m_Constant(&arg1_0))) return ::mlir::failure";
  v14 = 108;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::AddIMulNegativeOneRhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'c0' failed to satisfy constraint: ''";
  v14 = 46;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::AddIMulNegativeOneLhs::~AddIMulNegativeOneLhs(_anonymous_namespace_::AddIMulNegativeOneLhs *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::AddIMulNegativeOneLhs::matchAndRewrite(_anonymous_namespace_::AddIMulNegativeOneLhs *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  mlir::Operation *v5;
  uint64_t DefiningOp;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  void *v20;
  int v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD v36[6];

  v36[4] = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  v34 = v36;
  v36[0] = a2;
  v35 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id)
    v5 = a2;
  else
    v5 = 0;
  v28 = *(void **)(*((_QWORD *)v5 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v28);
  if (!DefiningOp)
  {
    v8 = *((_QWORD *)a3 + 2);
    if (!v8)
      goto LABEL_48;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v9 = *((_QWORD *)v5 + 3);
      goto LABEL_12;
    }
    goto LABEL_47;
  }
  v7 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::MulIOp,void>::id)
  {
    v8 = *((_QWORD *)a3 + 2);
    if (!v8)
      goto LABEL_48;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v9 = *(_QWORD *)(v7 + 24);
LABEL_12:
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v8 + 64))(v8, v9, v10, &v28);
      goto LABEL_13;
    }
    goto LABEL_47;
  }
  v28 = *(void **)(*(_QWORD *)(DefiningOp + 72) + 56);
  v13 = mlir::Value::getDefiningOp((mlir::Value *)&v28);
  if (v13)
  {
    v14 = v13;
    {
      v15 = v35;
      if (v35 >= HIDWORD(v35))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v35 + 1, 8);
        v15 = v35;
      }
      v34[v15] = v14;
      v16 = (v35 + 1);
      LODWORD(v35) = v16;
      if (v16 >= HIDWORD(v35))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v16 + 1, 8);
        LODWORD(v16) = v35;
      }
      v34[v16] = v7;
      LODWORD(v35) = v35 + 1;
      v17 = v27;
      LODWORD(v29) = 1;
      v28 = 0;
      v32 = &v28;
      if (v27)
      {
        v18 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v32, v27);
        v19 = v29;
        if ((v18 & 1) != 0)
        {
          v20 = v28;
          LODWORD(v33) = 1;
          v32 = 0;
          v31 = &v32;
          v21 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v31, v17);
          v22 = v33;
          if (v21)
          {
            LODWORD(v29) = v33;
            v28 = v32;
            LOBYTE(v30) = 1;
          }
          else
          {
            LOBYTE(v28) = 0;
            LOBYTE(v30) = 0;
            if (v33 >= 0x41)
            {
              if (v32)
                MEMORY[0x20BD002D4](v32, 0x1000C8000313F17);
              goto LABEL_37;
            }
          }
          if (!(_DWORD)v33)
          {
            if (v19 >= 0x41 && v20)
              MEMORY[0x20BD002D4](v20, 0x1000C8000313F17);
            goto LABEL_54;
          }
          if (v33 <= 0x40)
          {
            v23 = v28 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v33);
            goto LABEL_40;
          }
LABEL_37:
          v23 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v28) == v22;
          if (v21 && v28)
            MEMORY[0x20BD002D4](v28, 0x1000C8000313F17);
LABEL_40:
          if (v19 >= 0x41 && v20)
            MEMORY[0x20BD002D4](v20, 0x1000C8000313F17);
          if (!v23)
            goto LABEL_44;
LABEL_54:
          v26 = *(_QWORD *)(v34[1] + 24);
          v28 = *(void **)(*v34 + 24);
          v29 = v26;
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&v28, (mlir::MLIRContext *)2, 0);
        }
        if (v29 >= 0x41 && v28)
          MEMORY[0x20BD002D4](v28, 0x1000C8000313F17);
      }
LABEL_44:
      v24 = *((_QWORD *)a3 + 2);
      if (v24 && mlir::RewriterBase::Listener::classof(v24))
      {
LABEL_13:
        v8 = v11;
        v12 = v34;
        if (v34 == v36)
          return v8;
        goto LABEL_49;
      }
    }
  }
  else
  {
    v8 = *((_QWORD *)a3 + 2);
    if (!v8)
      goto LABEL_48;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v9 = *(_QWORD *)(v7 + 24);
      goto LABEL_12;
    }
  }
LABEL_47:
  v8 = 0;
LABEL_48:
  v12 = v34;
  if (v34 != v36)
LABEL_49:
    free(v12);
  return v8;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::AddIMulNegativeOneLhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::AddIMulNegativeOneLhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::MulIOp type";
  v14 = 43;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::AddIMulNegativeOneLhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp1";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::AddIMulNegativeOneLhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'c0' failed to satisfy constraint: ''";
  v14 = 46;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t mlir::detail::constant_int_predicate_matcher::match(uint64_t (**this)(uint64_t *), mlir::Operation *a2)
{
  unint64_t v4;
  void *v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  void *v14[2];
  _QWORD v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  v13 = 1;
  v11 = &v12;
  v12 = 0;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)a2 + 6))
    goto LABEL_19;
  v14[0] = v15;
  v14[1] = (void *)0x100000000;
  mlir::Operation::fold((uint64_t)a2, 0, 0, (uint64_t)v14);
  v4 = *(_QWORD *)v14[0] & 0xFFFFFFFFFFFFFFF8;
  if (v14[0] != v15)
    free(v14[0]);
  if (v4
    && ((v5 = *(void **)(*(_QWORD *)(*((_QWORD *)a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 136),
         v5 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      ? (v6 = v5 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
      : (v6 = 1),
        !v6 ? (v7 = v5 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) : (v7 = 1),
        !v7 ? (v8 = v5 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) : (v8 = 1),
        v8 && mlir::detail::constant_int_value_binder::match((uint64_t *)&v11, v4)))
  {
    v9 = (*this)(&v12);
    if (v13 < 0x41)
      return v9;
  }
  else
  {
LABEL_19:
    v9 = 0;
    if (v13 < 0x41)
      return v9;
  }
  if (v12)
    MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  return v9;
}

uint64_t mlir::constFoldBinaryOpConditional<mlir::IntegerAttr,llvm::APInt,void,mlir::Attribute mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,void,llvm::APInt (&)(llvm::APInt const&,llvm::APInt const&)>(llvm::ArrayRef<mlir::Attribute>,mlir::Type,llvm::APInt (&)(llvm::APInt const&,llvm::APInt const&) &&)::{lambda(llvm::APInt,llvm::APInt)#1}>(uint64_t *a1, uint64_t a2, _QWORD *a3, void (**a4)(char **__return_ptr, uint64_t *, uint64_t *))
{
  uint64_t v5;
  uint64_t v6;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t Value;
  uint64_t v21;
  uint64_t Type;
  int v24;
  unint64_t NumElements;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  unsigned int v40;
  const void *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  char v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _QWORD v60[2];
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  llvm::APInt *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v5 = *a1;
  if (!*a1)
    return 0;
  v6 = a1[1];
  if (!v6)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    && *(_UNKNOWN **)(*(_QWORD *)v6 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v52 = *a1;
    v49 = v6;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v52);
    if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v49))
    {
      mlir::IntegerAttr::getValue(&v52, (llvm::APInt *)&v69);
      mlir::IntegerAttr::getValue(&v49, (llvm::APInt *)&v67);
      (*a4)(&v56, &v69, &v67);
      LODWORD(v74) = v57;
      v73 = (llvm::APInt *)v56;
      v75 = 1;
      if (v68 >= 0x41 && v67)
        MEMORY[0x20BD002D4](v67, 0x1000C8000313F17);
      if (v70 >= 0x41 && v69)
        MEMORY[0x20BD002D4](v69, 0x1000C8000313F17);
      v15 = mlir::IntegerAttr::get((uint64_t)a3, (llvm::APInt *)&v73);
      goto LABEL_37;
    }
    return 0;
  }
  if (mlir::DenseElementsAttr::classof(*a1))
    v9 = (char *)v5;
  else
    v9 = 0;
  v73 = (llvm::APInt *)v9;
  if (v9 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v73))
  {
    v10 = a1[1];
    v11 = mlir::DenseElementsAttr::classof(v10) ? (char *)v10 : 0;
    v73 = (llvm::APInt *)v11;
    if (v11)
    {
      if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v73))
      {
        v12 = a1[1];
        v52 = *a1;
        v49 = v12;
        v13 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v52);
        if (v13 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v49))
        {
          mlir::DenseElementsAttr::getSplatValue<llvm::APInt>((mlir::DenseElementsAttr *)&v52, (llvm::APInt *)&v65);
          mlir::DenseElementsAttr::getSplatValue<llvm::APInt>((mlir::DenseElementsAttr *)&v49, (llvm::APInt *)&v63);
          (*a4)(&v56, &v65, &v63);
          LODWORD(v74) = v57;
          v73 = (llvm::APInt *)v56;
          v75 = 1;
          if (v64 >= 0x41 && v63)
            MEMORY[0x20BD002D4](v63, 0x1000C8000313F17);
          if (v66 >= 0x41 && v65)
            MEMORY[0x20BD002D4](v65, 0x1000C8000313F17);
          v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a3 + 8);
          v15 = mlir::DenseElementsAttr::get((uint64_t)a3, v14, (llvm::APInt *)&v73, 1);
LABEL_37:
          v21 = v15;
          if (v75 && v74 >= 0x41 && v73)
            MEMORY[0x20BD002D4](v73, 0x1000C8000313F17);
          return v21;
        }
        return 0;
      }
    }
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)*a1 + 8)
    || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)a1[1] + 8))
  {
    return 0;
  }
  v16 = (_QWORD *)*a1;
  if (*a1)
  {
    v17 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v16 + 8);
    v61 = v16;
    v62 = v17;
    v18 = (_QWORD *)a1[1];
    if (v18)
    {
LABEL_28:
      v19 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v18 + 8);
      goto LABEL_43;
    }
  }
  else
  {
    v61 = 0;
    v62 = 0;
    v18 = (_QWORD *)a1[1];
    if (v18)
      goto LABEL_28;
  }
  v19 = 0;
LABEL_43:
  v60[0] = v18;
  v60[1] = v19;
  Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v61);
  if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v60))
    return 0;
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v61, (uint64_t)&v56);
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v60, (uint64_t)&v52);
  v21 = 0;
  v24 = v55;
  if (v59 && v55)
  {
    LOWORD(v49) = (_WORD)v56;
    if ((_BYTE)v56)
      v50 = v57;
    else
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v57 + 16))(&v50);
    v51 = v58;
    v46 = v52;
    if ((_BYTE)v52)
      v47 = v53;
    else
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v53 + 16))(&v47);
    v48 = v54;
    v73 = (llvm::APInt *)&v75;
    v74 = 0x400000000;
    NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v61, v62);
    llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v73, NumElements);
    v26 = mlir::ElementsAttr::getNumElements((uint64_t)v61, v62);
    if (v26)
    {
      v27 = v26;
      v28 = v51;
      do
      {
        if (BYTE1(v49))
          v29 = 0;
        else
          v29 = v28;
        if ((_BYTE)v49)
        {
          v30 = v50 + 16 * v29;
          v42 = *(_DWORD *)(v30 + 8);
          if (v42 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v41, (const void **)v30);
            v31 = v47;
            if (HIBYTE(v46))
              v32 = 0;
            else
              v32 = v48;
            if (!(_BYTE)v46)
              goto LABEL_77;
          }
          else
          {
            v41 = *(const void **)v30;
            v31 = v47;
            if (HIBYTE(v46))
              v32 = 0;
            else
              v32 = v48;
            if (!(_BYTE)v46)
              goto LABEL_77;
          }
        }
        else
        {
          (*(void (**)(const void **__return_ptr))(*(_QWORD *)v50 + 24))(&v41);
          v31 = v47;
          if (HIBYTE(v46))
            v32 = 0;
          else
            v32 = v48;
          if (!(_BYTE)v46)
          {
LABEL_77:
            (*(void (**)(const void **__return_ptr))(*(_QWORD *)v31 + 24))(&v39);
            goto LABEL_79;
          }
        }
        v33 = v31 + 16 * v32;
        v40 = *(_DWORD *)(v33 + 8);
        if (v40 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v39, (const void **)v33);
        else
          v39 = *(const void **)v33;
LABEL_79:
        (*a4)((char **)&v71, (uint64_t *)&v41, (uint64_t *)&v39);
        v44 = v72;
        v43 = v71;
        v45 = 1;
        if (v40 >= 0x41 && v39)
          MEMORY[0x20BD002D4](v39, 0x1000C8000313F17);
        if (v42 >= 0x41 && v41)
          MEMORY[0x20BD002D4](v41, 0x1000C8000313F17);
        if (!v45)
        {
          v21 = 0;
          goto LABEL_92;
        }
        llvm::SmallVectorTemplateBase<llvm::APInt,false>::push_back((uint64_t)&v73, (unint64_t)&v43);
        if (v45 && v44 >= 0x41 && v43)
          MEMORY[0x20BD002D4](v43, 0x1000C8000313F17);
        v28 = ++v51;
        ++v48;
        --v27;
      }
      while (v27);
    }
    v34 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a3 + 8);
    v21 = mlir::DenseElementsAttr::get((uint64_t)a3, v34, v73, v74);
LABEL_92:
    llvm::SmallVector<llvm::APInt,4u>::~SmallVector((char **)&v73);
    if (!(_BYTE)v46)
    {
      v35 = v47;
      v47 = 0;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    }
    if (!(_BYTE)v49)
    {
      v36 = v50;
      v50 = 0;
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    }
    v24 = v55;
  }
  if (v24)
  {
    if (!(_BYTE)v52)
    {
      v37 = v53;
      v53 = 0;
      if (v37)
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    }
  }
  if (v59)
  {
    if (!(_BYTE)v56)
    {
      v38 = v57;
      v57 = 0;
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  return v21;
}

void `anonymous namespace'::AddUIExtendedToAddI::~AddUIExtendedToAddI(_anonymous_namespace_::AddUIExtendedToAddI *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::AddUIExtendedToAddI::matchAndRewrite(_anonymous_namespace_::AddUIExtendedToAddI *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  mlir::Operation *v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v17[0] = a2;
  v16 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddUIExtendedOp,void>::id)
    v5 = a2;
  else
    v5 = 0;
  v6 = *((_DWORD *)v5 + 9);
  v7 = (char *)v5 - 16;
  if (v6)
    v8 = (uint64_t)v7;
  else
    v8 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 1);
  if (!*(_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, 0))
  {
    v14 = *(void **)(*v15 + 24);
    mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)&v14, (mlir::MLIRContext *)1, 0);
  }
  v10 = (uint64_t)a3[2];
  if (v10 && mlir::RewriterBase::Listener::classof(v10))
  {
    v12 = v15;
    if (v15 == v17)
      return v11;
    goto LABEL_13;
  }
  v11 = 0;
  v12 = v15;
  if (v15 != v17)
LABEL_13:
    free(v12);
  return v11;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::AddUIExtendedToAddI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'res__1' failed to satisfy constraint: ''";
  v14 = 50;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::SubIRHSAddConstant::~SubIRHSAddConstant(_anonymous_namespace_::SubIRHSAddConstant *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::SubIRHSAddConstant::matchAndRewrite(_anonymous_namespace_::SubIRHSAddConstant *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v4;
  uint64_t v5;
  mlir::Operation *v6;
  uint64_t DefiningOp;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 (*v16)(uint64_t, uint64_t);
  void *v17;
  unint64_t v19;
  _QWORD v20[2];
  unint64_t v21;
  void *v22[2];
  _QWORD *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    v4 = *((_QWORD *)a2 + 9);
    v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v20[0] = v4;
  v20[1] = v5;
  v19 = 0;
  v23 = v25;
  v25[0] = a2;
  v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v22[0] = *(void **)(*((_QWORD *)v6 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    v8 = DefiningOp;
    v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((_QWORD *)v6 + 9) + 56);
    v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      v11 = v10;
      {
        v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      v14 = 0;
      v17 = v23;
      if (v23 == v25)
        return v14;
      goto LABEL_26;
    }
    v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14))
        goto LABEL_23;
      v15 = *((_QWORD *)v6 + 3);
LABEL_21:
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v14 + 64))(v14, v15, v16, v22);
      v17 = v23;
      if (v23 == v25)
        return v14;
      goto LABEL_26;
    }
  }
  else
  {
    v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14))
        goto LABEL_23;
      v15 = *((_QWORD *)v6 + 3);
      goto LABEL_21;
    }
  }
  v17 = v23;
  if (v23 != v25)
LABEL_26:
    free(v17);
  return v14;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SubIRHSAddConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SubIRHSAddConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::SubILHSAddConstant::~SubILHSAddConstant(_anonymous_namespace_::SubILHSAddConstant *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::SubILHSAddConstant::matchAndRewrite(_anonymous_namespace_::SubILHSAddConstant *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v4;
  uint64_t v5;
  mlir::Operation *v6;
  uint64_t DefiningOp;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 (*v16)(uint64_t, uint64_t);
  void *v17;
  unint64_t v19;
  unint64_t v20;
  _QWORD v21[2];
  void *v22[2];
  _QWORD *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    v4 = *((_QWORD *)a2 + 9);
    v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v21[0] = v4;
  v21[1] = v5;
  v19 = 0;
  v20 = 0;
  v23 = v25;
  v25[0] = a2;
  v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v22[0] = *(void **)(*((_QWORD *)v6 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    v8 = DefiningOp;
      goto LABEL_23;
    v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((_QWORD *)v6 + 9) + 56);
    v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      v11 = v10;
      {
        v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      v14 = 0;
      v17 = v23;
      if (v23 == v25)
        return v14;
      goto LABEL_26;
    }
    v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14))
        goto LABEL_23;
      v15 = *((_QWORD *)v6 + 3);
LABEL_21:
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v14 + 64))(v14, v15, v16, v22);
      v17 = v23;
      if (v23 == v25)
        return v14;
      goto LABEL_26;
    }
  }
  else
  {
    v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14))
        goto LABEL_23;
      v15 = *((_QWORD *)v6 + 3);
      goto LABEL_21;
    }
  }
  v17 = v23;
  if (v23 != v25)
LABEL_26:
    free(v17);
  return v14;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SubILHSAddConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SubILHSAddConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::SubIRHSSubConstantRHS::~SubIRHSSubConstantRHS(_anonymous_namespace_::SubIRHSSubConstantRHS *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::SubIRHSSubConstantRHS::matchAndRewrite(_anonymous_namespace_::SubIRHSSubConstantRHS *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v4;
  uint64_t v5;
  mlir::Operation *v6;
  uint64_t DefiningOp;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 (*v16)(uint64_t, uint64_t);
  void *v17;
  unint64_t v19;
  _QWORD v20[2];
  unint64_t v21;
  void *v22[2];
  _QWORD *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    v4 = *((_QWORD *)a2 + 9);
    v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v20[0] = v4;
  v20[1] = v5;
  v19 = 0;
  v23 = v25;
  v25[0] = a2;
  v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v22[0] = *(void **)(*((_QWORD *)v6 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    v8 = DefiningOp;
    v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((_QWORD *)v6 + 9) + 56);
    v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      v11 = v10;
      {
        v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      v14 = 0;
      v17 = v23;
      if (v23 == v25)
        return v14;
      goto LABEL_26;
    }
    v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14))
        goto LABEL_23;
      v15 = *((_QWORD *)v6 + 3);
LABEL_21:
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v14 + 64))(v14, v15, v16, v22);
      v17 = v23;
      if (v23 == v25)
        return v14;
      goto LABEL_26;
    }
  }
  else
  {
    v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14))
        goto LABEL_23;
      v15 = *((_QWORD *)v6 + 3);
      goto LABEL_21;
    }
  }
  v17 = v23;
  if (v23 != v25)
LABEL_26:
    free(v17);
  return v14;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SubIRHSSubConstantRHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SubIRHSSubConstantRHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::SubIRHSSubConstantLHS::~SubIRHSSubConstantLHS(_anonymous_namespace_::SubIRHSSubConstantLHS *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::SubIRHSSubConstantLHS::matchAndRewrite(_anonymous_namespace_::SubIRHSSubConstantLHS *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v4;
  uint64_t v5;
  mlir::Operation *v6;
  uint64_t DefiningOp;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 (*v16)(uint64_t, uint64_t);
  void *v17;
  _QWORD v19[2];
  unint64_t v20;
  unint64_t v21;
  void *v22[2];
  _QWORD *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v21 = 0;
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    v4 = *((_QWORD *)a2 + 9);
    v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v19[0] = v4;
  v19[1] = v5;
  v23 = v25;
  v25[0] = a2;
  v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v22[0] = *(void **)(*((_QWORD *)v6 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    v8 = DefiningOp;
    v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((_QWORD *)v6 + 9) + 56);
    v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      v11 = v10;
      {
        v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      v14 = 0;
      v17 = v23;
      if (v23 == v25)
        return v14;
      goto LABEL_26;
    }
    v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14))
        goto LABEL_23;
      v15 = *((_QWORD *)v6 + 3);
LABEL_21:
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v14 + 64))(v14, v15, v16, v22);
      v17 = v23;
      if (v23 == v25)
        return v14;
      goto LABEL_26;
    }
  }
  else
  {
    v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14))
        goto LABEL_23;
      v15 = *((_QWORD *)v6 + 3);
      goto LABEL_21;
    }
  }
  v17 = v23;
  if (v23 != v25)
LABEL_26:
    free(v17);
  return v14;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SubIRHSSubConstantLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SubIRHSSubConstantLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::SubILHSSubConstantRHS::~SubILHSSubConstantRHS(_anonymous_namespace_::SubILHSSubConstantRHS *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::SubILHSSubConstantRHS::matchAndRewrite(_anonymous_namespace_::SubILHSSubConstantRHS *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v4;
  uint64_t v5;
  mlir::Operation *v6;
  uint64_t DefiningOp;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 (*v16)(uint64_t, uint64_t);
  void *v17;
  unint64_t v19;
  unint64_t v20;
  _QWORD v21[2];
  void *v22[2];
  _QWORD *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    v4 = *((_QWORD *)a2 + 9);
    v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v21[0] = v4;
  v21[1] = v5;
  v19 = 0;
  v20 = 0;
  v23 = v25;
  v25[0] = a2;
  v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v22[0] = *(void **)(*((_QWORD *)v6 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    v8 = DefiningOp;
      goto LABEL_23;
    v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((_QWORD *)v6 + 9) + 56);
    v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      v11 = v10;
      {
        v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      v14 = 0;
      v17 = v23;
      if (v23 == v25)
        return v14;
      goto LABEL_26;
    }
    v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14))
        goto LABEL_23;
      v15 = *((_QWORD *)v6 + 3);
LABEL_21:
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v14 + 64))(v14, v15, v16, v22);
      v17 = v23;
      if (v23 == v25)
        return v14;
      goto LABEL_26;
    }
  }
  else
  {
    v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14))
        goto LABEL_23;
      v15 = *((_QWORD *)v6 + 3);
      goto LABEL_21;
    }
  }
  v17 = v23;
  if (v23 != v25)
LABEL_26:
    free(v17);
  return v14;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SubILHSSubConstantRHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SubILHSSubConstantRHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::SubILHSSubConstantLHS::~SubILHSSubConstantLHS(_anonymous_namespace_::SubILHSSubConstantLHS *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::SubILHSSubConstantLHS::matchAndRewrite(_anonymous_namespace_::SubILHSSubConstantLHS *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v4;
  uint64_t v5;
  mlir::Operation *v6;
  uint64_t DefiningOp;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 (*v16)(uint64_t, uint64_t);
  void *v17;
  unint64_t v19;
  _QWORD v20[2];
  unint64_t v21;
  void *v22[2];
  _QWORD *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    v4 = *((_QWORD *)a2 + 9);
    v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v20[0] = v4;
  v20[1] = v5;
  v19 = 0;
  v23 = v25;
  v25[0] = a2;
  v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v22[0] = *(void **)(*((_QWORD *)v6 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    v8 = DefiningOp;
      goto LABEL_23;
    v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((_QWORD *)v6 + 9) + 56);
    v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      v11 = v10;
      {
        v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      v14 = 0;
      v17 = v23;
      if (v23 == v25)
        return v14;
      goto LABEL_26;
    }
    v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14))
        goto LABEL_23;
      v15 = *((_QWORD *)v6 + 3);
LABEL_21:
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v14 + 64))(v14, v15, v16, v22);
      v17 = v23;
      if (v23 == v25)
        return v14;
      goto LABEL_26;
    }
  }
  else
  {
    v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14))
        goto LABEL_23;
      v15 = *((_QWORD *)v6 + 3);
      goto LABEL_21;
    }
  }
  v17 = v23;
  if (v23 != v25)
LABEL_26:
    free(v17);
  return v14;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SubILHSSubConstantLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SubILHSSubConstantLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::SubISubILHSRHSLHS::~SubISubILHSRHSLHS(_anonymous_namespace_::SubISubILHSRHSLHS *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::SubISubILHSRHSLHS::matchAndRewrite(_anonymous_namespace_::SubISubILHSRHSLHS *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  mlir::Operation *v5;
  uint64_t DefiningOp;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  void *v18[2];
  _QWORD *v19;
  uint64_t v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v21[0] = a2;
  v20 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id)
    v5 = a2;
  else
    v5 = 0;
  v18[0] = *(void **)(*((_QWORD *)v5 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v18);
  if (DefiningOp)
  {
    v7 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id)
    {
      v8 = *((_QWORD *)a3 + 2);
      if (!v8)
        goto LABEL_22;
      if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      {
        v9 = *(_QWORD *)(v7 + 24);
LABEL_12:
        v11 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v8 + 64))(v8, v9, v10, v18);
        goto LABEL_13;
      }
      goto LABEL_21;
    }
    if ((*(_BYTE *)(DefiningOp + 46) & 0x80) != 0)
    {
      v13 = *(_QWORD *)(DefiningOp + 72);
      v14 = v20;
      if (v20 < HIDWORD(v20))
        goto LABEL_17;
    }
    else
    {
      v13 = 0;
      v14 = v20;
      if (v20 < HIDWORD(v20))
        goto LABEL_17;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v14 + 1, 8);
    LODWORD(v14) = v20;
LABEL_17:
    v19[v14] = v7;
    LODWORD(v20) = v20 + 1;
    if (*(_QWORD *)(v13 + 24) == *(_QWORD *)(*((_QWORD *)v5 + 9) + 56))
    {
      v17 = *(void **)(v19[1] + 24);
      v18[0] = *(void **)(*v19 + 24);
      v18[1] = v17;
      mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v18, (mlir::MLIRContext *)2, 0);
    }
    v15 = *((_QWORD *)a3 + 2);
    if (v15 && mlir::RewriterBase::Listener::classof(v15))
    {
LABEL_13:
      v8 = v11;
      v12 = v19;
      if (v19 == v21)
        return v8;
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  v8 = *((_QWORD *)a3 + 2);
  if (!v8)
    goto LABEL_22;
  if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
  {
    v9 = *((_QWORD *)v5 + 3);
    goto LABEL_12;
  }
LABEL_21:
  v8 = 0;
LABEL_22:
  v12 = v19;
  if (v19 != v21)
LABEL_23:
    free(v12);
  return v8;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SubISubILHSRHSLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SubISubILHSRHSLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::SubIOp type";
  v14 = 43;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SubISubILHSRHSLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "Operands 'x' and 'x0' must be equal";
  v14 = 35;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::MulIMulIConstant::~MulIMulIConstant(_anonymous_namespace_::MulIMulIConstant *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::MulIMulIConstant::matchAndRewrite(_anonymous_namespace_::MulIMulIConstant *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  mlir::Operation *v4;
  uint64_t DefiningOp;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 (*v9)(uint64_t, uint64_t);
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *v18;
  unint64_t v20;
  unint64_t v21;
  void *v22[2];
  _QWORD *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v21 = 0;
  v23 = v25;
  v25[0] = a2;
  v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulIOp,void>::id)
    v4 = a2;
  else
    v4 = 0;
  v22[0] = *(void **)(*((_QWORD *)v4 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (!DefiningOp)
  {
    v7 = *((_QWORD *)a3 + 2);
    if (!v7)
      goto LABEL_33;
    if (mlir::RewriterBase::Listener::classof(v7))
    {
      v8 = *((_QWORD *)v4 + 3);
      goto LABEL_12;
    }
    goto LABEL_31;
  }
  v6 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulIOp,void>::id)
  {
    v22[0] = *(void **)(*(_QWORD *)(DefiningOp + 72) + 56);
    v11 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v11)
    {
      v12 = v11;
        goto LABEL_31;
      v13 = v24;
      if (v24 >= HIDWORD(v24))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
        v13 = v24;
      }
      v23[v13] = v12;
      v14 = (v24 + 1);
      LODWORD(v24) = v14;
      if (v14 >= HIDWORD(v24))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v14 + 1, 8);
        LODWORD(v14) = v24;
      }
      v23[v14] = v6;
      LODWORD(v24) = v24 + 1;
      v22[0] = *(void **)(*((_QWORD *)v4 + 9) + 56);
      v15 = mlir::Value::getDefiningOp((mlir::Value *)v22);
      if (v15)
      {
        v16 = v15;
        {
          v17 = v24;
          if (v24 >= HIDWORD(v24))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
            v17 = v24;
          }
          v23[v17] = v16;
          LODWORD(v24) = v24 + 1;
          v18 = *(void **)(v23[1] + 24);
          v22[0] = *(void **)(*v23 + 24);
          v22[1] = v18;
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
        }
        goto LABEL_31;
      }
      v7 = *((_QWORD *)a3 + 2);
      if (!v7)
        goto LABEL_33;
      if (mlir::RewriterBase::Listener::classof(v7))
      {
        v8 = *((_QWORD *)v4 + 3);
LABEL_12:
        v7 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v7 + 64))(v7, v8, v9, v22);
        v10 = v23;
        if (v23 == v25)
          return v7;
        goto LABEL_34;
      }
    }
    else
    {
      v7 = *((_QWORD *)a3 + 2);
      if (!v7)
        goto LABEL_33;
      if (mlir::RewriterBase::Listener::classof(v7))
      {
        v8 = *(_QWORD *)(v6 + 24);
        goto LABEL_12;
      }
    }
LABEL_31:
    v7 = 0;
    v10 = v23;
    if (v23 == v25)
      return v7;
    goto LABEL_34;
  }
  v7 = *((_QWORD *)a3 + 2);
  if (v7)
  {
    if (mlir::RewriterBase::Listener::classof(v7))
    {
      v8 = *(_QWORD *)(v6 + 24);
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_33:
  v10 = v23;
  if (v23 != v25)
LABEL_34:
    free(v10);
  return v7;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::MulIOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t *v11;
  ZinIrHalH13g *v12;
  ZinIrHalH13g *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  unint64_t v20[2];
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.muli", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"arith.muli";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = mlir::ValueRange::ValueRange(v20, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulIOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::MulIMulIConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::MulIMulIConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::MulIOp type";
  v14 = 43;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::MulIMulIConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp1";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::MulIMulIConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t llvm::function_ref<llvm::APInt ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<std::multiplies<llvm::APInt>>@<X0>(uint64_t a1@<X1>, const unint64_t **a2@<X2>, uint64_t a3@<X8>)
{
  return llvm::APInt::operator*(a1, a2, a3);
}

void mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::MulSIExtendedOp::fold(mlir::arith::MulSIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulSIExtendedOp::fold(mlir::arith::MulSIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()(uint64_t a1, llvm::APInt *this, _DWORD *a3)
{
  unsigned int v5;
  const unint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;

  v5 = *((_DWORD *)this + 2);
  llvm::APInt::sext(this, 2 * v5, (uint64_t)&v8);
  llvm::APInt::sext(a3, 2 * v5, (uint64_t)&v6);
  llvm::APInt::operator*((uint64_t)&v8, &v6, (uint64_t)&v10);
  if (v7 >= 0x41 && v6)
    MEMORY[0x20BD002D4](v6, 0x1000C8000313F17);
  if (v9 >= 0x41 && v8)
    MEMORY[0x20BD002D4](v8, 0x1000C8000313F17);
  llvm::APInt::extractBits((llvm::APInt *)&v10, v5, v5, (uint64_t)&v8);
  if (v11 >= 0x41 && v10)
    MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  *(_DWORD *)(a1 + 8) = v9;
  *(_QWORD *)a1 = v8;
  *(_BYTE *)(a1 + 16) = 1;
}

void `anonymous namespace'::MulSIExtendedToMulI::~MulSIExtendedToMulI(_anonymous_namespace_::MulSIExtendedToMulI *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::MulSIExtendedToMulI::matchAndRewrite(_anonymous_namespace_::MulSIExtendedToMulI *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  mlir::Operation *v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v17[0] = a2;
  v16 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulSIExtendedOp,void>::id)
    v5 = a2;
  else
    v5 = 0;
  v6 = *((_DWORD *)v5 + 9);
  v7 = (char *)v5 - 16;
  if (v6)
    v8 = (uint64_t)v7;
  else
    v8 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 1);
  if (!*(_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, 0))
  {
    v14 = *(void **)(*v15 + 24);
    mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)&v14, (mlir::MLIRContext *)1, 0);
  }
  v10 = (uint64_t)a3[2];
  if (v10 && mlir::RewriterBase::Listener::classof(v10))
  {
    v12 = v15;
    if (v15 == v17)
      return v11;
    goto LABEL_13;
  }
  v11 = 0;
  v12 = v15;
  if (v15 != v17)
LABEL_13:
    free(v12);
  return v11;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::MulSIExtendedToMulI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'res__1' failed to satisfy constraint: ''";
  v14 = 50;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::MulSIExtendedRHSOne::~MulSIExtendedRHSOne(_anonymous_namespace_::MulSIExtendedRHSOne *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::MulSIExtendedRHSOne::matchAndRewrite(_anonymous_namespace_::MulSIExtendedRHSOne *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  mlir::Operation *v5;
  uint64_t DefiningOp;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  char v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  void *v24;
  uint64_t v25;
  _BYTE v26[64];
  void **v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD v31[6];

  v31[4] = *MEMORY[0x24BDAC8D0];
  v29 = v31;
  v31[0] = a2;
  v30 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulSIExtendedOp,void>::id)
    v5 = a2;
  else
    v5 = 0;
  v24 = *(void **)(*((_QWORD *)v5 + 9) + 56);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (DefiningOp)
  {
    v7 = DefiningOp;
    v27 = (void **)(DefiningOp - 16);
    v8 = mlir::Value::getDefiningOp((mlir::Value *)&v27);
    if (v8)
    {
      v9 = v8;
      if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(v8 + 48)))
      {
        v24 = v26;
        v25 = 0x100000000;
        mlir::Operation::fold(v9, 0, 0, (uint64_t)&v24);
        v10 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8;
        if (v24 != v26)
          free(v24);
        if (v10)
        {
          v11 = v30;
          if (v30 >= HIDWORD(v30))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, v31, v30 + 1, 8);
            v11 = v30;
          }
          v29[v11] = v7;
          LODWORD(v30) = v30 + 1;
          LODWORD(v25) = 1;
          v24 = 0;
          v27 = &v24;
          v12 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v27, v10);
          v13 = v25;
          if ((v12 & 1) == 0)
          {
            if (v25 >= 0x41 && v24)
              MEMORY[0x20BD002D4](v24, 0x1000C8000313F17);
LABEL_45:
            v22 = *((_QWORD *)a3 + 2);
            if (v22 && mlir::RewriterBase::Listener::classof(v22))
            {
LABEL_22:
              v15 = v18;
              v19 = v29;
              if (v29 == v31)
                return v15;
              goto LABEL_50;
            }
            goto LABEL_48;
          }
          v14 = v24;
          LODWORD(v28) = 1;
          v27 = 0;
          v24 = &v27;
          if (mlir::detail::constant_int_value_binder::match((uint64_t *)&v24, v10))
          {
            LODWORD(v25) = v28;
            v24 = v27;
            v26[0] = 1;
          }
          else
          {
            LOBYTE(v24) = 0;
            v26[0] = 0;
            if (v28 >= 0x41 && v27)
              MEMORY[0x20BD002D4](v27, 0x1000C8000313F17);
          }
          v20 = v25;
          if (v25 >= 0x41)
          {
            if (v20 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v24) > 0x40)
            {
              v21 = 0;
              if (!v26[0])
                goto LABEL_40;
            }
            else
            {
              v21 = *(_QWORD *)v24 == 1;
              if (!v26[0])
              {
LABEL_40:
                if (v13 >= 0x41 && v14)
                  MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
                if (v21)
                {
                  v24 = *(void **)(*v29 + 24);
                  mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&v24, (mlir::MLIRContext *)1, 0);
                }
                goto LABEL_45;
              }
            }
          }
          else
          {
            v21 = v24 == (void *)1;
            if (!v26[0])
              goto LABEL_40;
          }
          if (v20 >= 0x41 && v24)
            MEMORY[0x20BD002D4](v24, 0x1000C8000313F17);
          goto LABEL_40;
        }
      }
    }
    v15 = *((_QWORD *)a3 + 2);
    if (!v15)
      goto LABEL_49;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_48;
    v16 = *(_QWORD *)(v7 + 24);
LABEL_21:
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v15 + 64))(v15, v16, v17, &v24);
    goto LABEL_22;
  }
  v15 = *((_QWORD *)a3 + 2);
  if (!v15)
    goto LABEL_49;
  if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
  {
    v16 = *((_QWORD *)v5 + 3);
    goto LABEL_21;
  }
LABEL_48:
  v15 = 0;
LABEL_49:
  v19 = v29;
  if (v29 != v31)
LABEL_50:
    free(v19);
  return v15;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::CmpIOp,mlir::arith::CmpIPredicate &,mlir::Value &,mlir::Value &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.cmpi", (const unsigned __int8 *)0xA, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"arith.cmpi";
    v19[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::arith::CmpIOp::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ExtSIOp,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  unint64_t *v13;
  ZinIrHalH13g *v14;
  ZinIrHalH13g *v15;
  uint64_t v17;
  const char *v18;
  __int16 v19;
  uint64_t v20[4];
  __int16 v21;
  unint64_t v22[2];
  unint64_t v23[2];
  _QWORD v24[39];

  v24[38] = *MEMORY[0x24BDAC8D0];
  v17 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.extsi", (const unsigned __int8 *)0xB, Context);
  if (!v12)
  {
    v21 = 1283;
    v20[2] = (uint64_t)"arith.extsi";
    v20[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  mlir::ValueRange::ValueRange(v23, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  v13 = mlir::ValueRange::ValueRange(v22, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)v13, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((_QWORD *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
    v15 = v14;
  else
    v15 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v15;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::MulSIExtendedRHSOne::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::MulSIExtendedRHSOne::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "::mlir::success(::mlir::matchPattern(op1->getResult(0), ::mlir::m_Constant(&arg1_0))) return ::mlir::failure";
  v14 = 108;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::MulSIExtendedRHSOne::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'c1' failed to satisfy constraint: ''";
  v14 = 46;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::MulUIExtendedOp::fold(mlir::arith::MulUIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulUIExtendedOp::fold(mlir::arith::MulUIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()(uint64_t a1, llvm::APInt *this, llvm::APInt *a3)
{
  unsigned int v5;
  const unint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;

  v5 = *((_DWORD *)this + 2);
  llvm::APInt::zext(this, 2 * v5, (uint64_t)&v8);
  llvm::APInt::zext(a3, 2 * v5, (uint64_t)&v6);
  llvm::APInt::operator*((uint64_t)&v8, &v6, (uint64_t)&v10);
  if (v7 >= 0x41 && v6)
    MEMORY[0x20BD002D4](v6, 0x1000C8000313F17);
  if (v9 >= 0x41 && v8)
    MEMORY[0x20BD002D4](v8, 0x1000C8000313F17);
  llvm::APInt::extractBits((llvm::APInt *)&v10, v5, v5, (uint64_t)&v8);
  if (v11 >= 0x41 && v10)
    MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  *(_DWORD *)(a1 + 8) = v9;
  *(_QWORD *)a1 = v8;
  *(_BYTE *)(a1 + 16) = 1;
}

void `anonymous namespace'::MulUIExtendedToMulI::~MulUIExtendedToMulI(_anonymous_namespace_::MulUIExtendedToMulI *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::MulUIExtendedToMulI::matchAndRewrite(_anonymous_namespace_::MulUIExtendedToMulI *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  mlir::Operation *v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v17[0] = a2;
  v16 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulUIExtendedOp,void>::id)
    v5 = a2;
  else
    v5 = 0;
  v6 = *((_DWORD *)v5 + 9);
  v7 = (char *)v5 - 16;
  if (v6)
    v8 = (uint64_t)v7;
  else
    v8 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 1);
  if (!*(_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, 0))
  {
    v14 = *(void **)(*v15 + 24);
    mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)&v14, (mlir::MLIRContext *)1, 0);
  }
  v10 = (uint64_t)a3[2];
  if (v10 && mlir::RewriterBase::Listener::classof(v10))
  {
    v12 = v15;
    if (v15 == v17)
      return v11;
    goto LABEL_13;
  }
  v11 = 0;
  v12 = v15;
  if (v15 != v17)
LABEL_13:
    free(v12);
  return v11;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::MulUIExtendedToMulI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'res__1' failed to satisfy constraint: ''";
  v14 = 50;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::CeilDivUIOp::fold(mlir::arith::CeilDivUIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::CeilDivUIOp::fold(mlir::arith::CeilDivUIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()(uint64_t a1, BOOL **a2, llvm::APInt *a3, llvm::APInt *a4)
{
  BOOL *v7;
  unsigned int v8;
  unsigned int v9;
  const void *v10;
  int v11;
  const void *v12;
  unsigned int v13;
  const void *v14;
  unsigned int v15;
  const void *v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  const void *v20;
  unsigned int v21;

  v15 = *((_DWORD *)a3 + 2);
  if (v15 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v14, (const void **)a3);
    v7 = *a2;
    if (**a2)
      goto LABEL_12;
  }
  else
  {
    v14 = *(const void **)a3;
    v7 = *a2;
    if (**a2)
      goto LABEL_12;
  }
  v8 = *((_DWORD *)a4 + 2);
  if (v8 <= 0x40)
  {
    if (*(_QWORD *)a4)
      goto LABEL_7;
LABEL_12:
    *v7 = 1;
    v10 = v14;
    *(_DWORD *)(a1 + 8) = v15;
    *(_QWORD *)a1 = v10;
    *(_BYTE *)(a1 + 16) = 1;
    return;
  }
  if (llvm::APInt::countLeadingZerosSlowCase(a4) == v8)
    goto LABEL_12;
LABEL_7:
  llvm::APInt::udiv(&v14, a4, (uint64_t)&v20);
  llvm::APInt::urem(&v14, a4, (uint64_t)&v18);
  v9 = v19;
  if (v19 > 0x40)
  {
    v11 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v18);
    if (v18)
      MEMORY[0x20BD002D4](v18, 0x1000C8000313F17);
    if (v11 != v9)
      goto LABEL_9;
  }
  else if (v18)
  {
LABEL_9:
    v19 = v15;
    if (v15 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v18, 1, 1);
    else
      v18 = v15 != 0;
    llvm::APInt::uadd_ov(&v20, (uint64_t **)&v18, *a2, (uint64_t)&v16);
    if (v19 >= 0x41 && v18)
      MEMORY[0x20BD002D4](v18, 0x1000C8000313F17);
    if (v21 >= 0x41 && v20)
      MEMORY[0x20BD002D4](v20, 0x1000C8000313F17);
    goto LABEL_25;
  }
  v17 = v21;
  v16 = v20;
LABEL_25:
  v12 = v16;
  v13 = v15;
  *(_DWORD *)(a1 + 8) = v17;
  *(_QWORD *)a1 = v12;
  v17 = 0;
  *(_BYTE *)(a1 + 16) = 1;
  if (v13 >= 0x41)
  {
    if (v14)
      MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
}

const void *mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::CeilDivSIOp::fold(mlir::arith::CeilDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::CeilDivSIOp::fold(mlir::arith::CeilDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()(const void *result, BOOL **a2, llvm::APInt *a3, llvm::APInt *this)
{
  uint64_t v6;
  BOOL *v7;
  unsigned int v8;
  unsigned int v9;
  const void *v10;
  int v11;
  int v12;
  BOOL v13;
  BOOL *v14;
  const void **v15;
  const llvm::APInt *v16;
  uint64_t v17;
  unsigned int v18;
  const void *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  BOOL v23[8];
  unsigned int v24;
  const void *v25;
  unsigned int v26;
  const void *v27;
  unsigned int v28;

  v6 = (uint64_t)result;
  v20 = *((_DWORD *)a3 + 2);
  if (v20 > 0x40)
  {
    result = llvm::APInt::initSlowCase((llvm::APInt *)&v19, (const void **)a3);
    v7 = *a2;
    if (**a2)
      goto LABEL_11;
  }
  else
  {
    v19 = *(const void **)a3;
    v7 = *a2;
    if (**a2)
      goto LABEL_11;
  }
  v8 = *((_DWORD *)this + 2);
  if (v8 <= 0x40)
  {
    if (*(_QWORD *)this)
      goto LABEL_7;
LABEL_11:
    *v7 = 1;
    v9 = v20;
    goto LABEL_12;
  }
  result = (const void *)llvm::APInt::countLeadingZerosSlowCase(this);
  if ((_DWORD)result == v8)
    goto LABEL_11;
LABEL_7:
  v9 = v20;
  if (v20 <= 0x40)
  {
    v10 = v19;
    if (v19)
    {
      v28 = v20;
      v27 = 0;
      goto LABEL_17;
    }
LABEL_13:
    *(_DWORD *)(v6 + 8) = v9;
    *(_QWORD *)v6 = v10;
    *(_BYTE *)(v6 + 16) = 1;
    return result;
  }
  result = (const void *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v19);
  if ((_DWORD)result == v9)
  {
LABEL_12:
    v10 = v19;
    goto LABEL_13;
  }
  v28 = v9;
  llvm::APInt::initSlowCase((llvm::APInt *)&v27, 0, 0);
LABEL_17:
  v11 = llvm::APInt::compareSigned((llvm::APInt *)&v19, (const llvm::APInt *)&v27);
  v12 = llvm::APInt::compareSigned(this, (const llvm::APInt *)&v27);
  v13 = v12 < 1;
  if (v11 < 1 || v12 < 1)
  {
    if (v11 > 0 || v12 > 0)
    {
      if (v11 > 0)
        v13 = 1;
      if (v13)
      {
        llvm::APInt::ssub_ov(&v27, this, *a2, (uint64_t)&v25);
        v14 = *a2;
        v15 = &v19;
        v16 = (const llvm::APInt *)&v25;
      }
      else
      {
        llvm::APInt::ssub_ov(&v27, (const llvm::APInt *)&v19, *a2, (uint64_t)&v25);
        v14 = *a2;
        v15 = &v25;
        v16 = this;
      }
      llvm::APInt::sdiv_ov(v15, v16, v14, (uint64_t)v23);
      result = llvm::APInt::ssub_ov(&v27, (const llvm::APInt *)v23, *a2, (uint64_t)&v21);
    }
    else
    {
      llvm::APInt::ssub_ov(&v27, (const llvm::APInt *)&v19, *a2, (uint64_t)&v25);
      llvm::APInt::ssub_ov(&v27, this, *a2, (uint64_t)v23);
      result = signedCeilNonnegInputs((const llvm::APInt *)&v21, (const llvm::APInt *)&v25, (const llvm::APInt *)v23, *a2);
    }
    if (v24 >= 0x41)
    {
      result = *(const void **)v23;
      if (*(_QWORD *)v23)
        result = (const void *)MEMORY[0x20BD002D4](*(_QWORD *)v23, 0x1000C8000313F17);
    }
    if (v26 >= 0x41)
    {
      result = v25;
      if (v25)
        result = (const void *)MEMORY[0x20BD002D4](v25, 0x1000C8000313F17);
    }
  }
  else
  {
    result = signedCeilNonnegInputs((const llvm::APInt *)&v21, (const llvm::APInt *)&v19, this, *a2);
  }
  if (v28 >= 0x41)
  {
    result = v27;
    if (v27)
      result = (const void *)MEMORY[0x20BD002D4](v27, 0x1000C8000313F17);
  }
  v17 = v21;
  v18 = v20;
  *(_DWORD *)(v6 + 8) = v22;
  *(_QWORD *)v6 = v17;
  v22 = 0;
  *(_BYTE *)(v6 + 16) = 1;
  if (v18 >= 0x41)
  {
    result = v19;
    if (v19)
      return (const void *)MEMORY[0x20BD002D4](v19, 0x1000C8000313F17);
  }
  return result;
}

const void **signedCeilNonnegInputs(const llvm::APInt *a1, const llvm::APInt *this, const llvm::APInt *a3, BOOL *a4)
{
  unsigned int v8;
  const void **result;
  const void *v10;
  unsigned int v11;
  const void **v12;
  unsigned int v13;
  _BOOL8 v14;
  unsigned int v15;

  v8 = *((_DWORD *)this + 2);
  v15 = v8;
  if (v8 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v14, 1, 1);
  else
    v14 = v8 != 0;
  llvm::APInt::ssub_ov((const void **)this, (const llvm::APInt *)&v14, a4, (uint64_t)&v10);
  llvm::APInt::sdiv_ov(&v10, a3, a4, (uint64_t)&v12);
  if (v11 >= 0x41 && v10)
    MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  result = llvm::APInt::sadd_ov((const void **)&v12, (const llvm::APInt *)&v14, a4, (uint64_t)a1);
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = (const void **)MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = (const void **)v14;
    if (v14)
      return (const void **)MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  return result;
}

void mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::FloorDivSIOp::fold(mlir::arith::FloorDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::FloorDivSIOp::fold(mlir::arith::FloorDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()(uint64_t a1, BOOL **a2, llvm::APInt *a3, llvm::APInt *this)
{
  BOOL *v7;
  unsigned int v8;
  unsigned int v9;
  const void *v10;
  int v11;
  int v12;
  BOOL v13;
  BOOL *v14;
  const void **v15;
  const llvm::APInt *v16;
  uint64_t v17;
  unsigned int v18;
  const void *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  const void *v25;
  unsigned int v26;
  const void *v27;
  unsigned int v28;

  v20 = *((_DWORD *)a3 + 2);
  if (v20 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v19, (const void **)a3);
    v7 = *a2;
    if (**a2)
      goto LABEL_11;
  }
  else
  {
    v19 = *(const void **)a3;
    v7 = *a2;
    if (**a2)
      goto LABEL_11;
  }
  v8 = *((_DWORD *)this + 2);
  if (v8 <= 0x40)
  {
    if (*(_QWORD *)this)
      goto LABEL_7;
LABEL_11:
    *v7 = 1;
    v9 = v20;
    goto LABEL_12;
  }
  if (llvm::APInt::countLeadingZerosSlowCase(this) == v8)
    goto LABEL_11;
LABEL_7:
  v9 = v20;
  if (v20 <= 0x40)
  {
    v10 = v19;
    if (v19)
    {
      v28 = v20;
      v27 = 0;
      goto LABEL_17;
    }
LABEL_13:
    *(_DWORD *)(a1 + 8) = v9;
    *(_QWORD *)a1 = v10;
    *(_BYTE *)(a1 + 16) = 1;
    return;
  }
  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v19) == v9)
  {
LABEL_12:
    v10 = v19;
    goto LABEL_13;
  }
  v28 = v9;
  llvm::APInt::initSlowCase((llvm::APInt *)&v27, 0, 0);
LABEL_17:
  v11 = llvm::APInt::compareSigned((llvm::APInt *)&v19, (const llvm::APInt *)&v27);
  v12 = llvm::APInt::compareSigned(this, (const llvm::APInt *)&v27);
  v13 = v12 < 1;
  if (v11 < 1 || v12 < 1)
  {
    if (v11 > 0 || v12 > 0)
    {
      if (v11 > 0)
        v13 = 1;
      if (v13)
      {
        llvm::APInt::ssub_ov(&v27, this, *a2, (uint64_t)&v25);
        v14 = *a2;
        v15 = &v19;
        v16 = (const llvm::APInt *)&v25;
      }
      else
      {
        llvm::APInt::ssub_ov(&v27, (const llvm::APInt *)&v19, *a2, (uint64_t)&v25);
        v14 = *a2;
        v15 = &v25;
        v16 = this;
      }
      signedCeilNonnegInputs((const llvm::APInt *)&v23, (const llvm::APInt *)v15, v16, v14);
      llvm::APInt::ssub_ov(&v27, (const llvm::APInt *)&v23, *a2, (uint64_t)&v21);
    }
    else
    {
      llvm::APInt::ssub_ov(&v27, (const llvm::APInt *)&v19, *a2, (uint64_t)&v25);
      llvm::APInt::ssub_ov(&v27, this, *a2, (uint64_t)&v23);
      llvm::APInt::sdiv_ov(&v25, (const llvm::APInt *)&v23, *a2, (uint64_t)&v21);
    }
    if (v24 >= 0x41 && v23)
      MEMORY[0x20BD002D4](v23, 0x1000C8000313F17);
    if (v26 >= 0x41 && v25)
      MEMORY[0x20BD002D4](v25, 0x1000C8000313F17);
  }
  else
  {
    llvm::APInt::sdiv_ov(&v19, this, *a2, (uint64_t)&v21);
  }
  if (v28 >= 0x41 && v27)
    MEMORY[0x20BD002D4](v27, 0x1000C8000313F17);
  v17 = v21;
  v18 = v20;
  *(_DWORD *)(a1 + 8) = v22;
  *(_QWORD *)a1 = v17;
  v22 = 0;
  *(_BYTE *)(a1 + 16) = 1;
  if (v18 >= 0x41)
  {
    if (v19)
      MEMORY[0x20BD002D4](v19, 0x1000C8000313F17);
  }
}

uint64_t mlir::detail::matchOperandOrValueAtIndex<mlir::detail::constant_int_value_binder>(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  void *v11[2];
  _QWORD v12[2];

  v12[1] = *MEMORY[0x24BDAC8D0];
  v11[0] = *(void **)(*(_QWORD *)(a1 + 72) + 32 * a2 + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)v11);
  if (result)
  {
    v5 = result;
    result = mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(result + 48));
    if ((_DWORD)result)
    {
      v11[0] = v12;
      v11[1] = (void *)0x100000000;
      mlir::Operation::fold(v5, 0, 0, (uint64_t)v11);
      v6 = *(_QWORD *)v11[0] & 0xFFFFFFFFFFFFFFF8;
      if (v11[0] != v12)
        free(v11[0]);
      if (v6)
      {
        v7 = *(void **)(*(_QWORD *)(*(_QWORD *)(v5 - 8) & 0xFFFFFFFFFFFFFFF8) + 136);
        if (v7 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
          || v7 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id
          || v7 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
          || v7 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          return mlir::detail::constant_int_value_binder::match(a3, v6);
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void `anonymous namespace'::XOrINotCmpI::~XOrINotCmpI(_anonymous_namespace_::XOrINotCmpI *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::XOrINotCmpI::matchAndRewrite(_anonymous_namespace_::XOrINotCmpI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  mlir::Operation *v4;
  uint64_t DefiningOp;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 (*v9)(uint64_t, uint64_t);
  uint64_t InherentAttr;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t IntegerType;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *v22;
  void *v24;
  uint64_t v25;
  void *v26[8];
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD v30[6];

  v30[4] = *MEMORY[0x24BDAC8D0];
  v28 = v30;
  v30[0] = a2;
  v29 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id)
    v4 = a2;
  else
    v4 = 0;
  v24 = *(void **)(*((_QWORD *)v4 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp)
  {
    v7 = *((_QWORD *)a3 + 2);
    if (!v7)
      goto LABEL_45;
    if (mlir::RewriterBase::Listener::classof(v7))
    {
      v8 = *((_QWORD *)v4 + 3);
      goto LABEL_35;
    }
    goto LABEL_43;
  }
  v6 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id)
  {
    if (!*(_BYTE *)(DefiningOp + 47)
      || (InherentAttr = mlir::Operation::getInherentAttr(DefiningOp, (uint64_t)"predicate", 9), !v11))
    {
      InherentAttr = mlir::DictionaryAttr::get(v6 + 56, "predicate", 9uLL);
    }
    if (!InherentAttr || (mlir::arith::CmpIPredicateAttr::classof(InherentAttr) & 1) == 0)
    {
      v7 = *((_QWORD *)a3 + 2);
      if (!v7)
        goto LABEL_45;
      if (mlir::RewriterBase::Listener::classof(v7))
      {
        v8 = *(_QWORD *)(v6 + 24);
        goto LABEL_35;
      }
      goto LABEL_43;
    }
    if ((*(_BYTE *)(v6 + 46) & 0x80) != 0)
    {
      v12 = v29;
      if (v29 < HIDWORD(v29))
        goto LABEL_19;
    }
    else
    {
      v12 = v29;
      if (v29 < HIDWORD(v29))
        goto LABEL_19;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v30, v12 + 1, 8);
    LODWORD(v12) = v29;
LABEL_19:
    v28[v12] = v6;
    LODWORD(v29) = v29 + 1;
    v24 = *(void **)(*((_QWORD *)v4 + 9) + 56);
    v13 = mlir::Value::getDefiningOp((mlir::Value *)&v24);
    if (v13)
    {
      v14 = v13;
      v27 = (void **)(v13 - 16);
      v15 = mlir::Value::getDefiningOp((mlir::Value *)&v27);
      if (v15)
      {
        v16 = v15;
        if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(v15 + 48)))
        {
          v24 = v26;
          v25 = 0x100000000;
          mlir::Operation::fold(v16, 0, 0, (uint64_t)&v24);
          v17 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8;
          if (v24 != v26)
            free(v24);
          if (v17)
          {
            v24 = "operand 0 of native code call '::mlir::success(::mlir::matchPattern($_self->getResult(0), ::mlir::m_Co"
                  "nstant(&$0)))' failed to satisfy constraint: 'constant attribute 1'";
            v25 = 169;
            IntegerType = mlir::Builder::getIntegerType((mlir::PatternRewriter *)((char *)a3 + 8), 1u);
            if (v17 == mlir::Builder::getIntegerAttr((uint64_t)a3 + 8, IntegerType, 1)
              || (v27 = &v24, (v19 = *((_QWORD *)a3 + 2)) != 0)
              && mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2))
            {
              v20 = v29;
              if (v29 >= HIDWORD(v29))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v30, v29 + 1, 8);
                v20 = v29;
              }
              v28[v20] = v14;
              LODWORD(v29) = v29 + 1;
              v21 = *(_QWORD *)(v28[1] + 24);
              v24 = *(void **)(*v28 + 24);
              v25 = v21;
              mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&v24, (mlir::MLIRContext *)2, 0);
            }
            goto LABEL_43;
          }
        }
      }
      v7 = *((_QWORD *)a3 + 2);
      if (!v7)
        goto LABEL_45;
      if (mlir::RewriterBase::Listener::classof(v7))
      {
        v8 = *(_QWORD *)(v14 + 24);
        goto LABEL_35;
      }
    }
    else
    {
      v7 = *((_QWORD *)a3 + 2);
      if (!v7)
        goto LABEL_45;
      if (mlir::RewriterBase::Listener::classof(v7))
      {
        v8 = *((_QWORD *)v4 + 3);
LABEL_35:
        v7 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v7 + 64))(v7, v8, v9, &v24);
        v22 = v28;
        if (v28 == v30)
          return v7;
        goto LABEL_46;
      }
    }
LABEL_43:
    v7 = 0;
    v22 = v28;
    if (v28 == v30)
      return v7;
    goto LABEL_46;
  }
  v7 = *((_QWORD *)a3 + 2);
  if (v7)
  {
    if (mlir::RewriterBase::Listener::classof(v7))
    {
      v8 = *(_QWORD *)(v6 + 24);
      goto LABEL_35;
    }
    goto LABEL_43;
  }
LABEL_45:
  v22 = v28;
  if (v28 != v30)
LABEL_46:
    free(v22);
  return v7;
}

uint64_t llvm::SmallVectorImpl<mlir::NamedAttribute>::emplace_back<mlir::StringAttr,mlir::arith::CmpIPredicateAttr &>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
    return llvm::SmallVectorTemplateBase<mlir::NamedAttribute,true>::growAndEmplaceBack<mlir::StringAttr,mlir::arith::CmpIPredicateAttr &>(a1, a2, a3);
  ZinMirCacheTensors::ZinMirCacheTensors((_QWORD *)(*(_QWORD *)a1 + 16 * v4), *a2, *a3);
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  return *(_QWORD *)a1 + 16 * v5 - 16;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::CmpIOp,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  unint64_t *v13;
  ZinIrHalH13g *v14;
  ZinIrHalH13g *v15;
  uint64_t v17;
  const char *v18;
  __int16 v19;
  uint64_t v20[4];
  __int16 v21;
  unint64_t v22[2];
  unint64_t v23[2];
  _QWORD v24[39];

  v24[38] = *MEMORY[0x24BDAC8D0];
  v17 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.cmpi", (const unsigned __int8 *)0xA, Context);
  if (!v12)
  {
    v21 = 1283;
    v20[2] = (uint64_t)"arith.cmpi";
    v20[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  mlir::ValueRange::ValueRange(v23, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  v13 = mlir::ValueRange::ValueRange(v22, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)v13, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((_QWORD *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id)
    v15 = v14;
  else
    v15 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v15;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::XOrINotCmpI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::XOrINotCmpI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::CmpIOp type";
  v14 = 43;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::XOrINotCmpI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "expected op 'arith.cmpi' to have attribute 'predicate' of type '::mlir::arith::CmpIPredicateAttr'";
  v14 = 97;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::XOrINotCmpI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::XOrINotCmpI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "::mlir::success(::mlir::matchPattern(op1->getResult(0), ::mlir::m_Constant(&arg1_0))) return ::mlir::failure";
  v14 = 108;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::__mlir_ods_local_attr_constraint_ArithCanonicalization3(mlir::PatternRewriter &,mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(const void ****a1, uint64_t a2)
{
  const void **v2;
  const void **v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __n128 *v8;
  __n128 *v9;
  __n128 result;
  unint64_t v11;
  BOOL v12;
  char *v13;
  const void **v14[4];
  __int16 v15;
  int v16;
  const char *v17;
  uint64_t v18;

  v3 = **a1;
  v2 = (*a1)[1];
  v15 = 261;
  v14[0] = v3;
  v14[1] = v2;
  v4 = mlir::Diagnostic::operator<<(a2, v14);
  v5 = v4 + 16;
  v6 = *(_QWORD *)(v4 + 16);
  v16 = 3;
  v17 = ": constant attribute 1";
  v18 = 22;
  v7 = *(unsigned int *)(v4 + 24);
  v8 = (__n128 *)&v16;
  if (v7 >= *(_DWORD *)(v4 + 28))
  {
    v11 = v7 + 1;
    v12 = v6 + 24 * v7 > (unint64_t)&v16;
    if (v6 <= (unint64_t)&v16 && v12)
    {
      v13 = (char *)&v16 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v4 + 32), v11, 24);
      v6 = *(_QWORD *)(v4 + 16);
      v8 = (__n128 *)&v13[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v4 + 32), v11, 24);
      v6 = *(_QWORD *)(v4 + 16);
      v8 = (__n128 *)&v16;
    }
  }
  v9 = (__n128 *)(v6 + 24 * *(unsigned int *)(v4 + 24));
  result = *v8;
  v9[1].n128_u64[0] = v8[1].n128_u64[0];
  *v9 = result;
  ++*(_DWORD *)(v4 + 24);
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<mlir::NamedAttribute,true>::growAndEmplaceBack<mlir::StringAttr,mlir::arith::CmpIPredicateAttr &>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  __int128 v4;
  uint64_t v5;
  unsigned int v6;
  __int128 v8;
  __int128 v9;

  ZinMirCacheTensors::ZinMirCacheTensors(&v9, *a2, *a3);
  v4 = v9;
  v5 = *(unsigned int *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v9;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5 + 1, 16);
    v4 = v8;
    LODWORD(v5) = *(_DWORD *)(a1 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a1 + 16 * v5) = v4;
  v6 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v6;
  return *(_QWORD *)a1 + 16 * v6 - 16;
}

void `anonymous namespace'::XOrIOfExtUI::~XOrIOfExtUI(_anonymous_namespace_::XOrIOfExtUI *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::XOrIOfExtUI::matchAndRewrite(_anonymous_namespace_::XOrIOfExtUI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v5;
  mlir::Operation *v6;
  uint64_t DefiningOp;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v23;
  void *v24[10];
  _QWORD *v25;
  uint64_t v26;
  _QWORD v27[6];

  v27[4] = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
    v5 = *((_QWORD *)a2 + 9);
  else
    v5 = 0;
  v25 = v27;
  v27[0] = a2;
  v26 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v24[0] = *(void **)(*((_QWORD *)v6 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (!DefiningOp)
  {
    v11 = *((_QWORD *)a3 + 2);
    if (!v11)
      goto LABEL_38;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_37;
    v12 = *((_QWORD *)v6 + 3);
    goto LABEL_27;
  }
  v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
  {
    if ((*(_BYTE *)(DefiningOp + 46) & 0x80) == 0)
    {
      v10 = 0;
      v14 = v26;
      if (v26 < HIDWORD(v26))
        goto LABEL_18;
      goto LABEL_44;
    }
    v10 = *(_QWORD *)(DefiningOp + 72);
  }
  else
  {
    v9 = *((_QWORD *)a3 + 2);
    if (!v9)
      goto LABEL_37;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_37;
    v10 = v5;
  }
  v14 = v26;
  if (v26 < HIDWORD(v26))
    goto LABEL_18;
LABEL_44:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v14 + 1, 8);
  LODWORD(v14) = v26;
LABEL_18:
  v25[v14] = v8;
  LODWORD(v26) = v26 + 1;
  v24[0] = *(void **)(*((_QWORD *)v6 + 9) + 56);
  v15 = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (v15)
  {
    v16 = v15;
    if (*(_UNKNOWN **)(*(_QWORD *)(v15 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
    {
      if ((*(_BYTE *)(v15 + 46) & 0x80) == 0)
      {
        v5 = 0;
        v20 = v26;
        if (v26 < HIDWORD(v26))
          goto LABEL_33;
        goto LABEL_46;
      }
      v5 = *(_QWORD *)(v15 + 72);
    }
    else
    {
      v17 = *((_QWORD *)a3 + 2);
      if (!v17
        || !mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2))
      {
        goto LABEL_37;
      }
    }
    v20 = v26;
    if (v26 < HIDWORD(v26))
    {
LABEL_33:
      v25[v20] = v16;
      LODWORD(v26) = v26 + 1;
      if ((*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        v23 = *(void **)(v25[1] + 24);
        v24[0] = *(void **)(*v25 + 24);
        v24[1] = v23;
        v24[2] = *(void **)(v25[2] + 24);
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v24, (mlir::MLIRContext *)3, 0);
      }
      v21 = *((_QWORD *)a3 + 2);
      if (!v21 || !mlir::RewriterBase::Listener::classof(v21))
        goto LABEL_37;
LABEL_28:
      v11 = v18;
      v19 = v25;
      if (v25 == v27)
        return v11;
      goto LABEL_39;
    }
LABEL_46:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v20 + 1, 8);
    LODWORD(v20) = v26;
    goto LABEL_33;
  }
  v11 = *((_QWORD *)a3 + 2);
  if (!v11)
    goto LABEL_38;
  if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
  {
    v12 = *((_QWORD *)v6 + 3);
LABEL_27:
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v11 + 64))(v11, v12, v13, v24);
    goto LABEL_28;
  }
LABEL_37:
  v11 = 0;
LABEL_38:
  v19 = v25;
  if (v25 != v27)
LABEL_39:
    free(v19);
  return v11;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::XOrIOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t *v11;
  ZinIrHalH13g *v12;
  ZinIrHalH13g *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  unint64_t v20[2];
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.xori", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"arith.xori";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = mlir::ValueRange::ValueRange(v20, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ExtUIOp,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  unint64_t *v13;
  ZinIrHalH13g *v14;
  ZinIrHalH13g *v15;
  uint64_t v17;
  const char *v18;
  __int16 v19;
  uint64_t v20[4];
  __int16 v21;
  unint64_t v22[2];
  unint64_t v23[2];
  _QWORD v24[39];

  v24[38] = *MEMORY[0x24BDAC8D0];
  v17 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.extui", (const unsigned __int8 *)0xB, Context);
  if (!v12)
  {
    v21 = 1283;
    v20[2] = (uint64_t)"arith.extui";
    v20[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  mlir::ValueRange::ValueRange(v23, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  v13 = mlir::ValueRange::ValueRange(v22, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)v13, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((_QWORD *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
    v15 = v14;
  else
    v15 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v15;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::XOrIOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::static_dag_matcher_8(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::ExtUIOp type";
  v14 = 44;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::XOrIOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::static_dag_matcher_9(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::ExtUIOp type";
  v14 = 44;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::XOrIOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'x, y' failed to satisfy constraint: ''";
  v14 = 48;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::XOrIOfExtSI::~XOrIOfExtSI(_anonymous_namespace_::XOrIOfExtSI *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::XOrIOfExtSI::matchAndRewrite(_anonymous_namespace_::XOrIOfExtSI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v5;
  mlir::Operation *v6;
  uint64_t DefiningOp;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v23;
  void *v24[10];
  _QWORD *v25;
  uint64_t v26;
  _QWORD v27[6];

  v27[4] = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
    v5 = *((_QWORD *)a2 + 9);
  else
    v5 = 0;
  v25 = v27;
  v27[0] = a2;
  v26 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v24[0] = *(void **)(*((_QWORD *)v6 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (!DefiningOp)
  {
    v11 = *((_QWORD *)a3 + 2);
    if (!v11)
      goto LABEL_38;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_37;
    v12 = *((_QWORD *)v6 + 3);
    goto LABEL_27;
  }
  v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
  {
    if ((*(_BYTE *)(DefiningOp + 46) & 0x80) == 0)
    {
      v10 = 0;
      v14 = v26;
      if (v26 < HIDWORD(v26))
        goto LABEL_18;
      goto LABEL_44;
    }
    v10 = *(_QWORD *)(DefiningOp + 72);
  }
  else
  {
    v9 = *((_QWORD *)a3 + 2);
    if (!v9)
      goto LABEL_37;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_37;
    v10 = v5;
  }
  v14 = v26;
  if (v26 < HIDWORD(v26))
    goto LABEL_18;
LABEL_44:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v14 + 1, 8);
  LODWORD(v14) = v26;
LABEL_18:
  v25[v14] = v8;
  LODWORD(v26) = v26 + 1;
  v24[0] = *(void **)(*((_QWORD *)v6 + 9) + 56);
  v15 = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (v15)
  {
    v16 = v15;
    if (*(_UNKNOWN **)(*(_QWORD *)(v15 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
    {
      if ((*(_BYTE *)(v15 + 46) & 0x80) == 0)
      {
        v5 = 0;
        v20 = v26;
        if (v26 < HIDWORD(v26))
          goto LABEL_33;
        goto LABEL_46;
      }
      v5 = *(_QWORD *)(v15 + 72);
    }
    else
    {
      v17 = *((_QWORD *)a3 + 2);
      if (!v17
        || !mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2))
      {
        goto LABEL_37;
      }
    }
    v20 = v26;
    if (v26 < HIDWORD(v26))
    {
LABEL_33:
      v25[v20] = v16;
      LODWORD(v26) = v26 + 1;
      if ((*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        v23 = *(void **)(v25[1] + 24);
        v24[0] = *(void **)(*v25 + 24);
        v24[1] = v23;
        v24[2] = *(void **)(v25[2] + 24);
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v24, (mlir::MLIRContext *)3, 0);
      }
      v21 = *((_QWORD *)a3 + 2);
      if (!v21 || !mlir::RewriterBase::Listener::classof(v21))
        goto LABEL_37;
LABEL_28:
      v11 = v18;
      v19 = v25;
      if (v25 == v27)
        return v11;
      goto LABEL_39;
    }
LABEL_46:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v20 + 1, 8);
    LODWORD(v20) = v26;
    goto LABEL_33;
  }
  v11 = *((_QWORD *)a3 + 2);
  if (!v11)
    goto LABEL_38;
  if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
  {
    v12 = *((_QWORD *)v6 + 3);
LABEL_27:
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v11 + 64))(v11, v12, v13, v24);
    goto LABEL_28;
  }
LABEL_37:
  v11 = 0;
LABEL_38:
  v19 = v25;
  if (v25 != v27)
LABEL_39:
    free(v19);
  return v11;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::XOrIOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::static_dag_matcher_6(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::ExtSIOp type";
  v14 = 44;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::XOrIOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::static_dag_matcher_7(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::ExtSIOp type";
  v14 = 44;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::XOrIOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'x, y' failed to satisfy constraint: ''";
  v14 = 48;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void mlir::constFoldUnaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::NegFOp::fold(mlir::arith::NegFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::NegFOp::fold(mlir::arith::NegFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat)#1}::operator()(_BYTE *a1, uint64_t a2)
{
  const llvm::detail::DoubleAPFloat *v3;
  void *v4;
  void *v5;
  llvm::detail::DoubleAPFloat *v6;
  _QWORD *v7;
  _QWORD v8[4];

  v8[3] = *MEMORY[0x24BDAC8D0];
  v3 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  v4 = *(void **)(a2 + 8);
  v5 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v5 == v4)
  {
    v6 = (llvm::detail::DoubleAPFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v8, v3);
    if (v5 != (void *)v8[0])
    {
LABEL_3:
      llvm::detail::IEEEFloat::changeSign(v6);
      v7 = a1 + 8;
      if (v5 != (void *)v8[0])
        goto LABEL_4;
LABEL_9:
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v7, v8);
      a1[32] = 1;
      if (v5 != (void *)v8[0])
        goto LABEL_5;
LABEL_10:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v8);
      return;
    }
  }
  else
  {
    v6 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v8, v3);
    if (v5 != (void *)v8[0])
      goto LABEL_3;
  }
  llvm::detail::DoubleAPFloat::changeSign(v6);
  v7 = a1 + 8;
  if (v5 == (void *)v8[0])
    goto LABEL_9;
LABEL_4:
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v7, (uint64_t)v8);
  a1[32] = 1;
  if (v5 == (void *)v8[0])
    goto LABEL_10;
LABEL_5:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v8);
}

uint64_t mlir::ElementsAttr::try_value_begin<llvm::APFloat>@<X0>(mlir::BranchOpInterface *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  uint64_t result;
  char v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  mlir::BranchOpInterface *v18;
  const char *v19;
  unint64_t v20;
  char v21;

  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v18 = a1;
    v4 = (_QWORD *)&unk_25451A000;
    v10 = v9;
    a1 = v18;
    if (v10)
    {
      v19 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APFloat]";
      v20 = 63;
      v11 = llvm::StringRef::find((uint64_t *)&v19, "DesiredTypeName = ", 0x12uLL, 0);
      if (v20 >= v11)
        v12 = v11;
      else
        v12 = v20;
      v13 = &v19[v12];
      v14 = v20 - v12;
      if (v20 - v12 >= 0x12)
        v15 = 18;
      else
        v15 = v20 - v12;
      v16 = v14 - v15;
      if (v16 >= v16 - 1)
        v17 = v16 - 1;
      else
        v17 = v16;
      mlir::detail::TypeIDResolver<llvm::APFloat,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
      v4 = (_QWORD *)&unk_25451A000;
      a1 = v18;
    }
  }
  result = mlir::BranchOpInterface::getSuccessorOperands(a1, v4[270]);
  if (v21)
  {
    v6 = BYTE1(v19);
    if ((_BYTE)v19)
    {
      v7 = v20;
      *(_BYTE *)a2 = (_BYTE)v19;
      *(_BYTE *)(a2 + 1) = v6;
      *(_QWORD *)(a2 + 8) = v7;
    }
    else
    {
      v8 = v20;
      v20 = 0;
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 1) = v6;
      *(_QWORD *)(a2 + 8) = v8;
    }
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  return result;
}

void llvm::SmallVectorTemplateBase<llvm::APFloat,false>::moveElementsForGrow(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::detail::DoubleAPFloat *v13;

  v2 = a1[2];
  if ((_DWORD)v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
    v7 = (_QWORD *)(a2 + 8);
    v8 = 32 * v2;
    v9 = (void **)(v5 + 8);
    do
    {
      while (v6 == *v9)
      {
        v7 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v7, v9) + 4;
        v9 += 4;
        v8 -= 32;
        if (!v8)
          goto LABEL_6;
      }
      v7 = (_QWORD *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v7, (uint64_t)v9) + 32);
      v9 += 4;
      v8 -= 32;
    }
    while (v8);
LABEL_6:
    v10 = a1[2];
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)a1 - 24;
      v12 = 32 * v10;
      do
      {
        while (1)
        {
          v13 = (llvm::detail::DoubleAPFloat *)(v11 + v12);
          if (v6 != *(void **)(v11 + v12))
            break;
          llvm::detail::DoubleAPFloat::~DoubleAPFloat(v13);
          v12 -= 32;
          if (!v12)
            return;
        }
        llvm::detail::IEEEFloat::~IEEEFloat(v13);
        v12 -= 32;
      }
      while (v12);
    }
  }
}

char *llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress(unsigned int *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  unsigned int *v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  char *v15;
  unsigned int v16;
  unint64_t v17;

  v3 = a2;
  v4 = a1[2];
  v5 = v4 + a3;
  if (v5 > a1[3])
  {
    v8 = *(_QWORD *)a1 + 32 * v4;
    if (*(_QWORD *)a1 <= a2 && v8 > a2)
    {
      v13 = (uint64_t)(a2 - *(_QWORD *)a1) >> 5;
      v17 = 0;
      v14 = a1 + 4;
      v15 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a1 + 4, v5, 32, &v17);
      llvm::SmallVectorTemplateBase<llvm::APFloat,false>::moveElementsForGrow(a1, (uint64_t)v15);
      v16 = v17;
      if (*(unsigned int **)a1 != v14)
        free(*(void **)a1);
      *(_QWORD *)a1 = v15;
      a1[3] = v16;
      return &v15[32 * v13];
    }
    else
    {
      v17 = 0;
      v10 = a1 + 4;
      v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a1 + 4, v5, 32, &v17);
      llvm::SmallVectorTemplateBase<llvm::APFloat,false>::moveElementsForGrow(a1, (uint64_t)v11);
      v12 = v17;
      if (*(unsigned int **)a1 != v10)
        free(*(void **)a1);
      *(_QWORD *)a1 = v11;
      a1[3] = v12;
    }
  }
  return (char *)v3;
}

uint64_t mlir::detail::constant_float_predicate_matcher::match(llvm::APFloatBase *a1, uint64_t a2)
{
  llvm::APFloatBase *v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  _BYTE *v8;
  _BYTE v9[8];
  uint64_t v10[4];

  v10[3] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::APFloatBase *)llvm::APFloatBase::Bogus(a1);
  v5 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v4);
  if (v5 != v4)
  {
    llvm::detail::IEEEFloat::IEEEFloat(v10, (uint64_t)v4);
    v8 = v9;
    if (mlir::detail::constant_float_value_binder::match((uint64_t *)&v8, a2))
      goto LABEL_3;
LABEL_7:
    v6 = 0;
    if (v5 != (llvm::APFloatBase *)v10[0])
      goto LABEL_4;
LABEL_8:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v10);
    return v6;
  }
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, (uint64_t)v4);
  v8 = v9;
  if (!mlir::detail::constant_float_value_binder::match((uint64_t *)&v8, a2))
    goto LABEL_7;
LABEL_3:
  v6 = (*(uint64_t (**)(_BYTE *))a1)(v9);
  if (v5 == (llvm::APFloatBase *)v10[0])
    goto LABEL_8;
LABEL_4:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v10);
  return v6;
}

llvm::APFloatBase *llvm::APFloat::APFloat(llvm::APFloatBase *a1, void *a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)((char *)a1 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == a2)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v4, (uint64_t)a2);
  else
    llvm::detail::IEEEFloat::IEEEFloat(v4, (uint64_t)a2);
  return a1;
}

uint64_t mlir::detail::constant_float_value_binder::match(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t NumElements;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  llvm::APFloatBase *v14;
  void *v15;
  llvm::APFloatBase *v16;
  void *v17;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(void **)(*(_QWORD *)a2 + 136);
  v4 = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
  v5 = v3 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
  if (v3 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v20[0] = v6;
  if (v5)
  {
    mlir::FloatAttr::getValue((mlir::FloatAttr *)v20, (uint64_t)&v21);
    v16 = llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(v2 + 8), (llvm::APFloatBase *)v22);
    v17 = (void *)v22[0];
    if (llvm::APFloatBase::PPCDoubleDouble(v16) == v17)
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v22);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v22);
    return 1;
  }
  else
  {
    if (mlir::DenseElementsAttr::classof(a2))
      v8 = a2;
    else
      v8 = 0;
    v21 = v8;
    if (v8)
    {
      v8 = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v21) ? a2 : 0;
      v19 = v8;
      if (v8)
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v19);
        ZinMirCacheTensors::ZinMirCacheTensors(&v21, v19, 0);
        v9 = v19;
        NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v19);
        ZinMirCacheTensors::ZinMirCacheTensors(v20, v9, NumElements);
        v11 = mlir::DenseElementsAttr::AttributeElementIterator::operator*(&v21);
        v12 = *(_QWORD *)(*(_QWORD *)v11 + 136) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
        LODWORD(v4) = v12;
        if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
          v13 = v11;
        else
          v13 = 0;
        v20[0] = v13;
        if (v12)
        {
          mlir::FloatAttr::getValue((mlir::FloatAttr *)v20, (uint64_t)&v21);
          v14 = llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(v2 + 8), (llvm::APFloatBase *)v22);
          v15 = (void *)v22[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v14) == v15)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v22);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v22);
        }
        LODWORD(v8) = 1;
      }
    }
    return v8 & v4;
  }
}

llvm::APFloatBase *llvm::APFloat::Storage::operator=(llvm::APFloatBase *a1, llvm::APFloatBase *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v8;
  _QWORD *v9;

  v4 = *(void **)a1;
  v5 = llvm::APFloatBase::PPCDoubleDouble(a1);
  v6 = *(void **)a2;
  if (v5 != v4 && v5 != v6)
  {
    llvm::detail::IEEEFloat::operator=((uint64_t)a1, (uint64_t)a2);
    return a1;
  }
  v8 = v5;
  if (v5 != v4)
  {
    if (a1 == a2)
      return a1;
    llvm::detail::IEEEFloat::~IEEEFloat(a1);
    if (v8 == *(void **)a2)
      goto LABEL_17;
LABEL_14:
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v9, (uint64_t)a2);
    return a1;
  }
  if (v4 == v6)
  {
    if (a1 == a2)
      return a1;
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(a1);
  }
  else
  {
    if (a1 == a2)
      return a1;
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(a1);
    if (v8 != *(void **)a2)
      goto LABEL_14;
  }
LABEL_17:
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v9, a2);
  return a1;
}

void mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::AddFOp::fold(mlir::arith::AddFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::AddFOp::fold(mlir::arith::AddFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  const llvm::detail::DoubleAPFloat *v5;
  void *v6;
  void *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v5 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  v6 = *(void **)(a2 + 8);
  v7 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v7 == v6)
  {
    v8 = (unsigned __int8 *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v5);
    v9 = (unsigned __int8 *)(a3 + 8);
    if (v7 != (void *)v11[0])
    {
LABEL_3:
      llvm::detail::IEEEFloat::add(v8, v9, 1);
      v10 = a1 + 8;
      if (v7 != (void *)v11[0])
        goto LABEL_4;
LABEL_9:
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v11);
      a1[32] = 1;
      if (v7 != (void *)v11[0])
        goto LABEL_5;
LABEL_10:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v11);
      return;
    }
  }
  else
  {
    v8 = (unsigned __int8 *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v11, v5);
    v9 = (unsigned __int8 *)(a3 + 8);
    if (v7 != (void *)v11[0])
      goto LABEL_3;
  }
  llvm::detail::DoubleAPFloat::add((uint64_t *)v8, (uint64_t *)v9, 1);
  v10 = a1 + 8;
  if (v7 == (void *)v11[0])
    goto LABEL_9;
LABEL_4:
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)v11);
  a1[32] = 1;
  if (v7 == (void *)v11[0])
    goto LABEL_10;
LABEL_5:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v11);
}

void mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  const llvm::detail::DoubleAPFloat *v5;
  void *v6;
  void *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v5 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  v6 = *(void **)(a2 + 8);
  v7 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v7 == v6)
  {
    v8 = (unsigned __int8 *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v5);
    v9 = (unsigned __int8 *)(a3 + 8);
    if (v7 != (void *)v11[0])
    {
LABEL_3:
      llvm::detail::IEEEFloat::subtract(v8, v9, 1);
      v10 = a1 + 8;
      if (v7 != (void *)v11[0])
        goto LABEL_4;
LABEL_9:
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v11);
      a1[32] = 1;
      if (v7 != (void *)v11[0])
        goto LABEL_5;
LABEL_10:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v11);
      return;
    }
  }
  else
  {
    v8 = (unsigned __int8 *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v11, v5);
    v9 = (unsigned __int8 *)(a3 + 8);
    if (v7 != (void *)v11[0])
      goto LABEL_3;
  }
  llvm::detail::DoubleAPFloat::subtract((llvm::detail::DoubleAPFloat *)v8, (uint64_t *)v9, 1);
  v10 = a1 + 8;
  if (v7 == (void *)v11[0])
    goto LABEL_9;
LABEL_4:
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)v11);
  a1[32] = 1;
  if (v7 == (void *)v11[0])
    goto LABEL_10;
LABEL_5:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v11);
}

_QWORD *llvm::maximum@<X0>(llvm *this@<X0>, const llvm::APFloat *a2@<X1>, uint64_t a3@<X8>)
{
  llvm::detail::DoubleAPFloat *v7;
  void *v8;
  void *v9;
  void *v10;
  llvm::detail::IEEEFloat *v11;
  const llvm::detail::DoubleAPFloat *v12;
  void *v13;
  llvm *v15;
  unsigned int v16;
  const llvm::APFloat *v17;
  char v18;
  llvm *v19;
  void *v20;
  int v21;
  llvm *v22;
  void *v23;

  v7 = (llvm *)((char *)this + 8);
  v8 = (void *)*((_QWORD *)this + 1);
  v9 = llvm::APFloatBase::PPCDoubleDouble(this);
  v10 = v9;
  if (v9 == v8)
  {
    if ((*(_BYTE *)(*((_QWORD *)this + 2) + 28) & 7) == 1)
    {
      v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
      v12 = v7;
      return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
    }
  }
  else if ((*((_BYTE *)this + 28) & 7) == 1)
  {
    v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    v12 = v7;
    return (_QWORD *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
  }
  v12 = (const llvm::APFloat *)((char *)a2 + 8);
  v13 = (void *)*((_QWORD *)a2 + 1);
  if (v9 == v13)
  {
    if ((*(_BYTE *)(*((_QWORD *)a2 + 2) + 28) & 7) == 1)
    {
      v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
      return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
    }
  }
  else if ((*((_BYTE *)a2 + 28) & 7) == 1)
  {
    v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    return (_QWORD *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
  }
  v15 = (llvm *)*((_QWORD *)this + 2);
  if (v9 != v8)
    v15 = this;
  v16 = *((unsigned __int8 *)v15 + 28);
  if ((v16 & 7) == 3
    && (v9 != v13 ? (v17 = a2) : (v17 = (const llvm::APFloat *)*((_QWORD *)a2 + 2)),
        (v18 = *((_BYTE *)v17 + 28), (v18 & 7) == 3) && ((v16 >> 3) & 1) != (v18 & 8) >> 3))
  {
    if ((v16 & 8) != 0)
      v19 = a2;
    else
      v19 = this;
    v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    v20 = (void *)*((_QWORD *)v19 + 1);
    v12 = (llvm *)((char *)v19 + 8);
    if (v10 != v20)
      return (_QWORD *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
  }
  else
  {
    if (v9 == v8)
      llvm::detail::DoubleAPFloat::compare(v7, v12);
    else
      llvm::detail::IEEEFloat::compare(v7, v12);
    if (v21)
      v22 = this;
    else
      v22 = a2;
    v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    v23 = (void *)*((_QWORD *)v22 + 1);
    v12 = (llvm *)((char *)v22 + 8);
    if (v10 != v23)
      return (_QWORD *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
  }
  return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
}

BOOL llvm::APFloat::operator<(_QWORD *a1, uint64_t a2)
{
  llvm::detail::DoubleAPFloat *v3;
  void *v4;
  void *v5;
  const llvm::detail::DoubleAPFloat *v6;
  int v7;

  v3 = (llvm::detail::DoubleAPFloat *)(a1 + 1);
  v4 = (void *)a1[1];
  v5 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  v6 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v5 == v4)
    llvm::detail::DoubleAPFloat::compare(v3, v6);
  else
    llvm::detail::IEEEFloat::compare(v3, v6);
  return v7 == 0;
}

_QWORD *llvm::minimum@<X0>(llvm *this@<X0>, const llvm::APFloat *a2@<X1>, uint64_t a3@<X8>)
{
  const llvm::detail::DoubleAPFloat *v7;
  void *v8;
  void *v9;
  void *v10;
  llvm::detail::IEEEFloat *v11;
  const llvm::detail::DoubleAPFloat *v12;
  void *v13;
  llvm *v15;
  unsigned int v16;
  const llvm::APFloat *v17;
  char v18;
  llvm *v19;
  void *v20;
  llvm::detail::DoubleAPFloat *v21;
  int v22;
  llvm *v23;
  void *v24;
  int v25;
  llvm *v26;
  void *v27;

  v7 = (llvm *)((char *)this + 8);
  v8 = (void *)*((_QWORD *)this + 1);
  v9 = llvm::APFloatBase::PPCDoubleDouble(this);
  v10 = v9;
  if (v9 == v8)
  {
    if ((*(_BYTE *)(*((_QWORD *)this + 2) + 28) & 7) == 1)
    {
      v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
      v12 = v7;
      return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
    }
  }
  else if ((*((_BYTE *)this + 28) & 7) == 1)
  {
    v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    v12 = v7;
    return (_QWORD *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
  }
  v12 = (const llvm::APFloat *)((char *)a2 + 8);
  v13 = (void *)*((_QWORD *)a2 + 1);
  if (v9 == v13)
  {
    if ((*(_BYTE *)(*((_QWORD *)a2 + 2) + 28) & 7) == 1)
    {
      v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
      return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
    }
  }
  else if ((*((_BYTE *)a2 + 28) & 7) == 1)
  {
    v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    return (_QWORD *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
  }
  v15 = (llvm *)*((_QWORD *)this + 2);
  if (v9 != v8)
    v15 = this;
  v16 = *((unsigned __int8 *)v15 + 28);
  if ((v16 & 7) != 3)
    goto LABEL_25;
  v17 = (const llvm::APFloat *)*((_QWORD *)a2 + 2);
  if (v9 != v13)
    v17 = a2;
  v18 = *((_BYTE *)v17 + 28);
  if ((v18 & 7) == 3 && ((v16 >> 3) & 1) != (v18 & 8) >> 3)
  {
    if ((v16 & 8) != 0)
      v19 = this;
    else
      v19 = a2;
    v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    v20 = (void *)*((_QWORD *)v19 + 1);
    v12 = (llvm *)((char *)v19 + 8);
    if (v10 != v20)
      return (_QWORD *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
  }
  else
  {
LABEL_25:
    v21 = (const llvm::APFloat *)((char *)a2 + 8);
    if (v10 == v13)
    {
      llvm::detail::DoubleAPFloat::compare(v21, v7);
      if (v25)
        v26 = this;
      else
        v26 = a2;
      v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
      v27 = (void *)*((_QWORD *)v26 + 1);
      v12 = (llvm *)((char *)v26 + 8);
      if (v10 != v27)
        return (_QWORD *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
    }
    else
    {
      llvm::detail::IEEEFloat::compare(v21, v7);
      if (v22)
        v23 = this;
      else
        v23 = a2;
      v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
      v24 = (void *)*((_QWORD *)v23 + 1);
      v12 = (llvm *)((char *)v23 + 8);
      if (v10 != v24)
        return (_QWORD *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
    }
  }
  return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
}

_QWORD *llvm::minnum@<X0>(llvm *this@<X0>, const llvm::APFloat *a2@<X1>, uint64_t a3@<X8>)
{
  const llvm::detail::DoubleAPFloat *v7;
  void *v8;
  void *v9;
  llvm *v10;
  llvm::detail::IEEEFloat *v11;
  const llvm::detail::IEEEFloat *v12;
  llvm::detail::DoubleAPFloat *v14;
  int v15;
  llvm *v16;
  void *v17;

  v7 = (llvm *)((char *)this + 8);
  v8 = (void *)*((_QWORD *)this + 1);
  v9 = llvm::APFloatBase::PPCDoubleDouble(this);
  v10 = (llvm *)*((_QWORD *)this + 2);
  if (v9 != v8)
    v10 = this;
  if ((*((_BYTE *)v10 + 28) & 7) != 1)
  {
    v14 = (const llvm::APFloat *)((char *)a2 + 8);
    if (v9 == *((void **)a2 + 1))
    {
      if ((*(_BYTE *)(*((_QWORD *)a2 + 2) + 28) & 7) != 1)
      {
        llvm::detail::DoubleAPFloat::compare(v14, v7);
LABEL_13:
        if (v15)
          v16 = this;
        else
          v16 = a2;
        v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
        v17 = (void *)*((_QWORD *)v16 + 1);
        v12 = (llvm *)((char *)v16 + 8);
        if (v9 != v17)
          return (_QWORD *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
        return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
      }
    }
    else if ((*((_BYTE *)a2 + 28) & 7) != 1)
    {
      llvm::detail::IEEEFloat::compare(v14, v7);
      goto LABEL_13;
    }
    v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    v12 = v7;
    if (v9 != v8)
      return (_QWORD *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
    return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
  }
  v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
  v12 = (const llvm::APFloat *)((char *)a2 + 8);
  if (v9 != *((void **)a2 + 1))
    return (_QWORD *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
  return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
}

void mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  const llvm::detail::DoubleAPFloat *v5;
  void *v6;
  void *v7;
  llvm::detail::IEEEFloat *v8;
  const llvm::detail::IEEEFloat *v9;
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v5 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  v6 = *(void **)(a2 + 8);
  v7 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v7 == v6)
  {
    v8 = (llvm::detail::IEEEFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v5);
    v9 = (const llvm::detail::IEEEFloat *)(a3 + 8);
    if (v7 != (void *)v11[0])
    {
LABEL_3:
      llvm::detail::IEEEFloat::multiply(v8, v9, 1);
      v10 = a1 + 8;
      if (v7 != (void *)v11[0])
        goto LABEL_4;
LABEL_9:
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v11);
      a1[32] = 1;
      if (v7 != (void *)v11[0])
        goto LABEL_5;
LABEL_10:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v11);
      return;
    }
  }
  else
  {
    v8 = (llvm::detail::IEEEFloat *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v11, v5);
    v9 = (const llvm::detail::IEEEFloat *)(a3 + 8);
    if (v7 != (void *)v11[0])
      goto LABEL_3;
  }
  llvm::detail::DoubleAPFloat::multiply(v8, (uint64_t *)v9, 1);
  v10 = a1 + 8;
  if (v7 == (void *)v11[0])
    goto LABEL_9;
LABEL_4:
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)v11);
  a1[32] = 1;
  if (v7 == (void *)v11[0])
    goto LABEL_10;
LABEL_5:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v11);
}

void `anonymous namespace'::MulFOfNegF::~MulFOfNegF(_anonymous_namespace_::MulFOfNegF *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::MulFOfNegF::matchAndRewrite(_anonymous_namespace_::MulFOfNegF *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v5;
  uint64_t v6;
  mlir::Operation *v7;
  uint64_t DefiningOp;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t InherentAttr;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 (*v20)(uint64_t, uint64_t);
  void *v21;
  void *v23;
  _QWORD v24[2];
  _QWORD v25[2];
  void *v26[10];
  _QWORD *v27;
  uint64_t v28;
  _QWORD v29[6];

  v29[4] = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    v5 = *((_QWORD *)a2 + 9);
    v6 = *((unsigned int *)a2 + 17);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v25[0] = v5;
  v25[1] = v6;
  v24[0] = v5;
  v24[1] = v6;
  v27 = v29;
  v29[0] = a2;
  v28 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulFOp,void>::id)
    v7 = a2;
  else
    v7 = 0;
  v26[0] = *(void **)(*((_QWORD *)v7 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v26);
  if (!DefiningOp)
  {
    v18 = *((_QWORD *)a3 + 2);
    if (!v18)
      goto LABEL_34;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_33;
    v19 = *((_QWORD *)v7 + 3);
LABEL_30:
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v18 + 64))(v18, v19, v20, v26);
LABEL_31:
    v18 = v17;
    v21 = v27;
    if (v27 == v29)
      return v18;
    goto LABEL_35;
  }
  v9 = DefiningOp;
  {
    v10 = v28;
    if (v28 >= HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 8);
      v10 = v28;
    }
    v27[v10] = v9;
    LODWORD(v28) = v28 + 1;
    v26[0] = *(void **)(*((_QWORD *)v7 + 9) + 56);
    v11 = mlir::Value::getDefiningOp((mlir::Value *)v26);
    if (v11)
    {
      v12 = v11;
      {
        v13 = v28;
        if (v28 >= HIDWORD(v28))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 8);
          v13 = v28;
        }
        v27[v13] = v12;
        LODWORD(v28) = v28 + 1;
        if (!*((_BYTE *)a2 + 47)
          || (InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"fastmath", 8), !v15))
        {
          InherentAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "fastmath", 8uLL);
        }
        if (!InherentAttr
          || *(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id)
        {
          mlir::arith::FastMathFlagsAttr::get(*((mlir::MLIRContext **)a3 + 1), 0);
        }
        if ((*(_QWORD *)(*(_QWORD *)(v24[0] + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)(v25[0] + 24)
                                                                                                  + 8) & 0xFFFFFFFFFFFFFFF8))
        {
          v23 = *(void **)(v27[1] + 24);
          v26[0] = *(void **)(*v27 + 24);
          v26[1] = v23;
          v26[2] = *(void **)(v27[2] + 24);
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v26, (mlir::MLIRContext *)3, 0);
        }
        v16 = *((_QWORD *)a3 + 2);
        if (v16)
        {
          if (mlir::RewriterBase::Listener::classof(v16))
          {
            goto LABEL_31;
          }
        }
      }
      goto LABEL_33;
    }
    v18 = *((_QWORD *)a3 + 2);
    if (!v18)
      goto LABEL_34;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v19 = *((_QWORD *)v7 + 3);
      goto LABEL_30;
    }
  }
LABEL_33:
  v18 = 0;
LABEL_34:
  v21 = v27;
  if (v27 != v29)
LABEL_35:
    free(v21);
  return v18;
}

uint64_t `anonymous namespace'::static_dag_matcher_10(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t InherentAttr;
  char v6;
  uint64_t v7;
  uint64_t result;
  char v9;

  if (a2 && *(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::NegFOp,void>::id)
  {
    if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    {
      *a3 = *(_QWORD *)(a2 + 72);
      a3[1] = 1;
      if (!*(_BYTE *)(a2 + 47))
        goto LABEL_14;
    }
    else
    {
      *a3 = 0;
      a3[1] = 1;
      if (!*(_BYTE *)(a2 + 47))
        goto LABEL_14;
    }
    InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"fastmath", 8);
    if (v6)
    {
      if (!InherentAttr)
        goto LABEL_16;
LABEL_15:
      if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id)
        return 1;
LABEL_16:
      mlir::arith::FastMathFlagsAttr::get(*(mlir::MLIRContext **)(a1 + 8), 0);
      return 1;
    }
LABEL_14:
    InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "fastmath", 8uLL);
    if (!InherentAttr)
      goto LABEL_16;
    goto LABEL_15;
  }
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v7);
  if ((_DWORD)result)
  return result;
}

uint64_t `anonymous namespace'::static_dag_matcher_11(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t InherentAttr;
  char v6;
  uint64_t v7;
  uint64_t result;
  char v9;

  if (a2 && *(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::NegFOp,void>::id)
  {
    if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    {
      *a3 = *(_QWORD *)(a2 + 72);
      a3[1] = 1;
      if (!*(_BYTE *)(a2 + 47))
        goto LABEL_14;
    }
    else
    {
      *a3 = 0;
      a3[1] = 1;
      if (!*(_BYTE *)(a2 + 47))
        goto LABEL_14;
    }
    InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"fastmath", 8);
    if (v6)
    {
      if (!InherentAttr)
        goto LABEL_16;
LABEL_15:
      if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id)
        return 1;
LABEL_16:
      mlir::arith::FastMathFlagsAttr::get(*(mlir::MLIRContext **)(a1 + 8), 0);
      return 1;
    }
LABEL_14:
    InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "fastmath", 8uLL);
    if (!InherentAttr)
      goto LABEL_16;
    goto LABEL_15;
  }
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v7);
  if ((_DWORD)result)
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::MulFOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t *v11;
  ZinIrHalH13g *v12;
  ZinIrHalH13g *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  unint64_t v20[2];
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.mulf", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"arith.mulf";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = mlir::ValueRange::ValueRange(v20, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulFOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::MulFOfNegF::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::static_dag_matcher_10(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::NegFOp type";
  v14 = 43;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::MulFOfNegF::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::static_dag_matcher_11(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::NegFOp type";
  v14 = 43;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::MulFOfNegF::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'x, y' failed to satisfy constraint: ''";
  v14 = 48;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  const llvm::detail::DoubleAPFloat *v5;
  void *v6;
  void *v7;
  llvm::detail::IEEEFloat *v8;
  const llvm::detail::IEEEFloat *v9;
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v5 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  v6 = *(void **)(a2 + 8);
  v7 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v7 == v6)
  {
    v8 = (llvm::detail::IEEEFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v5);
    v9 = (const llvm::detail::IEEEFloat *)(a3 + 8);
    if (v7 != (void *)v11[0])
    {
LABEL_3:
      llvm::detail::IEEEFloat::divide(v8, v9, 1);
      v10 = a1 + 8;
      if (v7 != (void *)v11[0])
        goto LABEL_4;
LABEL_9:
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v11);
      a1[32] = 1;
      if (v7 != (void *)v11[0])
        goto LABEL_5;
LABEL_10:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v11);
      return;
    }
  }
  else
  {
    v8 = (llvm::detail::IEEEFloat *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v11, v5);
    v9 = (const llvm::detail::IEEEFloat *)(a3 + 8);
    if (v7 != (void *)v11[0])
      goto LABEL_3;
  }
  llvm::detail::DoubleAPFloat::divide(v8, v9, 1);
  v10 = a1 + 8;
  if (v7 == (void *)v11[0])
    goto LABEL_9;
LABEL_4:
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)v11);
  a1[32] = 1;
  if (v7 == (void *)v11[0])
    goto LABEL_10;
LABEL_5:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v11);
}

void `anonymous namespace'::DivFOfNegF::~DivFOfNegF(_anonymous_namespace_::DivFOfNegF *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::DivFOfNegF::matchAndRewrite(_anonymous_namespace_::DivFOfNegF *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v5;
  uint64_t v6;
  mlir::Operation *v7;
  uint64_t DefiningOp;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t InherentAttr;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 (*v20)(uint64_t, uint64_t);
  void *v21;
  void *v23;
  _QWORD v24[2];
  _QWORD v25[2];
  void *v26[10];
  _QWORD *v27;
  uint64_t v28;
  _QWORD v29[6];

  v29[4] = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    v5 = *((_QWORD *)a2 + 9);
    v6 = *((unsigned int *)a2 + 17);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v25[0] = v5;
  v25[1] = v6;
  v24[0] = v5;
  v24[1] = v6;
  v27 = v29;
  v29[0] = a2;
  v28 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::DivFOp,void>::id)
    v7 = a2;
  else
    v7 = 0;
  v26[0] = *(void **)(*((_QWORD *)v7 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v26);
  if (!DefiningOp)
  {
    v18 = *((_QWORD *)a3 + 2);
    if (!v18)
      goto LABEL_34;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_33;
    v19 = *((_QWORD *)v7 + 3);
LABEL_30:
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v18 + 64))(v18, v19, v20, v26);
LABEL_31:
    v18 = v17;
    v21 = v27;
    if (v27 == v29)
      return v18;
    goto LABEL_35;
  }
  v9 = DefiningOp;
  {
    v10 = v28;
    if (v28 >= HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 8);
      v10 = v28;
    }
    v27[v10] = v9;
    LODWORD(v28) = v28 + 1;
    v26[0] = *(void **)(*((_QWORD *)v7 + 9) + 56);
    v11 = mlir::Value::getDefiningOp((mlir::Value *)v26);
    if (v11)
    {
      v12 = v11;
      {
        v13 = v28;
        if (v28 >= HIDWORD(v28))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 8);
          v13 = v28;
        }
        v27[v13] = v12;
        LODWORD(v28) = v28 + 1;
        if (!*((_BYTE *)a2 + 47)
          || (InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"fastmath", 8), !v15))
        {
          InherentAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "fastmath", 8uLL);
        }
        if (!InherentAttr
          || *(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id)
        {
          mlir::arith::FastMathFlagsAttr::get(*((mlir::MLIRContext **)a3 + 1), 0);
        }
        if ((*(_QWORD *)(*(_QWORD *)(v24[0] + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)(v25[0] + 24)
                                                                                                  + 8) & 0xFFFFFFFFFFFFFFF8))
        {
          v23 = *(void **)(v27[1] + 24);
          v26[0] = *(void **)(*v27 + 24);
          v26[1] = v23;
          v26[2] = *(void **)(v27[2] + 24);
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v26, (mlir::MLIRContext *)3, 0);
        }
        v16 = *((_QWORD *)a3 + 2);
        if (v16)
        {
          if (mlir::RewriterBase::Listener::classof(v16))
          {
            goto LABEL_31;
          }
        }
      }
      goto LABEL_33;
    }
    v18 = *((_QWORD *)a3 + 2);
    if (!v18)
      goto LABEL_34;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v19 = *((_QWORD *)v7 + 3);
      goto LABEL_30;
    }
  }
LABEL_33:
  v18 = 0;
LABEL_34:
  v21 = v27;
  if (v27 != v29)
LABEL_35:
    free(v21);
  return v18;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::DivFOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t *v11;
  ZinIrHalH13g *v12;
  ZinIrHalH13g *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  unint64_t v20[2];
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.divf", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"arith.divf";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = mlir::ValueRange::ValueRange(v20, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::DivFOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::DivFOfNegF::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::DivFOfNegF::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::DivFOfNegF::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'x, y' failed to satisfy constraint: ''";
  v14 = 48;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  const llvm::detail::DoubleAPFloat *v5;
  void *v6;
  void *v7;
  __int128 **v8;
  const llvm::detail::IEEEFloat *v9;
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v5 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  v6 = *(void **)(a2 + 8);
  v7 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v7 == v6)
  {
    v8 = (__int128 **)llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v5);
    v9 = (const llvm::detail::IEEEFloat *)(a3 + 8);
    if (v7 != (void *)v11[0])
    {
LABEL_3:
      llvm::detail::IEEEFloat::remainder(v8, v9);
      v10 = a1 + 8;
      if (v7 != (void *)v11[0])
        goto LABEL_4;
LABEL_9:
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v11);
      a1[32] = 1;
      if (v7 != (void *)v11[0])
        goto LABEL_5;
LABEL_10:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v11);
      return;
    }
  }
  else
  {
    v8 = (__int128 **)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v11, v5);
    v9 = (const llvm::detail::IEEEFloat *)(a3 + 8);
    if (v7 != (void *)v11[0])
      goto LABEL_3;
  }
  llvm::detail::DoubleAPFloat::remainder((llvm::detail::DoubleAPFloat *)v8, v9);
  v10 = a1 + 8;
  if (v7 == (void *)v11[0])
    goto LABEL_9;
LABEL_4:
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)v11);
  a1[32] = 1;
  if (v7 == (void *)v11[0])
    goto LABEL_10;
LABEL_5:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v11);
}

void `anonymous namespace'::ExtSIOfExtUI::~ExtSIOfExtUI(_anonymous_namespace_::ExtSIOfExtUI *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::ExtSIOfExtUI::matchAndRewrite(_anonymous_namespace_::ExtSIOfExtUI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  mlir::Operation *v4;
  uint64_t DefiningOp;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v13[2];
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[6];

  v16[4] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v16[0] = a2;
  v15 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
    v4 = a2;
  else
    v4 = 0;
  v13[0] = *(void **)(*((_QWORD *)v4 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v13);
  if (DefiningOp)
  {
    v6 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
    {
      if ((*(_BYTE *)(DefiningOp + 46) & 0x80) == 0)
      {
        v10 = v15;
        if (v15 < HIDWORD(v15))
          goto LABEL_18;
        goto LABEL_23;
      }
    }
    else
    {
      v7 = *((_QWORD *)a3 + 2);
      if (!v7
        || !mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2))
      {
LABEL_14:
        v8 = 0;
        v9 = v14;
        if (v14 == v16)
          return v8;
        goto LABEL_20;
      }
    }
    v10 = v15;
    if (v15 < HIDWORD(v15))
      goto LABEL_18;
LABEL_23:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, v16, v10 + 1, 8);
    LODWORD(v10) = v15;
LABEL_18:
    v14[v10] = v6;
    LODWORD(v15) = v15 + 1;
    v11 = *(void **)(v14[1] + 24);
    v13[0] = *(void **)(*v14 + 24);
    v13[1] = v11;
    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v13, (mlir::MLIRContext *)2, 0);
  }
  v8 = *((_QWORD *)a3 + 2);
  if (v8)
  {
    if (mlir::RewriterBase::Listener::classof(v8))
    {
      v9 = v14;
      if (v14 == v16)
        return v8;
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  v9 = v14;
  if (v14 != v16)
LABEL_20:
    free(v9);
  return v8;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::ExtSIOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::TruncIExtSIToExtSI::~TruncIExtSIToExtSI(_anonymous_namespace_::TruncIExtSIToExtSI *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::TruncIExtSIToExtSI::matchAndRewrite(_anonymous_namespace_::TruncIExtSIToExtSI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  mlir::Operation *v5;
  uint64_t DefiningOp;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t NextResultAtOffset;
  uint64_t IntOrFloatBitWidth;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 (*v26)(uint64_t, uint64_t);
  void *v27;
  uint64_t v28;
  void *v29;
  void *v31[2];
  _QWORD *v32;
  uint64_t v33;
  _QWORD v34[6];

  v34[4] = *MEMORY[0x24BDAC8D0];
  v32 = v34;
  v34[0] = a2;
  v33 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::TruncIOp,void>::id)
    v5 = a2;
  else
    v5 = 0;
  v31[0] = *(void **)(*((_QWORD *)v5 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v31);
  if (!DefiningOp)
  {
    v8 = *((_QWORD *)a3 + 2);
    if (!v8)
      goto LABEL_56;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v9 = *((_QWORD *)v5 + 3);
      goto LABEL_12;
    }
    goto LABEL_55;
  }
  v7 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
  {
    v8 = *((_QWORD *)a3 + 2);
    if (!v8)
      goto LABEL_56;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v9 = *(_QWORD *)(v7 + 24);
LABEL_12:
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v8 + 64))(v8, v9, v10, v31);
      goto LABEL_42;
    }
    goto LABEL_55;
  }
  if ((*(_BYTE *)(DefiningOp + 46) & 0x80) != 0)
  {
    v12 = *(_QWORD *)(DefiningOp + 72);
    v13 = v33;
    if (v33 < HIDWORD(v33))
      goto LABEL_15;
  }
  else
  {
    v12 = 0;
    v13 = v33;
    if (v33 < HIDWORD(v33))
      goto LABEL_15;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v13 + 1, 8);
  LODWORD(v13) = v33;
LABEL_15:
  v32[v13] = v7;
  LODWORD(v33) = v33 + 1;
  if (*(_DWORD *)(v7 + 36))
    v14 = v7 - 16;
  else
    v14 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0);
  v31[0] = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)v31))
    IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31);
  else
    IntOrFloatBitWidth = -1;
  if (*((_DWORD *)v5 + 9))
    v17 = (uint64_t)v5 - 16;
  else
    v17 = 0;
  v18 = mlir::detail::OpResultImpl::getNextResultAtOffset(v17, 0);
  v31[0] = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)v31))
  {
    if (IntOrFloatBitWidth <= mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31))
      goto LABEL_38;
  }
  else if (IntOrFloatBitWidth <= -1)
  {
    goto LABEL_38;
  }
  if (*((_DWORD *)v5 + 9))
    v19 = (uint64_t)v5 - 16;
  else
    v19 = 0;
  v20 = mlir::detail::OpResultImpl::getNextResultAtOffset(v19, 0);
  v31[0] = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8));
  if (!mlir::Type::isIntOrFloat((mlir::Type *)v31)
    || !mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31))
  {
LABEL_38:
    v24 = *((_QWORD *)a3 + 2);
    if (v24 && mlir::RewriterBase::Listener::classof(v24))
    {
      v25 = *((_QWORD *)a2 + 3);
LABEL_41:
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v24 + 64))(v24, v25, v26, v31);
LABEL_42:
      v8 = v11;
      v27 = v32;
      if (v32 == v34)
        return v8;
      goto LABEL_57;
    }
    goto LABEL_55;
  }
  if (*((_DWORD *)v5 + 9))
    v21 = (uint64_t)v5 - 16;
  else
    v21 = 0;
  v22 = mlir::detail::OpResultImpl::getNextResultAtOffset(v21, 0);
  v31[0] = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)v31))
    v23 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31);
  else
    v23 = -1;
  v31[0] = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)v31))
    v28 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31);
  else
    v28 = -1;
  if (v23 > v28)
  {
    v31[0] = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
    if (mlir::Type::isIntOrFloat((mlir::Type *)v31))
    {
      if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31))
      {
        v29 = *(void **)(v32[1] + 24);
        v31[0] = *(void **)(*v32 + 24);
        v31[1] = v29;
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v31, (mlir::MLIRContext *)2, 0);
      }
    }
  }
  v24 = *((_QWORD *)a3 + 2);
  if (v24 && mlir::RewriterBase::Listener::classof(v24))
  {
    v25 = *((_QWORD *)a2 + 3);
    goto LABEL_41;
  }
LABEL_55:
  v8 = 0;
LABEL_56:
  v27 = v32;
  if (v32 != v34)
LABEL_57:
    free(v27);
  return v8;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIExtSIToExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIExtSIToExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::ExtSIOp type";
  v14 = 44;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIExtSIToExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'ext, tr' failed to satisfy constraint: ''";
  v14 = 51;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIExtSIToExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'tr, x' failed to satisfy constraint: ''";
  v14 = 49;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::TruncIExtUIToExtUI::~TruncIExtUIToExtUI(_anonymous_namespace_::TruncIExtUIToExtUI *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::TruncIExtUIToExtUI::matchAndRewrite(_anonymous_namespace_::TruncIExtUIToExtUI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  mlir::Operation *v5;
  uint64_t DefiningOp;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t NextResultAtOffset;
  uint64_t IntOrFloatBitWidth;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 (*v26)(uint64_t, uint64_t);
  void *v27;
  uint64_t v28;
  void *v29;
  void *v31[2];
  _QWORD *v32;
  uint64_t v33;
  _QWORD v34[6];

  v34[4] = *MEMORY[0x24BDAC8D0];
  v32 = v34;
  v34[0] = a2;
  v33 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::TruncIOp,void>::id)
    v5 = a2;
  else
    v5 = 0;
  v31[0] = *(void **)(*((_QWORD *)v5 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v31);
  if (!DefiningOp)
  {
    v8 = *((_QWORD *)a3 + 2);
    if (!v8)
      goto LABEL_56;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v9 = *((_QWORD *)v5 + 3);
      goto LABEL_12;
    }
    goto LABEL_55;
  }
  v7 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
  {
    v8 = *((_QWORD *)a3 + 2);
    if (!v8)
      goto LABEL_56;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v9 = *(_QWORD *)(v7 + 24);
LABEL_12:
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v8 + 64))(v8, v9, v10, v31);
      goto LABEL_42;
    }
    goto LABEL_55;
  }
  if ((*(_BYTE *)(DefiningOp + 46) & 0x80) != 0)
  {
    v12 = *(_QWORD *)(DefiningOp + 72);
    v13 = v33;
    if (v33 < HIDWORD(v33))
      goto LABEL_15;
  }
  else
  {
    v12 = 0;
    v13 = v33;
    if (v33 < HIDWORD(v33))
      goto LABEL_15;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v13 + 1, 8);
  LODWORD(v13) = v33;
LABEL_15:
  v32[v13] = v7;
  LODWORD(v33) = v33 + 1;
  if (*(_DWORD *)(v7 + 36))
    v14 = v7 - 16;
  else
    v14 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0);
  v31[0] = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)v31))
    IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31);
  else
    IntOrFloatBitWidth = -1;
  if (*((_DWORD *)v5 + 9))
    v17 = (uint64_t)v5 - 16;
  else
    v17 = 0;
  v18 = mlir::detail::OpResultImpl::getNextResultAtOffset(v17, 0);
  v31[0] = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)v31))
  {
    if (IntOrFloatBitWidth <= mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31))
      goto LABEL_38;
  }
  else if (IntOrFloatBitWidth <= -1)
  {
    goto LABEL_38;
  }
  if (*((_DWORD *)v5 + 9))
    v19 = (uint64_t)v5 - 16;
  else
    v19 = 0;
  v20 = mlir::detail::OpResultImpl::getNextResultAtOffset(v19, 0);
  v31[0] = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8));
  if (!mlir::Type::isIntOrFloat((mlir::Type *)v31)
    || !mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31))
  {
LABEL_38:
    v24 = *((_QWORD *)a3 + 2);
    if (v24 && mlir::RewriterBase::Listener::classof(v24))
    {
      v25 = *((_QWORD *)a2 + 3);
LABEL_41:
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v24 + 64))(v24, v25, v26, v31);
LABEL_42:
      v8 = v11;
      v27 = v32;
      if (v32 == v34)
        return v8;
      goto LABEL_57;
    }
    goto LABEL_55;
  }
  if (*((_DWORD *)v5 + 9))
    v21 = (uint64_t)v5 - 16;
  else
    v21 = 0;
  v22 = mlir::detail::OpResultImpl::getNextResultAtOffset(v21, 0);
  v31[0] = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)v31))
    v23 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31);
  else
    v23 = -1;
  v31[0] = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)v31))
    v28 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31);
  else
    v28 = -1;
  if (v23 > v28)
  {
    v31[0] = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
    if (mlir::Type::isIntOrFloat((mlir::Type *)v31))
    {
      if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31))
      {
        v29 = *(void **)(v32[1] + 24);
        v31[0] = *(void **)(*v32 + 24);
        v31[1] = v29;
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v31, (mlir::MLIRContext *)2, 0);
      }
    }
  }
  v24 = *((_QWORD *)a3 + 2);
  if (v24 && mlir::RewriterBase::Listener::classof(v24))
  {
    v25 = *((_QWORD *)a2 + 3);
    goto LABEL_41;
  }
LABEL_55:
  v8 = 0;
LABEL_56:
  v27 = v32;
  if (v32 != v34)
LABEL_57:
    free(v27);
  return v8;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIExtUIToExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIExtUIToExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::ExtUIOp type";
  v14 = 44;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIExtUIToExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'ext, tr' failed to satisfy constraint: ''";
  v14 = 51;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIExtUIToExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'tr, x' failed to satisfy constraint: ''";
  v14 = 49;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::TruncIShrSIToTrunciShrUI::~TruncIShrSIToTrunciShrUI(_anonymous_namespace_::TruncIShrSIToTrunciShrUI *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::TruncIShrSIToTrunciShrUI::matchAndRewrite(_anonymous_namespace_::TruncIShrSIToTrunciShrUI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  mlir::Operation *v5;
  uint64_t DefiningOp;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  void *v21;
  uint64_t IntOrFloatBitWidth;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t NextResultAtOffset;
  uint64_t v28;
  unsigned int v29;
  _QWORD *p_ElementTypeOrSelf;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  void *v35;
  void *ElementTypeOrSelf;
  uint64_t v37;
  _BYTE v38[64];
  void **v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD v43[6];

  v43[4] = *MEMORY[0x24BDAC8D0];
  v41 = v43;
  v43[0] = a2;
  v42 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::TruncIOp,void>::id)
    v5 = a2;
  else
    v5 = 0;
  ElementTypeOrSelf = *(void **)(*((_QWORD *)v5 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!DefiningOp)
  {
    v8 = *((_QWORD *)a3 + 2);
    if (!v8)
      goto LABEL_73;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v9 = *((_QWORD *)v5 + 3);
      goto LABEL_32;
    }
    goto LABEL_72;
  }
  v7 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ShRSIOp,void>::id)
  {
    v8 = *((_QWORD *)a3 + 2);
    if (!v8)
      goto LABEL_73;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v9 = *(_QWORD *)(v7 + 24);
LABEL_32:
      v23 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v8 + 64))(v8, v9, v10, &ElementTypeOrSelf);
      goto LABEL_33;
    }
    goto LABEL_72;
  }
  v11 = *(_QWORD *)(DefiningOp + 72);
  ElementTypeOrSelf = *(void **)(v11 + 56);
  v12 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v12)
  {
    v8 = *((_QWORD *)a3 + 2);
    if (!v8)
      goto LABEL_73;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v9 = *(_QWORD *)(v7 + 24);
      goto LABEL_32;
    }
    goto LABEL_72;
  }
  v13 = v12;
  v39 = (void **)(v12 - 16);
  v14 = mlir::Value::getDefiningOp((mlir::Value *)&v39);
  if (!v14)
    goto LABEL_26;
  v15 = v14;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(v14 + 48)))
    goto LABEL_26;
  ElementTypeOrSelf = v38;
  v37 = 0x100000000;
  mlir::Operation::fold(v15, 0, 0, (uint64_t)&ElementTypeOrSelf);
  v16 = (_QWORD *)(*(_QWORD *)ElementTypeOrSelf & 0xFFFFFFFFFFFFFFF8);
  if (ElementTypeOrSelf != v38)
    free(ElementTypeOrSelf);
  if (!v16)
  {
LABEL_26:
    v8 = *((_QWORD *)a3 + 2);
    if (!v8)
      goto LABEL_73;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v9 = *(_QWORD *)(v13 + 24);
      goto LABEL_32;
    }
    goto LABEL_72;
  }
  ElementTypeOrSelf = "operand 0 of native code call '::mlir::success(::mlir::matchPattern($_self->getResult(0), ::mlir::"
                      "m_Constant(&$0)))' failed to satisfy constraint: 'TypedAttr instance'";
  v37 = 167;
  if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v16 + 8)
    || (v39 = &ElementTypeOrSelf, (v25 = *((_QWORD *)a3 + 2)) != 0)
    && mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2))
  {
    v17 = v42;
    if (v42 >= HIDWORD(v42))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v43, v42 + 1, 8);
      v17 = v42;
    }
    v41[v17] = v13;
    v18 = (v42 + 1);
    LODWORD(v42) = v18;
    if (v18 >= HIDWORD(v42))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v43, v18 + 1, 8);
      LODWORD(v18) = v42;
    }
    v41[v18] = v7;
    LODWORD(v42) = v42 + 1;
    LODWORD(v37) = 1;
    ElementTypeOrSelf = 0;
    v39 = &ElementTypeOrSelf;
    v19 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v39, (uint64_t)v16);
    v20 = v37;
    if ((v19 & 1) == 0)
    {
      if (v37 >= 0x41 && ElementTypeOrSelf)
        MEMORY[0x20BD002D4](ElementTypeOrSelf, 0x1000C8000313F17);
LABEL_69:
      v33 = *((_QWORD *)a3 + 2);
      if (v33 && mlir::RewriterBase::Listener::classof(v33))
      {
LABEL_33:
        v8 = v23;
        v24 = v41;
        if (v41 == v43)
          return v8;
        goto LABEL_74;
      }
      goto LABEL_72;
    }
    v21 = ElementTypeOrSelf;
    ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
    v35 = v21;
    if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf))
      IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf);
    else
      IntOrFloatBitWidth = -1;
    if (*((_DWORD *)v5 + 9))
      v26 = (uint64_t)v5 - 16;
    else
      v26 = 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v26, 0);
    ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
    if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf))
      v28 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf);
    else
      v28 = -1;
    LODWORD(v40) = 1;
    v39 = 0;
    ElementTypeOrSelf = &v39;
    if (mlir::detail::constant_int_value_binder::match((uint64_t *)&ElementTypeOrSelf, (uint64_t)v16))
    {
      LODWORD(v37) = v40;
      ElementTypeOrSelf = v39;
      v38[0] = 1;
    }
    else
    {
      LOBYTE(ElementTypeOrSelf) = 0;
      v38[0] = 0;
      if (v40 >= 0x41 && v39)
        MEMORY[0x20BD002D4](v39, 0x1000C8000313F17);
    }
    v29 = v37;
    if (v37 >= 0x41)
    {
      if (v29 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&ElementTypeOrSelf) > 0x40)
      {
        v31 = 0;
LABEL_60:
        if (v38[0] && v29 >= 0x41 && ElementTypeOrSelf)
          MEMORY[0x20BD002D4](ElementTypeOrSelf, 0x1000C8000313F17);
        if (v20 >= 0x41 && v35)
          MEMORY[0x20BD002D4](v35, 0x1000C8000313F17);
        if (v31)
        {
          v32 = *(_QWORD *)(v41[1] + 24);
          ElementTypeOrSelf = *(void **)(*v41 + 24);
          v37 = v32;
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&ElementTypeOrSelf, (mlir::MLIRContext *)2, 0);
        }
        goto LABEL_69;
      }
      p_ElementTypeOrSelf = ElementTypeOrSelf;
    }
    else
    {
      p_ElementTypeOrSelf = &ElementTypeOrSelf;
    }
    v31 = *p_ElementTypeOrSelf == IntOrFloatBitWidth - v28;
    goto LABEL_60;
  }
LABEL_72:
  v8 = 0;
LABEL_73:
  v24 = v41;
  if (v41 != v43)
LABEL_74:
    free(v24);
  return v8;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ShRUIOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t *v11;
  ZinIrHalH13g *v12;
  ZinIrHalH13g *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  unint64_t v20[2];
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.shrui", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"arith.shrui";
    v18[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = mlir::ValueRange::ValueRange(v20, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ShRUIOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::TruncIOp,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  unint64_t *v13;
  ZinIrHalH13g *v14;
  ZinIrHalH13g *v15;
  uint64_t v17;
  const char *v18;
  __int16 v19;
  uint64_t v20[4];
  __int16 v21;
  unint64_t v22[2];
  unint64_t v23[2];
  _QWORD v24[39];

  v24[38] = *MEMORY[0x24BDAC8D0];
  v17 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.trunci", (const unsigned __int8 *)0xC, Context);
  if (!v12)
  {
    v21 = 1283;
    v20[2] = (uint64_t)"arith.trunci";
    v20[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  mlir::ValueRange::ValueRange(v23, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  v13 = mlir::ValueRange::ValueRange(v22, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)v13, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((_QWORD *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::TruncIOp,void>::id)
    v15 = v14;
  else
    v15 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v15;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrSIToTrunciShrUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrSIToTrunciShrUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::ShRSIOp type";
  v14 = 44;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrSIToTrunciShrUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp1";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrSIToTrunciShrUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "::mlir::success(::mlir::matchPattern(op2->getResult(0), ::mlir::m_Constant(&arg2_0))) return ::mlir::failure";
  v14 = 108;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::__mlir_ods_local_attr_constraint_ArithCanonicalization2(mlir::PatternRewriter &,mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(const void ****a1, uint64_t a2)
{
  const void **v2;
  const void **v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __n128 *v8;
  __n128 *v9;
  __n128 result;
  unint64_t v11;
  BOOL v12;
  char *v13;
  const void **v14[4];
  __int16 v15;
  int v16;
  const char *v17;
  uint64_t v18;

  v3 = **a1;
  v2 = (*a1)[1];
  v15 = 261;
  v14[0] = v3;
  v14[1] = v2;
  v4 = mlir::Diagnostic::operator<<(a2, v14);
  v5 = v4 + 16;
  v6 = *(_QWORD *)(v4 + 16);
  v16 = 3;
  v17 = ": TypedAttr instance";
  v18 = 20;
  v7 = *(unsigned int *)(v4 + 24);
  v8 = (__n128 *)&v16;
  if (v7 >= *(_DWORD *)(v4 + 28))
  {
    v11 = v7 + 1;
    v12 = v6 + 24 * v7 > (unint64_t)&v16;
    if (v6 <= (unint64_t)&v16 && v12)
    {
      v13 = (char *)&v16 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v4 + 32), v11, 24);
      v6 = *(_QWORD *)(v4 + 16);
      v8 = (__n128 *)&v13[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v4 + 32), v11, 24);
      v6 = *(_QWORD *)(v4 + 16);
      v8 = (__n128 *)&v16;
    }
  }
  v9 = (__n128 *)(v6 + 24 * *(unsigned int *)(v4 + 24));
  result = *v8;
  v9[1].n128_u64[0] = v8[1].n128_u64[0];
  *v9 = result;
  ++*(_DWORD *)(v4 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrSIToTrunciShrUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'x, tr, c0' failed to satisfy constraint: ''";
  v14 = 53;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::TruncIShrUIMulIToMulSIExtended::~TruncIShrUIMulIToMulSIExtended(_anonymous_namespace_::TruncIShrUIMulIToMulSIExtended *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(_anonymous_namespace_::TruncIShrUIMulIToMulSIExtended *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v5;
  mlir::Operation *v6;
  uint64_t DefiningOp;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t NextResultAtOffset;
  uint64_t IntOrFloatBitWidth;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  _QWORD *v49;
  _BOOL4 v50;
  char v51;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *p_ElementTypeOrSelf;
  uint64_t v58;
  void *ElementTypeOrSelf;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  _QWORD v66[6];

  v66[4] = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
    v5 = *((_QWORD *)a2 + 9);
  else
    v5 = 0;
  v56 = 0;
  v64 = v66;
  v66[0] = a2;
  v65 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::TruncIOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  ElementTypeOrSelf = *(void **)(*((_QWORD *)v6 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!DefiningOp)
  {
    v9 = *((_QWORD *)a3 + 2);
    if (!v9)
      goto LABEL_124;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v10 = *((_QWORD *)v6 + 3);
      goto LABEL_14;
    }
    goto LABEL_123;
  }
  v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ShRUIOp,void>::id)
  {
    v9 = *((_QWORD *)a3 + 2);
    if (!v9)
      goto LABEL_124;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v10 = *(_QWORD *)(v8 + 24);
LABEL_14:
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v9 + 64))(v9, v10, v11, &ElementTypeOrSelf);
      goto LABEL_15;
    }
    goto LABEL_123;
  }
  ElementTypeOrSelf = *(void **)(*(_QWORD *)(DefiningOp + 72) + 24);
  v14 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v14)
  {
    v9 = *((_QWORD *)a3 + 2);
    if (!v9)
      goto LABEL_124;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v10 = *(_QWORD *)(v8 + 24);
      goto LABEL_14;
    }
    goto LABEL_123;
  }
  v15 = v14;
  if (*(_UNKNOWN **)(*(_QWORD *)(v14 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::MulIOp,void>::id)
  {
    v9 = *((_QWORD *)a3 + 2);
    if (!v9)
      goto LABEL_124;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v10 = *(_QWORD *)(v15 + 24);
      goto LABEL_14;
    }
    goto LABEL_123;
  }
  ElementTypeOrSelf = *(void **)(*(_QWORD *)(v14 + 72) + 24);
  v16 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v16)
  {
    v9 = *((_QWORD *)a3 + 2);
    if (!v9)
      goto LABEL_124;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v10 = *(_QWORD *)(v15 + 24);
      goto LABEL_14;
    }
    goto LABEL_123;
  }
  v17 = v16;
  if (*(_UNKNOWN **)(*(_QWORD *)(v16 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
  {
    if ((*(_BYTE *)(v16 + 46) & 0x80) == 0)
    {
      v20 = 0;
      v21 = v65;
      if (v65 < HIDWORD(v65))
        goto LABEL_37;
      goto LABEL_100;
    }
    v20 = *(_QWORD *)(v16 + 72);
  }
  else
  {
    v18 = *((_QWORD *)a3 + 2);
    if (!v18)
      goto LABEL_123;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_123;
    v20 = v5;
    if (!v19)
      goto LABEL_123;
  }
  v21 = v65;
  if (v65 < HIDWORD(v65))
    goto LABEL_37;
LABEL_100:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v21 + 1, 8);
  LODWORD(v21) = v65;
LABEL_37:
  *((_QWORD *)v64 + v21) = v17;
  LODWORD(v65) = v65 + 1;
  ElementTypeOrSelf = *(void **)(*(_QWORD *)(v15 + 72) + 56);
  v22 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v22)
  {
    v13 = v64;
    if (v64 == v66)
      return v9;
    goto LABEL_125;
  }
  v23 = v22;
  if (*(_UNKNOWN **)(*(_QWORD *)(v22 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
  {
    if ((*(_BYTE *)(v22 + 46) & 0x80) == 0)
    {
      v5 = 0;
      llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v64, v22);
      v27 = v65;
      if (v65 < HIDWORD(v65))
        goto LABEL_48;
      goto LABEL_130;
    }
    v5 = *(_QWORD *)(v22 + 72);
  }
  else
  {
    v24 = v20;
    v25 = *((_QWORD *)a3 + 2);
    if (!v25)
      goto LABEL_123;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_123;
    v20 = v24;
    if (!v26)
      goto LABEL_123;
  }
  llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v64, v23);
  v27 = v65;
  if (v65 < HIDWORD(v65))
    goto LABEL_48;
LABEL_130:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v27 + 1, 8);
  LODWORD(v27) = v65;
LABEL_48:
  *((_QWORD *)v64 + v27) = v15;
  LODWORD(v65) = v65 + 1;
  ElementTypeOrSelf = *(void **)(*(_QWORD *)(v8 + 72) + 56);
  v28 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v28)
  {
    v9 = *((_QWORD *)a3 + 2);
    if (!v9)
      goto LABEL_124;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v10 = *(_QWORD *)(v8 + 24);
      goto LABEL_14;
    }
    goto LABEL_123;
  }
  v29 = v28;
    goto LABEL_123;
  v30 = v65;
  if (v65 >= HIDWORD(v65))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v65 + 1, 8);
    v30 = v65;
  }
  *((_QWORD *)v64 + v30) = v29;
  v31 = (v65 + 1);
  LODWORD(v65) = v31;
  if (v31 >= HIDWORD(v65))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v31 + 1, 8);
    LODWORD(v31) = v65;
  }
  *((_QWORD *)v64 + v31) = v8;
  LODWORD(v65) = v65 + 1;
  if (*((_DWORD *)v6 + 9))
    v32 = (uint64_t)v6 - 16;
  else
    v32 = 0;
  v33 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v32, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(*(_QWORD *)(v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) != v33
    || (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) != v33)
  {
    v34 = *((_QWORD *)a3 + 2);
    if (v34 && mlir::RewriterBase::Listener::classof(v34))
    {
      v35 = *((_QWORD *)a2 + 3);
LABEL_62:
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v34 + 64))(v34, v35, v36, &ElementTypeOrSelf);
LABEL_15:
      v9 = v12;
      v13 = v64;
      if (v64 == v66)
        return v9;
      goto LABEL_125;
    }
    goto LABEL_123;
  }
  if (*(_DWORD *)(v15 + 36))
    v37 = v15 - 16;
  else
    v37 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v37, 0);
  ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf))
    IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf);
  else
    IntOrFloatBitWidth = -1;
  ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf))
    v40 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf);
  else
    v40 = -1;
  if (IntOrFloatBitWidth > v40)
  {
    ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
    if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf))
    {
      if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf))
      {
        LODWORD(v60) = 1;
        ElementTypeOrSelf = 0;
        p_ElementTypeOrSelf = &ElementTypeOrSelf;
        if (v56)
        {
          v41 = mlir::detail::constant_int_value_binder::match((uint64_t *)&p_ElementTypeOrSelf, v56);
          v42 = v60;
          if ((v41 & 1) != 0)
          {
            v55 = ElementTypeOrSelf;
            if (*(_DWORD *)(v15 + 36))
              v43 = v15 - 16;
            else
              v43 = 0;
            v44 = mlir::detail::OpResultImpl::getNextResultAtOffset(v43, 0);
            ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF8));
            if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf))
              v45 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf);
            else
              v45 = -1;
            ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
            if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf))
              v46 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf);
            else
              v46 = -1;
            LODWORD(v58) = 1;
            p_ElementTypeOrSelf = 0;
            ElementTypeOrSelf = &p_ElementTypeOrSelf;
            if (v56)
            {
              if (mlir::detail::constant_int_value_binder::match((uint64_t *)&ElementTypeOrSelf, v56))
              {
                LODWORD(v60) = v58;
                ElementTypeOrSelf = p_ElementTypeOrSelf;
                v47 = 1;
                LOBYTE(v61) = 1;
              }
              else
              {
                v47 = 0;
                LOBYTE(ElementTypeOrSelf) = 0;
                LOBYTE(v61) = 0;
                if (v58 >= 0x41)
                {
                  if (p_ElementTypeOrSelf)
                    MEMORY[0x20BD002D4](p_ElementTypeOrSelf, 0x1000C8000313F17);
                  v47 = 0;
                }
              }
            }
            else
            {
              v47 = 0;
              LOBYTE(ElementTypeOrSelf) = 0;
              LOBYTE(v61) = 0;
            }
            v48 = v60;
            if (v60 >= 0x41)
            {
              if (v48 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&ElementTypeOrSelf) > 0x40)
              {
                v50 = 1;
LABEL_112:
                v51 = v47 ^ 1;
                if (v48 < 0x41)
                  v51 = 1;
                if ((v51 & 1) == 0 && ElementTypeOrSelf)
                  MEMORY[0x20BD002D4](ElementTypeOrSelf, 0x1000C8000313F17);
                if (v42 >= 0x41 && v55)
                {
                  MEMORY[0x20BD002D4](v55, 0x1000C8000313F17);
                  if (v50)
                    goto LABEL_120;
                }
                else if (v50)
                {
                  goto LABEL_120;
                }
                v53 = *(_QWORD *)(*((_QWORD *)v64 + 1) + 24);
                ElementTypeOrSelf = *(void **)(*(_QWORD *)v64 + 24);
                v60 = v53;
                v54 = *(_QWORD *)(*((_QWORD *)v64 + 3) + 24);
                v61 = *(_QWORD *)(*((_QWORD *)v64 + 2) + 24);
                v62 = v54;
                v63 = *(_QWORD *)(*((_QWORD *)v64 + 4) + 24);
                mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&ElementTypeOrSelf, (mlir::MLIRContext *)5, 0);
              }
              v49 = ElementTypeOrSelf;
            }
            else
            {
              v49 = &ElementTypeOrSelf;
            }
            v50 = *v49 != v45 - v46;
            goto LABEL_112;
          }
          if (v60 >= 0x41 && ElementTypeOrSelf)
            MEMORY[0x20BD002D4](ElementTypeOrSelf, 0x1000C8000313F17);
        }
LABEL_120:
        v34 = *((_QWORD *)a3 + 2);
        if (v34 && mlir::RewriterBase::Listener::classof(v34))
        {
          v35 = *((_QWORD *)a2 + 3);
          goto LABEL_62;
        }
        goto LABEL_123;
      }
    }
  }
  v34 = *((_QWORD *)a3 + 2);
  if (v34 && mlir::RewriterBase::Listener::classof(v34))
  {
    v35 = *((_QWORD *)a2 + 3);
    goto LABEL_62;
  }
LABEL_123:
  v9 = 0;
LABEL_124:
  v13 = v64;
  if (v64 != v66)
LABEL_125:
    free(v13);
  return v9;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<`anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && mlir::RewriterBase::Listener::classof(a1))
  else
    return 0;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::MulSIExtendedOp,mlir::Value &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  ZinIrHalH13g *v12;
  ZinIrHalH13g *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  _QWORD v20[39];

  v20[38] = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.mulsi_extended", (const unsigned __int8 *)0x14, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"arith.mulsi_extended";
    v18[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::arith::MulSIExtendedOp::build(v11, (uint64_t)v20, *a3, *a4);
  v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulSIExtendedOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::ShRUIOp type";
  v14 = 44;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp1";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp2 is not ::mlir::arith::MulIOp type";
  v14 = 43;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp2";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp2";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp1";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'tr, x, y' failed to satisfy constraint: ''";
  v14 = 52;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'mul, x' failed to satisfy constraint: ''";
  v14 = 50;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'mul, x, c0' failed to satisfy constraint: ''";
  v14 = 54;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::TruncIShrUIMulIToMulUIExtended::~TruncIShrUIMulIToMulUIExtended(_anonymous_namespace_::TruncIShrUIMulIToMulUIExtended *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(_anonymous_namespace_::TruncIShrUIMulIToMulUIExtended *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v5;
  mlir::Operation *v6;
  uint64_t DefiningOp;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t NextResultAtOffset;
  uint64_t IntOrFloatBitWidth;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  _QWORD *v49;
  _BOOL4 v50;
  char v51;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *p_ElementTypeOrSelf;
  uint64_t v58;
  void *ElementTypeOrSelf;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  _QWORD v66[6];

  v66[4] = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
    v5 = *((_QWORD *)a2 + 9);
  else
    v5 = 0;
  v56 = 0;
  v64 = v66;
  v66[0] = a2;
  v65 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::TruncIOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  ElementTypeOrSelf = *(void **)(*((_QWORD *)v6 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!DefiningOp)
  {
    v9 = *((_QWORD *)a3 + 2);
    if (!v9)
      goto LABEL_124;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v10 = *((_QWORD *)v6 + 3);
      goto LABEL_14;
    }
    goto LABEL_123;
  }
  v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ShRUIOp,void>::id)
  {
    v9 = *((_QWORD *)a3 + 2);
    if (!v9)
      goto LABEL_124;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v10 = *(_QWORD *)(v8 + 24);
LABEL_14:
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v9 + 64))(v9, v10, v11, &ElementTypeOrSelf);
      goto LABEL_15;
    }
    goto LABEL_123;
  }
  ElementTypeOrSelf = *(void **)(*(_QWORD *)(DefiningOp + 72) + 24);
  v14 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v14)
  {
    v9 = *((_QWORD *)a3 + 2);
    if (!v9)
      goto LABEL_124;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v10 = *(_QWORD *)(v8 + 24);
      goto LABEL_14;
    }
    goto LABEL_123;
  }
  v15 = v14;
  if (*(_UNKNOWN **)(*(_QWORD *)(v14 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::MulIOp,void>::id)
  {
    v9 = *((_QWORD *)a3 + 2);
    if (!v9)
      goto LABEL_124;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v10 = *(_QWORD *)(v15 + 24);
      goto LABEL_14;
    }
    goto LABEL_123;
  }
  ElementTypeOrSelf = *(void **)(*(_QWORD *)(v14 + 72) + 24);
  v16 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v16)
  {
    v9 = *((_QWORD *)a3 + 2);
    if (!v9)
      goto LABEL_124;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v10 = *(_QWORD *)(v15 + 24);
      goto LABEL_14;
    }
    goto LABEL_123;
  }
  v17 = v16;
  if (*(_UNKNOWN **)(*(_QWORD *)(v16 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
  {
    if ((*(_BYTE *)(v16 + 46) & 0x80) == 0)
    {
      v20 = 0;
      v21 = v65;
      if (v65 < HIDWORD(v65))
        goto LABEL_37;
      goto LABEL_100;
    }
    v20 = *(_QWORD *)(v16 + 72);
  }
  else
  {
    v18 = *((_QWORD *)a3 + 2);
    if (!v18)
      goto LABEL_123;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_123;
    v20 = v5;
    if (!v19)
      goto LABEL_123;
  }
  v21 = v65;
  if (v65 < HIDWORD(v65))
    goto LABEL_37;
LABEL_100:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v21 + 1, 8);
  LODWORD(v21) = v65;
LABEL_37:
  *((_QWORD *)v64 + v21) = v17;
  LODWORD(v65) = v65 + 1;
  ElementTypeOrSelf = *(void **)(*(_QWORD *)(v15 + 72) + 56);
  v22 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v22)
  {
    v13 = v64;
    if (v64 == v66)
      return v9;
    goto LABEL_125;
  }
  v23 = v22;
  if (*(_UNKNOWN **)(*(_QWORD *)(v22 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
  {
    if ((*(_BYTE *)(v22 + 46) & 0x80) == 0)
    {
      v5 = 0;
      llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v64, v22);
      v27 = v65;
      if (v65 < HIDWORD(v65))
        goto LABEL_48;
      goto LABEL_130;
    }
    v5 = *(_QWORD *)(v22 + 72);
  }
  else
  {
    v24 = v20;
    v25 = *((_QWORD *)a3 + 2);
    if (!v25)
      goto LABEL_123;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_123;
    v20 = v24;
    if (!v26)
      goto LABEL_123;
  }
  llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v64, v23);
  v27 = v65;
  if (v65 < HIDWORD(v65))
    goto LABEL_48;
LABEL_130:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v27 + 1, 8);
  LODWORD(v27) = v65;
LABEL_48:
  *((_QWORD *)v64 + v27) = v15;
  LODWORD(v65) = v65 + 1;
  ElementTypeOrSelf = *(void **)(*(_QWORD *)(v8 + 72) + 56);
  v28 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v28)
  {
    v9 = *((_QWORD *)a3 + 2);
    if (!v9)
      goto LABEL_124;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v10 = *(_QWORD *)(v8 + 24);
      goto LABEL_14;
    }
    goto LABEL_123;
  }
  v29 = v28;
    goto LABEL_123;
  v30 = v65;
  if (v65 >= HIDWORD(v65))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v65 + 1, 8);
    v30 = v65;
  }
  *((_QWORD *)v64 + v30) = v29;
  v31 = (v65 + 1);
  LODWORD(v65) = v31;
  if (v31 >= HIDWORD(v65))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v31 + 1, 8);
    LODWORD(v31) = v65;
  }
  *((_QWORD *)v64 + v31) = v8;
  LODWORD(v65) = v65 + 1;
  if (*((_DWORD *)v6 + 9))
    v32 = (uint64_t)v6 - 16;
  else
    v32 = 0;
  v33 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v32, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(*(_QWORD *)(v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) != v33
    || (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) != v33)
  {
    v34 = *((_QWORD *)a3 + 2);
    if (v34 && mlir::RewriterBase::Listener::classof(v34))
    {
      v35 = *((_QWORD *)a2 + 3);
LABEL_62:
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v34 + 64))(v34, v35, v36, &ElementTypeOrSelf);
LABEL_15:
      v9 = v12;
      v13 = v64;
      if (v64 == v66)
        return v9;
      goto LABEL_125;
    }
    goto LABEL_123;
  }
  if (*(_DWORD *)(v15 + 36))
    v37 = v15 - 16;
  else
    v37 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v37, 0);
  ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf))
    IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf);
  else
    IntOrFloatBitWidth = -1;
  ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf))
    v40 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf);
  else
    v40 = -1;
  if (IntOrFloatBitWidth > v40)
  {
    ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
    if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf))
    {
      if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf))
      {
        LODWORD(v60) = 1;
        ElementTypeOrSelf = 0;
        p_ElementTypeOrSelf = &ElementTypeOrSelf;
        if (v56)
        {
          v41 = mlir::detail::constant_int_value_binder::match((uint64_t *)&p_ElementTypeOrSelf, v56);
          v42 = v60;
          if ((v41 & 1) != 0)
          {
            v55 = ElementTypeOrSelf;
            if (*(_DWORD *)(v15 + 36))
              v43 = v15 - 16;
            else
              v43 = 0;
            v44 = mlir::detail::OpResultImpl::getNextResultAtOffset(v43, 0);
            ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF8));
            if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf))
              v45 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf);
            else
              v45 = -1;
            ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
            if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf))
              v46 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf);
            else
              v46 = -1;
            LODWORD(v58) = 1;
            p_ElementTypeOrSelf = 0;
            ElementTypeOrSelf = &p_ElementTypeOrSelf;
            if (v56)
            {
              if (mlir::detail::constant_int_value_binder::match((uint64_t *)&ElementTypeOrSelf, v56))
              {
                LODWORD(v60) = v58;
                ElementTypeOrSelf = p_ElementTypeOrSelf;
                v47 = 1;
                LOBYTE(v61) = 1;
              }
              else
              {
                v47 = 0;
                LOBYTE(ElementTypeOrSelf) = 0;
                LOBYTE(v61) = 0;
                if (v58 >= 0x41)
                {
                  if (p_ElementTypeOrSelf)
                    MEMORY[0x20BD002D4](p_ElementTypeOrSelf, 0x1000C8000313F17);
                  v47 = 0;
                }
              }
            }
            else
            {
              v47 = 0;
              LOBYTE(ElementTypeOrSelf) = 0;
              LOBYTE(v61) = 0;
            }
            v48 = v60;
            if (v60 >= 0x41)
            {
              if (v48 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&ElementTypeOrSelf) > 0x40)
              {
                v50 = 1;
LABEL_112:
                v51 = v47 ^ 1;
                if (v48 < 0x41)
                  v51 = 1;
                if ((v51 & 1) == 0 && ElementTypeOrSelf)
                  MEMORY[0x20BD002D4](ElementTypeOrSelf, 0x1000C8000313F17);
                if (v42 >= 0x41 && v55)
                {
                  MEMORY[0x20BD002D4](v55, 0x1000C8000313F17);
                  if (v50)
                    goto LABEL_120;
                }
                else if (v50)
                {
                  goto LABEL_120;
                }
                v53 = *(_QWORD *)(*((_QWORD *)v64 + 1) + 24);
                ElementTypeOrSelf = *(void **)(*(_QWORD *)v64 + 24);
                v60 = v53;
                v54 = *(_QWORD *)(*((_QWORD *)v64 + 3) + 24);
                v61 = *(_QWORD *)(*((_QWORD *)v64 + 2) + 24);
                v62 = v54;
                v63 = *(_QWORD *)(*((_QWORD *)v64 + 4) + 24);
                mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&ElementTypeOrSelf, (mlir::MLIRContext *)5, 0);
              }
              v49 = ElementTypeOrSelf;
            }
            else
            {
              v49 = &ElementTypeOrSelf;
            }
            v50 = *v49 != v45 - v46;
            goto LABEL_112;
          }
          if (v60 >= 0x41 && ElementTypeOrSelf)
            MEMORY[0x20BD002D4](ElementTypeOrSelf, 0x1000C8000313F17);
        }
LABEL_120:
        v34 = *((_QWORD *)a3 + 2);
        if (v34 && mlir::RewriterBase::Listener::classof(v34))
        {
          v35 = *((_QWORD *)a2 + 3);
          goto LABEL_62;
        }
        goto LABEL_123;
      }
    }
  }
  v34 = *((_QWORD *)a3 + 2);
  if (v34 && mlir::RewriterBase::Listener::classof(v34))
  {
    v35 = *((_QWORD *)a2 + 3);
    goto LABEL_62;
  }
LABEL_123:
  v9 = 0;
LABEL_124:
  v13 = v64;
  if (v64 != v66)
LABEL_125:
    free(v13);
  return v9;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<`anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && mlir::RewriterBase::Listener::classof(a1))
  else
    return 0;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::MulUIExtendedOp,mlir::Value &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  ZinIrHalH13g *v12;
  ZinIrHalH13g *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  _QWORD v20[39];

  v20[38] = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.mului_extended", (const unsigned __int8 *)0x14, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"arith.mului_extended";
    v18[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::arith::MulSIExtendedOp::build(v11, (uint64_t)v20, *a3, *a4);
  v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulUIExtendedOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::ShRUIOp type";
  v14 = 44;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp1";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp2 is not ::mlir::arith::MulIOp type";
  v14 = 43;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp2";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp2";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp1";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'tr, x, y' failed to satisfy constraint: ''";
  v14 = 52;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'mul, x' failed to satisfy constraint: ''";
  v14 = 50;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'mul, x, c0' failed to satisfy constraint: ''";
  v14 = 54;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::AndOfExtUI::~AndOfExtUI(_anonymous_namespace_::AndOfExtUI *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::AndOfExtUI::matchAndRewrite(_anonymous_namespace_::AndOfExtUI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v5;
  mlir::Operation *v6;
  uint64_t DefiningOp;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v23;
  void *v24[10];
  _QWORD *v25;
  uint64_t v26;
  _QWORD v27[6];

  v27[4] = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
    v5 = *((_QWORD *)a2 + 9);
  else
    v5 = 0;
  v25 = v27;
  v27[0] = a2;
  v26 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AndIOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v24[0] = *(void **)(*((_QWORD *)v6 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (!DefiningOp)
  {
    v11 = *((_QWORD *)a3 + 2);
    if (!v11)
      goto LABEL_38;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_37;
    v12 = *((_QWORD *)v6 + 3);
    goto LABEL_27;
  }
  v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
  {
    if ((*(_BYTE *)(DefiningOp + 46) & 0x80) == 0)
    {
      v10 = 0;
      v14 = v26;
      if (v26 < HIDWORD(v26))
        goto LABEL_18;
      goto LABEL_44;
    }
    v10 = *(_QWORD *)(DefiningOp + 72);
  }
  else
  {
    v9 = *((_QWORD *)a3 + 2);
    if (!v9)
      goto LABEL_37;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_37;
    v10 = v5;
  }
  v14 = v26;
  if (v26 < HIDWORD(v26))
    goto LABEL_18;
LABEL_44:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v14 + 1, 8);
  LODWORD(v14) = v26;
LABEL_18:
  v25[v14] = v8;
  LODWORD(v26) = v26 + 1;
  v24[0] = *(void **)(*((_QWORD *)v6 + 9) + 56);
  v15 = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (v15)
  {
    v16 = v15;
    if (*(_UNKNOWN **)(*(_QWORD *)(v15 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
    {
      if ((*(_BYTE *)(v15 + 46) & 0x80) == 0)
      {
        v5 = 0;
        v20 = v26;
        if (v26 < HIDWORD(v26))
          goto LABEL_33;
        goto LABEL_46;
      }
      v5 = *(_QWORD *)(v15 + 72);
    }
    else
    {
      v17 = *((_QWORD *)a3 + 2);
      if (!v17
        || !mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2))
      {
        goto LABEL_37;
      }
    }
    v20 = v26;
    if (v26 < HIDWORD(v26))
    {
LABEL_33:
      v25[v20] = v16;
      LODWORD(v26) = v26 + 1;
      if ((*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        v23 = *(void **)(v25[1] + 24);
        v24[0] = *(void **)(*v25 + 24);
        v24[1] = v23;
        v24[2] = *(void **)(v25[2] + 24);
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v24, (mlir::MLIRContext *)3, 0);
      }
      v21 = *((_QWORD *)a3 + 2);
      if (!v21 || !mlir::RewriterBase::Listener::classof(v21))
        goto LABEL_37;
LABEL_28:
      v11 = v18;
      v19 = v25;
      if (v25 == v27)
        return v11;
      goto LABEL_39;
    }
LABEL_46:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v20 + 1, 8);
    LODWORD(v20) = v26;
    goto LABEL_33;
  }
  v11 = *((_QWORD *)a3 + 2);
  if (!v11)
    goto LABEL_38;
  if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
  {
    v12 = *((_QWORD *)v6 + 3);
LABEL_27:
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v11 + 64))(v11, v12, v13, v24);
    goto LABEL_28;
  }
LABEL_37:
  v11 = 0;
LABEL_38:
  v19 = v25;
  if (v25 != v27)
LABEL_39:
    free(v19);
  return v11;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::AndIOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t *v11;
  ZinIrHalH13g *v12;
  ZinIrHalH13g *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  unint64_t v20[2];
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.andi", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"arith.andi";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = mlir::ValueRange::ValueRange(v20, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AndIOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::AndOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::AndOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::AndOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'x, y' failed to satisfy constraint: ''";
  v14 = 48;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::AndOfExtSI::~AndOfExtSI(_anonymous_namespace_::AndOfExtSI *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::AndOfExtSI::matchAndRewrite(_anonymous_namespace_::AndOfExtSI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v5;
  mlir::Operation *v6;
  uint64_t DefiningOp;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v23;
  void *v24[10];
  _QWORD *v25;
  uint64_t v26;
  _QWORD v27[6];

  v27[4] = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
    v5 = *((_QWORD *)a2 + 9);
  else
    v5 = 0;
  v25 = v27;
  v27[0] = a2;
  v26 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AndIOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v24[0] = *(void **)(*((_QWORD *)v6 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (!DefiningOp)
  {
    v11 = *((_QWORD *)a3 + 2);
    if (!v11)
      goto LABEL_38;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_37;
    v12 = *((_QWORD *)v6 + 3);
    goto LABEL_27;
  }
  v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
  {
    if ((*(_BYTE *)(DefiningOp + 46) & 0x80) == 0)
    {
      v10 = 0;
      v14 = v26;
      if (v26 < HIDWORD(v26))
        goto LABEL_18;
      goto LABEL_44;
    }
    v10 = *(_QWORD *)(DefiningOp + 72);
  }
  else
  {
    v9 = *((_QWORD *)a3 + 2);
    if (!v9)
      goto LABEL_37;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_37;
    v10 = v5;
  }
  v14 = v26;
  if (v26 < HIDWORD(v26))
    goto LABEL_18;
LABEL_44:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v14 + 1, 8);
  LODWORD(v14) = v26;
LABEL_18:
  v25[v14] = v8;
  LODWORD(v26) = v26 + 1;
  v24[0] = *(void **)(*((_QWORD *)v6 + 9) + 56);
  v15 = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (v15)
  {
    v16 = v15;
    if (*(_UNKNOWN **)(*(_QWORD *)(v15 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
    {
      if ((*(_BYTE *)(v15 + 46) & 0x80) == 0)
      {
        v5 = 0;
        v20 = v26;
        if (v26 < HIDWORD(v26))
          goto LABEL_33;
        goto LABEL_46;
      }
      v5 = *(_QWORD *)(v15 + 72);
    }
    else
    {
      v17 = *((_QWORD *)a3 + 2);
      if (!v17
        || !mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2))
      {
        goto LABEL_37;
      }
    }
    v20 = v26;
    if (v26 < HIDWORD(v26))
    {
LABEL_33:
      v25[v20] = v16;
      LODWORD(v26) = v26 + 1;
      if ((*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        v23 = *(void **)(v25[1] + 24);
        v24[0] = *(void **)(*v25 + 24);
        v24[1] = v23;
        v24[2] = *(void **)(v25[2] + 24);
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v24, (mlir::MLIRContext *)3, 0);
      }
      v21 = *((_QWORD *)a3 + 2);
      if (!v21 || !mlir::RewriterBase::Listener::classof(v21))
        goto LABEL_37;
LABEL_28:
      v11 = v18;
      v19 = v25;
      if (v25 == v27)
        return v11;
      goto LABEL_39;
    }
LABEL_46:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v20 + 1, 8);
    LODWORD(v20) = v26;
    goto LABEL_33;
  }
  v11 = *((_QWORD *)a3 + 2);
  if (!v11)
    goto LABEL_38;
  if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
  {
    v12 = *((_QWORD *)v6 + 3);
LABEL_27:
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v11 + 64))(v11, v12, v13, v24);
    goto LABEL_28;
  }
LABEL_37:
  v11 = 0;
LABEL_38:
  v19 = v25;
  if (v25 != v27)
LABEL_39:
    free(v19);
  return v11;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::AndOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::AndOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::AndOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'x, y' failed to satisfy constraint: ''";
  v14 = 48;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::OrOfExtUI::~OrOfExtUI(_anonymous_namespace_::OrOfExtUI *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::OrOfExtUI::matchAndRewrite(_anonymous_namespace_::OrOfExtUI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v5;
  mlir::Operation *v6;
  uint64_t DefiningOp;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v23;
  void *v24[10];
  _QWORD *v25;
  uint64_t v26;
  _QWORD v27[6];

  v27[4] = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
    v5 = *((_QWORD *)a2 + 9);
  else
    v5 = 0;
  v25 = v27;
  v27[0] = a2;
  v26 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::OrIOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v24[0] = *(void **)(*((_QWORD *)v6 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (!DefiningOp)
  {
    v11 = *((_QWORD *)a3 + 2);
    if (!v11)
      goto LABEL_38;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_37;
    v12 = *((_QWORD *)v6 + 3);
    goto LABEL_27;
  }
  v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
  {
    if ((*(_BYTE *)(DefiningOp + 46) & 0x80) == 0)
    {
      v10 = 0;
      v14 = v26;
      if (v26 < HIDWORD(v26))
        goto LABEL_18;
      goto LABEL_44;
    }
    v10 = *(_QWORD *)(DefiningOp + 72);
  }
  else
  {
    v9 = *((_QWORD *)a3 + 2);
    if (!v9)
      goto LABEL_37;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_37;
    v10 = v5;
  }
  v14 = v26;
  if (v26 < HIDWORD(v26))
    goto LABEL_18;
LABEL_44:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v14 + 1, 8);
  LODWORD(v14) = v26;
LABEL_18:
  v25[v14] = v8;
  LODWORD(v26) = v26 + 1;
  v24[0] = *(void **)(*((_QWORD *)v6 + 9) + 56);
  v15 = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (v15)
  {
    v16 = v15;
    if (*(_UNKNOWN **)(*(_QWORD *)(v15 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
    {
      if ((*(_BYTE *)(v15 + 46) & 0x80) == 0)
      {
        v5 = 0;
        v20 = v26;
        if (v26 < HIDWORD(v26))
          goto LABEL_33;
        goto LABEL_46;
      }
      v5 = *(_QWORD *)(v15 + 72);
    }
    else
    {
      v17 = *((_QWORD *)a3 + 2);
      if (!v17
        || !mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2))
      {
        goto LABEL_37;
      }
    }
    v20 = v26;
    if (v26 < HIDWORD(v26))
    {
LABEL_33:
      v25[v20] = v16;
      LODWORD(v26) = v26 + 1;
      if ((*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        v23 = *(void **)(v25[1] + 24);
        v24[0] = *(void **)(*v25 + 24);
        v24[1] = v23;
        v24[2] = *(void **)(v25[2] + 24);
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v24, (mlir::MLIRContext *)3, 0);
      }
      v21 = *((_QWORD *)a3 + 2);
      if (!v21 || !mlir::RewriterBase::Listener::classof(v21))
        goto LABEL_37;
LABEL_28:
      v11 = v18;
      v19 = v25;
      if (v25 == v27)
        return v11;
      goto LABEL_39;
    }
LABEL_46:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v20 + 1, 8);
    LODWORD(v20) = v26;
    goto LABEL_33;
  }
  v11 = *((_QWORD *)a3 + 2);
  if (!v11)
    goto LABEL_38;
  if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
  {
    v12 = *((_QWORD *)v6 + 3);
LABEL_27:
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v11 + 64))(v11, v12, v13, v24);
    goto LABEL_28;
  }
LABEL_37:
  v11 = 0;
LABEL_38:
  v19 = v25;
  if (v25 != v27)
LABEL_39:
    free(v19);
  return v11;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::OrIOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t *v11;
  ZinIrHalH13g *v12;
  ZinIrHalH13g *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  unint64_t v20[2];
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.ori", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"arith.ori";
    v18[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = mlir::ValueRange::ValueRange(v20, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::OrIOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::OrOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::OrOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::OrOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'x, y' failed to satisfy constraint: ''";
  v14 = 48;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::OrOfExtSI::~OrOfExtSI(_anonymous_namespace_::OrOfExtSI *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::OrOfExtSI::matchAndRewrite(_anonymous_namespace_::OrOfExtSI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v5;
  mlir::Operation *v6;
  uint64_t DefiningOp;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v23;
  void *v24[10];
  _QWORD *v25;
  uint64_t v26;
  _QWORD v27[6];

  v27[4] = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
    v5 = *((_QWORD *)a2 + 9);
  else
    v5 = 0;
  v25 = v27;
  v27[0] = a2;
  v26 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::OrIOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v24[0] = *(void **)(*((_QWORD *)v6 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (!DefiningOp)
  {
    v11 = *((_QWORD *)a3 + 2);
    if (!v11)
      goto LABEL_38;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_37;
    v12 = *((_QWORD *)v6 + 3);
    goto LABEL_27;
  }
  v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
  {
    if ((*(_BYTE *)(DefiningOp + 46) & 0x80) == 0)
    {
      v10 = 0;
      v14 = v26;
      if (v26 < HIDWORD(v26))
        goto LABEL_18;
      goto LABEL_44;
    }
    v10 = *(_QWORD *)(DefiningOp + 72);
  }
  else
  {
    v9 = *((_QWORD *)a3 + 2);
    if (!v9)
      goto LABEL_37;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_37;
    v10 = v5;
  }
  v14 = v26;
  if (v26 < HIDWORD(v26))
    goto LABEL_18;
LABEL_44:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v14 + 1, 8);
  LODWORD(v14) = v26;
LABEL_18:
  v25[v14] = v8;
  LODWORD(v26) = v26 + 1;
  v24[0] = *(void **)(*((_QWORD *)v6 + 9) + 56);
  v15 = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (v15)
  {
    v16 = v15;
    if (*(_UNKNOWN **)(*(_QWORD *)(v15 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
    {
      if ((*(_BYTE *)(v15 + 46) & 0x80) == 0)
      {
        v5 = 0;
        v20 = v26;
        if (v26 < HIDWORD(v26))
          goto LABEL_33;
        goto LABEL_46;
      }
      v5 = *(_QWORD *)(v15 + 72);
    }
    else
    {
      v17 = *((_QWORD *)a3 + 2);
      if (!v17
        || !mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2))
      {
        goto LABEL_37;
      }
    }
    v20 = v26;
    if (v26 < HIDWORD(v26))
    {
LABEL_33:
      v25[v20] = v16;
      LODWORD(v26) = v26 + 1;
      if ((*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        v23 = *(void **)(v25[1] + 24);
        v24[0] = *(void **)(*v25 + 24);
        v24[1] = v23;
        v24[2] = *(void **)(v25[2] + 24);
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v24, (mlir::MLIRContext *)3, 0);
      }
      v21 = *((_QWORD *)a3 + 2);
      if (!v21 || !mlir::RewriterBase::Listener::classof(v21))
        goto LABEL_37;
LABEL_28:
      v11 = v18;
      v19 = v25;
      if (v25 == v27)
        return v11;
      goto LABEL_39;
    }
LABEL_46:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v20 + 1, 8);
    LODWORD(v20) = v26;
    goto LABEL_33;
  }
  v11 = *((_QWORD *)a3 + 2);
  if (!v11)
    goto LABEL_38;
  if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
  {
    v12 = *((_QWORD *)v6 + 3);
LABEL_27:
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v11 + 64))(v11, v12, v13, v24);
    goto LABEL_28;
  }
LABEL_37:
  v11 = 0;
LABEL_38:
  v19 = v25;
  if (v25 != v27)
LABEL_39:
    free(v19);
  return v11;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::OrOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::OrOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::OrOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'x, y' failed to satisfy constraint: ''";
  v14 = 48;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t mlir::arith::UIToFPOp::fold(mlir::arith::UIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *FloatSemantics;
  llvm::APFloatBase *Width;
  llvm::detail::IEEEFloat *v7;
  void *v8;
  llvm::APFloatBase *v9;
  const llvm::APInt *v11;
  unsigned int v12;
  uint64_t v13;

  v13 = a2;
  FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v13);
  Width = (llvm::APFloatBase *)mlir::FloatType::getWidth((mlir::FloatType *)&v13);
  v12 = Width;
  if (Width > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v11, 0, 0);
    v7 = (llvm::detail::IEEEFloat *)(a1 + 8);
    v8 = llvm::APFloatBase::PPCDoubleDouble(v9);
    if (v8 != FloatSemantics)
    {
LABEL_3:
      llvm::detail::IEEEFloat::IEEEFloat(v7, FloatSemantics, &v11);
      if (v12 < 0x41)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else
  {
    v11 = 0;
    v7 = (llvm::detail::IEEEFloat *)(a1 + 8);
    v8 = llvm::APFloatBase::PPCDoubleDouble(Width);
    if (v8 != FloatSemantics)
      goto LABEL_3;
  }
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v7, (uint64_t)FloatSemantics, (uint64_t)&v11);
  if (v12 < 0x41)
    goto LABEL_9;
LABEL_7:
  if (v11)
    MEMORY[0x20BD002D4](v11, 0x1000C8000313F17);
LABEL_9:
  if (v8 == *(void **)v7)
    return llvm::detail::DoubleAPFloat::convertFromAPInt(v7, a3, 0, 1);
  else
    return llvm::detail::IEEEFloat::convertFromAPInt((uint64_t)v7, a3, 0, 1);
}

uint64_t llvm::APFloat::convertFromAPInt(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  llvm::detail::DoubleAPFloat *v7;
  void *v8;

  v7 = (llvm::detail::DoubleAPFloat *)(a1 + 1);
  v8 = (void *)a1[1];
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v8)
    return llvm::detail::DoubleAPFloat::convertFromAPInt(v7, a2, a3, a4);
  else
    return llvm::detail::IEEEFloat::convertFromAPInt((uint64_t)v7, a2, a3, a4);
}

uint64_t mlir::arith::SIToFPOp::fold(mlir::arith::SIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *FloatSemantics;
  llvm::APFloatBase *Width;
  llvm::detail::IEEEFloat *v7;
  void *v8;
  llvm::APFloatBase *v9;
  const llvm::APInt *v11;
  unsigned int v12;
  uint64_t v13;

  v13 = a2;
  FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v13);
  Width = (llvm::APFloatBase *)mlir::FloatType::getWidth((mlir::FloatType *)&v13);
  v12 = Width;
  if (Width > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v11, 0, 0);
    v7 = (llvm::detail::IEEEFloat *)(a1 + 8);
    v8 = llvm::APFloatBase::PPCDoubleDouble(v9);
    if (v8 != FloatSemantics)
    {
LABEL_3:
      llvm::detail::IEEEFloat::IEEEFloat(v7, FloatSemantics, &v11);
      if (v12 < 0x41)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else
  {
    v11 = 0;
    v7 = (llvm::detail::IEEEFloat *)(a1 + 8);
    v8 = llvm::APFloatBase::PPCDoubleDouble(Width);
    if (v8 != FloatSemantics)
      goto LABEL_3;
  }
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v7, (uint64_t)FloatSemantics, (uint64_t)&v11);
  if (v12 < 0x41)
    goto LABEL_9;
LABEL_7:
  if (v11)
    MEMORY[0x20BD002D4](v11, 0x1000C8000313F17);
LABEL_9:
  if (v8 == *(void **)v7)
    return llvm::detail::DoubleAPFloat::convertFromAPInt(v7, a3, 1, 1);
  else
    return llvm::detail::IEEEFloat::convertFromAPInt((uint64_t)v7, a3, 1, 1);
}

void `anonymous namespace'::IndexCastOfIndexCast::~IndexCastOfIndexCast(_anonymous_namespace_::IndexCastOfIndexCast *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::IndexCastOfIndexCast::matchAndRewrite(_anonymous_namespace_::IndexCastOfIndexCast *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  mlir::Operation *v5;
  uint64_t DefiningOp;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 (*v10)(uint64_t, uint64_t);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v18[2];
  void *v19;
  uint64_t v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v21[0] = a2;
  v20 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::IndexCastOp,void>::id)
    v5 = a2;
  else
    v5 = 0;
  v18[0] = *(void **)(*((_QWORD *)v5 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v18);
  if (DefiningOp)
  {
    v7 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::IndexCastOp,void>::id)
    {
      v8 = *((_QWORD *)a3 + 2);
      if (v8)
      {
        if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
        {
          v9 = *(_QWORD *)(v7 + 24);
          goto LABEL_12;
        }
LABEL_24:
        v8 = 0;
        v11 = v19;
        if (v19 == v21)
          return v8;
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    if ((*(_BYTE *)(DefiningOp + 46) & 0x80) != 0)
    {
      v12 = *(_QWORD *)(DefiningOp + 72);
      v13 = v20;
      if (v20 < HIDWORD(v20))
      {
LABEL_16:
        *((_QWORD *)v19 + v13) = v7;
        LODWORD(v20) = v20 + 1;
        if (*((_DWORD *)v5 + 9))
          v14 = (uint64_t)v5 - 16;
        else
          v14 = 0;
        if ((*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
        {
          v16 = *(void **)(*((_QWORD *)v19 + 1) + 24);
          v18[0] = *(void **)(*(_QWORD *)v19 + 24);
          v18[1] = v16;
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v18, (mlir::MLIRContext *)2, 0);
        }
        v15 = *((_QWORD *)a3 + 2);
        if (v15)
        {
          if (mlir::RewriterBase::Listener::classof(v15))
          {
            v11 = v19;
            if (v19 == v21)
              return v8;
            goto LABEL_29;
          }
          goto LABEL_24;
        }
        v8 = 0;
        goto LABEL_28;
      }
    }
    else
    {
      v12 = 0;
      v13 = v20;
      if (v20 < HIDWORD(v20))
        goto LABEL_16;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v13 + 1, 8);
    LODWORD(v13) = v20;
    goto LABEL_16;
  }
  v8 = *((_QWORD *)a3 + 2);
  if (v8)
  {
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v9 = *((_QWORD *)v5 + 3);
LABEL_12:
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v8 + 64))(v8, v9, v10, v18);
      v11 = v19;
      if (v19 == v21)
        return v8;
      goto LABEL_29;
    }
    goto LABEL_24;
  }
LABEL_28:
  v11 = v19;
  if (v19 != v21)
LABEL_29:
    free(v11);
  return v8;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::IndexCastOfIndexCast::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::IndexCastOfIndexCast::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::IndexCastOp type";
  v14 = 48;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::IndexCastOfIndexCast::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'res, x' failed to satisfy constraint: ''";
  v14 = 50;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::IndexCastOfExtSI::~IndexCastOfExtSI(_anonymous_namespace_::IndexCastOfExtSI *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::IndexCastOfExtSI::matchAndRewrite(_anonymous_namespace_::IndexCastOfExtSI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  mlir::Operation *v4;
  uint64_t DefiningOp;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v13[2];
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[6];

  v16[4] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v16[0] = a2;
  v15 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::IndexCastOp,void>::id)
    v4 = a2;
  else
    v4 = 0;
  v13[0] = *(void **)(*((_QWORD *)v4 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v13);
  if (DefiningOp)
  {
    v6 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
    {
      if ((*(_BYTE *)(DefiningOp + 46) & 0x80) == 0)
      {
        v10 = v15;
        if (v15 < HIDWORD(v15))
          goto LABEL_18;
        goto LABEL_23;
      }
    }
    else
    {
      v7 = *((_QWORD *)a3 + 2);
      if (!v7
        || !mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2))
      {
LABEL_14:
        v8 = 0;
        v9 = v14;
        if (v14 == v16)
          return v8;
        goto LABEL_20;
      }
    }
    v10 = v15;
    if (v15 < HIDWORD(v15))
      goto LABEL_18;
LABEL_23:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, v16, v10 + 1, 8);
    LODWORD(v10) = v15;
LABEL_18:
    v14[v10] = v6;
    LODWORD(v15) = v15 + 1;
    v11 = *(void **)(v14[1] + 24);
    v13[0] = *(void **)(*v14 + 24);
    v13[1] = v11;
    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v13, (mlir::MLIRContext *)2, 0);
  }
  v8 = *((_QWORD *)a3 + 2);
  if (v8)
  {
    if (mlir::RewriterBase::Listener::classof(v8))
    {
      v9 = v14;
      if (v14 == v16)
        return v8;
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  v9 = v14;
  if (v14 != v16)
LABEL_20:
    free(v9);
  return v8;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::IndexCastOp,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  unint64_t *v13;
  ZinIrHalH13g *v14;
  ZinIrHalH13g *v15;
  uint64_t v17;
  const char *v18;
  __int16 v19;
  uint64_t v20[4];
  __int16 v21;
  unint64_t v22[2];
  unint64_t v23[2];
  _QWORD v24[39];

  v24[38] = *MEMORY[0x24BDAC8D0];
  v17 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.index_cast", (const unsigned __int8 *)0x10, Context);
  if (!v12)
  {
    v21 = 1283;
    v20[2] = (uint64_t)"arith.index_cast";
    v20[3] = 16;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  mlir::ValueRange::ValueRange(v23, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  v13 = mlir::ValueRange::ValueRange(v22, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)v13, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((_QWORD *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::IndexCastOp,void>::id)
    v15 = v14;
  else
    v15 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v15;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::IndexCastOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::IndexCastUIOfIndexCastUI::~IndexCastUIOfIndexCastUI(_anonymous_namespace_::IndexCastUIOfIndexCastUI *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::IndexCastUIOfIndexCastUI::matchAndRewrite(_anonymous_namespace_::IndexCastUIOfIndexCastUI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  mlir::Operation *v5;
  uint64_t DefiningOp;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 (*v10)(uint64_t, uint64_t);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v18[2];
  void *v19;
  uint64_t v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v21[0] = a2;
  v20 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::IndexCastUIOp,void>::id)
    v5 = a2;
  else
    v5 = 0;
  v18[0] = *(void **)(*((_QWORD *)v5 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v18);
  if (DefiningOp)
  {
    v7 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::IndexCastUIOp,void>::id)
    {
      v8 = *((_QWORD *)a3 + 2);
      if (v8)
      {
        if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
        {
          v9 = *(_QWORD *)(v7 + 24);
          goto LABEL_12;
        }
LABEL_24:
        v8 = 0;
        v11 = v19;
        if (v19 == v21)
          return v8;
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    if ((*(_BYTE *)(DefiningOp + 46) & 0x80) != 0)
    {
      v12 = *(_QWORD *)(DefiningOp + 72);
      v13 = v20;
      if (v20 < HIDWORD(v20))
      {
LABEL_16:
        *((_QWORD *)v19 + v13) = v7;
        LODWORD(v20) = v20 + 1;
        if (*((_DWORD *)v5 + 9))
          v14 = (uint64_t)v5 - 16;
        else
          v14 = 0;
        if ((*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
        {
          v16 = *(void **)(*((_QWORD *)v19 + 1) + 24);
          v18[0] = *(void **)(*(_QWORD *)v19 + 24);
          v18[1] = v16;
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v18, (mlir::MLIRContext *)2, 0);
        }
        v15 = *((_QWORD *)a3 + 2);
        if (v15)
        {
          if (mlir::RewriterBase::Listener::classof(v15))
          {
            v11 = v19;
            if (v19 == v21)
              return v8;
            goto LABEL_29;
          }
          goto LABEL_24;
        }
        v8 = 0;
        goto LABEL_28;
      }
    }
    else
    {
      v12 = 0;
      v13 = v20;
      if (v20 < HIDWORD(v20))
        goto LABEL_16;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v13 + 1, 8);
    LODWORD(v13) = v20;
    goto LABEL_16;
  }
  v8 = *((_QWORD *)a3 + 2);
  if (v8)
  {
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v9 = *((_QWORD *)v5 + 3);
LABEL_12:
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v8 + 64))(v8, v9, v10, v18);
      v11 = v19;
      if (v19 == v21)
        return v8;
      goto LABEL_29;
    }
    goto LABEL_24;
  }
LABEL_28:
  v11 = v19;
  if (v19 != v21)
LABEL_29:
    free(v11);
  return v8;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::IndexCastUIOfIndexCastUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::IndexCastUIOfIndexCastUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::IndexCastUIOp type";
  v14 = 50;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::IndexCastUIOfIndexCastUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'res, x' failed to satisfy constraint: ''";
  v14 = 50;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::IndexCastUIOfExtUI::~IndexCastUIOfExtUI(_anonymous_namespace_::IndexCastUIOfExtUI *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::IndexCastUIOfExtUI::matchAndRewrite(_anonymous_namespace_::IndexCastUIOfExtUI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  mlir::Operation *v4;
  uint64_t DefiningOp;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v13[2];
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[6];

  v16[4] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v16[0] = a2;
  v15 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::IndexCastUIOp,void>::id)
    v4 = a2;
  else
    v4 = 0;
  v13[0] = *(void **)(*((_QWORD *)v4 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v13);
  if (DefiningOp)
  {
    v6 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
    {
      if ((*(_BYTE *)(DefiningOp + 46) & 0x80) == 0)
      {
        v10 = v15;
        if (v15 < HIDWORD(v15))
          goto LABEL_18;
        goto LABEL_23;
      }
    }
    else
    {
      v7 = *((_QWORD *)a3 + 2);
      if (!v7
        || !mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2))
      {
LABEL_14:
        v8 = 0;
        v9 = v14;
        if (v14 == v16)
          return v8;
        goto LABEL_20;
      }
    }
    v10 = v15;
    if (v15 < HIDWORD(v15))
      goto LABEL_18;
LABEL_23:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, v16, v10 + 1, 8);
    LODWORD(v10) = v15;
LABEL_18:
    v14[v10] = v6;
    LODWORD(v15) = v15 + 1;
    v11 = *(void **)(v14[1] + 24);
    v13[0] = *(void **)(*v14 + 24);
    v13[1] = v11;
    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v13, (mlir::MLIRContext *)2, 0);
  }
  v8 = *((_QWORD *)a3 + 2);
  if (v8)
  {
    if (mlir::RewriterBase::Listener::classof(v8))
    {
      v9 = v14;
      if (v14 == v16)
        return v8;
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  v9 = v14;
  if (v14 != v16)
LABEL_20:
    free(v9);
  return v8;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::IndexCastUIOp,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  unint64_t *v13;
  ZinIrHalH13g *v14;
  ZinIrHalH13g *v15;
  uint64_t v17;
  const char *v18;
  __int16 v19;
  uint64_t v20[4];
  __int16 v21;
  unint64_t v22[2];
  unint64_t v23[2];
  _QWORD v24[39];

  v24[38] = *MEMORY[0x24BDAC8D0];
  v17 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.index_castui", (const unsigned __int8 *)0x12, Context);
  if (!v12)
  {
    v21 = 1283;
    v20[2] = (uint64_t)"arith.index_castui";
    v20[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  mlir::ValueRange::ValueRange(v23, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  v13 = mlir::ValueRange::ValueRange(v22, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)v13, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((_QWORD *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::IndexCastUIOp,void>::id)
    v15 = v14;
  else
    v15 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v15;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::IndexCastUIOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::BitcastOfBitcast::~BitcastOfBitcast(_anonymous_namespace_::BitcastOfBitcast *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::BitcastOfBitcast::matchAndRewrite(_anonymous_namespace_::BitcastOfBitcast *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  mlir::Operation *v4;
  uint64_t DefiningOp;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 (*v9)(uint64_t, uint64_t);
  void *v10;
  uint64_t v11;
  void *v12;
  void *v14[2];
  void *v15;
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v17[0] = a2;
  v16 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::BitcastOp,void>::id)
    v4 = a2;
  else
    v4 = 0;
  v14[0] = *(void **)(*((_QWORD *)v4 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v14);
  if (DefiningOp)
  {
    v6 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::BitcastOp,void>::id)
    {
      v7 = *((_QWORD *)a3 + 2);
      if (v7)
      {
        if (mlir::RewriterBase::Listener::classof(v7))
        {
          v8 = *(_QWORD *)(v6 + 24);
          goto LABEL_12;
        }
        v7 = 0;
      }
      goto LABEL_18;
    }
    if ((*(_BYTE *)(DefiningOp + 46) & 0x80) != 0)
    {
      v11 = v16;
      if (v16 < HIDWORD(v16))
        goto LABEL_16;
    }
    else
    {
      v11 = v16;
      if (v16 < HIDWORD(v16))
        goto LABEL_16;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, v17, v11 + 1, 8);
    LODWORD(v11) = v16;
LABEL_16:
    *((_QWORD *)v15 + v11) = v6;
    LODWORD(v16) = v16 + 1;
    v12 = *(void **)(*((_QWORD *)v15 + 1) + 24);
    v14[0] = *(void **)(*(_QWORD *)v15 + 24);
    v14[1] = v12;
    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v14, (mlir::MLIRContext *)2, 0);
  }
  v7 = *((_QWORD *)a3 + 2);
  if (v7)
  {
    if (mlir::RewriterBase::Listener::classof(v7))
    {
      v8 = *((_QWORD *)v4 + 3);
LABEL_12:
      v7 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v7 + 64))(v7, v8, v9, v14);
      v10 = v15;
      if (v15 == v17)
        return v7;
      goto LABEL_19;
    }
    v7 = 0;
    v10 = v15;
    if (v15 == v17)
      return v7;
LABEL_19:
    free(v10);
    return v7;
  }
LABEL_18:
  v10 = v15;
  if (v15 != v17)
    goto LABEL_19;
  return v7;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::BitcastOfBitcast::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::BitcastOfBitcast::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::BitcastOp type";
  v14 = 46;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::CmpIExtSI::~CmpIExtSI(_anonymous_namespace_::CmpIExtSI *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::CmpIExtSI::matchAndRewrite(_anonymous_namespace_::CmpIExtSI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  int v5;
  mlir::Operation *v6;
  uint64_t InherentAttr;
  char v8;
  uint64_t v9;
  uint64_t DefiningOp;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  __n128 (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v27;
  uint64_t v28;
  void *v29[10];
  _QWORD *v30;
  uint64_t v31;
  _QWORD v32[6];

  v32[4] = *MEMORY[0x24BDAC8D0];
  v5 = *((unsigned __int8 *)a2 + 47);
  v28 = 0;
  v30 = v32;
  v32[0] = a2;
  v31 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  if (v5 && (InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"predicate", 9), v8))
  {
    v9 = InherentAttr;
    if (!InherentAttr)
      goto LABEL_15;
  }
  else
  {
    v9 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "predicate", 9uLL);
    if (!v9)
    {
LABEL_15:
      v15 = *((_QWORD *)a3 + 2);
      if (v15 && mlir::RewriterBase::Listener::classof(v15))
      {
        v16 = *((_QWORD *)a2 + 3);
LABEL_18:
        v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v15 + 64))(v15, v16, v17, v29);
        goto LABEL_23;
      }
      goto LABEL_41;
    }
  }
  if ((mlir::arith::CmpIPredicateAttr::classof(v9) & 1) == 0)
    goto LABEL_15;
  v28 = v9;
  v29[0] = *(void **)(*((_QWORD *)v6 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v29);
  if (!DefiningOp)
  {
    v12 = *((_QWORD *)a3 + 2);
    if (!v12)
      goto LABEL_42;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_41;
    v13 = *((_QWORD *)v6 + 3);
    goto LABEL_22;
  }
  v11 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
  {
    v12 = *((_QWORD *)a3 + 2);
    if (!v12)
      goto LABEL_42;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_41;
    v13 = *(_QWORD *)(v11 + 24);
    goto LABEL_22;
  }
  if ((*(_BYTE *)(DefiningOp + 46) & 0x80) != 0)
  {
    v20 = *(_QWORD *)(DefiningOp + 72);
    v21 = v31;
    if (v31 < HIDWORD(v31))
      goto LABEL_27;
  }
  else
  {
    v20 = 0;
    v21 = v31;
    if (v31 < HIDWORD(v31))
      goto LABEL_27;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v21 + 1, 8);
  LODWORD(v21) = v31;
LABEL_27:
  v30[v21] = v11;
  LODWORD(v31) = v31 + 1;
  v29[0] = *(void **)(*((_QWORD *)v6 + 9) + 56);
  v22 = mlir::Value::getDefiningOp((mlir::Value *)v29);
  if (v22)
  {
    v23 = v22;
    if (*(_UNKNOWN **)(*(_QWORD *)(v22 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
    {
      v12 = *((_QWORD *)a3 + 2);
      if (!v12)
        goto LABEL_42;
      if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
        goto LABEL_41;
      v13 = *(_QWORD *)(v23 + 24);
      goto LABEL_22;
    }
    if ((*(_BYTE *)(v22 + 46) & 0x80) != 0)
    {
      v24 = *(_QWORD *)(v22 + 72);
      v25 = v31;
      if (v31 < HIDWORD(v31))
      {
LABEL_37:
        v30[v25] = v23;
        LODWORD(v31) = v31 + 1;
        if ((*(_QWORD *)(*(_QWORD *)(v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(*(_QWORD *)(v24 + 24)
                                                                                             + 8) & 0xFFFFFFFFFFFFFFF8))
        {
          v15 = *((_QWORD *)a3 + 2);
          if (v15 && mlir::RewriterBase::Listener::classof(v15))
          {
            v16 = *((_QWORD *)a2 + 3);
            goto LABEL_18;
          }
          goto LABEL_41;
        }
        if (!mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v28)
          || mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v28) == 1)
        {
          v27 = *(void **)(v30[1] + 24);
          v29[0] = *(void **)(*v30 + 24);
          v29[1] = v27;
          v29[2] = *(void **)(v30[2] + 24);
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v29, (mlir::MLIRContext *)3, 0);
        }
LABEL_23:
        v12 = v18;
        v19 = v30;
        if (v30 == v32)
          return v12;
        goto LABEL_43;
      }
    }
    else
    {
      v24 = 0;
      v25 = v31;
      if (v31 < HIDWORD(v31))
        goto LABEL_37;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v25 + 1, 8);
    LODWORD(v25) = v31;
    goto LABEL_37;
  }
  v12 = *((_QWORD *)a3 + 2);
  if (!v12)
    goto LABEL_42;
  if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
  {
    v13 = *((_QWORD *)v6 + 3);
LABEL_22:
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v12 + 64))(v12, v13, v14, v29);
    goto LABEL_23;
  }
LABEL_41:
  v12 = 0;
LABEL_42:
  v19 = v30;
  if (v30 != v32)
LABEL_43:
    free(v19);
  return v12;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<`anonymous namespace'::CmpIExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && mlir::RewriterBase::Listener::classof(a1))
  else
    return 0;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::CmpIExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "expected op 'arith.cmpi' to have attribute 'predicate' of type '::mlir::arith::CmpIPredicateAttr'";
  v14 = 97;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::CmpIExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::CmpIExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::ExtSIOp type";
  v14 = 44;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::CmpIExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::CmpIExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::ExtSIOp type";
  v14 = 44;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::CmpIExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'a, b' failed to satisfy constraint: ''";
  v14 = 48;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::CmpIExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'pred' failed to satisfy constraint: ''";
  v14 = 48;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::CmpIExtUI::~CmpIExtUI(_anonymous_namespace_::CmpIExtUI *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::CmpIExtUI::matchAndRewrite(_anonymous_namespace_::CmpIExtUI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  int v5;
  mlir::Operation *v6;
  uint64_t InherentAttr;
  char v8;
  uint64_t v9;
  uint64_t DefiningOp;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  __n128 (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v27;
  uint64_t v28;
  void *v29[10];
  _QWORD *v30;
  uint64_t v31;
  _QWORD v32[6];

  v32[4] = *MEMORY[0x24BDAC8D0];
  v5 = *((unsigned __int8 *)a2 + 47);
  v28 = 0;
  v30 = v32;
  v32[0] = a2;
  v31 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  if (v5 && (InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"predicate", 9), v8))
  {
    v9 = InherentAttr;
    if (!InherentAttr)
      goto LABEL_15;
  }
  else
  {
    v9 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "predicate", 9uLL);
    if (!v9)
    {
LABEL_15:
      v15 = *((_QWORD *)a3 + 2);
      if (v15 && mlir::RewriterBase::Listener::classof(v15))
      {
        v16 = *((_QWORD *)a2 + 3);
LABEL_18:
        v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v15 + 64))(v15, v16, v17, v29);
        goto LABEL_23;
      }
      goto LABEL_41;
    }
  }
  if ((mlir::arith::CmpIPredicateAttr::classof(v9) & 1) == 0)
    goto LABEL_15;
  v28 = v9;
  v29[0] = *(void **)(*((_QWORD *)v6 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v29);
  if (!DefiningOp)
  {
    v12 = *((_QWORD *)a3 + 2);
    if (!v12)
      goto LABEL_42;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_41;
    v13 = *((_QWORD *)v6 + 3);
    goto LABEL_22;
  }
  v11 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
  {
    v12 = *((_QWORD *)a3 + 2);
    if (!v12)
      goto LABEL_42;
    if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_41;
    v13 = *(_QWORD *)(v11 + 24);
    goto LABEL_22;
  }
  if ((*(_BYTE *)(DefiningOp + 46) & 0x80) != 0)
  {
    v20 = *(_QWORD *)(DefiningOp + 72);
    v21 = v31;
    if (v31 < HIDWORD(v31))
      goto LABEL_27;
  }
  else
  {
    v20 = 0;
    v21 = v31;
    if (v31 < HIDWORD(v31))
      goto LABEL_27;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v21 + 1, 8);
  LODWORD(v21) = v31;
LABEL_27:
  v30[v21] = v11;
  LODWORD(v31) = v31 + 1;
  v29[0] = *(void **)(*((_QWORD *)v6 + 9) + 56);
  v22 = mlir::Value::getDefiningOp((mlir::Value *)v29);
  if (v22)
  {
    v23 = v22;
    if (*(_UNKNOWN **)(*(_QWORD *)(v22 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
    {
      v12 = *((_QWORD *)a3 + 2);
      if (!v12)
        goto LABEL_42;
      if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
        goto LABEL_41;
      v13 = *(_QWORD *)(v23 + 24);
      goto LABEL_22;
    }
    if ((*(_BYTE *)(v22 + 46) & 0x80) != 0)
    {
      v24 = *(_QWORD *)(v22 + 72);
      v25 = v31;
      if (v31 < HIDWORD(v31))
      {
LABEL_37:
        v30[v25] = v23;
        LODWORD(v31) = v31 + 1;
        if ((*(_QWORD *)(*(_QWORD *)(v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(*(_QWORD *)(v24 + 24)
                                                                                             + 8) & 0xFFFFFFFFFFFFFFF8))
        {
          v15 = *((_QWORD *)a3 + 2);
          if (v15 && mlir::RewriterBase::Listener::classof(v15))
          {
            v16 = *((_QWORD *)a2 + 3);
            goto LABEL_18;
          }
          goto LABEL_41;
        }
        if (!mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v28)
          || mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v28) == 1)
        {
          v27 = *(void **)(v30[1] + 24);
          v29[0] = *(void **)(*v30 + 24);
          v29[1] = v27;
          v29[2] = *(void **)(v30[2] + 24);
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v29, (mlir::MLIRContext *)3, 0);
        }
LABEL_23:
        v12 = v18;
        v19 = v30;
        if (v30 == v32)
          return v12;
        goto LABEL_43;
      }
    }
    else
    {
      v24 = 0;
      v25 = v31;
      if (v31 < HIDWORD(v31))
        goto LABEL_37;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v25 + 1, 8);
    LODWORD(v25) = v31;
    goto LABEL_37;
  }
  v12 = *((_QWORD *)a3 + 2);
  if (!v12)
    goto LABEL_42;
  if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
  {
    v13 = *((_QWORD *)v6 + 3);
LABEL_22:
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v12 + 64))(v12, v13, v14, v29);
    goto LABEL_23;
  }
LABEL_41:
  v12 = 0;
LABEL_42:
  v19 = v30;
  if (v30 != v32)
LABEL_43:
    free(v19);
  return v12;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<`anonymous namespace'::CmpIExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && mlir::RewriterBase::Listener::classof(a1))
  else
    return 0;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::CmpIExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "expected op 'arith.cmpi' to have attribute 'predicate' of type '::mlir::arith::CmpIPredicateAttr'";
  v14 = 97;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::CmpIExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::CmpIExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::ExtUIOp type";
  v14 = 44;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::CmpIExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::CmpIExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::ExtUIOp type";
  v14 = 44;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::CmpIExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'a, b' failed to satisfy constraint: ''";
  v14 = 48;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::CmpIExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'pred' failed to satisfy constraint: ''";
  v14 = 48;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void mlir::RewritePatternSet::addImpl<CmpFIntToFPConst,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  const char *v20;
  unint64_t v21;
  uint64_t v22;
  const char *v23;
  unint64_t v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;

  v8 = operator new();
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v26, 1);
  mlir::Pattern::Pattern(v8 + 8, (uint64_t)"arith.cmpf", 10, (__int16)v26, v9, 0, 0);
  *(_QWORD *)v8 = &unk_24C01B640;
  v25 = v8;
  if (*(_QWORD *)(v8 + 72))
  {
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
      goto LABEL_3;
  }
  else
  {
    v26 = "StringRef llvm::getTypeName() [DesiredTypeName = CmpFIntToFPConst]";
    v27 = 66;
    v18 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
    if (v27 >= v18)
      v19 = v18;
    else
      v19 = v27;
    v20 = &v26[v19];
    v21 = v27 - v19;
    if (v27 - v19 >= 0x12)
      v22 = 18;
    else
      v22 = v27 - v19;
    v23 = &v20[v22];
    v24 = v21 - v22;
    if (v24 >= v24 - 1)
      --v24;
    *(_QWORD *)(v8 + 64) = v23;
    *(_QWORD *)(v8 + 72) = v24;
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 80, (void *)(v8 + 96), v12, 16);
  LODWORD(v11) = *(_DWORD *)(v8 + 88);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(*(_QWORD *)(v8 + 80) + 16 * v11), a2, v10);
    LODWORD(v11) = *(_DWORD *)(v8 + 88);
  }
LABEL_5:
  *(_DWORD *)(v8 + 88) = v11 + (v10 >> 4);
  v13 = (uint64_t *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v25);
    v15 = v25;
    a1[2] = v14;
    v25 = 0;
    if (v15)
    {
      v16 = *(void **)(v15 + 80);
      if (v16 != (void *)(v15 + 96))
        free(v16);
      v17 = *(void **)(v15 + 32);
      if (v17 != (void *)(v15 + 48))
        free(v17);
      MEMORY[0x20BD002F8](v15, 0x10D1C403AF06869);
    }
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void CmpFIntToFPConst::~CmpFIntToFPConst(CmpFIntToFPConst *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::arith::CmpFOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::arith::CmpFOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::arith::CmpFOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t CmpFIntToFPConst::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t DefiningOp;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  llvm::APFloatBase *Value;
  uint64_t v12;
  void *v13;
  void **v14;
  int FPMantissaWidth;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t Width;
  const llvm::detail::IEEEFloat *v21;
  llvm::APInt *v22;
  int v23;
  llvm::detail *v24;
  int v25;
  const llvm::APFloat *v26;
  int v27;
  uint64_t Int;
  ZinIrHalH13g *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  mlir::Builder *v34;
  void **v35;
  void *FloatSemantics;
  ZinIrHalH13g *v37;
  void **v38;
  uint64_t v39;
  void **v40;
  void **v41;
  void **v42;
  void **v43;
  void **v44;
  void **v45;
  void **v46;
  uint64_t v47;
  ZinIrHalH13g *v48;
  ZinIrHalH13g *v49;
  int v50;
  _QWORD *IntegerAttr;
  const llvm::APInt *v52;
  unsigned int v53;
  char v54;
  uint64_t v55;
  unsigned int v56;
  char v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63[8];
  void *v64;
  uint64_t v65;
  _QWORD v66[4];

  v66[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 56);
  v62 = 0;
  *(_QWORD *)v63 = v5;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v63);
  if (DefiningOp)
  {
    v7 = DefiningOp;
    if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
    {
      v64 = v66;
      v65 = 0x100000000;
      mlir::Operation::fold(v7, 0, 0, (uint64_t)&v64);
      v8 = (*(_QWORD *)v64 & 0xFFFFFFFFFFFFFFF8) == 0
        || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v64 & 0xFFFFFFFFFFFFFFF8) + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
      if (!v8)
        v62 = *(_QWORD *)v64 & 0xFFFFFFFFFFFFFFF8;
      if (v64 != v66)
        free(v64);
      if (!v8)
      {
        Value = (llvm::APFloatBase *)mlir::FloatAttr::getValue((mlir::FloatAttr *)&v62, (uint64_t)&v64);
        v12 = v65;
        v13 = llvm::APFloatBase::PPCDoubleDouble(Value);
        v14 = (void **)v66[0];
        if (v13 != (void *)v12)
          v14 = &v64;
        if ((*((_BYTE *)v14 + 28) & 7) == 1)
        {
          v9 = 0;
          if (v13 != (void *)v12)
          {
LABEL_17:
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v65);
            return v9;
          }
LABEL_25:
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v65);
          return v9;
        }
        v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
        FPMantissaWidth = mlir::FloatType::getFPMantissaWidth((mlir::FloatType *)&v61);
        if (FPMantissaWidth < 1)
          goto LABEL_23;
        v16 = FPMantissaWidth;
        *(_QWORD *)v63 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
        v17 = mlir::Value::getDefiningOp((mlir::Value *)v63);
        if (v17
          && *(_UNKNOWN **)(*(_QWORD *)(v17 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SIToFPOp,void>::id)
        {
          v18 = 0;
        }
        else
        {
          *(_QWORD *)v63 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
          v17 = mlir::Value::getDefiningOp((mlir::Value *)v63);
          if (!v17
            || *(_UNKNOWN **)(*(_QWORD *)(v17 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::UIToFPOp,void>::id)
          {
            goto LABEL_23;
          }
          v18 = 1;
        }
        v19 = *(_QWORD *)(*(_QWORD *)(v17 + 72) + 24);
        v59 = *(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8;
        v60 = v19;
        Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&v59);
        v22 = (llvm::APInt *)Width;
        v50 = v18 ^ 1;
        if ((int)Width > v16)
        {
          v23 = Width - v50;
          if (v13 == (void *)v65)
            v24 = (llvm::detail *)(v66[0] + 8);
          else
            v24 = (llvm::detail *)&v65;
          v25 = llvm::detail::ilogb(v24, v21);
          if (v25 == 0x7FFFFFFF)
          {
            llvm::APFloat::getLargest((llvm::APFloatBase *)v65, 0, (uint64_t)v63);
            v27 = llvm::ilogb((llvm *)v63, v26);
            llvm::APFloat::~APFloat((llvm::APFloat *)v63);
            v9 = 0;
            if (v27 < v23)
              goto LABEL_24;
          }
          else if (v16 <= v25 && v25 <= v23)
          {
LABEL_23:
            v9 = 0;
            goto LABEL_24;
          }
        }
        *(_QWORD *)v63 = *(_QWORD *)(a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
        Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v63);
        if (Int == 14)
        {
          LOBYTE(v55) = 0;
          v9 = 1;
          goto LABEL_41;
        }
        if (Int == 7)
        {
          v9 = 1;
          LOBYTE(v55) = 1;
LABEL_41:
          v63[0] = 1;
          v29 = mlir::OpBuilder::create<mlir::arith::ConstantIntOp,BOOL,int>((mlir::Builder *)(a3 + 8), *(_QWORD *)(a2 + 24), (unsigned __int8 *)&v55, v63);
          (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a3 + 32))(a3, a2, v29);
          goto LABEL_24;
        }
        *(_QWORD *)v63 = *(_QWORD *)(a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
        v30 = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v63);
        v31 = CmpFIntToFPConst::convertToIntegerPredicate(v30);
        v58 = v31;
        if ((v18 & 1) != 0)
        {
          llvm::APFloat::APFloat((llvm::APFloatBase *)v63, (void *)v65);
          llvm::APInt::getMaxValue(v22, (llvm::APInt *)&v55);
          llvm::APFloat::convertFromAPInt(v63, (uint64_t)&v55, 0, 1);
          if (v56 >= 0x41 && v55)
            MEMORY[0x20BD002D4](v55, 0x1000C8000313F17);
          if (llvm::APFloat::operator<(v63, (uint64_t)&v64))
          {
            if (v31 > 7)
              goto LABEL_81;
            v32 = 1 << v31;
            v33 = 194;
LABEL_69:
            if ((v32 & v33) != 0)
            {
              LOBYTE(v52) = 1;
              LODWORD(v55) = 1;
LABEL_82:
              v34 = (mlir::Builder *)(a3 + 8);
              goto LABEL_83;
            }
LABEL_81:
            LOBYTE(v52) = 0;
            LODWORD(v55) = 1;
            goto LABEL_82;
          }
          llvm::APFloat::~APFloat((llvm::APFloat *)v63);
          llvm::APFloat::APFloat((llvm::APFloatBase *)v63, (void *)v65);
          v56 = v22;
          if (v22 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v55, 0, 0);
          else
            v55 = 0;
          llvm::APFloat::convertFromAPInt(v63, (uint64_t)&v55, 0, 1);
          if (v56 >= 0x41 && v55)
            MEMORY[0x20BD002D4](v55, 0x1000C8000313F17);
          if (llvm::APFloat::operator>(v63, (uint64_t)&v64))
          {
            if (v31 > 9)
              goto LABEL_81;
            v32 = 1 << v31;
            v33 = 770;
            goto LABEL_69;
          }
        }
        else
        {
          llvm::APFloat::APFloat((llvm::APFloatBase *)v63, (void *)v65);
          llvm::APInt::getSignedMaxValue(v22, (llvm::APInt *)&v55);
          llvm::APFloat::convertFromAPInt(v63, (uint64_t)&v55, 1, 1);
          if (v56 >= 0x41 && v55)
            MEMORY[0x20BD002D4](v55, 0x1000C8000313F17);
          if (llvm::APFloat::operator<(v63, (uint64_t)&v64))
          {
            v34 = (mlir::Builder *)(a3 + 8);
            LOBYTE(v52) = v31 - 1 <= 2;
            LODWORD(v55) = 1;
LABEL_83:
            v37 = mlir::OpBuilder::create<mlir::arith::ConstantIntOp,BOOL,int>(v34, *(_QWORD *)(a2 + 24), (unsigned __int8 *)&v52, (unsigned int *)&v55);
            (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a3 + 32))(a3, a2, v37);
            llvm::APFloat::~APFloat((llvm::APFloat *)v63);
            v9 = 1;
            goto LABEL_24;
          }
          llvm::APFloat::~APFloat((llvm::APFloat *)v63);
          llvm::APFloat::APFloat((llvm::APFloatBase *)v63, (void *)v65);
          llvm::APInt::getSignedMinValue(v22, (llvm::APInt *)&v55);
          llvm::APFloat::convertFromAPInt(v63, (uint64_t)&v55, 1, 1);
          if (v56 >= 0x41 && v55)
            MEMORY[0x20BD002D4](v55, 0x1000C8000313F17);
          if (llvm::APFloat::operator>(v63, (uint64_t)&v64))
          {
            if (v31 > 5)
              goto LABEL_81;
            v32 = 1 << v31;
            v33 = 50;
            goto LABEL_69;
          }
        }
        llvm::APFloat::~APFloat((llvm::APFloat *)v63);
        v54 = 0;
        v56 = v22;
        if (v22 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v55, 0, 0);
        else
          v55 = 0;
        v57 = v18;
        v9 = 0;
        if (llvm::APFloat::convertToInteger((uint64_t)&v64, (uint64_t)&v55, 0, &v54) == 1)
        {
LABEL_126:
          if (v56 >= 0x41 && v55)
            MEMORY[0x20BD002D4](v55, 0x1000C8000313F17);
LABEL_24:
          if (v13 != (void *)v65)
            goto LABEL_17;
          goto LABEL_25;
        }
        if (v13 == (void *)v65)
          v35 = (void **)v66[0];
        else
          v35 = &v64;
        if ((*((_BYTE *)v35 + 28) & 7) != 3)
        {
          FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v61);
          v53 = mlir::FloatType::getWidth((mlir::FloatType *)&v61);
          if (v53 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v52, 0, 0);
          else
            v52 = 0;
          llvm::APFloat::APFloat((llvm::APFloatBase *)v63, FloatSemantics, &v52);
          if (v53 >= 0x41 && v52)
            MEMORY[0x20BD002D4](v52, 0x1000C8000313F17);
          llvm::APFloat::convertFromAPInt(v63, (uint64_t)&v55, v50, 1);
          if (!llvm::APFloat::operator==(v63, (uint64_t)&v64))
          {
            switch(v31)
            {
              case 0uLL:
                goto LABEL_113;
              case 1uLL:
                goto LABEL_129;
              case 2uLL:
                v38 = &v64;
                if (v13 == (void *)v65)
                  v38 = (void **)v66[0];
                if ((*((_BYTE *)v38 + 28) & 8) != 0)
                  goto LABEL_123;
                v39 = 3;
                goto LABEL_122;
              case 3uLL:
                v40 = &v64;
                if (v13 == (void *)v65)
                  v40 = (void **)v66[0];
                if ((*((_BYTE *)v40 + 28) & 8) == 0)
                  goto LABEL_123;
                v39 = 2;
                goto LABEL_122;
              case 4uLL:
                v41 = &v64;
                if (v13 == (void *)v65)
                  v41 = (void **)v66[0];
                if ((*((_BYTE *)v41 + 28) & 8) == 0)
                  goto LABEL_123;
                v39 = 5;
                goto LABEL_122;
              case 5uLL:
                v42 = &v64;
                if (v13 == (void *)v65)
                  v42 = (void **)v66[0];
                if ((*((_BYTE *)v42 + 28) & 8) != 0)
                  goto LABEL_123;
                v39 = 4;
                goto LABEL_122;
              case 6uLL:
                v43 = &v64;
                if (v13 == (void *)v65)
                  v43 = (void **)v66[0];
                if ((*((_BYTE *)v43 + 28) & 8) != 0)
                  goto LABEL_113;
                v39 = 7;
                goto LABEL_122;
              case 7uLL:
                v44 = &v64;
                if (v13 == (void *)v65)
                  v44 = (void **)v66[0];
                if ((*((_BYTE *)v44 + 28) & 8) == 0)
                  goto LABEL_123;
LABEL_113:
                LOBYTE(IntegerAttr) = 0;
                goto LABEL_130;
              case 8uLL:
                v45 = &v64;
                if (v13 == (void *)v65)
                  v45 = (void **)v66[0];
                if ((*((_BYTE *)v45 + 28) & 8) == 0)
                  goto LABEL_123;
                goto LABEL_129;
              case 9uLL:
                v46 = &v64;
                if (v13 == (void *)v65)
                  v46 = (void **)v66[0];
                if ((*((_BYTE *)v46 + 28) & 8) == 0)
                {
                  v39 = 8;
LABEL_122:
                  v58 = v39;
                  goto LABEL_123;
                }
LABEL_129:
                LOBYTE(IntegerAttr) = 1;
LABEL_130:
                LODWORD(v52) = 1;
                v49 = mlir::OpBuilder::create<mlir::arith::ConstantIntOp,BOOL,int>((mlir::Builder *)(a3 + 8), *(_QWORD *)(a2 + 24), (unsigned __int8 *)&IntegerAttr, (unsigned int *)&v52);
                (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a3 + 32))(a3, a2, v49);
                llvm::APFloat::~APFloat((llvm::APFloat *)v63);
                break;
              default:
                goto LABEL_123;
            }
            goto LABEL_125;
          }
LABEL_123:
          llvm::APFloat::~APFloat((llvm::APFloat *)v63);
        }
        v47 = *(_QWORD *)(a2 + 24);
        v52 = (const llvm::APInt *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
        IntegerAttr = (_QWORD *)mlir::Builder::getIntegerAttr(a3 + 8, (uint64_t)v52, (llvm::APInt *)&v55);
        *(_QWORD *)v63 = mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::Type,mlir::IntegerAttr>((mlir::OpBuilder *)(a3 + 8), v47, (uint64_t *)&v52, &IntegerAttr);
        v48 = mlir::OpBuilder::create<mlir::arith::CmpIOp,mlir::arith::CmpIPredicate &,mlir::Value &,mlir::arith::ConstantOp>((uint64_t *)(a3 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v58, &v60, v63);
        (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a3 + 32))(a3, a2, v48);
LABEL_125:
        v9 = 1;
        goto LABEL_126;
      }
    }
  }
  return 0;
}

uint64_t llvm::ilogb(llvm *this, const llvm::APFloat *a2)
{
  char *v2;
  void *v3;
  const llvm::detail::IEEEFloat *v4;
  llvm::detail *v5;

  v2 = (char *)this + 8;
  v3 = (void *)*((_QWORD *)this + 1);
  if (llvm::APFloatBase::PPCDoubleDouble(this) == v3)
    v5 = (llvm::detail *)(*((_QWORD *)v2 + 1) + 8);
  else
    v5 = (llvm::detail *)v2;
  return llvm::detail::ilogb(v5, v4);
}

uint64_t CmpFIntToFPConst::convertToIntegerPredicate(uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_2071A7294 + 4 * byte_207AB55F8[a1 - 1]))(0);
}

uint64_t sub_2071A7294(uint64_t a1, int a2)
{
  if (a2)
    return 8;
  else
    return 4;
}

uint64_t sub_2071A72D8()
{
  return 1;
}

BOOL llvm::APFloat::operator>(_QWORD *a1, uint64_t a2)
{
  llvm::detail::DoubleAPFloat *v3;
  void *v4;
  void *v5;
  const llvm::detail::DoubleAPFloat *v6;
  int v7;

  v3 = (llvm::detail::DoubleAPFloat *)(a1 + 1);
  v4 = (void *)a1[1];
  v5 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  v6 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v5 == v4)
    llvm::detail::DoubleAPFloat::compare(v3, v6);
  else
    llvm::detail::IEEEFloat::compare(v3, v6);
  return v7 == 2;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::Type,mlir::IntegerAttr>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, _QWORD **a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  ZinIrHalH13g *v16;
  ZinIrHalH13g *v17;
  _QWORD *v19;
  uint64_t v20;
  const char *v21;
  __int16 v22;
  uint64_t v23[4];
  __int16 v24;
  _QWORD v25[8];
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD v29[29];

  v29[28] = *MEMORY[0x24BDAC8D0];
  v20 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.constant", (const unsigned __int8 *)0xE, Context);
  if (!v10)
  {
    v24 = 1283;
    v23[2] = (uint64_t)"arith.constant";
    v23[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v9);
  v11 = *a3;
  v12 = *a4;
  if (*a4)
  {
    v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v12 + 8);
    v14 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(v25);
    *v14 = v12;
    v14[1] = v13;
    v15 = v27;
    if (v27 < v28)
      goto LABEL_5;
    goto LABEL_4;
  }
  v19 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(v25);
  *v19 = 0;
  v19[1] = 0;
  v15 = v27;
  if (v27 >= v28)
  {
LABEL_4:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v29, v15 + 1, 8);
    LODWORD(v15) = v27;
  }
LABEL_5:
  *(_QWORD *)(v26 + 8 * v15) = v11;
  ++v27;
  v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((_QWORD *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ConstantOp,void>::id)
    v17 = v16;
  else
    v17 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v17;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ConstantIntOp,BOOL,int>(mlir::Builder *a1, uint64_t a2, unsigned __int8 *a3, unsigned int *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t IntegerType;
  _QWORD *IntegerAttr;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  ZinIrHalH13g *v18;
  ZinIrHalH13g *v19;
  _QWORD *v20;
  uint64_t v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[4];
  __int16 v26;
  _QWORD v27[8];
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD v31[29];

  v31[28] = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.constant", (const unsigned __int8 *)0xE, Context);
  if (!v10)
  {
    v26 = 1283;
    v25[2] = (uint64_t)"arith.constant";
    v25[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v9);
  v11 = *a3;
  IntegerType = mlir::Builder::getIntegerType(a1, *a4);
  IntegerAttr = (_QWORD *)mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, v11);
  v14 = IntegerAttr;
  if (IntegerAttr)
  {
    v15 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*IntegerAttr + 8);
    v16 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(v27);
    *v16 = v14;
    v16[1] = v15;
    v17 = v29;
    if (v29 < v30)
      goto LABEL_5;
    goto LABEL_4;
  }
  v20 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(v27);
  *v20 = 0;
  v20[1] = 0;
  v17 = v29;
  if (v29 >= v30)
  {
LABEL_4:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v17 + 1, 8);
    LODWORD(v17) = v29;
  }
LABEL_5:
  *(_QWORD *)(v28 + 8 * v17) = IntegerType;
  ++v29;
  v18 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v27);
  v19 = v18;
  if (v18)
  {
    if (*(_UNKNOWN **)(*((_QWORD *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ConstantOp,void>::id)
    {
      v25[0] = *((_QWORD *)v18 - 1) & 0xFFFFFFFFFFFFFFF8;
      if (!mlir::Type::isSignlessInteger((mlir::Type *)v25))
        v19 = 0;
    }
    else
    {
      v19 = 0;
    }
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v19;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::CmpIOp,mlir::arith::CmpIPredicate &,mlir::Value &,mlir::arith::ConstantOp>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.cmpi", (const unsigned __int8 *)0xA, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"arith.cmpi";
    v19[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::arith::CmpIOp::build(a1, (uint64_t)v21, *a3, *a4, *a5 - 16);
  v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void mlir::RewritePatternSet::addImpl<SelectI1Simplify,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new();
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern(v8 + 8, (uint64_t)"arith.select", 12, (__int16)v24, v9, 0, 0);
  *(_QWORD *)v8 = &unk_24C01B698;
  v23 = v8;
  if (*(_QWORD *)(v8 + 72))
  {
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = SelectI1Simplify]";
    v25 = 66;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    *(_QWORD *)(v8 + 64) = v21;
    *(_QWORD *)(v8 + 72) = v22;
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 80, (void *)(v8 + 96), v12, 16);
  LODWORD(v11) = *(_DWORD *)(v8 + 88);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(*(_QWORD *)(v8 + 80) + 16 * v11), a2, v10);
    LODWORD(v11) = *(_DWORD *)(v8 + 88);
  }
LABEL_5:
  *(_DWORD *)(v8 + 88) = v11 + (v10 >> 4);
  v13 = (uint64_t *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<SelectToExtUI,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new();
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern(v8 + 8, (uint64_t)"arith.select", 12, (__int16)v24, v9, 0, 0);
  *(_QWORD *)v8 = &unk_24C017348;
  v23 = v8;
  if (*(_QWORD *)(v8 + 72))
  {
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = SelectToExtUI]";
    v25 = 63;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    *(_QWORD *)(v8 + 64) = v21;
    *(_QWORD *)(v8 + 72) = v22;
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 80, (void *)(v8 + 96), v12, 16);
  LODWORD(v11) = *(_DWORD *)(v8 + 88);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(*(_QWORD *)(v8 + 80) + 16 * v11), a2, v10);
    LODWORD(v11) = *(_DWORD *)(v8 + 88);
  }
LABEL_5:
  *(_DWORD *)(v8 + 88) = v11 + (v10 >> 4);
  v13 = (uint64_t *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void `anonymous namespace'::RedundantSelectFalse::~RedundantSelectFalse(_anonymous_namespace_::RedundantSelectFalse *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::RedundantSelectFalse::matchAndRewrite(_anonymous_namespace_::RedundantSelectFalse *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  mlir::Operation *v5;
  uint64_t v6;
  uint64_t DefiningOp;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  void *v19[2];
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[6];

  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v22[0] = a2;
  v21 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id)
    v5 = a2;
  else
    v5 = 0;
  v6 = *((_QWORD *)v5 + 9);
  v19[0] = *(void **)(v6 + 88);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v19);
  if (DefiningOp)
  {
    v8 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id)
    {
      v9 = *((_QWORD *)a3 + 2);
      if (!v9)
        goto LABEL_22;
      if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      {
        v10 = *(_QWORD *)(v8 + 24);
LABEL_12:
        v12 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v9 + 64))(v9, v10, v11, v19);
        goto LABEL_13;
      }
      goto LABEL_21;
    }
    if ((*(_BYTE *)(DefiningOp + 46) & 0x80) != 0)
    {
      v14 = *(_QWORD *)(DefiningOp + 72);
      v15 = v21;
      if (v21 < HIDWORD(v21))
        goto LABEL_17;
    }
    else
    {
      v14 = 0;
      v15 = v21;
      if (v21 < HIDWORD(v21))
        goto LABEL_17;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v22, v15 + 1, 8);
    LODWORD(v15) = v21;
LABEL_17:
    v20[v15] = v8;
    LODWORD(v21) = v21 + 1;
    if (*(_QWORD *)(v6 + 24) == *(_QWORD *)(v14 + 24))
    {
      v18 = *(void **)(v20[1] + 24);
      v19[0] = *(void **)(*v20 + 24);
      v19[1] = v18;
      mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v19, (mlir::MLIRContext *)2, 0);
    }
    v16 = *((_QWORD *)a3 + 2);
    if (v16 && mlir::RewriterBase::Listener::classof(v16))
    {
LABEL_13:
      v9 = v12;
      v13 = v20;
      if (v20 == v22)
        return v9;
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  v9 = *((_QWORD *)a3 + 2);
  if (!v9)
    goto LABEL_22;
  if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
  {
    v10 = *((_QWORD *)v5 + 3);
    goto LABEL_12;
  }
LABEL_21:
  v9 = 0;
LABEL_22:
  v13 = v20;
  if (v20 != v22)
LABEL_23:
    free(v13);
  return v9;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::SelectOp,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  unint64_t *v13;
  ZinIrHalH13g *v14;
  ZinIrHalH13g *v15;
  uint64_t v17;
  const char *v18;
  __int16 v19;
  uint64_t v20[4];
  __int16 v21;
  unint64_t v22[2];
  unint64_t v23[2];
  _QWORD v24[39];

  v24[38] = *MEMORY[0x24BDAC8D0];
  v17 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.select", (const unsigned __int8 *)0xC, Context);
  if (!v12)
  {
    v21 = 1283;
    v20[2] = (uint64_t)"arith.select";
    v20[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  mlir::ValueRange::ValueRange(v23, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  v13 = mlir::ValueRange::ValueRange(v22, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)v13, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((_QWORD *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id)
    v15 = v14;
  else
    v15 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v15;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::RedundantSelectFalse::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 2 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::RedundantSelectFalse::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::SelectOp type";
  v14 = 45;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::RedundantSelectFalse::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "Operands 'pred' and 'pred0' must be equal";
  v14 = 41;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::RedundantSelectTrue::~RedundantSelectTrue(_anonymous_namespace_::RedundantSelectTrue *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::RedundantSelectTrue::matchAndRewrite(_anonymous_namespace_::RedundantSelectTrue *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  mlir::Operation *v5;
  uint64_t v6;
  uint64_t DefiningOp;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  void *v19[2];
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[6];

  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v22[0] = a2;
  v21 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id)
    v5 = a2;
  else
    v5 = 0;
  v6 = *((_QWORD *)v5 + 9);
  v19[0] = *(void **)(v6 + 56);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v19);
  if (DefiningOp)
  {
    v8 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id)
    {
      v9 = *((_QWORD *)a3 + 2);
      if (!v9)
        goto LABEL_23;
      if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      {
        v10 = *(_QWORD *)(v8 + 24);
LABEL_12:
        v12 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v9 + 64))(v9, v10, v11, v19);
        goto LABEL_13;
      }
      goto LABEL_22;
    }
    if ((*(_BYTE *)(DefiningOp + 46) & 0x80) != 0)
    {
      v14 = *(_QWORD *)(DefiningOp + 72);
      v15 = v21;
      if (v21 < HIDWORD(v21))
        goto LABEL_17;
    }
    else
    {
      v14 = 0;
      v15 = v21;
      if (v21 < HIDWORD(v21))
        goto LABEL_17;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v22, v15 + 1, 8);
    LODWORD(v15) = v21;
LABEL_17:
    v20[v15] = v8;
    LODWORD(v21) = v21 + 1;
    if ((*((_BYTE *)v5 + 46) & 0x80) != 0)
    {
      if (*(_QWORD *)(v6 + 24) != *(_QWORD *)(v14 + 24))
      {
LABEL_19:
        v16 = *((_QWORD *)a3 + 2);
        if (v16 && mlir::RewriterBase::Listener::classof(v16))
        {
LABEL_13:
          v9 = v12;
          v13 = v20;
          if (v20 == v22)
            return v9;
          goto LABEL_24;
        }
        goto LABEL_22;
      }
    }
    else if (*(_QWORD *)(v6 + 24) != *(_QWORD *)(v14 + 24))
    {
      goto LABEL_19;
    }
    v18 = *(void **)(v20[1] + 24);
    v19[0] = *(void **)(*v20 + 24);
    v19[1] = v18;
    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v19, (mlir::MLIRContext *)2, 0);
  }
  v9 = *((_QWORD *)a3 + 2);
  if (!v9)
    goto LABEL_23;
  if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
  {
    v10 = *((_QWORD *)v5 + 3);
    goto LABEL_12;
  }
LABEL_22:
  v9 = 0;
LABEL_23:
  v13 = v20;
  if (v20 != v22)
LABEL_24:
    free(v13);
  return v9;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::RedundantSelectTrue::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::RedundantSelectTrue::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::SelectOp type";
  v14 = 45;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::RedundantSelectTrue::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "Operands 'pred' and 'pred0' must be equal";
  v14 = 41;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void SelectI1Simplify::~SelectI1Simplify(SelectI1Simplify *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::arith::SelectOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::arith::SelectOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::arith::SelectOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t SelectI1Simplify::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  ZinIrHalH13g *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v17 = *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (!mlir::Type::isInteger((mlir::Type *)&v17, 1))
    return 0;
  v5 = *(_QWORD *)(a2 + 24);
  LOBYTE(v15) = 1;
  LODWORD(v16) = 1;
  v17 = (unint64_t)mlir::OpBuilder::create<mlir::arith::ConstantIntOp,BOOL,int>((mlir::Builder *)(a3 + 8), v5, (unsigned __int8 *)&v15, (unsigned int *)&v16)- 16;
  v6 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  v16 = (uint64_t)mlir::OpBuilder::create<mlir::arith::XOrIOp,mlir::Value,mlir::Value&>((mlir::OpBuilder *)(a3 + 8), v6, &v15, (uint64_t *)&v17)- 16;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(v8 + 24);
  v13 = *(_QWORD *)(v8 + 56);
  v14 = v9;
  v15 = (uint64_t)mlir::OpBuilder::create<mlir::arith::AndIOp,mlir::Value,mlir::Value>((mlir::OpBuilder *)(a3 + 8), v7, &v14, &v13)- 16;
  v10 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 88);
  v14 = (uint64_t)mlir::OpBuilder::create<mlir::arith::AndIOp,mlir::Value,mlir::Value>((mlir::OpBuilder *)(a3 + 8), v10, &v16, &v13)- 16;
  v11 = mlir::OpBuilder::create<mlir::arith::OrIOp,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), &v15, &v14);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a3 + 32))(a3, a2, v11);
  return 1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::XOrIOp,mlir::Value,mlir::Value&>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  ZinIrHalH13g *v12;
  ZinIrHalH13g *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  _QWORD v20[39];

  v20[38] = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.xori", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"arith.xori";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::arith::AndIOp::build(v11, (uint64_t)v20, *a3, *a4);
  v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v13;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::AndIOp,mlir::Value,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  ZinIrHalH13g *v12;
  ZinIrHalH13g *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  _QWORD v20[39];

  v20[38] = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.andi", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"arith.andi";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::arith::AndIOp::build(v11, (uint64_t)v20, *a3, *a4);
  v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AndIOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v13;
}

void `anonymous namespace'::SelectAndCond::~SelectAndCond(_anonymous_namespace_::SelectAndCond *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::SelectAndCond::matchAndRewrite(_anonymous_namespace_::SelectAndCond *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v5;
  mlir::Operation *v6;
  uint64_t DefiningOp;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *v17;
  void *v19;
  void *v20[2];
  _QWORD *v21;
  uint64_t v22;
  _QWORD v23[6];

  v23[4] = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
    v5 = *((_QWORD *)a2 + 9);
  else
    v5 = 0;
  v21 = v23;
  v23[0] = a2;
  v22 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v20[0] = *(void **)(*((_QWORD *)v6 + 9) + 56);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v20);
  if (DefiningOp)
  {
    v8 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id)
    {
      if ((*(_BYTE *)(DefiningOp + 46) & 0x80) != 0)
        v14 = *(_QWORD *)(DefiningOp + 72);
      else
        v14 = 0;
      v11 = v14 + 64;
    }
    else
    {
      v9 = *((_QWORD *)a3 + 2);
      if (!v9)
        goto LABEL_26;
      if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
        goto LABEL_26;
      v11 = v5;
      if (!v10)
        goto LABEL_26;
    }
    v15 = v22;
    if (v22 >= HIDWORD(v22))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v22 + 1, 8);
      v15 = v22;
    }
    v21[v15] = v8;
    LODWORD(v22) = v22 + 1;
    if (*(_QWORD *)(v11 + 24) == *(_QWORD *)(*((_QWORD *)v6 + 9) + 88))
    {
      v19 = *(void **)(v21[1] + 24);
      v20[0] = *(void **)(*v21 + 24);
      v20[1] = v19;
      mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v20, (mlir::MLIRContext *)2, 0);
    }
    v16 = *((_QWORD *)a3 + 2);
    if (!v16 || !mlir::RewriterBase::Listener::classof(v16))
      goto LABEL_26;
LABEL_24:
    v12 = v13;
    v17 = v21;
    if (v21 == v23)
      return v12;
    goto LABEL_28;
  }
  v12 = *((_QWORD *)a3 + 2);
  if (!v12)
    goto LABEL_27;
  if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
  {
    goto LABEL_24;
  }
LABEL_26:
  v12 = 0;
LABEL_27:
  v17 = v21;
  if (v21 != v23)
LABEL_28:
    free(v17);
  return v12;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SelectAndCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::static_dag_matcher_12(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::OperandRange &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::SelectOp type";
  v14 = 45;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SelectAndCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "Operands 'y' and 'y0' must be equal";
  v14 = 35;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::SelectAndNotCond::~SelectAndNotCond(_anonymous_namespace_::SelectAndNotCond *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::SelectAndNotCond::matchAndRewrite(_anonymous_namespace_::SelectAndNotCond *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v5;
  mlir::Operation *v6;
  uint64_t DefiningOp;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  void *v16;
  void *v17[2];
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[6];

  v20[4] = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
    v5 = *((_QWORD *)a2 + 9);
  else
    v5 = 0;
  v18 = v20;
  v20[0] = a2;
  v19 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v17[0] = *(void **)(*((_QWORD *)v6 + 9) + 56);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v17);
  if (DefiningOp)
  {
    v8 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id)
    {
      if ((*(_BYTE *)(DefiningOp + 46) & 0x80) != 0)
        v5 = *(_QWORD *)(DefiningOp + 72) + 32;
      else
        v5 = 32;
    }
    else
    {
      v9 = *((_QWORD *)a3 + 2);
      if (!v9
        || !mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2))
      {
        goto LABEL_25;
      }
    }
    v12 = v19;
    if (v19 >= HIDWORD(v19))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, v19 + 1, 8);
      v12 = v19;
    }
    v18[v12] = v8;
    LODWORD(v19) = v19 + 1;
    if (*(_QWORD *)(v5 + 24) == *(_QWORD *)(*((_QWORD *)v6 + 9) + 88))
    {
      v16 = *(void **)(v18[1] + 24);
      v17[0] = *(void **)(*v18 + 24);
      v17[1] = v16;
      mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v17, (mlir::MLIRContext *)2, 0);
    }
    v13 = *((_QWORD *)a3 + 2);
    if (!v13 || !mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      goto LABEL_25;
LABEL_23:
    v10 = v11;
    v14 = v18;
    if (v18 == v20)
      return v10;
    goto LABEL_27;
  }
  v10 = *((_QWORD *)a3 + 2);
  if (!v10)
    goto LABEL_26;
  if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
  {
    goto LABEL_23;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  v14 = v18;
  if (v18 != v20)
LABEL_27:
    free(v14);
  return v10;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SelectAndNotCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::static_dag_matcher_13(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::OperandRange &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::SelectOp type";
  v14 = 45;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SelectAndNotCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "Operands 'y' and 'y0' must be equal";
  v14 = 35;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::SelectOrCond::~SelectOrCond(_anonymous_namespace_::SelectOrCond *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::SelectOrCond::matchAndRewrite(_anonymous_namespace_::SelectOrCond *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v5;
  mlir::Operation *v6;
  uint64_t v7;
  uint64_t DefiningOp;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *v17;
  void *v19;
  void *v20[2];
  _QWORD *v21;
  uint64_t v22;
  _QWORD v23[6];

  v23[4] = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
    v5 = *((_QWORD *)a2 + 9);
  else
    v5 = 0;
  v21 = v23;
  v23[0] = a2;
  v22 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v7 = *((_QWORD *)v6 + 9);
  v20[0] = *(void **)(v7 + 88);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v20);
  if (DefiningOp)
  {
    v9 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id)
    {
      if ((*(_BYTE *)(DefiningOp + 46) & 0x80) != 0)
        v12 = *(_QWORD *)(DefiningOp + 72) + 32;
      else
        v12 = 32;
    }
    else
    {
      v10 = *((_QWORD *)a3 + 2);
      if (!v10)
        goto LABEL_25;
      if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
        goto LABEL_25;
      v12 = v5;
      if (!v11)
        goto LABEL_25;
    }
    v15 = v22;
    if (v22 >= HIDWORD(v22))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v22 + 1, 8);
      v15 = v22;
    }
    v21[v15] = v9;
    LODWORD(v22) = v22 + 1;
    if (*(_QWORD *)(v7 + 56) == *(_QWORD *)(v12 + 24))
    {
      v19 = *(void **)(v21[1] + 24);
      v20[0] = *(void **)(*v21 + 24);
      v20[1] = v19;
      mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v20, (mlir::MLIRContext *)2, 0);
    }
    v16 = *((_QWORD *)a3 + 2);
    if (!v16 || !mlir::RewriterBase::Listener::classof(v16))
      goto LABEL_25;
LABEL_23:
    v13 = v14;
    v17 = v21;
    if (v21 == v23)
      return v13;
    goto LABEL_27;
  }
  v13 = *((_QWORD *)a3 + 2);
  if (!v13)
    goto LABEL_26;
  if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
  {
    goto LABEL_23;
  }
LABEL_25:
  v13 = 0;
LABEL_26:
  v17 = v21;
  if (v21 != v23)
LABEL_27:
    free(v17);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SelectOrCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 2 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SelectOrCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "Operands 'x' and 'x0' must be equal";
  v14 = 35;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::SelectOrNotCond::~SelectOrNotCond(_anonymous_namespace_::SelectOrNotCond *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::SelectOrNotCond::matchAndRewrite(_anonymous_namespace_::SelectOrNotCond *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v5;
  mlir::Operation *v6;
  uint64_t v7;
  uint64_t DefiningOp;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  void *v20;
  void *v21[2];
  _QWORD *v22;
  uint64_t v23;
  _QWORD v24[6];

  v24[4] = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
    v5 = *((_QWORD *)a2 + 9);
  else
    v5 = 0;
  v22 = v24;
  v24[0] = a2;
  v23 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v7 = *((_QWORD *)v6 + 9);
  v21[0] = *(void **)(v7 + 88);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v21);
  if (DefiningOp)
  {
    v9 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id)
    {
      if ((*(_BYTE *)(DefiningOp + 46) & 0x80) != 0)
        v15 = *(_QWORD *)(DefiningOp + 72);
      else
        v15 = 0;
      v12 = v15 + 64;
    }
    else
    {
      v10 = *((_QWORD *)a3 + 2);
      if (!v10)
        goto LABEL_26;
      if (!mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
        goto LABEL_26;
      v12 = v5;
      if (!v11)
        goto LABEL_26;
    }
    v16 = v23;
    if (v23 >= HIDWORD(v23))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v24, v23 + 1, 8);
      v16 = v23;
    }
    v22[v16] = v9;
    LODWORD(v23) = v23 + 1;
    if (*(_QWORD *)(v7 + 56) == *(_QWORD *)(v12 + 24))
    {
      v20 = *(void **)(v22[1] + 24);
      v21[0] = *(void **)(*v22 + 24);
      v21[1] = v20;
      mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v21, (mlir::MLIRContext *)2, 0);
    }
    v17 = *((_QWORD *)a3 + 2);
    if (!v17 || !mlir::RewriterBase::Listener::classof(v17))
      goto LABEL_26;
LABEL_24:
    v13 = v14;
    v18 = v22;
    if (v22 == v24)
      return v13;
    goto LABEL_28;
  }
  v13 = *((_QWORD *)a3 + 2);
  if (!v13)
    goto LABEL_27;
  if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
  {
    goto LABEL_24;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v18 = v22;
  if (v22 != v24)
LABEL_28:
    free(v18);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SelectOrNotCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 2 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SelectOrNotCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "Operands 'x' and 'x0' must be equal";
  v14 = 35;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void `anonymous namespace'::SelectNotCond::~SelectNotCond(_anonymous_namespace_::SelectNotCond *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::SelectNotCond::matchAndRewrite(_anonymous_namespace_::SelectNotCond *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  mlir::Operation *v5;
  uint64_t DefiningOp;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  void *v28;
  void *v29;
  uint64_t v30;
  _BYTE v31[64];
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD v37[6];

  v37[4] = *MEMORY[0x24BDAC8D0];
  v35 = v37;
  v37[0] = a2;
  v36 = 0x400000001;
  if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id)
    v5 = a2;
  else
    v5 = 0;
  v29 = *(void **)(*((_QWORD *)v5 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v29);
  if (!DefiningOp)
  {
    v8 = *((_QWORD *)a3 + 2);
    if (!v8)
      goto LABEL_62;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v9 = *((_QWORD *)v5 + 3);
      goto LABEL_35;
    }
    goto LABEL_61;
  }
  v7 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id)
  {
    v8 = *((_QWORD *)a3 + 2);
    if (!v8)
      goto LABEL_62;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v9 = *(_QWORD *)(v7 + 24);
LABEL_35:
      v21 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(_QWORD *)v8 + 64))(v8, v9, v10, &v29);
      goto LABEL_36;
    }
    goto LABEL_61;
  }
  v29 = *(void **)(*(_QWORD *)(DefiningOp + 72) + 56);
  v11 = mlir::Value::getDefiningOp((mlir::Value *)&v29);
  if (v11)
  {
    v12 = v11;
    v33 = (void *)(v11 - 16);
    v13 = mlir::Value::getDefiningOp((mlir::Value *)&v33);
    if (!v13)
      goto LABEL_29;
    v14 = v13;
    if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(v13 + 48)))
      goto LABEL_29;
    v29 = v31;
    v30 = 0x100000000;
    mlir::Operation::fold(v14, 0, 0, (uint64_t)&v29);
    v15 = *(_QWORD *)v29 & 0xFFFFFFFFFFFFFFF8;
    if (v29 != v31)
      free(v29);
    if (!v15)
    {
LABEL_29:
      v8 = *((_QWORD *)a3 + 2);
      if (!v8)
        goto LABEL_62;
      if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
      {
        v9 = *(_QWORD *)(v12 + 24);
        goto LABEL_35;
      }
      goto LABEL_61;
    }
    v16 = *((_QWORD *)a3 + 2);
    v29 = "operand 0 of native code call '::mlir::success(::mlir::matchPattern($_self->getResult(0), ::mlir::m_Constant(&"
          "$0)))' failed to satisfy constraint: 'arbitrary integer attribute'";
    v30 = 176;
    if (*(_UNKNOWN **)(*(_QWORD *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
      || (v33 = &v29, v16)
      && mlir::RewriterBase::Listener::classof(v16)
    {
      v17 = v36;
      if (v36 >= HIDWORD(v36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v37, v36 + 1, 8);
        v17 = v36;
      }
      v35[v17] = v12;
      v18 = (v36 + 1);
      LODWORD(v36) = v18;
      if (v18 >= HIDWORD(v36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v37, v18 + 1, 8);
        LODWORD(v18) = v36;
      }
      v35[v18] = v7;
      LODWORD(v36) = v36 + 1;
      LODWORD(v30) = 1;
      v29 = 0;
      v33 = &v29;
      v19 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v33, v15);
      v20 = v30;
      if ((v19 & 1) != 0)
      {
        v28 = v29;
        LODWORD(v34) = 1;
        v33 = 0;
        v32 = &v33;
        if (mlir::detail::constant_int_value_binder::match((uint64_t *)&v32, v15))
        {
          LODWORD(v30) = v34;
          v29 = v33;
          v31[0] = 1;
        }
        else
        {
          LOBYTE(v29) = 0;
          v31[0] = 0;
          if (v34 >= 0x41 && v33)
            MEMORY[0x20BD002D4](v33, 0x1000C8000313F17);
        }
        v23 = v30;
        if (!(_DWORD)v30)
        {
          if (v20 >= 0x41 && v28)
            MEMORY[0x20BD002D4](v28, 0x1000C8000313F17);
LABEL_57:
          v25 = *(_QWORD *)(v35[1] + 24);
          v29 = *(void **)(*v35 + 24);
          v30 = v25;
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&v29, (mlir::MLIRContext *)2, 0);
        }
        if (v30 > 0x40)
        {
          v24 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v29) == v23;
          if (v31[0] && v29)
            MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
        }
        else
        {
          v24 = v29 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v30);
        }
        if (v20 >= 0x41 && v28)
          MEMORY[0x20BD002D4](v28, 0x1000C8000313F17);
        if (v24)
          goto LABEL_57;
      }
      else if (v30 >= 0x41 && v29)
      {
        MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
      }
      v26 = *((_QWORD *)a3 + 2);
      if (v26 && mlir::RewriterBase::Listener::classof(v26))
      {
LABEL_36:
        v8 = v21;
        v22 = v35;
        if (v35 == v37)
          return v8;
        goto LABEL_63;
      }
    }
  }
  else
  {
    v8 = *((_QWORD *)a3 + 2);
    if (!v8)
      goto LABEL_62;
    if (mlir::RewriterBase::Listener::classof(*((_QWORD *)a3 + 2)))
    {
      v9 = *(_QWORD *)(v7 + 24);
      goto LABEL_35;
    }
  }
LABEL_61:
  v8 = 0;
LABEL_62:
  v22 = v35;
  if (v35 != v37)
LABEL_63:
    free(v22);
  return v8;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SelectNotCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 0 of castedOp0";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SelectNotCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::XOrIOp type";
  v14 = 43;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SelectNotCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp1";
  v14 = 56;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SelectNotCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "::mlir::success(::mlir::matchPattern(op2->getResult(0), ::mlir::m_Constant(&arg2_0))) return ::mlir::failure";
  v14 = 108;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<`anonymous namespace'::SelectNotCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  BOOL v10;
  char *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v3 = a2 + 16;
  v4 = *(_QWORD *)(a2 + 16);
  v12 = 3;
  v13 = "entities 'ones' failed to satisfy constraint: ''";
  v14 = 48;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    v9 = v5 + 1;
    v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      v4 = *(_QWORD *)(a2 + 16);
      v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void SelectToExtUI::~SelectToExtUI(SelectToExtUI *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t SelectToExtUI::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  mlir::Operation *DefiningOp;
  unint64_t v7;
  mlir::Operation *v8;
  unint64_t v9;
  ZinIrHalH13g *v10;
  uint64_t v11;
  unint64_t v12;
  mlir::Operation *v13;
  unint64_t v14;
  mlir::Operation *v15;
  uint64_t v16;
  ZinIrHalH13g *v17;
  unint64_t v19;
  int v20;
  ZinIrHalH13g *v21;
  BOOL (*v22)(llvm::APInt *);
  ZinIrHalH13g *v23;
  unint64_t v24;

  if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    return 0;
  v24 = *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (mlir::Type::isInteger((mlir::Type *)&v24, 1))
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 56);
  v23 = (ZinIrHalH13g *)mlir::m_One(void)::{lambda(llvm::APInt const&)#1}::__invoke;
  v24 = v5;
  DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp
    || !mlir::detail::constant_int_predicate_matcher::match((uint64_t (**)(uint64_t *))&v23, DefiningOp)|| (v7 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 88), v22 = mlir::m_Zero(void)::{lambda(llvm::APInt const&)#1}::__invoke, v24 = v7, (v8 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v24)) == 0)|| !mlir::detail::constant_int_predicate_matcher::match((uint64_t (**)(uint64_t *))&v22, v8))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 56);
    v23 = (ZinIrHalH13g *)mlir::m_Zero(void)::{lambda(llvm::APInt const&)#1}::__invoke;
    v24 = v12;
    v13 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v24);
    if (v13)
    {
      if (mlir::detail::constant_int_predicate_matcher::match((uint64_t (**)(uint64_t *))&v23, v13))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 88);
        v22 = mlir::m_One(void)::{lambda(llvm::APInt const&)#1}::__invoke;
        v24 = v14;
        v15 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v24);
        if (v15)
        {
          if (mlir::detail::constant_int_predicate_matcher::match((uint64_t (**)(uint64_t *))&v22, v15))
          {
            v24 = *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
            v16 = *(_QWORD *)(a2 + 24);
            v22 = *(BOOL (**)(llvm::APInt *))(*(_QWORD *)(a2 + 72) + 24);
            v11 = 1;
            v20 = 1;
            v19 = *((_QWORD *)v22 + 1) & 0xFFFFFFFFFFFFFFF8;
            v21 = mlir::OpBuilder::create<mlir::arith::ConstantIntOp,int,mlir::Type>((mlir::OpBuilder *)(a3 + 8), v16, &v20, (uint64_t *)&v19);
            v23 = mlir::OpBuilder::create<mlir::arith::XOrIOp,mlir::Value,mlir::arith::ConstantIntOp>((mlir::OpBuilder *)(a3 + 8), v16, (uint64_t *)&v22, &v21);
            v17 = mlir::OpBuilder::create<mlir::arith::ExtUIOp,mlir::Type,mlir::arith::XOrIOp>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v24, &v23);
            (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a3 + 32))(a3, a2, v17);
            return v11;
          }
        }
      }
    }
    return 0;
  }
  v9 = *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(ZinIrHalH13g **)(*(_QWORD *)(a2 + 72) + 24);
  v24 = v9;
  v10 = mlir::OpBuilder::create<mlir::arith::ExtUIOp,mlir::Type,mlir::Value>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v24, (uint64_t *)&v23);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a3 + 32))(a3, a2, v10);
  return 1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::XOrIOp,mlir::Value,mlir::arith::ConstantIntOp>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  ZinIrHalH13g *v12;
  ZinIrHalH13g *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  _QWORD v20[39];

  v20[38] = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.xori", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"arith.xori";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::arith::AndIOp::build(v11, (uint64_t)v20, *a3, *a4 - 16);
  v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v13;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ConstantIntOp,int,mlir::Type>(mlir::OpBuilder *a1, uint64_t a2, int *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *IntegerAttr;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  ZinIrHalH13g *v17;
  ZinIrHalH13g *v18;
  _QWORD *v19;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  _QWORD v26[8];
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD v30[29];

  v30[28] = *MEMORY[0x24BDAC8D0];
  v21 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.constant", (const unsigned __int8 *)0xE, Context);
  if (!v10)
  {
    v25 = 1283;
    v24[2] = (uint64_t)"arith.constant";
    v24[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v26);
    llvm::report_fatal_error((llvm::Twine *)v26, 1);
  }
  mlir::OperationState::OperationState(v26, a2, v9);
  v11 = *a4;
  IntegerAttr = (_QWORD *)mlir::Builder::getIntegerAttr((uint64_t)a1, v11, *a3);
  v13 = IntegerAttr;
  if (IntegerAttr)
  {
    v14 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*IntegerAttr + 8);
    v15 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(v26);
    *v15 = v13;
    v15[1] = v14;
    v16 = v28;
    if (v28 < v29)
      goto LABEL_5;
    goto LABEL_4;
  }
  v19 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(v26);
  *v19 = 0;
  v19[1] = 0;
  v16 = v28;
  if (v28 >= v29)
  {
LABEL_4:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v16 + 1, 8);
    LODWORD(v16) = v28;
  }
LABEL_5:
  *(_QWORD *)(v27 + 8 * v16) = v11;
  ++v28;
  v17 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v26);
  v18 = v17;
  if (v17)
  {
    if (*(_UNKNOWN **)(*((_QWORD *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ConstantOp,void>::id)
    {
      v24[0] = *((_QWORD *)v17 - 1) & 0xFFFFFFFFFFFFFFF8;
      if (!mlir::Type::isSignlessInteger((mlir::Type *)v24))
        v18 = 0;
    }
    else
    {
      v18 = 0;
    }
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v26);
  return v18;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ExtUIOp,mlir::Type,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[8];
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD v25[29];

  v25[28] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.extui", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"arith.extui";
    v19[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = *a3;
  v19[0] = *a4;
  mlir::OperationState::addOperands((uint64_t)v21, (uint64_t)v19, 1);
  v12 = v23;
  if (v23 >= v24)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v23 + 1, 8);
    v12 = v23;
  }
  *(_QWORD *)(v22 + 8 * v12) = v11;
  ++v23;
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ExtUIOp,mlir::Type,mlir::arith::XOrIOp>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[8];
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD v25[29];

  v25[28] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.extui", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"arith.extui";
    v19[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = *a3;
  v19[0] = *a4 - 16;
  mlir::OperationState::addOperands((uint64_t)v21, (uint64_t)v19, 1);
  v12 = v23;
  if (v23 >= v24)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v23 + 1, 8);
    v12 = v23;
  }
  *(_QWORD *)(v22 + 8 * v12) = v11;
  ++v23;
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

uint64_t llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::raw_ostream *a6, uint64_t a7)
{
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  const char *v17;
  unint64_t v18;
  void *v19;
  uint64_t *i;
  uint64_t v21;
  const char *v22;
  unint64_t v23;
  void *v24;

  v12 = result;
  v13 = result == a3;
  if (result != a3 || a2 != a4)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a5 + 160))(a5, *(_QWORD *)(result + 32 * a2 + 24));
    if (!v13 || a2 + 1 != a4)
    {
      if (!v13)
      {
        for (i = (uint64_t *)(v12 + 32 * a2 + 56); ; i += 4)
        {
          v22 = *(const char **)a7;
          v23 = *(_QWORD *)(a7 + 8);
          v24 = (void *)*((_QWORD *)a6 + 4);
          if (v23 > *((_QWORD *)a6 + 3) - (_QWORD)v24)
          {
            llvm::raw_ostream::write(a6, v22, *(_QWORD *)(a7 + 8));
          }
          else if (v23)
          {
            memcpy(v24, v22, *(_QWORD *)(a7 + 8));
            *((_QWORD *)a6 + 4) += v23;
          }
          v21 = *i;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 160))(a5, v21);
        }
      }
      v14 = ~a2 + a4;
      v15 = (uint64_t *)(v12 + 32 * a2 + 56);
      do
      {
        v17 = *(const char **)a7;
        v18 = *(_QWORD *)(a7 + 8);
        v19 = (void *)*((_QWORD *)a6 + 4);
        if (v18 > *((_QWORD *)a6 + 3) - (_QWORD)v19)
        {
          llvm::raw_ostream::write(a6, v17, *(_QWORD *)(a7 + 8));
        }
        else if (v18)
        {
          memcpy(v19, v17, *(_QWORD *)(a7 + 8));
          *((_QWORD *)a6 + 4) += v18;
        }
        v16 = *v15;
        v15 += 4;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 160))(a5, v16);
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL _ZN4llvm12function_refIFN4mlir11ParseResultERNS1_9AttributeENS1_4TypeEEE11callback_fnIZNS1_9AsmParser32parseCustomAttributeWithFallbackINS1_5arith17FastMathFlagsAttrEEENSt3__19enable_ifIXsr23detect_has_parse_methodIT_EE5valueES2_E4typeERSF_S5_EUlS4_S5_E_EES2_lS4_S5_(mlir::AsmParser **a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = mlir::arith::FastMathFlagsAttr::parse(*a1);
  *a2 = v3;
  return v3 != 0;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::AddFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::CmpFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::CmpIOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::ConstantOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

uint64_t mlir::AsmParser::parseAttribute<mlir::TypedAttr>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  _QWORD *v21;
  _QWORD v22[3];
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *__p;
  _QWORD *v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v21 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD **, uint64_t))(*(_QWORD *)a1 + 408))(a1, &v21, a3))
    return 0;
  v7 = v21;
  if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v21 + 8))
  {
    v8 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v7 + 8);
    *a2 = v7;
    a2[1] = v8;
    if (v7)
      return 1;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v19 = "invalid kind of attribute specified";
  v20 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v22, a1, v6, &v19);
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
  if (v22[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
  if (v29)
  {
    v11 = __p;
    if (__p)
    {
      v12 = v28;
      v13 = __p;
      if (v28 != __p)
      {
        do
          v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        v13 = __p;
      }
      v28 = v11;
      operator delete(v13);
    }
    v14 = v25;
    if (v25)
    {
      v15 = v26;
      v16 = v25;
      if (v26 != v25)
      {
        do
        {
          v18 = *--v15;
          v17 = v18;
          *v15 = 0;
          if (v18)
            MEMORY[0x20BD002D4](v17, 0x1000C8077774924);
        }
        while (v15 != v14);
        v16 = v25;
      }
      v26 = v14;
      operator delete(v16);
    }
    if (v23 != &v24)
      free(v23);
  }
  return v9;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::DivFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MaxNumFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MaximumFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MinNumFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MinimumFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MulFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::NegFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::RemFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::SubFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

const char *mlir::arith::ArithDialect::initialize(mlir::arith::ArithDialect *this)
{
  char *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  uint64_t v5;
  const char *result;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  const char *v17;
  unint64_t v18;

  mlir::Dialect::addOperations<mlir::arith::AddFOp,mlir::arith::AddIOp,mlir::arith::AddUIExtendedOp,mlir::arith::AndIOp,mlir::arith::BitcastOp,mlir::arith::CeilDivSIOp,mlir::arith::CeilDivUIOp,mlir::arith::CmpFOp,mlir::arith::CmpIOp,mlir::arith::ConstantOp,mlir::arith::DivFOp,mlir::arith::DivSIOp,mlir::arith::DivUIOp,mlir::arith::ExtFOp,mlir::arith::ExtSIOp,mlir::arith::ExtUIOp,mlir::arith::FPToSIOp,mlir::arith::FPToUIOp,mlir::arith::FloorDivSIOp,mlir::arith::IndexCastOp,mlir::arith::IndexCastUIOp,mlir::arith::MaxNumFOp,mlir::arith::MaxSIOp,mlir::arith::MaxUIOp,mlir::arith::MaximumFOp,mlir::arith::MinNumFOp,mlir::arith::MinSIOp,mlir::arith::MinUIOp,mlir::arith::MinimumFOp,mlir::arith::MulFOp,mlir::arith::MulIOp,mlir::arith::MulSIExtendedOp,mlir::arith::MulUIExtendedOp,mlir::arith::NegFOp,mlir::arith::OrIOp,mlir::arith::RemFOp,mlir::arith::RemSIOp,mlir::arith::RemUIOp,mlir::arith::SIToFPOp,mlir::arith::ShLIOp,mlir::arith::ShRSIOp,mlir::arith::ShRUIOp,mlir::arith::SubFOp,mlir::arith::SubIOp,mlir::arith::TruncFOp,mlir::arith::TruncIOp,mlir::arith::UIToFPOp,mlir::arith::XOrIOp,mlir::arith::SelectOp>((uint64_t)this);
  mlir::Dialect::addAttribute<mlir::arith::FastMathFlagsAttr>((uint64_t)this);
  v2 = (char *)operator new();
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v16 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v8 = v7;
    v2 = v16;
    if (v8)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectInlinerInterface]";
      v18 = 79;
      v9 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v9)
        v10 = v9;
      else
        v10 = v18;
      v11 = &v17[v10];
      v12 = v18 - v10;
      if (v18 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v18 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::DialectInlinerInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v16;
    }
  }
  v5 = v4[374];
  *((_QWORD *)v2 + 1) = this;
  *((_QWORD *)v2 + 2) = v5;
  *(_QWORD *)v2 = &off_24C029DF8;
  v17 = v2;
  mlir::Dialect::addInterface((uint64_t)this, (uint64_t *)&v17);
  result = v17;
  v17 = 0;
  if (result)
    return (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 8))(result);
  return result;
}

mlir::arith::ArithDialect *mlir::arith::ArithDialect::ArithDialect(mlir::arith::ArithDialect *this, mlir::MLIRContext *a2)
{
  mlir::arith::ArithDialect *v3;

  v3 = (mlir::arith::ArithDialect *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"arith", 5, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ArithDialect,void>::id);
  *(_QWORD *)v3 = off_24C051AA0;
  mlir::arith::ArithDialect::initialize(v3);
  return this;
}

void mlir::arith::ArithDialect::~ArithDialect(llvm **this)
{
  mlir::Dialect::~Dialect(this);
}

void sub_2071B08B4()
{
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::arith::FastMathFlagsAttr::get(mlir::MLIRContext *a1, unsigned int a2)
{
  unsigned __int8 **AttributeUniquer;
  unsigned int v5;
  _QWORD v6[2];

  v5 = a2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v6[0] = &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id;
  v6[1] = a1;
  return mlir::StorageUniquer::get<mlir::arith::detail::FastMathFlagsAttrStorage,mlir::arith::FastMathFlags>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir5arith6detail24FastMathFlagsAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17FastMathFlagsAttrEJNS2_13FastMathFlagsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)v6, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id, &v5);
}

uint64_t mlir::arith::FastMathFlagsAttr::parse(mlir::AsmParser *a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  int *v8;
  int *v9;
  int *v10;
  __int128 v11;
  uint64_t v12;
  int *v13;
  int *v14;
  int *v15;
  __int128 v16;
  uint64_t v17;
  int *v18;
  int *v19;
  int *v20;
  __int128 v21;
  uint64_t v22;
  int *v23;
  int *v24;
  int *v25;
  __int128 v26;
  uint64_t v27;
  int *v28;
  int *v29;
  int *v30;
  __int128 v31;
  uint64_t v32;
  int *v33;
  int *v34;
  int *v35;
  __int128 v36;
  uint64_t v37;
  int *v38;
  int *v39;
  int *v40;
  __int128 v41;
  uint64_t v42;
  int *v43;
  int *v44;
  int *v45;
  __int128 v46;
  uint64_t v47;
  int *v48;
  int *v49;
  int *v50;
  __int128 v51;
  uint64_t v52;
  int *v53;
  int *v54;
  int *v55;
  __int128 v56;
  uint64_t v57;
  int *v58;
  int *v59;
  int *v60;
  __int128 v61;
  uint64_t v62;
  int *v63;
  int *v64;
  int *v65;
  __int128 v66;
  uint64_t v67;
  int *v68;
  int *v69;
  int *v70;
  __int128 v71;
  uint64_t v72;
  int *v73;
  int *v74;
  int *v75;
  __int128 v76;
  uint64_t v77;
  int *v78;
  int *v79;
  int *v80;
  __int128 v81;
  uint64_t v82;
  int *v83;
  int *v84;
  int *v85;
  __int128 v86;
  uint64_t v87;
  int *v88;
  int *v89;
  int *v90;
  __int128 v91;
  uint64_t v92;
  int *v93;
  int *v94;
  int *v95;
  __int128 v96;
  uint64_t v97;
  int *v98;
  int *v99;
  int *v100;
  __int128 v101;
  uint64_t v102;
  int *v103;
  int *v104;
  int *v105;
  __int128 v106;
  _QWORD *v107;
  _QWORD *v108;
  void *v109;
  _QWORD *v110;
  _QWORD *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  void *v118;
  _QWORD *v119;
  _QWORD *v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  BOOL v126;
  unint64_t v127;
  BOOL v128;
  unint64_t v129;
  BOOL v130;
  unint64_t v131;
  BOOL v132;
  unint64_t v133;
  BOOL v134;
  unint64_t v135;
  BOOL v136;
  unint64_t v137;
  BOOL v138;
  unint64_t v139;
  BOOL v140;
  unint64_t v141;
  BOOL v142;
  unint64_t v143;
  BOOL v144;
  unint64_t v145;
  BOOL v146;
  unint64_t v147;
  BOOL v148;
  unint64_t v149;
  BOOL v150;
  unint64_t v151;
  BOOL v152;
  unint64_t v153;
  BOOL v154;
  unint64_t v155;
  BOOL v156;
  int64_t v157;
  unint64_t v158;
  BOOL v159;
  int64_t v160;
  unint64_t v161;
  BOOL v162;
  int64_t v163;
  unint64_t v164;
  BOOL v165;
  int64_t v166;
  int64_t v167;
  int64_t v168;
  int64_t v169;
  int64_t v170;
  int64_t v171;
  int64_t v172;
  int64_t v173;
  int64_t v174;
  int64_t v175;
  int64_t v176;
  int64_t v177;
  int64_t v178;
  int64_t v179;
  int64_t v180;
  int64_t v181;
  int64_t v182;
  unsigned int v183[8];
  __int16 v184;
  _DWORD *v185;
  uint64_t v186;
  int v187;
  const char *v188;
  uint64_t v189;
  _QWORD v190[3];
  void *v191;
  uint64_t v192;
  void *v193;
  _QWORD *v194;
  void *__p;
  _QWORD *v196;
  char v197;
  _QWORD v198[3];
  int *v199;
  unsigned int v200;
  unsigned int v201;
  _BYTE v202[96];
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  char v207;
  uint64_t v208;

  v208 = *MEMORY[0x24BDAC8D0];
  mlir::AsmParser::getContext(a1);
  (*(void (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 152))(a1))
    return 0;
  v2 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 40))(a1);
  v3 = 0;
  v185 = 0;
  v186 = 0;
  do
  {
    if (!mlir::AsmParser::parseKeyword(a1, (llvm::StringRef *)&v185))
      goto LABEL_67;
    v4 = mlir::arith::symbolizeFastMathFlags(v185, v186);
    if ((v4 & 0xFF00000000) == 0)
    {
      v184 = 257;
      (*(void (**)(_QWORD *__return_ptr, mlir::AsmParser *, uint64_t, unsigned int *))(*(_QWORD *)a1 + 24))(v198, a1, v2, v183);
      if (v198[0])
      {
        v187 = 3;
        v188 = "expected ";
        v189 = 9;
        v8 = &v187;
        v9 = v199;
        if (v200 >= v201)
        {
          v124 = v200 + 1;
          if (v199 <= &v187 && &v199[6 * v200] > &v187)
          {
            v157 = (char *)&v187 - (char *)v199;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v124, 24);
            v9 = v199;
            v8 = (int *)((char *)v199 + v157);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v124, 24);
            v8 = &v187;
            v9 = v199;
          }
        }
        v10 = &v9[6 * v200];
        v11 = *(_OWORD *)v8;
        *((_QWORD *)v10 + 2) = *((_QWORD *)v8 + 2);
        *(_OWORD *)v10 = v11;
        v12 = ++v200;
        if (v198[0])
        {
          v187 = 3;
          v188 = "::mlir::arith::FastMathFlags";
          v189 = 28;
          v13 = &v187;
          v14 = v199;
          if (v12 >= v201)
          {
            v125 = v12 + 1;
            v126 = &v199[6 * v12] > &v187;
            if (v199 <= &v187 && v126)
            {
              v160 = (char *)&v187 - (char *)v199;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v125, 24);
              v14 = v199;
              v13 = (int *)((char *)v199 + v160);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v125, 24);
              v13 = &v187;
              v14 = v199;
            }
          }
          v15 = &v14[6 * v200];
          v16 = *(_OWORD *)v13;
          *((_QWORD *)v15 + 2) = *((_QWORD *)v13 + 2);
          *(_OWORD *)v15 = v16;
          v17 = ++v200;
          if (v198[0])
          {
            v187 = 3;
            v188 = " to be one of: ";
            v189 = 15;
            v18 = &v187;
            v19 = v199;
            if (v17 >= v201)
            {
              v127 = v17 + 1;
              v128 = &v199[6 * v17] > &v187;
              if (v199 <= &v187 && v128)
              {
                v163 = (char *)&v187 - (char *)v199;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v127, 24);
                v19 = v199;
                v18 = (int *)((char *)v199 + v163);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v127, 24);
                v18 = &v187;
                v19 = v199;
              }
            }
            v20 = &v19[6 * v200];
            v21 = *(_OWORD *)v18;
            *((_QWORD *)v20 + 2) = *((_QWORD *)v18 + 2);
            *(_OWORD *)v20 = v21;
            v22 = ++v200;
            if (v198[0])
            {
              v187 = 3;
              v188 = "none";
              v189 = 4;
              v23 = &v187;
              v24 = v199;
              if (v22 >= v201)
              {
                v129 = v22 + 1;
                v130 = &v199[6 * v22] > &v187;
                if (v199 <= &v187 && v130)
                {
                  v166 = (char *)&v187 - (char *)v199;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v129, 24);
                  v24 = v199;
                  v23 = (int *)((char *)v199 + v166);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v129, 24);
                  v23 = &v187;
                  v24 = v199;
                }
              }
              v25 = &v24[6 * v200];
              v26 = *(_OWORD *)v23;
              *((_QWORD *)v25 + 2) = *((_QWORD *)v23 + 2);
              *(_OWORD *)v25 = v26;
              v27 = ++v200;
              if (v198[0])
              {
                v187 = 3;
                v188 = ", ";
                v189 = 2;
                v28 = &v187;
                v29 = v199;
                if (v27 >= v201)
                {
                  v131 = v27 + 1;
                  v132 = &v199[6 * v27] > &v187;
                  if (v199 <= &v187 && v132)
                  {
                    v167 = (char *)&v187 - (char *)v199;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v131, 24);
                    v29 = v199;
                    v28 = (int *)((char *)v199 + v167);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v131, 24);
                    v28 = &v187;
                    v29 = v199;
                  }
                }
                v30 = &v29[6 * v200];
                v31 = *(_OWORD *)v28;
                *((_QWORD *)v30 + 2) = *((_QWORD *)v28 + 2);
                *(_OWORD *)v30 = v31;
                v32 = ++v200;
                if (v198[0])
                {
                  v187 = 3;
                  v188 = "reassoc";
                  v189 = 7;
                  v33 = &v187;
                  v34 = v199;
                  if (v32 >= v201)
                  {
                    v133 = v32 + 1;
                    v134 = &v199[6 * v32] > &v187;
                    if (v199 <= &v187 && v134)
                    {
                      v168 = (char *)&v187 - (char *)v199;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v133, 24);
                      v34 = v199;
                      v33 = (int *)((char *)v199 + v168);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v133, 24);
                      v33 = &v187;
                      v34 = v199;
                    }
                  }
                  v35 = &v34[6 * v200];
                  v36 = *(_OWORD *)v33;
                  *((_QWORD *)v35 + 2) = *((_QWORD *)v33 + 2);
                  *(_OWORD *)v35 = v36;
                  v37 = ++v200;
                  if (v198[0])
                  {
                    v187 = 3;
                    v188 = ", ";
                    v189 = 2;
                    v38 = &v187;
                    v39 = v199;
                    if (v37 >= v201)
                    {
                      v135 = v37 + 1;
                      v136 = &v199[6 * v37] > &v187;
                      if (v199 <= &v187 && v136)
                      {
                        v169 = (char *)&v187 - (char *)v199;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v135, 24);
                        v39 = v199;
                        v38 = (int *)((char *)v199 + v169);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v135, 24);
                        v38 = &v187;
                        v39 = v199;
                      }
                    }
                    v40 = &v39[6 * v200];
                    v41 = *(_OWORD *)v38;
                    *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
                    *(_OWORD *)v40 = v41;
                    v42 = ++v200;
                    if (v198[0])
                    {
                      v187 = 3;
                      v188 = "nnan";
                      v189 = 4;
                      v43 = &v187;
                      v44 = v199;
                      if (v42 >= v201)
                      {
                        v137 = v42 + 1;
                        v138 = &v199[6 * v42] > &v187;
                        if (v199 <= &v187 && v138)
                        {
                          v170 = (char *)&v187 - (char *)v199;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v137, 24);
                          v44 = v199;
                          v43 = (int *)((char *)v199 + v170);
                        }
                        else
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v137, 24);
                          v43 = &v187;
                          v44 = v199;
                        }
                      }
                      v45 = &v44[6 * v200];
                      v46 = *(_OWORD *)v43;
                      *((_QWORD *)v45 + 2) = *((_QWORD *)v43 + 2);
                      *(_OWORD *)v45 = v46;
                      v47 = ++v200;
                      if (v198[0])
                      {
                        v187 = 3;
                        v188 = ", ";
                        v189 = 2;
                        v48 = &v187;
                        v49 = v199;
                        if (v47 >= v201)
                        {
                          v139 = v47 + 1;
                          v140 = &v199[6 * v47] > &v187;
                          if (v199 <= &v187 && v140)
                          {
                            v171 = (char *)&v187 - (char *)v199;
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v139, 24);
                            v49 = v199;
                            v48 = (int *)((char *)v199 + v171);
                          }
                          else
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v139, 24);
                            v48 = &v187;
                            v49 = v199;
                          }
                        }
                        v50 = &v49[6 * v200];
                        v51 = *(_OWORD *)v48;
                        *((_QWORD *)v50 + 2) = *((_QWORD *)v48 + 2);
                        *(_OWORD *)v50 = v51;
                        v52 = ++v200;
                        if (v198[0])
                        {
                          v187 = 3;
                          v188 = "ninf";
                          v189 = 4;
                          v53 = &v187;
                          v54 = v199;
                          if (v52 >= v201)
                          {
                            v141 = v52 + 1;
                            v142 = &v199[6 * v52] > &v187;
                            if (v199 <= &v187 && v142)
                            {
                              v172 = (char *)&v187 - (char *)v199;
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v141, 24);
                              v54 = v199;
                              v53 = (int *)((char *)v199 + v172);
                            }
                            else
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v141, 24);
                              v53 = &v187;
                              v54 = v199;
                            }
                          }
                          v55 = &v54[6 * v200];
                          v56 = *(_OWORD *)v53;
                          *((_QWORD *)v55 + 2) = *((_QWORD *)v53 + 2);
                          *(_OWORD *)v55 = v56;
                          v57 = ++v200;
                          if (v198[0])
                          {
                            v187 = 3;
                            v188 = ", ";
                            v189 = 2;
                            v58 = &v187;
                            v59 = v199;
                            if (v57 >= v201)
                            {
                              v143 = v57 + 1;
                              v144 = &v199[6 * v57] > &v187;
                              if (v199 <= &v187 && v144)
                              {
                                v173 = (char *)&v187 - (char *)v199;
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v143, 24);
                                v59 = v199;
                                v58 = (int *)((char *)v199 + v173);
                              }
                              else
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v143, 24);
                                v58 = &v187;
                                v59 = v199;
                              }
                            }
                            v60 = &v59[6 * v200];
                            v61 = *(_OWORD *)v58;
                            *((_QWORD *)v60 + 2) = *((_QWORD *)v58 + 2);
                            *(_OWORD *)v60 = v61;
                            v62 = ++v200;
                            if (v198[0])
                            {
                              v187 = 3;
                              v188 = "nsz";
                              v189 = 3;
                              v63 = &v187;
                              v64 = v199;
                              if (v62 >= v201)
                              {
                                v145 = v62 + 1;
                                v146 = &v199[6 * v62] > &v187;
                                if (v199 <= &v187 && v146)
                                {
                                  v174 = (char *)&v187 - (char *)v199;
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v145, 24);
                                  v64 = v199;
                                  v63 = (int *)((char *)v199 + v174);
                                }
                                else
                                {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v145, 24);
                                  v63 = &v187;
                                  v64 = v199;
                                }
                              }
                              v65 = &v64[6 * v200];
                              v66 = *(_OWORD *)v63;
                              *((_QWORD *)v65 + 2) = *((_QWORD *)v63 + 2);
                              *(_OWORD *)v65 = v66;
                              v67 = ++v200;
                              if (v198[0])
                              {
                                v187 = 3;
                                v188 = ", ";
                                v189 = 2;
                                v68 = &v187;
                                v69 = v199;
                                if (v67 >= v201)
                                {
                                  v147 = v67 + 1;
                                  v148 = &v199[6 * v67] > &v187;
                                  if (v199 <= &v187 && v148)
                                  {
                                    v175 = (char *)&v187 - (char *)v199;
                                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v147, 24);
                                    v69 = v199;
                                    v68 = (int *)((char *)v199 + v175);
                                  }
                                  else
                                  {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v147, 24);
                                    v68 = &v187;
                                    v69 = v199;
                                  }
                                }
                                v70 = &v69[6 * v200];
                                v71 = *(_OWORD *)v68;
                                *((_QWORD *)v70 + 2) = *((_QWORD *)v68 + 2);
                                *(_OWORD *)v70 = v71;
                                v72 = ++v200;
                                if (v198[0])
                                {
                                  v187 = 3;
                                  v188 = "arcp";
                                  v189 = 4;
                                  v73 = &v187;
                                  v74 = v199;
                                  if (v72 >= v201)
                                  {
                                    v149 = v72 + 1;
                                    v150 = &v199[6 * v72] > &v187;
                                    if (v199 <= &v187 && v150)
                                    {
                                      v176 = (char *)&v187 - (char *)v199;
                                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v149, 24);
                                      v74 = v199;
                                      v73 = (int *)((char *)v199 + v176);
                                    }
                                    else
                                    {
                                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v149, 24);
                                      v73 = &v187;
                                      v74 = v199;
                                    }
                                  }
                                  v75 = &v74[6 * v200];
                                  v76 = *(_OWORD *)v73;
                                  *((_QWORD *)v75 + 2) = *((_QWORD *)v73 + 2);
                                  *(_OWORD *)v75 = v76;
                                  v77 = ++v200;
                                  if (v198[0])
                                  {
                                    v187 = 3;
                                    v188 = ", ";
                                    v189 = 2;
                                    v78 = &v187;
                                    v79 = v199;
                                    if (v77 >= v201)
                                    {
                                      v151 = v77 + 1;
                                      v152 = &v199[6 * v77] > &v187;
                                      if (v199 <= &v187 && v152)
                                      {
                                        v177 = (char *)&v187 - (char *)v199;
                                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v151, 24);
                                        v79 = v199;
                                        v78 = (int *)((char *)v199 + v177);
                                      }
                                      else
                                      {
                                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v151, 24);
                                        v78 = &v187;
                                        v79 = v199;
                                      }
                                    }
                                    v80 = &v79[6 * v200];
                                    v81 = *(_OWORD *)v78;
                                    *((_QWORD *)v80 + 2) = *((_QWORD *)v78 + 2);
                                    *(_OWORD *)v80 = v81;
                                    v82 = ++v200;
                                    if (v198[0])
                                    {
                                      v187 = 3;
                                      v188 = "contract";
                                      v189 = 8;
                                      v83 = &v187;
                                      v84 = v199;
                                      if (v82 >= v201)
                                      {
                                        v153 = v82 + 1;
                                        v154 = &v199[6 * v82] > &v187;
                                        if (v199 <= &v187 && v154)
                                        {
                                          v178 = (char *)&v187 - (char *)v199;
                                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v153, 24);
                                          v84 = v199;
                                          v83 = (int *)((char *)v199 + v178);
                                        }
                                        else
                                        {
                                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v153, 24);
                                          v83 = &v187;
                                          v84 = v199;
                                        }
                                      }
                                      v85 = &v84[6 * v200];
                                      v86 = *(_OWORD *)v83;
                                      *((_QWORD *)v85 + 2) = *((_QWORD *)v83 + 2);
                                      *(_OWORD *)v85 = v86;
                                      v87 = ++v200;
                                      if (v198[0])
                                      {
                                        v187 = 3;
                                        v188 = ", ";
                                        v189 = 2;
                                        v88 = &v187;
                                        v89 = v199;
                                        if (v87 >= v201)
                                        {
                                          v155 = v87 + 1;
                                          v156 = &v199[6 * v87] > &v187;
                                          if (v199 <= &v187 && v156)
                                          {
                                            v179 = (char *)&v187 - (char *)v199;
                                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v155, 24);
                                            v89 = v199;
                                            v88 = (int *)((char *)v199 + v179);
                                          }
                                          else
                                          {
                                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v155, 24);
                                            v88 = &v187;
                                            v89 = v199;
                                          }
                                        }
                                        v90 = &v89[6 * v200];
                                        v91 = *(_OWORD *)v88;
                                        *((_QWORD *)v90 + 2) = *((_QWORD *)v88 + 2);
                                        *(_OWORD *)v90 = v91;
                                        v92 = ++v200;
                                        if (v198[0])
                                        {
                                          v187 = 3;
                                          v188 = "afn";
                                          v189 = 3;
                                          v93 = &v187;
                                          v94 = v199;
                                          if (v92 >= v201)
                                          {
                                            v158 = v92 + 1;
                                            v159 = &v199[6 * v92] > &v187;
                                            if (v199 <= &v187 && v159)
                                            {
                                              v180 = (char *)&v187 - (char *)v199;
                                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v158, 24);
                                              v94 = v199;
                                              v93 = (int *)((char *)v199 + v180);
                                            }
                                            else
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v158, 24);
                                              v93 = &v187;
                                              v94 = v199;
                                            }
                                          }
                                          v95 = &v94[6 * v200];
                                          v96 = *(_OWORD *)v93;
                                          *((_QWORD *)v95 + 2) = *((_QWORD *)v93 + 2);
                                          *(_OWORD *)v95 = v96;
                                          v97 = ++v200;
                                          if (v198[0])
                                          {
                                            v187 = 3;
                                            v188 = ", ";
                                            v189 = 2;
                                            v98 = &v187;
                                            v99 = v199;
                                            if (v97 >= v201)
                                            {
                                              v161 = v97 + 1;
                                              v162 = &v199[6 * v97] > &v187;
                                              if (v199 <= &v187 && v162)
                                              {
                                                v181 = (char *)&v187 - (char *)v199;
                                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v161, 24);
                                                v99 = v199;
                                                v98 = (int *)((char *)v199 + v181);
                                              }
                                              else
                                              {
                                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v161, 24);
                                                v98 = &v187;
                                                v99 = v199;
                                              }
                                            }
                                            v100 = &v99[6 * v200];
                                            v101 = *(_OWORD *)v98;
                                            *((_QWORD *)v100 + 2) = *((_QWORD *)v98 + 2);
                                            *(_OWORD *)v100 = v101;
                                            v102 = ++v200;
                                            if (v198[0])
                                            {
                                              v187 = 3;
                                              v188 = "fast";
                                              v189 = 4;
                                              v103 = &v187;
                                              v104 = v199;
                                              if (v102 >= v201)
                                              {
                                                v164 = v102 + 1;
                                                v165 = &v199[6 * v102] > &v187;
                                                if (v199 <= &v187 && v165)
                                                {
                                                  v182 = (char *)&v187 - (char *)v199;
                                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v164, 24);
                                                  v104 = v199;
                                                  v103 = (int *)((char *)v199 + v182);
                                                }
                                                else
                                                {
                                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v164, 24);
                                                  v103 = &v187;
                                                  v104 = v199;
                                                }
                                              }
                                              v105 = &v104[6 * v200];
                                              v106 = *(_OWORD *)v103;
                                              *((_QWORD *)v105 + 2) = *((_QWORD *)v103 + 2);
                                              *(_OWORD *)v105 = v106;
                                              ++v200;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v198);
      if (v198[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v198);
      if (v207)
      {
        v107 = v205;
        if (v205)
        {
          v108 = v206;
          v109 = v205;
          if (v206 != v205)
          {
            do
              v108 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v108 - 1);
            while (v108 != v107);
            v109 = v205;
          }
          v206 = v107;
          operator delete(v109);
        }
        v110 = v203;
        if (v203)
        {
          v111 = v204;
          v112 = v203;
          if (v204 != v203)
          {
            do
            {
              v114 = *--v111;
              v113 = v114;
              *v111 = 0;
              if (v114)
                MEMORY[0x20BD002D4](v113, 0x1000C8077774924);
            }
            while (v111 != v110);
            v112 = v203;
          }
          v204 = v110;
          operator delete(v112);
        }
        if (v199 != (int *)v202)
          free(v199);
      }
LABEL_67:
      v115 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 40))(a1);
      LOWORD(v200) = 259;
      (*(void (**)(_QWORD *__return_ptr, mlir::AsmParser *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(v190, a1, v115, v198);
      if (v190[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v190);
      if (v197)
      {
        v116 = __p;
        if (__p)
        {
          v117 = v196;
          v118 = __p;
          if (v196 != __p)
          {
            do
              v117 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v117 - 1);
            while (v117 != v116);
            v118 = __p;
          }
          v196 = v116;
          operator delete(v118);
        }
        v119 = v193;
        if (v193)
        {
          v120 = v194;
          v121 = v193;
          if (v194 != v193)
          {
            do
            {
              v123 = *--v120;
              v122 = v123;
              *v120 = 0;
              if (v123)
                MEMORY[0x20BD002D4](v122, 0x1000C8077774924);
            }
            while (v120 != v119);
            v121 = v193;
          }
          v194 = v119;
          operator delete(v121);
        }
        if (v191 != &v192)
          free(v191);
      }
      return 0;
    }
    v3 |= v4;
  }
  while ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 128))(a1));
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 168))(a1))
    return 0;
  Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
  v183[0] = v3;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v198[0] = &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id;
  v198[1] = Context;
  return mlir::StorageUniquer::get<mlir::arith::detail::FastMathFlagsAttrStorage,mlir::arith::FastMathFlags>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir5arith6detail24FastMathFlagsAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17FastMathFlagsAttrEJNS2_13FastMathFlagsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)v198, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id, v183);
}

llvm::raw_ostream *mlir::arith::FastMathFlagsAttr::print(mlir::arith::FastMathFlagsAttr *this, mlir::AsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  void **v7;
  size_t v8;
  llvm::raw_ostream *result;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  mlir::Attribute::getContext(this);
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "<", 1uLL);
  }
  else
  {
    *v5 = 60;
    ++*((_QWORD *)v4 + 4);
  }
  mlir::arith::stringifyFastMathFlags(*(_DWORD *)(*(_QWORD *)this + 8), (uint64_t)__p);
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v8 = v12;
  else
    v8 = (size_t)__p[1];
  llvm::raw_ostream::write(v6, (const char *)v7, v8);
  if ((char)v12 < 0)
    operator delete(__p[0]);
  result = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v10 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v10)
    return llvm::raw_ostream::write(result, ">", 1uLL);
  *v10 = 62;
  ++*((_QWORD *)result + 4);
  return result;
}

uint64_t mlir::arith::ArithDialect::parseAttribute(uint64_t a1, mlir::AsmParser *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void **v8;
  const void ***v9;
  char *v10;
  char *v11;
  __int128 v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  const void **v17;
  const char *v18;
  const void ***v19;
  char *v20;
  char *v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  char v38[32];
  __int16 v39;
  const void **v40;
  const char *v41;
  uint64_t v42;
  __int16 v43;
  mlir::AsmParser *v44;
  uint64_t v45;
  const void **v46;
  void *v47;
  unsigned int v48;
  unsigned int v49;
  _BYTE v50[96];
  void *v51;
  _QWORD *v52;
  void *__p;
  _QWORD *v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a2 + 40))(a2);
  v44 = a2;
  v5 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a2 + 40))(a2);
  BYTE2(v48) = 0;
  v46 = 0;
  v47 = 0;
  v45 = v5;
  LOBYTE(v48) = 0;
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, const void ***))(*(_QWORD *)a2 + 608))(a2, &v46))
  {
    LOWORD(v48) = 256;
    if (!BYTE2(v48))
      BYTE2(v48) = 1;
    goto LABEL_11;
  }
  v40 = (const void **)"fastmath";
  v41 = (const char *)8;
  if (BYTE2(v48))
    goto LABEL_11;
  v6 = (const char *)v47;
  if (!v47)
  {
    (*(void (**)(mlir::AsmParser *, const void ***, uint64_t))(*(_QWORD *)v44 + 616))(v44, &v40, 1);
    if (!BYTE2(v48))
    {
      v6 = (const char *)v47;
      goto LABEL_41;
    }
LABEL_11:
    v6 = 0;
    v8 = 0;
    v7 = 0;
    if ((unsigned __int16)mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult((uint64_t *)&v44) > 0xFFu)
      return v7;
    goto LABEL_12;
  }
  if (v47 == (void *)8 && *v46 == (const void *)0x6874616D74736166)
  {
    v7 = mlir::arith::FastMathFlagsAttr::parse(a2);
    v6 = 0;
    v8 = 0;
    LOBYTE(v48) = v7 != 0;
    *(_WORD *)((char *)&v48 + 1) = 257;
    if ((unsigned __int16)mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult((uint64_t *)&v44) > 0xFFu)
      return v7;
    goto LABEL_12;
  }
LABEL_41:
  v7 = 0;
  v8 = v46;
  LOWORD(v48) = 0;
  BYTE2(v48) = 1;
  if ((unsigned __int16)mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult((uint64_t *)&v44) > 0xFFu)
    return v7;
LABEL_12:
  v39 = 257;
  (*(void (**)(mlir::AsmParser **__return_ptr, mlir::AsmParser *, uint64_t, char *))(*(_QWORD *)a2 + 24))(&v44, a2, v4, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    v42 = 19;
    v9 = &v40;
    v10 = (char *)v47;
    if (v48 >= v49)
    {
      v32 = v48 + 1;
      if (v47 <= &v40 && (char *)v47 + 24 * v48 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v47;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v32, 24);
        v10 = (char *)v47;
        v9 = (const void ***)((char *)v47 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v32, 24);
        v9 = &v40;
        v10 = (char *)v47;
      }
    }
    v11 = &v10[24 * v48];
    v12 = *(_OWORD *)v9;
    *((_QWORD *)v11 + 2) = v9[2];
    *(_OWORD *)v11 = v12;
    ++v48;
    if (v44)
    {
      v43 = 261;
      v40 = v8;
      v41 = v6;
      mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
      if (v44)
      {
        LODWORD(v40) = 3;
        v42 = 14;
        v13 = &v40;
        v14 = (char *)v47;
        if (v48 >= v49)
        {
          v33 = v48 + 1;
          if (v47 <= &v40 && (char *)v47 + 24 * v48 > (char *)&v40)
          {
            v36 = (char *)&v40 - (_BYTE *)v47;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v33, 24);
            v14 = (char *)v47;
            v13 = (const void ***)((char *)v47 + v36);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v33, 24);
            v13 = &v40;
            v14 = (char *)v47;
          }
        }
        v15 = &v14[24 * v48];
        v16 = *(_OWORD *)v13;
        *((_QWORD *)v15 + 2) = v13[2];
        *(_OWORD *)v15 = v16;
        ++v48;
        if (v44)
        {
          v17 = *(const void ***)(a1 + 8);
          v18 = *(const char **)(a1 + 16);
          v43 = 261;
          v40 = v17;
          v41 = v18;
          mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
          if (v44)
          {
            LODWORD(v40) = 3;
            v42 = 1;
            v19 = &v40;
            v20 = (char *)v47;
            if (v48 >= v49)
            {
              v34 = v48 + 1;
              if (v47 <= &v40 && (char *)v47 + 24 * v48 > (char *)&v40)
              {
                v37 = (char *)&v40 - (_BYTE *)v47;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v34, 24);
                v20 = (char *)v47;
                v19 = (const void ***)((char *)v47 + v37);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v34, 24);
                v19 = &v40;
                v20 = (char *)v47;
              }
            }
            v21 = &v20[24 * v48];
            v22 = *(_OWORD *)v19;
            *((_QWORD *)v21 + 2) = v19[2];
            *(_OWORD *)v21 = v22;
            ++v48;
            if (v44)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
          }
        }
      }
    }
  }
  if (v55)
  {
    v23 = __p;
    if (__p)
    {
      v24 = v54;
      v25 = __p;
      if (v54 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p;
      }
      v54 = v23;
      operator delete(v25);
    }
    v26 = v51;
    if (v51)
    {
      v27 = v52;
      v28 = v51;
      if (v52 != v51)
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v51;
      }
      v52 = v26;
      operator delete(v28);
    }
    if (v47 != v50)
      free(v47);
  }
  return 0;
}

void mlir::arith::ArithDialect::printAttribute(uint64_t a1, uint64_t a2, mlir::AsmPrinter *a3)
{
  llvm::raw_ostream *v4;
  _QWORD *v5;
  uint64_t v6;

  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id)
  {
    v6 = a2;
    v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a3 + 16))(a3);
    v5 = (_QWORD *)*((_QWORD *)v4 + 4);
    if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 7uLL)
    {
      *v5 = 0x6874616D74736166;
      *((_QWORD *)v4 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v4, "fastmath", 8uLL);
    }
    mlir::arith::FastMathFlagsAttr::print((mlir::arith::FastMathFlagsAttr *)&v6, a3);
  }
}

uint64_t mlir::Dialect::addOperations<mlir::arith::AddFOp,mlir::arith::AddIOp,mlir::arith::AddUIExtendedOp,mlir::arith::AndIOp,mlir::arith::BitcastOp,mlir::arith::CeilDivSIOp,mlir::arith::CeilDivUIOp,mlir::arith::CmpFOp,mlir::arith::CmpIOp,mlir::arith::ConstantOp,mlir::arith::DivFOp,mlir::arith::DivSIOp,mlir::arith::DivUIOp,mlir::arith::ExtFOp,mlir::arith::ExtSIOp,mlir::arith::ExtUIOp,mlir::arith::FPToSIOp,mlir::arith::FPToUIOp,mlir::arith::FloorDivSIOp,mlir::arith::IndexCastOp,mlir::arith::IndexCastUIOp,mlir::arith::MaxNumFOp,mlir::arith::MaxSIOp,mlir::arith::MaxUIOp,mlir::arith::MaximumFOp,mlir::arith::MinNumFOp,mlir::arith::MinSIOp,mlir::arith::MinUIOp,mlir::arith::MinimumFOp,mlir::arith::MulFOp,mlir::arith::MulIOp,mlir::arith::MulSIExtendedOp,mlir::arith::MulUIExtendedOp,mlir::arith::NegFOp,mlir::arith::OrIOp,mlir::arith::RemFOp,mlir::arith::RemSIOp,mlir::arith::RemUIOp,mlir::arith::SIToFPOp,mlir::arith::ShLIOp,mlir::arith::ShRSIOp,mlir::arith::ShRUIOp,mlir::arith::SubFOp,mlir::arith::SubIOp,mlir::arith::TruncFOp,mlir::arith::TruncIOp,mlir::arith::UIToFPOp,mlir::arith::XOrIOp,mlir::arith::SelectOp>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t result;
  _QWORD *v100;

  v2 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::Model(v2, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, (uint64_t)&mlir::arith::AddFOp::getAttributeNames(void)::attrNames, 1);
  v3 = (uint64_t)v100;
  v100 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::Model(v4, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v5 = (uint64_t)v100;
  v100 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::Model(v6, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v7 = (uint64_t)v100;
  v100 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::Model(v8, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v9 = (uint64_t)v100;
  v100 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::Model(v10, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v11 = (uint64_t)v100;
  v100 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::Model(v12, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v13 = (uint64_t)v100;
  v100 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::Model(v14, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v15 = (uint64_t)v100;
  v100 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::Model(v16, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, (uint64_t)&mlir::arith::CmpFOp::getAttributeNames(void)::attrNames, 1);
  v17 = (uint64_t)v100;
  v100 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::Model(v18, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, (uint64_t)&mlir::arith::CmpIOp::getAttributeNames(void)::attrNames, 1);
  v19 = (uint64_t)v100;
  v100 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::Model(v20, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, (uint64_t)&mlir::arith::ConstantOp::getAttributeNames(void)::attrNames, 1);
  v21 = (uint64_t)v100;
  v100 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::Model(v22, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, (uint64_t)&mlir::arith::DivFOp::getAttributeNames(void)::attrNames, 1);
  v23 = (uint64_t)v100;
  v100 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::Model(v24, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v25 = (uint64_t)v100;
  v100 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::Model(v26, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v27 = (uint64_t)v100;
  v100 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::Model(v28, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v29 = (uint64_t)v100;
  v100 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::Model(v30, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v31 = (uint64_t)v100;
  v100 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::Model(v32, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v33 = (uint64_t)v100;
  v100 = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::Model(v34, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v35 = (uint64_t)v100;
  v100 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::Model(v36, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v37 = (uint64_t)v100;
  v100 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::Model(v38, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v39 = (uint64_t)v100;
  v100 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::Model(v40, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v41 = (uint64_t)v100;
  v100 = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::Model(v42, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v43 = (uint64_t)v100;
  v100 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::Model(v44, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, (uint64_t)&mlir::arith::MaxNumFOp::getAttributeNames(void)::attrNames, 1);
  v45 = (uint64_t)v100;
  v100 = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::Model(v46, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v47 = (uint64_t)v100;
  v100 = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::Model(v48, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v49 = (uint64_t)v100;
  v100 = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::Model(v50, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, (uint64_t)&mlir::arith::MaximumFOp::getAttributeNames(void)::attrNames, 1);
  v51 = (uint64_t)v100;
  v100 = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::Model(v52, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, (uint64_t)&mlir::arith::MinNumFOp::getAttributeNames(void)::attrNames, 1);
  v53 = (uint64_t)v100;
  v100 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::Model(v54, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v55 = (uint64_t)v100;
  v100 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::Model(v56, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v57 = (uint64_t)v100;
  v100 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::Model(v58, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, (uint64_t)&mlir::arith::MinimumFOp::getAttributeNames(void)::attrNames, 1);
  v59 = (uint64_t)v100;
  v100 = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  v60 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::Model(v60, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, (uint64_t)&mlir::arith::MulFOp::getAttributeNames(void)::attrNames, 1);
  v61 = (uint64_t)v100;
  v100 = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::Model(v62, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v63 = (uint64_t)v100;
  v100 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::Model(v64, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v65 = (uint64_t)v100;
  v100 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::Model(v66, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v67 = (uint64_t)v100;
  v100 = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::Model(v68, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, (uint64_t)&mlir::arith::NegFOp::getAttributeNames(void)::attrNames, 1);
  v69 = (uint64_t)v100;
  v100 = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::Model(v70, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v71 = (uint64_t)v100;
  v100 = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  v72 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::Model(v72, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, (uint64_t)&mlir::arith::RemFOp::getAttributeNames(void)::attrNames, 1);
  v73 = (uint64_t)v100;
  v100 = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::Model(v74, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v75 = (uint64_t)v100;
  v100 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::Model(v76, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v77 = (uint64_t)v100;
  v100 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  v78 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::Model(v78, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v79 = (uint64_t)v100;
  v100 = 0;
  if (v79)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  v80 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::Model(v80, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v81 = (uint64_t)v100;
  v100 = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::Model(v82, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v83 = (uint64_t)v100;
  v100 = 0;
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  v84 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::Model(v84, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v85 = (uint64_t)v100;
  v100 = 0;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  v86 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::Model(v86, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, (uint64_t)&mlir::arith::SubFOp::getAttributeNames(void)::attrNames, 1);
  v87 = (uint64_t)v100;
  v100 = 0;
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  v88 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::Model(v88, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v89 = (uint64_t)v100;
  v100 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  v90 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::Model(v90, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v91 = (uint64_t)v100;
  v100 = 0;
  if (v91)
    (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
  v92 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::Model(v92, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v93 = (uint64_t)v100;
  v100 = 0;
  if (v93)
    (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
  v94 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::Model(v94, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v95 = (uint64_t)v100;
  v100 = 0;
  if (v95)
    (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
  v96 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::Model(v96, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  v97 = (uint64_t)v100;
  v100 = 0;
  if (v97)
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  v98 = (_QWORD *)operator new();
  v100 = mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::Model(v98, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v100, 0, 0);
  result = (uint64_t)v100;
  v100 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

ZinIrHalH13g *mlir::arith::ArithDialect::materializeConstant(uint64_t a1, mlir::OpBuilder *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v8 = a4;
  if (*(_UNKNOWN **)(*a3 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    v5 = a3;
  else
    v5 = 0;
  v7 = v5;
  if (v5)
    return mlir::OpBuilder::create<mlir::ub::PoisonOp,mlir::Type &,mlir::ub::PoisonAttr &>(a2, a5, &v8, &v7);
  else
    return mlir::arith::ConstantOp::materialize(a2, a3, a4, a5);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::ub::PoisonOp,mlir::Type &,mlir::ub::PoisonAttr &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, _QWORD **a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  ZinIrHalH13g *v14;
  ZinIrHalH13g *v15;
  uint64_t v17;
  const char *v18;
  __int16 v19;
  uint64_t v20[4];
  __int16 v21;
  _QWORD v22[39];

  v22[38] = *MEMORY[0x24BDAC8D0];
  v17 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"ub.poison", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v21 = 1283;
    v20[2] = (uint64_t)"ub.poison";
    v20[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v22);
    llvm::report_fatal_error((llvm::Twine *)v22, 1);
  }
  mlir::OperationState::OperationState(v22, a2, v9);
  v11 = *a3;
  v12 = *a4;
  if (v12)
    v13 = mlir::detail::InterfaceMap::lookup<mlir::ub::PoisonAttrInterface>(*v12 + 8);
  else
    v13 = 0;
  mlir::ub::PoisonOp::build((uint64_t)a1, (uint64_t)v22, v11, (uint64_t)v12, v13);
  v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v22);
  if (*(_UNKNOWN **)(*((_QWORD *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonOp,void>::id)
    v15 = v14;
  else
    v15 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v22);
  return v15;
}

uint64_t mlir::AsmParser::parseKeyword(mlir::AsmParser *this, llvm::StringRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  _QWORD v17[3];
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  void *__p;
  _QWORD *v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)this + 40))(this);
  if ((*(unsigned __int8 (**)(mlir::AsmParser *, llvm::StringRef *))(*(_QWORD *)this + 384))(this, a2))
    return 1;
  v15 = "expected valid keyword";
  v16 = 259;
  (*(void (**)(_QWORD *__return_ptr, mlir::AsmParser *, uint64_t, const char **))(*(_QWORD *)this + 24))(v17, this, v4, &v15);
  v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v17[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v17);
  if (v24)
  {
    v7 = __p;
    if (__p)
    {
      v8 = v23;
      v9 = __p;
      if (v23 != __p)
      {
        do
          v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        v9 = __p;
      }
      v23 = v7;
      operator delete(v9);
    }
    v10 = v20;
    if (v20)
    {
      v11 = v21;
      v12 = v20;
      if (v21 != v20)
      {
        do
        {
          v14 = *--v11;
          v13 = v14;
          *v11 = 0;
          if (v14)
            MEMORY[0x20BD002D4](v13, 0x1000C8077774924);
        }
        while (v11 != v10);
        v12 = v20;
      }
      v21 = v10;
      operator delete(v12);
    }
    if (v18 != &v19)
      free(v18);
  }
  return v5;
}

uint64_t mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult(uint64_t *a1)
{
  unsigned int v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  const void **v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  const void **v18[4];
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  void *__p;
  _QWORD *v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a1 + 34))
  {
    v2 = *((unsigned __int16 *)a1 + 16);
    v3 = v2 >> 8;
  }
  else
  {
    v5 = *a1;
    v6 = a1[1];
    v16 = "unexpected keyword: ";
    v17 = 259;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)v5 + 24))(&v20, v5, v6, &v16);
    if (v20)
    {
      v19 = 261;
      v7 = (const void **)a1[3];
      v18[0] = (const void **)a1[2];
      v18[1] = v7;
      mlir::Diagnostic::operator<<((uint64_t)&v21, v18);
      if (v20)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
    }
    if (v28)
    {
      v8 = __p;
      if (__p)
      {
        v9 = v27;
        v10 = __p;
        if (v27 != __p)
        {
          do
            v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
          while (v9 != v8);
          v10 = __p;
        }
        v27 = v8;
        operator delete(v10);
      }
      v11 = v24;
      if (v24)
      {
        v12 = v25;
        v13 = v24;
        if (v25 != v24)
        {
          do
          {
            v15 = *--v12;
            v14 = v15;
            *v12 = 0;
            if (v15)
              MEMORY[0x20BD002D4](v14, 0x1000C8077774924);
          }
          while (v12 != v11);
          v13 = v24;
        }
        v25 = v11;
        operator delete(v13);
      }
      if (v22 != &v23)
        free(v22);
    }
    LOBYTE(v2) = 0;
    v3 = 1;
  }
  return v2 | (v3 << 8);
}

uint64_t mlir::StorageUniquer::get<mlir::arith::detail::FastMathFlagsAttrStorage,mlir::arith::FastMathFlags>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5;
  unsigned __int8 v6;
  _QWORD *v7;
  unint64_t v8;
  int v10;
  int v11;
  unint64_t v12;
  unsigned __int8 **v14;
  _QWORD v15[2];
  unsigned int *v16;
  unsigned int v17;
  _QWORD v18[2];

  v5 = a4;
  v18[0] = a2;
  v18[1] = a3;
  v17 = *a5;
  v7 = &unk_254519000;
  if ((v6 & 1) == 0)
  {
    v14 = a1;
    v7 = &unk_254519000;
    v11 = v10;
    v5 = a4;
    a1 = v14;
    if (v11)
    {
      v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v12 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      v7 = (_QWORD *)&unk_254519000;
      v5 = a4;
      a1 = v14;
    }
  }
  v8 = 0x9DDFEA08EB382D69
     * (v7[373] ^ v17 ^ ((0x9DDFEA08EB382D69 * (((8 * v17) | 4) ^ v7[373] ^ v17)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                              * (((8 * v17) | 4) ^ v7[373] ^ v17)));
  v15[0] = &v17;
  v15[1] = v18;
  v16 = &v17;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, -348639895 * ((v8 >> 47) ^ v8), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::arith::detail::FastMathFlagsAttrStorage * mlir::StorageUniquer::get<mlir::arith::detail::FastMathFlagsAttrStorage,mlir::arith::FastMathFlags>(llvm::function_ref<void ()(mlir::arith::detail::FastMathFlagsAttrStorage *)>,mlir::TypeID,mlir::arith::FastMathFlags &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::arith::detail::FastMathFlagsAttrStorage * mlir::StorageUniquer::get<mlir::arith::detail::FastMathFlagsAttrStorage,mlir::arith::FastMathFlags>(llvm::function_ref<void ()(mlir::arith::detail::FastMathFlagsAttrStorage *)>,mlir::TypeID,mlir::arith::FastMathFlags &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::arith::detail::FastMathFlagsAttrStorage * mlir::StorageUniquer::get<mlir::arith::detail::FastMathFlagsAttrStorage,mlir::arith::FastMathFlags>(llvm::function_ref<void ()(mlir::arith::detail::FastMathFlagsAttrStorage *)>,mlir::TypeID,mlir::arith::FastMathFlags &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_DWORD **a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 8) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::arith::detail::FastMathFlagsAttrStorage * mlir::StorageUniquer::get<mlir::arith::detail::FastMathFlagsAttrStorage,mlir::arith::FastMathFlags>(llvm::function_ref<void ()(mlir::arith::detail::FastMathFlagsAttrStorage *)>,mlir::TypeID,mlir::arith::FastMathFlags &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(int **a1, uint64_t a2)
{
  int v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  unint64_t v10;
  int *v11;

  v4 = **a1;
  *(_QWORD *)(a2 + 80) += 16;
  if (*(_QWORD *)a2)
    v5 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 16 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v5 = 1;
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v7];
    v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v10 = (*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a2 = v10 + 16;
  *(_QWORD *)v10 = 0;
  *(_DWORD *)(v10 + 8) = v4;
  v11 = a1[1];
  if (*(_QWORD *)v11)
    (*(void (**)(_QWORD, unint64_t))v11)(*((_QWORD *)v11 + 1), v10);
  return v10;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir5arith6detail24FastMathFlagsAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17FastMathFlagsAttrEJNS2_13FastMathFlagsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.addf", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::AddFOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C048998;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::arith::AddFOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddFOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::getFastMathAttrName;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      v15 = 85;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[272], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll(mlir::anec::Convolution *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  _BYTE *Value;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(mlir::anec::Convolution::getResult(a1) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v3 + 136) != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
    v3 = 0;
  v15 = v3;
  if (!v3)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  Value = (_BYTE *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  v5 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  v7 = (_BYTE *)(v5 + 8 * v6);
  v16 = v18;
  v17 = 0x400000000;
  v8 = v7 - Value;
  if ((unint64_t)(v7 - Value) < 0x21)
  {
    v9 = 0;
    v10 = v18;
    if (v7 == Value)
      goto LABEL_10;
    goto LABEL_9;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, v18, v8 >> 3, 8);
  v9 = v17;
  v10 = v16;
  if (v7 != Value)
  {
LABEL_9:
    memcpy(&v10[v9], Value, v7 - Value);
    v9 = v17;
    v10 = v16;
  }
LABEL_10:
  v11 = (unint64_t)v8 >> 3;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  v12 = v9 + ((unint64_t)v8 >> 3);
  LODWORD(v17) = v12;
  if ((_DWORD)v12 && &v16 != (void **)a2)
  {
    if (v10 == v18)
    {
      v14 = v9 + v11;
      v10 = v18;
      if (v12 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v12, 8),
            v14 = v17,
            v10 = v16,
            (_DWORD)v17))
      {
        memcpy(*(void **)a2, v10, 8 * v14);
        v10 = v16;
      }
      *(_DWORD *)(a2 + 8) = v12;
    }
    else
    {
      *(_QWORD *)a2 = v10;
      v13 = HIDWORD(v17);
      *(_DWORD *)(a2 + 8) = v12;
      *(_DWORD *)(a2 + 12) = v13;
      v16 = v18;
      HIDWORD(v17) = 0;
      v10 = v18;
    }
    LODWORD(v17) = 0;
  }
  *(_BYTE *)(a2 + 48) = 1;
  if (v10 != v18)
    free(v10);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::AddFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::AddFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.addf";
  v16[1] = 10;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

uint64_t mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(uint64_t a1, char a2, char *a3, uint64_t a4, char *a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  void *__p;
  _QWORD *v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  mlir::emitError(a1, (uint64_t)&v24);
  if (v24)
    mlir::Diagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>((uint64_t)&v25, a3, a4, a5, a6, a7, a8);
  v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v24);
  if (v24)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v24);
  if (v32)
  {
    v15 = __p;
    if (__p)
    {
      v16 = v31;
      v17 = __p;
      if (v31 != __p)
      {
        do
          v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        v17 = __p;
      }
      v31 = v15;
      operator delete(v17);
    }
    v18 = v28;
    if (v28)
    {
      v19 = v29;
      v20 = v28;
      if (v29 != v28)
      {
        do
        {
          v22 = *--v19;
          v21 = v22;
          *v19 = 0;
          if (v22)
            MEMORY[0x20BD002D4](v21, 0x1000C8077774924);
        }
        while (v19 != v18);
        v20 = v28;
      }
      v29 = v18;
      operator delete(v20);
    }
    if (v26 != &v27)
      free(v26);
  }
  return v14;
}

BOOL std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v13;
  BOOL v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;

  v10 = a6;
  v13 = a2;
  v15 = a1 == a3;
  if (a1 == a3 && a2 == a4)
  {
LABEL_3:
    if (a5 != a7)
      return 0;
  }
  else
  {
    if (a5 != a7)
    {
      if (a1 == a3)
      {
        while (1)
        {
          v17 = mlir::TypeRange::dereference_iterator(a1, v13);
          if (v17 != mlir::TypeRange::dereference_iterator(a5, v10))
            break;
          ++v13;
          ++v10;
          if (a4 == v13)
            goto LABEL_3;
        }
      }
      else
      {
        v19 = mlir::TypeRange::dereference_iterator(a1, a2);
        if (v19 == mlir::TypeRange::dereference_iterator(a5, v10))
        {
          v20 = v10 + 1;
          v21 = v13 + 1;
          do
          {
            v22 = mlir::TypeRange::dereference_iterator(a1, v21);
            v23 = mlir::TypeRange::dereference_iterator(a5, v20++);
            ++v21;
          }
          while (v22 == v23);
        }
      }
      return 0;
    }
    if (a1 != a3)
    {
      if (a6 != a8)
      {
        while (1)
        {
          v24 = mlir::TypeRange::dereference_iterator(a1, v13);
          if (v24 != mlir::TypeRange::dereference_iterator(a5, v10))
            break;
          ++v13;
          if (a8 == ++v10)
            goto LABEL_22;
        }
      }
      return 0;
    }
    while (a8 != v10)
    {
      v18 = mlir::TypeRange::dereference_iterator(a1, v13);
      if (v18 != mlir::TypeRange::dereference_iterator(a5, v10))
        return 0;
      ++v13;
      ++v10;
      if (a4 == v13)
        goto LABEL_3;
    }
LABEL_22:
    v25 = v15 && v13 == a4 && a5 == a7;
    v10 = a8;
    if (!v25)
      return 0;
  }
  return v10 == a8;
}

uint64_t mlir::Diagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(uint64_t a1, char *__s, uint64_t a3, char *a4, uint64_t a5, char *a6, uint64_t a7)
{
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const void ***v18;
  uint64_t v19;
  __int128 v20;
  char *v21;
  unint64_t v23;
  BOOL v24;
  char *v25;
  const void **v26;
  char *v27;
  size_t v28;
  __int16 v29;

  v14 = strlen(__s);
  v15 = a1 + 16;
  v16 = *(_QWORD *)(a1 + 16);
  LODWORD(v26) = 3;
  v27 = __s;
  v28 = v14;
  v17 = *(unsigned int *)(a1 + 24);
  v18 = &v26;
  if (v17 >= *(_DWORD *)(a1 + 28))
  {
    v23 = v17 + 1;
    v24 = v16 + 24 * v17 > (unint64_t)&v26;
    if (v16 <= (unint64_t)&v26 && v24)
    {
      v25 = (char *)&v26 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(a1 + 32), v23, 24);
      v16 = *(_QWORD *)(a1 + 16);
      v18 = (const void ***)&v25[v16];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(a1 + 32), v23, 24);
      v16 = *(_QWORD *)(a1 + 16);
      v18 = &v26;
    }
  }
  v19 = v16 + 24 * *(unsigned int *)(a1 + 24);
  v20 = *(_OWORD *)v18;
  *(_QWORD *)(v19 + 16) = v18[2];
  *(_OWORD *)v19 = v20;
  ++*(_DWORD *)(a1 + 24);
  v29 = 262;
  v21 = *(char **)(a3 + 8);
  v26 = *(const void ***)a3;
  v27 = v21;
  mlir::Diagnostic::operator<<(a1, &v26);
  return mlir::Diagnostic::append<char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a1, a4, a5, a6, a7);
}

uint64_t mlir::Diagnostic::append<char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(uint64_t a1, char *__s, uint64_t a3, char *a4, uint64_t a5)
{
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v18;
  BOOL v19;
  char *v20;
  char *v21[3];

  v10 = (char *)strlen(__s);
  v11 = a1 + 16;
  v12 = *(_QWORD *)(a1 + 16);
  LODWORD(v21[0]) = 3;
  v21[1] = __s;
  v21[2] = v10;
  v13 = *(unsigned int *)(a1 + 24);
  v14 = v21;
  if (v13 >= *(_DWORD *)(a1 + 28))
  {
    v18 = v13 + 1;
    v19 = v12 + 24 * v13 > (unint64_t)v21;
    if (v12 <= (unint64_t)v21 && v19)
    {
      v20 = (char *)v21 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v18, 24);
      v12 = *(_QWORD *)(a1 + 16);
      v14 = (char **)&v20[v12];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v18, 24);
      v12 = *(_QWORD *)(a1 + 16);
      v14 = v21;
    }
  }
  v15 = v12 + 24 * *(unsigned int *)(a1 + 24);
  v16 = *(_OWORD *)v14;
  *(_QWORD *)(v15 + 16) = v14[2];
  *(_OWORD *)v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  v21[0] = ", ";
  llvm::interleave<mlir::Type const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::SmallVector<mlir::Type,4u>>(llvm::SmallVector<mlir::Type,4u> const&,char const*)::{lambda(llvm::SmallVector<mlir::Type,4u> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::SmallVector<mlir::Type,4u>>(llvm::SmallVector<mlir::Type,4u> const&,char const*)::{lambda(void)#1},void>(*(uint64_t **)a3, (uint64_t *)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8)), a1, a1, v21);
  return mlir::Diagnostic::append<char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a1, a4, a5);
}

uint64_t mlir::Diagnostic::append<char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(uint64_t a1, char *__s, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v14;
  BOOL v15;
  char *v16;
  char *v17[3];

  v6 = (char *)strlen(__s);
  v7 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  LODWORD(v17[0]) = 3;
  v17[1] = __s;
  v17[2] = v6;
  v9 = *(unsigned int *)(a1 + 24);
  v10 = v17;
  if (v9 >= *(_DWORD *)(a1 + 28))
  {
    v14 = v9 + 1;
    v15 = v8 + 24 * v9 > (unint64_t)v17;
    if (v8 <= (unint64_t)v17 && v15)
    {
      v16 = (char *)v17 - v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v14, 24);
      v8 = *(_QWORD *)(a1 + 16);
      v10 = (char **)&v16[v8];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v14, 24);
      v8 = *(_QWORD *)(a1 + 16);
      v10 = v17;
    }
  }
  v11 = v8 + 24 * *(unsigned int *)(a1 + 24);
  v12 = *(_OWORD *)v10;
  *(_QWORD *)(v11 + 16) = v10[2];
  *(_OWORD *)v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  v17[0] = ", ";
  llvm::interleave<mlir::Type const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::SmallVector<mlir::Type,4u>>(llvm::SmallVector<mlir::Type,4u> const&,char const*)::{lambda(llvm::SmallVector<mlir::Type,4u> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::SmallVector<mlir::Type,4u>>(llvm::SmallVector<mlir::Type,4u> const&,char const*)::{lambda(void)#1},void>(*(uint64_t **)a3, (uint64_t *)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8)), a1, a1, v17);
  return a1;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::AddFOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::AddFOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v13[48];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::AddFOpGenericAdaptorBase::AddFOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::AddFOp::fold((uint64_t)&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 16 == (v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative(a1, a2, a3))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  const char *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  const char *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  const char *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  const char *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  unint64_t v125;
  unint64_t v126;
  const char *v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  unint64_t v147;
  unint64_t v148;
  const char *v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  const char *v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  unint64_t v169;
  unint64_t v170;
  const char *v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  unint64_t v180;
  unint64_t v181;
  const char *v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  int v190;
  unint64_t v191;
  unint64_t v192;
  const char *v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  unint64_t v202;
  unint64_t v203;
  const char *v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  int v212;
  unint64_t v213;
  unint64_t v214;
  const char *v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  int v223;
  unint64_t v224;
  unint64_t v225;
  const char *v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  int v234;
  unint64_t v235;
  unint64_t v236;
  const char *v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  int v244;
  unint64_t v245;
  unint64_t v246;
  const char *v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  int v252;
  int v253;
  unint64_t v254;
  unint64_t v255;
  const char *v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  const char *v415;
  unint64_t v416;

  if ((v1 & 1) == 0)
  {
    v57 = a1;
    a1 = v57;
    if (v58)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v416 = 83;
      v59 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v59)
        v60 = v59;
      else
        v60 = v416;
      v61 = &v415[v60];
      v62 = v416 - v60;
      if (v416 - v60 >= 0x12)
        v63 = 18;
      else
        v63 = v416 - v60;
      v64 = v62 - v63;
      if (v64 >= v64 - 1)
        v65 = v64 - 1;
      else
        v65 = v64;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      a1 = v57;
    }
  }
  v2 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v66 = a1;
    v67 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id;
    v2 = v67;
    v69 = v68;
    a1 = v66;
    if (v69)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v416 = 81;
      v70 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v70)
        v71 = v70;
      else
        v71 = v416;
      v72 = &v415[v71];
      v73 = v416 - v71;
      if (v416 - v71 >= 0x12)
        v74 = 18;
      else
        v74 = v416 - v71;
      v75 = v73 - v74;
      if (v75 >= v75 - 1)
        v76 = v75 - 1;
      else
        v76 = v75;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v72[v74], v76);
      v2 = v67;
      a1 = v66;
    }
  }
  v4 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v398 = a1;
    v77 = v2;
    v78 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id;
    v4 = v78;
    v2 = v77;
    v80 = v79;
    a1 = v398;
    if (v80)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v416 = 104;
      v81 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v81)
        v82 = v81;
      else
        v82 = v416;
      v83 = &v415[v82];
      v84 = v416 - v82;
      if (v416 - v82 >= 0x12)
        v85 = 18;
      else
        v85 = v416 - v82;
      v86 = v84 - v85;
      if (v86 >= v86 - 1)
        v87 = v86 - 1;
      else
        v87 = v86;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v83[v85], v87);
      v4 = v78;
      v2 = v77;
      a1 = v398;
    }
  }
  v6 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v382 = v4;
    v399 = a1;
    v88 = v2;
    v89 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
    v6 = v89;
    v2 = v88;
    v91 = v90;
    v4 = v382;
    a1 = v399;
    if (v91)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v416 = 86;
      v92 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v92)
        v93 = v92;
      else
        v93 = v416;
      v94 = &v415[v93];
      v95 = v416 - v93;
      if (v416 - v93 >= 0x12)
        v96 = 18;
      else
        v96 = v416 - v93;
      v97 = v95 - v96;
      if (v97 >= v97 - 1)
        v98 = v97 - 1;
      else
        v98 = v97;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      v6 = v89;
      v4 = v382;
      a1 = v399;
      v2 = v88;
    }
  }
  v8 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v9 & 1) == 0)
  {
    v383 = v4;
    v400 = a1;
    v367 = v2;
    v99 = v6;
    v100 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id;
    v8 = v100;
    v6 = v99;
    v2 = v367;
    v4 = v383;
    v102 = v101;
    a1 = v400;
    if (v102)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      v416 = 90;
      v103 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v103)
        v104 = v103;
      else
        v104 = v416;
      v105 = &v415[v104];
      v106 = v416 - v104;
      if (v416 - v104 >= 0x12)
        v107 = 18;
      else
        v107 = v416 - v104;
      v108 = v106 - v107;
      if (v108 >= v108 - 1)
        v109 = v108 - 1;
      else
        v109 = v108;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v105[v107], v109);
      v8 = v100;
      v6 = v99;
      v2 = v367;
      v4 = v383;
      a1 = v400;
    }
  }
  v10 = mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v11 & 1) == 0)
  {
    v384 = v4;
    v401 = a1;
    v353 = v6;
    v368 = v2;
    v110 = v8;
    v111 = mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
    v10 = v111;
    v8 = v110;
    v6 = v353;
    v2 = v368;
    v113 = v112;
    v4 = v384;
    a1 = v401;
    if (v113)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v416 = 84;
      v114 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v114)
        v115 = v114;
      else
        v115 = v416;
      v116 = &v415[v115];
      v117 = v416 - v115;
      if (v416 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v416 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v10 = v111;
      v8 = v110;
      v6 = v353;
      v2 = v368;
      v4 = v384;
      a1 = v401;
    }
  }
  v12 = mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v385 = v4;
    v402 = a1;
    v354 = v6;
    v369 = v2;
    v340 = v8;
    v121 = v10;
    v122 = mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id;
    v12 = v122;
    v10 = v121;
    v8 = v340;
    v6 = v354;
    v2 = v369;
    v4 = v385;
    v124 = v123;
    a1 = v402;
    if (v124)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v416 = 89;
      v125 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v125)
        v126 = v125;
      else
        v126 = v416;
      v127 = &v415[v126];
      v128 = v416 - v126;
      if (v416 - v126 >= 0x12)
        v129 = 18;
      else
        v129 = v416 - v126;
      v130 = v128 - v129;
      if (v130 >= v130 - 1)
        v131 = v130 - 1;
      else
        v131 = v130;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      v12 = v122;
      v10 = v121;
      v8 = v340;
      v6 = v354;
      v2 = v369;
      v4 = v385;
      a1 = v402;
    }
  }
  v14 = mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v15 & 1) == 0)
  {
    v386 = v4;
    v403 = a1;
    v355 = v6;
    v370 = v2;
    v341 = v8;
    v328 = v10;
    v132 = v12;
    v133 = mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v14 = v133;
    v12 = v132;
    v10 = v328;
    v8 = v341;
    v6 = v355;
    v2 = v370;
    v4 = v386;
    v135 = v134;
    a1 = v403;
    if (v135)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v416 = 95;
      v136 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v136)
        v137 = v136;
      else
        v137 = v416;
      v138 = &v415[v137];
      v139 = v416 - v137;
      if (v416 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v416 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      v14 = v133;
      v12 = v132;
      v10 = v328;
      v8 = v341;
      v6 = v355;
      v2 = v370;
      v4 = v386;
      a1 = v403;
    }
  }
  v16 = mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v17 & 1) == 0)
  {
    v387 = v4;
    v404 = a1;
    v356 = v6;
    v371 = v2;
    v342 = v8;
    v317 = v12;
    v329 = v10;
    v143 = v14;
    v144 = mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v16 = v144;
    v14 = v143;
    v12 = v317;
    v10 = v329;
    v8 = v342;
    v6 = v356;
    v2 = v371;
    v4 = v387;
    v146 = v145;
    a1 = v404;
    if (v146)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v416 = 99;
      v147 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v147)
        v148 = v147;
      else
        v148 = v416;
      v149 = &v415[v148];
      v150 = v416 - v148;
      if (v416 - v148 >= 0x12)
        v151 = 18;
      else
        v151 = v416 - v148;
      v152 = v150 - v151;
      if (v152 >= v152 - 1)
        v153 = v152 - 1;
      else
        v153 = v152;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v149[v151], v153);
      v16 = v144;
      v14 = v143;
      v12 = v317;
      v10 = v329;
      v8 = v342;
      v6 = v356;
      v2 = v371;
      v4 = v387;
      a1 = v404;
    }
  }
  v18 = mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v388 = v4;
    v405 = a1;
    v357 = v6;
    v372 = v2;
    v343 = v8;
    v318 = v12;
    v330 = v10;
    v307 = v14;
    v154 = v16;
    v155 = mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v18 = v155;
    v16 = v154;
    v14 = v307;
    v12 = v318;
    v10 = v330;
    v8 = v343;
    v6 = v357;
    v2 = v372;
    v4 = v388;
    v157 = v156;
    a1 = v405;
    if (v157)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v416 = 93;
      v158 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v158)
        v159 = v158;
      else
        v159 = v416;
      v160 = &v415[v159];
      v161 = v416 - v159;
      if (v416 - v159 >= 0x12)
        v162 = 18;
      else
        v162 = v416 - v159;
      v163 = v161 - v162;
      if (v163 >= v163 - 1)
        v164 = v163 - 1;
      else
        v164 = v163;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v160[v162], v164);
      v18 = v155;
      v16 = v154;
      v14 = v307;
      v12 = v318;
      v10 = v330;
      v8 = v343;
      v6 = v357;
      v2 = v372;
      v4 = v388;
      a1 = v405;
    }
  }
  v20 = mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v21 & 1) == 0)
  {
    v389 = v4;
    v406 = a1;
    v358 = v6;
    v373 = v2;
    v344 = v8;
    v319 = v12;
    v331 = v10;
    v298 = v16;
    v308 = v14;
    v165 = v18;
    v166 = mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v20 = v166;
    v18 = v165;
    v16 = v298;
    v14 = v308;
    v12 = v319;
    v10 = v331;
    v8 = v344;
    v6 = v358;
    v2 = v373;
    v4 = v389;
    v168 = v167;
    a1 = v406;
    if (v168)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface::Trait<Empty>]";
      v416 = 99;
      v169 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v169)
        v170 = v169;
      else
        v170 = v416;
      v171 = &v415[v170];
      v172 = v416 - v170;
      if (v416 - v170 >= 0x12)
        v173 = 18;
      else
        v173 = v416 - v170;
      v174 = v172 - v173;
      if (v174 >= v174 - 1)
        v175 = v174 - 1;
      else
        v175 = v174;
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::arith::ArithFastMathInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v171[v173], v175);
      v20 = v166;
      v18 = v165;
      v16 = v298;
      v14 = v308;
      v12 = v319;
      v10 = v331;
      v8 = v344;
      v6 = v358;
      v2 = v373;
      v4 = v389;
      a1 = v406;
    }
  }
  v22 = mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::arith::ArithFastMathInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v23 & 1) == 0)
  {
    v390 = v4;
    v407 = a1;
    v359 = v6;
    v374 = v2;
    v345 = v8;
    v320 = v12;
    v332 = v10;
    v299 = v16;
    v309 = v14;
    v290 = v18;
    v176 = v20;
    v177 = mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::arith::ArithFastMathInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v22 = v177;
    v20 = v176;
    v18 = v290;
    v16 = v299;
    v14 = v309;
    v12 = v320;
    v10 = v332;
    v8 = v345;
    v6 = v359;
    v2 = v374;
    v4 = v390;
    v179 = v178;
    a1 = v407;
    if (v179)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsCommutative<Empty>]";
      v416 = 85;
      v180 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v180)
        v181 = v180;
      else
        v181 = v416;
      v182 = &v415[v181];
      v183 = v416 - v181;
      if (v416 - v181 >= 0x12)
        v184 = 18;
      else
        v184 = v416 - v181;
      v185 = v183 - v184;
      if (v185 >= v185 - 1)
        v186 = v185 - 1;
      else
        v186 = v185;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsCommutative<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsCommutative>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v182[v184], v186);
      v22 = v177;
      v20 = v176;
      v18 = v290;
      v16 = v299;
      v14 = v309;
      v12 = v320;
      v10 = v332;
      v8 = v345;
      v6 = v359;
      v2 = v374;
      v4 = v390;
      a1 = v407;
    }
  }
  v24 = mlir::detail::TypeIDResolver<mlir::OpTrait::IsCommutative<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsCommutative>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v391 = v4;
    v408 = a1;
    v360 = v6;
    v375 = v2;
    v346 = v8;
    v321 = v12;
    v333 = v10;
    v300 = v16;
    v310 = v14;
    v283 = v20;
    v291 = v18;
    v187 = v22;
    v188 = mlir::detail::TypeIDResolver<mlir::OpTrait::IsCommutative<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsCommutative>(void)::Empty>,void>::resolveTypeID(void)::id;
    v24 = v188;
    v22 = v187;
    v20 = v283;
    v18 = v291;
    v16 = v300;
    v14 = v310;
    v12 = v321;
    v10 = v333;
    v8 = v346;
    v6 = v360;
    v2 = v375;
    v4 = v391;
    v190 = v189;
    a1 = v408;
    if (v190)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultType<Empty>]";
      v416 = 97;
      v191 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v191)
        v192 = v191;
      else
        v192 = v416;
      v193 = &v415[v192];
      v194 = v416 - v192;
      if (v416 - v192 >= 0x12)
        v195 = 18;
      else
        v195 = v416 - v192;
      v196 = v194 - v195;
      if (v196 >= v196 - 1)
        v197 = v196 - 1;
      else
        v197 = v196;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v193[v195], v197);
      v24 = v188;
      v22 = v187;
      v20 = v283;
      v18 = v291;
      v16 = v300;
      v14 = v310;
      v12 = v321;
      v10 = v333;
      v8 = v346;
      v6 = v360;
      v2 = v375;
      v4 = v391;
      a1 = v408;
    }
  }
  v26 = mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v27 & 1) == 0)
  {
    v392 = v4;
    v409 = a1;
    v361 = v6;
    v376 = v2;
    v347 = v8;
    v322 = v12;
    v334 = v10;
    v301 = v16;
    v311 = v14;
    v284 = v20;
    v292 = v18;
    v277 = v22;
    v198 = v24;
    v199 = mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id;
    v26 = v199;
    v24 = v198;
    v22 = v277;
    v20 = v284;
    v18 = v292;
    v16 = v301;
    v14 = v311;
    v12 = v322;
    v10 = v334;
    v8 = v347;
    v6 = v361;
    v2 = v376;
    v4 = v392;
    v201 = v200;
    a1 = v409;
    if (v201)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      v416 = 93;
      v202 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v202)
        v203 = v202;
      else
        v203 = v416;
      v204 = &v415[v203];
      v205 = v416 - v203;
      if (v416 - v203 >= 0x12)
        v206 = 18;
      else
        v206 = v416 - v203;
      v207 = v205 - v206;
      if (v207 >= v207 - 1)
        v208 = v207 - 1;
      else
        v208 = v207;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v204[v206], v208);
      v26 = v199;
      v24 = v198;
      v22 = v277;
      v20 = v284;
      v18 = v292;
      v16 = v301;
      v14 = v311;
      v12 = v322;
      v10 = v334;
      v8 = v347;
      v6 = v361;
      v2 = v376;
      v4 = v392;
      a1 = v409;
    }
  }
  v28 = mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v29 & 1) == 0)
  {
    v393 = v4;
    v410 = a1;
    v362 = v6;
    v377 = v2;
    v348 = v8;
    v323 = v12;
    v335 = v10;
    v302 = v16;
    v312 = v14;
    v285 = v20;
    v293 = v18;
    v272 = v24;
    v278 = v22;
    v209 = v26;
    v210 = mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v28 = v210;
    v26 = v209;
    v24 = v272;
    v22 = v278;
    v20 = v285;
    v18 = v293;
    v16 = v302;
    v14 = v312;
    v12 = v323;
    v10 = v335;
    v8 = v348;
    v6 = v362;
    v2 = v377;
    v4 = v393;
    v212 = v211;
    a1 = v410;
    if (v212)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      v416 = 83;
      v213 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v213)
        v214 = v213;
      else
        v214 = v416;
      v215 = &v415[v214];
      v216 = v416 - v214;
      if (v416 - v214 >= 0x12)
        v217 = 18;
      else
        v217 = v416 - v214;
      v218 = v216 - v217;
      if (v218 >= v218 - 1)
        v219 = v218 - 1;
      else
        v219 = v218;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v215[v217], v219);
      v28 = v210;
      v26 = v209;
      v24 = v272;
      v22 = v278;
      v20 = v285;
      v18 = v293;
      v16 = v302;
      v14 = v312;
      v12 = v323;
      v10 = v335;
      v8 = v348;
      v6 = v362;
      v2 = v377;
      v4 = v393;
      a1 = v410;
    }
  }
  v30 = mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v394 = v4;
    v411 = a1;
    v363 = v6;
    v378 = v2;
    v349 = v8;
    v324 = v12;
    v336 = v10;
    v303 = v16;
    v313 = v14;
    v286 = v20;
    v294 = v18;
    v273 = v24;
    v279 = v22;
    v220 = v26;
    v221 = v28;
    v261 = mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id;
    v30 = v261;
    v28 = v221;
    v26 = v220;
    v24 = v273;
    v22 = v279;
    v20 = v286;
    v18 = v294;
    v16 = v303;
    v14 = v313;
    v12 = v324;
    v10 = v336;
    v8 = v349;
    v6 = v363;
    v2 = v378;
    v4 = v394;
    v223 = v222;
    a1 = v411;
    if (v223)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      v416 = 84;
      v224 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v224)
        v225 = v224;
      else
        v225 = v416;
      v226 = &v415[v225];
      v227 = v416 - v225;
      if (v416 - v225 >= 0x12)
        v228 = 18;
      else
        v228 = v416 - v225;
      v229 = v227 - v228;
      if (v229 >= v229 - 1)
        v230 = v229 - 1;
      else
        v230 = v229;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v226[v228], v230);
      v30 = v261;
      v28 = v221;
      v26 = v220;
      v24 = v273;
      v22 = v279;
      v20 = v286;
      v18 = v294;
      v16 = v303;
      v14 = v313;
      v12 = v324;
      v10 = v336;
      v8 = v349;
      v6 = v363;
      v2 = v378;
      v4 = v394;
      a1 = v411;
    }
  }
  v32 = mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v33 & 1) == 0)
  {
    v395 = v4;
    v412 = a1;
    v364 = v6;
    v379 = v2;
    v350 = v8;
    v325 = v12;
    v337 = v10;
    v304 = v16;
    v314 = v14;
    v287 = v20;
    v295 = v18;
    v274 = v24;
    v280 = v22;
    v266 = v26;
    v269 = mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id;
    v231 = v28;
    v232 = v30;
    v26 = v266;
    v32 = v269;
    v30 = v232;
    v28 = v231;
    v24 = v274;
    v22 = v280;
    v20 = v287;
    v18 = v295;
    v16 = v304;
    v14 = v314;
    v12 = v325;
    v10 = v337;
    v8 = v350;
    v6 = v364;
    v2 = v379;
    v4 = v395;
    v234 = v233;
    a1 = v412;
    if (v234)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      v416 = 84;
      v235 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v235)
        v236 = v235;
      else
        v236 = v416;
      v237 = &v415[v236];
      v238 = v416 - v236;
      if (v416 - v236 >= 0x12)
        v239 = 18;
      else
        v239 = v416 - v236;
      v240 = v238 - v239;
      if (v240 >= v240 - 1)
        v241 = v240 - 1;
      else
        v241 = v240;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v237[v239], v241);
      v26 = v266;
      v32 = v269;
      v30 = v232;
      v28 = v231;
      v24 = v274;
      v22 = v280;
      v20 = v287;
      v18 = v295;
      v16 = v304;
      v14 = v314;
      v12 = v325;
      v10 = v337;
      v8 = v350;
      v6 = v364;
      v2 = v379;
      v4 = v395;
      a1 = v412;
    }
  }
  v34 = mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v35 & 1) == 0)
  {
    v396 = v4;
    v413 = a1;
    v365 = v6;
    v380 = v2;
    v351 = v8;
    v326 = v12;
    v338 = v10;
    v305 = v16;
    v315 = v14;
    v288 = v20;
    v296 = v18;
    v275 = v24;
    v281 = v22;
    v267 = v26;
    v270 = v32;
    v263 = v28;
    v265 = mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
    v242 = v30;
    v28 = v263;
    v34 = v265;
    v26 = v267;
    v32 = v270;
    v30 = v242;
    v24 = v275;
    v22 = v281;
    v20 = v288;
    v18 = v296;
    v16 = v305;
    v14 = v315;
    v12 = v326;
    v10 = v338;
    v8 = v351;
    v6 = v365;
    v2 = v380;
    v4 = v396;
    v244 = v243;
    a1 = v413;
    if (v244)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      v416 = 84;
      v245 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v245)
        v246 = v245;
      else
        v246 = v416;
      v247 = &v415[v246];
      v248 = v416 - v246;
      if (v416 - v246 >= 0x12)
        v249 = 18;
      else
        v249 = v416 - v246;
      v250 = v248 - v249;
      if (v250 >= v250 - 1)
        v251 = v250 - 1;
      else
        v251 = v250;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v247[v249], v251);
      v28 = v263;
      v34 = v265;
      v26 = v267;
      v32 = v270;
      v30 = v242;
      v24 = v275;
      v22 = v281;
      v20 = v288;
      v18 = v296;
      v16 = v305;
      v14 = v315;
      v12 = v326;
      v10 = v338;
      v8 = v351;
      v6 = v365;
      v2 = v380;
      v4 = v396;
      a1 = v413;
    }
  }
  v36 = mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v37 & 1) == 0)
  {
    v397 = v4;
    v414 = a1;
    v366 = v6;
    v381 = v2;
    v352 = v8;
    v327 = v12;
    v339 = v10;
    v306 = v16;
    v316 = v14;
    v289 = v20;
    v297 = v18;
    v276 = v24;
    v282 = v22;
    v268 = v26;
    v271 = v32;
    v262 = v30;
    v264 = v28;
    v28 = v264;
    v26 = v268;
    v32 = v271;
    v30 = v262;
    v24 = v276;
    v22 = v282;
    v20 = v289;
    v18 = v297;
    v16 = v306;
    v14 = v316;
    v12 = v327;
    v10 = v339;
    v8 = v352;
    v6 = v366;
    v2 = v381;
    v4 = v397;
    v253 = v252;
    a1 = v414;
    if (v253)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v416 = 90;
      v254 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v254)
        v255 = v254;
      else
        v255 = v416;
      v256 = &v415[v255];
      v257 = v416 - v255;
      if (v416 - v255 >= 0x12)
        v258 = 18;
      else
        v258 = v416 - v255;
      v259 = v257 - v258;
      if (v259 >= v259 - 1)
        v260 = v259 - 1;
      else
        v260 = v259;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v256[v258], v260);
      v28 = v264;
      v26 = v268;
      v32 = v271;
      v30 = v262;
      v24 = v276;
      v22 = v282;
      v20 = v289;
      v18 = v297;
      v16 = v306;
      v14 = v316;
      v12 = v327;
      v10 = v339;
      v8 = v352;
      v6 = v366;
      v2 = v381;
      v4 = v397;
      a1 = v414;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v28 == a1
      || v30 == a1
      || v32 == a1
      || v34 == a1
      || v36 == a1
      || mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddFOp>,mlir::OpTrait::OneResult<mlir::arith::AddFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::AddFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::Elementwise<mlir::arith::AddFOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddFOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddFOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddFOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddFOp>,mlir::OpTrait::OneResult<mlir::arith::AddFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::AddFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::Elementwise<mlir::arith::AddFOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddFOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddFOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddFOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::OpTrait::impl *v8;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (v8 = a1, mlir::arith::AddFOp::verifyInvariantsImpl((uint64_t **)&v8))
    && mlir::OpTrait::impl::verifySameOperandsAndResultType(a1, v5))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.addi", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C048A60;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::arith::AddIOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::AddIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinIrHalH13g *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::AddIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::AddIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::AddIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.addi";
  v16[1] = 10;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::AddIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::AddIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::AddIOpGenericAdaptorBase::AddIOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::AddIOp::fold((uint64_t *)&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative((uint64_t)a1, a2, a3))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  unsigned __int8 v35;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  const char *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  const char *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  const char *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  const char *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  const char *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  unint64_t v108;
  unint64_t v109;
  const char *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  const char *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  const char *v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  const char *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  const char *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  unint64_t v153;
  unint64_t v154;
  const char *v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  const char *v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  unint64_t v172;
  unint64_t v173;
  const char *v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  int v181;
  unint64_t v182;
  unint64_t v183;
  const char *v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  const char *v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  unint64_t v202;
  unint64_t v203;
  const char *v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  int v209;
  int v210;
  unint64_t v211;
  unint64_t v212;
  const char *v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  const char *v385;
  unint64_t v386;

  if ((v1 & 1) == 0)
  {
    v367 = a1;
    a1 = v367;
    if (v54)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v386 = 83;
      v55 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v55)
        v56 = v55;
      else
        v56 = v386;
      v57 = &v385[v56];
      v58 = v386 - v56;
      if (v386 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v386 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      a1 = v367;
    }
  }
  v2 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v350 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id;
    v368 = a1;
    v2 = v350;
    a1 = v368;
    if (v62)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v386 = 81;
      v63 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v63)
        v64 = v63;
      else
        v64 = v386;
      v65 = &v385[v64];
      v66 = v386 - v64;
      if (v386 - v64 >= 0x12)
        v67 = 18;
      else
        v67 = v386 - v64;
      v68 = v66 - v67;
      if (v68 >= v68 - 1)
        v69 = v68 - 1;
      else
        v69 = v68;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v65[v67], v69);
      v2 = v350;
      a1 = v368;
    }
  }
  v4 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v351 = v2;
    v369 = a1;
    v334 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id;
    v4 = v334;
    v2 = v351;
    v71 = v70;
    a1 = v369;
    if (v71)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v386 = 104;
      v72 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v72)
        v73 = v72;
      else
        v73 = v386;
      v74 = &v385[v73];
      v75 = v386 - v73;
      if (v386 - v73 >= 0x12)
        v76 = 18;
      else
        v76 = v386 - v73;
      v77 = v75 - v76;
      if (v77 >= v77 - 1)
        v78 = v77 - 1;
      else
        v78 = v77;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v74[v76], v78);
      v4 = v334;
      v2 = v351;
      a1 = v369;
    }
  }
  v6 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v352 = v2;
    v370 = a1;
    v319 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
    v335 = v4;
    v6 = v319;
    v4 = v335;
    v80 = v79;
    v2 = v352;
    a1 = v370;
    if (v80)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v386 = 86;
      v81 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v81)
        v82 = v81;
      else
        v82 = v386;
      v83 = &v385[v82];
      v84 = v386 - v82;
      if (v386 - v82 >= 0x12)
        v85 = 18;
      else
        v85 = v386 - v82;
      v86 = v84 - v85;
      if (v86 >= v86 - 1)
        v87 = v86 - 1;
      else
        v87 = v86;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v83[v85], v87);
      v6 = v319;
      v4 = v335;
      v2 = v352;
      a1 = v370;
    }
  }
  v8 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v9 & 1) == 0)
  {
    v353 = v2;
    v371 = a1;
    v320 = v6;
    v336 = v4;
    v305 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id;
    v8 = v305;
    v6 = v320;
    v4 = v336;
    v2 = v353;
    v89 = v88;
    a1 = v371;
    if (v89)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      v386 = 90;
      v90 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v90)
        v91 = v90;
      else
        v91 = v386;
      v92 = &v385[v91];
      v93 = v386 - v91;
      if (v386 - v91 >= 0x12)
        v94 = 18;
      else
        v94 = v386 - v91;
      v95 = v93 - v94;
      if (v95 >= v95 - 1)
        v96 = v95 - 1;
      else
        v96 = v95;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v92[v94], v96);
      v8 = v305;
      v6 = v320;
      v4 = v336;
      v2 = v353;
      a1 = v371;
    }
  }
  v10 = mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v11 & 1) == 0)
  {
    v354 = v2;
    v372 = a1;
    v321 = v6;
    v337 = v4;
    v306 = v8;
    v292 = mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
    v10 = v292;
    v8 = v306;
    v6 = v321;
    v4 = v337;
    v2 = v354;
    v98 = v97;
    a1 = v372;
    if (v98)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v386 = 84;
      v99 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v99)
        v100 = v99;
      else
        v100 = v386;
      v101 = &v385[v100];
      v102 = v386 - v100;
      if (v386 - v100 >= 0x12)
        v103 = 18;
      else
        v103 = v386 - v100;
      v104 = v102 - v103;
      if (v104 >= v104 - 1)
        v105 = v104 - 1;
      else
        v105 = v104;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v101[v103], v105);
      v10 = v292;
      v8 = v306;
      v6 = v321;
      v4 = v337;
      v2 = v354;
      a1 = v372;
    }
  }
  v12 = mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v355 = v2;
    v373 = a1;
    v322 = v6;
    v338 = v4;
    v307 = v8;
    v280 = mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id;
    v293 = v10;
    v12 = v280;
    v10 = v293;
    v8 = v307;
    v6 = v322;
    v4 = v338;
    v2 = v355;
    v107 = v106;
    a1 = v373;
    if (v107)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsCommutative<Empty>]";
      v386 = 85;
      v108 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v108)
        v109 = v108;
      else
        v109 = v386;
      v110 = &v385[v109];
      v111 = v386 - v109;
      if (v386 - v109 >= 0x12)
        v112 = 18;
      else
        v112 = v386 - v109;
      v113 = v111 - v112;
      if (v113 >= v113 - 1)
        v114 = v113 - 1;
      else
        v114 = v113;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsCommutative<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsCommutative>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v110[v112], v114);
      v12 = v280;
      v10 = v293;
      v8 = v307;
      v6 = v322;
      v4 = v338;
      v2 = v355;
      a1 = v373;
    }
  }
  v14 = mlir::detail::TypeIDResolver<mlir::OpTrait::IsCommutative<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsCommutative>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v15 & 1) == 0)
  {
    v356 = v2;
    v374 = a1;
    v323 = v6;
    v339 = v4;
    v308 = v8;
    v281 = v12;
    v294 = v10;
    v269 = mlir::detail::TypeIDResolver<mlir::OpTrait::IsCommutative<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsCommutative>(void)::Empty>,void>::resolveTypeID(void)::id;
    v14 = v269;
    v12 = v281;
    v10 = v294;
    v8 = v308;
    v6 = v323;
    v4 = v339;
    v2 = v356;
    v116 = v115;
    a1 = v374;
    if (v116)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v386 = 95;
      v117 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v117)
        v118 = v117;
      else
        v118 = v386;
      v119 = &v385[v118];
      v120 = v386 - v118;
      if (v386 - v118 >= 0x12)
        v121 = 18;
      else
        v121 = v386 - v118;
      v122 = v120 - v121;
      if (v122 >= v122 - 1)
        v123 = v122 - 1;
      else
        v123 = v122;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v119[v121], v123);
      v14 = v269;
      v12 = v281;
      v10 = v294;
      v8 = v308;
      v6 = v323;
      v4 = v339;
      v2 = v356;
      a1 = v374;
    }
  }
  v16 = mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v17 & 1) == 0)
  {
    v357 = v2;
    v375 = a1;
    v324 = v6;
    v340 = v4;
    v309 = v8;
    v282 = v12;
    v295 = v10;
    v259 = mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v270 = v14;
    v16 = v259;
    v14 = v270;
    v12 = v282;
    v10 = v295;
    v8 = v309;
    v6 = v324;
    v4 = v340;
    v2 = v357;
    v125 = v124;
    a1 = v375;
    if (v125)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v386 = 99;
      v126 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v126)
        v127 = v126;
      else
        v127 = v386;
      v128 = &v385[v127];
      v129 = v386 - v127;
      if (v386 - v127 >= 0x12)
        v130 = 18;
      else
        v130 = v386 - v127;
      v131 = v129 - v130;
      if (v131 >= v131 - 1)
        v132 = v131 - 1;
      else
        v132 = v131;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v128[v130], v132);
      v16 = v259;
      v14 = v270;
      v12 = v282;
      v10 = v295;
      v8 = v309;
      v6 = v324;
      v4 = v340;
      v2 = v357;
      a1 = v375;
    }
  }
  v18 = mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v358 = v2;
    v376 = a1;
    v325 = v6;
    v341 = v4;
    v310 = v8;
    v283 = v12;
    v296 = v10;
    v260 = v16;
    v271 = v14;
    v250 = mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v18 = v250;
    v16 = v260;
    v14 = v271;
    v12 = v283;
    v10 = v296;
    v8 = v310;
    v6 = v325;
    v4 = v341;
    v2 = v358;
    v134 = v133;
    a1 = v376;
    if (v134)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v386 = 93;
      v135 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v135)
        v136 = v135;
      else
        v136 = v386;
      v137 = &v385[v136];
      v138 = v386 - v136;
      if (v386 - v136 >= 0x12)
        v139 = 18;
      else
        v139 = v386 - v136;
      v140 = v138 - v139;
      if (v140 >= v140 - 1)
        v141 = v140 - 1;
      else
        v141 = v140;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v137[v139], v141);
      v18 = v250;
      v16 = v260;
      v14 = v271;
      v12 = v283;
      v10 = v296;
      v8 = v310;
      v6 = v325;
      v4 = v341;
      v2 = v358;
      a1 = v376;
    }
  }
  v20 = mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v21 & 1) == 0)
  {
    v359 = v2;
    v377 = a1;
    v326 = v6;
    v342 = v4;
    v311 = v8;
    v284 = v12;
    v297 = v10;
    v261 = v16;
    v272 = v14;
    v242 = mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v251 = v18;
    v20 = v242;
    v18 = v251;
    v16 = v261;
    v14 = v272;
    v12 = v284;
    v10 = v297;
    v8 = v311;
    v6 = v326;
    v4 = v342;
    v2 = v359;
    v143 = v142;
    a1 = v377;
    if (v143)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface::Trait<Empty>]";
      v386 = 92;
      v144 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v144)
        v145 = v144;
      else
        v145 = v386;
      v146 = &v385[v145];
      v147 = v386 - v145;
      if (v386 - v145 >= 0x12)
        v148 = 18;
      else
        v148 = v386 - v145;
      v149 = v147 - v148;
      if (v149 >= v149 - 1)
        v150 = v149 - 1;
      else
        v150 = v149;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v146[v148], v150);
      v20 = v242;
      v18 = v251;
      v16 = v261;
      v14 = v272;
      v12 = v284;
      v10 = v297;
      v8 = v311;
      v6 = v326;
      v4 = v342;
      v2 = v359;
      a1 = v377;
    }
  }
  v22 = mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v23 & 1) == 0)
  {
    v360 = v2;
    v378 = a1;
    v327 = v6;
    v343 = v4;
    v312 = v8;
    v285 = v12;
    v298 = v10;
    v262 = v16;
    v273 = v14;
    v243 = v20;
    v252 = v18;
    v235 = mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v22 = v235;
    v20 = v243;
    v18 = v252;
    v16 = v262;
    v14 = v273;
    v12 = v285;
    v10 = v298;
    v8 = v312;
    v6 = v327;
    v4 = v343;
    v2 = v360;
    v152 = v151;
    a1 = v378;
    if (v152)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultType<Empty>]";
      v386 = 97;
      v153 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v153)
        v154 = v153;
      else
        v154 = v386;
      v155 = &v385[v154];
      v156 = v386 - v154;
      if (v386 - v154 >= 0x12)
        v157 = 18;
      else
        v157 = v386 - v154;
      v158 = v156 - v157;
      if (v158 >= v158 - 1)
        v159 = v158 - 1;
      else
        v159 = v158;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v155[v157], v159);
      v22 = v235;
      v20 = v243;
      v18 = v252;
      v16 = v262;
      v14 = v273;
      v12 = v285;
      v10 = v298;
      v8 = v312;
      v6 = v327;
      v4 = v343;
      v2 = v360;
      a1 = v378;
    }
  }
  v24 = mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v361 = v2;
    v379 = a1;
    v328 = v6;
    v344 = v4;
    v313 = v8;
    v286 = v12;
    v299 = v10;
    v263 = v16;
    v274 = v14;
    v244 = v20;
    v253 = v18;
    v229 = mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id;
    v236 = v22;
    v24 = v229;
    v22 = v236;
    v20 = v244;
    v18 = v253;
    v16 = v263;
    v14 = v274;
    v12 = v286;
    v10 = v299;
    v8 = v313;
    v6 = v328;
    v4 = v344;
    v2 = v361;
    v161 = v160;
    a1 = v379;
    if (v161)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      v386 = 93;
      v162 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v162)
        v163 = v162;
      else
        v163 = v386;
      v164 = &v385[v163];
      v165 = v386 - v163;
      if (v386 - v163 >= 0x12)
        v166 = 18;
      else
        v166 = v386 - v163;
      v167 = v165 - v166;
      if (v167 >= v167 - 1)
        v168 = v167 - 1;
      else
        v168 = v167;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v164[v166], v168);
      v24 = v229;
      v22 = v236;
      v20 = v244;
      v18 = v253;
      v16 = v263;
      v14 = v274;
      v12 = v286;
      v10 = v299;
      v8 = v313;
      v6 = v328;
      v4 = v344;
      v2 = v361;
      a1 = v379;
    }
  }
  v26 = mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v27 & 1) == 0)
  {
    v362 = v2;
    v380 = a1;
    v329 = v6;
    v345 = v4;
    v314 = v8;
    v287 = v12;
    v300 = v10;
    v264 = v16;
    v275 = v14;
    v245 = v20;
    v254 = v18;
    v230 = v24;
    v237 = v22;
    v169 = mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v26 = v169;
    v24 = v230;
    v22 = v237;
    v20 = v245;
    v18 = v254;
    v16 = v264;
    v14 = v275;
    v12 = v287;
    v10 = v300;
    v8 = v314;
    v6 = v329;
    v4 = v345;
    v2 = v362;
    v171 = v170;
    a1 = v380;
    if (v171)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      v386 = 83;
      v172 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v172)
        v173 = v172;
      else
        v173 = v386;
      v174 = &v385[v173];
      v175 = v386 - v173;
      if (v386 - v173 >= 0x12)
        v176 = 18;
      else
        v176 = v386 - v173;
      v177 = v175 - v176;
      if (v177 >= v177 - 1)
        v178 = v177 - 1;
      else
        v178 = v177;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v174[v176], v178);
      v26 = v169;
      v24 = v230;
      v22 = v237;
      v20 = v245;
      v18 = v254;
      v16 = v264;
      v14 = v275;
      v12 = v287;
      v10 = v300;
      v8 = v314;
      v6 = v329;
      v4 = v345;
      v2 = v362;
      a1 = v380;
    }
  }
  v28 = mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v29 & 1) == 0)
  {
    v363 = v2;
    v381 = a1;
    v330 = v6;
    v346 = v4;
    v315 = v8;
    v288 = v12;
    v301 = v10;
    v265 = v16;
    v276 = v14;
    v246 = v20;
    v255 = v18;
    v231 = v24;
    v238 = v22;
    v179 = v26;
    v223 = mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id;
    v28 = v223;
    v26 = v179;
    v24 = v231;
    v22 = v238;
    v20 = v246;
    v18 = v255;
    v16 = v265;
    v14 = v276;
    v12 = v288;
    v10 = v301;
    v8 = v315;
    v6 = v330;
    v4 = v346;
    v2 = v363;
    v181 = v180;
    a1 = v381;
    if (v181)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      v386 = 84;
      v182 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v182)
        v183 = v182;
      else
        v183 = v386;
      v184 = &v385[v183];
      v185 = v386 - v183;
      if (v386 - v183 >= 0x12)
        v186 = 18;
      else
        v186 = v386 - v183;
      v187 = v185 - v186;
      if (v187 >= v187 - 1)
        v188 = v187 - 1;
      else
        v188 = v187;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v184[v186], v188);
      v28 = v223;
      v26 = v179;
      v24 = v231;
      v22 = v238;
      v20 = v246;
      v18 = v255;
      v16 = v265;
      v14 = v276;
      v12 = v288;
      v10 = v301;
      v8 = v315;
      v6 = v330;
      v4 = v346;
      v2 = v363;
      a1 = v381;
    }
  }
  v30 = mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v364 = v2;
    v382 = a1;
    v331 = v6;
    v347 = v4;
    v316 = v8;
    v289 = v12;
    v302 = v10;
    v266 = v16;
    v277 = v14;
    v247 = v20;
    v256 = v18;
    v232 = v24;
    v239 = v22;
    v226 = v26;
    v189 = v28;
    v219 = mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id;
    v30 = v219;
    v28 = v189;
    v26 = v226;
    v24 = v232;
    v22 = v239;
    v20 = v247;
    v18 = v256;
    v16 = v266;
    v14 = v277;
    v12 = v289;
    v10 = v302;
    v8 = v316;
    v6 = v331;
    v4 = v347;
    v2 = v364;
    v191 = v190;
    a1 = v382;
    if (v191)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      v386 = 84;
      v192 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v192)
        v193 = v192;
      else
        v193 = v386;
      v194 = &v385[v193];
      v195 = v386 - v193;
      if (v386 - v193 >= 0x12)
        v196 = 18;
      else
        v196 = v386 - v193;
      v197 = v195 - v196;
      if (v197 >= v197 - 1)
        v198 = v197 - 1;
      else
        v198 = v197;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v194[v196], v198);
      v30 = v219;
      v28 = v189;
      v26 = v226;
      v24 = v232;
      v22 = v239;
      v20 = v247;
      v18 = v256;
      v16 = v266;
      v14 = v277;
      v12 = v289;
      v10 = v302;
      v8 = v316;
      v6 = v331;
      v4 = v347;
      v2 = v364;
      a1 = v382;
    }
  }
  v32 = mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v33 & 1) == 0)
  {
    v365 = v2;
    v383 = a1;
    v332 = v6;
    v348 = v4;
    v317 = v8;
    v290 = v12;
    v303 = v10;
    v267 = v16;
    v278 = v14;
    v248 = v20;
    v257 = v18;
    v233 = v24;
    v240 = v22;
    v224 = v28;
    v227 = v26;
    v199 = v30;
    v221 = mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
    v32 = v221;
    v28 = v224;
    v30 = v199;
    v26 = v227;
    v24 = v233;
    v22 = v240;
    v20 = v248;
    v18 = v257;
    v16 = v267;
    v14 = v278;
    v12 = v290;
    v10 = v303;
    v8 = v317;
    v6 = v332;
    v4 = v348;
    v2 = v365;
    v201 = v200;
    a1 = v383;
    if (v201)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      v386 = 84;
      v202 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v202)
        v203 = v202;
      else
        v203 = v386;
      v204 = &v385[v203];
      v205 = v386 - v203;
      if (v386 - v203 >= 0x12)
        v206 = 18;
      else
        v206 = v386 - v203;
      v207 = v205 - v206;
      if (v207 >= v207 - 1)
        v208 = v207 - 1;
      else
        v208 = v207;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v204[v206], v208);
      v32 = v221;
      v28 = v224;
      v30 = v199;
      v26 = v227;
      v24 = v233;
      v22 = v240;
      v20 = v248;
      v18 = v257;
      v16 = v267;
      v14 = v278;
      v12 = v290;
      v10 = v303;
      v8 = v317;
      v6 = v332;
      v4 = v348;
      v2 = v365;
      a1 = v383;
    }
  }
  v34 = mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v35 & 1) == 0)
  {
    v366 = v2;
    v384 = a1;
    v333 = v6;
    v349 = v4;
    v318 = v8;
    v291 = v12;
    v304 = v10;
    v268 = v16;
    v279 = v14;
    v249 = v20;
    v258 = v18;
    v234 = v24;
    v241 = v22;
    v225 = v28;
    v228 = v26;
    v220 = v30;
    v222 = v32;
    v218 = mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
    v34 = v218;
    v30 = v220;
    v32 = v222;
    v28 = v225;
    v26 = v228;
    v24 = v234;
    v22 = v241;
    v20 = v249;
    v18 = v258;
    v16 = v268;
    v14 = v279;
    v12 = v291;
    v10 = v304;
    v8 = v318;
    v6 = v333;
    v4 = v349;
    v2 = v366;
    v210 = v209;
    a1 = v384;
    if (v210)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v386 = 90;
      v211 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v211)
        v212 = v211;
      else
        v212 = v386;
      v213 = &v385[v212];
      v214 = v386 - v212;
      if (v386 - v212 >= 0x12)
        v215 = 18;
      else
        v215 = v386 - v212;
      v216 = v214 - v215;
      if (v216 >= v216 - 1)
        v217 = v216 - 1;
      else
        v217 = v216;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v213[v215], v217);
      v34 = v218;
      v30 = v220;
      v32 = v222;
      v28 = v225;
      v26 = v228;
      v24 = v234;
      v22 = v241;
      v20 = v249;
      v18 = v258;
      v16 = v268;
      v14 = v279;
      v12 = v291;
      v10 = v304;
      v8 = v318;
      v6 = v333;
      v4 = v349;
      v2 = v366;
      a1 = v384;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v28 == a1
      || v30 == a1
      || v32 == a1
      || v34 == a1
      || mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::OpTrait::impl *v8;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (v8 = a1, mlir::arith::AddIOp::verifyInvariantsImpl((uint64_t **)&v8))
    && mlir::OpTrait::impl::verifySameOperandsAndResultType(a1, v5))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.addui_extended", 20, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::AddUIExtendedOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C048678;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::arith::AddUIExtendedOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::AddUIExtendedOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::arith::AddUIExtendedOp::getShapeForUnroll((mlir::arith::AddUIExtendedOp *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getDefaultDialect;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[336], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getAsmResultNames(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::arith::AddUIExtendedOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getDefaultDialect()
{
  return &byte_207AF6795;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  BOOL v11;
  unsigned int *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::AddUIExtendedOpGenericAdaptorBase::AddUIExtendedOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::AddUIExtendedOp::fold((uint64_t)&v13, (uint64_t)v14, a5);
  v10 = *(_DWORD *)(a5 + 8);
  if ((_BYTE)v9)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (v11 && !v10 && mlir::OpTrait::impl::foldCommutative((uint64_t)a2, a3, a4))
    return 1;
  return v9;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned __int8 v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned __int8 v43;
  _QWORD *v44;
  int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  const char *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  const char *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  const char *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  const char *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  const char *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  const char *v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  const char *v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  unint64_t v125;
  unint64_t v126;
  const char *v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  unint64_t v134;
  unint64_t v135;
  const char *v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  const char *v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  int v150;
  int v151;
  unint64_t v152;
  unint64_t v153;
  const char *v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  unint64_t v161;
  unint64_t v162;
  const char *v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  int v168;
  int v169;
  unint64_t v170;
  unint64_t v171;
  const char *v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  int v177;
  int v178;
  unint64_t v179;
  unint64_t v180;
  const char *v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  unint64_t v188;
  unint64_t v189;
  const char *v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  const char *v315;
  unint64_t v316;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v300 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v61 = v60;
    a1 = v300;
    if (v61)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v316 = 83;
      v62 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v62)
        v63 = v62;
      else
        v63 = v316;
      v64 = &v315[v63];
      v65 = v316 - v63;
      if (v316 - v63 >= 0x12)
        v66 = 18;
      else
        v66 = v316 - v63;
      v67 = v65 - v66;
      if (v67 >= v67 - 1)
        v68 = v67 - 1;
      else
        v68 = v67;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v300;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v286 = v3;
    v301 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v70 = v69;
    v3 = v286;
    a1 = v301;
    if (v70)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NResults<2>::Impl<Empty>]";
      v316 = 89;
      v71 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v71)
        v72 = v71;
      else
        v72 = v316;
      v73 = &v315[v72];
      v74 = v316 - v72;
      if (v316 - v72 >= 0x12)
        v75 = 18;
      else
        v75 = v316 - v72;
      v76 = v74 - v75;
      if (v76 >= v76 - 1)
        v77 = v76 - 1;
      else
        v77 = v76;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NResults<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NResults<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v286;
      a1 = v301;
    }
  }
  v6 = v5[338];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v287 = v3;
    v302 = a1;
    v273 = v6;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v273;
    v3 = v287;
    v79 = v78;
    a1 = v302;
    if (v79)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v316 = 86;
      v80 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v80)
        v81 = v80;
      else
        v81 = v316;
      v82 = &v315[v81];
      v83 = v316 - v81;
      if (v316 - v81 >= 0x12)
        v84 = 18;
      else
        v84 = v316 - v81;
      v85 = v83 - v84;
      if (v85 >= v85 - 1)
        v86 = v85 - 1;
      else
        v86 = v85;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v273;
      v3 = v287;
      a1 = v302;
    }
  }
  v9 = v8[419];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v288 = v3;
    v303 = a1;
    v261 = v9;
    v274 = v6;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v261;
    v6 = v274;
    v88 = v87;
    v3 = v288;
    a1 = v303;
    if (v88)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      v316 = 90;
      v89 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v89)
        v90 = v89;
      else
        v90 = v316;
      v91 = &v315[v90];
      v92 = v316 - v90;
      if (v316 - v90 >= 0x12)
        v93 = 18;
      else
        v93 = v316 - v90;
      v94 = v92 - v93;
      if (v94 >= v94 - 1)
        v95 = v94 - 1;
      else
        v95 = v94;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v261;
      v6 = v274;
      v3 = v288;
      a1 = v303;
    }
  }
  v12 = v11[79];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v289 = v3;
    v304 = a1;
    v262 = v9;
    v275 = v6;
    v250 = v12;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v250;
    v9 = v262;
    v6 = v275;
    v3 = v289;
    v97 = v96;
    a1 = v304;
    if (v97)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v316 = 84;
      v98 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v98)
        v99 = v98;
      else
        v99 = v316;
      v100 = &v315[v99];
      v101 = v316 - v99;
      if (v316 - v99 >= 0x12)
        v102 = 18;
      else
        v102 = v316 - v99;
      v103 = v101 - v102;
      if (v103 >= v103 - 1)
        v104 = v103 - 1;
      else
        v104 = v103;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v250;
      v9 = v262;
      v6 = v275;
      v3 = v289;
      a1 = v304;
    }
  }
  v15 = v14[423];
  v17 = &unk_25451A000;
  if ((v16 & 1) == 0)
  {
    v290 = v3;
    v305 = a1;
    v263 = v9;
    v276 = v6;
    v251 = v12;
    v240 = v15;
    v17 = (_QWORD *)&unk_25451A000;
    v15 = v240;
    v12 = v251;
    v9 = v263;
    v6 = v276;
    v3 = v290;
    v106 = v105;
    a1 = v305;
    if (v106)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v316 = 95;
      v107 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v107)
        v108 = v107;
      else
        v108 = v316;
      v109 = &v315[v108];
      v110 = v316 - v108;
      if (v316 - v108 >= 0x12)
        v111 = 18;
      else
        v111 = v316 - v108;
      v112 = v110 - v111;
      if (v112 >= v112 - 1)
        v113 = v112 - 1;
      else
        v113 = v112;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      v17 = (_QWORD *)&unk_25451A000;
      v15 = v240;
      v12 = v251;
      v9 = v263;
      v6 = v276;
      v3 = v290;
      a1 = v305;
    }
  }
  v18 = v17[312];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v291 = v3;
    v306 = a1;
    v264 = v9;
    v277 = v6;
    v252 = v12;
    v231 = v18;
    v241 = v15;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v231;
    v15 = v241;
    v12 = v252;
    v9 = v264;
    v6 = v277;
    v3 = v291;
    v115 = v114;
    a1 = v306;
    if (v115)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v316 = 99;
      v116 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v116)
        v117 = v116;
      else
        v117 = v316;
      v118 = &v315[v117];
      v119 = v316 - v117;
      if (v316 - v117 >= 0x12)
        v120 = 18;
      else
        v120 = v316 - v117;
      v121 = v119 - v120;
      if (v121 >= v121 - 1)
        v122 = v121 - 1;
      else
        v122 = v121;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v231;
      v15 = v241;
      v12 = v252;
      v9 = v264;
      v6 = v277;
      v3 = v291;
      a1 = v306;
    }
  }
  v21 = v20[314];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v292 = v3;
    v307 = a1;
    v265 = v9;
    v278 = v6;
    v253 = v12;
    v232 = v18;
    v242 = v15;
    v223 = v21;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v223;
    v18 = v232;
    v15 = v242;
    v12 = v253;
    v9 = v265;
    v6 = v278;
    v3 = v292;
    v124 = v123;
    a1 = v307;
    if (v124)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v316 = 93;
      v125 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v125)
        v126 = v125;
      else
        v126 = v316;
      v127 = &v315[v126];
      v128 = v316 - v126;
      if (v316 - v126 >= 0x12)
        v129 = 18;
      else
        v129 = v316 - v126;
      v130 = v128 - v129;
      if (v130 >= v130 - 1)
        v131 = v130 - 1;
      else
        v131 = v130;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v223;
      v18 = v232;
      v15 = v242;
      v12 = v253;
      v9 = v265;
      v6 = v278;
      v3 = v292;
      a1 = v307;
    }
  }
  v24 = v23[21];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v293 = v3;
    v308 = a1;
    v266 = v9;
    v279 = v6;
    v254 = v12;
    v233 = v18;
    v243 = v15;
    v216 = v24;
    v224 = v21;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v216;
    v21 = v224;
    v18 = v233;
    v15 = v243;
    v12 = v254;
    v9 = v266;
    v6 = v279;
    v3 = v293;
    v133 = v132;
    a1 = v308;
    if (v133)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsCommutative<Empty>]";
      v316 = 85;
      v134 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v134)
        v135 = v134;
      else
        v135 = v316;
      v136 = &v315[v135];
      v137 = v316 - v135;
      if (v316 - v135 >= 0x12)
        v138 = 18;
      else
        v138 = v316 - v135;
      v139 = v137 - v138;
      if (v139 >= v139 - 1)
        v140 = v139 - 1;
      else
        v140 = v139;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsCommutative<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsCommutative>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v136[v138], v140);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v216;
      v21 = v224;
      v18 = v233;
      v15 = v243;
      v12 = v254;
      v9 = v266;
      v6 = v279;
      v3 = v293;
      a1 = v308;
    }
  }
  v27 = v26[141];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v294 = v3;
    v309 = a1;
    v267 = v9;
    v280 = v6;
    v255 = v12;
    v234 = v18;
    v244 = v15;
    v217 = v24;
    v225 = v21;
    v210 = v27;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v210;
    v24 = v217;
    v21 = v225;
    v18 = v234;
    v15 = v244;
    v12 = v255;
    v9 = v267;
    v6 = v280;
    v3 = v294;
    v142 = v141;
    a1 = v309;
    if (v142)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      v316 = 93;
      v143 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v143)
        v144 = v143;
      else
        v144 = v316;
      v145 = &v315[v144];
      v146 = v316 - v144;
      if (v316 - v144 >= 0x12)
        v147 = 18;
      else
        v147 = v316 - v144;
      v148 = v146 - v147;
      if (v148 >= v148 - 1)
        v149 = v148 - 1;
      else
        v149 = v148;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v145[v147], v149);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v210;
      v24 = v217;
      v21 = v225;
      v18 = v234;
      v15 = v244;
      v12 = v255;
      v9 = v267;
      v6 = v280;
      v3 = v294;
      a1 = v309;
    }
  }
  v30 = v29[320];
  v32 = &unk_25451A000;
  if ((v31 & 1) == 0)
  {
    v295 = v3;
    v310 = a1;
    v268 = v9;
    v281 = v6;
    v256 = v12;
    v235 = v18;
    v245 = v15;
    v218 = v24;
    v226 = v21;
    v205 = v30;
    v211 = v27;
    v32 = (_QWORD *)&unk_25451A000;
    v30 = v205;
    v27 = v211;
    v24 = v218;
    v21 = v226;
    v18 = v235;
    v15 = v245;
    v12 = v256;
    v9 = v268;
    v6 = v281;
    v3 = v295;
    v151 = v150;
    a1 = v310;
    if (v151)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      v316 = 83;
      v152 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v152)
        v153 = v152;
      else
        v153 = v316;
      v154 = &v315[v153];
      v155 = v316 - v153;
      if (v316 - v153 >= 0x12)
        v156 = 18;
      else
        v156 = v316 - v153;
      v157 = v155 - v156;
      if (v157 >= v157 - 1)
        v158 = v157 - 1;
      else
        v158 = v157;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v154[v156], v158);
      v32 = (_QWORD *)&unk_25451A000;
      v30 = v205;
      v27 = v211;
      v24 = v218;
      v21 = v226;
      v18 = v235;
      v15 = v245;
      v12 = v256;
      v9 = v268;
      v6 = v281;
      v3 = v295;
      a1 = v310;
    }
  }
  v33 = v32[322];
  v35 = &unk_25451A000;
  if ((v34 & 1) == 0)
  {
    v296 = v3;
    v311 = a1;
    v269 = v9;
    v282 = v6;
    v257 = v12;
    v236 = v18;
    v246 = v15;
    v219 = v24;
    v227 = v21;
    v206 = v30;
    v212 = v27;
    v201 = v33;
    v35 = (_QWORD *)&unk_25451A000;
    v33 = v201;
    v30 = v206;
    v27 = v212;
    v24 = v219;
    v21 = v227;
    v18 = v236;
    v15 = v246;
    v12 = v257;
    v9 = v269;
    v6 = v282;
    v3 = v296;
    v160 = v159;
    a1 = v311;
    if (v160)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      v316 = 84;
      v161 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v161)
        v162 = v161;
      else
        v162 = v316;
      v163 = &v315[v162];
      v164 = v316 - v162;
      if (v316 - v162 >= 0x12)
        v165 = 18;
      else
        v165 = v316 - v162;
      v166 = v164 - v165;
      if (v166 >= v166 - 1)
        v167 = v166 - 1;
      else
        v167 = v166;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v163[v165], v167);
      v35 = (_QWORD *)&unk_25451A000;
      v33 = v201;
      v30 = v206;
      v27 = v212;
      v24 = v219;
      v21 = v227;
      v18 = v236;
      v15 = v246;
      v12 = v257;
      v9 = v269;
      v6 = v282;
      v3 = v296;
      a1 = v311;
    }
  }
  v36 = v35[324];
  v38 = &unk_25451A000;
  if ((v37 & 1) == 0)
  {
    v297 = v3;
    v312 = a1;
    v270 = v9;
    v283 = v6;
    v258 = v12;
    v237 = v18;
    v247 = v15;
    v220 = v24;
    v228 = v21;
    v207 = v30;
    v213 = v27;
    v198 = v36;
    v202 = v33;
    v38 = (_QWORD *)&unk_25451A000;
    v36 = v198;
    v33 = v202;
    v30 = v207;
    v27 = v213;
    v24 = v220;
    v21 = v228;
    v18 = v237;
    v15 = v247;
    v12 = v258;
    v9 = v270;
    v6 = v283;
    v3 = v297;
    v169 = v168;
    a1 = v312;
    if (v169)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      v316 = 84;
      v170 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v170)
        v171 = v170;
      else
        v171 = v316;
      v172 = &v315[v171];
      v173 = v316 - v171;
      if (v316 - v171 >= 0x12)
        v174 = 18;
      else
        v174 = v316 - v171;
      v175 = v173 - v174;
      if (v175 >= v175 - 1)
        v176 = v175 - 1;
      else
        v176 = v175;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v172[v174], v176);
      v38 = (_QWORD *)&unk_25451A000;
      v36 = v198;
      v33 = v202;
      v30 = v207;
      v27 = v213;
      v24 = v220;
      v21 = v228;
      v18 = v237;
      v15 = v247;
      v12 = v258;
      v9 = v270;
      v6 = v283;
      v3 = v297;
      a1 = v312;
    }
  }
  v39 = v38[326];
  v41 = &unk_25451A000;
  if ((v40 & 1) == 0)
  {
    v298 = v3;
    v313 = a1;
    v271 = v9;
    v284 = v6;
    v259 = v12;
    v238 = v18;
    v248 = v15;
    v221 = v24;
    v229 = v21;
    v208 = v30;
    v214 = v27;
    v199 = v36;
    v203 = v33;
    v196 = v39;
    v41 = (_QWORD *)&unk_25451A000;
    v39 = v196;
    v36 = v199;
    v33 = v203;
    v30 = v208;
    v27 = v214;
    v24 = v221;
    v21 = v229;
    v18 = v238;
    v15 = v248;
    v12 = v259;
    v9 = v271;
    v6 = v284;
    v3 = v298;
    v178 = v177;
    a1 = v313;
    if (v178)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      v316 = 84;
      v179 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v179)
        v180 = v179;
      else
        v180 = v316;
      v181 = &v315[v180];
      v182 = v316 - v180;
      if (v316 - v180 >= 0x12)
        v183 = 18;
      else
        v183 = v316 - v180;
      v184 = v182 - v183;
      if (v184 >= v184 - 1)
        v185 = v184 - 1;
      else
        v185 = v184;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v181[v183], v185);
      v41 = (_QWORD *)&unk_25451A000;
      v39 = v196;
      v36 = v199;
      v33 = v203;
      v30 = v208;
      v27 = v214;
      v24 = v221;
      v21 = v229;
      v18 = v238;
      v15 = v248;
      v12 = v259;
      v9 = v271;
      v6 = v284;
      v3 = v298;
      a1 = v313;
    }
  }
  v42 = v41[328];
  v44 = &unk_25451A000;
  if ((v43 & 1) == 0)
  {
    v299 = v3;
    v314 = a1;
    v272 = v9;
    v285 = v6;
    v260 = v12;
    v239 = v18;
    v249 = v15;
    v222 = v24;
    v230 = v21;
    v209 = v30;
    v215 = v27;
    v200 = v36;
    v204 = v33;
    v195 = v42;
    v197 = v39;
    v44 = (_QWORD *)&unk_25451A000;
    v42 = v195;
    v39 = v197;
    v36 = v200;
    v33 = v204;
    v30 = v209;
    v27 = v215;
    v24 = v222;
    v21 = v230;
    v18 = v239;
    v15 = v249;
    v12 = v260;
    v9 = v272;
    v6 = v285;
    v3 = v299;
    v187 = v186;
    a1 = v314;
    if (v187)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v316 = 86;
      v188 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v188)
        v189 = v188;
      else
        v189 = v316;
      v190 = &v315[v189];
      v191 = v316 - v189;
      if (v316 - v189 >= 0x12)
        v192 = 18;
      else
        v192 = v316 - v189;
      v193 = v191 - v192;
      if (v193 >= v193 - 1)
        v194 = v193 - 1;
      else
        v194 = v193;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v190[v192], v194);
      v44 = (_QWORD *)&unk_25451A000;
      v42 = v195;
      v39 = v197;
      v36 = v200;
      v33 = v204;
      v30 = v209;
      v27 = v215;
      v24 = v222;
      v21 = v230;
      v18 = v239;
      v15 = v249;
      v12 = v260;
      v9 = v272;
      v6 = v285;
      v3 = v299;
      a1 = v314;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v36 == a1
      || v39 == a1
      || v42 == a1
      || v44[340] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddUIExtendedOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::NResults<2u>::Impl<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddUIExtendedOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddUIExtendedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddUIExtendedOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::Elementwise<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddUIExtendedOp>,mlir::OpAsmOpInterface::Trait<mlir::arith::AddUIExtendedOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::NResults<2u>::Impl<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddUIExtendedOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddUIExtendedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddUIExtendedOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::Elementwise<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddUIExtendedOp>,mlir::OpAsmOpInterface::Trait<mlir::arith::AddUIExtendedOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyNResults(a1, (mlir::Operation *)2)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (v6 = a1, mlir::arith::AddUIExtendedOp::verifyInvariantsImpl((uint64_t **)&v6)))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AndIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.andi", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::AndIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C048B28;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::arith::AndIOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::AndIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AndIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AndIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AndIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::inferResultRanges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::AndIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::AndIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::AndIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.andi";
  v16[1] = 10;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::AndIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::AndIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  mlir::Operation *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  _BYTE v17[40];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v16 = a1;
  mlir::arith::detail::AndIOpGenericAdaptorBase::AndIOpGenericAdaptorBase((uint64_t)v17, a1);
  v18 = a2;
  v19 = a3;
  v8 = mlir::arith::AndIOp::fold((uint64_t *)&v16, (uint64_t)v17);
  v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8))
      return v9 > 7;
    if (mlir::OpTrait::impl::foldCommutative((uint64_t)a1, a2, a3))
      return 1;
    if (*(_DWORD *)(a4 + 8))
      return v9 > 7;
    v13 = mlir::OpTrait::impl::foldIdempotent((mlir::OpTrait::impl *)a1, v12);
    if (v13 < 8)
      return v9 > 7;
    v14 = v13;
    if (a1 - 4 == (unsigned int *)(v13 & ((uint64_t)(v13 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
      return 1;
    v15 = *(unsigned int *)(a4 + 8);
    if (v15 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v15 + 1, 8);
      LODWORD(v15) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v15) = v14;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
  }
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  const char *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  const char *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  const char *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  const char *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  unint64_t v125;
  unint64_t v126;
  const char *v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  unint64_t v147;
  unint64_t v148;
  const char *v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  const char *v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  unint64_t v169;
  unint64_t v170;
  const char *v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  unint64_t v180;
  unint64_t v181;
  const char *v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  int v190;
  unint64_t v191;
  unint64_t v192;
  const char *v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  unint64_t v202;
  unint64_t v203;
  const char *v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  int v212;
  unint64_t v213;
  unint64_t v214;
  const char *v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  int v223;
  unint64_t v224;
  unint64_t v225;
  const char *v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  int v234;
  unint64_t v235;
  unint64_t v236;
  const char *v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  int v244;
  unint64_t v245;
  unint64_t v246;
  const char *v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  int v252;
  int v253;
  unint64_t v254;
  unint64_t v255;
  const char *v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  const char *v415;
  unint64_t v416;

  if ((v1 & 1) == 0)
  {
    v57 = a1;
    a1 = v57;
    if (v58)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v416 = 83;
      v59 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v59)
        v60 = v59;
      else
        v60 = v416;
      v61 = &v415[v60];
      v62 = v416 - v60;
      if (v416 - v60 >= 0x12)
        v63 = 18;
      else
        v63 = v416 - v60;
      v64 = v62 - v63;
      if (v64 >= v64 - 1)
        v65 = v64 - 1;
      else
        v65 = v64;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      a1 = v57;
    }
  }
  v2 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v66 = a1;
    v67 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id;
    v2 = v67;
    v69 = v68;
    a1 = v66;
    if (v69)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v416 = 81;
      v70 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v70)
        v71 = v70;
      else
        v71 = v416;
      v72 = &v415[v71];
      v73 = v416 - v71;
      if (v416 - v71 >= 0x12)
        v74 = 18;
      else
        v74 = v416 - v71;
      v75 = v73 - v74;
      if (v75 >= v75 - 1)
        v76 = v75 - 1;
      else
        v76 = v75;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v72[v74], v76);
      v2 = v67;
      a1 = v66;
    }
  }
  v4 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v398 = a1;
    v77 = v2;
    v78 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id;
    v4 = v78;
    v2 = v77;
    v80 = v79;
    a1 = v398;
    if (v80)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v416 = 104;
      v81 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v81)
        v82 = v81;
      else
        v82 = v416;
      v83 = &v415[v82];
      v84 = v416 - v82;
      if (v416 - v82 >= 0x12)
        v85 = 18;
      else
        v85 = v416 - v82;
      v86 = v84 - v85;
      if (v86 >= v86 - 1)
        v87 = v86 - 1;
      else
        v87 = v86;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v83[v85], v87);
      v4 = v78;
      v2 = v77;
      a1 = v398;
    }
  }
  v6 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v382 = v4;
    v399 = a1;
    v88 = v2;
    v89 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
    v6 = v89;
    v2 = v88;
    v91 = v90;
    v4 = v382;
    a1 = v399;
    if (v91)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v416 = 86;
      v92 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v92)
        v93 = v92;
      else
        v93 = v416;
      v94 = &v415[v93];
      v95 = v416 - v93;
      if (v416 - v93 >= 0x12)
        v96 = 18;
      else
        v96 = v416 - v93;
      v97 = v95 - v96;
      if (v97 >= v97 - 1)
        v98 = v97 - 1;
      else
        v98 = v97;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      v6 = v89;
      v4 = v382;
      a1 = v399;
      v2 = v88;
    }
  }
  v8 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v9 & 1) == 0)
  {
    v383 = v4;
    v400 = a1;
    v367 = v2;
    v99 = v6;
    v100 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id;
    v8 = v100;
    v6 = v99;
    v2 = v367;
    v4 = v383;
    v102 = v101;
    a1 = v400;
    if (v102)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      v416 = 90;
      v103 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v103)
        v104 = v103;
      else
        v104 = v416;
      v105 = &v415[v104];
      v106 = v416 - v104;
      if (v416 - v104 >= 0x12)
        v107 = 18;
      else
        v107 = v416 - v104;
      v108 = v106 - v107;
      if (v108 >= v108 - 1)
        v109 = v108 - 1;
      else
        v109 = v108;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v105[v107], v109);
      v8 = v100;
      v6 = v99;
      v2 = v367;
      v4 = v383;
      a1 = v400;
    }
  }
  v10 = mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v11 & 1) == 0)
  {
    v384 = v4;
    v401 = a1;
    v353 = v6;
    v368 = v2;
    v110 = v8;
    v111 = mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
    v10 = v111;
    v8 = v110;
    v6 = v353;
    v2 = v368;
    v113 = v112;
    v4 = v384;
    a1 = v401;
    if (v113)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v416 = 84;
      v114 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v114)
        v115 = v114;
      else
        v115 = v416;
      v116 = &v415[v115];
      v117 = v416 - v115;
      if (v416 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v416 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v10 = v111;
      v8 = v110;
      v6 = v353;
      v2 = v368;
      v4 = v384;
      a1 = v401;
    }
  }
  v12 = mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v385 = v4;
    v402 = a1;
    v354 = v6;
    v369 = v2;
    v340 = v8;
    v121 = v10;
    v122 = mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id;
    v12 = v122;
    v10 = v121;
    v8 = v340;
    v6 = v354;
    v2 = v369;
    v4 = v385;
    v124 = v123;
    a1 = v402;
    if (v124)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsCommutative<Empty>]";
      v416 = 85;
      v125 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v125)
        v126 = v125;
      else
        v126 = v416;
      v127 = &v415[v126];
      v128 = v416 - v126;
      if (v416 - v126 >= 0x12)
        v129 = 18;
      else
        v129 = v416 - v126;
      v130 = v128 - v129;
      if (v130 >= v130 - 1)
        v131 = v130 - 1;
      else
        v131 = v130;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsCommutative<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsCommutative>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      v12 = v122;
      v10 = v121;
      v8 = v340;
      v6 = v354;
      v2 = v369;
      v4 = v385;
      a1 = v402;
    }
  }
  v14 = mlir::detail::TypeIDResolver<mlir::OpTrait::IsCommutative<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsCommutative>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v15 & 1) == 0)
  {
    v386 = v4;
    v403 = a1;
    v355 = v6;
    v370 = v2;
    v341 = v8;
    v328 = v10;
    v132 = v12;
    v133 = mlir::detail::TypeIDResolver<mlir::OpTrait::IsCommutative<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsCommutative>(void)::Empty>,void>::resolveTypeID(void)::id;
    v14 = v133;
    v12 = v132;
    v10 = v328;
    v8 = v341;
    v6 = v355;
    v2 = v370;
    v4 = v386;
    v135 = v134;
    a1 = v403;
    if (v135)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIdempotent<Empty>]";
      v416 = 84;
      v136 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v136)
        v137 = v136;
      else
        v137 = v416;
      v138 = &v415[v137];
      v139 = v416 - v137;
      if (v416 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v416 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsIdempotent<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIdempotent>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      v14 = v133;
      v12 = v132;
      v10 = v328;
      v8 = v341;
      v6 = v355;
      v2 = v370;
      v4 = v386;
      a1 = v403;
    }
  }
  v16 = mlir::detail::TypeIDResolver<mlir::OpTrait::IsIdempotent<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIdempotent>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v17 & 1) == 0)
  {
    v387 = v4;
    v404 = a1;
    v356 = v6;
    v371 = v2;
    v342 = v8;
    v317 = v12;
    v329 = v10;
    v143 = v14;
    v144 = mlir::detail::TypeIDResolver<mlir::OpTrait::IsIdempotent<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIdempotent>(void)::Empty>,void>::resolveTypeID(void)::id;
    v16 = v144;
    v14 = v143;
    v12 = v317;
    v10 = v329;
    v8 = v342;
    v6 = v356;
    v2 = v371;
    v4 = v387;
    v146 = v145;
    a1 = v404;
    if (v146)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v416 = 95;
      v147 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v147)
        v148 = v147;
      else
        v148 = v416;
      v149 = &v415[v148];
      v150 = v416 - v148;
      if (v416 - v148 >= 0x12)
        v151 = 18;
      else
        v151 = v416 - v148;
      v152 = v150 - v151;
      if (v152 >= v152 - 1)
        v153 = v152 - 1;
      else
        v153 = v152;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v149[v151], v153);
      v16 = v144;
      v14 = v143;
      v12 = v317;
      v10 = v329;
      v8 = v342;
      v6 = v356;
      v2 = v371;
      v4 = v387;
      a1 = v404;
    }
  }
  v18 = mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v388 = v4;
    v405 = a1;
    v357 = v6;
    v372 = v2;
    v343 = v8;
    v318 = v12;
    v330 = v10;
    v307 = v14;
    v154 = v16;
    v155 = mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v18 = v155;
    v16 = v154;
    v14 = v307;
    v12 = v318;
    v10 = v330;
    v8 = v343;
    v6 = v357;
    v2 = v372;
    v4 = v388;
    v157 = v156;
    a1 = v405;
    if (v157)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v416 = 99;
      v158 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v158)
        v159 = v158;
      else
        v159 = v416;
      v160 = &v415[v159];
      v161 = v416 - v159;
      if (v416 - v159 >= 0x12)
        v162 = 18;
      else
        v162 = v416 - v159;
      v163 = v161 - v162;
      if (v163 >= v163 - 1)
        v164 = v163 - 1;
      else
        v164 = v163;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v160[v162], v164);
      v18 = v155;
      v16 = v154;
      v14 = v307;
      v12 = v318;
      v10 = v330;
      v8 = v343;
      v6 = v357;
      v2 = v372;
      v4 = v388;
      a1 = v405;
    }
  }
  v20 = mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v21 & 1) == 0)
  {
    v389 = v4;
    v406 = a1;
    v358 = v6;
    v373 = v2;
    v344 = v8;
    v319 = v12;
    v331 = v10;
    v298 = v16;
    v308 = v14;
    v165 = v18;
    v166 = mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v20 = v166;
    v18 = v165;
    v16 = v298;
    v14 = v308;
    v12 = v319;
    v10 = v331;
    v8 = v344;
    v6 = v358;
    v2 = v373;
    v4 = v389;
    v168 = v167;
    a1 = v406;
    if (v168)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v416 = 93;
      v169 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v169)
        v170 = v169;
      else
        v170 = v416;
      v171 = &v415[v170];
      v172 = v416 - v170;
      if (v416 - v170 >= 0x12)
        v173 = 18;
      else
        v173 = v416 - v170;
      v174 = v172 - v173;
      if (v174 >= v174 - 1)
        v175 = v174 - 1;
      else
        v175 = v174;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v171[v173], v175);
      v20 = v166;
      v18 = v165;
      v16 = v298;
      v14 = v308;
      v12 = v319;
      v10 = v331;
      v8 = v344;
      v6 = v358;
      v2 = v373;
      v4 = v389;
      a1 = v406;
    }
  }
  v22 = mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v23 & 1) == 0)
  {
    v390 = v4;
    v407 = a1;
    v359 = v6;
    v374 = v2;
    v345 = v8;
    v320 = v12;
    v332 = v10;
    v299 = v16;
    v309 = v14;
    v290 = v18;
    v176 = v20;
    v177 = mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v22 = v177;
    v20 = v176;
    v18 = v290;
    v16 = v299;
    v14 = v309;
    v12 = v320;
    v10 = v332;
    v8 = v345;
    v6 = v359;
    v2 = v374;
    v4 = v390;
    v179 = v178;
    a1 = v407;
    if (v179)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface::Trait<Empty>]";
      v416 = 92;
      v180 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v180)
        v181 = v180;
      else
        v181 = v416;
      v182 = &v415[v181];
      v183 = v416 - v181;
      if (v416 - v181 >= 0x12)
        v184 = 18;
      else
        v184 = v416 - v181;
      v185 = v183 - v184;
      if (v185 >= v185 - 1)
        v186 = v185 - 1;
      else
        v186 = v185;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v182[v184], v186);
      v22 = v177;
      v20 = v176;
      v18 = v290;
      v16 = v299;
      v14 = v309;
      v12 = v320;
      v10 = v332;
      v8 = v345;
      v6 = v359;
      v2 = v374;
      v4 = v390;
      a1 = v407;
    }
  }
  v24 = mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v391 = v4;
    v408 = a1;
    v360 = v6;
    v375 = v2;
    v346 = v8;
    v321 = v12;
    v333 = v10;
    v300 = v16;
    v310 = v14;
    v283 = v20;
    v291 = v18;
    v187 = v22;
    v188 = mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v24 = v188;
    v22 = v187;
    v20 = v283;
    v18 = v291;
    v16 = v300;
    v14 = v310;
    v12 = v321;
    v10 = v333;
    v8 = v346;
    v6 = v360;
    v2 = v375;
    v4 = v391;
    v190 = v189;
    a1 = v408;
    if (v190)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultType<Empty>]";
      v416 = 97;
      v191 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v191)
        v192 = v191;
      else
        v192 = v416;
      v193 = &v415[v192];
      v194 = v416 - v192;
      if (v416 - v192 >= 0x12)
        v195 = 18;
      else
        v195 = v416 - v192;
      v196 = v194 - v195;
      if (v196 >= v196 - 1)
        v197 = v196 - 1;
      else
        v197 = v196;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v193[v195], v197);
      v24 = v188;
      v22 = v187;
      v20 = v283;
      v18 = v291;
      v16 = v300;
      v14 = v310;
      v12 = v321;
      v10 = v333;
      v8 = v346;
      v6 = v360;
      v2 = v375;
      v4 = v391;
      a1 = v408;
    }
  }
  v26 = mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v27 & 1) == 0)
  {
    v392 = v4;
    v409 = a1;
    v361 = v6;
    v376 = v2;
    v347 = v8;
    v322 = v12;
    v334 = v10;
    v301 = v16;
    v311 = v14;
    v284 = v20;
    v292 = v18;
    v277 = v22;
    v198 = v24;
    v199 = mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id;
    v26 = v199;
    v24 = v198;
    v22 = v277;
    v20 = v284;
    v18 = v292;
    v16 = v301;
    v14 = v311;
    v12 = v322;
    v10 = v334;
    v8 = v347;
    v6 = v361;
    v2 = v376;
    v4 = v392;
    v201 = v200;
    a1 = v409;
    if (v201)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      v416 = 93;
      v202 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v202)
        v203 = v202;
      else
        v203 = v416;
      v204 = &v415[v203];
      v205 = v416 - v203;
      if (v416 - v203 >= 0x12)
        v206 = 18;
      else
        v206 = v416 - v203;
      v207 = v205 - v206;
      if (v207 >= v207 - 1)
        v208 = v207 - 1;
      else
        v208 = v207;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v204[v206], v208);
      v26 = v199;
      v24 = v198;
      v22 = v277;
      v20 = v284;
      v18 = v292;
      v16 = v301;
      v14 = v311;
      v12 = v322;
      v10 = v334;
      v8 = v347;
      v6 = v361;
      v2 = v376;
      v4 = v392;
      a1 = v409;
    }
  }
  v28 = mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v29 & 1) == 0)
  {
    v393 = v4;
    v410 = a1;
    v362 = v6;
    v377 = v2;
    v348 = v8;
    v323 = v12;
    v335 = v10;
    v302 = v16;
    v312 = v14;
    v285 = v20;
    v293 = v18;
    v272 = v24;
    v278 = v22;
    v209 = v26;
    v210 = mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v28 = v210;
    v26 = v209;
    v24 = v272;
    v22 = v278;
    v20 = v285;
    v18 = v293;
    v16 = v302;
    v14 = v312;
    v12 = v323;
    v10 = v335;
    v8 = v348;
    v6 = v362;
    v2 = v377;
    v4 = v393;
    v212 = v211;
    a1 = v410;
    if (v212)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      v416 = 83;
      v213 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v213)
        v214 = v213;
      else
        v214 = v416;
      v215 = &v415[v214];
      v216 = v416 - v214;
      if (v416 - v214 >= 0x12)
        v217 = 18;
      else
        v217 = v416 - v214;
      v218 = v216 - v217;
      if (v218 >= v218 - 1)
        v219 = v218 - 1;
      else
        v219 = v218;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v215[v217], v219);
      v28 = v210;
      v26 = v209;
      v24 = v272;
      v22 = v278;
      v20 = v285;
      v18 = v293;
      v16 = v302;
      v14 = v312;
      v12 = v323;
      v10 = v335;
      v8 = v348;
      v6 = v362;
      v2 = v377;
      v4 = v393;
      a1 = v410;
    }
  }
  v30 = mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v394 = v4;
    v411 = a1;
    v363 = v6;
    v378 = v2;
    v349 = v8;
    v324 = v12;
    v336 = v10;
    v303 = v16;
    v313 = v14;
    v286 = v20;
    v294 = v18;
    v273 = v24;
    v279 = v22;
    v220 = v26;
    v221 = v28;
    v261 = mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id;
    v30 = v261;
    v28 = v221;
    v26 = v220;
    v24 = v273;
    v22 = v279;
    v20 = v286;
    v18 = v294;
    v16 = v303;
    v14 = v313;
    v12 = v324;
    v10 = v336;
    v8 = v349;
    v6 = v363;
    v2 = v378;
    v4 = v394;
    v223 = v222;
    a1 = v411;
    if (v223)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      v416 = 84;
      v224 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v224)
        v225 = v224;
      else
        v225 = v416;
      v226 = &v415[v225];
      v227 = v416 - v225;
      if (v416 - v225 >= 0x12)
        v228 = 18;
      else
        v228 = v416 - v225;
      v229 = v227 - v228;
      if (v229 >= v229 - 1)
        v230 = v229 - 1;
      else
        v230 = v229;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v226[v228], v230);
      v30 = v261;
      v28 = v221;
      v26 = v220;
      v24 = v273;
      v22 = v279;
      v20 = v286;
      v18 = v294;
      v16 = v303;
      v14 = v313;
      v12 = v324;
      v10 = v336;
      v8 = v349;
      v6 = v363;
      v2 = v378;
      v4 = v394;
      a1 = v411;
    }
  }
  v32 = mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v33 & 1) == 0)
  {
    v395 = v4;
    v412 = a1;
    v364 = v6;
    v379 = v2;
    v350 = v8;
    v325 = v12;
    v337 = v10;
    v304 = v16;
    v314 = v14;
    v287 = v20;
    v295 = v18;
    v274 = v24;
    v280 = v22;
    v266 = v26;
    v269 = mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id;
    v231 = v28;
    v232 = v30;
    v26 = v266;
    v32 = v269;
    v30 = v232;
    v28 = v231;
    v24 = v274;
    v22 = v280;
    v20 = v287;
    v18 = v295;
    v16 = v304;
    v14 = v314;
    v12 = v325;
    v10 = v337;
    v8 = v350;
    v6 = v364;
    v2 = v379;
    v4 = v395;
    v234 = v233;
    a1 = v412;
    if (v234)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      v416 = 84;
      v235 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v235)
        v236 = v235;
      else
        v236 = v416;
      v237 = &v415[v236];
      v238 = v416 - v236;
      if (v416 - v236 >= 0x12)
        v239 = 18;
      else
        v239 = v416 - v236;
      v240 = v238 - v239;
      if (v240 >= v240 - 1)
        v241 = v240 - 1;
      else
        v241 = v240;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v237[v239], v241);
      v26 = v266;
      v32 = v269;
      v30 = v232;
      v28 = v231;
      v24 = v274;
      v22 = v280;
      v20 = v287;
      v18 = v295;
      v16 = v304;
      v14 = v314;
      v12 = v325;
      v10 = v337;
      v8 = v350;
      v6 = v364;
      v2 = v379;
      v4 = v395;
      a1 = v412;
    }
  }
  v34 = mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v35 & 1) == 0)
  {
    v396 = v4;
    v413 = a1;
    v365 = v6;
    v380 = v2;
    v351 = v8;
    v326 = v12;
    v338 = v10;
    v305 = v16;
    v315 = v14;
    v288 = v20;
    v296 = v18;
    v275 = v24;
    v281 = v22;
    v267 = v26;
    v270 = v32;
    v263 = v28;
    v265 = mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
    v242 = v30;
    v28 = v263;
    v34 = v265;
    v26 = v267;
    v32 = v270;
    v30 = v242;
    v24 = v275;
    v22 = v281;
    v20 = v288;
    v18 = v296;
    v16 = v305;
    v14 = v315;
    v12 = v326;
    v10 = v338;
    v8 = v351;
    v6 = v365;
    v2 = v380;
    v4 = v396;
    v244 = v243;
    a1 = v413;
    if (v244)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      v416 = 84;
      v245 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v245)
        v246 = v245;
      else
        v246 = v416;
      v247 = &v415[v246];
      v248 = v416 - v246;
      if (v416 - v246 >= 0x12)
        v249 = 18;
      else
        v249 = v416 - v246;
      v250 = v248 - v249;
      if (v250 >= v250 - 1)
        v251 = v250 - 1;
      else
        v251 = v250;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v247[v249], v251);
      v28 = v263;
      v34 = v265;
      v26 = v267;
      v32 = v270;
      v30 = v242;
      v24 = v275;
      v22 = v281;
      v20 = v288;
      v18 = v296;
      v16 = v305;
      v14 = v315;
      v12 = v326;
      v10 = v338;
      v8 = v351;
      v6 = v365;
      v2 = v380;
      v4 = v396;
      a1 = v413;
    }
  }
  v36 = mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v37 & 1) == 0)
  {
    v397 = v4;
    v414 = a1;
    v366 = v6;
    v381 = v2;
    v352 = v8;
    v327 = v12;
    v339 = v10;
    v306 = v16;
    v316 = v14;
    v289 = v20;
    v297 = v18;
    v276 = v24;
    v282 = v22;
    v268 = v26;
    v271 = v32;
    v262 = v30;
    v264 = v28;
    v28 = v264;
    v26 = v268;
    v32 = v271;
    v30 = v262;
    v24 = v276;
    v22 = v282;
    v20 = v289;
    v18 = v297;
    v16 = v306;
    v14 = v316;
    v12 = v327;
    v10 = v339;
    v8 = v352;
    v6 = v366;
    v2 = v381;
    v4 = v397;
    v253 = v252;
    a1 = v414;
    if (v253)
    {
      v415 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v416 = 90;
      v254 = llvm::StringRef::find((uint64_t *)&v415, "DesiredTypeName = ", 0x12uLL, 0);
      if (v416 >= v254)
        v255 = v254;
      else
        v255 = v416;
      v256 = &v415[v255];
      v257 = v416 - v255;
      if (v416 - v255 >= 0x12)
        v258 = 18;
      else
        v258 = v416 - v255;
      v259 = v257 - v258;
      if (v259 >= v259 - 1)
        v260 = v259 - 1;
      else
        v260 = v259;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v256[v258], v260);
      v28 = v264;
      v26 = v268;
      v32 = v271;
      v30 = v262;
      v24 = v276;
      v22 = v282;
      v20 = v289;
      v18 = v297;
      v16 = v306;
      v14 = v316;
      v12 = v327;
      v10 = v339;
      v8 = v352;
      v6 = v366;
      v2 = v381;
      v4 = v397;
      a1 = v414;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v28 == a1
      || v30 == a1
      || v32 == a1
      || v34 == a1
      || v36 == a1
      || mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AndIOp>,mlir::OpTrait::OneResult<mlir::arith::AndIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AndIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AndIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AndIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AndIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AndIOp>,mlir::OpTrait::IsIdempotent<mlir::arith::AndIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AndIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AndIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AndIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AndIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AndIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AndIOp>,mlir::OpTrait::Elementwise<mlir::arith::AndIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AndIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AndIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AndIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AndIOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AndIOp>,mlir::OpTrait::OneResult<mlir::arith::AndIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AndIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AndIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AndIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AndIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AndIOp>,mlir::OpTrait::IsIdempotent<mlir::arith::AndIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AndIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AndIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AndIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AndIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AndIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AndIOp>,mlir::OpTrait::Elementwise<mlir::arith::AndIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AndIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AndIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AndIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AndIOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::OpTrait::impl *v8;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (v8 = a1, mlir::arith::AddIOp::verifyInvariantsImpl((uint64_t **)&v8))
    && ZinIrConstData_specialization<half>::prepare()
    && mlir::OpTrait::impl::verifySameOperandsAndResultType(a1, v5))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::BitcastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.bitcast", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::BitcastOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04A428;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::arith::BitcastOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::BitcastOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::BitcastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::BitcastOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::BitcastOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>::areCastCompatible;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      v15 = 71;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[344], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

void mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  _BYTE *Value;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v3 + 136) != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
    v3 = 0;
  v15 = v3;
  if (!v3)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  Value = (_BYTE *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  v5 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  v7 = (_BYTE *)(v5 + 8 * v6);
  v16 = v18;
  v17 = 0x400000000;
  v8 = v7 - Value;
  if ((unint64_t)(v7 - Value) < 0x21)
  {
    v9 = 0;
    v10 = v18;
    if (v7 == Value)
      goto LABEL_10;
    goto LABEL_9;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, v18, v8 >> 3, 8);
  v9 = v17;
  v10 = v16;
  if (v7 != Value)
  {
LABEL_9:
    memcpy(&v10[v9], Value, v7 - Value);
    v9 = v17;
    v10 = v16;
  }
LABEL_10:
  v11 = (unint64_t)v8 >> 3;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  v12 = v9 + ((unint64_t)v8 >> 3);
  LODWORD(v17) = v12;
  if ((_DWORD)v12 && &v16 != (void **)a2)
  {
    if (v10 == v18)
    {
      v14 = v9 + v11;
      v10 = v18;
      if (v12 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v12, 8),
            v14 = v17,
            v10 = v16,
            (_DWORD)v17))
      {
        memcpy(*(void **)a2, v10, 8 * v14);
        v10 = v16;
      }
      *(_DWORD *)(a2 + 8) = v12;
    }
    else
    {
      *(_QWORD *)a2 = v10;
      v13 = HIDWORD(v17);
      *(_DWORD *)(a2 + 8) = v12;
      *(_DWORD *)(a2 + 12) = v13;
      v16 = v18;
      HIDWORD(v17) = 0;
      v10 = v18;
    }
    LODWORD(v17) = 0;
  }
  *(_BYTE *)(a2 + 48) = 1;
  if (v10 != v18)
    free(v10);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::BitcastOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::BitcastOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::BitcastOpGenericAdaptorBase::BitcastOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::BitcastOp::fold(&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned __int8 v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned __int8 v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned __int8 v46;
  _QWORD *v47;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  const char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  const char *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  const char *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  const char *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  const char *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  const char *v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  unint64_t v138;
  unint64_t v139;
  const char *v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  unint64_t v147;
  unint64_t v148;
  const char *v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  const char *v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  int v163;
  int v164;
  unint64_t v165;
  unint64_t v166;
  const char *v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  int v172;
  int v173;
  unint64_t v174;
  unint64_t v175;
  const char *v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  unint64_t v183;
  unint64_t v184;
  const char *v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  const char *v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  unint64_t v201;
  unint64_t v202;
  const char *v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  const char *v344;
  unint64_t v345;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v328 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v65 = v64;
    a1 = v328;
    if (v65)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v345 = 83;
      v66 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v66)
        v67 = v66;
      else
        v67 = v345;
      v68 = &v344[v67];
      v69 = v345 - v67;
      if (v345 - v67 >= 0x12)
        v70 = 18;
      else
        v70 = v345 - v67;
      v71 = v69 - v70;
      if (v71 >= v71 - 1)
        v72 = v71 - 1;
      else
        v72 = v71;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v68[v70], v72);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v328;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v313 = v3;
    v329 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v74 = v73;
    v3 = v313;
    a1 = v329;
    if (v74)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v345 = 81;
      v75 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v75)
        v76 = v75;
      else
        v76 = v345;
      v77 = &v344[v76];
      v78 = v345 - v76;
      if (v345 - v76 >= 0x12)
        v79 = 18;
      else
        v79 = v345 - v76;
      v80 = v78 - v79;
      if (v80 >= v80 - 1)
        v81 = v80 - 1;
      else
        v81 = v80;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v77[v79], v81);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v313;
      a1 = v329;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451A000;
  if ((v7 & 1) == 0)
  {
    v314 = v3;
    v330 = a1;
    v299 = v6;
    v8 = (_QWORD *)&unk_25451A000;
    v6 = v299;
    v3 = v314;
    v83 = v82;
    a1 = v330;
    if (v83)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v345 = 104;
      v84 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v84)
        v85 = v84;
      else
        v85 = v345;
      v86 = &v344[v85];
      v87 = v345 - v85;
      if (v345 - v85 >= 0x12)
        v88 = 18;
      else
        v88 = v345 - v85;
      v89 = v87 - v88;
      if (v89 >= v89 - 1)
        v90 = v89 - 1;
      else
        v90 = v89;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v86[v88], v90);
      v8 = (_QWORD *)&unk_25451A000;
      v6 = v299;
      v3 = v314;
      a1 = v330;
    }
  }
  v9 = v8[308];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v315 = v3;
    v331 = a1;
    v286 = v9;
    v300 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v286;
    v6 = v300;
    v92 = v91;
    v3 = v315;
    a1 = v331;
    if (v92)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v345 = 86;
      v93 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v93)
        v94 = v93;
      else
        v94 = v345;
      v95 = &v344[v94];
      v96 = v345 - v94;
      if (v345 - v94 >= 0x12)
        v97 = 18;
      else
        v97 = v345 - v94;
      v98 = v96 - v97;
      if (v98 >= v98 - 1)
        v99 = v98 - 1;
      else
        v99 = v98;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v95[v97], v99);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v286;
      v6 = v300;
      v3 = v315;
      a1 = v331;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v316 = v3;
    v332 = a1;
    v287 = v9;
    v301 = v6;
    v274 = v12;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v274;
    v9 = v287;
    v6 = v301;
    v3 = v316;
    v101 = v100;
    a1 = v332;
    if (v101)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v345 = 82;
      v102 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v102)
        v103 = v102;
      else
        v103 = v345;
      v104 = &v344[v103];
      v105 = v345 - v103;
      if (v345 - v103 >= 0x12)
        v106 = 18;
      else
        v106 = v345 - v103;
      v107 = v105 - v106;
      if (v107 >= v107 - 1)
        v108 = v107 - 1;
      else
        v108 = v107;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v104[v106], v108);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v274;
      v9 = v287;
      v6 = v301;
      v3 = v316;
      a1 = v332;
    }
  }
  v15 = v14[19];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v317 = v3;
    v333 = a1;
    v288 = v9;
    v302 = v6;
    v275 = v12;
    v263 = v15;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v263;
    v12 = v275;
    v9 = v288;
    v6 = v302;
    v3 = v317;
    v110 = v109;
    a1 = v333;
    if (v110)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v345 = 84;
      v111 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v111)
        v112 = v111;
      else
        v112 = v345;
      v113 = &v344[v112];
      v114 = v345 - v112;
      if (v345 - v112 >= 0x12)
        v115 = 18;
      else
        v115 = v345 - v112;
      v116 = v114 - v115;
      if (v116 >= v116 - 1)
        v117 = v116 - 1;
      else
        v117 = v116;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v113[v115], v117);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v263;
      v12 = v275;
      v9 = v288;
      v6 = v302;
      v3 = v317;
      a1 = v333;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v318 = v3;
    v334 = a1;
    v289 = v9;
    v303 = v6;
    v276 = v12;
    v253 = v18;
    v264 = v15;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v253;
    v15 = v264;
    v12 = v276;
    v9 = v289;
    v6 = v303;
    v3 = v318;
    v119 = v118;
    a1 = v334;
    if (v119)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v345 = 95;
      v120 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v120)
        v121 = v120;
      else
        v121 = v345;
      v122 = &v344[v121];
      v123 = v345 - v121;
      if (v345 - v121 >= 0x12)
        v124 = 18;
      else
        v124 = v345 - v121;
      v125 = v123 - v124;
      if (v125 >= v125 - 1)
        v126 = v125 - 1;
      else
        v126 = v125;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v122[v124], v126);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v253;
      v15 = v264;
      v12 = v276;
      v9 = v289;
      v6 = v303;
      v3 = v318;
      a1 = v334;
    }
  }
  v21 = v20[312];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v319 = v3;
    v335 = a1;
    v290 = v9;
    v304 = v6;
    v277 = v12;
    v254 = v18;
    v265 = v15;
    v244 = v21;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v244;
    v18 = v254;
    v15 = v265;
    v12 = v277;
    v9 = v290;
    v6 = v304;
    v3 = v319;
    v128 = v127;
    a1 = v335;
    if (v128)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v345 = 99;
      v129 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v129)
        v130 = v129;
      else
        v130 = v345;
      v131 = &v344[v130];
      v132 = v345 - v130;
      if (v345 - v130 >= 0x12)
        v133 = 18;
      else
        v133 = v345 - v130;
      v134 = v132 - v133;
      if (v134 >= v134 - 1)
        v135 = v134 - 1;
      else
        v135 = v134;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v131[v133], v135);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v244;
      v18 = v254;
      v15 = v265;
      v12 = v277;
      v9 = v290;
      v6 = v304;
      v3 = v319;
      a1 = v335;
    }
  }
  v24 = v23[314];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v320 = v3;
    v336 = a1;
    v291 = v9;
    v305 = v6;
    v278 = v12;
    v255 = v18;
    v266 = v15;
    v236 = v24;
    v245 = v21;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v236;
    v21 = v245;
    v18 = v255;
    v15 = v266;
    v12 = v278;
    v9 = v291;
    v6 = v305;
    v3 = v320;
    v137 = v136;
    a1 = v336;
    if (v137)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v345 = 93;
      v138 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v138)
        v139 = v138;
      else
        v139 = v345;
      v140 = &v344[v139];
      v141 = v345 - v139;
      if (v345 - v139 >= 0x12)
        v142 = 18;
      else
        v142 = v345 - v139;
      v143 = v141 - v142;
      if (v143 >= v143 - 1)
        v144 = v143 - 1;
      else
        v144 = v143;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v140[v142], v144);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v236;
      v21 = v245;
      v18 = v255;
      v15 = v266;
      v12 = v278;
      v9 = v291;
      v6 = v305;
      v3 = v320;
      a1 = v336;
    }
  }
  v27 = v26[21];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v321 = v3;
    v337 = a1;
    v292 = v9;
    v306 = v6;
    v279 = v12;
    v256 = v18;
    v267 = v15;
    v237 = v24;
    v246 = v21;
    v229 = v27;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v229;
    v24 = v237;
    v21 = v246;
    v18 = v256;
    v15 = v267;
    v12 = v279;
    v9 = v292;
    v6 = v306;
    v3 = v321;
    v146 = v145;
    a1 = v337;
    if (v146)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultShape<Empty>]";
      v345 = 98;
      v147 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v147)
        v148 = v147;
      else
        v148 = v345;
      v149 = &v344[v148];
      v150 = v345 - v148;
      if (v345 - v148 >= 0x12)
        v151 = 18;
      else
        v151 = v345 - v148;
      v152 = v150 - v151;
      if (v152 >= v152 - 1)
        v153 = v152 - 1;
      else
        v153 = v152;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v149[v151], v153);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v229;
      v24 = v237;
      v21 = v246;
      v18 = v256;
      v15 = v267;
      v12 = v279;
      v9 = v292;
      v6 = v306;
      v3 = v321;
      a1 = v337;
    }
  }
  v30 = v29[55];
  v32 = &unk_25451A000;
  if ((v31 & 1) == 0)
  {
    v322 = v3;
    v338 = a1;
    v293 = v9;
    v307 = v6;
    v280 = v12;
    v257 = v18;
    v268 = v15;
    v238 = v24;
    v247 = v21;
    v223 = v30;
    v230 = v27;
    v32 = (_QWORD *)&unk_25451A000;
    v30 = v223;
    v27 = v230;
    v24 = v238;
    v21 = v247;
    v18 = v257;
    v15 = v268;
    v12 = v280;
    v9 = v293;
    v6 = v307;
    v3 = v322;
    v155 = v154;
    a1 = v338;
    if (v155)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface::Trait<Empty>]";
      v345 = 85;
      v156 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v156)
        v157 = v156;
      else
        v157 = v345;
      v158 = &v344[v157];
      v159 = v345 - v157;
      if (v345 - v157 >= 0x12)
        v160 = 18;
      else
        v160 = v345 - v157;
      v161 = v159 - v160;
      if (v161 >= v161 - 1)
        v162 = v161 - 1;
      else
        v162 = v161;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CastOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v158[v160], v162);
      v32 = (_QWORD *)&unk_25451A000;
      v30 = v223;
      v27 = v230;
      v24 = v238;
      v21 = v247;
      v18 = v257;
      v15 = v268;
      v12 = v280;
      v9 = v293;
      v6 = v307;
      v3 = v322;
      a1 = v338;
    }
  }
  v33 = v32[346];
  v35 = &unk_25451A000;
  if ((v34 & 1) == 0)
  {
    v323 = v3;
    v339 = a1;
    v294 = v9;
    v308 = v6;
    v281 = v12;
    v258 = v18;
    v269 = v15;
    v239 = v24;
    v248 = v21;
    v224 = v30;
    v231 = v27;
    v218 = v33;
    v35 = (_QWORD *)&unk_25451A000;
    v33 = v218;
    v30 = v224;
    v27 = v231;
    v24 = v239;
    v21 = v248;
    v18 = v258;
    v15 = v269;
    v12 = v281;
    v9 = v294;
    v6 = v308;
    v3 = v323;
    v164 = v163;
    a1 = v339;
    if (v164)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      v345 = 93;
      v165 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v165)
        v166 = v165;
      else
        v166 = v345;
      v167 = &v344[v166];
      v168 = v345 - v166;
      if (v345 - v166 >= 0x12)
        v169 = 18;
      else
        v169 = v345 - v166;
      v170 = v168 - v169;
      if (v170 >= v170 - 1)
        v171 = v170 - 1;
      else
        v171 = v170;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v167[v169], v171);
      v35 = (_QWORD *)&unk_25451A000;
      v33 = v218;
      v30 = v224;
      v27 = v231;
      v24 = v239;
      v21 = v248;
      v18 = v258;
      v15 = v269;
      v12 = v281;
      v9 = v294;
      v6 = v308;
      v3 = v323;
      a1 = v339;
    }
  }
  v36 = v35[320];
  v38 = &unk_25451A000;
  if ((v37 & 1) == 0)
  {
    v324 = v3;
    v340 = a1;
    v295 = v9;
    v309 = v6;
    v282 = v12;
    v259 = v18;
    v270 = v15;
    v240 = v24;
    v249 = v21;
    v225 = v30;
    v232 = v27;
    v214 = v36;
    v219 = v33;
    v38 = (_QWORD *)&unk_25451A000;
    v36 = v214;
    v33 = v219;
    v30 = v225;
    v27 = v232;
    v24 = v240;
    v21 = v249;
    v18 = v259;
    v15 = v270;
    v12 = v282;
    v9 = v295;
    v6 = v309;
    v3 = v324;
    v173 = v172;
    a1 = v340;
    if (v173)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      v345 = 83;
      v174 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v174)
        v175 = v174;
      else
        v175 = v345;
      v176 = &v344[v175];
      v177 = v345 - v175;
      if (v345 - v175 >= 0x12)
        v178 = 18;
      else
        v178 = v345 - v175;
      v179 = v177 - v178;
      if (v179 >= v179 - 1)
        v180 = v179 - 1;
      else
        v180 = v179;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v176[v178], v180);
      v38 = (_QWORD *)&unk_25451A000;
      v36 = v214;
      v33 = v219;
      v30 = v225;
      v27 = v232;
      v24 = v240;
      v21 = v249;
      v18 = v259;
      v15 = v270;
      v12 = v282;
      v9 = v295;
      v6 = v309;
      v3 = v324;
      a1 = v340;
    }
  }
  v39 = v38[322];
  v41 = &unk_25451A000;
  if ((v40 & 1) == 0)
  {
    v325 = v3;
    v341 = a1;
    v296 = v9;
    v310 = v6;
    v283 = v12;
    v260 = v18;
    v271 = v15;
    v241 = v24;
    v250 = v21;
    v226 = v30;
    v233 = v27;
    v215 = v36;
    v220 = v33;
    v211 = v39;
    v41 = (_QWORD *)&unk_25451A000;
    v39 = v211;
    v36 = v215;
    v33 = v220;
    v30 = v226;
    v27 = v233;
    v24 = v241;
    v21 = v250;
    v18 = v260;
    v15 = v271;
    v12 = v283;
    v9 = v296;
    v6 = v310;
    v3 = v325;
    v182 = v181;
    a1 = v341;
    if (v182)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      v345 = 84;
      v183 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v183)
        v184 = v183;
      else
        v184 = v345;
      v185 = &v344[v184];
      v186 = v345 - v184;
      if (v345 - v184 >= 0x12)
        v187 = 18;
      else
        v187 = v345 - v184;
      v188 = v186 - v187;
      if (v188 >= v188 - 1)
        v189 = v188 - 1;
      else
        v189 = v188;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v185[v187], v189);
      v41 = (_QWORD *)&unk_25451A000;
      v39 = v211;
      v36 = v215;
      v33 = v220;
      v30 = v226;
      v27 = v233;
      v24 = v241;
      v21 = v250;
      v18 = v260;
      v15 = v271;
      v12 = v283;
      v9 = v296;
      v6 = v310;
      v3 = v325;
      a1 = v341;
    }
  }
  v42 = v41[324];
  v44 = &unk_25451A000;
  if ((v43 & 1) == 0)
  {
    v326 = v3;
    v342 = a1;
    v297 = v9;
    v311 = v6;
    v284 = v12;
    v261 = v18;
    v272 = v15;
    v242 = v24;
    v251 = v21;
    v227 = v30;
    v234 = v27;
    v216 = v36;
    v221 = v33;
    v209 = v42;
    v212 = v39;
    v44 = (_QWORD *)&unk_25451A000;
    v42 = v209;
    v39 = v212;
    v36 = v216;
    v33 = v221;
    v30 = v227;
    v27 = v234;
    v24 = v242;
    v21 = v251;
    v18 = v261;
    v15 = v272;
    v12 = v284;
    v9 = v297;
    v6 = v311;
    v3 = v326;
    v191 = v190;
    a1 = v342;
    if (v191)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      v345 = 84;
      v192 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v192)
        v193 = v192;
      else
        v193 = v345;
      v194 = &v344[v193];
      v195 = v345 - v193;
      if (v345 - v193 >= 0x12)
        v196 = 18;
      else
        v196 = v345 - v193;
      v197 = v195 - v196;
      if (v197 >= v197 - 1)
        v198 = v197 - 1;
      else
        v198 = v197;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v194[v196], v198);
      v44 = (_QWORD *)&unk_25451A000;
      v42 = v209;
      v39 = v212;
      v36 = v216;
      v33 = v221;
      v30 = v227;
      v27 = v234;
      v24 = v242;
      v21 = v251;
      v18 = v261;
      v15 = v272;
      v12 = v284;
      v9 = v297;
      v6 = v311;
      v3 = v326;
      a1 = v342;
    }
  }
  v45 = v44[326];
  v47 = &unk_25451A000;
  if ((v46 & 1) == 0)
  {
    v327 = v3;
    v343 = a1;
    v298 = v9;
    v312 = v6;
    v285 = v12;
    v262 = v18;
    v273 = v15;
    v243 = v24;
    v252 = v21;
    v228 = v30;
    v235 = v27;
    v217 = v36;
    v222 = v33;
    v210 = v42;
    v213 = v39;
    v208 = v45;
    v47 = (_QWORD *)&unk_25451A000;
    v45 = v208;
    v42 = v210;
    v39 = v213;
    v36 = v217;
    v33 = v222;
    v30 = v228;
    v27 = v235;
    v24 = v243;
    v21 = v252;
    v18 = v262;
    v15 = v273;
    v12 = v285;
    v9 = v298;
    v6 = v312;
    v3 = v327;
    v200 = v199;
    a1 = v343;
    if (v200)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      v345 = 84;
      v201 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v201)
        v202 = v201;
      else
        v202 = v345;
      v203 = &v344[v202];
      v204 = v345 - v202;
      if (v345 - v202 >= 0x12)
        v205 = 18;
      else
        v205 = v345 - v202;
      v206 = v204 - v205;
      if (v206 >= v206 - 1)
        v207 = v206 - 1;
      else
        v207 = v206;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v203[v205], v207);
      v47 = (_QWORD *)&unk_25451A000;
      v45 = v208;
      v42 = v210;
      v39 = v213;
      v36 = v217;
      v33 = v222;
      v30 = v228;
      v27 = v235;
      v24 = v243;
      v21 = v252;
      v18 = v262;
      v15 = v273;
      v12 = v285;
      v9 = v298;
      v6 = v312;
      v3 = v327;
      a1 = v343;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v36 == a1
      || v39 == a1
      || v42 == a1
      || v45 == a1
      || v47[328] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::BitcastOp>,mlir::OpTrait::OneResult<mlir::arith::BitcastOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::BitcastOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::BitcastOp>,mlir::OpTrait::OneOperand<mlir::arith::BitcastOp>,mlir::OpTrait::OpInvariants<mlir::arith::BitcastOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::BitcastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::BitcastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::BitcastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::BitcastOp>,mlir::CastOpInterface::Trait<mlir::arith::BitcastOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::BitcastOp>,mlir::OpTrait::Elementwise<mlir::arith::BitcastOp>,mlir::OpTrait::Scalarizable<mlir::arith::BitcastOp>,mlir::OpTrait::Vectorizable<mlir::arith::BitcastOp>,mlir::OpTrait::Tensorizable<mlir::arith::BitcastOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::BitcastOp>,mlir::OpTrait::OneResult<mlir::arith::BitcastOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::BitcastOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::BitcastOp>,mlir::OpTrait::OneOperand<mlir::arith::BitcastOp>,mlir::OpTrait::OpInvariants<mlir::arith::BitcastOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::BitcastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::BitcastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::BitcastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::BitcastOp>,mlir::CastOpInterface::Trait<mlir::arith::BitcastOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::BitcastOp>,mlir::OpTrait::Elementwise<mlir::arith::BitcastOp>,mlir::OpTrait::Scalarizable<mlir::arith::BitcastOp>,mlir::OpTrait::Vectorizable<mlir::arith::BitcastOp>,mlir::OpTrait::Tensorizable<mlir::arith::BitcastOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::Operation *v7;
  mlir::Operation *v8;
  mlir::OpTrait::impl *v10;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (v10 = a1, mlir::arith::BitcastOp::verifyInvariantsImpl((uint64_t **)&v10))
    && mlir::OpTrait::impl::verifySameOperandsAndResultShape(a1, v6)
    && mlir::impl::verifyCastInterfaceOp(a1, v7))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v8) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CeilDivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.ceildivsi", 15, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::CeilDivSIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C048290;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::CeilDivSIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CeilDivSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

BOOL mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::getSpeculatability(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::arith::DivSIOp::getSpeculatability((mlir::arith::DivSIOp *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinSpatialSplitTransform *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::CeilDivSIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::CeilDivSIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::CeilDivSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.ceildivsi";
  v16[1] = 15;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::CeilDivSIOpGenericAdaptorBase::CeilDivSIOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::CeilDivSIOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned __int8 v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned __int8 v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned __int8 v46;
  _QWORD *v47;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  const char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  const char *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  const char *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  const char *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  const char *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  const char *v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  unint64_t v138;
  unint64_t v139;
  const char *v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  unint64_t v147;
  unint64_t v148;
  const char *v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  const char *v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  int v163;
  int v164;
  unint64_t v165;
  unint64_t v166;
  const char *v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  int v172;
  int v173;
  unint64_t v174;
  unint64_t v175;
  const char *v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  unint64_t v183;
  unint64_t v184;
  const char *v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  const char *v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  unint64_t v201;
  unint64_t v202;
  const char *v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  const char *v344;
  unint64_t v345;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v328 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v65 = v64;
    a1 = v328;
    if (v65)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v345 = 83;
      v66 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v66)
        v67 = v66;
      else
        v67 = v345;
      v68 = &v344[v67];
      v69 = v345 - v67;
      if (v345 - v67 >= 0x12)
        v70 = 18;
      else
        v70 = v345 - v67;
      v71 = v69 - v70;
      if (v71 >= v71 - 1)
        v72 = v71 - 1;
      else
        v72 = v71;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v68[v70], v72);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v328;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v313 = v3;
    v329 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v74 = v73;
    v3 = v313;
    a1 = v329;
    if (v74)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v345 = 81;
      v75 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v75)
        v76 = v75;
      else
        v76 = v345;
      v77 = &v344[v76];
      v78 = v345 - v76;
      if (v345 - v76 >= 0x12)
        v79 = 18;
      else
        v79 = v345 - v76;
      v80 = v78 - v79;
      if (v80 >= v80 - 1)
        v81 = v80 - 1;
      else
        v81 = v80;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v77[v79], v81);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v313;
      a1 = v329;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451A000;
  if ((v7 & 1) == 0)
  {
    v314 = v3;
    v330 = a1;
    v299 = v6;
    v8 = (_QWORD *)&unk_25451A000;
    v6 = v299;
    v3 = v314;
    v83 = v82;
    a1 = v330;
    if (v83)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v345 = 104;
      v84 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v84)
        v85 = v84;
      else
        v85 = v345;
      v86 = &v344[v85];
      v87 = v345 - v85;
      if (v345 - v85 >= 0x12)
        v88 = 18;
      else
        v88 = v345 - v85;
      v89 = v87 - v88;
      if (v89 >= v89 - 1)
        v90 = v89 - 1;
      else
        v90 = v89;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v86[v88], v90);
      v8 = (_QWORD *)&unk_25451A000;
      v6 = v299;
      v3 = v314;
      a1 = v330;
    }
  }
  v9 = v8[308];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v315 = v3;
    v331 = a1;
    v286 = v9;
    v300 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v286;
    v6 = v300;
    v92 = v91;
    v3 = v315;
    a1 = v331;
    if (v92)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v345 = 86;
      v93 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v93)
        v94 = v93;
      else
        v94 = v345;
      v95 = &v344[v94];
      v96 = v345 - v94;
      if (v345 - v94 >= 0x12)
        v97 = 18;
      else
        v97 = v345 - v94;
      v98 = v96 - v97;
      if (v98 >= v98 - 1)
        v99 = v98 - 1;
      else
        v99 = v98;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v95[v97], v99);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v286;
      v6 = v300;
      v3 = v315;
      a1 = v331;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v316 = v3;
    v332 = a1;
    v287 = v9;
    v301 = v6;
    v274 = v12;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v274;
    v9 = v287;
    v6 = v301;
    v3 = v316;
    v101 = v100;
    a1 = v332;
    if (v101)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      v345 = 90;
      v102 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v102)
        v103 = v102;
      else
        v103 = v345;
      v104 = &v344[v103];
      v105 = v345 - v103;
      if (v345 - v103 >= 0x12)
        v106 = 18;
      else
        v106 = v345 - v103;
      v107 = v105 - v106;
      if (v107 >= v107 - 1)
        v108 = v107 - 1;
      else
        v108 = v107;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v104[v106], v108);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v274;
      v9 = v287;
      v6 = v301;
      v3 = v316;
      a1 = v332;
    }
  }
  v15 = v14[79];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v317 = v3;
    v333 = a1;
    v288 = v9;
    v302 = v6;
    v275 = v12;
    v263 = v15;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v263;
    v12 = v275;
    v9 = v288;
    v6 = v302;
    v3 = v317;
    v110 = v109;
    a1 = v333;
    if (v110)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v345 = 84;
      v111 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v111)
        v112 = v111;
      else
        v112 = v345;
      v113 = &v344[v112];
      v114 = v345 - v112;
      if (v345 - v112 >= 0x12)
        v115 = 18;
      else
        v115 = v345 - v112;
      v116 = v114 - v115;
      if (v116 >= v116 - 1)
        v117 = v116 - 1;
      else
        v117 = v116;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v113[v115], v117);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v263;
      v12 = v275;
      v9 = v288;
      v6 = v302;
      v3 = v317;
      a1 = v333;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v318 = v3;
    v334 = a1;
    v289 = v9;
    v303 = v6;
    v276 = v12;
    v253 = v18;
    v264 = v15;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v253;
    v15 = v264;
    v12 = v276;
    v9 = v289;
    v6 = v303;
    v3 = v318;
    v119 = v118;
    a1 = v334;
    if (v119)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v345 = 95;
      v120 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v120)
        v121 = v120;
      else
        v121 = v345;
      v122 = &v344[v121];
      v123 = v345 - v121;
      if (v345 - v121 >= 0x12)
        v124 = 18;
      else
        v124 = v345 - v121;
      v125 = v123 - v124;
      if (v125 >= v125 - 1)
        v126 = v125 - 1;
      else
        v126 = v125;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v122[v124], v126);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v253;
      v15 = v264;
      v12 = v276;
      v9 = v289;
      v6 = v303;
      v3 = v318;
      a1 = v334;
    }
  }
  v21 = v20[312];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v319 = v3;
    v335 = a1;
    v290 = v9;
    v304 = v6;
    v277 = v12;
    v254 = v18;
    v265 = v15;
    v244 = v21;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v244;
    v18 = v254;
    v15 = v265;
    v12 = v277;
    v9 = v290;
    v6 = v304;
    v3 = v319;
    v128 = v127;
    a1 = v335;
    if (v128)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface::Trait<Empty>]";
      v345 = 92;
      v129 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v129)
        v130 = v129;
      else
        v130 = v345;
      v131 = &v344[v130];
      v132 = v345 - v130;
      if (v345 - v130 >= 0x12)
        v133 = 18;
      else
        v133 = v345 - v130;
      v134 = v132 - v133;
      if (v134 >= v134 - 1)
        v135 = v134 - 1;
      else
        v135 = v134;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v131[v133], v135);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v244;
      v18 = v254;
      v15 = v265;
      v12 = v277;
      v9 = v290;
      v6 = v304;
      v3 = v319;
      a1 = v335;
    }
  }
  v24 = v23[334];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v320 = v3;
    v336 = a1;
    v291 = v9;
    v305 = v6;
    v278 = v12;
    v255 = v18;
    v266 = v15;
    v236 = v24;
    v245 = v21;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v236;
    v21 = v245;
    v18 = v255;
    v15 = v266;
    v12 = v278;
    v9 = v291;
    v6 = v305;
    v3 = v320;
    v137 = v136;
    a1 = v336;
    if (v137)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultType<Empty>]";
      v345 = 97;
      v138 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v138)
        v139 = v138;
      else
        v139 = v345;
      v140 = &v344[v139];
      v141 = v345 - v139;
      if (v345 - v139 >= 0x12)
        v142 = 18;
      else
        v142 = v345 - v139;
      v143 = v141 - v142;
      if (v143 >= v143 - 1)
        v144 = v143 - 1;
      else
        v144 = v143;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v140[v142], v144);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v236;
      v21 = v245;
      v18 = v255;
      v15 = v266;
      v12 = v278;
      v9 = v291;
      v6 = v305;
      v3 = v320;
      a1 = v336;
    }
  }
  v27 = v26[318];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v321 = v3;
    v337 = a1;
    v292 = v9;
    v306 = v6;
    v279 = v12;
    v256 = v18;
    v267 = v15;
    v237 = v24;
    v246 = v21;
    v229 = v27;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v229;
    v24 = v237;
    v21 = v246;
    v18 = v256;
    v15 = v267;
    v12 = v279;
    v9 = v292;
    v6 = v306;
    v3 = v321;
    v146 = v145;
    a1 = v337;
    if (v146)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      v345 = 93;
      v147 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v147)
        v148 = v147;
      else
        v148 = v345;
      v149 = &v344[v148];
      v150 = v345 - v148;
      if (v345 - v148 >= 0x12)
        v151 = 18;
      else
        v151 = v345 - v148;
      v152 = v150 - v151;
      if (v152 >= v152 - 1)
        v153 = v152 - 1;
      else
        v153 = v152;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v149[v151], v153);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v229;
      v24 = v237;
      v21 = v246;
      v18 = v256;
      v15 = v267;
      v12 = v279;
      v9 = v292;
      v6 = v306;
      v3 = v321;
      a1 = v337;
    }
  }
  v30 = v29[320];
  v32 = &unk_25451A000;
  if ((v31 & 1) == 0)
  {
    v322 = v3;
    v338 = a1;
    v293 = v9;
    v307 = v6;
    v280 = v12;
    v257 = v18;
    v268 = v15;
    v238 = v24;
    v247 = v21;
    v223 = v30;
    v230 = v27;
    v32 = (_QWORD *)&unk_25451A000;
    v30 = v223;
    v27 = v230;
    v24 = v238;
    v21 = v247;
    v18 = v257;
    v15 = v268;
    v12 = v280;
    v9 = v293;
    v6 = v307;
    v3 = v322;
    v155 = v154;
    a1 = v338;
    if (v155)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v345 = 93;
      v156 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v156)
        v157 = v156;
      else
        v157 = v345;
      v158 = &v344[v157];
      v159 = v345 - v157;
      if (v345 - v157 >= 0x12)
        v160 = 18;
      else
        v160 = v345 - v157;
      v161 = v159 - v160;
      if (v161 >= v161 - 1)
        v162 = v161 - 1;
      else
        v162 = v161;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v158[v160], v162);
      v32 = (_QWORD *)&unk_25451A000;
      v30 = v223;
      v27 = v230;
      v24 = v238;
      v21 = v247;
      v18 = v257;
      v15 = v268;
      v12 = v280;
      v9 = v293;
      v6 = v307;
      v3 = v322;
      a1 = v338;
    }
  }
  v33 = v32[21];
  v35 = &unk_25451A000;
  if ((v34 & 1) == 0)
  {
    v323 = v3;
    v339 = a1;
    v294 = v9;
    v308 = v6;
    v281 = v12;
    v258 = v18;
    v269 = v15;
    v239 = v24;
    v248 = v21;
    v224 = v30;
    v231 = v27;
    v218 = v33;
    v35 = (_QWORD *)&unk_25451A000;
    v33 = v218;
    v30 = v224;
    v27 = v231;
    v24 = v239;
    v21 = v248;
    v18 = v258;
    v15 = v269;
    v12 = v281;
    v9 = v294;
    v6 = v308;
    v3 = v323;
    v164 = v163;
    a1 = v339;
    if (v164)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      v345 = 83;
      v165 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v165)
        v166 = v165;
      else
        v166 = v345;
      v167 = &v344[v166];
      v168 = v345 - v166;
      if (v345 - v166 >= 0x12)
        v169 = 18;
      else
        v169 = v345 - v166;
      v170 = v168 - v169;
      if (v170 >= v170 - 1)
        v171 = v170 - 1;
      else
        v171 = v170;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v167[v169], v171);
      v35 = (_QWORD *)&unk_25451A000;
      v33 = v218;
      v30 = v224;
      v27 = v231;
      v24 = v239;
      v21 = v248;
      v18 = v258;
      v15 = v269;
      v12 = v281;
      v9 = v294;
      v6 = v308;
      v3 = v323;
      a1 = v339;
    }
  }
  v36 = v35[322];
  v38 = &unk_25451A000;
  if ((v37 & 1) == 0)
  {
    v324 = v3;
    v340 = a1;
    v295 = v9;
    v309 = v6;
    v282 = v12;
    v259 = v18;
    v270 = v15;
    v240 = v24;
    v249 = v21;
    v225 = v30;
    v232 = v27;
    v214 = v36;
    v219 = v33;
    v38 = (_QWORD *)&unk_25451A000;
    v36 = v214;
    v33 = v219;
    v30 = v225;
    v27 = v232;
    v24 = v240;
    v21 = v249;
    v18 = v259;
    v15 = v270;
    v12 = v282;
    v9 = v295;
    v6 = v309;
    v3 = v324;
    v173 = v172;
    a1 = v340;
    if (v173)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      v345 = 84;
      v174 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v174)
        v175 = v174;
      else
        v175 = v345;
      v176 = &v344[v175];
      v177 = v345 - v175;
      if (v345 - v175 >= 0x12)
        v178 = 18;
      else
        v178 = v345 - v175;
      v179 = v177 - v178;
      if (v179 >= v179 - 1)
        v180 = v179 - 1;
      else
        v180 = v179;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v176[v178], v180);
      v38 = (_QWORD *)&unk_25451A000;
      v36 = v214;
      v33 = v219;
      v30 = v225;
      v27 = v232;
      v24 = v240;
      v21 = v249;
      v18 = v259;
      v15 = v270;
      v12 = v282;
      v9 = v295;
      v6 = v309;
      v3 = v324;
      a1 = v340;
    }
  }
  v39 = v38[324];
  v41 = &unk_25451A000;
  if ((v40 & 1) == 0)
  {
    v325 = v3;
    v341 = a1;
    v296 = v9;
    v310 = v6;
    v283 = v12;
    v260 = v18;
    v271 = v15;
    v241 = v24;
    v250 = v21;
    v226 = v30;
    v233 = v27;
    v215 = v36;
    v220 = v33;
    v211 = v39;
    v41 = (_QWORD *)&unk_25451A000;
    v39 = v211;
    v36 = v215;
    v33 = v220;
    v30 = v226;
    v27 = v233;
    v24 = v241;
    v21 = v250;
    v18 = v260;
    v15 = v271;
    v12 = v283;
    v9 = v296;
    v6 = v310;
    v3 = v325;
    v182 = v181;
    a1 = v341;
    if (v182)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      v345 = 84;
      v183 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v183)
        v184 = v183;
      else
        v184 = v345;
      v185 = &v344[v184];
      v186 = v345 - v184;
      if (v345 - v184 >= 0x12)
        v187 = 18;
      else
        v187 = v345 - v184;
      v188 = v186 - v187;
      if (v188 >= v188 - 1)
        v189 = v188 - 1;
      else
        v189 = v188;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v185[v187], v189);
      v41 = (_QWORD *)&unk_25451A000;
      v39 = v211;
      v36 = v215;
      v33 = v220;
      v30 = v226;
      v27 = v233;
      v24 = v241;
      v21 = v250;
      v18 = v260;
      v15 = v271;
      v12 = v283;
      v9 = v296;
      v6 = v310;
      v3 = v325;
      a1 = v341;
    }
  }
  v42 = v41[326];
  v44 = &unk_25451A000;
  if ((v43 & 1) == 0)
  {
    v326 = v3;
    v342 = a1;
    v297 = v9;
    v311 = v6;
    v284 = v12;
    v261 = v18;
    v272 = v15;
    v242 = v24;
    v251 = v21;
    v227 = v30;
    v234 = v27;
    v216 = v36;
    v221 = v33;
    v209 = v42;
    v212 = v39;
    v44 = (_QWORD *)&unk_25451A000;
    v42 = v209;
    v39 = v212;
    v36 = v216;
    v33 = v221;
    v30 = v227;
    v27 = v234;
    v24 = v242;
    v21 = v251;
    v18 = v261;
    v15 = v272;
    v12 = v284;
    v9 = v297;
    v6 = v311;
    v3 = v326;
    v191 = v190;
    a1 = v342;
    if (v191)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      v345 = 84;
      v192 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v192)
        v193 = v192;
      else
        v193 = v345;
      v194 = &v344[v193];
      v195 = v345 - v193;
      if (v345 - v193 >= 0x12)
        v196 = 18;
      else
        v196 = v345 - v193;
      v197 = v195 - v196;
      if (v197 >= v197 - 1)
        v198 = v197 - 1;
      else
        v198 = v197;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v194[v196], v198);
      v44 = (_QWORD *)&unk_25451A000;
      v42 = v209;
      v39 = v212;
      v36 = v216;
      v33 = v221;
      v30 = v227;
      v27 = v234;
      v24 = v242;
      v21 = v251;
      v18 = v261;
      v15 = v272;
      v12 = v284;
      v9 = v297;
      v6 = v311;
      v3 = v326;
      a1 = v342;
    }
  }
  v45 = v44[328];
  v47 = &unk_25451A000;
  if ((v46 & 1) == 0)
  {
    v327 = v3;
    v343 = a1;
    v298 = v9;
    v312 = v6;
    v285 = v12;
    v262 = v18;
    v273 = v15;
    v243 = v24;
    v252 = v21;
    v228 = v30;
    v235 = v27;
    v217 = v36;
    v222 = v33;
    v210 = v42;
    v213 = v39;
    v208 = v45;
    v47 = (_QWORD *)&unk_25451A000;
    v45 = v208;
    v42 = v210;
    v39 = v213;
    v36 = v217;
    v33 = v222;
    v30 = v228;
    v27 = v235;
    v24 = v243;
    v21 = v252;
    v18 = v262;
    v15 = v273;
    v12 = v285;
    v9 = v298;
    v6 = v312;
    v3 = v327;
    v200 = v199;
    a1 = v343;
    if (v200)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v345 = 90;
      v201 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v201)
        v202 = v201;
      else
        v202 = v345;
      v203 = &v344[v202];
      v204 = v345 - v202;
      if (v345 - v202 >= 0x12)
        v205 = 18;
      else
        v205 = v345 - v202;
      v206 = v204 - v205;
      if (v206 >= v206 - 1)
        v207 = v206 - 1;
      else
        v207 = v206;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v203[v205], v207);
      v47 = (_QWORD *)&unk_25451A000;
      v45 = v208;
      v42 = v210;
      v39 = v213;
      v36 = v217;
      v33 = v222;
      v30 = v228;
      v27 = v235;
      v24 = v243;
      v21 = v252;
      v18 = v262;
      v15 = v273;
      v12 = v285;
      v9 = v298;
      v6 = v312;
      v3 = v327;
      a1 = v343;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v36 == a1
      || v39 == a1
      || v42 == a1
      || v45 == a1
      || v47[27] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CeilDivUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.ceildivui", 15, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::CeilDivUIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C048358;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::CeilDivUIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CeilDivUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

mlir::Operation *mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::getSpeculatability(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::arith::DivUIOp::getSpeculatability((mlir::arith::DivUIOp *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinIrHalH13g *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::CeilDivUIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::CeilDivUIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::CeilDivUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.ceildivui";
  v16[1] = 15;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::CeilDivUIOpGenericAdaptorBase::CeilDivUIOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::CeilDivUIOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CmpFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.cmpf", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::CmpFOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C048BF0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::arith::CmpFOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::arith::CmpFOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::arith::CmpFOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::CmpFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::arith::CmpFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::CmpFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::CmpFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::arith::CmpFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CmpFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CmpFOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CmpFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::CmpFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::CmpFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::CmpFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::CmpFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.cmpf";
  v16[1] = 10;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[48];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::CmpFOpGenericAdaptorBase::CmpFOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::CmpFOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned __int8 v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned __int8 v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned __int8 v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned __int8 v49;
  _QWORD *v50;
  int v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  const char *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  const char *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  const char *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  const char *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  const char *v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  const char *v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  const char *v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  unint64_t v133;
  unint64_t v134;
  const char *v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  const char *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  unint64_t v151;
  unint64_t v152;
  const char *v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  unint64_t v160;
  unint64_t v161;
  const char *v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  unint64_t v169;
  unint64_t v170;
  const char *v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  unint64_t v178;
  unint64_t v179;
  const char *v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  int v185;
  int v186;
  unint64_t v187;
  unint64_t v188;
  const char *v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  unint64_t v196;
  unint64_t v197;
  const char *v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  int v203;
  int v204;
  unint64_t v205;
  unint64_t v206;
  const char *v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  int v212;
  int v213;
  unint64_t v214;
  unint64_t v215;
  const char *v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  const char *v374;
  unint64_t v375;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v357 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v69 = v68;
    a1 = v357;
    if (v69)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v375 = 83;
      v70 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v70)
        v71 = v70;
      else
        v71 = v375;
      v72 = &v374[v71];
      v73 = v375 - v71;
      if (v375 - v71 >= 0x12)
        v74 = 18;
      else
        v74 = v375 - v71;
      v75 = v73 - v74;
      if (v75 >= v75 - 1)
        v76 = v75 - 1;
      else
        v76 = v75;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v72[v74], v76);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v357;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v341 = v3;
    v358 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v78 = v77;
    v3 = v341;
    a1 = v358;
    if (v78)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v375 = 81;
      v79 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v79)
        v80 = v79;
      else
        v80 = v375;
      v81 = &v374[v80];
      v82 = v375 - v80;
      if (v375 - v80 >= 0x12)
        v83 = 18;
      else
        v83 = v375 - v80;
      v84 = v82 - v83;
      if (v84 >= v84 - 1)
        v85 = v84 - 1;
      else
        v85 = v84;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v81[v83], v85);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v341;
      a1 = v358;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451A000;
  if ((v7 & 1) == 0)
  {
    v342 = v3;
    v359 = a1;
    v326 = v6;
    v8 = (_QWORD *)&unk_25451A000;
    v6 = v326;
    v3 = v342;
    v87 = v86;
    a1 = v359;
    if (v87)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v375 = 104;
      v88 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v88)
        v89 = v88;
      else
        v89 = v375;
      v90 = &v374[v89];
      v91 = v375 - v89;
      if (v375 - v89 >= 0x12)
        v92 = 18;
      else
        v92 = v375 - v89;
      v93 = v91 - v92;
      if (v93 >= v93 - 1)
        v94 = v93 - 1;
      else
        v94 = v93;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v90[v92], v94);
      v8 = (_QWORD *)&unk_25451A000;
      v6 = v326;
      v3 = v342;
      a1 = v359;
    }
  }
  v9 = v8[308];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v343 = v3;
    v360 = a1;
    v312 = v9;
    v327 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v312;
    v6 = v327;
    v96 = v95;
    v3 = v343;
    a1 = v360;
    if (v96)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v375 = 86;
      v97 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v97)
        v98 = v97;
      else
        v98 = v375;
      v99 = &v374[v98];
      v100 = v375 - v98;
      if (v375 - v98 >= 0x12)
        v101 = 18;
      else
        v101 = v375 - v98;
      v102 = v100 - v101;
      if (v102 >= v102 - 1)
        v103 = v102 - 1;
      else
        v103 = v102;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v99[v101], v103);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v312;
      v6 = v327;
      v3 = v343;
      a1 = v360;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v344 = v3;
    v361 = a1;
    v313 = v9;
    v328 = v6;
    v299 = v12;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v299;
    v9 = v313;
    v6 = v328;
    v3 = v344;
    v105 = v104;
    a1 = v361;
    if (v105)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      v375 = 90;
      v106 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v106)
        v107 = v106;
      else
        v107 = v375;
      v108 = &v374[v107];
      v109 = v375 - v107;
      if (v375 - v107 >= 0x12)
        v110 = 18;
      else
        v110 = v375 - v107;
      v111 = v109 - v110;
      if (v111 >= v111 - 1)
        v112 = v111 - 1;
      else
        v112 = v111;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v108[v110], v112);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v299;
      v9 = v313;
      v6 = v328;
      v3 = v344;
      a1 = v361;
    }
  }
  v15 = v14[79];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v345 = v3;
    v362 = a1;
    v314 = v9;
    v329 = v6;
    v287 = v15;
    v300 = v12;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v287;
    v12 = v300;
    v9 = v314;
    v6 = v329;
    v114 = v113;
    v3 = v345;
    a1 = v362;
    if (v114)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v375 = 84;
      v115 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v115)
        v116 = v115;
      else
        v116 = v375;
      v117 = &v374[v116];
      v118 = v375 - v116;
      if (v375 - v116 >= 0x12)
        v119 = 18;
      else
        v119 = v375 - v116;
      v120 = v118 - v119;
      if (v120 >= v120 - 1)
        v121 = v120 - 1;
      else
        v121 = v120;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v117[v119], v121);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v287;
      v12 = v300;
      v9 = v314;
      v6 = v329;
      v3 = v345;
      a1 = v362;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v346 = v3;
    v363 = a1;
    v315 = v9;
    v330 = v6;
    v288 = v15;
    v301 = v12;
    v276 = v18;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v276;
    v15 = v288;
    v12 = v301;
    v9 = v315;
    v6 = v330;
    v123 = v122;
    v3 = v346;
    a1 = v363;
    if (v123)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v375 = 89;
      v124 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v124)
        v125 = v124;
      else
        v125 = v375;
      v126 = &v374[v125];
      v127 = v375 - v125;
      if (v375 - v125 >= 0x12)
        v128 = 18;
      else
        v128 = v375 - v125;
      v129 = v127 - v128;
      if (v129 >= v129 - 1)
        v130 = v129 - 1;
      else
        v130 = v129;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v126[v128], v130);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v276;
      v15 = v288;
      v12 = v301;
      v9 = v315;
      v6 = v330;
      v3 = v346;
      a1 = v363;
    }
  }
  v21 = v20[310];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v347 = v3;
    v364 = a1;
    v316 = v9;
    v331 = v6;
    v289 = v15;
    v302 = v12;
    v266 = v21;
    v277 = v18;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v266;
    v18 = v277;
    v15 = v289;
    v12 = v302;
    v9 = v316;
    v6 = v331;
    v132 = v131;
    v3 = v347;
    a1 = v364;
    if (v132)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v375 = 95;
      v133 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v133)
        v134 = v133;
      else
        v134 = v375;
      v135 = &v374[v134];
      v136 = v375 - v134;
      if (v375 - v134 >= 0x12)
        v137 = 18;
      else
        v137 = v375 - v134;
      v138 = v136 - v137;
      if (v138 >= v138 - 1)
        v139 = v138 - 1;
      else
        v139 = v138;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v135[v137], v139);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v266;
      v18 = v277;
      v15 = v289;
      v12 = v302;
      v9 = v316;
      v6 = v331;
      v3 = v347;
      a1 = v364;
    }
  }
  v24 = v23[312];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v348 = v3;
    v365 = a1;
    v317 = v9;
    v332 = v6;
    v290 = v15;
    v303 = v12;
    v267 = v21;
    v278 = v18;
    v257 = v24;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v257;
    v21 = v267;
    v18 = v278;
    v15 = v290;
    v12 = v303;
    v9 = v317;
    v6 = v332;
    v141 = v140;
    v3 = v348;
    a1 = v365;
    if (v141)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v375 = 99;
      v142 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v142)
        v143 = v142;
      else
        v143 = v375;
      v144 = &v374[v143];
      v145 = v375 - v143;
      if (v375 - v143 >= 0x12)
        v146 = 18;
      else
        v146 = v375 - v143;
      v147 = v145 - v146;
      if (v147 >= v147 - 1)
        v148 = v147 - 1;
      else
        v148 = v147;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v144[v146], v148);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v257;
      v21 = v267;
      v18 = v278;
      v15 = v290;
      v12 = v303;
      v9 = v317;
      v6 = v332;
      v3 = v348;
      a1 = v365;
    }
  }
  v27 = v26[314];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v349 = v3;
    v366 = a1;
    v318 = v9;
    v333 = v6;
    v291 = v15;
    v304 = v12;
    v268 = v21;
    v279 = v18;
    v249 = v27;
    v258 = v24;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v249;
    v24 = v258;
    v21 = v268;
    v18 = v279;
    v15 = v291;
    v12 = v304;
    v9 = v318;
    v6 = v333;
    v150 = v149;
    v3 = v349;
    a1 = v366;
    if (v150)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v375 = 93;
      v151 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v151)
        v152 = v151;
      else
        v152 = v375;
      v153 = &v374[v152];
      v154 = v375 - v152;
      if (v375 - v152 >= 0x12)
        v155 = 18;
      else
        v155 = v375 - v152;
      v156 = v154 - v155;
      if (v156 >= v156 - 1)
        v157 = v156 - 1;
      else
        v157 = v156;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v153[v155], v157);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v249;
      v24 = v258;
      v21 = v268;
      v18 = v279;
      v15 = v291;
      v12 = v304;
      v9 = v318;
      v6 = v333;
      v3 = v349;
      a1 = v366;
    }
  }
  v30 = v29[21];
  v32 = &unk_25451A000;
  if ((v31 & 1) == 0)
  {
    v350 = v3;
    v367 = a1;
    v319 = v9;
    v334 = v6;
    v292 = v15;
    v305 = v12;
    v269 = v21;
    v280 = v18;
    v250 = v27;
    v259 = v24;
    v242 = v30;
    v32 = (_QWORD *)&unk_25451A000;
    v30 = v242;
    v27 = v250;
    v24 = v259;
    v21 = v269;
    v18 = v280;
    v15 = v292;
    v12 = v305;
    v9 = v319;
    v6 = v334;
    v159 = v158;
    v3 = v350;
    a1 = v367;
    if (v159)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameTypeOperands<Empty>]";
      v375 = 88;
      v160 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v160)
        v161 = v160;
      else
        v161 = v375;
      v162 = &v374[v161];
      v163 = v375 - v161;
      if (v375 - v161 >= 0x12)
        v164 = 18;
      else
        v164 = v375 - v161;
      v165 = v163 - v164;
      if (v165 >= v165 - 1)
        v166 = v165 - 1;
      else
        v166 = v165;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameTypeOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameTypeOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v162[v164], v166);
      v32 = (_QWORD *)&unk_25451A000;
      v30 = v242;
      v27 = v250;
      v24 = v259;
      v21 = v269;
      v18 = v280;
      v15 = v292;
      v12 = v305;
      v9 = v319;
      v6 = v334;
      v3 = v350;
      a1 = v367;
    }
  }
  v33 = v32[348];
  v35 = &unk_25451A000;
  if ((v34 & 1) == 0)
  {
    v351 = v3;
    v368 = a1;
    v320 = v9;
    v335 = v6;
    v293 = v15;
    v306 = v12;
    v270 = v21;
    v281 = v18;
    v251 = v27;
    v260 = v24;
    v236 = v33;
    v243 = v30;
    v35 = (_QWORD *)&unk_25451A000;
    v33 = v236;
    v30 = v243;
    v27 = v251;
    v24 = v260;
    v21 = v270;
    v18 = v281;
    v15 = v293;
    v12 = v306;
    v9 = v320;
    v6 = v335;
    v168 = v167;
    v3 = v351;
    a1 = v368;
    if (v168)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      v375 = 93;
      v169 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v169)
        v170 = v169;
      else
        v170 = v375;
      v171 = &v374[v170];
      v172 = v375 - v170;
      if (v375 - v170 >= 0x12)
        v173 = 18;
      else
        v173 = v375 - v170;
      v174 = v172 - v173;
      if (v174 >= v174 - 1)
        v175 = v174 - 1;
      else
        v175 = v174;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v171[v173], v175);
      v35 = (_QWORD *)&unk_25451A000;
      v33 = v236;
      v30 = v243;
      v27 = v251;
      v24 = v260;
      v21 = v270;
      v18 = v281;
      v15 = v293;
      v12 = v306;
      v9 = v320;
      v6 = v335;
      v3 = v351;
      a1 = v368;
    }
  }
  v36 = v35[320];
  v38 = &unk_25451A000;
  if ((v37 & 1) == 0)
  {
    v352 = v3;
    v369 = a1;
    v321 = v9;
    v336 = v6;
    v294 = v15;
    v307 = v12;
    v271 = v21;
    v282 = v18;
    v252 = v27;
    v261 = v24;
    v237 = v33;
    v244 = v30;
    v231 = v36;
    v38 = (_QWORD *)&unk_25451A000;
    v36 = v231;
    v33 = v237;
    v30 = v244;
    v27 = v252;
    v24 = v261;
    v21 = v271;
    v18 = v282;
    v15 = v294;
    v12 = v307;
    v9 = v321;
    v6 = v336;
    v177 = v176;
    v3 = v352;
    a1 = v369;
    if (v177)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      v375 = 83;
      v178 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v178)
        v179 = v178;
      else
        v179 = v375;
      v180 = &v374[v179];
      v181 = v375 - v179;
      if (v375 - v179 >= 0x12)
        v182 = 18;
      else
        v182 = v375 - v179;
      v183 = v181 - v182;
      if (v183 >= v183 - 1)
        v184 = v183 - 1;
      else
        v184 = v183;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v180[v182], v184);
      v38 = (_QWORD *)&unk_25451A000;
      v36 = v231;
      v33 = v237;
      v30 = v244;
      v27 = v252;
      v24 = v261;
      v21 = v271;
      v18 = v282;
      v15 = v294;
      v12 = v307;
      v9 = v321;
      v6 = v336;
      v3 = v352;
      a1 = v369;
    }
  }
  v39 = v38[322];
  v41 = &unk_25451A000;
  if ((v40 & 1) == 0)
  {
    v353 = v3;
    v370 = a1;
    v322 = v9;
    v337 = v6;
    v295 = v15;
    v308 = v12;
    v272 = v21;
    v283 = v18;
    v253 = v27;
    v262 = v24;
    v238 = v33;
    v245 = v30;
    v227 = v39;
    v232 = v36;
    v41 = (_QWORD *)&unk_25451A000;
    v39 = v227;
    v36 = v232;
    v33 = v238;
    v30 = v245;
    v27 = v253;
    v24 = v262;
    v21 = v272;
    v18 = v283;
    v15 = v295;
    v12 = v308;
    v9 = v322;
    v6 = v337;
    v186 = v185;
    v3 = v353;
    a1 = v370;
    if (v186)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      v375 = 84;
      v187 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v187)
        v188 = v187;
      else
        v188 = v375;
      v189 = &v374[v188];
      v190 = v375 - v188;
      if (v375 - v188 >= 0x12)
        v191 = 18;
      else
        v191 = v375 - v188;
      v192 = v190 - v191;
      if (v192 >= v192 - 1)
        v193 = v192 - 1;
      else
        v193 = v192;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v189[v191], v193);
      v41 = (_QWORD *)&unk_25451A000;
      v39 = v227;
      v36 = v232;
      v33 = v238;
      v30 = v245;
      v27 = v253;
      v24 = v262;
      v21 = v272;
      v18 = v283;
      v15 = v295;
      v12 = v308;
      v9 = v322;
      v6 = v337;
      v3 = v353;
      a1 = v370;
    }
  }
  v42 = v41[324];
  v44 = &unk_25451A000;
  if ((v43 & 1) == 0)
  {
    v354 = v3;
    v371 = a1;
    v323 = v9;
    v338 = v6;
    v296 = v15;
    v309 = v12;
    v273 = v21;
    v284 = v18;
    v254 = v27;
    v263 = v24;
    v239 = v33;
    v246 = v30;
    v228 = v39;
    v233 = v36;
    v224 = v42;
    v44 = (_QWORD *)&unk_25451A000;
    v42 = v224;
    v39 = v228;
    v36 = v233;
    v33 = v239;
    v30 = v246;
    v27 = v254;
    v24 = v263;
    v21 = v273;
    v18 = v284;
    v15 = v296;
    v12 = v309;
    v9 = v323;
    v6 = v338;
    v195 = v194;
    v3 = v354;
    a1 = v371;
    if (v195)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      v375 = 84;
      v196 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v196)
        v197 = v196;
      else
        v197 = v375;
      v198 = &v374[v197];
      v199 = v375 - v197;
      if (v375 - v197 >= 0x12)
        v200 = 18;
      else
        v200 = v375 - v197;
      v201 = v199 - v200;
      if (v201 >= v201 - 1)
        v202 = v201 - 1;
      else
        v202 = v201;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v198[v200], v202);
      v44 = (_QWORD *)&unk_25451A000;
      v42 = v224;
      v39 = v228;
      v36 = v233;
      v33 = v239;
      v30 = v246;
      v27 = v254;
      v24 = v263;
      v21 = v273;
      v18 = v284;
      v15 = v296;
      v12 = v309;
      v9 = v323;
      v6 = v338;
      v3 = v354;
      a1 = v371;
    }
  }
  v45 = v44[326];
  v47 = &unk_25451A000;
  if ((v46 & 1) == 0)
  {
    v355 = v3;
    v372 = a1;
    v324 = v9;
    v339 = v6;
    v297 = v15;
    v310 = v12;
    v274 = v21;
    v285 = v18;
    v255 = v27;
    v264 = v24;
    v240 = v33;
    v247 = v30;
    v229 = v39;
    v234 = v36;
    v222 = v45;
    v225 = v42;
    v47 = (_QWORD *)&unk_25451A000;
    v45 = v222;
    v42 = v225;
    v39 = v229;
    v36 = v234;
    v33 = v240;
    v30 = v247;
    v27 = v255;
    v24 = v264;
    v21 = v274;
    v18 = v285;
    v15 = v297;
    v12 = v310;
    v9 = v324;
    v6 = v339;
    v204 = v203;
    v3 = v355;
    a1 = v372;
    if (v204)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      v375 = 84;
      v205 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v205)
        v206 = v205;
      else
        v206 = v375;
      v207 = &v374[v206];
      v208 = v375 - v206;
      if (v375 - v206 >= 0x12)
        v209 = 18;
      else
        v209 = v375 - v206;
      v210 = v208 - v209;
      if (v210 >= v210 - 1)
        v211 = v210 - 1;
      else
        v211 = v210;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v207[v209], v211);
      v47 = (_QWORD *)&unk_25451A000;
      v45 = v222;
      v42 = v225;
      v39 = v229;
      v36 = v234;
      v33 = v240;
      v30 = v247;
      v27 = v255;
      v24 = v264;
      v21 = v274;
      v18 = v285;
      v15 = v297;
      v12 = v310;
      v9 = v324;
      v6 = v339;
      v3 = v355;
      a1 = v372;
    }
  }
  v48 = v47[328];
  v50 = &unk_25451A000;
  if ((v49 & 1) == 0)
  {
    v356 = v3;
    v373 = a1;
    v325 = v9;
    v340 = v6;
    v298 = v15;
    v311 = v12;
    v275 = v21;
    v286 = v18;
    v256 = v27;
    v265 = v24;
    v241 = v33;
    v248 = v30;
    v230 = v39;
    v235 = v36;
    v223 = v45;
    v226 = v42;
    v221 = v48;
    v48 = v221;
    v45 = v223;
    v42 = v226;
    v39 = v230;
    v36 = v235;
    v33 = v241;
    v30 = v248;
    v27 = v256;
    v24 = v265;
    v21 = v275;
    v18 = v286;
    v15 = v298;
    v12 = v311;
    v9 = v325;
    v6 = v340;
    v213 = v212;
    v3 = v356;
    a1 = v373;
    if (v213)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v375 = 90;
      v214 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v214)
        v215 = v214;
      else
        v215 = v375;
      v216 = &v374[v215];
      v217 = v375 - v215;
      if (v375 - v215 >= 0x12)
        v218 = 18;
      else
        v218 = v375 - v215;
      v219 = v217 - v218;
      if (v219 >= v219 - 1)
        v220 = v219 - 1;
      else
        v220 = v219;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v216[v218], v220);
      v50 = (_QWORD *)&unk_25451A000;
      v48 = v221;
      v45 = v223;
      v42 = v226;
      v39 = v230;
      v36 = v235;
      v33 = v241;
      v30 = v248;
      v27 = v256;
      v24 = v265;
      v21 = v275;
      v18 = v286;
      v15 = v298;
      v12 = v311;
      v9 = v325;
      v6 = v340;
      v3 = v356;
      a1 = v373;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v36 == a1
      || v39 == a1
      || v42 == a1
      || v45 == a1
      || v48 == a1
      || v50[27] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::CmpFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::CmpFOp>,mlir::OpTrait::OneResult<mlir::arith::CmpFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::CmpFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::CmpFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::CmpFOp>,mlir::OpTrait::OpInvariants<mlir::arith::CmpFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::CmpFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::CmpFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::CmpFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::CmpFOp>,mlir::OpTrait::SameTypeOperands<mlir::arith::CmpFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::CmpFOp>,mlir::OpTrait::Elementwise<mlir::arith::CmpFOp>,mlir::OpTrait::Scalarizable<mlir::arith::CmpFOp>,mlir::OpTrait::Vectorizable<mlir::arith::CmpFOp>,mlir::OpTrait::Tensorizable<mlir::arith::CmpFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::CmpFOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::CmpFOp>,mlir::OpTrait::OneResult<mlir::arith::CmpFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::CmpFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::CmpFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::CmpFOp>,mlir::OpTrait::OpInvariants<mlir::arith::CmpFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::CmpFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::CmpFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::CmpFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::CmpFOp>,mlir::OpTrait::SameTypeOperands<mlir::arith::CmpFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::CmpFOp>,mlir::OpTrait::Elementwise<mlir::arith::CmpFOp>,mlir::OpTrait::Scalarizable<mlir::arith::CmpFOp>,mlir::OpTrait::Vectorizable<mlir::arith::CmpFOp>,mlir::OpTrait::Tensorizable<mlir::arith::CmpFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::CmpFOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::OpTrait::impl *v8;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (v8 = a1, mlir::arith::CmpFOp::verifyInvariantsImpl((uint64_t **)&v8))
    && mlir::OpTrait::impl::verifySameTypeOperands(a1, v5))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CmpIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.cmpi", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C048CB8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::arith::CmpIOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::arith::CmpIOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::arith::CmpFOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::CmpIOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::arith::CmpFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::CmpIOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::CmpIOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::arith::CmpFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::inferResultRanges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::CmpIOp::inferResultRanges((mlir::arith::CmpIOp *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CmpIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CmpIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CmpIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::CmpFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::CmpIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::CmpIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::CmpFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.cmpi";
  v16[1] = 10;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[48];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::CmpIOpGenericAdaptorBase::CmpIOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::CmpIOp::fold(&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  unsigned __int8 v35;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  const char *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  const char *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  const char *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  const char *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  const char *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  unint64_t v108;
  unint64_t v109;
  const char *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  const char *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  const char *v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  const char *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  const char *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  unint64_t v153;
  unint64_t v154;
  const char *v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  const char *v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  unint64_t v172;
  unint64_t v173;
  const char *v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  int v181;
  unint64_t v182;
  unint64_t v183;
  const char *v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  const char *v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  unint64_t v202;
  unint64_t v203;
  const char *v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  int v209;
  int v210;
  unint64_t v211;
  unint64_t v212;
  const char *v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  const char *v385;
  unint64_t v386;

  if ((v1 & 1) == 0)
  {
    v367 = a1;
    a1 = v367;
    if (v54)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v386 = 83;
      v55 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v55)
        v56 = v55;
      else
        v56 = v386;
      v57 = &v385[v56];
      v58 = v386 - v56;
      if (v386 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v386 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      a1 = v367;
    }
  }
  v2 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v350 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id;
    v368 = a1;
    v2 = v350;
    a1 = v368;
    if (v62)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v386 = 81;
      v63 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v63)
        v64 = v63;
      else
        v64 = v386;
      v65 = &v385[v64];
      v66 = v386 - v64;
      if (v386 - v64 >= 0x12)
        v67 = 18;
      else
        v67 = v386 - v64;
      v68 = v66 - v67;
      if (v68 >= v68 - 1)
        v69 = v68 - 1;
      else
        v69 = v68;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v65[v67], v69);
      v2 = v350;
      a1 = v368;
    }
  }
  v4 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v351 = v2;
    v369 = a1;
    v334 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id;
    v4 = v334;
    v2 = v351;
    v71 = v70;
    a1 = v369;
    if (v71)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v386 = 104;
      v72 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v72)
        v73 = v72;
      else
        v73 = v386;
      v74 = &v385[v73];
      v75 = v386 - v73;
      if (v386 - v73 >= 0x12)
        v76 = 18;
      else
        v76 = v386 - v73;
      v77 = v75 - v76;
      if (v77 >= v77 - 1)
        v78 = v77 - 1;
      else
        v78 = v77;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v74[v76], v78);
      v4 = v334;
      v2 = v351;
      a1 = v369;
    }
  }
  v6 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v352 = v2;
    v370 = a1;
    v319 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
    v335 = v4;
    v6 = v319;
    v4 = v335;
    v80 = v79;
    v2 = v352;
    a1 = v370;
    if (v80)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v386 = 86;
      v81 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v81)
        v82 = v81;
      else
        v82 = v386;
      v83 = &v385[v82];
      v84 = v386 - v82;
      if (v386 - v82 >= 0x12)
        v85 = 18;
      else
        v85 = v386 - v82;
      v86 = v84 - v85;
      if (v86 >= v86 - 1)
        v87 = v86 - 1;
      else
        v87 = v86;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v83[v85], v87);
      v6 = v319;
      v4 = v335;
      v2 = v352;
      a1 = v370;
    }
  }
  v8 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v9 & 1) == 0)
  {
    v353 = v2;
    v371 = a1;
    v320 = v6;
    v336 = v4;
    v305 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id;
    v8 = v305;
    v6 = v320;
    v4 = v336;
    v2 = v353;
    v89 = v88;
    a1 = v371;
    if (v89)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      v386 = 90;
      v90 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v90)
        v91 = v90;
      else
        v91 = v386;
      v92 = &v385[v91];
      v93 = v386 - v91;
      if (v386 - v91 >= 0x12)
        v94 = 18;
      else
        v94 = v386 - v91;
      v95 = v93 - v94;
      if (v95 >= v95 - 1)
        v96 = v95 - 1;
      else
        v96 = v95;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v92[v94], v96);
      v8 = v305;
      v6 = v320;
      v4 = v336;
      v2 = v353;
      a1 = v371;
    }
  }
  v10 = mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v11 & 1) == 0)
  {
    v354 = v2;
    v372 = a1;
    v321 = v6;
    v337 = v4;
    v306 = v8;
    v292 = mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
    v10 = v292;
    v8 = v306;
    v6 = v321;
    v4 = v337;
    v2 = v354;
    v98 = v97;
    a1 = v372;
    if (v98)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v386 = 84;
      v99 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v99)
        v100 = v99;
      else
        v100 = v386;
      v101 = &v385[v100];
      v102 = v386 - v100;
      if (v386 - v100 >= 0x12)
        v103 = 18;
      else
        v103 = v386 - v100;
      v104 = v102 - v103;
      if (v104 >= v104 - 1)
        v105 = v104 - 1;
      else
        v105 = v104;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v101[v103], v105);
      v10 = v292;
      v8 = v306;
      v6 = v321;
      v4 = v337;
      v2 = v354;
      a1 = v372;
    }
  }
  v12 = mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v355 = v2;
    v373 = a1;
    v322 = v6;
    v338 = v4;
    v307 = v8;
    v280 = mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id;
    v293 = v10;
    v12 = v280;
    v10 = v293;
    v8 = v307;
    v6 = v322;
    v4 = v338;
    v2 = v355;
    v107 = v106;
    a1 = v373;
    if (v107)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v386 = 89;
      v108 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v108)
        v109 = v108;
      else
        v109 = v386;
      v110 = &v385[v109];
      v111 = v386 - v109;
      if (v386 - v109 >= 0x12)
        v112 = 18;
      else
        v112 = v386 - v109;
      v113 = v111 - v112;
      if (v113 >= v113 - 1)
        v114 = v113 - 1;
      else
        v114 = v113;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v110[v112], v114);
      v12 = v280;
      v10 = v293;
      v8 = v307;
      v6 = v322;
      v4 = v338;
      v2 = v355;
      a1 = v373;
    }
  }
  v14 = mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v15 & 1) == 0)
  {
    v356 = v2;
    v374 = a1;
    v323 = v6;
    v339 = v4;
    v308 = v8;
    v281 = v12;
    v294 = v10;
    v269 = mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v14 = v269;
    v12 = v281;
    v10 = v294;
    v8 = v308;
    v6 = v323;
    v4 = v339;
    v2 = v356;
    v116 = v115;
    a1 = v374;
    if (v116)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface::Trait<Empty>]";
      v386 = 92;
      v117 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v117)
        v118 = v117;
      else
        v118 = v386;
      v119 = &v385[v118];
      v120 = v386 - v118;
      if (v386 - v118 >= 0x12)
        v121 = 18;
      else
        v121 = v386 - v118;
      v122 = v120 - v121;
      if (v122 >= v122 - 1)
        v123 = v122 - 1;
      else
        v123 = v122;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v119[v121], v123);
      v14 = v269;
      v12 = v281;
      v10 = v294;
      v8 = v308;
      v6 = v323;
      v4 = v339;
      v2 = v356;
      a1 = v374;
    }
  }
  v16 = mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v17 & 1) == 0)
  {
    v357 = v2;
    v375 = a1;
    v324 = v6;
    v340 = v4;
    v309 = v8;
    v282 = v12;
    v295 = v10;
    v259 = mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v270 = v14;
    v16 = v259;
    v14 = v270;
    v12 = v282;
    v10 = v295;
    v8 = v309;
    v6 = v324;
    v4 = v340;
    v2 = v357;
    v125 = v124;
    a1 = v375;
    if (v125)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v386 = 95;
      v126 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v126)
        v127 = v126;
      else
        v127 = v386;
      v128 = &v385[v127];
      v129 = v386 - v127;
      if (v386 - v127 >= 0x12)
        v130 = 18;
      else
        v130 = v386 - v127;
      v131 = v129 - v130;
      if (v131 >= v131 - 1)
        v132 = v131 - 1;
      else
        v132 = v131;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v128[v130], v132);
      v16 = v259;
      v14 = v270;
      v12 = v282;
      v10 = v295;
      v8 = v309;
      v6 = v324;
      v4 = v340;
      v2 = v357;
      a1 = v375;
    }
  }
  v18 = mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v358 = v2;
    v376 = a1;
    v325 = v6;
    v341 = v4;
    v310 = v8;
    v283 = v12;
    v296 = v10;
    v260 = v16;
    v271 = v14;
    v250 = mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v18 = v250;
    v16 = v260;
    v14 = v271;
    v12 = v283;
    v10 = v296;
    v8 = v310;
    v6 = v325;
    v4 = v341;
    v2 = v358;
    v134 = v133;
    a1 = v376;
    if (v134)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v386 = 99;
      v135 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v135)
        v136 = v135;
      else
        v136 = v386;
      v137 = &v385[v136];
      v138 = v386 - v136;
      if (v386 - v136 >= 0x12)
        v139 = 18;
      else
        v139 = v386 - v136;
      v140 = v138 - v139;
      if (v140 >= v140 - 1)
        v141 = v140 - 1;
      else
        v141 = v140;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v137[v139], v141);
      v18 = v250;
      v16 = v260;
      v14 = v271;
      v12 = v283;
      v10 = v296;
      v8 = v310;
      v6 = v325;
      v4 = v341;
      v2 = v358;
      a1 = v376;
    }
  }
  v20 = mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v21 & 1) == 0)
  {
    v359 = v2;
    v377 = a1;
    v326 = v6;
    v342 = v4;
    v311 = v8;
    v284 = v12;
    v297 = v10;
    v261 = v16;
    v272 = v14;
    v242 = mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v251 = v18;
    v20 = v242;
    v18 = v251;
    v16 = v261;
    v14 = v272;
    v12 = v284;
    v10 = v297;
    v8 = v311;
    v6 = v326;
    v4 = v342;
    v2 = v359;
    v143 = v142;
    a1 = v377;
    if (v143)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v386 = 93;
      v144 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v144)
        v145 = v144;
      else
        v145 = v386;
      v146 = &v385[v145];
      v147 = v386 - v145;
      if (v386 - v145 >= 0x12)
        v148 = 18;
      else
        v148 = v386 - v145;
      v149 = v147 - v148;
      if (v149 >= v149 - 1)
        v150 = v149 - 1;
      else
        v150 = v149;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v146[v148], v150);
      v20 = v242;
      v18 = v251;
      v16 = v261;
      v14 = v272;
      v12 = v284;
      v10 = v297;
      v8 = v311;
      v6 = v326;
      v4 = v342;
      v2 = v359;
      a1 = v377;
    }
  }
  v22 = mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v23 & 1) == 0)
  {
    v360 = v2;
    v378 = a1;
    v327 = v6;
    v343 = v4;
    v312 = v8;
    v285 = v12;
    v298 = v10;
    v262 = v16;
    v273 = v14;
    v243 = v20;
    v252 = v18;
    v235 = mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v22 = v235;
    v20 = v243;
    v18 = v252;
    v16 = v262;
    v14 = v273;
    v12 = v285;
    v10 = v298;
    v8 = v312;
    v6 = v327;
    v4 = v343;
    v2 = v360;
    v152 = v151;
    a1 = v378;
    if (v152)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameTypeOperands<Empty>]";
      v386 = 88;
      v153 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v153)
        v154 = v153;
      else
        v154 = v386;
      v155 = &v385[v154];
      v156 = v386 - v154;
      if (v386 - v154 >= 0x12)
        v157 = 18;
      else
        v157 = v386 - v154;
      v158 = v156 - v157;
      if (v158 >= v158 - 1)
        v159 = v158 - 1;
      else
        v159 = v158;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameTypeOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameTypeOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v155[v157], v159);
      v22 = v235;
      v20 = v243;
      v18 = v252;
      v16 = v262;
      v14 = v273;
      v12 = v285;
      v10 = v298;
      v8 = v312;
      v6 = v327;
      v4 = v343;
      v2 = v360;
      a1 = v378;
    }
  }
  v24 = mlir::detail::TypeIDResolver<mlir::OpTrait::SameTypeOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameTypeOperands>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v361 = v2;
    v379 = a1;
    v328 = v6;
    v344 = v4;
    v313 = v8;
    v286 = v12;
    v299 = v10;
    v263 = v16;
    v274 = v14;
    v244 = v20;
    v253 = v18;
    v229 = mlir::detail::TypeIDResolver<mlir::OpTrait::SameTypeOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameTypeOperands>(void)::Empty>,void>::resolveTypeID(void)::id;
    v236 = v22;
    v24 = v229;
    v22 = v236;
    v20 = v244;
    v18 = v253;
    v16 = v263;
    v14 = v274;
    v12 = v286;
    v10 = v299;
    v8 = v313;
    v6 = v328;
    v4 = v344;
    v2 = v361;
    v161 = v160;
    a1 = v379;
    if (v161)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      v386 = 93;
      v162 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v162)
        v163 = v162;
      else
        v163 = v386;
      v164 = &v385[v163];
      v165 = v386 - v163;
      if (v386 - v163 >= 0x12)
        v166 = 18;
      else
        v166 = v386 - v163;
      v167 = v165 - v166;
      if (v167 >= v167 - 1)
        v168 = v167 - 1;
      else
        v168 = v167;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v164[v166], v168);
      v24 = v229;
      v22 = v236;
      v20 = v244;
      v18 = v253;
      v16 = v263;
      v14 = v274;
      v12 = v286;
      v10 = v299;
      v8 = v313;
      v6 = v328;
      v4 = v344;
      v2 = v361;
      a1 = v379;
    }
  }
  v26 = mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v27 & 1) == 0)
  {
    v362 = v2;
    v380 = a1;
    v329 = v6;
    v345 = v4;
    v314 = v8;
    v287 = v12;
    v300 = v10;
    v264 = v16;
    v275 = v14;
    v245 = v20;
    v254 = v18;
    v230 = v24;
    v237 = v22;
    v169 = mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v26 = v169;
    v24 = v230;
    v22 = v237;
    v20 = v245;
    v18 = v254;
    v16 = v264;
    v14 = v275;
    v12 = v287;
    v10 = v300;
    v8 = v314;
    v6 = v329;
    v4 = v345;
    v2 = v362;
    v171 = v170;
    a1 = v380;
    if (v171)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      v386 = 83;
      v172 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v172)
        v173 = v172;
      else
        v173 = v386;
      v174 = &v385[v173];
      v175 = v386 - v173;
      if (v386 - v173 >= 0x12)
        v176 = 18;
      else
        v176 = v386 - v173;
      v177 = v175 - v176;
      if (v177 >= v177 - 1)
        v178 = v177 - 1;
      else
        v178 = v177;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v174[v176], v178);
      v26 = v169;
      v24 = v230;
      v22 = v237;
      v20 = v245;
      v18 = v254;
      v16 = v264;
      v14 = v275;
      v12 = v287;
      v10 = v300;
      v8 = v314;
      v6 = v329;
      v4 = v345;
      v2 = v362;
      a1 = v380;
    }
  }
  v28 = mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v29 & 1) == 0)
  {
    v363 = v2;
    v381 = a1;
    v330 = v6;
    v346 = v4;
    v315 = v8;
    v288 = v12;
    v301 = v10;
    v265 = v16;
    v276 = v14;
    v246 = v20;
    v255 = v18;
    v231 = v24;
    v238 = v22;
    v179 = v26;
    v223 = mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id;
    v28 = v223;
    v26 = v179;
    v24 = v231;
    v22 = v238;
    v20 = v246;
    v18 = v255;
    v16 = v265;
    v14 = v276;
    v12 = v288;
    v10 = v301;
    v8 = v315;
    v6 = v330;
    v4 = v346;
    v2 = v363;
    v181 = v180;
    a1 = v381;
    if (v181)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      v386 = 84;
      v182 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v182)
        v183 = v182;
      else
        v183 = v386;
      v184 = &v385[v183];
      v185 = v386 - v183;
      if (v386 - v183 >= 0x12)
        v186 = 18;
      else
        v186 = v386 - v183;
      v187 = v185 - v186;
      if (v187 >= v187 - 1)
        v188 = v187 - 1;
      else
        v188 = v187;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v184[v186], v188);
      v28 = v223;
      v26 = v179;
      v24 = v231;
      v22 = v238;
      v20 = v246;
      v18 = v255;
      v16 = v265;
      v14 = v276;
      v12 = v288;
      v10 = v301;
      v8 = v315;
      v6 = v330;
      v4 = v346;
      v2 = v363;
      a1 = v381;
    }
  }
  v30 = mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v364 = v2;
    v382 = a1;
    v331 = v6;
    v347 = v4;
    v316 = v8;
    v289 = v12;
    v302 = v10;
    v266 = v16;
    v277 = v14;
    v247 = v20;
    v256 = v18;
    v232 = v24;
    v239 = v22;
    v226 = v26;
    v189 = v28;
    v219 = mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id;
    v30 = v219;
    v28 = v189;
    v26 = v226;
    v24 = v232;
    v22 = v239;
    v20 = v247;
    v18 = v256;
    v16 = v266;
    v14 = v277;
    v12 = v289;
    v10 = v302;
    v8 = v316;
    v6 = v331;
    v4 = v347;
    v2 = v364;
    v191 = v190;
    a1 = v382;
    if (v191)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      v386 = 84;
      v192 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v192)
        v193 = v192;
      else
        v193 = v386;
      v194 = &v385[v193];
      v195 = v386 - v193;
      if (v386 - v193 >= 0x12)
        v196 = 18;
      else
        v196 = v386 - v193;
      v197 = v195 - v196;
      if (v197 >= v197 - 1)
        v198 = v197 - 1;
      else
        v198 = v197;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v194[v196], v198);
      v30 = v219;
      v28 = v189;
      v26 = v226;
      v24 = v232;
      v22 = v239;
      v20 = v247;
      v18 = v256;
      v16 = v266;
      v14 = v277;
      v12 = v289;
      v10 = v302;
      v8 = v316;
      v6 = v331;
      v4 = v347;
      v2 = v364;
      a1 = v382;
    }
  }
  v32 = mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v33 & 1) == 0)
  {
    v365 = v2;
    v383 = a1;
    v332 = v6;
    v348 = v4;
    v317 = v8;
    v290 = v12;
    v303 = v10;
    v267 = v16;
    v278 = v14;
    v248 = v20;
    v257 = v18;
    v233 = v24;
    v240 = v22;
    v224 = v28;
    v227 = v26;
    v199 = v30;
    v221 = mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
    v32 = v221;
    v28 = v224;
    v30 = v199;
    v26 = v227;
    v24 = v233;
    v22 = v240;
    v20 = v248;
    v18 = v257;
    v16 = v267;
    v14 = v278;
    v12 = v290;
    v10 = v303;
    v8 = v317;
    v6 = v332;
    v4 = v348;
    v2 = v365;
    v201 = v200;
    a1 = v383;
    if (v201)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      v386 = 84;
      v202 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v202)
        v203 = v202;
      else
        v203 = v386;
      v204 = &v385[v203];
      v205 = v386 - v203;
      if (v386 - v203 >= 0x12)
        v206 = 18;
      else
        v206 = v386 - v203;
      v207 = v205 - v206;
      if (v207 >= v207 - 1)
        v208 = v207 - 1;
      else
        v208 = v207;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v204[v206], v208);
      v32 = v221;
      v28 = v224;
      v30 = v199;
      v26 = v227;
      v24 = v233;
      v22 = v240;
      v20 = v248;
      v18 = v257;
      v16 = v267;
      v14 = v278;
      v12 = v290;
      v10 = v303;
      v8 = v317;
      v6 = v332;
      v4 = v348;
      v2 = v365;
      a1 = v383;
    }
  }
  v34 = mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v35 & 1) == 0)
  {
    v366 = v2;
    v384 = a1;
    v333 = v6;
    v349 = v4;
    v318 = v8;
    v291 = v12;
    v304 = v10;
    v268 = v16;
    v279 = v14;
    v249 = v20;
    v258 = v18;
    v234 = v24;
    v241 = v22;
    v225 = v28;
    v228 = v26;
    v220 = v30;
    v222 = v32;
    v218 = mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
    v34 = v218;
    v30 = v220;
    v32 = v222;
    v28 = v225;
    v26 = v228;
    v24 = v234;
    v22 = v241;
    v20 = v249;
    v18 = v258;
    v16 = v268;
    v14 = v279;
    v12 = v291;
    v10 = v304;
    v8 = v318;
    v6 = v333;
    v4 = v349;
    v2 = v366;
    v210 = v209;
    a1 = v384;
    if (v210)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v386 = 90;
      v211 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v211)
        v212 = v211;
      else
        v212 = v386;
      v213 = &v385[v212];
      v214 = v386 - v212;
      if (v386 - v212 >= 0x12)
        v215 = 18;
      else
        v215 = v386 - v212;
      v216 = v214 - v215;
      if (v216 >= v216 - 1)
        v217 = v216 - 1;
      else
        v217 = v216;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v213[v215], v217);
      v34 = v218;
      v30 = v220;
      v32 = v222;
      v28 = v225;
      v26 = v228;
      v24 = v234;
      v22 = v241;
      v20 = v249;
      v18 = v258;
      v16 = v268;
      v14 = v279;
      v12 = v291;
      v10 = v304;
      v8 = v318;
      v6 = v333;
      v4 = v349;
      v2 = v366;
      a1 = v384;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v28 == a1
      || v30 == a1
      || v32 == a1
      || v34 == a1
      || mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::CmpIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::CmpIOp>,mlir::OpTrait::OneResult<mlir::arith::CmpIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::CmpIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::CmpIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::CmpIOp>,mlir::OpTrait::OpInvariants<mlir::arith::CmpIOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::CmpIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::CmpIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::CmpIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::CmpIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::CmpIOp>,mlir::OpTrait::SameTypeOperands<mlir::arith::CmpIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::CmpIOp>,mlir::OpTrait::Elementwise<mlir::arith::CmpIOp>,mlir::OpTrait::Scalarizable<mlir::arith::CmpIOp>,mlir::OpTrait::Vectorizable<mlir::arith::CmpIOp>,mlir::OpTrait::Tensorizable<mlir::arith::CmpIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::CmpIOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::CmpIOp>,mlir::OpTrait::OneResult<mlir::arith::CmpIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::CmpIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::CmpIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::CmpIOp>,mlir::OpTrait::OpInvariants<mlir::arith::CmpIOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::CmpIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::CmpIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::CmpIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::CmpIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::CmpIOp>,mlir::OpTrait::SameTypeOperands<mlir::arith::CmpIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::CmpIOp>,mlir::OpTrait::Elementwise<mlir::arith::CmpIOp>,mlir::OpTrait::Scalarizable<mlir::arith::CmpIOp>,mlir::OpTrait::Vectorizable<mlir::arith::CmpIOp>,mlir::OpTrait::Tensorizable<mlir::arith::CmpIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::CmpIOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::OpTrait::impl *v8;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (v8 = a1, mlir::arith::CmpIOp::verifyInvariantsImpl((uint64_t **)&v8))
    && mlir::OpTrait::impl::verifySameTypeOperands(a1, v5))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ConstantOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.constant", 14, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ConstantOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C048038;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::ConstantOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::arith::ConstantOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::ConstantOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::arith::ConstantOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::ConstantOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::getOpPropertyByteSize()
{
  return 16;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::ConstantOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::arith::ConstantOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ConstantOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ConstantOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ConstantOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::getDefaultDialect;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[336], v2);
}

void mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::getAsmResultNames(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v4;

  v4 = a2;
  mlir::arith::ConstantOp::getAsmResultNames((uint64_t)&v4, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::getDefaultDialect()
{
  return &byte_207AF6795;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

_QWORD *mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::inferResultRanges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, _QWORD **), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::ConstantOp::inferResultRanges((mlir::arith::ConstantOp *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::ConstantOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::ConstantOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::ConstantOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::ConstantOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.constant";
  v16[1] = 14;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[56];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::ConstantOpGenericAdaptorBase::ConstantOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::ConstantOp::fold((uint64_t)&v13);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned __int8 v40;
  _QWORD *v41;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  const char *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  const char *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  const char *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  const char *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  const char *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  const char *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  const char *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  const char *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  unint64_t v139;
  unint64_t v140;
  const char *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  const char *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  const char *v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  const char *v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  unint64_t v175;
  unint64_t v176;
  const char *v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  const char *v287;
  unint64_t v288;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v273 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v57 = v56;
    a1 = v273;
    if (v57)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v288 = 83;
      v58 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v58)
        v59 = v58;
      else
        v59 = v288;
      v60 = &v287[v59];
      v61 = v288 - v59;
      if (v288 - v59 >= 0x12)
        v62 = 18;
      else
        v62 = v288 - v59;
      v63 = v61 - v62;
      if (v63 >= v63 - 1)
        v64 = v63 - 1;
      else
        v64 = v63;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v60[v62], v64);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v273;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v260 = v3;
    v274 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v66 = v65;
    v3 = v260;
    a1 = v274;
    if (v66)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v288 = 81;
      v67 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v67)
        v68 = v67;
      else
        v68 = v288;
      v69 = &v287[v68];
      v70 = v288 - v68;
      if (v288 - v68 >= 0x12)
        v71 = 18;
      else
        v71 = v288 - v68;
      v72 = v70 - v71;
      if (v72 >= v72 - 1)
        v73 = v72 - 1;
      else
        v73 = v72;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v69[v71], v73);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v260;
      a1 = v274;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451A000;
  if ((v7 & 1) == 0)
  {
    v261 = v3;
    v275 = a1;
    v248 = v6;
    v8 = (_QWORD *)&unk_25451A000;
    v6 = v248;
    v3 = v261;
    v75 = v74;
    a1 = v275;
    if (v75)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v288 = 104;
      v76 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v76)
        v77 = v76;
      else
        v77 = v288;
      v78 = &v287[v77];
      v79 = v288 - v77;
      if (v288 - v77 >= 0x12)
        v80 = 18;
      else
        v80 = v288 - v77;
      v81 = v79 - v80;
      if (v81 >= v81 - 1)
        v82 = v81 - 1;
      else
        v82 = v81;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v78[v80], v82);
      v8 = (_QWORD *)&unk_25451A000;
      v6 = v248;
      v3 = v261;
      a1 = v275;
    }
  }
  v9 = v8[308];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v262 = v3;
    v276 = a1;
    v237 = v9;
    v249 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v237;
    v6 = v249;
    v84 = v83;
    v3 = v262;
    a1 = v276;
    if (v84)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v288 = 86;
      v85 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v85)
        v86 = v85;
      else
        v86 = v288;
      v87 = &v287[v86];
      v88 = v288 - v86;
      if (v288 - v86 >= 0x12)
        v89 = 18;
      else
        v89 = v288 - v86;
      v90 = v88 - v89;
      if (v90 >= v90 - 1)
        v91 = v90 - 1;
      else
        v91 = v90;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v87[v89], v91);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v237;
      v6 = v249;
      v3 = v262;
      a1 = v276;
    }
  }
  v12 = v11[419];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v263 = v3;
    v277 = a1;
    v238 = v9;
    v250 = v6;
    v227 = v12;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v227;
    v9 = v238;
    v6 = v250;
    v93 = v92;
    v3 = v263;
    a1 = v277;
    if (v93)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      v288 = 84;
      v94 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v94)
        v95 = v94;
      else
        v95 = v288;
      v96 = &v287[v95];
      v97 = v288 - v95;
      if (v288 - v95 >= 0x12)
        v98 = 18;
      else
        v98 = v288 - v95;
      v99 = v97 - v98;
      if (v99 >= v99 - 1)
        v100 = v99 - 1;
      else
        v100 = v99;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v96[v98], v100);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v227;
      v9 = v238;
      v6 = v250;
      v3 = v263;
      a1 = v277;
    }
  }
  v15 = v14[421];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v264 = v3;
    v278 = a1;
    v239 = v9;
    v251 = v6;
    v218 = v15;
    v228 = v12;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v218;
    v12 = v228;
    v9 = v239;
    v6 = v251;
    v102 = v101;
    v3 = v264;
    a1 = v278;
    if (v102)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v288 = 84;
      v103 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v103)
        v104 = v103;
      else
        v104 = v288;
      v105 = &v287[v104];
      v106 = v288 - v104;
      if (v288 - v104 >= 0x12)
        v107 = 18;
      else
        v107 = v288 - v104;
      v108 = v106 - v107;
      if (v108 >= v108 - 1)
        v109 = v108 - 1;
      else
        v109 = v108;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v105[v107], v109);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v218;
      v12 = v228;
      v9 = v239;
      v6 = v251;
      v3 = v264;
      a1 = v278;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v265 = v3;
    v279 = a1;
    v240 = v9;
    v252 = v6;
    v219 = v15;
    v229 = v12;
    v210 = v18;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v210;
    v15 = v219;
    v12 = v229;
    v9 = v240;
    v6 = v252;
    v111 = v110;
    v3 = v265;
    a1 = v279;
    if (v111)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v288 = 89;
      v112 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v112)
        v113 = v112;
      else
        v113 = v288;
      v114 = &v287[v113];
      v115 = v288 - v113;
      if (v288 - v113 >= 0x12)
        v116 = 18;
      else
        v116 = v288 - v113;
      v117 = v115 - v116;
      if (v117 >= v117 - 1)
        v118 = v117 - 1;
      else
        v118 = v117;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v114[v116], v118);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v210;
      v15 = v219;
      v12 = v229;
      v9 = v240;
      v6 = v252;
      v3 = v265;
      a1 = v279;
    }
  }
  v21 = v20[310];
  v23 = &unk_254519000;
  if ((v22 & 1) == 0)
  {
    v266 = v3;
    v280 = a1;
    v241 = v9;
    v253 = v6;
    v220 = v15;
    v230 = v12;
    v203 = v21;
    v211 = v18;
    v23 = (_QWORD *)&unk_254519000;
    v21 = v203;
    v18 = v211;
    v15 = v220;
    v12 = v230;
    v9 = v241;
    v6 = v253;
    v120 = v119;
    v3 = v266;
    a1 = v280;
    if (v120)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ConstantLike<Empty>]";
      v288 = 84;
      v121 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v121)
        v122 = v121;
      else
        v122 = v288;
      v123 = &v287[v122];
      v124 = v288 - v122;
      if (v288 - v122 >= 0x12)
        v125 = 18;
      else
        v125 = v288 - v122;
      v126 = v124 - v125;
      if (v126 >= v126 - 1)
        v127 = v126 - 1;
      else
        v127 = v126;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v123[v125], v127);
      v23 = (_QWORD *)&unk_254519000;
      v21 = v203;
      v18 = v211;
      v15 = v220;
      v12 = v230;
      v9 = v241;
      v6 = v253;
      v3 = v266;
      a1 = v280;
    }
  }
  v24 = v23[375];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v267 = v3;
    v281 = a1;
    v242 = v9;
    v254 = v6;
    v221 = v15;
    v231 = v12;
    v204 = v21;
    v212 = v18;
    v197 = v24;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v197;
    v21 = v204;
    v18 = v212;
    v15 = v221;
    v12 = v231;
    v9 = v242;
    v6 = v254;
    v129 = v128;
    v3 = v267;
    a1 = v281;
    if (v129)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v288 = 95;
      v130 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v130)
        v131 = v130;
      else
        v131 = v288;
      v132 = &v287[v131];
      v133 = v288 - v131;
      if (v288 - v131 >= 0x12)
        v134 = 18;
      else
        v134 = v288 - v131;
      v135 = v133 - v134;
      if (v135 >= v135 - 1)
        v136 = v135 - 1;
      else
        v136 = v135;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v132[v134], v136);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v197;
      v21 = v204;
      v18 = v212;
      v15 = v221;
      v12 = v231;
      v9 = v242;
      v6 = v254;
      v3 = v267;
      a1 = v281;
    }
  }
  v27 = v26[312];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v268 = v3;
    v282 = a1;
    v243 = v9;
    v255 = v6;
    v222 = v15;
    v232 = v12;
    v205 = v21;
    v213 = v18;
    v192 = v27;
    v198 = v24;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v192;
    v24 = v198;
    v21 = v205;
    v18 = v213;
    v15 = v222;
    v12 = v232;
    v9 = v243;
    v6 = v255;
    v138 = v137;
    v3 = v268;
    a1 = v282;
    if (v138)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v288 = 99;
      v139 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v139)
        v140 = v139;
      else
        v140 = v288;
      v141 = &v287[v140];
      v142 = v288 - v140;
      if (v288 - v140 >= 0x12)
        v143 = 18;
      else
        v143 = v288 - v140;
      v144 = v142 - v143;
      if (v144 >= v144 - 1)
        v145 = v144 - 1;
      else
        v145 = v144;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v141[v143], v145);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v192;
      v24 = v198;
      v21 = v205;
      v18 = v213;
      v15 = v222;
      v12 = v232;
      v9 = v243;
      v6 = v255;
      v3 = v268;
      a1 = v282;
    }
  }
  v30 = v29[314];
  v32 = &unk_25451A000;
  if ((v31 & 1) == 0)
  {
    v269 = v3;
    v283 = a1;
    v244 = v9;
    v256 = v6;
    v223 = v15;
    v233 = v12;
    v206 = v21;
    v214 = v18;
    v193 = v27;
    v199 = v24;
    v188 = v30;
    v32 = (_QWORD *)&unk_25451A000;
    v30 = v188;
    v27 = v193;
    v24 = v199;
    v21 = v206;
    v18 = v214;
    v15 = v223;
    v12 = v233;
    v9 = v244;
    v6 = v256;
    v147 = v146;
    v3 = v269;
    a1 = v283;
    if (v147)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v288 = 93;
      v148 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v148)
        v149 = v148;
      else
        v149 = v288;
      v150 = &v287[v149];
      v151 = v288 - v149;
      if (v288 - v149 >= 0x12)
        v152 = 18;
      else
        v152 = v288 - v149;
      v153 = v151 - v152;
      if (v153 >= v153 - 1)
        v154 = v153 - 1;
      else
        v154 = v153;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v150[v152], v154);
      v32 = (_QWORD *)&unk_25451A000;
      v30 = v188;
      v27 = v193;
      v24 = v199;
      v21 = v206;
      v18 = v214;
      v15 = v223;
      v12 = v233;
      v9 = v244;
      v6 = v256;
      v3 = v269;
      a1 = v283;
    }
  }
  v33 = v32[21];
  v35 = &unk_25451A000;
  if ((v34 & 1) == 0)
  {
    v270 = v3;
    v284 = a1;
    v245 = v9;
    v257 = v6;
    v224 = v15;
    v234 = v12;
    v207 = v21;
    v215 = v18;
    v194 = v27;
    v200 = v24;
    v185 = v33;
    v189 = v30;
    v35 = (_QWORD *)&unk_25451A000;
    v33 = v185;
    v30 = v189;
    v27 = v194;
    v24 = v200;
    v21 = v207;
    v18 = v215;
    v15 = v224;
    v12 = v234;
    v9 = v245;
    v6 = v257;
    v156 = v155;
    v3 = v270;
    a1 = v284;
    if (v156)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v288 = 86;
      v157 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v157)
        v158 = v157;
      else
        v158 = v288;
      v159 = &v287[v158];
      v160 = v288 - v158;
      if (v288 - v158 >= 0x12)
        v161 = 18;
      else
        v161 = v288 - v158;
      v162 = v160 - v161;
      if (v162 >= v162 - 1)
        v163 = v162 - 1;
      else
        v163 = v162;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v159[v161], v163);
      v35 = (_QWORD *)&unk_25451A000;
      v33 = v185;
      v30 = v189;
      v27 = v194;
      v24 = v200;
      v21 = v207;
      v18 = v215;
      v15 = v224;
      v12 = v234;
      v9 = v245;
      v6 = v257;
      v3 = v270;
      a1 = v284;
    }
  }
  v36 = v35[340];
  v38 = &unk_25451A000;
  if ((v37 & 1) == 0)
  {
    v271 = v3;
    v285 = a1;
    v246 = v9;
    v258 = v6;
    v225 = v15;
    v235 = v12;
    v208 = v21;
    v216 = v18;
    v195 = v27;
    v201 = v24;
    v186 = v33;
    v190 = v30;
    v183 = v36;
    v38 = (_QWORD *)&unk_25451A000;
    v36 = v183;
    v33 = v186;
    v30 = v190;
    v27 = v195;
    v24 = v201;
    v21 = v208;
    v18 = v216;
    v15 = v225;
    v12 = v235;
    v9 = v246;
    v6 = v258;
    v165 = v164;
    v3 = v271;
    a1 = v285;
    if (v165)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface::Trait<Empty>]";
      v288 = 92;
      v166 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v166)
        v167 = v166;
      else
        v167 = v288;
      v168 = &v287[v167];
      v169 = v288 - v167;
      if (v288 - v167 >= 0x12)
        v170 = 18;
      else
        v170 = v288 - v167;
      v171 = v169 - v170;
      if (v171 >= v171 - 1)
        v172 = v171 - 1;
      else
        v172 = v171;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v168[v170], v172);
      v38 = (_QWORD *)&unk_25451A000;
      v36 = v183;
      v33 = v186;
      v30 = v190;
      v27 = v195;
      v24 = v201;
      v21 = v208;
      v18 = v216;
      v15 = v225;
      v12 = v235;
      v9 = v246;
      v6 = v258;
      v3 = v271;
      a1 = v285;
    }
  }
  v39 = v38[334];
  v41 = &unk_25451A000;
  if ((v40 & 1) == 0)
  {
    v272 = v3;
    v286 = a1;
    v247 = v9;
    v259 = v6;
    v226 = v15;
    v236 = v12;
    v209 = v21;
    v217 = v18;
    v196 = v27;
    v202 = v24;
    v187 = v33;
    v191 = v30;
    v182 = v39;
    v184 = v36;
    v41 = (_QWORD *)&unk_25451A000;
    v39 = v182;
    v36 = v184;
    v33 = v187;
    v30 = v191;
    v27 = v196;
    v24 = v202;
    v21 = v209;
    v18 = v217;
    v15 = v226;
    v12 = v236;
    v9 = v247;
    v6 = v259;
    v174 = v173;
    v3 = v272;
    a1 = v286;
    if (v174)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v288 = 90;
      v175 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v175)
        v176 = v175;
      else
        v176 = v288;
      v177 = &v287[v176];
      v178 = v288 - v176;
      if (v288 - v176 >= 0x12)
        v179 = 18;
      else
        v179 = v288 - v176;
      v180 = v178 - v179;
      if (v180 >= v180 - 1)
        v181 = v180 - 1;
      else
        v181 = v180;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v177[v179], v181);
      v41 = (_QWORD *)&unk_25451A000;
      v39 = v182;
      v36 = v184;
      v33 = v187;
      v30 = v191;
      v27 = v196;
      v24 = v202;
      v21 = v209;
      v18 = v217;
      v15 = v226;
      v12 = v236;
      v9 = v247;
      v6 = v259;
      v3 = v272;
      a1 = v286;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v36 == a1
      || v39 == a1
      || v41[27] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::ConstantOp::print((mlir::arith::ConstantOp *)&v7, a3);
}

BOOL mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
    return 0;
  v7 = a1;
  if (!mlir::arith::ConstantOp::verifyInvariantsImpl((uint64_t **)&v7))
    return 0;
  v7 = a1;
  return mlir::arith::ConstantOp::verify((uint64_t **)&v7) != 0;
}

BOOL mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.divf", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::DivFOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C048D80;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::arith::DivFOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::arith::DivFOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivFOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::getFastMathAttrName;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      v15 = 85;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[272], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::DivFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::DivFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.divf";
  v16[1] = 10;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[48];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::DivFOpGenericAdaptorBase::DivFOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::DivFOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  unsigned __int8 v35;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  const char *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  const char *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  const char *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  const char *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  const char *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  unint64_t v108;
  unint64_t v109;
  const char *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  const char *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  const char *v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  const char *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  const char *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  unint64_t v153;
  unint64_t v154;
  const char *v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  const char *v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  unint64_t v172;
  unint64_t v173;
  const char *v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  int v181;
  unint64_t v182;
  unint64_t v183;
  const char *v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  const char *v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  unint64_t v202;
  unint64_t v203;
  const char *v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  int v209;
  int v210;
  unint64_t v211;
  unint64_t v212;
  const char *v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  const char *v385;
  unint64_t v386;

  if ((v1 & 1) == 0)
  {
    v367 = a1;
    a1 = v367;
    if (v54)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v386 = 83;
      v55 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v55)
        v56 = v55;
      else
        v56 = v386;
      v57 = &v385[v56];
      v58 = v386 - v56;
      if (v386 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v386 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      a1 = v367;
    }
  }
  v2 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v350 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id;
    v368 = a1;
    v2 = v350;
    a1 = v368;
    if (v62)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v386 = 81;
      v63 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v63)
        v64 = v63;
      else
        v64 = v386;
      v65 = &v385[v64];
      v66 = v386 - v64;
      if (v386 - v64 >= 0x12)
        v67 = 18;
      else
        v67 = v386 - v64;
      v68 = v66 - v67;
      if (v68 >= v68 - 1)
        v69 = v68 - 1;
      else
        v69 = v68;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v65[v67], v69);
      v2 = v350;
      a1 = v368;
    }
  }
  v4 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v351 = v2;
    v369 = a1;
    v334 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id;
    v4 = v334;
    v2 = v351;
    v71 = v70;
    a1 = v369;
    if (v71)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v386 = 104;
      v72 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v72)
        v73 = v72;
      else
        v73 = v386;
      v74 = &v385[v73];
      v75 = v386 - v73;
      if (v386 - v73 >= 0x12)
        v76 = 18;
      else
        v76 = v386 - v73;
      v77 = v75 - v76;
      if (v77 >= v77 - 1)
        v78 = v77 - 1;
      else
        v78 = v77;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v74[v76], v78);
      v4 = v334;
      v2 = v351;
      a1 = v369;
    }
  }
  v6 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v352 = v2;
    v370 = a1;
    v319 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
    v335 = v4;
    v6 = v319;
    v4 = v335;
    v80 = v79;
    v2 = v352;
    a1 = v370;
    if (v80)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v386 = 86;
      v81 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v81)
        v82 = v81;
      else
        v82 = v386;
      v83 = &v385[v82];
      v84 = v386 - v82;
      if (v386 - v82 >= 0x12)
        v85 = 18;
      else
        v85 = v386 - v82;
      v86 = v84 - v85;
      if (v86 >= v86 - 1)
        v87 = v86 - 1;
      else
        v87 = v86;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v83[v85], v87);
      v6 = v319;
      v4 = v335;
      v2 = v352;
      a1 = v370;
    }
  }
  v8 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v9 & 1) == 0)
  {
    v353 = v2;
    v371 = a1;
    v320 = v6;
    v336 = v4;
    v305 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id;
    v8 = v305;
    v6 = v320;
    v4 = v336;
    v2 = v353;
    v89 = v88;
    a1 = v371;
    if (v89)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      v386 = 90;
      v90 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v90)
        v91 = v90;
      else
        v91 = v386;
      v92 = &v385[v91];
      v93 = v386 - v91;
      if (v386 - v91 >= 0x12)
        v94 = 18;
      else
        v94 = v386 - v91;
      v95 = v93 - v94;
      if (v95 >= v95 - 1)
        v96 = v95 - 1;
      else
        v96 = v95;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v92[v94], v96);
      v8 = v305;
      v6 = v320;
      v4 = v336;
      v2 = v353;
      a1 = v371;
    }
  }
  v10 = mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v11 & 1) == 0)
  {
    v354 = v2;
    v372 = a1;
    v321 = v6;
    v337 = v4;
    v306 = v8;
    v292 = mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
    v10 = v292;
    v8 = v306;
    v6 = v321;
    v4 = v337;
    v2 = v354;
    v98 = v97;
    a1 = v372;
    if (v98)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v386 = 84;
      v99 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v99)
        v100 = v99;
      else
        v100 = v386;
      v101 = &v385[v100];
      v102 = v386 - v100;
      if (v386 - v100 >= 0x12)
        v103 = 18;
      else
        v103 = v386 - v100;
      v104 = v102 - v103;
      if (v104 >= v104 - 1)
        v105 = v104 - 1;
      else
        v105 = v104;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v101[v103], v105);
      v10 = v292;
      v8 = v306;
      v6 = v321;
      v4 = v337;
      v2 = v354;
      a1 = v372;
    }
  }
  v12 = mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v355 = v2;
    v373 = a1;
    v322 = v6;
    v338 = v4;
    v307 = v8;
    v280 = mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id;
    v293 = v10;
    v12 = v280;
    v10 = v293;
    v8 = v307;
    v6 = v322;
    v4 = v338;
    v2 = v355;
    v107 = v106;
    a1 = v373;
    if (v107)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v386 = 89;
      v108 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v108)
        v109 = v108;
      else
        v109 = v386;
      v110 = &v385[v109];
      v111 = v386 - v109;
      if (v386 - v109 >= 0x12)
        v112 = 18;
      else
        v112 = v386 - v109;
      v113 = v111 - v112;
      if (v113 >= v113 - 1)
        v114 = v113 - 1;
      else
        v114 = v113;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v110[v112], v114);
      v12 = v280;
      v10 = v293;
      v8 = v307;
      v6 = v322;
      v4 = v338;
      v2 = v355;
      a1 = v373;
    }
  }
  v14 = mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v15 & 1) == 0)
  {
    v356 = v2;
    v374 = a1;
    v323 = v6;
    v339 = v4;
    v308 = v8;
    v281 = v12;
    v294 = v10;
    v269 = mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v14 = v269;
    v12 = v281;
    v10 = v294;
    v8 = v308;
    v6 = v323;
    v4 = v339;
    v2 = v356;
    v116 = v115;
    a1 = v374;
    if (v116)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v386 = 95;
      v117 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v117)
        v118 = v117;
      else
        v118 = v386;
      v119 = &v385[v118];
      v120 = v386 - v118;
      if (v386 - v118 >= 0x12)
        v121 = 18;
      else
        v121 = v386 - v118;
      v122 = v120 - v121;
      if (v122 >= v122 - 1)
        v123 = v122 - 1;
      else
        v123 = v122;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v119[v121], v123);
      v14 = v269;
      v12 = v281;
      v10 = v294;
      v8 = v308;
      v6 = v323;
      v4 = v339;
      v2 = v356;
      a1 = v374;
    }
  }
  v16 = mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v17 & 1) == 0)
  {
    v357 = v2;
    v375 = a1;
    v324 = v6;
    v340 = v4;
    v309 = v8;
    v282 = v12;
    v295 = v10;
    v259 = mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v270 = v14;
    v16 = v259;
    v14 = v270;
    v12 = v282;
    v10 = v295;
    v8 = v309;
    v6 = v324;
    v4 = v340;
    v2 = v357;
    v125 = v124;
    a1 = v375;
    if (v125)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v386 = 99;
      v126 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v126)
        v127 = v126;
      else
        v127 = v386;
      v128 = &v385[v127];
      v129 = v386 - v127;
      if (v386 - v127 >= 0x12)
        v130 = 18;
      else
        v130 = v386 - v127;
      v131 = v129 - v130;
      if (v131 >= v131 - 1)
        v132 = v131 - 1;
      else
        v132 = v131;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v128[v130], v132);
      v16 = v259;
      v14 = v270;
      v12 = v282;
      v10 = v295;
      v8 = v309;
      v6 = v324;
      v4 = v340;
      v2 = v357;
      a1 = v375;
    }
  }
  v18 = mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v358 = v2;
    v376 = a1;
    v325 = v6;
    v341 = v4;
    v310 = v8;
    v283 = v12;
    v296 = v10;
    v260 = v16;
    v271 = v14;
    v250 = mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v18 = v250;
    v16 = v260;
    v14 = v271;
    v12 = v283;
    v10 = v296;
    v8 = v310;
    v6 = v325;
    v4 = v341;
    v2 = v358;
    v134 = v133;
    a1 = v376;
    if (v134)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v386 = 93;
      v135 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v135)
        v136 = v135;
      else
        v136 = v386;
      v137 = &v385[v136];
      v138 = v386 - v136;
      if (v386 - v136 >= 0x12)
        v139 = 18;
      else
        v139 = v386 - v136;
      v140 = v138 - v139;
      if (v140 >= v140 - 1)
        v141 = v140 - 1;
      else
        v141 = v140;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v137[v139], v141);
      v18 = v250;
      v16 = v260;
      v14 = v271;
      v12 = v283;
      v10 = v296;
      v8 = v310;
      v6 = v325;
      v4 = v341;
      v2 = v358;
      a1 = v376;
    }
  }
  v20 = mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v21 & 1) == 0)
  {
    v359 = v2;
    v377 = a1;
    v326 = v6;
    v342 = v4;
    v311 = v8;
    v284 = v12;
    v297 = v10;
    v261 = v16;
    v272 = v14;
    v242 = mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v251 = v18;
    v20 = v242;
    v18 = v251;
    v16 = v261;
    v14 = v272;
    v12 = v284;
    v10 = v297;
    v8 = v311;
    v6 = v326;
    v4 = v342;
    v2 = v359;
    v143 = v142;
    a1 = v377;
    if (v143)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface::Trait<Empty>]";
      v386 = 99;
      v144 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v144)
        v145 = v144;
      else
        v145 = v386;
      v146 = &v385[v145];
      v147 = v386 - v145;
      if (v386 - v145 >= 0x12)
        v148 = 18;
      else
        v148 = v386 - v145;
      v149 = v147 - v148;
      if (v149 >= v149 - 1)
        v150 = v149 - 1;
      else
        v150 = v149;
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::arith::ArithFastMathInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v146[v148], v150);
      v20 = v242;
      v18 = v251;
      v16 = v261;
      v14 = v272;
      v12 = v284;
      v10 = v297;
      v8 = v311;
      v6 = v326;
      v4 = v342;
      v2 = v359;
      a1 = v377;
    }
  }
  v22 = mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::arith::ArithFastMathInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v23 & 1) == 0)
  {
    v360 = v2;
    v378 = a1;
    v327 = v6;
    v343 = v4;
    v312 = v8;
    v285 = v12;
    v298 = v10;
    v262 = v16;
    v273 = v14;
    v243 = v20;
    v252 = v18;
    v235 = mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::arith::ArithFastMathInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v22 = v235;
    v20 = v243;
    v18 = v252;
    v16 = v262;
    v14 = v273;
    v12 = v285;
    v10 = v298;
    v8 = v312;
    v6 = v327;
    v4 = v343;
    v2 = v360;
    v152 = v151;
    a1 = v378;
    if (v152)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultType<Empty>]";
      v386 = 97;
      v153 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v153)
        v154 = v153;
      else
        v154 = v386;
      v155 = &v385[v154];
      v156 = v386 - v154;
      if (v386 - v154 >= 0x12)
        v157 = 18;
      else
        v157 = v386 - v154;
      v158 = v156 - v157;
      if (v158 >= v158 - 1)
        v159 = v158 - 1;
      else
        v159 = v158;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v155[v157], v159);
      v22 = v235;
      v20 = v243;
      v18 = v252;
      v16 = v262;
      v14 = v273;
      v12 = v285;
      v10 = v298;
      v8 = v312;
      v6 = v327;
      v4 = v343;
      v2 = v360;
      a1 = v378;
    }
  }
  v24 = mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v361 = v2;
    v379 = a1;
    v328 = v6;
    v344 = v4;
    v313 = v8;
    v286 = v12;
    v299 = v10;
    v263 = v16;
    v274 = v14;
    v244 = v20;
    v253 = v18;
    v229 = mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id;
    v236 = v22;
    v24 = v229;
    v22 = v236;
    v20 = v244;
    v18 = v253;
    v16 = v263;
    v14 = v274;
    v12 = v286;
    v10 = v299;
    v8 = v313;
    v6 = v328;
    v4 = v344;
    v2 = v361;
    v161 = v160;
    a1 = v379;
    if (v161)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      v386 = 93;
      v162 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v162)
        v163 = v162;
      else
        v163 = v386;
      v164 = &v385[v163];
      v165 = v386 - v163;
      if (v386 - v163 >= 0x12)
        v166 = 18;
      else
        v166 = v386 - v163;
      v167 = v165 - v166;
      if (v167 >= v167 - 1)
        v168 = v167 - 1;
      else
        v168 = v167;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v164[v166], v168);
      v24 = v229;
      v22 = v236;
      v20 = v244;
      v18 = v253;
      v16 = v263;
      v14 = v274;
      v12 = v286;
      v10 = v299;
      v8 = v313;
      v6 = v328;
      v4 = v344;
      v2 = v361;
      a1 = v379;
    }
  }
  v26 = mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v27 & 1) == 0)
  {
    v362 = v2;
    v380 = a1;
    v329 = v6;
    v345 = v4;
    v314 = v8;
    v287 = v12;
    v300 = v10;
    v264 = v16;
    v275 = v14;
    v245 = v20;
    v254 = v18;
    v230 = v24;
    v237 = v22;
    v169 = mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v26 = v169;
    v24 = v230;
    v22 = v237;
    v20 = v245;
    v18 = v254;
    v16 = v264;
    v14 = v275;
    v12 = v287;
    v10 = v300;
    v8 = v314;
    v6 = v329;
    v4 = v345;
    v2 = v362;
    v171 = v170;
    a1 = v380;
    if (v171)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      v386 = 83;
      v172 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v172)
        v173 = v172;
      else
        v173 = v386;
      v174 = &v385[v173];
      v175 = v386 - v173;
      if (v386 - v173 >= 0x12)
        v176 = 18;
      else
        v176 = v386 - v173;
      v177 = v175 - v176;
      if (v177 >= v177 - 1)
        v178 = v177 - 1;
      else
        v178 = v177;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v174[v176], v178);
      v26 = v169;
      v24 = v230;
      v22 = v237;
      v20 = v245;
      v18 = v254;
      v16 = v264;
      v14 = v275;
      v12 = v287;
      v10 = v300;
      v8 = v314;
      v6 = v329;
      v4 = v345;
      v2 = v362;
      a1 = v380;
    }
  }
  v28 = mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v29 & 1) == 0)
  {
    v363 = v2;
    v381 = a1;
    v330 = v6;
    v346 = v4;
    v315 = v8;
    v288 = v12;
    v301 = v10;
    v265 = v16;
    v276 = v14;
    v246 = v20;
    v255 = v18;
    v231 = v24;
    v238 = v22;
    v179 = v26;
    v223 = mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id;
    v28 = v223;
    v26 = v179;
    v24 = v231;
    v22 = v238;
    v20 = v246;
    v18 = v255;
    v16 = v265;
    v14 = v276;
    v12 = v288;
    v10 = v301;
    v8 = v315;
    v6 = v330;
    v4 = v346;
    v2 = v363;
    v181 = v180;
    a1 = v381;
    if (v181)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      v386 = 84;
      v182 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v182)
        v183 = v182;
      else
        v183 = v386;
      v184 = &v385[v183];
      v185 = v386 - v183;
      if (v386 - v183 >= 0x12)
        v186 = 18;
      else
        v186 = v386 - v183;
      v187 = v185 - v186;
      if (v187 >= v187 - 1)
        v188 = v187 - 1;
      else
        v188 = v187;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v184[v186], v188);
      v28 = v223;
      v26 = v179;
      v24 = v231;
      v22 = v238;
      v20 = v246;
      v18 = v255;
      v16 = v265;
      v14 = v276;
      v12 = v288;
      v10 = v301;
      v8 = v315;
      v6 = v330;
      v4 = v346;
      v2 = v363;
      a1 = v381;
    }
  }
  v30 = mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v364 = v2;
    v382 = a1;
    v331 = v6;
    v347 = v4;
    v316 = v8;
    v289 = v12;
    v302 = v10;
    v266 = v16;
    v277 = v14;
    v247 = v20;
    v256 = v18;
    v232 = v24;
    v239 = v22;
    v226 = v26;
    v189 = v28;
    v219 = mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id;
    v30 = v219;
    v28 = v189;
    v26 = v226;
    v24 = v232;
    v22 = v239;
    v20 = v247;
    v18 = v256;
    v16 = v266;
    v14 = v277;
    v12 = v289;
    v10 = v302;
    v8 = v316;
    v6 = v331;
    v4 = v347;
    v2 = v364;
    v191 = v190;
    a1 = v382;
    if (v191)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      v386 = 84;
      v192 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v192)
        v193 = v192;
      else
        v193 = v386;
      v194 = &v385[v193];
      v195 = v386 - v193;
      if (v386 - v193 >= 0x12)
        v196 = 18;
      else
        v196 = v386 - v193;
      v197 = v195 - v196;
      if (v197 >= v197 - 1)
        v198 = v197 - 1;
      else
        v198 = v197;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v194[v196], v198);
      v30 = v219;
      v28 = v189;
      v26 = v226;
      v24 = v232;
      v22 = v239;
      v20 = v247;
      v18 = v256;
      v16 = v266;
      v14 = v277;
      v12 = v289;
      v10 = v302;
      v8 = v316;
      v6 = v331;
      v4 = v347;
      v2 = v364;
      a1 = v382;
    }
  }
  v32 = mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v33 & 1) == 0)
  {
    v365 = v2;
    v383 = a1;
    v332 = v6;
    v348 = v4;
    v317 = v8;
    v290 = v12;
    v303 = v10;
    v267 = v16;
    v278 = v14;
    v248 = v20;
    v257 = v18;
    v233 = v24;
    v240 = v22;
    v224 = v28;
    v227 = v26;
    v199 = v30;
    v221 = mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
    v32 = v221;
    v28 = v224;
    v30 = v199;
    v26 = v227;
    v24 = v233;
    v22 = v240;
    v20 = v248;
    v18 = v257;
    v16 = v267;
    v14 = v278;
    v12 = v290;
    v10 = v303;
    v8 = v317;
    v6 = v332;
    v4 = v348;
    v2 = v365;
    v201 = v200;
    a1 = v383;
    if (v201)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      v386 = 84;
      v202 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v202)
        v203 = v202;
      else
        v203 = v386;
      v204 = &v385[v203];
      v205 = v386 - v203;
      if (v386 - v203 >= 0x12)
        v206 = 18;
      else
        v206 = v386 - v203;
      v207 = v205 - v206;
      if (v207 >= v207 - 1)
        v208 = v207 - 1;
      else
        v208 = v207;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v204[v206], v208);
      v32 = v221;
      v28 = v224;
      v30 = v199;
      v26 = v227;
      v24 = v233;
      v22 = v240;
      v20 = v248;
      v18 = v257;
      v16 = v267;
      v14 = v278;
      v12 = v290;
      v10 = v303;
      v8 = v317;
      v6 = v332;
      v4 = v348;
      v2 = v365;
      a1 = v383;
    }
  }
  v34 = mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v35 & 1) == 0)
  {
    v366 = v2;
    v384 = a1;
    v333 = v6;
    v349 = v4;
    v318 = v8;
    v291 = v12;
    v304 = v10;
    v268 = v16;
    v279 = v14;
    v249 = v20;
    v258 = v18;
    v234 = v24;
    v241 = v22;
    v225 = v28;
    v228 = v26;
    v220 = v30;
    v222 = v32;
    v218 = mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
    v34 = v218;
    v30 = v220;
    v32 = v222;
    v28 = v225;
    v26 = v228;
    v24 = v234;
    v22 = v241;
    v20 = v249;
    v18 = v258;
    v16 = v268;
    v14 = v279;
    v12 = v291;
    v10 = v304;
    v8 = v318;
    v6 = v333;
    v4 = v349;
    v2 = v366;
    v210 = v209;
    a1 = v384;
    if (v210)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v386 = 90;
      v211 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v211)
        v212 = v211;
      else
        v212 = v386;
      v213 = &v385[v212];
      v214 = v386 - v212;
      if (v386 - v212 >= 0x12)
        v215 = 18;
      else
        v215 = v386 - v212;
      v216 = v214 - v215;
      if (v216 >= v216 - 1)
        v217 = v216 - 1;
      else
        v217 = v216;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v213[v215], v217);
      v34 = v218;
      v30 = v220;
      v32 = v222;
      v28 = v225;
      v26 = v228;
      v24 = v234;
      v22 = v241;
      v20 = v249;
      v18 = v258;
      v16 = v268;
      v14 = v279;
      v12 = v291;
      v10 = v304;
      v8 = v318;
      v6 = v333;
      v4 = v349;
      v2 = v366;
      a1 = v384;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v28 == a1
      || v30 == a1
      || v32 == a1
      || v34 == a1
      || mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddFOp>,mlir::OpTrait::OneResult<mlir::arith::AddFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::AddFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::Elementwise<mlir::arith::AddFOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddFOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddFOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddFOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.divsi", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::DivSIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C049550;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::DivSIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

