uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivSIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

BOOL mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivSIOp>::getSpeculatability(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::arith::DivSIOp::getSpeculatability((mlir::arith::DivSIOp *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinSpatialSplitTransform *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::DivSIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::DivSIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::DivSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.divsi";
  v16[1] = 11;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::DivSIOpGenericAdaptorBase::DivSIOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::DivSIOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.divui", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::DivUIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C049618;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::DivUIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivUIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

mlir::Operation *mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivUIOp>::getSpeculatability(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::arith::DivUIOp::getSpeculatability((mlir::arith::DivUIOp *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinIrHalH13g *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::DivUIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::DivUIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::DivUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.divui";
  v16[1] = 11;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::DivUIOpGenericAdaptorBase::DivUIOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::DivUIOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.extf", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ExtFOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C048E48;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::ExtFOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtFOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>::areCastCompatible;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      v15 = 71;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[344], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::ExtFOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::ExtFOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::ExtFOpGenericAdaptorBase::ExtFOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::ExtFOp::fold(&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::ExtFOp>,mlir::OpTrait::OneResult<mlir::arith::ExtFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::ExtFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::ExtFOp>,mlir::OpTrait::OneOperand<mlir::arith::ExtFOp>,mlir::OpTrait::OpInvariants<mlir::arith::ExtFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::ExtFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::ExtFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::ExtFOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::ExtFOp>,mlir::CastOpInterface::Trait<mlir::arith::ExtFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::ExtFOp>,mlir::OpTrait::Elementwise<mlir::arith::ExtFOp>,mlir::OpTrait::Scalarizable<mlir::arith::ExtFOp>,mlir::OpTrait::Vectorizable<mlir::arith::ExtFOp>,mlir::OpTrait::Tensorizable<mlir::arith::ExtFOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::arith::ExtFOp::verify((uint64_t **)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::ExtFOp>,mlir::OpTrait::OneResult<mlir::arith::ExtFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::ExtFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::ExtFOp>,mlir::OpTrait::OneOperand<mlir::arith::ExtFOp>,mlir::OpTrait::OpInvariants<mlir::arith::ExtFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::ExtFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::ExtFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::ExtFOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::ExtFOp>,mlir::CastOpInterface::Trait<mlir::arith::ExtFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::ExtFOp>,mlir::OpTrait::Elementwise<mlir::arith::ExtFOp>,mlir::OpTrait::Scalarizable<mlir::arith::ExtFOp>,mlir::OpTrait::Vectorizable<mlir::arith::ExtFOp>,mlir::OpTrait::Tensorizable<mlir::arith::ExtFOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::Operation *v7;
  mlir::Operation *v8;
  mlir::OpTrait::impl *v10;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (v10 = a1, mlir::arith::ExtFOp::verifyInvariantsImpl((uint64_t **)&v10))
    && mlir::OpTrait::impl::verifySameOperandsAndResultShape(a1, v6)
    && mlir::impl::verifyCastInterfaceOp(a1, v7))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v8) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.extsi", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C0496E0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::arith::ExtSIOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::ExtSIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>::inferResultRanges(uint64_t a1, uint64_t a2, mlir::intrange *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::ExtSIOp::inferResultRanges(&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtSIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtSIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>::areCastCompatible;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      v15 = 71;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[344], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::ExtSIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::ExtSIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::ExtSIOpGenericAdaptorBase::ExtSIOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::ExtSIOp::fold((uint64_t)&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned __int8 v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned __int8 v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned __int8 v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned __int8 v49;
  _QWORD *v50;
  int v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  const char *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  const char *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  const char *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  const char *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  const char *v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  const char *v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  const char *v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  unint64_t v133;
  unint64_t v134;
  const char *v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  const char *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  unint64_t v151;
  unint64_t v152;
  const char *v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  unint64_t v160;
  unint64_t v161;
  const char *v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  unint64_t v169;
  unint64_t v170;
  const char *v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  unint64_t v178;
  unint64_t v179;
  const char *v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  int v185;
  int v186;
  unint64_t v187;
  unint64_t v188;
  const char *v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  unint64_t v196;
  unint64_t v197;
  const char *v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  int v203;
  int v204;
  unint64_t v205;
  unint64_t v206;
  const char *v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  int v212;
  int v213;
  unint64_t v214;
  unint64_t v215;
  const char *v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  const char *v374;
  unint64_t v375;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v357 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v69 = v68;
    a1 = v357;
    if (v69)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v375 = 83;
      v70 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v70)
        v71 = v70;
      else
        v71 = v375;
      v72 = &v374[v71];
      v73 = v375 - v71;
      if (v375 - v71 >= 0x12)
        v74 = 18;
      else
        v74 = v375 - v71;
      v75 = v73 - v74;
      if (v75 >= v75 - 1)
        v76 = v75 - 1;
      else
        v76 = v75;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v72[v74], v76);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v357;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v341 = v3;
    v358 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v78 = v77;
    v3 = v341;
    a1 = v358;
    if (v78)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v375 = 81;
      v79 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v79)
        v80 = v79;
      else
        v80 = v375;
      v81 = &v374[v80];
      v82 = v375 - v80;
      if (v375 - v80 >= 0x12)
        v83 = 18;
      else
        v83 = v375 - v80;
      v84 = v82 - v83;
      if (v84 >= v84 - 1)
        v85 = v84 - 1;
      else
        v85 = v84;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v81[v83], v85);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v341;
      a1 = v358;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451A000;
  if ((v7 & 1) == 0)
  {
    v342 = v3;
    v359 = a1;
    v326 = v6;
    v8 = (_QWORD *)&unk_25451A000;
    v6 = v326;
    v3 = v342;
    v87 = v86;
    a1 = v359;
    if (v87)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v375 = 104;
      v88 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v88)
        v89 = v88;
      else
        v89 = v375;
      v90 = &v374[v89];
      v91 = v375 - v89;
      if (v375 - v89 >= 0x12)
        v92 = 18;
      else
        v92 = v375 - v89;
      v93 = v91 - v92;
      if (v93 >= v93 - 1)
        v94 = v93 - 1;
      else
        v94 = v93;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v90[v92], v94);
      v8 = (_QWORD *)&unk_25451A000;
      v6 = v326;
      v3 = v342;
      a1 = v359;
    }
  }
  v9 = v8[308];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v343 = v3;
    v360 = a1;
    v312 = v9;
    v327 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v312;
    v6 = v327;
    v96 = v95;
    v3 = v343;
    a1 = v360;
    if (v96)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v375 = 86;
      v97 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v97)
        v98 = v97;
      else
        v98 = v375;
      v99 = &v374[v98];
      v100 = v375 - v98;
      if (v375 - v98 >= 0x12)
        v101 = 18;
      else
        v101 = v375 - v98;
      v102 = v100 - v101;
      if (v102 >= v102 - 1)
        v103 = v102 - 1;
      else
        v103 = v102;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v99[v101], v103);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v312;
      v6 = v327;
      v3 = v343;
      a1 = v360;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v344 = v3;
    v361 = a1;
    v313 = v9;
    v328 = v6;
    v299 = v12;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v299;
    v9 = v313;
    v6 = v328;
    v3 = v344;
    v105 = v104;
    a1 = v361;
    if (v105)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v375 = 82;
      v106 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v106)
        v107 = v106;
      else
        v107 = v375;
      v108 = &v374[v107];
      v109 = v375 - v107;
      if (v375 - v107 >= 0x12)
        v110 = 18;
      else
        v110 = v375 - v107;
      v111 = v109 - v110;
      if (v111 >= v111 - 1)
        v112 = v111 - 1;
      else
        v112 = v111;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v108[v110], v112);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v299;
      v9 = v313;
      v6 = v328;
      v3 = v344;
      a1 = v361;
    }
  }
  v15 = v14[19];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v345 = v3;
    v362 = a1;
    v314 = v9;
    v329 = v6;
    v287 = v15;
    v300 = v12;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v287;
    v12 = v300;
    v9 = v314;
    v6 = v329;
    v114 = v113;
    v3 = v345;
    a1 = v362;
    if (v114)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v375 = 84;
      v115 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v115)
        v116 = v115;
      else
        v116 = v375;
      v117 = &v374[v116];
      v118 = v375 - v116;
      if (v375 - v116 >= 0x12)
        v119 = 18;
      else
        v119 = v375 - v116;
      v120 = v118 - v119;
      if (v120 >= v120 - 1)
        v121 = v120 - 1;
      else
        v121 = v120;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v117[v119], v121);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v287;
      v12 = v300;
      v9 = v314;
      v6 = v329;
      v3 = v345;
      a1 = v362;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v346 = v3;
    v363 = a1;
    v315 = v9;
    v330 = v6;
    v288 = v15;
    v301 = v12;
    v276 = v18;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v276;
    v15 = v288;
    v12 = v301;
    v9 = v315;
    v6 = v330;
    v123 = v122;
    v3 = v346;
    a1 = v363;
    if (v123)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface::Trait<Empty>]";
      v375 = 92;
      v124 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v124)
        v125 = v124;
      else
        v125 = v375;
      v126 = &v374[v125];
      v127 = v375 - v125;
      if (v375 - v125 >= 0x12)
        v128 = 18;
      else
        v128 = v375 - v125;
      v129 = v127 - v128;
      if (v129 >= v129 - 1)
        v130 = v129 - 1;
      else
        v130 = v129;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v126[v128], v130);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v276;
      v15 = v288;
      v12 = v301;
      v9 = v315;
      v6 = v330;
      v3 = v346;
      a1 = v363;
    }
  }
  v21 = v20[334];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v347 = v3;
    v364 = a1;
    v316 = v9;
    v331 = v6;
    v289 = v15;
    v302 = v12;
    v266 = v21;
    v277 = v18;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v266;
    v18 = v277;
    v15 = v289;
    v12 = v302;
    v9 = v316;
    v6 = v331;
    v132 = v131;
    v3 = v347;
    a1 = v364;
    if (v132)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v375 = 95;
      v133 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v133)
        v134 = v133;
      else
        v134 = v375;
      v135 = &v374[v134];
      v136 = v375 - v134;
      if (v375 - v134 >= 0x12)
        v137 = 18;
      else
        v137 = v375 - v134;
      v138 = v136 - v137;
      if (v138 >= v138 - 1)
        v139 = v138 - 1;
      else
        v139 = v138;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v135[v137], v139);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v266;
      v18 = v277;
      v15 = v289;
      v12 = v302;
      v9 = v316;
      v6 = v331;
      v3 = v347;
      a1 = v364;
    }
  }
  v24 = v23[312];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v348 = v3;
    v365 = a1;
    v317 = v9;
    v332 = v6;
    v290 = v15;
    v303 = v12;
    v267 = v21;
    v278 = v18;
    v257 = v24;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v257;
    v21 = v267;
    v18 = v278;
    v15 = v290;
    v12 = v303;
    v9 = v317;
    v6 = v332;
    v141 = v140;
    v3 = v348;
    a1 = v365;
    if (v141)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v375 = 99;
      v142 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v142)
        v143 = v142;
      else
        v143 = v375;
      v144 = &v374[v143];
      v145 = v375 - v143;
      if (v375 - v143 >= 0x12)
        v146 = 18;
      else
        v146 = v375 - v143;
      v147 = v145 - v146;
      if (v147 >= v147 - 1)
        v148 = v147 - 1;
      else
        v148 = v147;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v144[v146], v148);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v257;
      v21 = v267;
      v18 = v278;
      v15 = v290;
      v12 = v303;
      v9 = v317;
      v6 = v332;
      v3 = v348;
      a1 = v365;
    }
  }
  v27 = v26[314];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v349 = v3;
    v366 = a1;
    v318 = v9;
    v333 = v6;
    v291 = v15;
    v304 = v12;
    v268 = v21;
    v279 = v18;
    v249 = v27;
    v258 = v24;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v249;
    v24 = v258;
    v21 = v268;
    v18 = v279;
    v15 = v291;
    v12 = v304;
    v9 = v318;
    v6 = v333;
    v150 = v149;
    v3 = v349;
    a1 = v366;
    if (v150)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v375 = 93;
      v151 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v151)
        v152 = v151;
      else
        v152 = v375;
      v153 = &v374[v152];
      v154 = v375 - v152;
      if (v375 - v152 >= 0x12)
        v155 = 18;
      else
        v155 = v375 - v152;
      v156 = v154 - v155;
      if (v156 >= v156 - 1)
        v157 = v156 - 1;
      else
        v157 = v156;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v153[v155], v157);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v249;
      v24 = v258;
      v21 = v268;
      v18 = v279;
      v15 = v291;
      v12 = v304;
      v9 = v318;
      v6 = v333;
      v3 = v349;
      a1 = v366;
    }
  }
  v30 = v29[21];
  v32 = &unk_25451A000;
  if ((v31 & 1) == 0)
  {
    v350 = v3;
    v367 = a1;
    v319 = v9;
    v334 = v6;
    v292 = v15;
    v305 = v12;
    v269 = v21;
    v280 = v18;
    v250 = v27;
    v259 = v24;
    v242 = v30;
    v32 = (_QWORD *)&unk_25451A000;
    v30 = v242;
    v27 = v250;
    v24 = v259;
    v21 = v269;
    v18 = v280;
    v15 = v292;
    v12 = v305;
    v9 = v319;
    v6 = v334;
    v159 = v158;
    v3 = v350;
    a1 = v367;
    if (v159)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultShape<Empty>]";
      v375 = 98;
      v160 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v160)
        v161 = v160;
      else
        v161 = v375;
      v162 = &v374[v161];
      v163 = v375 - v161;
      if (v375 - v161 >= 0x12)
        v164 = 18;
      else
        v164 = v375 - v161;
      v165 = v163 - v164;
      if (v165 >= v165 - 1)
        v166 = v165 - 1;
      else
        v166 = v165;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v162[v164], v166);
      v32 = (_QWORD *)&unk_25451A000;
      v30 = v242;
      v27 = v250;
      v24 = v259;
      v21 = v269;
      v18 = v280;
      v15 = v292;
      v12 = v305;
      v9 = v319;
      v6 = v334;
      v3 = v350;
      a1 = v367;
    }
  }
  v33 = v32[55];
  v35 = &unk_25451A000;
  if ((v34 & 1) == 0)
  {
    v351 = v3;
    v368 = a1;
    v320 = v9;
    v335 = v6;
    v293 = v15;
    v306 = v12;
    v270 = v21;
    v281 = v18;
    v251 = v27;
    v260 = v24;
    v236 = v33;
    v243 = v30;
    v35 = (_QWORD *)&unk_25451A000;
    v33 = v236;
    v30 = v243;
    v27 = v251;
    v24 = v260;
    v21 = v270;
    v18 = v281;
    v15 = v293;
    v12 = v306;
    v9 = v320;
    v6 = v335;
    v168 = v167;
    v3 = v351;
    a1 = v368;
    if (v168)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface::Trait<Empty>]";
      v375 = 85;
      v169 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v169)
        v170 = v169;
      else
        v170 = v375;
      v171 = &v374[v170];
      v172 = v375 - v170;
      if (v375 - v170 >= 0x12)
        v173 = 18;
      else
        v173 = v375 - v170;
      v174 = v172 - v173;
      if (v174 >= v174 - 1)
        v175 = v174 - 1;
      else
        v175 = v174;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CastOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v171[v173], v175);
      v35 = (_QWORD *)&unk_25451A000;
      v33 = v236;
      v30 = v243;
      v27 = v251;
      v24 = v260;
      v21 = v270;
      v18 = v281;
      v15 = v293;
      v12 = v306;
      v9 = v320;
      v6 = v335;
      v3 = v351;
      a1 = v368;
    }
  }
  v36 = v35[346];
  v38 = &unk_25451A000;
  if ((v37 & 1) == 0)
  {
    v352 = v3;
    v369 = a1;
    v321 = v9;
    v336 = v6;
    v294 = v15;
    v307 = v12;
    v271 = v21;
    v282 = v18;
    v252 = v27;
    v261 = v24;
    v237 = v33;
    v244 = v30;
    v231 = v36;
    v38 = (_QWORD *)&unk_25451A000;
    v36 = v231;
    v33 = v237;
    v30 = v244;
    v27 = v252;
    v24 = v261;
    v21 = v271;
    v18 = v282;
    v15 = v294;
    v12 = v307;
    v9 = v321;
    v6 = v336;
    v177 = v176;
    v3 = v352;
    a1 = v369;
    if (v177)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      v375 = 93;
      v178 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v178)
        v179 = v178;
      else
        v179 = v375;
      v180 = &v374[v179];
      v181 = v375 - v179;
      if (v375 - v179 >= 0x12)
        v182 = 18;
      else
        v182 = v375 - v179;
      v183 = v181 - v182;
      if (v183 >= v183 - 1)
        v184 = v183 - 1;
      else
        v184 = v183;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v180[v182], v184);
      v38 = (_QWORD *)&unk_25451A000;
      v36 = v231;
      v33 = v237;
      v30 = v244;
      v27 = v252;
      v24 = v261;
      v21 = v271;
      v18 = v282;
      v15 = v294;
      v12 = v307;
      v9 = v321;
      v6 = v336;
      v3 = v352;
      a1 = v369;
    }
  }
  v39 = v38[320];
  v41 = &unk_25451A000;
  if ((v40 & 1) == 0)
  {
    v353 = v3;
    v370 = a1;
    v322 = v9;
    v337 = v6;
    v295 = v15;
    v308 = v12;
    v272 = v21;
    v283 = v18;
    v253 = v27;
    v262 = v24;
    v238 = v33;
    v245 = v30;
    v227 = v39;
    v232 = v36;
    v41 = (_QWORD *)&unk_25451A000;
    v39 = v227;
    v36 = v232;
    v33 = v238;
    v30 = v245;
    v27 = v253;
    v24 = v262;
    v21 = v272;
    v18 = v283;
    v15 = v295;
    v12 = v308;
    v9 = v322;
    v6 = v337;
    v186 = v185;
    v3 = v353;
    a1 = v370;
    if (v186)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      v375 = 83;
      v187 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v187)
        v188 = v187;
      else
        v188 = v375;
      v189 = &v374[v188];
      v190 = v375 - v188;
      if (v375 - v188 >= 0x12)
        v191 = 18;
      else
        v191 = v375 - v188;
      v192 = v190 - v191;
      if (v192 >= v192 - 1)
        v193 = v192 - 1;
      else
        v193 = v192;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v189[v191], v193);
      v41 = (_QWORD *)&unk_25451A000;
      v39 = v227;
      v36 = v232;
      v33 = v238;
      v30 = v245;
      v27 = v253;
      v24 = v262;
      v21 = v272;
      v18 = v283;
      v15 = v295;
      v12 = v308;
      v9 = v322;
      v6 = v337;
      v3 = v353;
      a1 = v370;
    }
  }
  v42 = v41[322];
  v44 = &unk_25451A000;
  if ((v43 & 1) == 0)
  {
    v354 = v3;
    v371 = a1;
    v323 = v9;
    v338 = v6;
    v296 = v15;
    v309 = v12;
    v273 = v21;
    v284 = v18;
    v254 = v27;
    v263 = v24;
    v239 = v33;
    v246 = v30;
    v228 = v39;
    v233 = v36;
    v224 = v42;
    v44 = (_QWORD *)&unk_25451A000;
    v42 = v224;
    v39 = v228;
    v36 = v233;
    v33 = v239;
    v30 = v246;
    v27 = v254;
    v24 = v263;
    v21 = v273;
    v18 = v284;
    v15 = v296;
    v12 = v309;
    v9 = v323;
    v6 = v338;
    v195 = v194;
    v3 = v354;
    a1 = v371;
    if (v195)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      v375 = 84;
      v196 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v196)
        v197 = v196;
      else
        v197 = v375;
      v198 = &v374[v197];
      v199 = v375 - v197;
      if (v375 - v197 >= 0x12)
        v200 = 18;
      else
        v200 = v375 - v197;
      v201 = v199 - v200;
      if (v201 >= v201 - 1)
        v202 = v201 - 1;
      else
        v202 = v201;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v198[v200], v202);
      v44 = (_QWORD *)&unk_25451A000;
      v42 = v224;
      v39 = v228;
      v36 = v233;
      v33 = v239;
      v30 = v246;
      v27 = v254;
      v24 = v263;
      v21 = v273;
      v18 = v284;
      v15 = v296;
      v12 = v309;
      v9 = v323;
      v6 = v338;
      v3 = v354;
      a1 = v371;
    }
  }
  v45 = v44[324];
  v47 = &unk_25451A000;
  if ((v46 & 1) == 0)
  {
    v355 = v3;
    v372 = a1;
    v324 = v9;
    v339 = v6;
    v297 = v15;
    v310 = v12;
    v274 = v21;
    v285 = v18;
    v255 = v27;
    v264 = v24;
    v240 = v33;
    v247 = v30;
    v229 = v39;
    v234 = v36;
    v222 = v45;
    v225 = v42;
    v47 = (_QWORD *)&unk_25451A000;
    v45 = v222;
    v42 = v225;
    v39 = v229;
    v36 = v234;
    v33 = v240;
    v30 = v247;
    v27 = v255;
    v24 = v264;
    v21 = v274;
    v18 = v285;
    v15 = v297;
    v12 = v310;
    v9 = v324;
    v6 = v339;
    v204 = v203;
    v3 = v355;
    a1 = v372;
    if (v204)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      v375 = 84;
      v205 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v205)
        v206 = v205;
      else
        v206 = v375;
      v207 = &v374[v206];
      v208 = v375 - v206;
      if (v375 - v206 >= 0x12)
        v209 = 18;
      else
        v209 = v375 - v206;
      v210 = v208 - v209;
      if (v210 >= v210 - 1)
        v211 = v210 - 1;
      else
        v211 = v210;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v207[v209], v211);
      v47 = (_QWORD *)&unk_25451A000;
      v45 = v222;
      v42 = v225;
      v39 = v229;
      v36 = v234;
      v33 = v240;
      v30 = v247;
      v27 = v255;
      v24 = v264;
      v21 = v274;
      v18 = v285;
      v15 = v297;
      v12 = v310;
      v9 = v324;
      v6 = v339;
      v3 = v355;
      a1 = v372;
    }
  }
  v48 = v47[326];
  v50 = &unk_25451A000;
  if ((v49 & 1) == 0)
  {
    v356 = v3;
    v373 = a1;
    v325 = v9;
    v340 = v6;
    v298 = v15;
    v311 = v12;
    v275 = v21;
    v286 = v18;
    v256 = v27;
    v265 = v24;
    v241 = v33;
    v248 = v30;
    v230 = v39;
    v235 = v36;
    v223 = v45;
    v226 = v42;
    v221 = v48;
    v48 = v221;
    v45 = v223;
    v42 = v226;
    v39 = v230;
    v36 = v235;
    v33 = v241;
    v30 = v248;
    v27 = v256;
    v24 = v265;
    v21 = v275;
    v18 = v286;
    v15 = v298;
    v12 = v311;
    v9 = v325;
    v6 = v340;
    v213 = v212;
    v3 = v356;
    a1 = v373;
    if (v213)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      v375 = 84;
      v214 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v214)
        v215 = v214;
      else
        v215 = v375;
      v216 = &v374[v215];
      v217 = v375 - v215;
      if (v375 - v215 >= 0x12)
        v218 = 18;
      else
        v218 = v375 - v215;
      v219 = v217 - v218;
      if (v219 >= v219 - 1)
        v220 = v219 - 1;
      else
        v220 = v219;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v216[v218], v220);
      v50 = (_QWORD *)&unk_25451A000;
      v48 = v221;
      v45 = v223;
      v42 = v226;
      v39 = v230;
      v36 = v235;
      v33 = v241;
      v30 = v248;
      v27 = v256;
      v24 = v265;
      v21 = v275;
      v18 = v286;
      v15 = v298;
      v12 = v311;
      v9 = v325;
      v6 = v340;
      v3 = v356;
      a1 = v373;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v36 == a1
      || v39 == a1
      || v42 == a1
      || v45 == a1
      || v48 == a1
      || v50[328] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::ExtSIOp>,mlir::OpTrait::OneResult<mlir::arith::ExtSIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::ExtSIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::ExtSIOp>,mlir::OpTrait::OneOperand<mlir::arith::ExtSIOp>,mlir::OpTrait::OpInvariants<mlir::arith::ExtSIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::ExtSIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::ExtSIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::ExtSIOp>,mlir::CastOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::Elementwise<mlir::arith::ExtSIOp>,mlir::OpTrait::Scalarizable<mlir::arith::ExtSIOp>,mlir::OpTrait::Vectorizable<mlir::arith::ExtSIOp>,mlir::OpTrait::Tensorizable<mlir::arith::ExtSIOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::arith::ExtUIOp::verify((uint64_t **)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::ExtSIOp>,mlir::OpTrait::OneResult<mlir::arith::ExtSIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::ExtSIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::ExtSIOp>,mlir::OpTrait::OneOperand<mlir::arith::ExtSIOp>,mlir::OpTrait::OpInvariants<mlir::arith::ExtSIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::ExtSIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::ExtSIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::ExtSIOp>,mlir::CastOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::Elementwise<mlir::arith::ExtSIOp>,mlir::OpTrait::Scalarizable<mlir::arith::ExtSIOp>,mlir::OpTrait::Vectorizable<mlir::arith::ExtSIOp>,mlir::OpTrait::Tensorizable<mlir::arith::ExtSIOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::Operation *v7;
  mlir::Operation *v8;
  mlir::OpTrait::impl *v10;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (v10 = a1, mlir::arith::ExtSIOp::verifyInvariantsImpl((uint64_t **)&v10))
    && mlir::OpTrait::impl::verifySameOperandsAndResultShape(a1, v6)
    && mlir::impl::verifyCastInterfaceOp(a1, v7))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v8) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.extui", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C0497A8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::ExtUIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>::inferResultRanges(uint64_t a1, uint64_t a2, mlir::intrange *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::ExtUIOp::inferResultRanges(&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtUIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtUIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>::areCastCompatible;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      v15 = 71;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[344], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::ExtUIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::ExtUIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::ExtUIOpGenericAdaptorBase::ExtUIOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::ExtUIOp::fold((uint64_t)&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::ExtSIOp>,mlir::OpTrait::OneResult<mlir::arith::ExtSIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::ExtSIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::ExtSIOp>,mlir::OpTrait::OneOperand<mlir::arith::ExtSIOp>,mlir::OpTrait::OpInvariants<mlir::arith::ExtSIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::ExtSIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::ExtSIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::ExtSIOp>,mlir::CastOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::Elementwise<mlir::arith::ExtSIOp>,mlir::OpTrait::Scalarizable<mlir::arith::ExtSIOp>,mlir::OpTrait::Vectorizable<mlir::arith::ExtSIOp>,mlir::OpTrait::Tensorizable<mlir::arith::ExtSIOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::arith::ExtUIOp::verify((uint64_t **)&v4) != 0;
}

uint64_t mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FPToSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.fptosi", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::FPToSIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C049EB0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::FPToSIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FPToSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FPToSIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FPToSIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>::areCastCompatible;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      v15 = 71;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[344], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::FPToSIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::FPToSIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::FPToSIOpGenericAdaptorBase::FPToSIOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::FPToSIOp::fold(&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::FPToSIOp>,mlir::OpTrait::OneResult<mlir::arith::FPToSIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::FPToSIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::FPToSIOp>,mlir::OpTrait::OneOperand<mlir::arith::FPToSIOp>,mlir::OpTrait::OpInvariants<mlir::arith::FPToSIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::FPToSIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::FPToSIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::FPToSIOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::FPToSIOp>,mlir::CastOpInterface::Trait<mlir::arith::FPToSIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::FPToSIOp>,mlir::OpTrait::Elementwise<mlir::arith::FPToSIOp>,mlir::OpTrait::Scalarizable<mlir::arith::FPToSIOp>,mlir::OpTrait::Vectorizable<mlir::arith::FPToSIOp>,mlir::OpTrait::Tensorizable<mlir::arith::FPToSIOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::FPToSIOp>,mlir::OpTrait::OneResult<mlir::arith::FPToSIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::FPToSIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::FPToSIOp>,mlir::OpTrait::OneOperand<mlir::arith::FPToSIOp>,mlir::OpTrait::OpInvariants<mlir::arith::FPToSIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::FPToSIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::FPToSIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::FPToSIOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::FPToSIOp>,mlir::CastOpInterface::Trait<mlir::arith::FPToSIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::FPToSIOp>,mlir::OpTrait::Elementwise<mlir::arith::FPToSIOp>,mlir::OpTrait::Scalarizable<mlir::arith::FPToSIOp>,mlir::OpTrait::Vectorizable<mlir::arith::FPToSIOp>,mlir::OpTrait::Tensorizable<mlir::arith::FPToSIOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::Operation *v7;
  mlir::Operation *v8;
  mlir::OpTrait::impl *v10;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (v10 = a1, mlir::arith::FPToSIOp::verifyInvariantsImpl((uint64_t **)&v10))
    && mlir::OpTrait::impl::verifySameOperandsAndResultShape(a1, v6)
    && mlir::impl::verifyCastInterfaceOp(a1, v7))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v8) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FPToUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.fptoui", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::FPToUIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C049F78;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::FPToUIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FPToUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FPToUIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FPToUIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>::areCastCompatible;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      v15 = 71;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[344], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::FPToUIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::FPToUIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::FPToUIOpGenericAdaptorBase::FPToUIOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::FPToUIOp::fold(&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::FPToSIOp>,mlir::OpTrait::OneResult<mlir::arith::FPToSIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::FPToSIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::FPToSIOp>,mlir::OpTrait::OneOperand<mlir::arith::FPToSIOp>,mlir::OpTrait::OpInvariants<mlir::arith::FPToSIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::FPToSIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::FPToSIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::FPToSIOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::FPToSIOp>,mlir::CastOpInterface::Trait<mlir::arith::FPToSIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::FPToSIOp>,mlir::OpTrait::Elementwise<mlir::arith::FPToSIOp>,mlir::OpTrait::Scalarizable<mlir::arith::FPToSIOp>,mlir::OpTrait::Vectorizable<mlir::arith::FPToSIOp>,mlir::OpTrait::Tensorizable<mlir::arith::FPToSIOp>>(a1, a2);
}

uint64_t mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FloorDivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.floordivsi", 16, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::FloorDivSIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C0484E8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::FloorDivSIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FloorDivSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinSpatialSplitTransform *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::FloorDivSIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::FloorDivSIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::FloorDivSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.floordivsi";
  v16[1] = 16;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::FloorDivSIOpGenericAdaptorBase::FloorDivSIOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::FloorDivSIOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned __int8 v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned __int8 v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned __int8 v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned __int8 v49;
  _QWORD *v50;
  int v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  const char *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  const char *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  const char *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  const char *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  const char *v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  const char *v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  const char *v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  unint64_t v133;
  unint64_t v134;
  const char *v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  const char *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  unint64_t v151;
  unint64_t v152;
  const char *v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  unint64_t v160;
  unint64_t v161;
  const char *v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  unint64_t v169;
  unint64_t v170;
  const char *v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  unint64_t v178;
  unint64_t v179;
  const char *v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  int v185;
  int v186;
  unint64_t v187;
  unint64_t v188;
  const char *v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  unint64_t v196;
  unint64_t v197;
  const char *v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  int v203;
  int v204;
  unint64_t v205;
  unint64_t v206;
  const char *v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  int v212;
  int v213;
  unint64_t v214;
  unint64_t v215;
  const char *v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  const char *v374;
  unint64_t v375;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v357 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v69 = v68;
    a1 = v357;
    if (v69)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v375 = 83;
      v70 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v70)
        v71 = v70;
      else
        v71 = v375;
      v72 = &v374[v71];
      v73 = v375 - v71;
      if (v375 - v71 >= 0x12)
        v74 = 18;
      else
        v74 = v375 - v71;
      v75 = v73 - v74;
      if (v75 >= v75 - 1)
        v76 = v75 - 1;
      else
        v76 = v75;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v72[v74], v76);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v357;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v341 = v3;
    v358 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v78 = v77;
    v3 = v341;
    a1 = v358;
    if (v78)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v375 = 81;
      v79 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v79)
        v80 = v79;
      else
        v80 = v375;
      v81 = &v374[v80];
      v82 = v375 - v80;
      if (v375 - v80 >= 0x12)
        v83 = 18;
      else
        v83 = v375 - v80;
      v84 = v82 - v83;
      if (v84 >= v84 - 1)
        v85 = v84 - 1;
      else
        v85 = v84;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v81[v83], v85);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v341;
      a1 = v358;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451A000;
  if ((v7 & 1) == 0)
  {
    v342 = v3;
    v359 = a1;
    v326 = v6;
    v8 = (_QWORD *)&unk_25451A000;
    v6 = v326;
    v3 = v342;
    v87 = v86;
    a1 = v359;
    if (v87)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v375 = 104;
      v88 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v88)
        v89 = v88;
      else
        v89 = v375;
      v90 = &v374[v89];
      v91 = v375 - v89;
      if (v375 - v89 >= 0x12)
        v92 = 18;
      else
        v92 = v375 - v89;
      v93 = v91 - v92;
      if (v93 >= v93 - 1)
        v94 = v93 - 1;
      else
        v94 = v93;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v90[v92], v94);
      v8 = (_QWORD *)&unk_25451A000;
      v6 = v326;
      v3 = v342;
      a1 = v359;
    }
  }
  v9 = v8[308];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v343 = v3;
    v360 = a1;
    v312 = v9;
    v327 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v312;
    v6 = v327;
    v96 = v95;
    v3 = v343;
    a1 = v360;
    if (v96)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v375 = 86;
      v97 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v97)
        v98 = v97;
      else
        v98 = v375;
      v99 = &v374[v98];
      v100 = v375 - v98;
      if (v375 - v98 >= 0x12)
        v101 = 18;
      else
        v101 = v375 - v98;
      v102 = v100 - v101;
      if (v102 >= v102 - 1)
        v103 = v102 - 1;
      else
        v103 = v102;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v99[v101], v103);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v312;
      v6 = v327;
      v3 = v343;
      a1 = v360;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v344 = v3;
    v361 = a1;
    v313 = v9;
    v328 = v6;
    v299 = v12;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v299;
    v9 = v313;
    v6 = v328;
    v3 = v344;
    v105 = v104;
    a1 = v361;
    if (v105)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      v375 = 90;
      v106 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v106)
        v107 = v106;
      else
        v107 = v375;
      v108 = &v374[v107];
      v109 = v375 - v107;
      if (v375 - v107 >= 0x12)
        v110 = 18;
      else
        v110 = v375 - v107;
      v111 = v109 - v110;
      if (v111 >= v111 - 1)
        v112 = v111 - 1;
      else
        v112 = v111;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v108[v110], v112);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v299;
      v9 = v313;
      v6 = v328;
      v3 = v344;
      a1 = v361;
    }
  }
  v15 = v14[79];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v345 = v3;
    v362 = a1;
    v314 = v9;
    v329 = v6;
    v287 = v15;
    v300 = v12;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v287;
    v12 = v300;
    v9 = v314;
    v6 = v329;
    v114 = v113;
    v3 = v345;
    a1 = v362;
    if (v114)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v375 = 84;
      v115 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v115)
        v116 = v115;
      else
        v116 = v375;
      v117 = &v374[v116];
      v118 = v375 - v116;
      if (v375 - v116 >= 0x12)
        v119 = 18;
      else
        v119 = v375 - v116;
      v120 = v118 - v119;
      if (v120 >= v120 - 1)
        v121 = v120 - 1;
      else
        v121 = v120;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v117[v119], v121);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v287;
      v12 = v300;
      v9 = v314;
      v6 = v329;
      v3 = v345;
      a1 = v362;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v346 = v3;
    v363 = a1;
    v315 = v9;
    v330 = v6;
    v288 = v15;
    v301 = v12;
    v276 = v18;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v276;
    v15 = v288;
    v12 = v301;
    v9 = v315;
    v6 = v330;
    v123 = v122;
    v3 = v346;
    a1 = v363;
    if (v123)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v375 = 95;
      v124 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v124)
        v125 = v124;
      else
        v125 = v375;
      v126 = &v374[v125];
      v127 = v375 - v125;
      if (v375 - v125 >= 0x12)
        v128 = 18;
      else
        v128 = v375 - v125;
      v129 = v127 - v128;
      if (v129 >= v129 - 1)
        v130 = v129 - 1;
      else
        v130 = v129;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v126[v128], v130);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v276;
      v15 = v288;
      v12 = v301;
      v9 = v315;
      v6 = v330;
      v3 = v346;
      a1 = v363;
    }
  }
  v21 = v20[312];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v347 = v3;
    v364 = a1;
    v316 = v9;
    v331 = v6;
    v289 = v15;
    v302 = v12;
    v266 = v21;
    v277 = v18;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v266;
    v18 = v277;
    v15 = v289;
    v12 = v302;
    v9 = v316;
    v6 = v331;
    v132 = v131;
    v3 = v347;
    a1 = v364;
    if (v132)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v375 = 99;
      v133 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v133)
        v134 = v133;
      else
        v134 = v375;
      v135 = &v374[v134];
      v136 = v375 - v134;
      if (v375 - v134 >= 0x12)
        v137 = 18;
      else
        v137 = v375 - v134;
      v138 = v136 - v137;
      if (v138 >= v138 - 1)
        v139 = v138 - 1;
      else
        v139 = v138;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v135[v137], v139);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v266;
      v18 = v277;
      v15 = v289;
      v12 = v302;
      v9 = v316;
      v6 = v331;
      v3 = v347;
      a1 = v364;
    }
  }
  v24 = v23[314];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v348 = v3;
    v365 = a1;
    v317 = v9;
    v332 = v6;
    v290 = v15;
    v303 = v12;
    v267 = v21;
    v278 = v18;
    v257 = v24;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v257;
    v21 = v267;
    v18 = v278;
    v15 = v290;
    v12 = v303;
    v9 = v317;
    v6 = v332;
    v141 = v140;
    v3 = v348;
    a1 = v365;
    if (v141)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v375 = 93;
      v142 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v142)
        v143 = v142;
      else
        v143 = v375;
      v144 = &v374[v143];
      v145 = v375 - v143;
      if (v375 - v143 >= 0x12)
        v146 = 18;
      else
        v146 = v375 - v143;
      v147 = v145 - v146;
      if (v147 >= v147 - 1)
        v148 = v147 - 1;
      else
        v148 = v147;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v144[v146], v148);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v257;
      v21 = v267;
      v18 = v278;
      v15 = v290;
      v12 = v303;
      v9 = v317;
      v6 = v332;
      v3 = v348;
      a1 = v365;
    }
  }
  v27 = v26[21];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v349 = v3;
    v366 = a1;
    v318 = v9;
    v333 = v6;
    v291 = v15;
    v304 = v12;
    v268 = v21;
    v279 = v18;
    v249 = v27;
    v258 = v24;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v249;
    v24 = v258;
    v21 = v268;
    v18 = v279;
    v15 = v291;
    v12 = v304;
    v9 = v318;
    v6 = v333;
    v150 = v149;
    v3 = v349;
    a1 = v366;
    if (v150)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface::Trait<Empty>]";
      v375 = 92;
      v151 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v151)
        v152 = v151;
      else
        v152 = v375;
      v153 = &v374[v152];
      v154 = v375 - v152;
      if (v375 - v152 >= 0x12)
        v155 = 18;
      else
        v155 = v375 - v152;
      v156 = v154 - v155;
      if (v156 >= v156 - 1)
        v157 = v156 - 1;
      else
        v157 = v156;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v153[v155], v157);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v249;
      v24 = v258;
      v21 = v268;
      v18 = v279;
      v15 = v291;
      v12 = v304;
      v9 = v318;
      v6 = v333;
      v3 = v349;
      a1 = v366;
    }
  }
  v30 = v29[334];
  v32 = &unk_25451A000;
  if ((v31 & 1) == 0)
  {
    v350 = v3;
    v367 = a1;
    v319 = v9;
    v334 = v6;
    v292 = v15;
    v305 = v12;
    v269 = v21;
    v280 = v18;
    v250 = v27;
    v259 = v24;
    v242 = v30;
    v32 = (_QWORD *)&unk_25451A000;
    v30 = v242;
    v27 = v250;
    v24 = v259;
    v21 = v269;
    v18 = v280;
    v15 = v292;
    v12 = v305;
    v9 = v319;
    v6 = v334;
    v159 = v158;
    v3 = v350;
    a1 = v367;
    if (v159)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultType<Empty>]";
      v375 = 97;
      v160 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v160)
        v161 = v160;
      else
        v161 = v375;
      v162 = &v374[v161];
      v163 = v375 - v161;
      if (v375 - v161 >= 0x12)
        v164 = 18;
      else
        v164 = v375 - v161;
      v165 = v163 - v164;
      if (v165 >= v165 - 1)
        v166 = v165 - 1;
      else
        v166 = v165;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v162[v164], v166);
      v32 = (_QWORD *)&unk_25451A000;
      v30 = v242;
      v27 = v250;
      v24 = v259;
      v21 = v269;
      v18 = v280;
      v15 = v292;
      v12 = v305;
      v9 = v319;
      v6 = v334;
      v3 = v350;
      a1 = v367;
    }
  }
  v33 = v32[318];
  v35 = &unk_25451A000;
  if ((v34 & 1) == 0)
  {
    v351 = v3;
    v368 = a1;
    v320 = v9;
    v335 = v6;
    v293 = v15;
    v306 = v12;
    v270 = v21;
    v281 = v18;
    v251 = v27;
    v260 = v24;
    v236 = v33;
    v243 = v30;
    v35 = (_QWORD *)&unk_25451A000;
    v33 = v236;
    v30 = v243;
    v27 = v251;
    v24 = v260;
    v21 = v270;
    v18 = v281;
    v15 = v293;
    v12 = v306;
    v9 = v320;
    v6 = v335;
    v168 = v167;
    v3 = v351;
    a1 = v368;
    if (v168)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      v375 = 93;
      v169 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v169)
        v170 = v169;
      else
        v170 = v375;
      v171 = &v374[v170];
      v172 = v375 - v170;
      if (v375 - v170 >= 0x12)
        v173 = 18;
      else
        v173 = v375 - v170;
      v174 = v172 - v173;
      if (v174 >= v174 - 1)
        v175 = v174 - 1;
      else
        v175 = v174;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v171[v173], v175);
      v35 = (_QWORD *)&unk_25451A000;
      v33 = v236;
      v30 = v243;
      v27 = v251;
      v24 = v260;
      v21 = v270;
      v18 = v281;
      v15 = v293;
      v12 = v306;
      v9 = v320;
      v6 = v335;
      v3 = v351;
      a1 = v368;
    }
  }
  v36 = v35[320];
  v38 = &unk_25451A000;
  if ((v37 & 1) == 0)
  {
    v352 = v3;
    v369 = a1;
    v321 = v9;
    v336 = v6;
    v294 = v15;
    v307 = v12;
    v271 = v21;
    v282 = v18;
    v252 = v27;
    v261 = v24;
    v237 = v33;
    v244 = v30;
    v231 = v36;
    v38 = (_QWORD *)&unk_25451A000;
    v36 = v231;
    v33 = v237;
    v30 = v244;
    v27 = v252;
    v24 = v261;
    v21 = v271;
    v18 = v282;
    v15 = v294;
    v12 = v307;
    v9 = v321;
    v6 = v336;
    v177 = v176;
    v3 = v352;
    a1 = v369;
    if (v177)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      v375 = 83;
      v178 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v178)
        v179 = v178;
      else
        v179 = v375;
      v180 = &v374[v179];
      v181 = v375 - v179;
      if (v375 - v179 >= 0x12)
        v182 = 18;
      else
        v182 = v375 - v179;
      v183 = v181 - v182;
      if (v183 >= v183 - 1)
        v184 = v183 - 1;
      else
        v184 = v183;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v180[v182], v184);
      v38 = (_QWORD *)&unk_25451A000;
      v36 = v231;
      v33 = v237;
      v30 = v244;
      v27 = v252;
      v24 = v261;
      v21 = v271;
      v18 = v282;
      v15 = v294;
      v12 = v307;
      v9 = v321;
      v6 = v336;
      v3 = v352;
      a1 = v369;
    }
  }
  v39 = v38[322];
  v41 = &unk_25451A000;
  if ((v40 & 1) == 0)
  {
    v353 = v3;
    v370 = a1;
    v322 = v9;
    v337 = v6;
    v295 = v15;
    v308 = v12;
    v272 = v21;
    v283 = v18;
    v253 = v27;
    v262 = v24;
    v238 = v33;
    v245 = v30;
    v227 = v39;
    v232 = v36;
    v41 = (_QWORD *)&unk_25451A000;
    v39 = v227;
    v36 = v232;
    v33 = v238;
    v30 = v245;
    v27 = v253;
    v24 = v262;
    v21 = v272;
    v18 = v283;
    v15 = v295;
    v12 = v308;
    v9 = v322;
    v6 = v337;
    v186 = v185;
    v3 = v353;
    a1 = v370;
    if (v186)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      v375 = 84;
      v187 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v187)
        v188 = v187;
      else
        v188 = v375;
      v189 = &v374[v188];
      v190 = v375 - v188;
      if (v375 - v188 >= 0x12)
        v191 = 18;
      else
        v191 = v375 - v188;
      v192 = v190 - v191;
      if (v192 >= v192 - 1)
        v193 = v192 - 1;
      else
        v193 = v192;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v189[v191], v193);
      v41 = (_QWORD *)&unk_25451A000;
      v39 = v227;
      v36 = v232;
      v33 = v238;
      v30 = v245;
      v27 = v253;
      v24 = v262;
      v21 = v272;
      v18 = v283;
      v15 = v295;
      v12 = v308;
      v9 = v322;
      v6 = v337;
      v3 = v353;
      a1 = v370;
    }
  }
  v42 = v41[324];
  v44 = &unk_25451A000;
  if ((v43 & 1) == 0)
  {
    v354 = v3;
    v371 = a1;
    v323 = v9;
    v338 = v6;
    v296 = v15;
    v309 = v12;
    v273 = v21;
    v284 = v18;
    v254 = v27;
    v263 = v24;
    v239 = v33;
    v246 = v30;
    v228 = v39;
    v233 = v36;
    v224 = v42;
    v44 = (_QWORD *)&unk_25451A000;
    v42 = v224;
    v39 = v228;
    v36 = v233;
    v33 = v239;
    v30 = v246;
    v27 = v254;
    v24 = v263;
    v21 = v273;
    v18 = v284;
    v15 = v296;
    v12 = v309;
    v9 = v323;
    v6 = v338;
    v195 = v194;
    v3 = v354;
    a1 = v371;
    if (v195)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      v375 = 84;
      v196 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v196)
        v197 = v196;
      else
        v197 = v375;
      v198 = &v374[v197];
      v199 = v375 - v197;
      if (v375 - v197 >= 0x12)
        v200 = 18;
      else
        v200 = v375 - v197;
      v201 = v199 - v200;
      if (v201 >= v201 - 1)
        v202 = v201 - 1;
      else
        v202 = v201;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v198[v200], v202);
      v44 = (_QWORD *)&unk_25451A000;
      v42 = v224;
      v39 = v228;
      v36 = v233;
      v33 = v239;
      v30 = v246;
      v27 = v254;
      v24 = v263;
      v21 = v273;
      v18 = v284;
      v15 = v296;
      v12 = v309;
      v9 = v323;
      v6 = v338;
      v3 = v354;
      a1 = v371;
    }
  }
  v45 = v44[326];
  v47 = &unk_25451A000;
  if ((v46 & 1) == 0)
  {
    v355 = v3;
    v372 = a1;
    v324 = v9;
    v339 = v6;
    v297 = v15;
    v310 = v12;
    v274 = v21;
    v285 = v18;
    v255 = v27;
    v264 = v24;
    v240 = v33;
    v247 = v30;
    v229 = v39;
    v234 = v36;
    v222 = v45;
    v225 = v42;
    v47 = (_QWORD *)&unk_25451A000;
    v45 = v222;
    v42 = v225;
    v39 = v229;
    v36 = v234;
    v33 = v240;
    v30 = v247;
    v27 = v255;
    v24 = v264;
    v21 = v274;
    v18 = v285;
    v15 = v297;
    v12 = v310;
    v9 = v324;
    v6 = v339;
    v204 = v203;
    v3 = v355;
    a1 = v372;
    if (v204)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      v375 = 84;
      v205 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v205)
        v206 = v205;
      else
        v206 = v375;
      v207 = &v374[v206];
      v208 = v375 - v206;
      if (v375 - v206 >= 0x12)
        v209 = 18;
      else
        v209 = v375 - v206;
      v210 = v208 - v209;
      if (v210 >= v210 - 1)
        v211 = v210 - 1;
      else
        v211 = v210;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v207[v209], v211);
      v47 = (_QWORD *)&unk_25451A000;
      v45 = v222;
      v42 = v225;
      v39 = v229;
      v36 = v234;
      v33 = v240;
      v30 = v247;
      v27 = v255;
      v24 = v264;
      v21 = v274;
      v18 = v285;
      v15 = v297;
      v12 = v310;
      v9 = v324;
      v6 = v339;
      v3 = v355;
      a1 = v372;
    }
  }
  v48 = v47[328];
  v50 = &unk_25451A000;
  if ((v49 & 1) == 0)
  {
    v356 = v3;
    v373 = a1;
    v325 = v9;
    v340 = v6;
    v298 = v15;
    v311 = v12;
    v275 = v21;
    v286 = v18;
    v256 = v27;
    v265 = v24;
    v241 = v33;
    v248 = v30;
    v230 = v39;
    v235 = v36;
    v223 = v45;
    v226 = v42;
    v221 = v48;
    v48 = v221;
    v45 = v223;
    v42 = v226;
    v39 = v230;
    v36 = v235;
    v33 = v241;
    v30 = v248;
    v27 = v256;
    v24 = v265;
    v21 = v275;
    v18 = v286;
    v15 = v298;
    v12 = v311;
    v9 = v325;
    v6 = v340;
    v213 = v212;
    v3 = v356;
    a1 = v373;
    if (v213)
    {
      v374 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v375 = 90;
      v214 = llvm::StringRef::find((uint64_t *)&v374, "DesiredTypeName = ", 0x12uLL, 0);
      if (v375 >= v214)
        v215 = v214;
      else
        v215 = v375;
      v216 = &v374[v215];
      v217 = v375 - v215;
      if (v375 - v215 >= 0x12)
        v218 = 18;
      else
        v218 = v375 - v215;
      v219 = v217 - v218;
      if (v219 >= v219 - 1)
        v220 = v219 - 1;
      else
        v220 = v219;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v216[v218], v220);
      v50 = (_QWORD *)&unk_25451A000;
      v48 = v221;
      v45 = v223;
      v42 = v226;
      v39 = v230;
      v36 = v235;
      v33 = v241;
      v30 = v248;
      v27 = v256;
      v24 = v265;
      v21 = v275;
      v18 = v286;
      v15 = v298;
      v12 = v311;
      v9 = v325;
      v6 = v340;
      v3 = v356;
      a1 = v373;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v36 == a1
      || v39 == a1
      || v42 == a1
      || v45 == a1
      || v48 == a1
      || v50[27] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::IndexCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.index_cast", 16, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::IndexCastOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C048420;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::arith::IndexCastOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::IndexCastOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>::inferResultRanges(uint64_t a1, uint64_t a2, mlir::intrange *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, mlir::intrange *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::IndexCastOp::inferResultRanges((uint64_t)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::IndexCastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::IndexCastOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::IndexCastOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>::areCastCompatible;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      v15 = 71;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[344], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::IndexCastOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::IndexCastOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::IndexCastOpGenericAdaptorBase::IndexCastOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::IndexCastOp::fold(&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::IndexCastOp>,mlir::OpTrait::OneResult<mlir::arith::IndexCastOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::IndexCastOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::IndexCastOp>,mlir::OpTrait::OneOperand<mlir::arith::IndexCastOp>,mlir::OpTrait::OpInvariants<mlir::arith::IndexCastOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::IndexCastOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::IndexCastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::IndexCastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::IndexCastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::IndexCastOp>,mlir::CastOpInterface::Trait<mlir::arith::IndexCastOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::IndexCastOp>,mlir::OpTrait::Elementwise<mlir::arith::IndexCastOp>,mlir::OpTrait::Scalarizable<mlir::arith::IndexCastOp>,mlir::OpTrait::Vectorizable<mlir::arith::IndexCastOp>,mlir::OpTrait::Tensorizable<mlir::arith::IndexCastOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::IndexCastOp>,mlir::OpTrait::OneResult<mlir::arith::IndexCastOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::IndexCastOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::IndexCastOp>,mlir::OpTrait::OneOperand<mlir::arith::IndexCastOp>,mlir::OpTrait::OpInvariants<mlir::arith::IndexCastOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::IndexCastOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::IndexCastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::IndexCastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::IndexCastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::IndexCastOp>,mlir::CastOpInterface::Trait<mlir::arith::IndexCastOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::IndexCastOp>,mlir::OpTrait::Elementwise<mlir::arith::IndexCastOp>,mlir::OpTrait::Scalarizable<mlir::arith::IndexCastOp>,mlir::OpTrait::Vectorizable<mlir::arith::IndexCastOp>,mlir::OpTrait::Tensorizable<mlir::arith::IndexCastOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::Operation *v7;
  mlir::Operation *v8;
  mlir::OpTrait::impl *v10;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (v10 = a1, mlir::arith::IndexCastOp::verifyInvariantsImpl((uint64_t **)&v10))
    && mlir::OpTrait::impl::verifySameOperandsAndResultShape(a1, v6)
    && mlir::impl::verifyCastInterfaceOp(a1, v7))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v8) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::IndexCastUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.index_castui", 18, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::IndexCastUIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C0485B0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::arith::IndexCastUIOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::IndexCastUIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>::inferResultRanges(uint64_t a1, uint64_t a2, mlir::intrange *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, mlir::intrange *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::IndexCastUIOp::inferResultRanges((uint64_t)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::IndexCastUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::IndexCastUIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::IndexCastUIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>::areCastCompatible;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      v15 = 71;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[344], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::IndexCastUIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::IndexCastUIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::IndexCastUIOpGenericAdaptorBase::IndexCastUIOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::IndexCastUIOp::fold(&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::IndexCastOp>,mlir::OpTrait::OneResult<mlir::arith::IndexCastOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::IndexCastOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::IndexCastOp>,mlir::OpTrait::OneOperand<mlir::arith::IndexCastOp>,mlir::OpTrait::OpInvariants<mlir::arith::IndexCastOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::IndexCastOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::IndexCastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::IndexCastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::IndexCastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::IndexCastOp>,mlir::CastOpInterface::Trait<mlir::arith::IndexCastOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::IndexCastOp>,mlir::OpTrait::Elementwise<mlir::arith::IndexCastOp>,mlir::OpTrait::Scalarizable<mlir::arith::IndexCastOp>,mlir::OpTrait::Vectorizable<mlir::arith::IndexCastOp>,mlir::OpTrait::Tensorizable<mlir::arith::IndexCastOp>>(a1, a2);
}

uint64_t mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxNumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.maxnumf", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MaxNumFOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04A4F0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  char v9;
  llvm **v10;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v8 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v9 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v10 = v12;
      else
        v10 = (llvm **)v12[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return v8;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::arith::MaxNumFOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxNumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxNumFOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxNumFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::getFastMathAttrName;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      v15 = 85;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[272], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MaxNumFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MaxNumFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.maxnumf";
  v16[1] = 13;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MaxNumFOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MaxNumFOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v13[48];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::MaxNumFOpGenericAdaptorBase::MaxNumFOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::MaximumFOp::fold((uint64_t)&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 16 == (v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative(a1, a2, a3))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddFOp>,mlir::OpTrait::OneResult<mlir::arith::AddFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::AddFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::Elementwise<mlir::arith::AddFOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddFOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddFOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddFOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.maxsi", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MaxSIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C049870;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::MaxSIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxSIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxSIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinSpatialSplitTransform *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::MaxSIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MaxSIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MaxSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.maxsi";
  v16[1] = 11;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MaxSIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MaxSIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::MaxSIOpGenericAdaptorBase::MaxSIOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::MaxSIOp::fold((uint64_t)&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative((uint64_t)a1, a2, a3))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.maxui", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MaxUIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C049938;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::MaxUIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxUIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxUIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinIrHalH13g *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::MaxUIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MaxUIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MaxUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.maxui";
  v16[1] = 11;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MaxUIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MaxUIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::MaxUIOpGenericAdaptorBase::MaxUIOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::MaxUIOp::fold((uint64_t)&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative((uint64_t)a1, a2, a3))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaximumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.maximumf", 14, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MaximumFOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C048100;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::arith::MaximumFOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaximumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaximumFOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaximumFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::getFastMathAttrName;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      v15 = 85;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[272], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MaximumFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MaximumFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.maximumf";
  v16[1] = 14;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MaximumFOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MaximumFOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v13[48];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::MaximumFOpGenericAdaptorBase::MaximumFOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::MaximumFOp::fold((uint64_t)&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 16 == (v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative(a1, a2, a3))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddFOp>,mlir::OpTrait::OneResult<mlir::arith::AddFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::AddFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::Elementwise<mlir::arith::AddFOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddFOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddFOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddFOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinNumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.minnumf", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MinNumFOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04A5B8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::arith::MinNumFOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinNumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinNumFOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinNumFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::getFastMathAttrName;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      v15 = 85;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[272], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MinNumFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MinNumFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.minnumf";
  v16[1] = 13;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MinNumFOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MinNumFOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v13[48];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::MinNumFOpGenericAdaptorBase::MinNumFOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::MinNumFOp::fold((uint64_t)&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 16 == (v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative(a1, a2, a3))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddFOp>,mlir::OpTrait::OneResult<mlir::arith::AddFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::AddFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::Elementwise<mlir::arith::AddFOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddFOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddFOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddFOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.minsi", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MinSIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C049A00;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::MinSIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinSIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinSIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinSpatialSplitTransform *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::MinSIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MinSIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MinSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.minsi";
  v16[1] = 11;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MinSIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MinSIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::MinSIOpGenericAdaptorBase::MinSIOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::MinSIOp::fold((uint64_t)&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative((uint64_t)a1, a2, a3))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.minui", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MinUIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C049AC8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::MinUIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinUIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinUIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinIrHalH13g *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::MinUIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MinUIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MinUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.minui";
  v16[1] = 11;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MinUIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MinUIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::MinUIOpGenericAdaptorBase::MinUIOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::MinUIOp::fold((uint64_t)&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative((uint64_t)a1, a2, a3))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinimumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.minimumf", 14, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MinimumFOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C0481C8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::arith::MinimumFOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinimumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinimumFOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinimumFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::getFastMathAttrName;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      v15 = 85;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[272], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MinimumFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MinimumFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.minimumf";
  v16[1] = 14;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MinimumFOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MinimumFOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v13[48];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::MinimumFOpGenericAdaptorBase::MinimumFOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::MinimumFOp::fold((uint64_t)&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 16 == (v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative(a1, a2, a3))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddFOp>,mlir::OpTrait::OneResult<mlir::arith::AddFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::AddFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::Elementwise<mlir::arith::AddFOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddFOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddFOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddFOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.mulf", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MulFOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C048F10;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::arith::MulFOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::arith::MulFOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulFOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::getFastMathAttrName;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      v15 = 85;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[272], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MulFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MulFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.mulf";
  v16[1] = 10;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MulFOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MulFOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v13[48];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::MulFOpGenericAdaptorBase::MulFOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::MulFOp::fold((uint64_t)&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 16 == (v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative(a1, a2, a3))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddFOp>,mlir::OpTrait::OneResult<mlir::arith::AddFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::AddFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::Elementwise<mlir::arith::AddFOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddFOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddFOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddFOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.muli", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MulIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C048FD8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::arith::MulIOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::MulIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinIrHalH13g *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::MulIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MulIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MulIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.muli";
  v16[1] = 10;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MulIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MulIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::MulIOpGenericAdaptorBase::MulIOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::MulIOp::fold((uint64_t)&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative((uint64_t)a1, a2, a3))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.mulsi_extended", 20, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MulSIExtendedOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C048740;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::arith::MulSIExtendedOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::MulSIExtendedOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::arith::AddUIExtendedOp::getShapeForUnroll((mlir::arith::AddUIExtendedOp *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  return mlir::arith::MulSIExtendedOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MulSIExtendedOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MulSIExtendedOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::MulSIExtendedOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, &v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.mulsi_extended";
  v16[1] = 20;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getDefaultDialect;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[336], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getAsmResultNames(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::arith::MulSIExtendedOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getDefaultDialect()
{
  return &byte_207AF6795;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  BOOL v11;
  unsigned int *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::MulSIExtendedOpGenericAdaptorBase::MulSIExtendedOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::MulSIExtendedOp::fold((uint64_t)&v13, (uint64_t)v14, a5);
  v10 = *(_DWORD *)(a5 + 8);
  if ((_BYTE)v9)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (v11 && !v10 && mlir::OpTrait::impl::foldCommutative((uint64_t)a2, a3, a4))
    return 1;
  return v9;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned __int8 v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned __int8 v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned __int8 v46;
  _QWORD *v47;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  const char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  const char *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  const char *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  const char *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  const char *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  const char *v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  unint64_t v138;
  unint64_t v139;
  const char *v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  unint64_t v147;
  unint64_t v148;
  const char *v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  const char *v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  int v163;
  int v164;
  unint64_t v165;
  unint64_t v166;
  const char *v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  int v172;
  int v173;
  unint64_t v174;
  unint64_t v175;
  const char *v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  unint64_t v183;
  unint64_t v184;
  const char *v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  const char *v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  unint64_t v201;
  unint64_t v202;
  const char *v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  const char *v344;
  unint64_t v345;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v328 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v65 = v64;
    a1 = v328;
    if (v65)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v345 = 83;
      v66 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v66)
        v67 = v66;
      else
        v67 = v345;
      v68 = &v344[v67];
      v69 = v345 - v67;
      if (v345 - v67 >= 0x12)
        v70 = 18;
      else
        v70 = v345 - v67;
      v71 = v69 - v70;
      if (v71 >= v71 - 1)
        v72 = v71 - 1;
      else
        v72 = v71;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v68[v70], v72);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v328;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v313 = v3;
    v329 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v74 = v73;
    v3 = v313;
    a1 = v329;
    if (v74)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NResults<2>::Impl<Empty>]";
      v345 = 89;
      v75 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v75)
        v76 = v75;
      else
        v76 = v345;
      v77 = &v344[v76];
      v78 = v345 - v76;
      if (v345 - v76 >= 0x12)
        v79 = 18;
      else
        v79 = v345 - v76;
      v80 = v78 - v79;
      if (v80 >= v80 - 1)
        v81 = v80 - 1;
      else
        v81 = v80;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NResults<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NResults<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v77[v79], v81);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v313;
      a1 = v329;
    }
  }
  v6 = v5[338];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v314 = v3;
    v330 = a1;
    v299 = v6;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v299;
    v3 = v314;
    v83 = v82;
    a1 = v330;
    if (v83)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v345 = 86;
      v84 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v84)
        v85 = v84;
      else
        v85 = v345;
      v86 = &v344[v85];
      v87 = v345 - v85;
      if (v345 - v85 >= 0x12)
        v88 = 18;
      else
        v88 = v345 - v85;
      v89 = v87 - v88;
      if (v89 >= v89 - 1)
        v90 = v89 - 1;
      else
        v90 = v89;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v86[v88], v90);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v299;
      v3 = v314;
      a1 = v330;
    }
  }
  v9 = v8[419];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v315 = v3;
    v331 = a1;
    v286 = v9;
    v300 = v6;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v286;
    v6 = v300;
    v92 = v91;
    v3 = v315;
    a1 = v331;
    if (v92)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      v345 = 90;
      v93 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v93)
        v94 = v93;
      else
        v94 = v345;
      v95 = &v344[v94];
      v96 = v345 - v94;
      if (v345 - v94 >= 0x12)
        v97 = 18;
      else
        v97 = v345 - v94;
      v98 = v96 - v97;
      if (v98 >= v98 - 1)
        v99 = v98 - 1;
      else
        v99 = v98;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v95[v97], v99);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v286;
      v6 = v300;
      v3 = v315;
      a1 = v331;
    }
  }
  v12 = v11[79];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v316 = v3;
    v332 = a1;
    v287 = v9;
    v301 = v6;
    v274 = v12;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v274;
    v9 = v287;
    v6 = v301;
    v3 = v316;
    v101 = v100;
    a1 = v332;
    if (v101)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v345 = 84;
      v102 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v102)
        v103 = v102;
      else
        v103 = v345;
      v104 = &v344[v103];
      v105 = v345 - v103;
      if (v345 - v103 >= 0x12)
        v106 = 18;
      else
        v106 = v345 - v103;
      v107 = v105 - v106;
      if (v107 >= v107 - 1)
        v108 = v107 - 1;
      else
        v108 = v107;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v104[v106], v108);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v274;
      v9 = v287;
      v6 = v301;
      v3 = v316;
      a1 = v332;
    }
  }
  v15 = v14[423];
  v17 = &unk_25451A000;
  if ((v16 & 1) == 0)
  {
    v317 = v3;
    v333 = a1;
    v288 = v9;
    v302 = v6;
    v275 = v12;
    v263 = v15;
    v17 = (_QWORD *)&unk_25451A000;
    v15 = v263;
    v12 = v275;
    v9 = v288;
    v6 = v302;
    v3 = v317;
    v110 = v109;
    a1 = v333;
    if (v110)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v345 = 95;
      v111 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v111)
        v112 = v111;
      else
        v112 = v345;
      v113 = &v344[v112];
      v114 = v345 - v112;
      if (v345 - v112 >= 0x12)
        v115 = 18;
      else
        v115 = v345 - v112;
      v116 = v114 - v115;
      if (v116 >= v116 - 1)
        v117 = v116 - 1;
      else
        v117 = v116;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v113[v115], v117);
      v17 = (_QWORD *)&unk_25451A000;
      v15 = v263;
      v12 = v275;
      v9 = v288;
      v6 = v302;
      v3 = v317;
      a1 = v333;
    }
  }
  v18 = v17[312];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v318 = v3;
    v334 = a1;
    v289 = v9;
    v303 = v6;
    v276 = v12;
    v253 = v18;
    v264 = v15;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v253;
    v15 = v264;
    v12 = v276;
    v9 = v289;
    v6 = v303;
    v3 = v318;
    v119 = v118;
    a1 = v334;
    if (v119)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v345 = 99;
      v120 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v120)
        v121 = v120;
      else
        v121 = v345;
      v122 = &v344[v121];
      v123 = v345 - v121;
      if (v345 - v121 >= 0x12)
        v124 = 18;
      else
        v124 = v345 - v121;
      v125 = v123 - v124;
      if (v125 >= v125 - 1)
        v126 = v125 - 1;
      else
        v126 = v125;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v122[v124], v126);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v253;
      v15 = v264;
      v12 = v276;
      v9 = v289;
      v6 = v303;
      v3 = v318;
      a1 = v334;
    }
  }
  v21 = v20[314];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v319 = v3;
    v335 = a1;
    v290 = v9;
    v304 = v6;
    v277 = v12;
    v254 = v18;
    v265 = v15;
    v244 = v21;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v244;
    v18 = v254;
    v15 = v265;
    v12 = v277;
    v9 = v290;
    v6 = v304;
    v3 = v319;
    v128 = v127;
    a1 = v335;
    if (v128)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v345 = 93;
      v129 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v129)
        v130 = v129;
      else
        v130 = v345;
      v131 = &v344[v130];
      v132 = v345 - v130;
      if (v345 - v130 >= 0x12)
        v133 = 18;
      else
        v133 = v345 - v130;
      v134 = v132 - v133;
      if (v134 >= v134 - 1)
        v135 = v134 - 1;
      else
        v135 = v134;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v131[v133], v135);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v244;
      v18 = v254;
      v15 = v265;
      v12 = v277;
      v9 = v290;
      v6 = v304;
      v3 = v319;
      a1 = v335;
    }
  }
  v24 = v23[21];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v320 = v3;
    v336 = a1;
    v291 = v9;
    v305 = v6;
    v278 = v12;
    v255 = v18;
    v266 = v15;
    v236 = v24;
    v245 = v21;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v236;
    v21 = v245;
    v18 = v255;
    v15 = v266;
    v12 = v278;
    v9 = v291;
    v6 = v305;
    v3 = v320;
    v137 = v136;
    a1 = v336;
    if (v137)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsCommutative<Empty>]";
      v345 = 85;
      v138 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v138)
        v139 = v138;
      else
        v139 = v345;
      v140 = &v344[v139];
      v141 = v345 - v139;
      if (v345 - v139 >= 0x12)
        v142 = 18;
      else
        v142 = v345 - v139;
      v143 = v141 - v142;
      if (v143 >= v143 - 1)
        v144 = v143 - 1;
      else
        v144 = v143;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsCommutative<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsCommutative>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v140[v142], v144);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v236;
      v21 = v245;
      v18 = v255;
      v15 = v266;
      v12 = v278;
      v9 = v291;
      v6 = v305;
      v3 = v320;
      a1 = v336;
    }
  }
  v27 = v26[141];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v321 = v3;
    v337 = a1;
    v292 = v9;
    v306 = v6;
    v279 = v12;
    v256 = v18;
    v267 = v15;
    v237 = v24;
    v246 = v21;
    v229 = v27;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v229;
    v24 = v237;
    v21 = v246;
    v18 = v256;
    v15 = v267;
    v12 = v279;
    v9 = v292;
    v6 = v306;
    v3 = v321;
    v146 = v145;
    a1 = v337;
    if (v146)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      v345 = 93;
      v147 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v147)
        v148 = v147;
      else
        v148 = v345;
      v149 = &v344[v148];
      v150 = v345 - v148;
      if (v345 - v148 >= 0x12)
        v151 = 18;
      else
        v151 = v345 - v148;
      v152 = v150 - v151;
      if (v152 >= v152 - 1)
        v153 = v152 - 1;
      else
        v153 = v152;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v149[v151], v153);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v229;
      v24 = v237;
      v21 = v246;
      v18 = v256;
      v15 = v267;
      v12 = v279;
      v9 = v292;
      v6 = v306;
      v3 = v321;
      a1 = v337;
    }
  }
  v30 = v29[320];
  v32 = &unk_25451A000;
  if ((v31 & 1) == 0)
  {
    v322 = v3;
    v338 = a1;
    v293 = v9;
    v307 = v6;
    v280 = v12;
    v257 = v18;
    v268 = v15;
    v238 = v24;
    v247 = v21;
    v223 = v30;
    v230 = v27;
    v32 = (_QWORD *)&unk_25451A000;
    v30 = v223;
    v27 = v230;
    v24 = v238;
    v21 = v247;
    v18 = v257;
    v15 = v268;
    v12 = v280;
    v9 = v293;
    v6 = v307;
    v3 = v322;
    v155 = v154;
    a1 = v338;
    if (v155)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      v345 = 83;
      v156 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v156)
        v157 = v156;
      else
        v157 = v345;
      v158 = &v344[v157];
      v159 = v345 - v157;
      if (v345 - v157 >= 0x12)
        v160 = 18;
      else
        v160 = v345 - v157;
      v161 = v159 - v160;
      if (v161 >= v161 - 1)
        v162 = v161 - 1;
      else
        v162 = v161;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v158[v160], v162);
      v32 = (_QWORD *)&unk_25451A000;
      v30 = v223;
      v27 = v230;
      v24 = v238;
      v21 = v247;
      v18 = v257;
      v15 = v268;
      v12 = v280;
      v9 = v293;
      v6 = v307;
      v3 = v322;
      a1 = v338;
    }
  }
  v33 = v32[322];
  v35 = &unk_25451A000;
  if ((v34 & 1) == 0)
  {
    v323 = v3;
    v339 = a1;
    v294 = v9;
    v308 = v6;
    v281 = v12;
    v258 = v18;
    v269 = v15;
    v239 = v24;
    v248 = v21;
    v224 = v30;
    v231 = v27;
    v218 = v33;
    v35 = (_QWORD *)&unk_25451A000;
    v33 = v218;
    v30 = v224;
    v27 = v231;
    v24 = v239;
    v21 = v248;
    v18 = v258;
    v15 = v269;
    v12 = v281;
    v9 = v294;
    v6 = v308;
    v3 = v323;
    v164 = v163;
    a1 = v339;
    if (v164)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      v345 = 84;
      v165 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v165)
        v166 = v165;
      else
        v166 = v345;
      v167 = &v344[v166];
      v168 = v345 - v166;
      if (v345 - v166 >= 0x12)
        v169 = 18;
      else
        v169 = v345 - v166;
      v170 = v168 - v169;
      if (v170 >= v170 - 1)
        v171 = v170 - 1;
      else
        v171 = v170;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v167[v169], v171);
      v35 = (_QWORD *)&unk_25451A000;
      v33 = v218;
      v30 = v224;
      v27 = v231;
      v24 = v239;
      v21 = v248;
      v18 = v258;
      v15 = v269;
      v12 = v281;
      v9 = v294;
      v6 = v308;
      v3 = v323;
      a1 = v339;
    }
  }
  v36 = v35[324];
  v38 = &unk_25451A000;
  if ((v37 & 1) == 0)
  {
    v324 = v3;
    v340 = a1;
    v295 = v9;
    v309 = v6;
    v282 = v12;
    v259 = v18;
    v270 = v15;
    v240 = v24;
    v249 = v21;
    v225 = v30;
    v232 = v27;
    v214 = v36;
    v219 = v33;
    v38 = (_QWORD *)&unk_25451A000;
    v36 = v214;
    v33 = v219;
    v30 = v225;
    v27 = v232;
    v24 = v240;
    v21 = v249;
    v18 = v259;
    v15 = v270;
    v12 = v282;
    v9 = v295;
    v6 = v309;
    v3 = v324;
    v173 = v172;
    a1 = v340;
    if (v173)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      v345 = 84;
      v174 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v174)
        v175 = v174;
      else
        v175 = v345;
      v176 = &v344[v175];
      v177 = v345 - v175;
      if (v345 - v175 >= 0x12)
        v178 = 18;
      else
        v178 = v345 - v175;
      v179 = v177 - v178;
      if (v179 >= v179 - 1)
        v180 = v179 - 1;
      else
        v180 = v179;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v176[v178], v180);
      v38 = (_QWORD *)&unk_25451A000;
      v36 = v214;
      v33 = v219;
      v30 = v225;
      v27 = v232;
      v24 = v240;
      v21 = v249;
      v18 = v259;
      v15 = v270;
      v12 = v282;
      v9 = v295;
      v6 = v309;
      v3 = v324;
      a1 = v340;
    }
  }
  v39 = v38[326];
  v41 = &unk_25451A000;
  if ((v40 & 1) == 0)
  {
    v325 = v3;
    v341 = a1;
    v296 = v9;
    v310 = v6;
    v283 = v12;
    v260 = v18;
    v271 = v15;
    v241 = v24;
    v250 = v21;
    v226 = v30;
    v233 = v27;
    v215 = v36;
    v220 = v33;
    v211 = v39;
    v41 = (_QWORD *)&unk_25451A000;
    v39 = v211;
    v36 = v215;
    v33 = v220;
    v30 = v226;
    v27 = v233;
    v24 = v241;
    v21 = v250;
    v18 = v260;
    v15 = v271;
    v12 = v283;
    v9 = v296;
    v6 = v310;
    v3 = v325;
    v182 = v181;
    a1 = v341;
    if (v182)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      v345 = 84;
      v183 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v183)
        v184 = v183;
      else
        v184 = v345;
      v185 = &v344[v184];
      v186 = v345 - v184;
      if (v345 - v184 >= 0x12)
        v187 = 18;
      else
        v187 = v345 - v184;
      v188 = v186 - v187;
      if (v188 >= v188 - 1)
        v189 = v188 - 1;
      else
        v189 = v188;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v185[v187], v189);
      v41 = (_QWORD *)&unk_25451A000;
      v39 = v211;
      v36 = v215;
      v33 = v220;
      v30 = v226;
      v27 = v233;
      v24 = v241;
      v21 = v250;
      v18 = v260;
      v15 = v271;
      v12 = v283;
      v9 = v296;
      v6 = v310;
      v3 = v325;
      a1 = v341;
    }
  }
  v42 = v41[328];
  v44 = &unk_25451A000;
  if ((v43 & 1) == 0)
  {
    v326 = v3;
    v342 = a1;
    v297 = v9;
    v311 = v6;
    v284 = v12;
    v261 = v18;
    v272 = v15;
    v242 = v24;
    v251 = v21;
    v227 = v30;
    v234 = v27;
    v216 = v36;
    v221 = v33;
    v209 = v42;
    v212 = v39;
    v44 = (_QWORD *)&unk_25451A000;
    v42 = v209;
    v39 = v212;
    v36 = v216;
    v33 = v221;
    v30 = v227;
    v27 = v234;
    v24 = v242;
    v21 = v251;
    v18 = v261;
    v15 = v272;
    v12 = v284;
    v9 = v297;
    v6 = v311;
    v3 = v326;
    v191 = v190;
    a1 = v342;
    if (v191)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v345 = 90;
      v192 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v192)
        v193 = v192;
      else
        v193 = v345;
      v194 = &v344[v193];
      v195 = v345 - v193;
      if (v345 - v193 >= 0x12)
        v196 = 18;
      else
        v196 = v345 - v193;
      v197 = v195 - v196;
      if (v197 >= v197 - 1)
        v198 = v197 - 1;
      else
        v198 = v197;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v194[v196], v198);
      v44 = (_QWORD *)&unk_25451A000;
      v42 = v209;
      v39 = v212;
      v36 = v216;
      v33 = v221;
      v30 = v227;
      v27 = v234;
      v24 = v242;
      v21 = v251;
      v18 = v261;
      v15 = v272;
      v12 = v284;
      v9 = v297;
      v6 = v311;
      v3 = v326;
      a1 = v342;
    }
  }
  v45 = v44[27];
  v47 = &unk_25451A000;
  if ((v46 & 1) == 0)
  {
    v327 = v3;
    v343 = a1;
    v298 = v9;
    v312 = v6;
    v285 = v12;
    v262 = v18;
    v273 = v15;
    v243 = v24;
    v252 = v21;
    v228 = v30;
    v235 = v27;
    v217 = v36;
    v222 = v33;
    v210 = v42;
    v213 = v39;
    v208 = v45;
    v47 = (_QWORD *)&unk_25451A000;
    v45 = v208;
    v42 = v210;
    v39 = v213;
    v36 = v217;
    v33 = v222;
    v30 = v228;
    v27 = v235;
    v24 = v243;
    v21 = v252;
    v18 = v262;
    v15 = v273;
    v12 = v285;
    v9 = v298;
    v6 = v312;
    v3 = v327;
    v200 = v199;
    a1 = v343;
    if (v200)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v345 = 86;
      v201 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v201)
        v202 = v201;
      else
        v202 = v345;
      v203 = &v344[v202];
      v204 = v345 - v202;
      if (v345 - v202 >= 0x12)
        v205 = 18;
      else
        v205 = v345 - v202;
      v206 = v204 - v205;
      if (v206 >= v206 - 1)
        v207 = v206 - 1;
      else
        v207 = v206;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v203[v205], v207);
      v47 = (_QWORD *)&unk_25451A000;
      v45 = v208;
      v42 = v210;
      v39 = v213;
      v36 = v217;
      v33 = v222;
      v30 = v228;
      v27 = v235;
      v24 = v243;
      v21 = v252;
      v18 = v262;
      v15 = v273;
      v12 = v285;
      v9 = v298;
      v6 = v312;
      v3 = v327;
      a1 = v343;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v36 == a1
      || v39 == a1
      || v42 == a1
      || v45 == a1
      || v47[340] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::MulSIExtendedOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::NResults<2u>::Impl<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::OpInvariants<mlir::arith::MulSIExtendedOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::MulSIExtendedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::IsCommutative<mlir::arith::MulSIExtendedOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Elementwise<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Scalarizable<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Vectorizable<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Tensorizable<mlir::arith::MulSIExtendedOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpAsmOpInterface::Trait<mlir::arith::MulSIExtendedOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::NResults<2u>::Impl<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::OpInvariants<mlir::arith::MulSIExtendedOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::MulSIExtendedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::IsCommutative<mlir::arith::MulSIExtendedOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Elementwise<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Scalarizable<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Vectorizable<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Tensorizable<mlir::arith::MulSIExtendedOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpAsmOpInterface::Trait<mlir::arith::MulSIExtendedOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyNResults(a1, (mlir::Operation *)2)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (v6 = a1, mlir::arith::MulSIExtendedOp::verifyInvariantsImpl((uint64_t **)&v6)))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v4) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.mului_extended", 20, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MulUIExtendedOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C048808;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::arith::MulUIExtendedOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::MulUIExtendedOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::arith::AddUIExtendedOp::getShapeForUnroll((mlir::arith::AddUIExtendedOp *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  return mlir::arith::MulSIExtendedOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MulUIExtendedOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MulUIExtendedOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::MulSIExtendedOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, &v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.mului_extended";
  v16[1] = 20;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getDefaultDialect;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[336], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getAsmResultNames(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::arith::MulSIExtendedOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getDefaultDialect()
{
  return &byte_207AF6795;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  BOOL v11;
  unsigned int *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::MulUIExtendedOpGenericAdaptorBase::MulUIExtendedOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::MulUIExtendedOp::fold((uint64_t)&v13, (uint64_t)v14, a5);
  v10 = *(_DWORD *)(a5 + 8);
  if ((_BYTE)v9)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (v11 && !v10 && mlir::OpTrait::impl::foldCommutative((uint64_t)a2, a3, a4))
    return 1;
  return v9;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::MulSIExtendedOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::NResults<2u>::Impl<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::OpInvariants<mlir::arith::MulSIExtendedOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::MulSIExtendedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::IsCommutative<mlir::arith::MulSIExtendedOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Elementwise<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Scalarizable<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Vectorizable<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Tensorizable<mlir::arith::MulSIExtendedOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpAsmOpInterface::Trait<mlir::arith::MulSIExtendedOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::NegFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.negf", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::NegFOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C0490A0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::NegFOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::getFastMathAttrName;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      v15 = 85;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[272], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::NegFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::NegFOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::NegFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::NegFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::NegFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.negf";
  v16[1] = 10;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[48];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::NegFOpGenericAdaptorBase::NegFOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::NegFOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  unsigned __int8 v35;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  const char *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  const char *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  const char *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  const char *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  const char *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  unint64_t v108;
  unint64_t v109;
  const char *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  const char *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  const char *v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  const char *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  const char *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  unint64_t v153;
  unint64_t v154;
  const char *v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  const char *v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  unint64_t v172;
  unint64_t v173;
  const char *v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  int v181;
  unint64_t v182;
  unint64_t v183;
  const char *v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  const char *v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  unint64_t v202;
  unint64_t v203;
  const char *v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  int v209;
  int v210;
  unint64_t v211;
  unint64_t v212;
  const char *v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  const char *v385;
  unint64_t v386;

  if ((v1 & 1) == 0)
  {
    v367 = a1;
    a1 = v367;
    if (v54)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v386 = 83;
      v55 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v55)
        v56 = v55;
      else
        v56 = v386;
      v57 = &v385[v56];
      v58 = v386 - v56;
      if (v386 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v386 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      a1 = v367;
    }
  }
  v2 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v350 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id;
    v368 = a1;
    v2 = v350;
    a1 = v368;
    if (v62)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v386 = 81;
      v63 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v63)
        v64 = v63;
      else
        v64 = v386;
      v65 = &v385[v64];
      v66 = v386 - v64;
      if (v386 - v64 >= 0x12)
        v67 = 18;
      else
        v67 = v386 - v64;
      v68 = v66 - v67;
      if (v68 >= v68 - 1)
        v69 = v68 - 1;
      else
        v69 = v68;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v65[v67], v69);
      v2 = v350;
      a1 = v368;
    }
  }
  v4 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v351 = v2;
    v369 = a1;
    v334 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id;
    v4 = v334;
    v2 = v351;
    v71 = v70;
    a1 = v369;
    if (v71)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v386 = 104;
      v72 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v72)
        v73 = v72;
      else
        v73 = v386;
      v74 = &v385[v73];
      v75 = v386 - v73;
      if (v386 - v73 >= 0x12)
        v76 = 18;
      else
        v76 = v386 - v73;
      v77 = v75 - v76;
      if (v77 >= v77 - 1)
        v78 = v77 - 1;
      else
        v78 = v77;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v74[v76], v78);
      v4 = v334;
      v2 = v351;
      a1 = v369;
    }
  }
  v6 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v352 = v2;
    v370 = a1;
    v319 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
    v335 = v4;
    v6 = v319;
    v4 = v335;
    v80 = v79;
    v2 = v352;
    a1 = v370;
    if (v80)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v386 = 86;
      v81 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v81)
        v82 = v81;
      else
        v82 = v386;
      v83 = &v385[v82];
      v84 = v386 - v82;
      if (v386 - v82 >= 0x12)
        v85 = 18;
      else
        v85 = v386 - v82;
      v86 = v84 - v85;
      if (v86 >= v86 - 1)
        v87 = v86 - 1;
      else
        v87 = v86;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v83[v85], v87);
      v6 = v319;
      v4 = v335;
      v2 = v352;
      a1 = v370;
    }
  }
  v8 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v9 & 1) == 0)
  {
    v353 = v2;
    v371 = a1;
    v320 = v6;
    v336 = v4;
    v305 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id;
    v8 = v305;
    v6 = v320;
    v4 = v336;
    v2 = v353;
    v89 = v88;
    a1 = v371;
    if (v89)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v386 = 82;
      v90 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v90)
        v91 = v90;
      else
        v91 = v386;
      v92 = &v385[v91];
      v93 = v386 - v91;
      if (v386 - v91 >= 0x12)
        v94 = 18;
      else
        v94 = v386 - v91;
      v95 = v93 - v94;
      if (v95 >= v95 - 1)
        v96 = v95 - 1;
      else
        v96 = v95;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v92[v94], v96);
      v8 = v305;
      v6 = v320;
      v4 = v336;
      v2 = v353;
      a1 = v371;
    }
  }
  v10 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v11 & 1) == 0)
  {
    v354 = v2;
    v372 = a1;
    v321 = v6;
    v337 = v4;
    v306 = v8;
    v292 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id;
    v10 = v292;
    v8 = v306;
    v6 = v321;
    v4 = v337;
    v2 = v354;
    v98 = v97;
    a1 = v372;
    if (v98)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v386 = 84;
      v99 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v99)
        v100 = v99;
      else
        v100 = v386;
      v101 = &v385[v100];
      v102 = v386 - v100;
      if (v386 - v100 >= 0x12)
        v103 = 18;
      else
        v103 = v386 - v100;
      v104 = v102 - v103;
      if (v104 >= v104 - 1)
        v105 = v104 - 1;
      else
        v105 = v104;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v101[v103], v105);
      v10 = v292;
      v8 = v306;
      v6 = v321;
      v4 = v337;
      v2 = v354;
      a1 = v372;
    }
  }
  v12 = mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v355 = v2;
    v373 = a1;
    v322 = v6;
    v338 = v4;
    v307 = v8;
    v280 = mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id;
    v293 = v10;
    v12 = v280;
    v10 = v293;
    v8 = v307;
    v6 = v322;
    v4 = v338;
    v2 = v355;
    v107 = v106;
    a1 = v373;
    if (v107)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v386 = 89;
      v108 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v108)
        v109 = v108;
      else
        v109 = v386;
      v110 = &v385[v109];
      v111 = v386 - v109;
      if (v386 - v109 >= 0x12)
        v112 = 18;
      else
        v112 = v386 - v109;
      v113 = v111 - v112;
      if (v113 >= v113 - 1)
        v114 = v113 - 1;
      else
        v114 = v113;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v110[v112], v114);
      v12 = v280;
      v10 = v293;
      v8 = v307;
      v6 = v322;
      v4 = v338;
      v2 = v355;
      a1 = v373;
    }
  }
  v14 = mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v15 & 1) == 0)
  {
    v356 = v2;
    v374 = a1;
    v323 = v6;
    v339 = v4;
    v308 = v8;
    v281 = v12;
    v294 = v10;
    v269 = mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v14 = v269;
    v12 = v281;
    v10 = v294;
    v8 = v308;
    v6 = v323;
    v4 = v339;
    v2 = v356;
    v116 = v115;
    a1 = v374;
    if (v116)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface::Trait<Empty>]";
      v386 = 99;
      v117 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v117)
        v118 = v117;
      else
        v118 = v386;
      v119 = &v385[v118];
      v120 = v386 - v118;
      if (v386 - v118 >= 0x12)
        v121 = 18;
      else
        v121 = v386 - v118;
      v122 = v120 - v121;
      if (v122 >= v122 - 1)
        v123 = v122 - 1;
      else
        v123 = v122;
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::arith::ArithFastMathInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v119[v121], v123);
      v14 = v269;
      v12 = v281;
      v10 = v294;
      v8 = v308;
      v6 = v323;
      v4 = v339;
      v2 = v356;
      a1 = v374;
    }
  }
  v16 = mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::arith::ArithFastMathInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v17 & 1) == 0)
  {
    v357 = v2;
    v375 = a1;
    v324 = v6;
    v340 = v4;
    v309 = v8;
    v282 = v12;
    v295 = v10;
    v259 = mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::arith::ArithFastMathInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v270 = v14;
    v16 = v259;
    v14 = v270;
    v12 = v282;
    v10 = v295;
    v8 = v309;
    v6 = v324;
    v4 = v340;
    v2 = v357;
    v125 = v124;
    a1 = v375;
    if (v125)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v386 = 95;
      v126 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v126)
        v127 = v126;
      else
        v127 = v386;
      v128 = &v385[v127];
      v129 = v386 - v127;
      if (v386 - v127 >= 0x12)
        v130 = 18;
      else
        v130 = v386 - v127;
      v131 = v129 - v130;
      if (v131 >= v131 - 1)
        v132 = v131 - 1;
      else
        v132 = v131;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v128[v130], v132);
      v16 = v259;
      v14 = v270;
      v12 = v282;
      v10 = v295;
      v8 = v309;
      v6 = v324;
      v4 = v340;
      v2 = v357;
      a1 = v375;
    }
  }
  v18 = mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v358 = v2;
    v376 = a1;
    v325 = v6;
    v341 = v4;
    v310 = v8;
    v283 = v12;
    v296 = v10;
    v260 = v16;
    v271 = v14;
    v250 = mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v18 = v250;
    v16 = v260;
    v14 = v271;
    v12 = v283;
    v10 = v296;
    v8 = v310;
    v6 = v325;
    v4 = v341;
    v2 = v358;
    v134 = v133;
    a1 = v376;
    if (v134)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v386 = 99;
      v135 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v135)
        v136 = v135;
      else
        v136 = v386;
      v137 = &v385[v136];
      v138 = v386 - v136;
      if (v386 - v136 >= 0x12)
        v139 = 18;
      else
        v139 = v386 - v136;
      v140 = v138 - v139;
      if (v140 >= v140 - 1)
        v141 = v140 - 1;
      else
        v141 = v140;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v137[v139], v141);
      v18 = v250;
      v16 = v260;
      v14 = v271;
      v12 = v283;
      v10 = v296;
      v8 = v310;
      v6 = v325;
      v4 = v341;
      v2 = v358;
      a1 = v376;
    }
  }
  v20 = mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v21 & 1) == 0)
  {
    v359 = v2;
    v377 = a1;
    v326 = v6;
    v342 = v4;
    v311 = v8;
    v284 = v12;
    v297 = v10;
    v261 = v16;
    v272 = v14;
    v242 = mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v251 = v18;
    v20 = v242;
    v18 = v251;
    v16 = v261;
    v14 = v272;
    v12 = v284;
    v10 = v297;
    v8 = v311;
    v6 = v326;
    v4 = v342;
    v2 = v359;
    v143 = v142;
    a1 = v377;
    if (v143)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v386 = 93;
      v144 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v144)
        v145 = v144;
      else
        v145 = v386;
      v146 = &v385[v145];
      v147 = v386 - v145;
      if (v386 - v145 >= 0x12)
        v148 = 18;
      else
        v148 = v386 - v145;
      v149 = v147 - v148;
      if (v149 >= v149 - 1)
        v150 = v149 - 1;
      else
        v150 = v149;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v146[v148], v150);
      v20 = v242;
      v18 = v251;
      v16 = v261;
      v14 = v272;
      v12 = v284;
      v10 = v297;
      v8 = v311;
      v6 = v326;
      v4 = v342;
      v2 = v359;
      a1 = v377;
    }
  }
  v22 = mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v23 & 1) == 0)
  {
    v360 = v2;
    v378 = a1;
    v327 = v6;
    v343 = v4;
    v312 = v8;
    v285 = v12;
    v298 = v10;
    v262 = v16;
    v273 = v14;
    v243 = v20;
    v252 = v18;
    v235 = mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v22 = v235;
    v20 = v243;
    v18 = v252;
    v16 = v262;
    v14 = v273;
    v12 = v285;
    v10 = v298;
    v8 = v312;
    v6 = v327;
    v4 = v343;
    v2 = v360;
    v152 = v151;
    a1 = v378;
    if (v152)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultType<Empty>]";
      v386 = 97;
      v153 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v153)
        v154 = v153;
      else
        v154 = v386;
      v155 = &v385[v154];
      v156 = v386 - v154;
      if (v386 - v154 >= 0x12)
        v157 = 18;
      else
        v157 = v386 - v154;
      v158 = v156 - v157;
      if (v158 >= v158 - 1)
        v159 = v158 - 1;
      else
        v159 = v158;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v155[v157], v159);
      v22 = v235;
      v20 = v243;
      v18 = v252;
      v16 = v262;
      v14 = v273;
      v12 = v285;
      v10 = v298;
      v8 = v312;
      v6 = v327;
      v4 = v343;
      v2 = v360;
      a1 = v378;
    }
  }
  v24 = mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v361 = v2;
    v379 = a1;
    v328 = v6;
    v344 = v4;
    v313 = v8;
    v286 = v12;
    v299 = v10;
    v263 = v16;
    v274 = v14;
    v244 = v20;
    v253 = v18;
    v229 = mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id;
    v236 = v22;
    v24 = v229;
    v22 = v236;
    v20 = v244;
    v18 = v253;
    v16 = v263;
    v14 = v274;
    v12 = v286;
    v10 = v299;
    v8 = v313;
    v6 = v328;
    v4 = v344;
    v2 = v361;
    v161 = v160;
    a1 = v379;
    if (v161)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      v386 = 93;
      v162 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v162)
        v163 = v162;
      else
        v163 = v386;
      v164 = &v385[v163];
      v165 = v386 - v163;
      if (v386 - v163 >= 0x12)
        v166 = 18;
      else
        v166 = v386 - v163;
      v167 = v165 - v166;
      if (v167 >= v167 - 1)
        v168 = v167 - 1;
      else
        v168 = v167;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v164[v166], v168);
      v24 = v229;
      v22 = v236;
      v20 = v244;
      v18 = v253;
      v16 = v263;
      v14 = v274;
      v12 = v286;
      v10 = v299;
      v8 = v313;
      v6 = v328;
      v4 = v344;
      v2 = v361;
      a1 = v379;
    }
  }
  v26 = mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v27 & 1) == 0)
  {
    v362 = v2;
    v380 = a1;
    v329 = v6;
    v345 = v4;
    v314 = v8;
    v287 = v12;
    v300 = v10;
    v264 = v16;
    v275 = v14;
    v245 = v20;
    v254 = v18;
    v230 = v24;
    v237 = v22;
    v169 = mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
    v26 = v169;
    v24 = v230;
    v22 = v237;
    v20 = v245;
    v18 = v254;
    v16 = v264;
    v14 = v275;
    v12 = v287;
    v10 = v300;
    v8 = v314;
    v6 = v329;
    v4 = v345;
    v2 = v362;
    v171 = v170;
    a1 = v380;
    if (v171)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      v386 = 83;
      v172 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v172)
        v173 = v172;
      else
        v173 = v386;
      v174 = &v385[v173];
      v175 = v386 - v173;
      if (v386 - v173 >= 0x12)
        v176 = 18;
      else
        v176 = v386 - v173;
      v177 = v175 - v176;
      if (v177 >= v177 - 1)
        v178 = v177 - 1;
      else
        v178 = v177;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v174[v176], v178);
      v26 = v169;
      v24 = v230;
      v22 = v237;
      v20 = v245;
      v18 = v254;
      v16 = v264;
      v14 = v275;
      v12 = v287;
      v10 = v300;
      v8 = v314;
      v6 = v329;
      v4 = v345;
      v2 = v362;
      a1 = v380;
    }
  }
  v28 = mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v29 & 1) == 0)
  {
    v363 = v2;
    v381 = a1;
    v330 = v6;
    v346 = v4;
    v315 = v8;
    v288 = v12;
    v301 = v10;
    v265 = v16;
    v276 = v14;
    v246 = v20;
    v255 = v18;
    v231 = v24;
    v238 = v22;
    v179 = v26;
    v223 = mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id;
    v28 = v223;
    v26 = v179;
    v24 = v231;
    v22 = v238;
    v20 = v246;
    v18 = v255;
    v16 = v265;
    v14 = v276;
    v12 = v288;
    v10 = v301;
    v8 = v315;
    v6 = v330;
    v4 = v346;
    v2 = v363;
    v181 = v180;
    a1 = v381;
    if (v181)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      v386 = 84;
      v182 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v182)
        v183 = v182;
      else
        v183 = v386;
      v184 = &v385[v183];
      v185 = v386 - v183;
      if (v386 - v183 >= 0x12)
        v186 = 18;
      else
        v186 = v386 - v183;
      v187 = v185 - v186;
      if (v187 >= v187 - 1)
        v188 = v187 - 1;
      else
        v188 = v187;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v184[v186], v188);
      v28 = v223;
      v26 = v179;
      v24 = v231;
      v22 = v238;
      v20 = v246;
      v18 = v255;
      v16 = v265;
      v14 = v276;
      v12 = v288;
      v10 = v301;
      v8 = v315;
      v6 = v330;
      v4 = v346;
      v2 = v363;
      a1 = v381;
    }
  }
  v30 = mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v364 = v2;
    v382 = a1;
    v331 = v6;
    v347 = v4;
    v316 = v8;
    v289 = v12;
    v302 = v10;
    v266 = v16;
    v277 = v14;
    v247 = v20;
    v256 = v18;
    v232 = v24;
    v239 = v22;
    v226 = v26;
    v189 = v28;
    v219 = mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id;
    v30 = v219;
    v28 = v189;
    v26 = v226;
    v24 = v232;
    v22 = v239;
    v20 = v247;
    v18 = v256;
    v16 = v266;
    v14 = v277;
    v12 = v289;
    v10 = v302;
    v8 = v316;
    v6 = v331;
    v4 = v347;
    v2 = v364;
    v191 = v190;
    a1 = v382;
    if (v191)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      v386 = 84;
      v192 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v192)
        v193 = v192;
      else
        v193 = v386;
      v194 = &v385[v193];
      v195 = v386 - v193;
      if (v386 - v193 >= 0x12)
        v196 = 18;
      else
        v196 = v386 - v193;
      v197 = v195 - v196;
      if (v197 >= v197 - 1)
        v198 = v197 - 1;
      else
        v198 = v197;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v194[v196], v198);
      v30 = v219;
      v28 = v189;
      v26 = v226;
      v24 = v232;
      v22 = v239;
      v20 = v247;
      v18 = v256;
      v16 = v266;
      v14 = v277;
      v12 = v289;
      v10 = v302;
      v8 = v316;
      v6 = v331;
      v4 = v347;
      v2 = v364;
      a1 = v382;
    }
  }
  v32 = mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v33 & 1) == 0)
  {
    v365 = v2;
    v383 = a1;
    v332 = v6;
    v348 = v4;
    v317 = v8;
    v290 = v12;
    v303 = v10;
    v267 = v16;
    v278 = v14;
    v248 = v20;
    v257 = v18;
    v233 = v24;
    v240 = v22;
    v224 = v28;
    v227 = v26;
    v199 = v30;
    v221 = mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
    v32 = v221;
    v28 = v224;
    v30 = v199;
    v26 = v227;
    v24 = v233;
    v22 = v240;
    v20 = v248;
    v18 = v257;
    v16 = v267;
    v14 = v278;
    v12 = v290;
    v10 = v303;
    v8 = v317;
    v6 = v332;
    v4 = v348;
    v2 = v365;
    v201 = v200;
    a1 = v383;
    if (v201)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      v386 = 84;
      v202 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v202)
        v203 = v202;
      else
        v203 = v386;
      v204 = &v385[v203];
      v205 = v386 - v203;
      if (v386 - v203 >= 0x12)
        v206 = 18;
      else
        v206 = v386 - v203;
      v207 = v205 - v206;
      if (v207 >= v207 - 1)
        v208 = v207 - 1;
      else
        v208 = v207;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v204[v206], v208);
      v32 = v221;
      v28 = v224;
      v30 = v199;
      v26 = v227;
      v24 = v233;
      v22 = v240;
      v20 = v248;
      v18 = v257;
      v16 = v267;
      v14 = v278;
      v12 = v290;
      v10 = v303;
      v8 = v317;
      v6 = v332;
      v4 = v348;
      v2 = v365;
      a1 = v383;
    }
  }
  v34 = mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  if ((v35 & 1) == 0)
  {
    v366 = v2;
    v384 = a1;
    v333 = v6;
    v349 = v4;
    v318 = v8;
    v291 = v12;
    v304 = v10;
    v268 = v16;
    v279 = v14;
    v249 = v20;
    v258 = v18;
    v234 = v24;
    v241 = v22;
    v225 = v28;
    v228 = v26;
    v220 = v30;
    v222 = v32;
    v218 = mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
    v34 = v218;
    v30 = v220;
    v32 = v222;
    v28 = v225;
    v26 = v228;
    v24 = v234;
    v22 = v241;
    v20 = v249;
    v18 = v258;
    v16 = v268;
    v14 = v279;
    v12 = v291;
    v10 = v304;
    v8 = v318;
    v6 = v333;
    v4 = v349;
    v2 = v366;
    v210 = v209;
    a1 = v384;
    if (v210)
    {
      v385 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v386 = 90;
      v211 = llvm::StringRef::find((uint64_t *)&v385, "DesiredTypeName = ", 0x12uLL, 0);
      if (v386 >= v211)
        v212 = v211;
      else
        v212 = v386;
      v213 = &v385[v212];
      v214 = v386 - v212;
      if (v386 - v212 >= 0x12)
        v215 = 18;
      else
        v215 = v386 - v212;
      v216 = v214 - v215;
      if (v216 >= v216 - 1)
        v217 = v216 - 1;
      else
        v217 = v216;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v213[v215], v217);
      v34 = v218;
      v30 = v220;
      v32 = v222;
      v28 = v225;
      v26 = v228;
      v24 = v234;
      v22 = v241;
      v20 = v249;
      v18 = v258;
      v16 = v268;
      v14 = v279;
      v12 = v291;
      v10 = v304;
      v8 = v318;
      v6 = v333;
      v4 = v349;
      v2 = v366;
      a1 = v384;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v28 == a1
      || v30 == a1
      || v32 == a1
      || v34 == a1
      || mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::NegFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::NegFOp>,mlir::OpTrait::OneResult<mlir::arith::NegFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::NegFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::NegFOp>,mlir::OpTrait::OneOperand<mlir::arith::NegFOp>,mlir::OpTrait::OpInvariants<mlir::arith::NegFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::NegFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::NegFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::NegFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::NegFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::NegFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::NegFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::NegFOp>,mlir::OpTrait::Elementwise<mlir::arith::NegFOp>,mlir::OpTrait::Scalarizable<mlir::arith::NegFOp>,mlir::OpTrait::Vectorizable<mlir::arith::NegFOp>,mlir::OpTrait::Tensorizable<mlir::arith::NegFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::NegFOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::NegFOp>,mlir::OpTrait::OneResult<mlir::arith::NegFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::NegFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::NegFOp>,mlir::OpTrait::OneOperand<mlir::arith::NegFOp>,mlir::OpTrait::OpInvariants<mlir::arith::NegFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::NegFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::NegFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::NegFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::NegFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::NegFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::NegFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::NegFOp>,mlir::OpTrait::Elementwise<mlir::arith::NegFOp>,mlir::OpTrait::Scalarizable<mlir::arith::NegFOp>,mlir::OpTrait::Vectorizable<mlir::arith::NegFOp>,mlir::OpTrait::Tensorizable<mlir::arith::NegFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::NegFOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::Operation *v7;
  mlir::OpTrait::impl *v9;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (v9 = a1, mlir::arith::NegFOp::verifyInvariantsImpl((uint64_t **)&v9))
    && mlir::OpTrait::impl::verifySameOperandsAndResultType(a1, v6))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v7) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::OrIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.ori", 9, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::OrIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C0488D0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::arith::OrIOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::OrIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::OrIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::OrIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::OrIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::inferResultRanges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::OrIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::OrIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::OrIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.ori";
  v16[1] = 9;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::OrIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::OrIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  mlir::Operation *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  _BYTE v17[40];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v16 = a1;
  mlir::arith::detail::OrIOpGenericAdaptorBase::OrIOpGenericAdaptorBase((uint64_t)v17, a1);
  v18 = a2;
  v19 = a3;
  v8 = mlir::arith::OrIOp::fold((uint64_t)&v16, (uint64_t)v17);
  v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8))
      return v9 > 7;
    if (mlir::OpTrait::impl::foldCommutative((uint64_t)a1, a2, a3))
      return 1;
    if (*(_DWORD *)(a4 + 8))
      return v9 > 7;
    v13 = mlir::OpTrait::impl::foldIdempotent((mlir::OpTrait::impl *)a1, v12);
    if (v13 < 8)
      return v9 > 7;
    v14 = v13;
    if (a1 - 4 == (unsigned int *)(v13 & ((uint64_t)(v13 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
      return 1;
    v15 = *(unsigned int *)(a4 + 8);
    if (v15 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v15 + 1, 8);
      LODWORD(v15) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v15) = v14;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
  }
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AndIOp>,mlir::OpTrait::OneResult<mlir::arith::AndIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AndIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AndIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AndIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AndIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AndIOp>,mlir::OpTrait::IsIdempotent<mlir::arith::AndIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AndIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AndIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AndIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AndIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AndIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AndIOp>,mlir::OpTrait::Elementwise<mlir::arith::AndIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AndIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AndIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AndIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AndIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.remf", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::RemFOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C049168;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::arith::RemFOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemFOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::getFastMathAttrName;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      v15 = 85;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[272], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::RemFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::RemFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.remf";
  v16[1] = 10;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[48];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::RemFOpGenericAdaptorBase::RemFOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::RemFOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddFOp>,mlir::OpTrait::OneResult<mlir::arith::AddFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::AddFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::Elementwise<mlir::arith::AddFOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddFOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddFOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddFOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.remsi", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::RemSIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C049B90;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::RemSIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemSIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemSIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinSpatialSplitTransform *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::RemSIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::RemSIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::RemSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.remsi";
  v16[1] = 11;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::RemSIOpGenericAdaptorBase::RemSIOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::RemSIOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.remui", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::RemUIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C049C58;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::RemUIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemUIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemUIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::inferResultRanges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::RemUIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::RemUIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::RemUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.remui";
  v16[1] = 11;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::RemUIOpGenericAdaptorBase::RemUIOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::RemUIOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SIToFPOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.sitofp", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::SIToFPOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04A040;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::SIToFPOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SIToFPOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SIToFPOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SIToFPOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>::areCastCompatible;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      v15 = 71;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[344], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::SIToFPOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::SIToFPOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::SIToFPOpGenericAdaptorBase::SIToFPOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::SIToFPOp::fold(&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::SIToFPOp>,mlir::OpTrait::OneResult<mlir::arith::SIToFPOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::SIToFPOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::SIToFPOp>,mlir::OpTrait::OneOperand<mlir::arith::SIToFPOp>,mlir::OpTrait::OpInvariants<mlir::arith::SIToFPOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::SIToFPOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::SIToFPOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::SIToFPOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::SIToFPOp>,mlir::CastOpInterface::Trait<mlir::arith::SIToFPOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::SIToFPOp>,mlir::OpTrait::Elementwise<mlir::arith::SIToFPOp>,mlir::OpTrait::Scalarizable<mlir::arith::SIToFPOp>,mlir::OpTrait::Vectorizable<mlir::arith::SIToFPOp>,mlir::OpTrait::Tensorizable<mlir::arith::SIToFPOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::SIToFPOp>,mlir::OpTrait::OneResult<mlir::arith::SIToFPOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::SIToFPOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::SIToFPOp>,mlir::OpTrait::OneOperand<mlir::arith::SIToFPOp>,mlir::OpTrait::OpInvariants<mlir::arith::SIToFPOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::SIToFPOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::SIToFPOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::SIToFPOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::SIToFPOp>,mlir::CastOpInterface::Trait<mlir::arith::SIToFPOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::SIToFPOp>,mlir::OpTrait::Elementwise<mlir::arith::SIToFPOp>,mlir::OpTrait::Scalarizable<mlir::arith::SIToFPOp>,mlir::OpTrait::Vectorizable<mlir::arith::SIToFPOp>,mlir::OpTrait::Tensorizable<mlir::arith::SIToFPOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::Operation *v7;
  mlir::Operation *v8;
  mlir::OpTrait::impl *v10;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (v10 = a1, mlir::arith::SIToFPOp::verifyInvariantsImpl((uint64_t **)&v10))
    && mlir::OpTrait::impl::verifySameOperandsAndResultShape(a1, v6)
    && mlir::impl::verifyCastInterfaceOp(a1, v7))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v8) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShLIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.shli", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ShLIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C049230;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::ShLIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShLIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShLIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShLIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinIrHalH13g *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::ShLIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::ShLIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::ShLIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.shli";
  v16[1] = 10;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::ShLIOpGenericAdaptorBase::ShLIOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::ShLIOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShRSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.shrsi", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ShRSIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C049D20;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::ShRSIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShRSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShRSIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShRSIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinSpatialSplitTransform *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::ShRSIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::ShRSIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::ShRSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.shrsi";
  v16[1] = 11;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::ShRSIOpGenericAdaptorBase::ShRSIOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::ShRSIOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShRUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.shrui", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ShRUIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C049DE8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::ShRUIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShRUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShRUIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShRUIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinIrHalH13g *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::ShRUIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::ShRUIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::ShRUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.shrui";
  v16[1] = 11;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::ShRUIOpGenericAdaptorBase::ShRUIOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::ShRUIOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SubFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.subf", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::SubFOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C0492F8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::arith::SubFOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SubFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SubFOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SubFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::getFastMathAttrName;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      v15 = 85;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[272], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::SubFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::SubFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.subf";
  v16[1] = 10;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[48];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::SubFOpGenericAdaptorBase::SubFOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::SubFOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddFOp>,mlir::OpTrait::OneResult<mlir::arith::AddFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::AddFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::Elementwise<mlir::arith::AddFOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddFOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddFOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddFOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SubIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.subi", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C0493C0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::arith::SubIOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::SubIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SubIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SubIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SubIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinIrHalH13g *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::SubIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::SubIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::SubIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.subi";
  v16[1] = 10;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::SubIOpGenericAdaptorBase::SubIOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::SubIOp::fold((uint64_t *)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::TruncFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.truncf", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::TruncFOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04A1D0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::TruncFOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::TruncFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::TruncFOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::TruncFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>::areCastCompatible;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      v15 = 71;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[344], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::TruncFOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::TruncFOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::TruncFOpGenericAdaptorBase::TruncFOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::TruncFOp::fold(&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::ExtFOp>,mlir::OpTrait::OneResult<mlir::arith::ExtFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::ExtFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::ExtFOp>,mlir::OpTrait::OneOperand<mlir::arith::ExtFOp>,mlir::OpTrait::OpInvariants<mlir::arith::ExtFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::ExtFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::ExtFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::ExtFOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::ExtFOp>,mlir::CastOpInterface::Trait<mlir::arith::ExtFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::ExtFOp>,mlir::OpTrait::Elementwise<mlir::arith::ExtFOp>,mlir::OpTrait::Scalarizable<mlir::arith::ExtFOp>,mlir::OpTrait::Vectorizable<mlir::arith::ExtFOp>,mlir::OpTrait::Tensorizable<mlir::arith::ExtFOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::arith::TruncFOp::verify((uint64_t **)&v4) != 0;
}

uint64_t mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::TruncIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.trunci", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::TruncIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04A298;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::arith::TruncIOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::TruncIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>::inferResultRanges(uint64_t a1, uint64_t a2, mlir::intrange *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::TruncIOp::inferResultRanges(&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::TruncIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::TruncIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::TruncIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>::areCastCompatible;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      v15 = 71;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[344], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::TruncIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::TruncIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::TruncIOpGenericAdaptorBase::TruncIOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::TruncIOp::fold((uint64_t)&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::ExtSIOp>,mlir::OpTrait::OneResult<mlir::arith::ExtSIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::ExtSIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::ExtSIOp>,mlir::OpTrait::OneOperand<mlir::arith::ExtSIOp>,mlir::OpTrait::OpInvariants<mlir::arith::ExtSIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::ExtSIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::ExtSIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::ExtSIOp>,mlir::CastOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::Elementwise<mlir::arith::ExtSIOp>,mlir::OpTrait::Scalarizable<mlir::arith::ExtSIOp>,mlir::OpTrait::Vectorizable<mlir::arith::ExtSIOp>,mlir::OpTrait::Tensorizable<mlir::arith::ExtSIOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::arith::TruncIOp::verify((uint64_t **)&v4) != 0;
}

uint64_t mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::UIToFPOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.uitofp", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::UIToFPOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04A360;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::UIToFPOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::UIToFPOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::UIToFPOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::UIToFPOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>::areCastCompatible;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      v15 = 71;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[344], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::UIToFPOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::UIToFPOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::UIToFPOpGenericAdaptorBase::UIToFPOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::UIToFPOp::fold(&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::SIToFPOp>,mlir::OpTrait::OneResult<mlir::arith::SIToFPOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::SIToFPOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::SIToFPOp>,mlir::OpTrait::OneOperand<mlir::arith::SIToFPOp>,mlir::OpTrait::OpInvariants<mlir::arith::SIToFPOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::SIToFPOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::SIToFPOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::SIToFPOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::SIToFPOp>,mlir::CastOpInterface::Trait<mlir::arith::SIToFPOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::SIToFPOp>,mlir::OpTrait::Elementwise<mlir::arith::SIToFPOp>,mlir::OpTrait::Scalarizable<mlir::arith::SIToFPOp>,mlir::OpTrait::Vectorizable<mlir::arith::SIToFPOp>,mlir::OpTrait::Tensorizable<mlir::arith::SIToFPOp>>(a1, a2);
}

uint64_t mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::XOrIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.xori", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C049488;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::arith::XOrIOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::XOrIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::XOrIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::XOrIOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::XOrIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::inferResultRanges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::XOrIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::XOrIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::XOrIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.xori";
  v16[1] = 10;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::XOrIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::XOrIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::arith::detail::XOrIOpGenericAdaptorBase::XOrIOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::arith::XOrIOp::fold((uint64_t *)&v12, (uint64_t)v13);
  v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative((uint64_t)a1, a2, a3))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SelectOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.select", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04A108;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::arith::SelectOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::SelectOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SelectOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SelectOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SelectOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::inferResultRanges;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      v15 = 78;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[332], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::inferResultRanges(int a1, uint64_t a2, mlir::ConstantIntRanges *this, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, char *), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::arith::SelectOp::inferResultRanges((mlir::anec::Convolution *)&v7, this, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::getShapeForUnroll;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::SelectOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::SelectOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::SelectOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::SelectOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "arith.select";
  v16[1] = 12;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::arith::detail::SelectOpGenericAdaptorBase::SelectOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::arith::SelectOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned __int8 v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned __int8 v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned __int8 v46;
  _QWORD *v47;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  const char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  const char *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  const char *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  const char *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  const char *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  const char *v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  unint64_t v138;
  unint64_t v139;
  const char *v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  unint64_t v147;
  unint64_t v148;
  const char *v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  const char *v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  int v163;
  int v164;
  unint64_t v165;
  unint64_t v166;
  const char *v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  int v172;
  int v173;
  unint64_t v174;
  unint64_t v175;
  const char *v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  unint64_t v183;
  unint64_t v184;
  const char *v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  const char *v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  unint64_t v201;
  unint64_t v202;
  const char *v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  const char *v344;
  unint64_t v345;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v328 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v65 = v64;
    a1 = v328;
    if (v65)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v345 = 83;
      v66 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v66)
        v67 = v66;
      else
        v67 = v345;
      v68 = &v344[v67];
      v69 = v345 - v67;
      if (v345 - v67 >= 0x12)
        v70 = 18;
      else
        v70 = v345 - v67;
      v71 = v69 - v70;
      if (v71 >= v71 - 1)
        v72 = v71 - 1;
      else
        v72 = v71;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v68[v70], v72);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v328;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v313 = v3;
    v329 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v74 = v73;
    v3 = v313;
    a1 = v329;
    if (v74)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v345 = 81;
      v75 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v75)
        v76 = v75;
      else
        v76 = v345;
      v77 = &v344[v76];
      v78 = v345 - v76;
      if (v345 - v76 >= 0x12)
        v79 = 18;
      else
        v79 = v345 - v76;
      v80 = v78 - v79;
      if (v80 >= v80 - 1)
        v81 = v80 - 1;
      else
        v81 = v80;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v77[v79], v81);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v313;
      a1 = v329;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451A000;
  if ((v7 & 1) == 0)
  {
    v314 = v3;
    v330 = a1;
    v299 = v6;
    v8 = (_QWORD *)&unk_25451A000;
    v6 = v299;
    v3 = v314;
    v83 = v82;
    a1 = v330;
    if (v83)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v345 = 104;
      v84 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v84)
        v85 = v84;
      else
        v85 = v345;
      v86 = &v344[v85];
      v87 = v345 - v85;
      if (v345 - v85 >= 0x12)
        v88 = 18;
      else
        v88 = v345 - v85;
      v89 = v87 - v88;
      if (v89 >= v89 - 1)
        v90 = v89 - 1;
      else
        v90 = v89;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v86[v88], v90);
      v8 = (_QWORD *)&unk_25451A000;
      v6 = v299;
      v3 = v314;
      a1 = v330;
    }
  }
  v9 = v8[308];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v315 = v3;
    v331 = a1;
    v286 = v9;
    v300 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v286;
    v6 = v300;
    v92 = v91;
    v3 = v315;
    a1 = v331;
    if (v92)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v345 = 86;
      v93 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v93)
        v94 = v93;
      else
        v94 = v345;
      v95 = &v344[v94];
      v96 = v345 - v94;
      if (v345 - v94 >= 0x12)
        v97 = 18;
      else
        v97 = v345 - v94;
      v98 = v96 - v97;
      if (v98 >= v98 - 1)
        v99 = v98 - 1;
      else
        v99 = v98;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v95[v97], v99);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v286;
      v6 = v300;
      v3 = v315;
      a1 = v331;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v316 = v3;
    v332 = a1;
    v287 = v9;
    v301 = v6;
    v274 = v12;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v274;
    v9 = v287;
    v6 = v301;
    v3 = v316;
    v101 = v100;
    a1 = v332;
    if (v101)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<3>::Impl<Empty>]";
      v345 = 90;
      v102 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v102)
        v103 = v102;
      else
        v103 = v345;
      v104 = &v344[v103];
      v105 = v345 - v103;
      if (v345 - v103 >= 0x12)
        v106 = 18;
      else
        v106 = v345 - v103;
      v107 = v105 - v106;
      if (v107 >= v107 - 1)
        v108 = v107 - 1;
      else
        v108 = v107;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<3u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<3u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v104[v106], v108);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v274;
      v9 = v287;
      v6 = v301;
      v3 = v316;
      a1 = v332;
    }
  }
  v15 = v14[149];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v317 = v3;
    v333 = a1;
    v288 = v9;
    v302 = v6;
    v275 = v12;
    v263 = v15;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v263;
    v12 = v275;
    v9 = v288;
    v6 = v302;
    v3 = v317;
    v110 = v109;
    a1 = v333;
    if (v110)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v345 = 84;
      v111 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v111)
        v112 = v111;
      else
        v112 = v345;
      v113 = &v344[v112];
      v114 = v345 - v112;
      if (v345 - v112 >= 0x12)
        v115 = 18;
      else
        v115 = v345 - v112;
      v116 = v114 - v115;
      if (v116 >= v116 - 1)
        v117 = v116 - 1;
      else
        v117 = v116;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v113[v115], v117);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v263;
      v12 = v275;
      v9 = v288;
      v6 = v302;
      v3 = v317;
      a1 = v333;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v318 = v3;
    v334 = a1;
    v289 = v9;
    v303 = v6;
    v276 = v12;
    v253 = v18;
    v264 = v15;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v253;
    v15 = v264;
    v12 = v276;
    v9 = v289;
    v6 = v303;
    v3 = v318;
    v119 = v118;
    a1 = v334;
    if (v119)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v345 = 95;
      v120 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v120)
        v121 = v120;
      else
        v121 = v345;
      v122 = &v344[v121];
      v123 = v345 - v121;
      if (v345 - v121 >= 0x12)
        v124 = 18;
      else
        v124 = v345 - v121;
      v125 = v123 - v124;
      if (v125 >= v125 - 1)
        v126 = v125 - 1;
      else
        v126 = v125;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v122[v124], v126);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v253;
      v15 = v264;
      v12 = v276;
      v9 = v289;
      v6 = v303;
      v3 = v318;
      a1 = v334;
    }
  }
  v21 = v20[312];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v319 = v3;
    v335 = a1;
    v290 = v9;
    v304 = v6;
    v277 = v12;
    v254 = v18;
    v265 = v15;
    v244 = v21;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v244;
    v18 = v254;
    v15 = v265;
    v12 = v277;
    v9 = v290;
    v6 = v304;
    v3 = v319;
    v128 = v127;
    a1 = v335;
    if (v128)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v345 = 99;
      v129 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v129)
        v130 = v129;
      else
        v130 = v345;
      v131 = &v344[v130];
      v132 = v345 - v130;
      if (v345 - v130 >= 0x12)
        v133 = 18;
      else
        v133 = v345 - v130;
      v134 = v132 - v133;
      if (v134 >= v134 - 1)
        v135 = v134 - 1;
      else
        v135 = v134;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v131[v133], v135);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v244;
      v18 = v254;
      v15 = v265;
      v12 = v277;
      v9 = v290;
      v6 = v304;
      v3 = v319;
      a1 = v335;
    }
  }
  v24 = v23[314];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v320 = v3;
    v336 = a1;
    v291 = v9;
    v305 = v6;
    v278 = v12;
    v255 = v18;
    v266 = v15;
    v236 = v24;
    v245 = v21;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v236;
    v21 = v245;
    v18 = v255;
    v15 = v266;
    v12 = v278;
    v9 = v291;
    v6 = v305;
    v3 = v320;
    v137 = v136;
    a1 = v336;
    if (v137)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v345 = 93;
      v138 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v138)
        v139 = v138;
      else
        v139 = v345;
      v140 = &v344[v139];
      v141 = v345 - v139;
      if (v345 - v139 >= 0x12)
        v142 = 18;
      else
        v142 = v345 - v139;
      v143 = v141 - v142;
      if (v143 >= v143 - 1)
        v144 = v143 - 1;
      else
        v144 = v143;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v140[v142], v144);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v236;
      v21 = v245;
      v18 = v255;
      v15 = v266;
      v12 = v278;
      v9 = v291;
      v6 = v305;
      v3 = v320;
      a1 = v336;
    }
  }
  v27 = v26[21];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v321 = v3;
    v337 = a1;
    v292 = v9;
    v306 = v6;
    v279 = v12;
    v256 = v18;
    v267 = v15;
    v237 = v24;
    v246 = v21;
    v229 = v27;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v229;
    v24 = v237;
    v21 = v246;
    v18 = v256;
    v15 = v267;
    v12 = v279;
    v9 = v292;
    v6 = v306;
    v3 = v321;
    v146 = v145;
    a1 = v337;
    if (v146)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface::Trait<Empty>]";
      v345 = 92;
      v147 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v147)
        v148 = v147;
      else
        v148 = v345;
      v149 = &v344[v148];
      v150 = v345 - v148;
      if (v345 - v148 >= 0x12)
        v151 = 18;
      else
        v151 = v345 - v148;
      v152 = v150 - v151;
      if (v152 >= v152 - 1)
        v153 = v152 - 1;
      else
        v153 = v152;
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v149[v151], v153);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v229;
      v24 = v237;
      v21 = v246;
      v18 = v256;
      v15 = v267;
      v12 = v279;
      v9 = v292;
      v6 = v306;
      v3 = v321;
      a1 = v337;
    }
  }
  v30 = v29[334];
  v32 = &unk_25451A000;
  if ((v31 & 1) == 0)
  {
    v322 = v3;
    v338 = a1;
    v293 = v9;
    v307 = v6;
    v280 = v12;
    v257 = v18;
    v268 = v15;
    v238 = v24;
    v247 = v21;
    v223 = v30;
    v230 = v27;
    v32 = (_QWORD *)&unk_25451A000;
    v30 = v223;
    v27 = v230;
    v24 = v238;
    v21 = v247;
    v18 = v257;
    v15 = v268;
    v12 = v280;
    v9 = v293;
    v6 = v307;
    v3 = v322;
    v155 = v154;
    a1 = v338;
    if (v155)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      v345 = 83;
      v156 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v156)
        v157 = v156;
      else
        v157 = v345;
      v158 = &v344[v157];
      v159 = v345 - v157;
      if (v345 - v157 >= 0x12)
        v160 = 18;
      else
        v160 = v345 - v157;
      v161 = v159 - v160;
      if (v161 >= v161 - 1)
        v162 = v161 - 1;
      else
        v162 = v161;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v158[v160], v162);
      v32 = (_QWORD *)&unk_25451A000;
      v30 = v223;
      v27 = v230;
      v24 = v238;
      v21 = v247;
      v18 = v257;
      v15 = v268;
      v12 = v280;
      v9 = v293;
      v6 = v307;
      v3 = v322;
      a1 = v338;
    }
  }
  v33 = v32[322];
  v35 = &unk_25451A000;
  if ((v34 & 1) == 0)
  {
    v323 = v3;
    v339 = a1;
    v294 = v9;
    v308 = v6;
    v281 = v12;
    v258 = v18;
    v269 = v15;
    v239 = v24;
    v248 = v21;
    v224 = v30;
    v231 = v27;
    v218 = v33;
    v35 = (_QWORD *)&unk_25451A000;
    v33 = v218;
    v30 = v224;
    v27 = v231;
    v24 = v239;
    v21 = v248;
    v18 = v258;
    v15 = v269;
    v12 = v281;
    v9 = v294;
    v6 = v308;
    v3 = v323;
    v164 = v163;
    a1 = v339;
    if (v164)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      v345 = 84;
      v165 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v165)
        v166 = v165;
      else
        v166 = v345;
      v167 = &v344[v166];
      v168 = v345 - v166;
      if (v345 - v166 >= 0x12)
        v169 = 18;
      else
        v169 = v345 - v166;
      v170 = v168 - v169;
      if (v170 >= v170 - 1)
        v171 = v170 - 1;
      else
        v171 = v170;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v167[v169], v171);
      v35 = (_QWORD *)&unk_25451A000;
      v33 = v218;
      v30 = v224;
      v27 = v231;
      v24 = v239;
      v21 = v248;
      v18 = v258;
      v15 = v269;
      v12 = v281;
      v9 = v294;
      v6 = v308;
      v3 = v323;
      a1 = v339;
    }
  }
  v36 = v35[324];
  v38 = &unk_25451A000;
  if ((v37 & 1) == 0)
  {
    v324 = v3;
    v340 = a1;
    v295 = v9;
    v309 = v6;
    v282 = v12;
    v259 = v18;
    v270 = v15;
    v240 = v24;
    v249 = v21;
    v225 = v30;
    v232 = v27;
    v214 = v36;
    v219 = v33;
    v38 = (_QWORD *)&unk_25451A000;
    v36 = v214;
    v33 = v219;
    v30 = v225;
    v27 = v232;
    v24 = v240;
    v21 = v249;
    v18 = v259;
    v15 = v270;
    v12 = v282;
    v9 = v295;
    v6 = v309;
    v3 = v324;
    v173 = v172;
    a1 = v340;
    if (v173)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      v345 = 84;
      v174 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v174)
        v175 = v174;
      else
        v175 = v345;
      v176 = &v344[v175];
      v177 = v345 - v175;
      if (v345 - v175 >= 0x12)
        v178 = 18;
      else
        v178 = v345 - v175;
      v179 = v177 - v178;
      if (v179 >= v179 - 1)
        v180 = v179 - 1;
      else
        v180 = v179;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v176[v178], v180);
      v38 = (_QWORD *)&unk_25451A000;
      v36 = v214;
      v33 = v219;
      v30 = v225;
      v27 = v232;
      v24 = v240;
      v21 = v249;
      v18 = v259;
      v15 = v270;
      v12 = v282;
      v9 = v295;
      v6 = v309;
      v3 = v324;
      a1 = v340;
    }
  }
  v39 = v38[326];
  v41 = &unk_25451A000;
  if ((v40 & 1) == 0)
  {
    v325 = v3;
    v341 = a1;
    v296 = v9;
    v310 = v6;
    v283 = v12;
    v260 = v18;
    v271 = v15;
    v241 = v24;
    v250 = v21;
    v226 = v30;
    v233 = v27;
    v215 = v36;
    v220 = v33;
    v211 = v39;
    v41 = (_QWORD *)&unk_25451A000;
    v39 = v211;
    v36 = v215;
    v33 = v220;
    v30 = v226;
    v27 = v233;
    v24 = v241;
    v21 = v250;
    v18 = v260;
    v15 = v271;
    v12 = v283;
    v9 = v296;
    v6 = v310;
    v3 = v325;
    v182 = v181;
    a1 = v341;
    if (v182)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      v345 = 84;
      v183 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v183)
        v184 = v183;
      else
        v184 = v345;
      v185 = &v344[v184];
      v186 = v345 - v184;
      if (v345 - v184 >= 0x12)
        v187 = 18;
      else
        v187 = v345 - v184;
      v188 = v186 - v187;
      if (v188 >= v188 - 1)
        v189 = v188 - 1;
      else
        v189 = v188;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v185[v187], v189);
      v41 = (_QWORD *)&unk_25451A000;
      v39 = v211;
      v36 = v215;
      v33 = v220;
      v30 = v226;
      v27 = v233;
      v24 = v241;
      v21 = v250;
      v18 = v260;
      v15 = v271;
      v12 = v283;
      v9 = v296;
      v6 = v310;
      v3 = v325;
      a1 = v341;
    }
  }
  v42 = v41[328];
  v44 = &unk_25451A000;
  if ((v43 & 1) == 0)
  {
    v326 = v3;
    v342 = a1;
    v297 = v9;
    v311 = v6;
    v284 = v12;
    v261 = v18;
    v272 = v15;
    v242 = v24;
    v251 = v21;
    v227 = v30;
    v234 = v27;
    v216 = v36;
    v221 = v33;
    v209 = v42;
    v212 = v39;
    v44 = (_QWORD *)&unk_25451A000;
    v42 = v209;
    v39 = v212;
    v36 = v216;
    v33 = v221;
    v30 = v227;
    v27 = v234;
    v24 = v242;
    v21 = v251;
    v18 = v261;
    v15 = v272;
    v12 = v284;
    v9 = v297;
    v6 = v311;
    v3 = v326;
    v191 = v190;
    a1 = v342;
    if (v191)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      v345 = 93;
      v192 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v192)
        v193 = v192;
      else
        v193 = v345;
      v194 = &v344[v193];
      v195 = v345 - v193;
      if (v345 - v193 >= 0x12)
        v196 = 18;
      else
        v196 = v345 - v193;
      v197 = v195 - v196;
      if (v197 >= v197 - 1)
        v198 = v197 - 1;
      else
        v198 = v197;
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v194[v196], v198);
      v44 = (_QWORD *)&unk_25451A000;
      v42 = v209;
      v39 = v212;
      v36 = v216;
      v33 = v221;
      v30 = v227;
      v27 = v234;
      v24 = v242;
      v21 = v251;
      v18 = v261;
      v15 = v272;
      v12 = v284;
      v9 = v297;
      v6 = v311;
      v3 = v326;
      a1 = v342;
    }
  }
  v45 = v44[320];
  v47 = &unk_25451A000;
  if ((v46 & 1) == 0)
  {
    v327 = v3;
    v343 = a1;
    v298 = v9;
    v312 = v6;
    v285 = v12;
    v262 = v18;
    v273 = v15;
    v243 = v24;
    v252 = v21;
    v228 = v30;
    v235 = v27;
    v217 = v36;
    v222 = v33;
    v210 = v42;
    v213 = v39;
    v208 = v45;
    v47 = (_QWORD *)&unk_25451A000;
    v45 = v208;
    v42 = v210;
    v39 = v213;
    v36 = v217;
    v33 = v222;
    v30 = v228;
    v27 = v235;
    v24 = v243;
    v21 = v252;
    v18 = v262;
    v15 = v273;
    v12 = v285;
    v9 = v298;
    v6 = v312;
    v3 = v327;
    v200 = v199;
    a1 = v343;
    if (v200)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v345 = 90;
      v201 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v201)
        v202 = v201;
      else
        v202 = v345;
      v203 = &v344[v202];
      v204 = v345 - v202;
      if (v345 - v202 >= 0x12)
        v205 = 18;
      else
        v205 = v345 - v202;
      v206 = v204 - v205;
      if (v206 >= v206 - 1)
        v207 = v206 - 1;
      else
        v207 = v206;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v203[v205], v207);
      v47 = (_QWORD *)&unk_25451A000;
      v45 = v208;
      v42 = v210;
      v39 = v213;
      v36 = v217;
      v33 = v222;
      v30 = v228;
      v27 = v235;
      v24 = v243;
      v21 = v252;
      v18 = v262;
      v15 = v273;
      v12 = v285;
      v9 = v298;
      v6 = v312;
      v3 = v327;
      a1 = v343;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v36 == a1
      || v39 == a1
      || v42 == a1
      || v45 == a1
      || v47[27] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v8;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::arith::SelectOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::SelectOp>,mlir::OpTrait::OneResult<mlir::arith::SelectOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::SelectOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::SelectOp>,mlir::OpTrait::NOperands<3u>::Impl<mlir::arith::SelectOp>,mlir::OpTrait::OpInvariants<mlir::arith::SelectOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::SelectOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::SelectOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::SelectOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::SelectOp>,mlir::OpTrait::Elementwise<mlir::arith::SelectOp>,mlir::OpTrait::Scalarizable<mlir::arith::SelectOp>,mlir::OpTrait::Vectorizable<mlir::arith::SelectOp>,mlir::OpTrait::Tensorizable<mlir::arith::SelectOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::SelectOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::SelectOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::arith::SelectOp::verify((uint64_t **)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::SelectOp>,mlir::OpTrait::OneResult<mlir::arith::SelectOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::SelectOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::SelectOp>,mlir::OpTrait::NOperands<3u>::Impl<mlir::arith::SelectOp>,mlir::OpTrait::OpInvariants<mlir::arith::SelectOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::SelectOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::SelectOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::SelectOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::SelectOp>,mlir::OpTrait::Elementwise<mlir::arith::SelectOp>,mlir::OpTrait::Scalarizable<mlir::arith::SelectOp>,mlir::OpTrait::Vectorizable<mlir::arith::SelectOp>,mlir::OpTrait::Tensorizable<mlir::arith::SelectOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::SelectOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::SelectOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)3)
    && (v7 = a1, mlir::arith::SelectOp::verifyInvariantsImpl((uint64_t **)&v7)))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t *mlir::Dialect::addAttribute<mlir::arith::FastMathFlagsAttr>(uint64_t a1)
{
  uint64_t v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *AttributeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)();
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::arith::FastMathFlagsAttr,mlir::Attribute,mlir::arith::detail::FastMathFlagsAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_5arith17FastMathFlagsAttrES2_NSD_6detail24FastMathFlagsAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_5arith17FastMathFlagsAttrES2_NSC_6detail24FastMathFlagsAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id, 0, v10);
}

uint64_t mlir::detail::StorageUserBase<mlir::arith::FastMathFlagsAttr,mlir::Attribute,mlir::arith::detail::FastMathFlagsAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<BOOL (* const)(mlir::TypeID)>(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  return (*a1)(a2);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_5arith17FastMathFlagsAttrES2_NSC_6detail24FastMathFlagsAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  uint64_t v6;
  unsigned int v7;
  _QWORD v8[2];

  v6 = a2;
  v2 = *(_DWORD *)(a2 + 8);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v6);
  v7 = v2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id;
  v8[1] = Context;
  return mlir::StorageUniquer::get<mlir::arith::detail::FastMathFlagsAttrStorage,mlir::arith::FastMathFlags>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir5arith6detail24FastMathFlagsAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17FastMathFlagsAttrEJNS2_13FastMathFlagsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id, &v7);
}

void `anonymous namespace'::ArithInlinerInterface::~ArithInlinerInterface(_anonymous_namespace_::ArithInlinerInterface *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::DialectInlinerInterface::isLegalToInline(mlir::DialectInlinerInterface *this, Operation *a2, Operation *a3)
{
  return 0;
}

uint64_t mlir::DialectInlinerInterface::isLegalToInline()
{
  return 0;
}

uint64_t `anonymous namespace'::ArithInlinerInterface::isLegalToInline()
{
  return 1;
}

uint64_t mlir::DialectInlinerInterface::shouldAnalyzeRecursively(mlir::DialectInlinerInterface *this, Operation *a2)
{
  return 1;
}

uint64_t mlir::DialectInlinerInterface::materializeCallConversion()
{
  return 0;
}

uint64_t mlir::DialectInlinerInterface::handleArgument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a5;
}

uint64_t mlir::DialectInlinerInterface::handleResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a5;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::ub::PoisonAttrInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ub::PoisonAttrInterface]";
      v23 = 79;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::ub::PoisonAttrInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[376];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

_QWORD *mlir::arith::ConstantOp::inferResultRanges(mlir::arith::ConstantOp *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, _QWORD **), uint64_t a5)
{
  _QWORD *result;
  void *v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int v16;
  _QWORD *v17;
  unsigned int v18;
  _QWORD *v19;
  unsigned int v20;
  _QWORD *v21;
  unsigned int v22;
  _QWORD *v23;

  result = mlir::arith::ConstantOp::getValue(a1);
  if (result)
  {
    v9 = *(void **)(*result + 136);
    v10 = v9 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
    v11 = v9 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id ? result : 0;
    v23 = v11;
    if (v10)
    {
      mlir::IntegerAttr::getValue(&v23, (llvm::APInt *)&v21);
      v12 = mlir::anec::Convolution::getResult(a1);
      mlir::ConstantIntRanges::constant((mlir::ConstantIntRanges *)&v21, &v13);
      result = (_QWORD *)a4(a5, v12, &v13);
      if (v20 >= 0x41)
      {
        result = v19;
        if (v19)
          result = (_QWORD *)MEMORY[0x20BD002D4](v19, 0x1000C8000313F17);
      }
      if (v18 >= 0x41)
      {
        result = v17;
        if (v17)
          result = (_QWORD *)MEMORY[0x20BD002D4](v17, 0x1000C8000313F17);
      }
      if (v16 >= 0x41)
      {
        result = v15;
        if (v15)
          result = (_QWORD *)MEMORY[0x20BD002D4](v15, 0x1000C8000313F17);
      }
      if (v14 >= 0x41)
      {
        result = v13;
        if (v13)
          result = (_QWORD *)MEMORY[0x20BD002D4](v13, 0x1000C8000313F17);
      }
      if (v22 >= 0x41)
      {
        result = v21;
        if (v21)
          return (_QWORD *)MEMORY[0x20BD002D4](v21, 0x1000C8000313F17);
      }
    }
  }
  return result;
}

uint64_t mlir::arith::AddIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinIrHalH13g *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferAdd(a2, &v10);
  result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::SubIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinIrHalH13g *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferSub(a2, &v10);
  result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::MulIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinIrHalH13g *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferMul(a2, &v10);
  result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::DivUIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinIrHalH13g *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferDivU(a2, &v10);
  result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::DivSIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinSpatialSplitTransform *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferDivS(a2, &v10);
  result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::CeilDivUIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinIrHalH13g *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferCeilDivU(a2, &v10);
  result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::CeilDivSIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinSpatialSplitTransform *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferCeilDivS(a2, &v10);
  result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::FloorDivSIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinSpatialSplitTransform *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferFloorDivS(a2, &v10);
  result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::RemUIOp::inferResultRanges(mlir::anec::Convolution *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferRemU(a2, &v10);
  result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::RemSIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinSpatialSplitTransform *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferRemS(a2, &v10);
  result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::AndIOp::inferResultRanges(mlir::anec::Convolution *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferAnd(a2, &v10);
  result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::OrIOp::inferResultRanges(mlir::anec::Convolution *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferOr(a2, &v10);
  result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::XOrIOp::inferResultRanges(mlir::anec::Convolution *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferXor(a2, &v10);
  result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::MaxSIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinSpatialSplitTransform *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferMaxS(a2, &v10);
  result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::MaxUIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinIrHalH13g *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferMaxU(a2, &v10);
  result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::MinSIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinSpatialSplitTransform *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferMinS(a2, &v10);
  result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::MinUIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinIrHalH13g *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferMinU(a2, &v10);
  result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::ExtUIOp::inferResultRanges(_QWORD *a1, mlir::intrange *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  const mlir::ConstantIntRanges *StorageBitwidth;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;

  StorageBitwidth = (const mlir::ConstantIntRanges *)mlir::ConstantIntRanges::getStorageBitwidth(*(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  v10 = *a1 - 16;
  mlir::intrange::extUIRange(a2, StorageBitwidth, &v12);
  result = a4(a5, v10, &v12);
  if (v19 >= 0x41)
  {
    result = v18;
    if (v18)
      result = MEMORY[0x20BD002D4](v18, 0x1000C8000313F17);
  }
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      return MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::ExtSIOp::inferResultRanges(_QWORD *a1, mlir::intrange *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  const mlir::ConstantIntRanges *StorageBitwidth;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;

  StorageBitwidth = (const mlir::ConstantIntRanges *)mlir::ConstantIntRanges::getStorageBitwidth(*(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  v10 = *a1 - 16;
  mlir::intrange::extSIRange(a2, StorageBitwidth, &v12);
  result = a4(a5, v10, &v12);
  if (v19 >= 0x41)
  {
    result = v18;
    if (v18)
      result = MEMORY[0x20BD002D4](v18, 0x1000C8000313F17);
  }
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      return MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::TruncIOp::inferResultRanges(_QWORD *a1, mlir::intrange *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  const mlir::ConstantIntRanges *StorageBitwidth;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;

  StorageBitwidth = (const mlir::ConstantIntRanges *)mlir::ConstantIntRanges::getStorageBitwidth(*(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  v10 = *a1 - 16;
  mlir::intrange::truncRange(a2, StorageBitwidth, &v12);
  result = a4(a5, v10, &v12);
  if (v19 >= 0x41)
  {
    result = v18;
    if (v18)
      result = MEMORY[0x20BD002D4](v18, 0x1000C8000313F17);
  }
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      return MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::IndexCastOp::inferResultRanges(uint64_t a1, mlir::intrange *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, mlir::intrange *), uint64_t a5)
{
  unint64_t v8;
  unsigned int StorageBitwidth;
  const mlir::ConstantIntRanges *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;

  v8 = *(_QWORD *)(*(_QWORD *)a1 - 8) & 0xFFFFFFFFFFFFFFF8;
  StorageBitwidth = mlir::ConstantIntRanges::getStorageBitwidth(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72)
                                                                                      + 24)
                                                                          + 8) & 0xFFFFFFFFFFFFFFF8);
  v10 = (const mlir::ConstantIntRanges *)mlir::ConstantIntRanges::getStorageBitwidth(v8);
  if (StorageBitwidth >= v10)
  {
    v11 = *(_QWORD *)a1 - 16;
    if (StorageBitwidth <= v10)
      return a4(a5, v11, a2);
    mlir::intrange::truncRange(a2, v10, &v14);
  }
  else
  {
    v11 = *(_QWORD *)a1 - 16;
    mlir::intrange::extSIRange(a2, v10, &v14);
  }
  result = a4(a5, v11, (mlir::intrange *)&v14);
  if (v21 >= 0x41)
  {
    result = v20;
    if (v20)
      result = MEMORY[0x20BD002D4](v20, 0x1000C8000313F17);
  }
  if (v19 >= 0x41)
  {
    result = v18;
    if (v18)
      result = MEMORY[0x20BD002D4](v18, 0x1000C8000313F17);
  }
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      return MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::IndexCastUIOp::inferResultRanges(uint64_t a1, mlir::intrange *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, mlir::intrange *), uint64_t a5)
{
  unint64_t v8;
  unsigned int StorageBitwidth;
  const mlir::ConstantIntRanges *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;

  v8 = *(_QWORD *)(*(_QWORD *)a1 - 8) & 0xFFFFFFFFFFFFFFF8;
  StorageBitwidth = mlir::ConstantIntRanges::getStorageBitwidth(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72)
                                                                                      + 24)
                                                                          + 8) & 0xFFFFFFFFFFFFFFF8);
  v10 = (const mlir::ConstantIntRanges *)mlir::ConstantIntRanges::getStorageBitwidth(v8);
  if (StorageBitwidth >= v10)
  {
    v11 = *(_QWORD *)a1 - 16;
    if (StorageBitwidth <= v10)
      return a4(a5, v11, a2);
    mlir::intrange::truncRange(a2, v10, &v14);
  }
  else
  {
    v11 = *(_QWORD *)a1 - 16;
    mlir::intrange::extUIRange(a2, v10, &v14);
  }
  result = a4(a5, v11, (mlir::intrange *)&v14);
  if (v21 >= 0x41)
  {
    result = v20;
    if (v20)
      result = MEMORY[0x20BD002D4](v20, 0x1000C8000313F17);
  }
  if (v19 >= 0x41)
  {
    result = v18;
    if (v18)
      result = MEMORY[0x20BD002D4](v18, 0x1000C8000313F17);
  }
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      return MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::CmpIOp::inferResultRanges(mlir::arith::CmpIOp *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t Predicate;
  unsigned __int16 v10;
  unsigned int *v11;
  uint64_t v12;
  const llvm::APInt *v13;
  uint64_t result;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;

  Predicate = mlir::arith::CmpIOp::getPredicate(a1);
  v26 = 1;
  v25 = 0;
  v24 = 1;
  v23 = 1;
  v10 = mlir::intrange::evaluatePred(Predicate, (mlir::ConstantIntRanges *)a2, (ZinSpatialSplitTransform *)(a2 + 64));
  if (v10 >= 0x100u)
  {
    if ((_BYTE)v10)
    {
      v11 = &v26;
      v25 = 1;
    }
    else
    {
      v11 = &v24;
      v23 = 0;
    }
    *v11 = 1;
  }
  v12 = mlir::anec::Convolution::getResult(a1);
  mlir::ConstantIntRanges::fromUnsigned((mlir::ConstantIntRanges *)&v25, (const llvm::APInt *)&v23, v13, &v15);
  result = a4(a5, v12, &v15);
  if (v22 >= 0x41)
  {
    result = v21;
    if (v21)
      result = MEMORY[0x20BD002D4](v21, 0x1000C8000313F17);
  }
  if (v20 >= 0x41)
  {
    result = v19;
    if (v19)
      result = MEMORY[0x20BD002D4](v19, 0x1000C8000313F17);
  }
  if (v18 >= 0x41)
  {
    result = v17;
    if (v17)
      result = MEMORY[0x20BD002D4](v17, 0x1000C8000313F17);
  }
  if (v16 >= 0x41)
  {
    result = v15;
    if (v15)
      result = MEMORY[0x20BD002D4](v15, 0x1000C8000313F17);
  }
  if (v24 >= 0x41)
  {
    result = v23;
    if (v23)
      result = MEMORY[0x20BD002D4](v23, 0x1000C8000313F17);
  }
  if (v26 >= 0x41)
  {
    result = v25;
    if (v25)
      return MEMORY[0x20BD002D4](v25, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::SelectOp::inferResultRanges(mlir::anec::Convolution *a1, mlir::ConstantIntRanges *this, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, char *), uint64_t a5)
{
  unsigned int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  char v24;

  mlir::ConstantIntRanges::getConstantValue((uint64_t)this, (uint64_t)&v22);
  if (v24)
  {
    v9 = v23;
    if (v23 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v22) != v9)
        goto LABEL_4;
    }
    else if (v22)
    {
LABEL_4:
      v10 = mlir::anec::Convolution::getResult(a1);
      v11 = (char *)this + 64;
LABEL_19:
      result = a4(a5, v10, v11);
      goto LABEL_20;
    }
    v10 = mlir::anec::Convolution::getResult(a1);
    v11 = (char *)this + 128;
    goto LABEL_19;
  }
  v12 = mlir::anec::Convolution::getResult(a1);
  mlir::ConstantIntRanges::rangeUnion((mlir::ConstantIntRanges *)((char *)this + 64), (mlir::ConstantIntRanges *)((char *)this + 128), &v14);
  result = a4(a5, v12, (char *)&v14);
  if (v21 >= 0x41)
  {
    result = v20;
    if (v20)
      result = MEMORY[0x20BD002D4](v20, 0x1000C8000313F17);
  }
  if (v19 >= 0x41)
  {
    result = v18;
    if (v18)
      result = MEMORY[0x20BD002D4](v18, 0x1000C8000313F17);
  }
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
LABEL_20:
  if (v24 && v23 >= 0x41)
  {
    result = v22;
    if (v22)
      return MEMORY[0x20BD002D4](v22, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::ShLIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinIrHalH13g *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferShl(a2, &v10);
  result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::ShRUIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinIrHalH13g *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferShrU(a2, &v10);
  result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::arith::ShRSIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinSpatialSplitTransform *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferShrS(a2, &v10);
  result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

void mlir::getPositionsOfShapeOne(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unsigned int v4;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  unint64_t v14;

  v4 = a3;
  if (a3 <= 0x39)
  {
    v8 = (a3 << 58) | 1;
    *a4 = v8;
    if (!(_DWORD)a3)
      return;
    goto LABEL_10;
  }
  v9 = operator new();
  v8 = v9;
  v10 = v4 + 63;
  v11 = (v4 + 63) >> 6;
  *(_QWORD *)v9 = v9 + 16;
  *(_DWORD *)(v9 + 12) = 6;
  if (v4 + 63 < 0x1C0)
  {
    if (v10 < 0x40)
      goto LABEL_9;
    v12 = (void *)(v9 + 16);
    v13 = 8 * v11;
  }
  else
  {
    *(_DWORD *)(v9 + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(v9 + 16), v10 >> 6, 8);
    v12 = *(void **)v8;
    v13 = 8 * v11;
  }
  bzero(v12, v13);
LABEL_9:
  *(_DWORD *)(v8 + 8) = v11;
  *(_DWORD *)(v8 + 64) = v4;
  *a4 = v8;
  if (!v4)
    return;
LABEL_10:
  if (a1)
  {
    v14 = 0;
    do
    {
      if (*(_QWORD *)(a2 + 8 * v14) == 1)
      {
        if ((v8 & 1) != 0)
        {
          v8 = v8 & 0xFC00000000000000 | (2
                                          * (((v8 >> 1) & ~(-1 << (v8 >> 58)) | (1 << v14)) & ~(-1 << (v8 >> 58)))) | 1;
          *a4 = v8;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v8 + 8 * (v14 >> 6)) |= 1 << v14;
        }
        --a1;
      }
      ++v14;
    }
    while (v14 < v4 && a1);
  }
}

char *mlir::getValueOrCreateConstantIndexOp(mlir::IndexType **a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  unint64_t v7;
  mlir::MLIRContext *v8;
  uint64_t *v9;
  unsigned int v10;
  mlir::MLIRContext *v11;
  unint64_t v12;

  v5 = (char *)(a3 & 0xFFFFFFFFFFFFFFF8);
  if ((a3 & 4) != 0 && v5)
    return v5;
  if ((a3 & 4) != 0)
    v7 = 0;
  else
    v7 = a3 & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v7 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    v7 = 0;
  v12 = v7;
  mlir::IntegerAttr::getValue(&v12, (llvm::APInt *)&v9);
  v8 = (mlir::MLIRContext *)(v10 > 0x40 ? *v9 : (uint64_t)((_QWORD)v9 << -(uint64_t)v10) >> -(uint64_t)v10);
  v11 = v8;
  v5 = (char *)mlir::OpBuilder::create<mlir::arith::ConstantIndexOp,long long>(a1, a2, &v11) - 16;
  if (v10 < 0x41 || !v9)
    return v5;
  MEMORY[0x20BD002D4](v9, 0x1000C8000313F17);
  return v5;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ConstantIndexOp,long long>(mlir::IndexType **a1, uint64_t a2, mlir::MLIRContext **a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  mlir::Operation *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.constant", (const unsigned __int8 *)0xE, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"arith.constant";
    v15[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::arith::ConstantIndexOp::build(a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (!mlir::arith::ConstantIndexOp::classof((_BOOL8)v9, v10))
    v9 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v9;
}

void mlir::getValueOrCreateConstantIndexOp(mlir::IndexType **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  ZinIrHalH13g *v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  mlir::MLIRContext *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v28[5];

  v28[4] = *MEMORY[0x24BDAC8D0];
  v10 = 8 * a4;
  v11 = v28;
  v26 = v28;
  v27 = 0x400000000;
  if ((unint64_t)(8 * a4) < 0x21)
  {
    v12 = 0;
    v13 = v28;
    if (!a4)
      goto LABEL_21;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, (8 * a4) >> 3, 8);
    v12 = v27;
    v13 = v26;
    if (!a4)
      goto LABEL_21;
  }
  v14 = &v13[v12];
  v15 = v10;
  do
  {
    v16 = *a3 & 0xFFFFFFFFFFFFFFF8;
    if ((*a3 & 4) == 0 || !v16)
    {
      if ((*a3 & 4) != 0)
        v16 = 0;
      if (*(_UNKNOWN **)(*(_QWORD *)v16 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        v16 = 0;
      v25 = v16;
      mlir::IntegerAttr::getValue(&v25, (llvm::APInt *)&v22);
      if (v23 > 0x40)
        v17 = *v22;
      else
        v17 = (uint64_t)((_QWORD)v22 << -(uint64_t)v23) >> -(uint64_t)v23;
      v24 = (mlir::MLIRContext *)v17;
      v18 = mlir::OpBuilder::create<mlir::arith::ConstantIndexOp,long long>(a1, a2, &v24);
      if (v23 >= 0x41 && v22)
        MEMORY[0x20BD002D4](v22, 0x1000C8000313F17);
      v16 = (unint64_t)v18 - 16;
    }
    *v14++ = v16;
    ++a3;
    v15 -= 8;
  }
  while (v15);
  v12 = v27;
  v13 = v26;
  v11 = v28;
LABEL_21:
  *(_QWORD *)a5 = a5 + 16;
  *(_QWORD *)(a5 + 8) = 0x600000000;
  v19 = v12 + (v10 >> 3);
  LODWORD(v27) = v19;
  if ((_DWORD)v19 && &v26 != (_QWORD **)a5)
  {
    if (v13 == v28)
    {
      v21 = v12 + (v10 >> 3);
      if (v19 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v19, 8),
            v21 = v27,
            v11 = v26,
            (_DWORD)v27))
      {
        memcpy(*(void **)a5, v11, 8 * v21);
        v11 = v26;
      }
      *(_DWORD *)(a5 + 8) = v19;
    }
    else
    {
      *(_QWORD *)a5 = v13;
      v20 = HIDWORD(v27);
      *(_DWORD *)(a5 + 8) = v19;
      *(_DWORD *)(a5 + 12) = v20;
      v26 = v28;
      HIDWORD(v27) = 0;
    }
    LODWORD(v27) = 0;
    v13 = v11;
  }
  if (v13 != v28)
    free(v13);
}

uint64_t mlir::detail::Parser::parseAffineMapOrIntegerSetReference(mlir::detail::Parser *this, mlir::AffineMap *a2, mlir::IntegerSet *a3)
{
  mlir::MLIRContext ***v5;
  mlir::MLIRContext ***v6;
  int v7;
  int v8;
  int v9;
  mlir::MLIRContext *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  mlir::MLIRContext ***v14;
  int v15;
  int v16;
  int v18;
  int v19;
  char v20;
  uint64_t AffineConstantExpr;
  _QWORD v22[3];
  void *v23;
  __int128 v24;
  uint64_t v25;
  mlir::MLIRContext *v26;
  mlir::MLIRContext ***v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[96];
  __int128 v34;
  _QWORD v35[2];
  __int16 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v5 = (mlir::MLIRContext ***)*((_QWORD *)this + 1);
  v26 = **v5;
  v27 = v5;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = v33;
  v32 = *(_QWORD *)"";
  v18 = 0;
  v19 = 0;
  *(_QWORD *)&v34 = &v19;
  *((_QWORD *)&v34 + 1) = &v26;
  v6 = v27;
  v7 = *((_DWORD *)v27 + 14);
  if (v7 == 22)
  {
    *(_QWORD *)&v34 = &v18;
    *((_QWORD *)&v34 + 1) = &v26;
    v6 = v27;
    if (*((_DWORD *)v27 + 14) != 13)
    {
LABEL_5:
      *(_QWORD *)&v34 = "expected '->' or ':'";
      v36 = 259;
      if (mlir::detail::Parser::parseToken((uint64_t)&v26, 15, (uint64_t)&v34))
      {
        v8 = v18;
        v9 = v19;
        *(_QWORD *)&v34 = v35;
        *((_QWORD *)&v34 + 1) = *(_QWORD *)"";
        v22[2] = &v23;
        v23 = &v25;
        v24 = xmmword_207A80460;
        v22[0] = &v26;
        v22[1] = &v34;
        {
          if (DWORD2(v34))
          {
            *(_QWORD *)a3 = mlir::IntegerSet::get(v9, v8, (mlir::AffineExpr *)v34, DWORD2(v34), (uint64_t)v23, v24);
            v11 = 1;
            v12 = v23;
            if (v23 == &v25)
              goto LABEL_10;
            goto LABEL_9;
          }
          AffineConstantExpr = mlir::getAffineConstantExpr(0, **v27, v10);
          v11 = 1;
          v20 = 1;
          *(_QWORD *)a3 = mlir::IntegerSet::get(v9, v8, (mlir::AffineExpr *)&AffineConstantExpr, 1, (uint64_t)&v20, 1);
          v12 = v23;
          if (v23 == &v25)
          {
LABEL_10:
            v13 = (void *)v34;
            if ((_QWORD *)v34 == v35)
              goto LABEL_17;
            goto LABEL_16;
          }
        }
        else
        {
          v11 = 0;
          v12 = v23;
          if (v23 == &v25)
            goto LABEL_10;
        }
LABEL_9:
        free(v12);
        goto LABEL_10;
      }
LABEL_12:
      v11 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    v18 = 0;
    if (v7 != 13)
      goto LABEL_5;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v6 + 1), (uint64_t)&v34);
  v14 = v27;
  *(_OWORD *)(v27 + 7) = v34;
  v14[9] = (mlir::MLIRContext **)v35[0];
  v16 = v18;
  v15 = v19;
  *(_QWORD *)&v34 = v35;
  *((_QWORD *)&v34 + 1) = *(_QWORD *)"";
  v23 = &v26;
  *(_QWORD *)&v24 = &v34;
  {
    *(_QWORD *)a2 = mlir::AffineMap::get(v15, v16, v34, DWORD2(v34), **v27);
    v11 = 1;
    v13 = (void *)v34;
    if ((_QWORD *)v34 == v35)
      goto LABEL_17;
    goto LABEL_16;
  }
  v11 = 0;
  v13 = (void *)v34;
  if ((_QWORD *)v34 != v35)
LABEL_16:
    free(v13);
LABEL_17:
  if (v31 != v33)
    free(v31);
  return v11;
}

uint64_t mlir::detail::Parser::parseAffineMapReference(mlir::detail::Parser *this, mlir::AffineMap *a2)
{
  const char *OCGSize;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD *v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)this + 1) + 56));
  v17 = 0;
  if (!mlir::detail::Parser::parseAffineMapOrIntegerSetReference(this, a2, (mlir::IntegerSet *)&v17))
    return 0;
  if (!v17)
    return 1;
  v15 = "expected AffineMap, but got IntegerSet";
  v16 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, OCGSize, (uint64_t)&v15, v18);
  v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
  if (v18[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
  if (v25)
  {
    v6 = __p;
    if (__p)
    {
      v7 = v24;
      v8 = __p;
      if (v24 != __p)
      {
        do
          v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        v8 = __p;
      }
      v24 = v6;
      operator delete(v8);
    }
    v9 = v21;
    if (v21)
    {
      v10 = v22;
      v11 = v21;
      if (v22 != v21)
      {
        do
        {
          v13 = *--v10;
          v12 = v13;
          *v10 = 0;
          if (v13)
            MEMORY[0x20BD002D4](v12, 0x1000C8077774924);
        }
        while (v10 != v9);
        v11 = v21;
      }
      v22 = v9;
      operator delete(v11);
    }
    if (v19 != &v20)
      free(v19);
  }
  return v5;
}

BOOL mlir::detail::Parser::parseAffineExprReference(uint64_t a1, void *__src, uint64_t a3, uint64_t *a4)
{
  unsigned int v7;
  _QWORD **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[13];

  v7 = 0;
  v19[12] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD ***)(a1 + 8);
  v13[0] = **v8;
  v13[1] = v8;
  v14 = 0;
  v15 = 0;
  v9 = 3 * a3;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((24 * a3) >> 3);
  v16 = 0;
  v17 = v19;
  v18 = 0x400000000;
  if (v10 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, 0xAAAAAAAAAAAAAAABLL * ((24 * a3) >> 3), 24);
    v7 = v18;
  }
  if (a3)
  {
    memcpy((char *)v17 + 24 * v7, __src, 8 * v9);
    v7 = v18;
  }
  LODWORD(v18) = v7 + v10;
  *a4 = v11;
  if (v17 != v19)
    free(v17);
  return v11 != 0;
}

uint64_t mlir::detail::Parser::parseIntegerSetReference(mlir::detail::Parser *this, mlir::IntegerSet *a2)
{
  const char *OCGSize;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD *v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)this + 1) + 56));
  v17 = 0;
  if (!mlir::detail::Parser::parseAffineMapOrIntegerSetReference(this, (mlir::AffineMap *)&v17, a2))
    return 0;
  if (!v17)
    return 1;
  v15 = "expected IntegerSet, but got AffineMap";
  v16 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, OCGSize, (uint64_t)&v15, v18);
  v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
  if (v18[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
  if (v25)
  {
    v6 = __p;
    if (__p)
    {
      v7 = v24;
      v8 = __p;
      if (v24 != __p)
      {
        do
          v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        v8 = __p;
      }
      v24 = v6;
      operator delete(v8);
    }
    v9 = v21;
    if (v21)
    {
      v10 = v22;
      v11 = v21;
      if (v22 != v21)
      {
        do
        {
          v13 = *--v10;
          v12 = v13;
          *v10 = 0;
          if (v13)
            MEMORY[0x20BD002D4](v12, 0x1000C8077774924);
        }
        while (v10 != v9);
        v11 = v21;
      }
      v22 = v9;
      operator delete(v11);
    }
    if (v19 != &v20)
      free(v19);
  }
  return v5;
}

uint64_t mlir::detail::Parser::parseAffineMapOfSSAIds(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t **v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[2];
  uint64_t v11;
  uint64_t **v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[96];
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  v6 = *(uint64_t ***)(a1 + 8);
  v11 = **v6;
  v12 = v6;
  v13 = 1;
  v14 = a3;
  v15 = a4;
  v16 = 0;
  v17 = v19;
  v18 = 0x400000000;
  v20 = v22;
  v21 = 0x400000000;
  v10[0] = &v11;
  v10[1] = &v20;
  {
    *a2 = mlir::AffineMap::get(v16, (int)v18 - (int)v16, (uint64_t)v20, v21, (_QWORD *)**v12);
    v7 = 1;
    v8 = v20;
    if (v20 == v22)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = 0;
  v8 = v20;
  if (v20 != v22)
LABEL_3:
    free(v8);
LABEL_4:
  if (v17 != v19)
    free(v17);
  return v7;
}

BOOL mlir::detail::Parser::parseAffineExprOfSSAIds(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD **v5;
  uint64_t v6;
  _QWORD v8[2];
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[13];

  v15[12] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD ***)(a1 + 8);
  v8[0] = **v5;
  v8[1] = v5;
  v9 = 1;
  v10 = a3;
  v11 = a4;
  v12 = 0;
  v13 = v15;
  v14 = 0x400000000;
  *a2 = v6;
  if (v13 != v15)
    free(v13);
  return v6 != 0;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::AffineParser::parseDimIdList(unsigned int &)::$_0>(unsigned int **a1, uint64_t a2, mlir::MLIRContext *a3)
{
  _DWORD *v3;
  uint64_t v4;
  mlir *v5;
  uint64_t AffineDimExpr;

  v3 = *a1;
  v4 = (uint64_t)a1[1];
  v5 = (mlir *)**a1;
  *v3 = (_DWORD)v5 + 1;
  AffineDimExpr = mlir::getAffineDimExpr(v5, ***(mlir::MLIRContext ****)(v4 + 8), a3);
}

uint64_t `anonymous namespace'::AffineParser::parseIdentifierDefinition(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  size_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  BOOL v37;
  char *v38;
  _QWORD v39[4];
  __int16 v40;
  _QWORD v41[4];
  __int16 v42;
  __int128 v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  _QWORD *v48;
  void *__p;
  _QWORD *v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *((_DWORD *)v4 + 14);
  if (v5 == 3 || v5 == 12)
  {
    v8 = (const void *)v4[8];
    v7 = v4[9];
    v9 = a1 + 48;
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_DWORD *)(a1 + 56);
    if (!v11)
    {
LABEL_28:
      mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 1), (uint64_t)&v43);
      v23 = *(_QWORD *)(a1 + 8);
      *(_OWORD *)(v23 + 56) = v43;
      *(_QWORD *)(v23 + 72) = v44;
      *(_QWORD *)&v43 = v8;
      *((_QWORD *)&v43 + 1) = v7;
      v44 = a2;
      v24 = *(unsigned int *)(a1 + 56);
      v25 = *(_QWORD *)(a1 + 48);
      v26 = (char *)&v43;
      if (v24 >= *(_DWORD *)(a1 + 60))
      {
        v36 = v24 + 1;
        v37 = v25 + 24 * v24 > (unint64_t)&v43;
        if (v25 <= (unint64_t)&v43 && v37)
        {
          v38 = (char *)&v43 - v25;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 64), v36, 24);
          v25 = *(_QWORD *)(a1 + 48);
          v26 = &v38[v25];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 64), v36, 24);
          v25 = *(_QWORD *)(a1 + 48);
          v26 = (char *)&v43;
        }
      }
      v27 = v25 + 24 * *(unsigned int *)(a1 + 56);
      v28 = *(_OWORD *)v26;
      *(_QWORD *)(v27 + 16) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v27 = v28;
      ++*(_DWORD *)(a1 + 56);
      return 1;
    }
LABEL_7:
    v12 = v10 + 24 * v11;
    while (*(_QWORD *)(v10 + 8) != v7 || v7 && memcmp(*(const void **)v10, v8, v7))
    {
      v10 += 24;
      if (v10 == v12)
        goto LABEL_28;
    }
    v40 = 1283;
    v39[0] = "redefinition of identifier '";
    v39[2] = v8;
    v39[3] = v7;
    v41[0] = v39;
    v41[2] = "'";
    v42 = 770;
    mlir::detail::Parser::emitError(a1, (uint64_t)v41, &v43);
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v43);
    if ((_QWORD)v43)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
    if (v51)
    {
      v14 = __p;
      if (__p)
      {
        v15 = v50;
        v16 = __p;
        if (v50 != __p)
        {
          do
            v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          v16 = __p;
        }
        v50 = v14;
        operator delete(v16);
      }
      v17 = v47;
      if (!v47)
        goto LABEL_46;
      v18 = v48;
      v19 = v47;
      if (v48 == v47)
      {
LABEL_45:
        v48 = v17;
        operator delete(v19);
LABEL_46:
        if (v45 != &v46)
          free(v45);
        return v13;
      }
      do
      {
        v21 = *--v18;
        v20 = v21;
        *v18 = 0;
        if (v21)
          MEMORY[0x20BD002D4](v20, 0x1000C8077774924);
      }
      while (v18 != v17);
LABEL_44:
      v19 = v47;
      goto LABEL_45;
    }
    return v13;
  }
  if (mlir::Token::isKeyword((mlir::Token *)(v4 + 7)))
  {
    v4 = *(_QWORD **)(a1 + 8);
    v8 = (const void *)v4[8];
    v7 = v4[9];
    v9 = a1 + 48;
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_DWORD *)(a1 + 56);
    if (!v11)
      goto LABEL_28;
    goto LABEL_7;
  }
  v41[0] = "expected bare identifier";
  v42 = 259;
  mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v41, &v43);
  v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v43);
  if ((_QWORD)v43)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
  if (v51)
  {
    v29 = __p;
    if (__p)
    {
      v30 = v50;
      v31 = __p;
      if (v50 != __p)
      {
        do
          v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
        while (v30 != v29);
        v31 = __p;
      }
      v50 = v29;
      operator delete(v31);
    }
    v17 = v47;
    if (!v47)
      goto LABEL_46;
    v32 = v48;
    v19 = v47;
    if (v48 == v47)
      goto LABEL_45;
    do
    {
      v34 = *--v32;
      v33 = v34;
      *v32 = 0;
      if (v34)
        MEMORY[0x20BD002D4](v33, 0x1000C8077774924);
    }
    while (v32 != v17);
    goto LABEL_44;
  }
  return v13;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::AffineParser::parseSymbolIdList(unsigned int &)::$_0>(unsigned int **a1, uint64_t a2, mlir::MLIRContext *a3)
{
  _DWORD *v3;
  uint64_t v4;
  mlir *v5;
  uint64_t AffineSymbolExpr;

  v3 = *a1;
  v4 = (uint64_t)a1[1];
  v5 = (mlir *)**a1;
  *v3 = (_DWORD)v5 + 1;
  AffineSymbolExpr = mlir::getAffineSymbolExpr(v5, ***(mlir::MLIRContext ****)(v4 + 8), a3);
}

BOOL llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::AffineParser::parseAffineMapRange(unsigned int,unsigned int,mlir::AffineMap &)::$_0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v3 + 8);
  }
  result = v2 != 0;
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = v2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

uint64_t `anonymous namespace'::AffineParser::parseAffineLowPrecOpExpr(_anonymous_namespace_::AffineParser *a1, uint64_t a2, int a3)
{
  mlir::MLIRContext **v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _anonymous_namespace_::AffineParser *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  mlir::MLIRContext **v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  if (v6)
  {
    v7 = *((_QWORD *)a1 + 1);
    v8 = *(_DWORD *)(v7 + 56);
    if (v8 == 24)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v29);
      v12 = *((_QWORD *)a1 + 1);
      *(_OWORD *)(v12 + 56) = v29;
      *(_QWORD *)(v12 + 72) = v30;
      v10 = 2;
      if (a2)
        goto LABEL_5;
      goto LABEL_8;
    }
    if (v8 == 25)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v29);
      v9 = *((_QWORD *)a1 + 1);
      *(_OWORD *)(v9 + 56) = v29;
      *(_QWORD *)(v9 + 72) = v30;
      v10 = 1;
      if (a2)
      {
LABEL_5:
        *(_QWORD *)&v29 = a2;
        if (a3 == 1)
          v11 = mlir::AffineExpr::operator+((unint64_t *)&v29, (uint64_t)v6);
        else
          v11 = mlir::AffineExpr::operator-((unint64_t *)&v29, v6);
        v14 = v11;
        v13 = a1;
        goto LABEL_17;
      }
LABEL_8:
      v13 = a1;
      v14 = (uint64_t)v6;
LABEL_17:
      v20 = v10;
    }
    MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(v7 + 56));
    if (!v15)
    {
      if (!a2)
        return (uint64_t)v6;
      *(_QWORD *)&v29 = a2;
      if (a3 == 1)
        return mlir::AffineExpr::operator+((unint64_t *)&v29, (uint64_t)v6);
      else
        return mlir::AffineExpr::operator-((unint64_t *)&v29, v6);
    }
    v16 = v15;
    {
      while (1)
      {
        MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)a1 + 1) + 56));
        if (!v17)
          break;
        v18 = v16;
        v16 = v17;
        v6 = (mlir::MLIRContext **)v19;
        if (!v19)
          return (uint64_t)v6;
          return 0;
      }
      v6 = v23;
      if (v23)
      {
        if (a2)
        {
          *(_QWORD *)&v29 = a2;
          if (a3 == 1)
            v24 = mlir::AffineExpr::operator+((unint64_t *)&v29, (uint64_t)v23);
          else
            v24 = mlir::AffineExpr::operator-((unint64_t *)&v29, v23);
          v6 = (mlir::MLIRContext **)v24;
        }
        v25 = *((_QWORD *)a1 + 1);
        v26 = *(_DWORD *)(v25 + 56);
        if (v26 == 24)
        {
          mlir::Lexer::lexToken((mlir::Lexer *)(v25 + 8), (uint64_t)&v29);
          v28 = *((_QWORD *)a1 + 1);
          *(_OWORD *)(v28 + 56) = v29;
          *(_QWORD *)(v28 + 72) = v30;
          v20 = 2;
        }
        else
        {
          if (v26 != 25)
            return (uint64_t)v6;
          mlir::Lexer::lexToken((mlir::Lexer *)(v25 + 8), (uint64_t)&v29);
          v27 = *((_QWORD *)a1 + 1);
          *(_OWORD *)(v27 + 56) = v29;
          *(_QWORD *)(v27 + 72) = v30;
          v20 = 1;
        }
        v13 = a1;
        v14 = (uint64_t)v6;
      }
    }
    else
    {
      return 0;
    }
  }
  return (uint64_t)v6;
}

uint64_t `anonymous namespace'::AffineParser::parseAffineOperandExpr(_anonymous_namespace_::AffineParser *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t UInt64IntegerValue;
  char v23;
  mlir *v24;
  uint64_t v25;
  mlir::MLIRContext *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  mlir::MLIRContext **v35;
  uint64_t v36;
  const char *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  mlir::MLIRContext **v52;
  mlir::MLIRContext ***v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  _QWORD *v63;
  _QWORD *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int16 v70;
  _QWORD v71[17];
  void *v72;
  _QWORD *v73;
  void *v74;
  _QWORD *v75;
  char v76;
  _QWORD v77[17];
  void *v78;
  _QWORD *v79;
  void *v80;
  _QWORD *v81;
  char v82;
  _QWORD v83[17];
  void *v84;
  _QWORD *v85;
  void *v86;
  _QWORD *v87;
  char v88;
  _QWORD v89[17];
  void *v90;
  _QWORD *v91;
  void *__p;
  _QWORD *v93;
  char v94;
  mlir::MLIRContext **v95[4];
  __int16 v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  char v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a1 + 1);
  switch(*(_DWORD *)(v4 + 56))
  {
    case 3:
    case 0xC:
    case 0x27:
    case 0x37:
    case 0x3F:
    case 6:
    case 0xA:
      UInt64IntegerValue = mlir::Token::getUInt64IntegerValue(*(unsigned __int8 **)(v4 + 64), *(_QWORD *)(v4 + 72));
      if (v23)
      {
        v24 = (mlir *)UInt64IntegerValue;
        if ((UInt64IntegerValue & 0x8000000000000000) == 0)
        {
          mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)a1 + 1) + 8), (uint64_t)&v68);
          v25 = *((_QWORD *)a1 + 1);
          *(_OWORD *)(v25 + 56) = v68;
          *(_QWORD *)(v25 + 72) = v69;
          return mlir::Builder::getAffineConstantExpr((mlir::MLIRContext **)a1, v24, v26);
        }
      }
      *(_QWORD *)&v68 = "constant too large for index";
      v70 = 259;
      mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)&v68, v95);
      if (v95[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v95);
      if (!v101)
        return 0;
      v46 = v99;
      if (v99)
      {
        v47 = v100;
        v48 = v99;
        if (v100 != v99)
        {
          do
            v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
          while (v47 != v46);
          v48 = v99;
        }
        v100 = v46;
        operator delete(v48);
      }
      v30 = v97;
      if (!v97)
        goto LABEL_113;
      v49 = v98;
      v32 = v97;
      if (v98 == v97)
        goto LABEL_112;
      do
      {
        v51 = *--v49;
        v50 = v51;
        *v49 = 0;
        if (v51)
          MEMORY[0x20BD002D4](v50, 0x1000C8077774924);
      }
      while (v49 != v30);
      goto LABEL_111;
    case 0x15:
      v95[0] = (mlir::MLIRContext **)"expected '('";
      v96 = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)a1, 21, (uint64_t)v95))
        return 0;
      if (*(_DWORD *)(*((_QWORD *)a1 + 1) + 56) != 28)
      {
        if (result)
        {
          v36 = result;
          v37 = "expected ')'";
LABEL_91:
          v95[0] = (mlir::MLIRContext **)v37;
          v96 = 259;
          if (mlir::detail::Parser::parseToken((uint64_t)a1, 28, (uint64_t)v95))
            return v36;
          else
            return 0;
        }
        return result;
      }
      *(_QWORD *)&v68 = "no expression inside parentheses";
      v70 = 259;
      mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)&v68, v95);
      if (v95[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v95);
      if (!v101)
        return 0;
      v27 = v99;
      if (v99)
      {
        v28 = v100;
        v29 = v99;
        if (v100 != v99)
        {
          do
            v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          v29 = v99;
        }
        v100 = v27;
        operator delete(v29);
      }
      v30 = v97;
      if (!v97)
        goto LABEL_113;
      v31 = v98;
      v32 = v97;
      if (v98 == v97)
        goto LABEL_112;
      do
      {
        v34 = *--v31;
        v33 = v34;
        *v31 = 0;
        if (v34)
          MEMORY[0x20BD002D4](v33, 0x1000C8077774924);
      }
      while (v31 != v30);
      goto LABEL_111;
    case 0x18:
      v95[0] = (mlir::MLIRContext **)"expected '-'";
      v96 = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)a1, 24, (uint64_t)v95))
        return 0;
      if (v35)
      {
        v95[0] = v35;
        return mlir::AffineExpr::operator*(v95, -1);
      }
      *(_QWORD *)&v68 = "missing operand of negation";
      v70 = 259;
      mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)&v68, v95);
      if (v95[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v95);
      if (!v101)
        return 0;
      v54 = v99;
      if (v99)
      {
        v55 = v100;
        v56 = v99;
        if (v100 != v99)
        {
          do
            v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
          while (v55 != v54);
          v56 = v99;
        }
        v100 = v54;
        operator delete(v56);
      }
      v30 = v97;
      if (v97)
      {
        v57 = v98;
        v32 = v97;
        if (v98 != v97)
        {
          do
          {
            v59 = *--v57;
            v58 = v59;
            *v57 = 0;
            if (v59)
              MEMORY[0x20BD002D4](v58, 0x1000C8077774924);
          }
          while (v57 != v30);
LABEL_111:
          v32 = v97;
        }
LABEL_112:
        v98 = v30;
        operator delete(v32);
      }
LABEL_113:
      v52 = v95[3];
      v53 = v95;
      goto LABEL_137;
    case 0x19:
    case 0x1E:
      if (a2)
      {
        v95[0] = (mlir::MLIRContext **)"missing right operand of binary operator";
        v96 = 259;
        mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)v95, v89);
        if (v89[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v89);
        if (v94)
        {
          v6 = __p;
          if (__p)
          {
            v7 = v93;
            v8 = __p;
            if (v93 != __p)
            {
              do
                v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
              while (v7 != v6);
              v8 = __p;
            }
            v93 = v6;
            operator delete(v8);
          }
          v9 = v90;
          if (v90)
          {
            v10 = v91;
            v11 = v90;
            if (v91 != v90)
            {
              do
              {
                v13 = *--v10;
                v12 = v13;
                *v10 = 0;
                if (v13)
                  MEMORY[0x20BD002D4](v12, 0x1000C8077774924);
              }
              while (v10 != v9);
              v11 = v90;
            }
            v91 = v9;
            operator delete(v11);
          }
          v52 = (mlir::MLIRContext **)v89[3];
          v53 = (mlir::MLIRContext ***)v89;
          goto LABEL_137;
        }
      }
      else
      {
        v95[0] = (mlir::MLIRContext **)"missing left operand of binary operator";
        v96 = 259;
        mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)v95, v83);
        if (v83[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v83);
        if (v88)
        {
          v38 = v86;
          if (v86)
          {
            v39 = v87;
            v40 = v86;
            if (v87 != v86)
            {
              do
                v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
              while (v39 != v38);
              v40 = v86;
            }
            v87 = v38;
            operator delete(v40);
          }
          v41 = v84;
          if (v84)
          {
            v42 = v85;
            v43 = v84;
            if (v85 != v84)
            {
              do
              {
                v45 = *--v42;
                v44 = v45;
                *v42 = 0;
                if (v45)
                  MEMORY[0x20BD002D4](v44, 0x1000C8077774924);
              }
              while (v42 != v41);
              v43 = v84;
            }
            v85 = v41;
            operator delete(v43);
          }
          v52 = (mlir::MLIRContext **)v83[3];
          v53 = (mlir::MLIRContext ***)v83;
          goto LABEL_137;
        }
      }
      return 0;
    case 0x46:
      v95[0] = (mlir::MLIRContext **)"expected symbol keyword";
      v96 = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)a1, 70, (uint64_t)v95))
        return 0;
      *(_QWORD *)&v68 = "expected '(' at start of SSA symbol";
      v70 = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)a1, 21, (uint64_t)&v68))
        return 0;
      if (!result)
        return result;
      v36 = result;
      v37 = "expected ')' at end of SSA symbol";
      goto LABEL_91;
    default:
      if (mlir::Token::isKeyword((mlir::Token *)(v4 + 56)))
      if (a2)
      {
        v95[0] = (mlir::MLIRContext **)"missing right operand of binary operator";
        v96 = 259;
        mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)v95, v77);
        if (v77[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v77);
        if (v82)
        {
          v14 = v80;
          if (v80)
          {
            v15 = v81;
            v16 = v80;
            if (v81 != v80)
            {
              do
                v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
              while (v15 != v14);
              v16 = v80;
            }
            v81 = v14;
            operator delete(v16);
          }
          v17 = v78;
          if (v78)
          {
            v18 = v79;
            v19 = v78;
            if (v79 != v78)
            {
              do
              {
                v21 = *--v18;
                v20 = v21;
                *v18 = 0;
                if (v21)
                  MEMORY[0x20BD002D4](v20, 0x1000C8077774924);
              }
              while (v18 != v17);
              v19 = v78;
            }
            v79 = v17;
            operator delete(v19);
          }
          v52 = (mlir::MLIRContext **)v77[3];
          v53 = (mlir::MLIRContext ***)v77;
LABEL_137:
          if (v52 != (mlir::MLIRContext **)(v53 + 5))
            free(v52);
        }
      }
      else
      {
        v95[0] = (mlir::MLIRContext **)"expected affine expression";
        v96 = 259;
        mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)v95, v71);
        if (v71[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v71);
        if (v76)
        {
          v60 = v74;
          if (v74)
          {
            v61 = v75;
            v62 = v74;
            if (v75 != v74)
            {
              do
                v61 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v61 - 1);
              while (v61 != v60);
              v62 = v74;
            }
            v75 = v60;
            operator delete(v62);
          }
          v63 = v72;
          if (v72)
          {
            v64 = v73;
            v65 = v72;
            if (v73 != v72)
            {
              do
              {
                v67 = *--v64;
                v66 = v67;
                *v64 = 0;
                if (v67)
                  MEMORY[0x20BD002D4](v66, 0x1000C8077774924);
              }
              while (v64 != v63);
              v65 = v72;
            }
            v73 = v63;
            operator delete(v65);
          }
          v52 = (mlir::MLIRContext **)v71[3];
          v53 = (mlir::MLIRContext ***)v71;
          goto LABEL_137;
        }
      }
      return 0;
  }
}

uint64_t `anonymous namespace'::AffineParser::consumeIfHighPrecOp(_anonymous_namespace_::AffineParser *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  result = 0;
  v3 = *((_QWORD *)this + 1);
  switch(*(_DWORD *)(v3 + 56))
  {
    case 0x1E:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
      v4 = *((_QWORD *)this + 1);
      *(_OWORD *)(v4 + 56) = v8;
      *(_QWORD *)(v4 + 72) = v9;
      result = 1;
      break;
    case 0x27:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
      v5 = *((_QWORD *)this + 1);
      *(_OWORD *)(v5 + 56) = v8;
      *(_QWORD *)(v5 + 72) = v9;
      result = 3;
      break;
    case 0x37:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
      v6 = *((_QWORD *)this + 1);
      *(_OWORD *)(v6 + 56) = v8;
      *(_QWORD *)(v6 + 72) = v9;
      result = 2;
      break;
    case 0x3F:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
      v7 = *((_QWORD *)this + 1);
      *(_OWORD *)(v7 + 56) = v8;
      *(_QWORD *)(v7 + 72) = v9;
      result = 4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t `anonymous namespace'::AffineParser::parseSSAIdExpr(_anonymous_namespace_::AffineParser *this, uint64_t a2)
{
  uint64_t v3;
  size_t v5;
  const void *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  mlir::MLIRContext *v30;
  mlir *v31;
  uint64_t AffineSymbolExpr;
  void *v33;
  mlir *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  BOOL v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  __int16 v46;
  _QWORD v47[3];
  uint64_t *v48;
  uint64_t v49;
  void *v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  char v54;
  _QWORD v55[3];
  void *v56;
  uint64_t v57;
  void *v58;
  _QWORD *v59;
  void *__p;
  _QWORD *v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 16))
  {
    *(_QWORD *)&v44 = "unexpected ssa identifier";
    v46 = 259;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v44, v55);
    if (v55[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    if (!v62)
      return 0;
    v14 = __p;
    if (__p)
    {
      v15 = v61;
      v16 = __p;
      if (v61 != __p)
      {
        do
          v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        v16 = __p;
      }
      v61 = v14;
      operator delete(v16);
    }
    v17 = v58;
    if (v58)
    {
      v18 = v59;
      v19 = v58;
      if (v59 != v58)
      {
        do
        {
          v21 = *--v18;
          v20 = v21;
          *v18 = 0;
          if (v21)
            MEMORY[0x20BD002D4](v20, 0x1000C8077774924);
        }
        while (v18 != v17);
        v19 = v58;
      }
      v59 = v17;
      operator delete(v19);
    }
    v33 = v56;
    if (v56 == &v57)
      return 0;
LABEL_44:
    free(v33);
    return 0;
  }
  v3 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v3 + 56) != 6)
  {
    *(_QWORD *)&v44 = "expected ssa identifier";
    v46 = 259;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v44, v47);
    if (v47[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
    if (!v54)
      return 0;
    v22 = v52;
    if (v52)
    {
      v23 = v53;
      v24 = v52;
      if (v53 != v52)
      {
        do
          v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        v24 = v52;
      }
      v53 = v22;
      operator delete(v24);
    }
    v25 = v50;
    if (v50)
    {
      v26 = v51;
      v27 = v50;
      if (v51 != v50)
      {
        do
        {
          v29 = *--v26;
          v28 = v29;
          *v26 = 0;
          if (v29)
            MEMORY[0x20BD002D4](v28, 0x1000C8077774924);
        }
        while (v26 != v25);
        v27 = v50;
      }
      v51 = v25;
      operator delete(v27);
    }
    v33 = v48;
    if (v48 == &v49)
      return 0;
    goto LABEL_44;
  }
  v6 = *(const void **)(v3 + 64);
  v5 = *(_QWORD *)(v3 + 72);
  v7 = *((_QWORD *)this + 6);
  v8 = *((_DWORD *)this + 14);
  if (!v8)
  {
LABEL_38:
    if ((*((unsigned __int8 (**)(_QWORD, uint64_t))this + 3))(*((_QWORD *)this + 4), a2))
    {
      if ((_DWORD)a2)
      {
        v31 = (mlir *)*((unsigned int *)this + 11);
        *((_DWORD *)this + 11) = (_DWORD)v31 + 1;
        AffineSymbolExpr = mlir::getAffineSymbolExpr(v31, ***((mlir::MLIRContext ****)this + 1), v30);
      }
      else
      {
        v35 = (mlir *)*((unsigned int *)this + 10);
        *((_DWORD *)this + 10) = (_DWORD)v35 + 1;
        AffineSymbolExpr = mlir::getAffineDimExpr(v35, ***((mlir::MLIRContext ****)this + 1), v30);
      }
      v12 = AffineSymbolExpr;
      *(_QWORD *)&v44 = v6;
      *((_QWORD *)&v44 + 1) = v5;
      v45 = AffineSymbolExpr;
      v36 = *((unsigned int *)this + 14);
      v37 = *((_QWORD *)this + 6);
      v38 = (char *)&v44;
      if (v36 >= *((_DWORD *)this + 15))
      {
        v41 = v36 + 1;
        v42 = v37 + 24 * v36 > (unint64_t)&v44;
        if (v37 <= (unint64_t)&v44 && v42)
        {
          v43 = (char *)&v44 - v37;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 48, (char *)this + 64, v41, 24);
          v37 = *((_QWORD *)this + 6);
          v38 = &v43[v37];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 48, (char *)this + 64, v41, 24);
          v37 = *((_QWORD *)this + 6);
          v38 = (char *)&v44;
        }
      }
      v39 = v37 + 24 * *((unsigned int *)this + 14);
      v40 = *(_OWORD *)v38;
      *(_QWORD *)(v39 + 16) = *((_QWORD *)v38 + 2);
      *(_OWORD *)v39 = v40;
      ++*((_DWORD *)this + 14);
      return v12;
    }
    return 0;
  }
  v9 = (uint64_t *)(v7 + 24 * v8);
  v10 = (uint64_t *)(v7 + 16);
  while (1)
  {
    v11 = v10 - 2;
    if (*(v10 - 1) == v5 && (!v5 || !memcmp((const void *)*(v10 - 2), v6, v5)))
      break;
    v10 += 3;
    if (v11 + 3 == v9)
      goto LABEL_38;
  }
  v12 = *v10;
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v44);
  v13 = *((_QWORD *)this + 1);
  *(_OWORD *)(v13 + 56) = v44;
  *(_QWORD *)(v13 + 72) = v45;
  return v12;
}

uint64_t `anonymous namespace'::AffineParser::parseBareIdExpr(_anonymous_namespace_::AffineParser *this)
{
  _QWORD *v2;
  int v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  size_t v8;
  const void *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  __int128 v33;
  uint64_t v34;
  __int16 v35;
  _QWORD v36[3];
  void *v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  void *__p;
  _QWORD *v42;
  char v43;
  _QWORD v44[3];
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  _QWORD *v48;
  void *v49;
  _QWORD *v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = *((_DWORD *)v2 + 14);
  if (v3 == 3 || v3 == 12)
  {
    v5 = *((_DWORD *)this + 14);
    if (!v5)
      goto LABEL_15;
  }
  else
  {
    if (!mlir::Token::isKeyword((mlir::Token *)(v2 + 7)))
    {
      *(_QWORD *)&v33 = "expected bare identifier";
      v35 = 259;
      mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v33, v44);
      if (v44[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v44);
      if (!v51)
        return 0;
      v23 = v49;
      if (v49)
      {
        v24 = v50;
        v25 = v49;
        if (v50 != v49)
        {
          do
            v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
          while (v24 != v23);
          v25 = v49;
        }
        v50 = v23;
        operator delete(v25);
      }
      v26 = v47;
      if (v47)
      {
        v27 = v48;
        v28 = v47;
        if (v48 != v47)
        {
          do
          {
            v30 = *--v27;
            v29 = v30;
            *v27 = 0;
            if (v30)
              MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
          }
          while (v27 != v26);
          v28 = v47;
        }
        v48 = v26;
        operator delete(v28);
      }
      v31 = v45;
      if (v45 == &v46)
        return 0;
LABEL_46:
      free(v31);
      return 0;
    }
    v2 = (_QWORD *)*((_QWORD *)this + 1);
    v5 = *((_DWORD *)this + 14);
    if (!v5)
    {
LABEL_15:
      *(_QWORD *)&v33 = "use of undeclared identifier";
      v35 = 259;
      mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v33, v36);
      if (v36[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v36);
      if (!v43)
        return 0;
      v15 = __p;
      if (__p)
      {
        v16 = v42;
        v17 = __p;
        if (v42 != __p)
        {
          do
            v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          v17 = __p;
        }
        v42 = v15;
        operator delete(v17);
      }
      v18 = v39;
      if (v39)
      {
        v19 = v40;
        v20 = v39;
        if (v40 != v39)
        {
          do
          {
            v22 = *--v19;
            v21 = v22;
            *v19 = 0;
            if (v22)
              MEMORY[0x20BD002D4](v21, 0x1000C8077774924);
          }
          while (v19 != v18);
          v20 = v39;
        }
        v40 = v18;
        operator delete(v20);
      }
      v31 = v37;
      if (v37 == &v38)
        return 0;
      goto LABEL_46;
    }
  }
  v6 = *((_QWORD *)this + 6);
  v7 = (uint64_t *)(v6 + 24 * v5);
  v9 = (const void *)v2[8];
  v8 = v2[9];
  v10 = (uint64_t *)(v6 + 16);
  while (1)
  {
    v11 = v10 - 2;
    if (*(v10 - 1) == v8 && (!v8 || !memcmp((const void *)*(v10 - 2), v9, v8)))
      break;
    v10 += 3;
    if (v11 + 3 == v7)
      goto LABEL_15;
  }
  v12 = *v10;
  mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 1), (uint64_t)&v33);
  v13 = *((_QWORD *)this + 1);
  *(_OWORD *)(v13 + 56) = v33;
  *(_QWORD *)(v13 + 72) = v34;
  return v12;
}

void `anonymous namespace'::AffineParser::getAffineBinaryOpExpr(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t sub_2071FD5F8()
{
  const char *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  unint64_t v18[104];

  mlir::AffineExpr::isSymbolicOrConstant((mlir::AffineExpr *)v18);
  if ((v3 & 1) != 0)
    return mlir::AffineExpr::operator*(v18, v17);
  mlir::AffineExpr::isSymbolicOrConstant((mlir::AffineExpr *)&v17);
  if ((v4 & 1) != 0)
    return mlir::AffineExpr::operator*(v18, v17);
  v15 = "non-affine expression: at least one of the multiply operands has to be either a constant or symbolic";
  v16 = 259;
  mlir::detail::Parser::emitError(v1, v0, (uint64_t)&v15, (_QWORD *)(v2 - 232));
  if (*(_QWORD *)(v2 - 232))
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)(v2 - 232));
  if (*(_BYTE *)(v2 - 48))
  {
    v6 = *(_QWORD **)(v2 - 72);
    if (v6)
    {
      v7 = *(_QWORD **)(v2 - 64);
      v8 = *(void **)(v2 - 72);
      if (v7 != v6)
      {
        do
          v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        v8 = *(void **)(v2 - 72);
      }
      *(_QWORD *)(v2 - 64) = v6;
      operator delete(v8);
    }
    v9 = *(_QWORD **)(v2 - 96);
    if (v9)
    {
      v10 = *(_QWORD **)(v2 - 88);
      v11 = *(void **)(v2 - 96);
      if (v10 != v9)
      {
        do
        {
          v13 = *--v10;
          v12 = v13;
          *v10 = 0;
          if (v13)
            MEMORY[0x20BD002D4](v12, 0x1000C8077774924);
        }
        while (v10 != v9);
        v11 = *(void **)(v2 - 96);
      }
      *(_QWORD *)(v2 - 88) = v9;
      operator delete(v11);
    }
    v14 = *(void **)(v2 - 208);
    if (v14 != (void *)(v2 - 192))
      free(v14);
  }
  return 0;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::AffineParser::parseIntegerSetConstraints(unsigned int,unsigned int,mlir::IntegerSet &)::$_0>(uint64_t a1)
{
  _anonymous_namespace_::AffineParser *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  mlir::MLIRContext **v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  mlir::MLIRContext **v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int16 v35;
  mlir::MLIRContext **v36;
  _QWORD v37[3];
  void *v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  void *__p;
  _QWORD *v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v2 = *(_anonymous_namespace_::AffineParser **)a1;
  if (!v36)
    return 0;
  v3 = *((_QWORD *)v2 + 1);
  v4 = *(_DWORD *)(v3 + 56);
  if (v4 != 19
    || (mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v33),
        v5 = *((_QWORD *)v2 + 1),
        *(_OWORD *)(v5 + 56) = v33,
        *(_QWORD *)(v5 + 72) = v34,
        v3 = *((_QWORD *)v2 + 1),
        v4 = *(_DWORD *)(v3 + 56),
        v4 != 18))
  {
    if (v4 == 18)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v33);
      v13 = *((_QWORD *)v2 + 1);
      *(_OWORD *)(v13 + 56) = v33;
      *(_QWORD *)(v13 + 72) = v34;
      v14 = *((_QWORD *)v2 + 1);
      if (*(_DWORD *)(v14 + 56) == 18)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v14 + 8), (uint64_t)&v33);
        v15 = *((_QWORD *)v2 + 1);
        *(_OWORD *)(v15 + 56) = v33;
        *(_QWORD *)(v15 + 72) = v34;
        if (!v16)
          return 0;
        v8 = mlir::AffineExpr::operator-((unint64_t *)&v36, v16);
        v9 = 1;
        if (!v8)
          return 0;
        goto LABEL_37;
      }
    }
    else if (v4 == 23)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v33);
      v10 = *((_QWORD *)v2 + 1);
      *(_OWORD *)(v10 + 56) = v33;
      *(_QWORD *)(v10 + 72) = v34;
      v11 = *((_QWORD *)v2 + 1);
      if (*(_DWORD *)(v11 + 56) == 18)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v11 + 8), (uint64_t)&v33);
        v12 = *((_QWORD *)v2 + 1);
        *(_OWORD *)(v12 + 56) = v33;
        *(_QWORD *)(v12 + 72) = v34;
        if (!(_QWORD)v33)
          return 0;
        v8 = mlir::AffineExpr::operator-((unint64_t *)&v33, v36);
        v9 = 0;
        if (!v8)
          return 0;
        goto LABEL_37;
      }
    }
    *(_QWORD *)&v33 = "expected '== affine-expr' or '>= affine-expr' at end of affine constraint";
    v35 = 259;
    mlir::detail::Parser::emitError((uint64_t)v2, (uint64_t)&v33, v37);
    if (v37[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    if (v44)
    {
      v17 = __p;
      if (__p)
      {
        v18 = v43;
        v19 = __p;
        if (v43 != __p)
        {
          do
            v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          v19 = __p;
        }
        v43 = v17;
        operator delete(v19);
      }
      v20 = v40;
      if (v40)
      {
        v21 = v41;
        v22 = v40;
        if (v41 != v40)
        {
          do
          {
            v24 = *--v21;
            v23 = v24;
            *v21 = 0;
            if (v24)
              MEMORY[0x20BD002D4](v23, 0x1000C8077774924);
          }
          while (v21 != v20);
          v22 = v40;
        }
        v41 = v20;
        operator delete(v22);
      }
      if (v38 != &v39)
        free(v38);
    }
    return 0;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v33);
  v6 = *((_QWORD *)v2 + 1);
  *(_OWORD *)(v6 + 56) = v33;
  *(_QWORD *)(v6 + 72) = v34;
  if (!v7)
    return 0;
  v8 = mlir::AffineExpr::operator-((unint64_t *)&v36, v7);
  v9 = 0;
  if (!v8)
    return 0;
LABEL_37:
  v26 = *(_QWORD *)(a1 + 8);
  v27 = *(unsigned int *)(v26 + 8);
  if (v27 >= *(_DWORD *)(v26 + 12))
  {
    v32 = *(_QWORD *)(a1 + 8);
    v31 = v9;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v26, (void *)(v26 + 16), v27 + 1, 8);
    v9 = v31;
    v26 = v32;
    LODWORD(v27) = *(_DWORD *)(v32 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v26 + 8 * v27) = v8;
  ++*(_DWORD *)(v26 + 8);
  v28 = *(_QWORD **)(a1 + 16);
  v29 = v28[1];
  if ((unint64_t)(v29 + 1) > v28[2])
  {
    v30 = v9;
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v28, v28 + 3, v29 + 1, 1);
    v9 = v30;
    v29 = v28[1];
  }
  *(_BYTE *)(*v28 + v29) = v9;
  ++v28[1];
  return 1;
}

BOOL llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::AffineParser::parseAffineMapOfSSAIds(mlir::AffineMap &,mlir::AsmParser::Delimiter)::$_0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = v2;
  ++*(_DWORD *)(v3 + 8);
  return v2 != 0;
}

__n128 *std::vector<llvm::SourceMgr::SrcBuffer>::__push_back_slow_path<llvm::SourceMgr::SrcBuffer>(__n128 **a1, __n128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __n128 *v8;
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  llvm::SourceMgr::SrcBuffer *v13;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 3) > v3)
    v3 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (__n128 *)&v7[24 * v6];
  llvm::SourceMgr::SrcBuffer::SrcBuffer((__n128 *)&v7[24 * v2], a2);
  v10 = (__n128 *)((char *)v9 + 24);
  v12 = *a1;
  v11 = a1[1];
  if (v11 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v8;
    if (!v11)
      return v10;
    goto LABEL_16;
  }
  do
  {
    v11 = (__n128 *)((char *)v11 - 24);
    llvm::SourceMgr::SrcBuffer::SrcBuffer((__n128 *)((char *)v9 - 24), v11);
  }
  while (v11 != v12);
  v11 = *a1;
  v13 = (llvm::SourceMgr::SrcBuffer *)a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v8;
  while (v13 != (llvm::SourceMgr::SrcBuffer *)v11)
  {
    v13 = (llvm::SourceMgr::SrcBuffer *)((char *)v13 - 24);
    llvm::SourceMgr::SrcBuffer::~SrcBuffer(v13);
  }
  if (v11)
LABEL_16:
    operator delete(v11);
  return v10;
}

void mlir::detail::SymbolState::~SymbolState(llvm **this)
{
  llvm::deallocate_buffer(this[9], (void *)(16 * *((unsigned int *)this + 22)));
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>,mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>::destroyAll(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm *v6;
  uint64_t v8;

  v1 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v1)
  {
    v2 = *a1;
    v3 = *a1 + 32 * v1;
    do
    {
      if ((*(_QWORD *)v2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (*(_DWORD *)(v2 + 20))
        {
          v4 = *(unsigned int *)(v2 + 16);
          if ((_DWORD)v4)
          {
            v5 = 0;
            do
            {
              v6 = *(llvm **)(*(_QWORD *)(v2 + 8) + v5);
              if (v6 != (llvm *)-8 && v6 != 0)
              {
                v8 = *(_QWORD *)v6;
                if (*((char *)v6 + 31) < 0)
                  operator delete(*((void **)v6 + 1));
                llvm::deallocate_buffer(v6, (void *)(v8 + 57));
              }
              v5 += 8;
            }
            while (8 * v4 != v5);
          }
        }
        free(*(void **)(v2 + 8));
      }
      v2 += 32;
    }
    while (v2 != v3);
  }
}

void mlir::AsmParserState::Impl::resolveSymbolUses(mlir::AsmParserState::Impl *this)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[7];

  v36[6] = *MEMORY[0x24BDAC8D0];
  v34 = v36;
  v35 = 0x600000000;
  v1 = *((unsigned int *)this + 96);
  if ((_DWORD)v1)
  {
    v3 = (uint64_t *)*((_QWORD *)this + 47);
    v4 = &v3[2 * v1];
    v32 = (char *)this + 568;
    v33 = v4;
    while (1)
    {
      v5 = v3[1];
      if (*(_DWORD *)(v5 + 8))
        break;
LABEL_3:
      v3 += 2;
      if (v3 == v4)
      {
        if (v34 != v36)
          free(v34);
        return;
      }
    }
    v6 = *(_QWORD *)v5;
    v7 = *(unsigned int *)(v5 + 16);
    if ((_DWORD)v7)
    {
      v8 = 24 * v7;
      v9 = v6;
      while ((*(_QWORD *)v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v9 += 24;
        v8 -= 24;
        if (!v8)
          goto LABEL_3;
      }
    }
    else
    {
      v9 = v6;
    }
    v10 = v6 + 24 * v7;
    while (1)
    {
      if (v9 == v10)
        goto LABEL_3;
      LODWORD(v35) = 0;
      if (mlir::SymbolTableCollection::lookupSymbolIn((uint64_t)v32, *v3, *(_QWORD *)v9, (uint64_t)&v34))
      {
        v11 = *(unsigned int *)(v9 + 16);
        if ((_DWORD)v11)
          break;
      }
LABEL_36:
      v9 += 24;
      v4 = v33;
      if (v9 == v10)
        goto LABEL_3;
      while ((*(_QWORD *)v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v9 += 24;
        if (v9 == v10)
          goto LABEL_3;
      }
    }
    v12 = *(_QWORD *)(v9 + 8);
    v13 = v12 + (v11 << 6);
    while (1)
    {
      v14 = *(unsigned int *)(v12 + 8);
      if ((_DWORD)v35 && (_DWORD)v14 != 0)
        break;
LABEL_16:
      v12 += 64;
      if (v12 == v13)
        goto LABEL_36;
    }
    v16 = *(__int128 **)v12;
    v17 = v34;
    v18 = (char *)v34 + 8 * v35;
    v19 = *(_QWORD *)v12 + 16 * v14;
    while (1)
    {
      v20 = *((_QWORD *)this + 8);
      v21 = *((unsigned int *)this + 20);
      if (!(_DWORD)v21)
        goto LABEL_28;
      LODWORD(v22) = ((*v17 >> 4) ^ (*v17 >> 9)) & (v21 - 1);
      v23 = (uint64_t *)(v20 + 16 * v22);
      v24 = *v23;
      if (*v23 != *v17)
        break;
LABEL_29:
      if (v23 != (uint64_t *)(v20 + 16 * v21))
      {
        v27 = *(_QWORD *)(*(_QWORD *)this + 8 * *((unsigned int *)v23 + 2));
        v28 = *v16;
        v29 = *(unsigned int *)(v27 + 152);
        if (v29 >= *(unsigned int *)(v27 + 156))
        {
          v31 = v13;
          v30 = *v16;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v27 + 144, (void *)(v27 + 160), v29 + 1, 16);
          v28 = v30;
          v13 = v31;
          v29 = *(unsigned int *)(v27 + 152);
        }
        *(_OWORD *)(*(_QWORD *)(v27 + 144) + 16 * v29) = v28;
        ++*(_DWORD *)(v27 + 152);
      }
      if (++v17 != (_QWORD *)v18 && ++v16 != (__int128 *)v19)
        continue;
      goto LABEL_16;
    }
    v25 = 1;
    while (v24 != -4096)
    {
      v26 = v22 + v25++;
      v22 = v26 & (v21 - 1);
      v24 = *(_QWORD *)(v20 + 16 * v22);
      if (v24 == *v17)
      {
        v23 = (uint64_t *)(v20 + 16 * v22);
        goto LABEL_29;
      }
    }
LABEL_28:
    v23 = (uint64_t *)(v20 + 16 * v21);
    goto LABEL_29;
  }
}

_BYTE *mlir::AsmParserState::convertIdLocToRange(_BYTE *a1)
{
  unsigned __int8 *v2;
  signed __int8 v3;
  unsigned __int8 *v4;
  _BYTE *v5;
  uint64_t v7;
  BOOL v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;

  if (!a1 || !*a1)
    return a1;
  if (*a1 != 34)
  {
    v9 = a1 + 1;
    v10 = MEMORY[0x24BDAC740];
    while (1)
    {
      v11 = v9;
      v12 = *v9;
      if ((v12 & 0x80000000) != 0)
      {
        if (__maskrune(*v9, 0x500uLL))
          goto LABEL_26;
      }
      else if ((*(_DWORD *)(v10 + 4 * v12 + 60) & 0x500) != 0)
      {
        goto LABEL_26;
      }
      if (v12 - 36 > 0x3B
        || ((1 << (v12 - 36)) & 0x800000000000601) == 0)
      {
        return a1;
      }
LABEL_26:
      v9 = v11 + 1;
      if (!*v11)
        return a1;
    }
  }
  v2 = a1 + 1;
  v3 = a1[1];
  if (v3)
  {
    do
    {
      v4 = v2 + 1;
      v5 = memchr("\"\n\v\f", v3, 4uLL);
      if (v5 && v5 - "\"\n\v\f" != -1)
        break;
      if (v3 == 92)
      {
        v7 = *v4;
        v8 = (v7 - 92) > 0x18 || ((1 << (v7 - 92)) & 0x1040001) == 0;
        if (!v8 || (_DWORD)v7 == 34)
        {
          v4 = v2 + 2;
        }
        else
        {
          if (llvm::hexDigitValue(char)::LUT[v7] == -1 || llvm::hexDigitValue(char)::LUT[v2[2]] == -1)
            return a1;
          v4 = v2 + 3;
        }
      }
      v3 = *v4;
      v2 = v4;
    }
    while (*v4);
  }
  return a1;
}

void mlir::AsmParserState::initialize(mlir::AsmParserState *this, mlir::Operation *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  const char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  unint64_t v24;

  v22 = *((_QWORD *)a2 + 6);
  v3 = *(_QWORD *)this;
  v4 = (_QWORD *)(*(_QWORD *)this + 440);
  v5 = *(unsigned int *)(v3 + 448);
  if (v5 >= *(_DWORD *)(v3 + 452))
  {
    llvm::SmallVectorTemplateBase<mlir::AsmParserState::Impl::PartialOpDef,false>::growAndEmplaceBack<mlir::OperationName const&>((uint64_t)v4, &v22);
    v11 = *(_QWORD *)this;
    v12 = *(_QWORD *)(*(_QWORD *)(v11 + 440) + 8 * *(unsigned int *)(v11 + 448) - 8);
    if (!v12)
      return;
    goto LABEL_7;
  }
  v6 = (uint64_t *)(*v4 + 8 * v5);
  *v6 = 0;
  v8 = &unk_25451A000;
  if ((v7 & 1) == 0)
  {
    v8 = (_QWORD *)&unk_25451A000;
    if (v14)
    {
      v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SymbolTable<Empty>]";
      v24 = 83;
      v15 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v15)
        v16 = v15;
      else
        v16 = v24;
      v17 = &v23[v16];
      v18 = v24 - v16;
      if (v24 - v16 >= 0x12)
        v19 = 18;
      else
        v19 = v24 - v16;
      v20 = v18 - v19;
      if (v20 >= v20 - 1)
        v21 = v20 - 1;
      else
        v21 = v20;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SymbolTable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SymbolTable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v17[v19], v21);
      v8 = (_QWORD *)&unk_25451A000;
    }
  }
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, v8[378]))
  {
    v9 = operator new();
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_DWORD *)(v9 + 16) = 0;
    v10 = (uint64_t *)*v6;
    *v6 = v9;
    if (v10)
      std::default_delete<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>::operator()[abi:nn180100]((uint64_t)v6, v10);
  }
  ++*(_DWORD *)(v3 + 448);
  v11 = *(_QWORD *)this;
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 440) + 8 * *(unsigned int *)(v11 + 448) - 8);
  if (v12)
  {
LABEL_7:
    v13 = *(unsigned int *)(v11 + 512);
    if (v13 >= *(_DWORD *)(v11 + 516))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11 + 504, (void *)(v11 + 520), v13 + 1, 8);
      LODWORD(v13) = *(_DWORD *)(v11 + 512);
    }
    *(_QWORD *)(*(_QWORD *)(v11 + 504) + 8 * v13) = v12;
    ++*(_DWORD *)(v11 + 512);
  }
}

void mlir::AsmParserState::startOperationDefinition(mlir::AsmParserState *this, const mlir::OperationName *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;

  v2 = *(_QWORD *)this;
  v3 = (_QWORD *)(*(_QWORD *)this + 440);
  v4 = *(unsigned int *)(v2 + 448);
  if (v4 >= *(_DWORD *)(v2 + 452))
  {
    llvm::SmallVectorTemplateBase<mlir::AsmParserState::Impl::PartialOpDef,false>::growAndEmplaceBack<mlir::OperationName const&>((uint64_t)v3, a2);
  }
  else
  {
    v5 = (uint64_t *)(*v3 + 8 * v4);
    *v5 = 0;
    if (mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>(a2))
    {
      v6 = operator new();
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      *(_DWORD *)(v6 + 16) = 0;
      v7 = (uint64_t *)*v5;
      *v5 = v6;
      if (v7)
        std::default_delete<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>::operator()[abi:nn180100]((uint64_t)v5, v7);
    }
    ++*(_DWORD *)(v2 + 448);
  }
}

void mlir::AsmParserState::finalize(mlir::AsmParserState::Impl **this, mlir::Operation *a2)
{
  mlir::AsmParserState::Impl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  mlir::AsmParserState::Impl *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  mlir::Operation *v16;

  v16 = a2;
  v4 = *this;
  v5 = *((unsigned int *)*this + 112);
  v6 = *((_QWORD *)*this + 55) + 8 * v5;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v6 - 8) = 0;
  v15 = (uint64_t *)v7;
  *((_DWORD *)v4 + 112) = v5 - 1;
  v8 = (uint64_t **)(*((_QWORD *)v4 + 55) + 8 * (v5 - 1));
  v9 = *v8;
  *v8 = 0;
  if (v9)
    std::default_delete<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>::operator()[abi:nn180100]((uint64_t)v8, v9);
  if (!v7)
  {
LABEL_6:
    mlir::AsmParserState::Impl::resolveSymbolUses(*this);
    v14 = v15;
    v15 = 0;
    if (!v14)
      return;
    goto LABEL_7;
  }
  v10 = *this;
  v11 = *((unsigned int *)*this + 96);
  if (v11 < *((_DWORD *)*this + 97))
  {
    v12 = (_QWORD *)(*((_QWORD *)v10 + 47) + 16 * v11);
    *v12 = a2;
    v13 = (uint64_t)v15;
    v15 = 0;
    v12[1] = v13;
    *((_DWORD *)v10 + 96) = v11 + 1;
    goto LABEL_6;
  }
  llvm::SmallVectorTemplateBase<std::pair<mlir::Operation *,std::unique_ptr<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>>,false>::growAndEmplaceBack<mlir::Operation *&,std::unique_ptr<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>>((uint64_t)v10 + 376, &v16, (uint64_t *)&v15);
  mlir::AsmParserState::Impl::resolveSymbolUses(*this);
  v14 = v15;
  v15 = 0;
  if (!v14)
    return;
LABEL_7:
  std::default_delete<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>::operator()[abi:nn180100]((uint64_t)&v15, v14);
}

void mlir::AsmParserState::finalizeOperationDefinition(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  int v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  _QWORD *v52;
  int v53;
  BOOL v54;
  unsigned int v55;
  __int128 v56;
  uint64_t *v57;
  uint64_t v58;

  v58 = a2;
  v14 = *a1;
  v15 = *(unsigned int *)(*a1 + 448);
  v16 = *(_QWORD *)(*a1 + 440) + 8 * v15;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v16 - 8) = 0;
  v57 = (uint64_t *)v17;
  *(_DWORD *)(v14 + 448) = v15 - 1;
  v18 = (uint64_t **)(*(_QWORD *)(v14 + 440) + 8 * (v15 - 1));
  v19 = *v18;
  *v18 = 0;
  if (v19)
    std::default_delete<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>::operator()[abi:nn180100]((uint64_t)v18, v19);
  v20 = operator new();
  *(_QWORD *)v20 = a2;
  *(_QWORD *)(v20 + 8) = a3;
  *(_QWORD *)(v20 + 16) = a4;
  *(_QWORD *)(v20 + 24) = a3;
  *(_QWORD *)(v20 + 32) = a5;
  *(_QWORD *)(v20 + 40) = v20 + 56;
  *(_QWORD *)(v20 + 48) = 0x100000000;
  *(_QWORD *)(v20 + 144) = v20 + 160;
  *(_QWORD *)(v20 + 152) = 0x300000000;
  if (a7)
  {
    v21 = 16 * a7;
    do
    {
      while (1)
      {
        v22 = mlir::AsmParserState::convertIdLocToRange(*((_BYTE **)a6 + 1));
        *(_QWORD *)&v56 = v22;
        *((_QWORD *)&v56 + 1) = v23;
        v24 = *(_DWORD *)(v20 + 48);
        if (v24 >= *(_DWORD *)(v20 + 52))
          break;
        v25 = *(_QWORD *)(v20 + 40) + 88 * v24;
        v26 = *a6;
        a6 += 4;
        *(_DWORD *)v25 = v26;
        *(_QWORD *)(v25 + 8) = v22;
        *(_QWORD *)(v25 + 16) = v23;
        *(_QWORD *)(v25 + 24) = v25 + 40;
        *(_QWORD *)(v25 + 32) = 0x300000000;
        ++*(_DWORD *)(v20 + 48);
        v21 -= 16;
        if (!v21)
          goto LABEL_9;
      }
      llvm::SmallVectorTemplateBase<mlir::AsmParserState::OperationDefinition::ResultGroupDefinition,false>::growAndEmplaceBack<unsigned int const&,llvm::SMRange>(v20 + 40, a6, &v56);
      a6 += 4;
      v21 -= 16;
    }
    while (v21);
  }
LABEL_9:
  v27 = *a1;
  v28 = *(_QWORD *)(*a1 + 64);
  v29 = *(_DWORD *)(*a1 + 8);
  v30 = *(_DWORD *)(*a1 + 80);
  if (!v30)
    goto LABEL_41;
  v31 = ((a2 >> 4) ^ (a2 >> 9)) & (v30 - 1);
  v32 = (_QWORD *)(v28 + 16 * v31);
  v33 = *v32;
  if (*v32 == a2)
    goto LABEL_25;
  v34 = 0;
  v35 = 1;
  while (v33 != -4096)
  {
    if (v34)
      v36 = 0;
    else
      v36 = v33 == -8192;
    if (v36)
      v34 = v32;
    v37 = v31 + v35++;
    v31 = v37 & (v30 - 1);
    v32 = (_QWORD *)(v28 + 16 * v31);
    v33 = *v32;
    if (*v32 == a2)
      goto LABEL_25;
  }
  v46 = v34 ? v34 : v32;
  v47 = *(_DWORD *)(v27 + 72);
  if (4 * v47 + 4 < 3 * v30)
  {
    if (v30 + ~v47 - *(_DWORD *)(v27 + 76) > v30 >> 3)
      goto LABEL_22;
  }
  else
  {
LABEL_41:
    v30 *= 2;
  }
  llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(*a1 + 64, v30);
  v48 = *(_QWORD *)(v27 + 64);
  v49 = *(_DWORD *)(v27 + 80) - 1;
  v50 = ((a2 >> 4) ^ (a2 >> 9)) & v49;
  v46 = (_QWORD *)(v48 + 16 * v50);
  v51 = *v46;
  if (*v46 == a2)
  {
LABEL_43:
    ++*(_DWORD *)(v27 + 72);
    if (a2 == -4096)
      goto LABEL_24;
    goto LABEL_23;
  }
  v52 = 0;
  v53 = 1;
  while (v51 != -4096)
  {
    if (v52)
      v54 = 0;
    else
      v54 = v51 == -8192;
    if (v54)
      v52 = v46;
    v55 = v50 + v53++;
    v50 = v55 & v49;
    v46 = (_QWORD *)(v48 + 16 * (v55 & v49));
    v51 = *v46;
    if (*v46 == a2)
      goto LABEL_43;
  }
  if (v52)
    v46 = v52;
LABEL_22:
  v38 = *v46;
  ++*(_DWORD *)(v27 + 72);
  if (v38 != -4096)
LABEL_23:
    --*(_DWORD *)(v27 + 76);
LABEL_24:
  *v46 = a2;
  *((_DWORD *)v46 + 2) = v29;
  v27 = *a1;
  v29 = *(_DWORD *)(*a1 + 8);
LABEL_25:
  if (v29 >= *(_DWORD *)(v27 + 12))
  {
    *(_QWORD *)&v56 = 0;
    v44 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(v27, (void *)(v27 + 16), 0, 8, (unint64_t *)&v56);
    v44[*(unsigned int *)(v27 + 8)] = v20;
    llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::AsmParserState::OperationDefinition>,false>::moveElementsForGrow(v27, (unint64_t)v44);
    v45 = v56;
    if (*(_QWORD *)v27 != v27 + 16)
      free(*(void **)v27);
    *(_QWORD *)v27 = v44;
    ++*(_DWORD *)(v27 + 8);
    *(_DWORD *)(v27 + 12) = v45;
    if (!v57)
      return;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v27 + 8 * v29) = v20;
    *(_DWORD *)(v27 + 8) = v29 + 1;
    if (!v57)
      return;
  }
  v39 = *a1;
  v40 = *(unsigned int *)(*a1 + 384);
  if (v40 < *(_DWORD *)(*a1 + 388))
  {
    v41 = (_QWORD *)(*(_QWORD *)(v39 + 376) + 16 * v40);
    *v41 = v58;
    v42 = (uint64_t)v57;
    v57 = 0;
    v41[1] = v42;
    *(_DWORD *)(v39 + 384) = v40 + 1;
    v43 = v57;
    v57 = 0;
    if (!v43)
      return;
    goto LABEL_29;
  }
  llvm::SmallVectorTemplateBase<std::pair<mlir::Operation *,std::unique_ptr<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>>,false>::growAndEmplaceBack<mlir::Operation *&,std::unique_ptr<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>>(v39 + 376, &v58, (uint64_t *)&v57);
  v43 = v57;
  v57 = 0;
  if (v43)
LABEL_29:
    std::default_delete<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>::operator()[abi:nn180100]((uint64_t)&v57, v43);
}

void mlir::AsmParserState::startRegionDefinition(mlir::AsmParserState *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)this;
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 440) + 8 * *(unsigned int *)(*(_QWORD *)this + 448) - 8);
  if (v2)
  {
    v3 = *(unsigned int *)(v1 + 512);
    if (v3 >= *(_DWORD *)(v1 + 516))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v1 + 504, (void *)(v1 + 520), v3 + 1, 8);
      LODWORD(v3) = *(_DWORD *)(v1 + 512);
    }
    *(_QWORD *)(*(_QWORD *)(v1 + 504) + 8 * v3) = v2;
    ++*(_DWORD *)(v1 + 512);
  }
}

uint64_t mlir::AsmParserState::finalizeRegionDefinition(uint64_t this)
{
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 440) + 8 * *(unsigned int *)(*(_QWORD *)this + 448) - 8))
    --*(_DWORD *)(*(_QWORD *)this + 512);
  return this;
}

void mlir::AsmParserState::addDefinition(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  void *v31;
  _QWORD *v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  _QWORD *v36;
  int v37;
  _BYTE *v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  BOOL v45;
  unsigned int v46;
  unint64_t v47;

  v5 = *a1;
  v8 = *(_QWORD *)(*a1 + 152);
  v6 = *a1 + 152;
  v7 = v8;
  v9 = *(unsigned int *)(v5 + 168);
  v10 = a2 >> 4;
  if (!(_DWORD)v9)
    goto LABEL_9;
  v11 = ((_DWORD)v9 - 1) & (v10 ^ (a2 >> 9));
  v12 = *(_QWORD *)(v7 + 16 * v11);
  if (v12 != a2)
  {
    v14 = 1;
    while (v12 != -4096)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v9 - 1);
      v12 = *(_QWORD *)(v7 + 16 * v11);
      if (v12 == a2)
        goto LABEL_10;
    }
LABEL_9:
    v11 = *(unsigned int *)(v5 + 168);
LABEL_10:
    if (v11 == v9)
    {
      v13 = *(_DWORD *)(v5 + 96);
      if (!(_DWORD)v9)
        goto LABEL_37;
      goto LABEL_12;
    }
LABEL_15:
    v25 = mlir::AsmParserState::convertIdLocToRange(a3);
    v26 = *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 8 * *(unsigned int *)(v7 + 16 * v11 + 8));
    *(_QWORD *)(v26 + 8) = v25;
    *(_QWORD *)(v26 + 16) = v27;
    return;
  }
  if ((_DWORD)v11 != (_DWORD)v9)
    goto LABEL_15;
  v13 = *(_DWORD *)(v5 + 96);
LABEL_12:
  v16 = (v9 - 1) & (v10 ^ (a2 >> 9));
  v17 = (_QWORD *)(v7 + 16 * v16);
  v18 = *v17;
  if (*v17 == a2)
    goto LABEL_13;
  v32 = 0;
  v33 = 1;
  while (v18 != -4096)
  {
    if (v32)
      v34 = 0;
    else
      v34 = v18 == -8192;
    if (v34)
      v32 = v17;
    v35 = v16 + v33++;
    v16 = v35 & (v9 - 1);
    v17 = (_QWORD *)(v7 + 16 * v16);
    v18 = *v17;
    if (*v17 == a2)
      goto LABEL_13;
  }
  if (v32)
    v36 = v32;
  else
    v36 = v17;
  v37 = *(_DWORD *)(v5 + 160);
  if (4 * v37 + 4 < (3 * v9))
  {
    if ((int)v9 + ~v37 - *(_DWORD *)(v5 + 164) > v9 >> 3)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v9) = 2 * v9;
LABEL_38:
  v38 = a3;
  llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(v6, v9);
  v39 = *(_QWORD *)(v5 + 152);
  v40 = *(_DWORD *)(v5 + 168) - 1;
  v41 = v40 & (v10 ^ (a2 >> 9));
  v36 = (_QWORD *)(v39 + 16 * v41);
  v42 = *v36;
  if (*v36 == a2)
  {
LABEL_39:
    a3 = v38;
    ++*(_DWORD *)(v5 + 160);
    if (a2 == -4096)
      goto LABEL_20;
    goto LABEL_19;
  }
  v43 = 0;
  v44 = 1;
  while (v42 != -4096)
  {
    if (v43)
      v45 = 0;
    else
      v45 = v42 == -8192;
    if (v45)
      v43 = v36;
    v46 = v41 + v44++;
    v41 = v46 & v40;
    v36 = (_QWORD *)(v39 + 16 * (v46 & v40));
    v42 = *v36;
    if (*v36 == a2)
      goto LABEL_39;
  }
  if (v43)
    v36 = v43;
  a3 = v38;
LABEL_18:
  v28 = *v36;
  ++*(_DWORD *)(v5 + 160);
  if (v28 != -4096)
LABEL_19:
    --*(_DWORD *)(v5 + 164);
LABEL_20:
  *v36 = a2;
  *((_DWORD *)v36 + 2) = v13;
  v5 = *a1;
LABEL_13:
  v19 = mlir::AsmParserState::convertIdLocToRange(a3);
  v21 = v20;
  v22 = (_QWORD *)operator new();
  v23 = v22;
  *v22 = a2;
  v22[1] = v19;
  v22[2] = v21;
  v22[3] = v22 + 5;
  v22[4] = 0x300000000;
  v22[11] = v22 + 13;
  v22[12] = 0x100000000;
  v24 = *(unsigned int *)(v5 + 96);
  if (v24 >= *(_DWORD *)(v5 + 100))
  {
    v47 = 0;
    v29 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(v5 + 88, (void *)(v5 + 104), 0, 8, &v47);
    v29[*(unsigned int *)(v5 + 96)] = v23;
    llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::AsmParserState::BlockDefinition>,false>::moveElementsForGrow(v5 + 88, (unint64_t)v29);
    v30 = v47;
    v31 = *(void **)(v5 + 88);
    if (v31 != (void *)(v5 + 104))
      free(v31);
    *(_QWORD *)(v5 + 88) = v29;
    ++*(_DWORD *)(v5 + 96);
    *(_DWORD *)(v5 + 100) = v30;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v5 + 88) + 8 * v24) = v22;
    *(_DWORD *)(v5 + 96) = v24 + 1;
  }
}

void mlir::AsmParserState::addDefinition(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[7];

  v33[6] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 152);
  v5 = *(unsigned int *)(*(_QWORD *)a1 + 168);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    LODWORD(v7) = ((v6 >> 4) ^ (v6 >> 9)) & (v5 - 1);
    v8 = (uint64_t *)(v4 + 16 * v7);
    v9 = *v8;
    if (*v8 == v6)
      goto LABEL_8;
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v5 - 1);
      v9 = *(_QWORD *)(v4 + 16 * v7);
      if (v9 == v6)
      {
        v8 = (uint64_t *)(v4 + 16 * v7);
        goto LABEL_8;
      }
    }
  }
  v8 = (uint64_t *)(v4 + 16 * v5);
LABEL_8:
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 8 * *((unsigned int *)v8 + 2));
  v13 = *(unsigned int *)(a2 + 24);
  v14 = (_QWORD *)(v12 + 88);
  v15 = *(unsigned int *)(v12 + 96);
  v16 = (v13 + 1);
  if (v13 >= v15 && (_DWORD)v15 != (_DWORD)v16)
  {
    if (v15 <= v16)
    {
      if (*(_DWORD *)(v12 + 100) < v16)
      {
        llvm::SmallVectorTemplateBase<mlir::AsmParserState::SMDefinition,false>::grow(v12 + 88, (v13 + 1));
        v15 = *(unsigned int *)(v12 + 96);
      }
      if (v15 != v16)
      {
        v21 = *v14 + 80 * v16;
        v22 = *v14 + 80 * v15;
        do
        {
          *(_OWORD *)(v22 + 48) = 0uLL;
          *(_OWORD *)(v22 + 64) = 0uLL;
          *(_OWORD *)v22 = 0uLL;
          *(_OWORD *)(v22 + 16) = 0uLL;
          *(_OWORD *)(v22 + 32) = 0uLL;
          *(_QWORD *)(v22 + 16) = v22 + 32;
          *(_DWORD *)(v22 + 28) = 3;
          v22 += 80;
        }
        while (v22 != v21);
      }
    }
    else
    {
      v18 = 80 * v15;
      v19 = (void **)(v18 + *v14 - 64);
      v20 = 80 * v16 - v18;
      do
      {
        if (v19 + 2 != *v19)
          free(*v19);
        v19 -= 10;
        v20 += 80;
      }
      while (v20);
    }
    *(_DWORD *)(v12 + 96) = v16;
  }
  *(_QWORD *)&v30 = mlir::AsmParserState::convertIdLocToRange(a3);
  *((_QWORD *)&v30 + 1) = v23;
  v31 = v33;
  v32 = 0x300000000;
  v24 = *v14 + 80 * v13;
  *(_OWORD *)v24 = v30;
  v25 = v31;
  if ((__int128 *)v24 != &v30)
  {
    v26 = v24 + 16;
    if (v31 != v33)
    {
      if (*(_QWORD *)(v24 + 16) != v24 + 32)
      {
        free(*(void **)v26);
        v25 = v31;
      }
      *(_QWORD *)v26 = v25;
      *(_QWORD *)(v26 + 8) = v32;
      v31 = v33;
      HIDWORD(v32) = 0;
      goto LABEL_38;
    }
    v27 = v32;
    v28 = *(unsigned int *)(v24 + 24);
    if (v28 >= v32)
    {
      if ((_DWORD)v32)
        memmove(*(void **)v26, v33, 16 * v32);
      goto LABEL_37;
    }
    if (*(_DWORD *)(v24 + 28) >= v32)
    {
      if ((_DWORD)v28)
      {
        memmove(*(void **)v26, v33, 16 * v28);
        v29 = v32;
        if (v28 == v32)
        {
LABEL_37:
          *(_DWORD *)(v26 + 8) = v27;
LABEL_38:
          LODWORD(v32) = 0;
          v25 = v31;
          goto LABEL_39;
        }
      }
      else
      {
        v28 = 0;
        v29 = v32;
        if (!(_DWORD)v32)
          goto LABEL_37;
      }
    }
    else
    {
      *(_DWORD *)(v24 + 24) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v24 + 16, (void *)(v24 + 32), v27, 16);
      v28 = 0;
      v29 = v32;
      if (!(_DWORD)v32)
        goto LABEL_37;
    }
    memcpy((void *)(*(_QWORD *)v26 + 16 * v28), (char *)v31 + 16 * v28, 16 * v29 - 16 * v28);
    goto LABEL_37;
  }
LABEL_39:
  if (v25 != v33)
    free(v25);
}

void mlir::AsmParserState::addAttrAliasDefinition(uint64_t *a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  BOOL v28;
  char *v29;
  _QWORD *v30;

  v12 = *a1;
  v13 = *a1 + 304;
  v30 = (_QWORD *)*(unsigned int *)(v12 + 184);
  v14 = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned long>(v13, a2, a3, &v30);
  if (v15)
  {
    v16 = *a1;
    v17 = (_QWORD *)operator new();
    *v17 = a2;
    v17[2] = a4;
    v17[3] = a5;
    v17[4] = v17 + 6;
    v17[12] = a6;
    v19 = (unint64_t *)(v16 + 176);
    v18 = *(_QWORD *)(v16 + 176);
    v17[1] = a3;
    v17[5] = 0x300000000;
    v30 = v17;
    v20 = *(unsigned int *)(v16 + 184);
    v21 = (char *)&v30;
    if (v20 >= *(_DWORD *)(v16 + 188))
    {
      v27 = v20 + 1;
      v28 = v18 + 8 * v20 > (unint64_t)&v30;
      if (v18 <= (unint64_t)&v30 && v28)
      {
        v29 = (char *)&v30 - v18;
        llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::AsmParserState::AttributeAliasDefinition>,false>::grow(v16 + 176, v27);
        v18 = *v19;
        v21 = &v29[*v19];
      }
      else
      {
        llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::AsmParserState::AttributeAliasDefinition>,false>::grow(v16 + 176, v27);
        v18 = *v19;
        v21 = (char *)&v30;
      }
    }
    v22 = *(unsigned int *)(v16 + 184);
    v23 = *(_QWORD *)v21;
    *(_QWORD *)v21 = 0;
    *(_QWORD *)(v18 + 8 * v22) = v23;
    *(_DWORD *)(v16 + 184) = v22 + 1;
    v24 = v30;
    v30 = 0;
    if (v24)
    {
      v25 = (_QWORD *)v24[4];
      if (v25 != v24 + 6)
        free(v25);
      MEMORY[0x20BD002F8](v24, 0x10F0C40C6C5BB84);
    }
  }
  else
  {
    v26 = *(_QWORD **)(*(_QWORD *)(*a1 + 176) + 8 * *(unsigned int *)(*v14 + 8));
    v26[2] = a4;
    v26[3] = a5;
    v26[12] = a6;
  }
}

uint64_t *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned long>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _DWORD *buffer;
  void *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 4;
    if (a3)
LABEL_4:
      memcpy(v12, a2, (size_t)a3);
  }
  else
  {
    if (v10)
    {
      while (!v10 || v10 == -8)
      {
        v17 = v9[1];
        ++v9;
        v10 = v17;
      }
      return v9;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 4;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v12] = 0;
  *(_QWORD *)buffer = a3;
  buffer[2] = *a4;
  *v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9)
    v13 = *v9 == -8;
  else
    v13 = 1;
  if (v13)
  {
    do
    {
      v15 = v9[1];
      ++v9;
      v14 = v15;
      if (v15)
        v16 = v14 == -8;
      else
        v16 = 1;
    }
    while (v16);
  }
  return v9;
}

void mlir::AsmParserState::addTypeAliasDefinition(uint64_t *a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  BOOL v25;
  char *v26;
  _QWORD *v27;

  v12 = *a1;
  v13 = *a1 + 328;
  v27 = (_QWORD *)*(unsigned int *)(v12 + 248);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned long>(v13, a2, a3, &v27);
  v14 = *a1;
  v15 = (_QWORD *)operator new();
  *v15 = a2;
  v15[2] = a4;
  v15[3] = a5;
  v15[4] = v15 + 6;
  v15[12] = a6;
  v17 = (unint64_t *)(v14 + 240);
  v16 = *(_QWORD *)(v14 + 240);
  v15[1] = a3;
  v15[5] = 0x300000000;
  v27 = v15;
  v18 = *(unsigned int *)(v14 + 248);
  v19 = (char *)&v27;
  if (v18 >= *(_DWORD *)(v14 + 252))
  {
    v24 = v18 + 1;
    v25 = v16 + 8 * v18 > (unint64_t)&v27;
    if (v16 <= (unint64_t)&v27 && v25)
    {
      v26 = (char *)&v27 - v16;
      llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::AsmParserState::AttributeAliasDefinition>,false>::grow(v14 + 240, v24);
      v16 = *v17;
      v19 = &v26[*v17];
    }
    else
    {
      llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::AsmParserState::AttributeAliasDefinition>,false>::grow(v14 + 240, v24);
      v16 = *v17;
      v19 = (char *)&v27;
    }
  }
  v20 = *(unsigned int *)(v14 + 248);
  v21 = *(_QWORD *)v19;
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v16 + 8 * v20) = v21;
  *(_DWORD *)(v14 + 248) = v20 + 1;
  v22 = v27;
  v27 = 0;
  if (v22)
  {
    v23 = (_QWORD *)v22[4];
    if (v23 != v22 + 6)
      free(v23);
    MEMORY[0x20BD002F8](v22, 0x10F0C40C6C5BB84);
  }
}

void mlir::AsmParserState::addUses(uint64_t a1, unint64_t a2, _BYTE **a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t Owner;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  unsigned __int8 *v41;
  signed __int8 v42;
  unsigned __int8 *v43;
  _BYTE *v44;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  _QWORD *v49;
  char *v50;
  unsigned int v51;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _BYTE **v64;
  unint64_t v65;
  _QWORD *v66;

  v65 = a2;
  if ((~*(_DWORD *)(a2 + 8) & 7) != 0)
    v7 = a2;
  else
    v7 = 0;
  if (!v7)
  {
    v17 = *(_QWORD *)(*(_QWORD *)a1 + 152);
    v18 = *(unsigned int *)(*(_QWORD *)a1 + 168);
    if ((_DWORD)v18)
    {
      v19 = *(_QWORD *)(a2 + 16);
      LODWORD(v20) = ((v19 >> 4) ^ (v19 >> 9)) & (v18 - 1);
      v21 = (uint64_t *)(v17 + 16 * v20);
      v22 = *v21;
      if (*v21 == v19)
        goto LABEL_70;
      v23 = 1;
      while (v22 != -4096)
      {
        v24 = v20 + v23++;
        v20 = v24 & (v18 - 1);
        v22 = *(_QWORD *)(v17 + 16 * v20);
        if (v22 == v19)
        {
          v21 = (uint64_t *)(v17 + 16 * v20);
          goto LABEL_70;
        }
      }
    }
    v21 = (uint64_t *)(v17 + 16 * v18);
LABEL_70:
    if (a4)
    {
      v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 8 * *((unsigned int *)v21 + 2)) + 88)
          + 80 * *(unsigned int *)(a2 + 24);
      v54 = v53 + 16;
      v55 = (void *)(v53 + 32);
      v56 = 8 * a4;
      do
      {
        while (1)
        {
          v57 = mlir::AsmParserState::convertIdLocToRange(*a3);
          v59 = v57;
          v60 = v58;
          v61 = *(unsigned int *)(v54 + 8);
          if (v61 >= *(_DWORD *)(v54 + 12))
            break;
          v62 = (_QWORD *)(*(_QWORD *)v54 + 16 * v61);
          *v62 = v57;
          v62[1] = v58;
          *(_DWORD *)(v54 + 8) = v61 + 1;
          ++a3;
          v56 -= 8;
          if (!v56)
            return;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod(v54, v55, v61 + 1, 16);
        v63 = (_QWORD *)(*(_QWORD *)v54 + 16 * *(unsigned int *)(v54 + 8));
        *v63 = v59;
        v63[1] = v60;
        ++*(_DWORD *)(v54 + 8);
        ++a3;
        v56 -= 8;
      }
      while (v56);
    }
    return;
  }
  Owner = mlir::detail::OpResultImpl::getOwner((mlir::detail::OpResultImpl *)v7);
  v9 = *(_QWORD **)a1;
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v11 = *(unsigned int *)(*(_QWORD *)a1 + 80);
  if ((_DWORD)v11)
  {
    LODWORD(v12) = (v11 - 1) & ((Owner >> 4) ^ (Owner >> 9));
    v13 = (uint64_t *)(v10 + 16 * v12);
    v14 = *v13;
    if (*v13 == Owner)
      goto LABEL_18;
    v15 = 1;
    while (v14 != -4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & (v11 - 1);
      v14 = *(_QWORD *)(v10 + 16 * v12);
      if (v14 == Owner)
      {
        v13 = (uint64_t *)(v10 + 16 * v12);
        goto LABEL_18;
      }
    }
  }
  v13 = (uint64_t *)(v10 + 16 * v11);
LABEL_18:
  if (v13 == (uint64_t *)(v10 + 16 * v11))
  {
    v27 = (uint64_t)(v9 + 44);
    v66 = 0;
    v28 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::LookupBucketFor<mlir::Value>(v9 + 44, &v65, &v66);
    v29 = v66;
    if (v28)
    {
      v30 = *((_DWORD *)v66 + 4);
      v31 = ((8 * a4) >> 3) + v30;
      if (v31 <= *((unsigned int *)v66 + 5))
        goto LABEL_79;
    }
    else
    {
      v29 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::InsertIntoBucketImpl<mlir::Value>(v27, (uint64_t)&v65, &v65, v66);
      v30 = 0;
      *v29 = v65;
      v29[1] = v29 + 3;
      v29[2] = 0x600000000;
      v31 = (8 * a4) >> 3;
      if (v31 <= 6)
      {
LABEL_79:
        if (a4)
        {
          memcpy((void *)(v29[1] + 8 * v30), a3, 8 * a4);
          v30 = *((_DWORD *)v29 + 4);
        }
        *((_DWORD *)v29 + 4) = v30 + a4;
        return;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v29 + 1), v29 + 3, v31, 8);
    v30 = *((_DWORD *)v29 + 4);
    goto LABEL_79;
  }
  v25 = *(_QWORD *)(v7 + 8);
  if ((v25 & 7) == 6)
    v26 = *(_DWORD *)(v7 + 16) + 6;
  else
    v26 = v25 & 7;
  v32 = 0;
  v33 = *(_QWORD *)(*v9 + 8 * *((unsigned int *)v13 + 2));
  v34 = *(_QWORD *)(v33 + 40);
  v35 = *(_DWORD *)(v33 + 48);
  v36 = 88 * v35;
  do
  {
    if (v36 == v32)
      return;
    v37 = *(_DWORD *)(v34 + v36 - 88);
    v34 -= 88;
    v32 += 88;
  }
  while (v26 < v37);
  if (a4)
  {
    v38 = v34 + 88 * v35;
    v64 = &a3[a4];
    v39 = MEMORY[0x24BDAC740];
    do
    {
      v40 = *a3;
      if (*a3)
      {
        v41 = *a3;
        if (*v40)
        {
          if (*v40 == 34)
          {
            v43 = v40 + 1;
            v42 = v40[1];
            if (v42)
            {
              while (1)
              {
                v41 = v43 + 1;
                v44 = memchr("\"\n\v\f", v42, 4uLL);
                if (v44 && v44 - "\"\n\v\f" != -1)
                  break;
                if (v42 == 92)
                {
                  v46 = *v41;
                  v47 = (v46 - 92) > 0x18 || ((1 << (v46 - 92)) & 0x1040001) == 0;
                  if (!v47 || (_DWORD)v46 == 34)
                  {
                    v41 = v43 + 2;
                  }
                  else
                  {
                    if (llvm::hexDigitValue(char)::LUT[v46] == -1 || llvm::hexDigitValue(char)::LUT[v43[2]] == -1)
                      goto LABEL_53;
                    v41 = v43 + 3;
                  }
                }
                v42 = *v41;
                v43 = v41;
                if (!*v41)
                  goto LABEL_53;
              }
            }
            else
            {
              v41 = v40 + 1;
            }
            goto LABEL_53;
          }
          v50 = v40 + 1;
          while (2)
          {
            v41 = (unsigned __int8 *)v50;
            v51 = *v50;
            if ((v51 & 0x80000000) != 0)
            {
              if (!__maskrune(*v50, 0x500uLL))
              {
LABEL_63:
                if (v51 - 36 > 0x3B
                  || ((1 << (v51 - 36)) & 0x800000000000601) == 0)
                {
                  break;
                }
              }
            }
            else if ((*(_DWORD *)(v39 + 4 * v51 + 60) & 0x500) == 0)
            {
              goto LABEL_63;
            }
            v50 = (char *)(v41 + 1);
            if (!*v41)
              break;
            continue;
          }
        }
      }
      else
      {
        v41 = 0;
      }
LABEL_53:
      v48 = *(unsigned int *)(v38 + 32);
      if (v48 >= *(unsigned int *)(v38 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v38 + 24, (void *)(v38 + 40), v48 + 1, 16);
        v48 = *(unsigned int *)(v38 + 32);
      }
      v49 = (_QWORD *)(*(_QWORD *)(v38 + 24) + 16 * v48);
      *v49 = v40;
      v49[1] = v41;
      ++*(_DWORD *)(v38 + 32);
      ++a3;
    }
    while (a3 != v64);
  }
}

void mlir::AsmParserState::addUses(uint64_t *a1, uint64_t a2, _BYTE **a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  void *v36;
  uint64_t *v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  unint64_t v50;

  v8 = *a1;
  v11 = *(_QWORD *)(*a1 + 152);
  v9 = *a1 + 152;
  v10 = v11;
  v12 = *(unsigned int *)(v8 + 168);
  v13 = a2 >> 4;
  if ((_DWORD)v12)
  {
    LODWORD(v14) = (v12 - 1) & (v13 ^ (a2 >> 9));
    v15 = (uint64_t *)(v10 + 16 * v14);
    v16 = *v15;
    if (*v15 == a2)
    {
      if ((_DWORD)v14 != (_DWORD)v12)
        goto LABEL_16;
      v17 = *(_DWORD *)(v8 + 96);
      goto LABEL_12;
    }
    v18 = 1;
    while (v16 != -4096)
    {
      v19 = v14 + v18++;
      v14 = v19 & (v12 - 1);
      v16 = *(_QWORD *)(v10 + 16 * v14);
      if (v16 == a2)
        goto LABEL_10;
    }
  }
  v14 = *(unsigned int *)(v8 + 168);
LABEL_10:
  if (v14 != v12)
  {
    v15 = (uint64_t *)(v10 + 16 * v14);
    if (!a4)
      return;
    goto LABEL_17;
  }
  v17 = *(_DWORD *)(v8 + 96);
  if (!(_DWORD)v12)
    goto LABEL_44;
LABEL_12:
  v20 = (v12 - 1) & (v13 ^ (a2 >> 9));
  v15 = (uint64_t *)(v10 + 16 * v20);
  v21 = *v15;
  if (*v15 != a2)
  {
    v37 = 0;
    v38 = 1;
    while (v21 != -4096)
    {
      if (v37)
        v39 = 0;
      else
        v39 = v21 == -8192;
      if (v39)
        v37 = v15;
      v40 = v20 + v38++;
      v20 = v40 & (v12 - 1);
      v15 = (uint64_t *)(v10 + 16 * v20);
      v21 = *v15;
      if (*v15 == a2)
        goto LABEL_13;
    }
    if (v37)
      v15 = v37;
    v41 = *(_DWORD *)(v8 + 160);
    if (4 * v41 + 4 < (3 * v12))
    {
      if ((int)v12 + ~v41 - *(_DWORD *)(v8 + 164) > v12 >> 3)
        goto LABEL_26;
      goto LABEL_45;
    }
LABEL_44:
    LODWORD(v12) = 2 * v12;
LABEL_45:
    llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(v9, v12);
    v42 = *(_QWORD *)(v8 + 152);
    v43 = *(_DWORD *)(v8 + 168) - 1;
    v44 = v43 & (v13 ^ (a2 >> 9));
    v15 = (uint64_t *)(v42 + 16 * v44);
    v45 = *v15;
    if (*v15 == a2)
    {
LABEL_46:
      ++*(_DWORD *)(v8 + 160);
      if (a2 == -4096)
        goto LABEL_28;
      goto LABEL_27;
    }
    v46 = 0;
    v47 = 1;
    while (v45 != -4096)
    {
      if (v46)
        v48 = 0;
      else
        v48 = v45 == -8192;
      if (v48)
        v46 = v15;
      v49 = v44 + v47++;
      v44 = v49 & v43;
      v15 = (uint64_t *)(v42 + 16 * v44);
      v45 = *v15;
      if (*v15 == a2)
        goto LABEL_46;
    }
    if (v46)
      v15 = v46;
LABEL_26:
    v33 = *v15;
    ++*(_DWORD *)(v8 + 160);
    if (v33 == -4096)
    {
LABEL_28:
      *v15 = a2;
      *((_DWORD *)v15 + 2) = v17;
      v8 = *a1;
      goto LABEL_13;
    }
LABEL_27:
    --*(_DWORD *)(v8 + 164);
    goto LABEL_28;
  }
LABEL_13:
  v22 = (_QWORD *)operator new();
  v23 = v22;
  *v22 = a2;
  v22[1] = 0;
  v22[2] = 0;
  v22[3] = v22 + 5;
  v22[4] = 0x300000000;
  v22[11] = v22 + 13;
  v22[12] = 0x100000000;
  v24 = *(unsigned int *)(v8 + 96);
  if (v24 >= *(_DWORD *)(v8 + 100))
  {
    v50 = 0;
    v34 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(v8 + 88, (void *)(v8 + 104), 0, 8, &v50);
    v34[*(unsigned int *)(v8 + 96)] = v23;
    llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::AsmParserState::BlockDefinition>,false>::moveElementsForGrow(v8 + 88, (unint64_t)v34);
    v35 = v50;
    v36 = *(void **)(v8 + 88);
    if (v36 != (void *)(v8 + 104))
      free(v36);
    *(_QWORD *)(v8 + 88) = v34;
    v25 = *(_DWORD *)(v8 + 96) + 1;
    *(_DWORD *)(v8 + 100) = v35;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v8 + 88) + 8 * v24) = v22;
    v25 = v24 + 1;
  }
  *(_DWORD *)(v8 + 96) = v25;
LABEL_16:
  if (!a4)
    return;
LABEL_17:
  v26 = *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 8 * *((unsigned int *)v15 + 2));
  v27 = 8 * a4;
  do
  {
    v28 = mlir::AsmParserState::convertIdLocToRange(*a3);
    v30 = v29;
    v31 = *(unsigned int *)(v26 + 32);
    if (v31 >= *(unsigned int *)(v26 + 36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v26 + 24, (void *)(v26 + 40), v31 + 1, 16);
      v31 = *(unsigned int *)(v26 + 32);
    }
    v32 = (_QWORD *)(*(_QWORD *)(v26 + 24) + 16 * v31);
    *v32 = v28;
    v32[1] = v30;
    ++*(_DWORD *)(v26 + 32);
    ++a3;
    v27 -= 8;
  }
  while (v27);
}

void mlir::AsmParserState::addUses(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  char *v22;
  const void *v23;
  uint64_t v24;

  v24 = a2;
  v4 = *(unsigned int *)(*(_QWORD *)a1 + 512);
  if ((_DWORD)v4)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 504) + 8 * v4 - 8);
    v8 = *(_DWORD *)(v7 + 16);
    if (v8)
    {
      v9 = v8 - 1;
      v10 = v9 & ((a2 >> 4) ^ (a2 >> 9));
      v11 = (uint64_t *)(*(_QWORD *)v7 + 24 * v10);
      v12 = *v11;
      if (*v11 == a2)
        goto LABEL_15;
      v13 = 0;
      v14 = 1;
      while (v12 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -8192;
        if (v15)
          v13 = v11;
        v16 = v10 + v14++;
        v10 = v16 & v9;
        v11 = (uint64_t *)(*(_QWORD *)v7 + 24 * v10);
        v12 = *v11;
        if (*v11 == a2)
          goto LABEL_15;
      }
      if (v13)
        v17 = v13;
      else
        v17 = v11;
    }
    else
    {
      v17 = 0;
    }
    v11 = llvm::DenseMapBase<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>,mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>::InsertIntoBucket<mlir::Attribute const&>(v7, v17, &v24);
LABEL_15:
    v18 = v11 + 1;
    v22 = &a3[16 * a4];
    v23 = a3;
    v19 = *((unsigned int *)v11 + 4);
    if (v19 >= *((_DWORD *)v11 + 5))
    {
      llvm::SmallVectorTemplateBase<llvm::SmallVector<llvm::SMRange,3u>,false>::growAndEmplaceBack<llvm::SMRange const*,llvm::SMRange const*>((uint64_t)v18, &v23, (const void **)&v22);
      return;
    }
    v20 = (_QWORD *)(*v18 + (v19 << 6));
    *v20 = v20 + 2;
    v20[1] = 0x300000000;
    if ((unint64_t)(16 * a4) < 0x31)
    {
      v21 = 0;
      if (!a4)
      {
LABEL_21:
        *((_DWORD *)v20 + 2) = v21 + a4;
        ++*((_DWORD *)v11 + 4);
        return;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v20, v20 + 2, (16 * a4) >> 4, 16);
      v21 = *((_DWORD *)v20 + 2);
      if (!a4)
        goto LABEL_21;
    }
    memcpy((void *)(*v20 + 16 * v21), a3, 16 * a4);
    v21 = *((_DWORD *)v20 + 2);
    goto LABEL_21;
  }
}

void mlir::AsmParserState::addAttrAliasUses(uint64_t *a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  int Key;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  BOOL v29;
  char *v30;
  _QWORD *v31;

  v10 = *a1;
  Key = llvm::StringMapImpl::FindKey((uint64_t *)(*a1 + 304), a2, a3);
  if (Key == -1)
    v12 = *(unsigned int *)(v10 + 312);
  else
    v12 = Key;
  v13 = (uint64_t *)(*(_QWORD *)(v10 + 304) + 8 * v12);
  v14 = *a1;
  if (v13 == (uint64_t *)(*(_QWORD *)(*a1 + 304) + 8 * *(unsigned int *)(*a1 + 312)))
  {
    v31 = (_QWORD *)*(unsigned int *)(v14 + 184);
    v13 = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned long>(v14 + 304, a2, a3, &v31);
    v15 = *a1;
    v16 = (_QWORD *)operator new();
    *v16 = a2;
    v16[2] = 0;
    v16[3] = 0;
    v16[4] = v16 + 6;
    v16[12] = 0;
    v18 = (unint64_t *)(v15 + 176);
    v17 = *(_QWORD *)(v15 + 176);
    v16[1] = a3;
    v16[5] = 0x300000000;
    v31 = v16;
    v19 = *(unsigned int *)(v15 + 184);
    v20 = (char *)&v31;
    if (v19 >= *(_DWORD *)(v15 + 188))
    {
      v28 = v19 + 1;
      v29 = v17 + 8 * v19 > (unint64_t)&v31;
      if (v17 <= (unint64_t)&v31 && v29)
      {
        v30 = (char *)&v31 - v17;
        llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::AsmParserState::AttributeAliasDefinition>,false>::grow(v15 + 176, v28);
        v17 = *v18;
        v20 = &v30[*v18];
      }
      else
      {
        llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::AsmParserState::AttributeAliasDefinition>,false>::grow(v15 + 176, v28);
        v17 = *v18;
        v20 = (char *)&v31;
      }
    }
    v21 = *(unsigned int *)(v15 + 184);
    v22 = *(_QWORD *)v20;
    *(_QWORD *)v20 = 0;
    *(_QWORD *)(v17 + 8 * v21) = v22;
    *(_DWORD *)(v15 + 184) = v21 + 1;
    v23 = v31;
    v31 = 0;
    if (v23)
    {
      v24 = (_QWORD *)v23[4];
      if (v24 != v23 + 6)
        free(v24);
      MEMORY[0x20BD002F8](v23, 0x10F0C40C6C5BB84);
    }
    v14 = *a1;
  }
  v25 = *(_QWORD *)(*(_QWORD *)(v14 + 176) + 8 * *(unsigned int *)(*v13 + 8));
  v26 = *(unsigned int *)(v25 + 40);
  if (v26 >= *(_DWORD *)(v25 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v25 + 32, (void *)(v25 + 48), v26 + 1, 16);
    LODWORD(v26) = *(_DWORD *)(v25 + 40);
  }
  v27 = (_QWORD *)(*(_QWORD *)(v25 + 32) + 16 * v26);
  *v27 = a4;
  v27[1] = a5;
  ++*(_DWORD *)(v25 + 40);
}

void mlir::AsmParserState::addTypeAliasUses(uint64_t *a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int Key;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v8 = *a1;
  Key = llvm::StringMapImpl::FindKey((uint64_t *)(*a1 + 328), a2, a3);
  if (Key == -1)
    v10 = *(unsigned int *)(v8 + 336);
  else
    v10 = Key;
  v11 = *(_QWORD *)(*(_QWORD *)(*a1 + 240) + 8 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v8 + 328) + 8 * v10) + 8));
  v12 = *(unsigned int *)(v11 + 40);
  if (v12 >= *(_DWORD *)(v11 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11 + 32, (void *)(v11 + 48), v12 + 1, 16);
    LODWORD(v12) = *(_DWORD *)(v11 + 40);
  }
  v13 = (_QWORD *)(*(_QWORD *)(v11 + 32) + 16 * v12);
  *v13 = a4;
  v13[1] = a5;
  ++*(_DWORD *)(v11 + 40);
}

int32x2_t mlir::AsmParserState::refineDefinition(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int32x2_t *v8;
  uint64_t *v9;
  int32x2_t result;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;

  v13 = a2;
  v14 = 0;
  v5 = *(_QWORD *)a1;
  v6 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::LookupBucketFor<mlir::Value>((uint64_t *)(*(_QWORD *)a1 + 352), &v13, &v14);
  v7 = (uint64_t)v14;
  if (!v6)
    v7 = *(_QWORD *)(v5 + 352) + 72 * *(unsigned int *)(v5 + 368);
  mlir::AsmParserState::addUses(a1, a3, *(_BYTE ***)(v7 + 8), *(unsigned int *)(v7 + 16));
  v8 = *(int32x2_t **)a1;
  v9 = (uint64_t *)(*(_QWORD *)a1 + 352);
  v14 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::LookupBucketFor<mlir::Value>(v9, &v13, &v14))
  {
    v11 = v14;
    v12 = (_QWORD *)v14[1];
    if (v12 != v14 + 3)
      free(v12);
    *v11 = -8192;
    result = vadd_s32(v8[45], (int32x2_t)0x1FFFFFFFFLL);
    v8[45] = result;
  }
  return result;
}

void std::default_delete<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>::operator()[abi:nn180100](uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  if (a2)
  {
    v3 = *((_DWORD *)a2 + 4);
    v4 = *a2;
    if (v3)
    {
      v5 = v4 + 24 * v3;
      do
      {
        if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v6 = *(char **)(v4 + 8);
          v7 = *(unsigned int *)(v4 + 16);
          if ((_DWORD)v7)
          {
            v8 = v7 << 6;
            do
            {
              v9 = *(char **)&v6[v8 - 64];
              if (&v6[v8 - 48] != v9)
                free(v9);
              v8 -= 64;
            }
            while (v8);
            v6 = *(char **)(v4 + 8);
          }
          if (v6 != (char *)(v4 + 24))
            free(v6);
        }
        v4 += 24;
      }
      while (v4 != v5);
      v4 = *a2;
      v10 = 24 * *((unsigned int *)a2 + 4);
    }
    else
    {
      v10 = 0;
    }
    llvm::deallocate_buffer((llvm *)v4, (void *)v10);
  }
}

void sub_207200684()
{
  JUMPOUT(0x20BD002F8);
}

uint64_t llvm::SmallVectorImpl<llvm::SMRange>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_16;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 16 * v8);
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 16 * v9);
        v10 = *v7;
        if (v9 == v10)
        {
LABEL_15:
          *(_DWORD *)(a1 + 8) = v8;
LABEL_16:
          *v7 = 0;
          return a1;
        }
      }
      else
      {
        v9 = 0;
        v10 = *v7;
        if (!*v7)
          goto LABEL_15;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 16);
      v9 = 0;
      v10 = *v7;
      if (!*v7)
        goto LABEL_15;
    }
    memcpy((void *)(*(_QWORD *)a1 + 16 * v9), (const void *)(*(_QWORD *)a2 + 16 * v9), *(_QWORD *)a2 + 16 * v10 - (*(_QWORD *)a2 + 16 * v9));
    goto LABEL_15;
  }
  return a1;
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<mlir::Operation *,std::unique_ptr<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>>,false>::growAndEmplaceBack<mlir::Operation *&,std::unique_ptr<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  unsigned int v28;
  unint64_t v30;

  v30 = 0;
  v6 = (char *)(a1 + 16);
  v7 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 16, &v30);
  v8 = *(unsigned int *)(a1 + 8);
  v9 = 16 * v8;
  v10 = &v7[16 * v8];
  *(_QWORD *)v10 = *a2;
  v11 = *a3;
  *a3 = 0;
  *((_QWORD *)v10 + 1) = v11;
  v12 = *(char **)a1;
  if (!(_DWORD)v8)
    goto LABEL_19;
  v13 = (v8 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (v13 < 7 || (v7 < &v12[v9] ? (v14 = v12 >= &v7[v9]) : (v14 = 1), !v14))
  {
    v17 = v7;
    v18 = *(char **)a1;
    do
    {
LABEL_13:
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v24 = *((_QWORD *)v18 + 1);
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v17 + 1) = v24;
      v18 += 16;
      v17 += 16;
    }
    while (v18 != &v12[v9]);
    goto LABEL_14;
  }
  v15 = v13 + 1;
  v16 = (v13 + 1) & 0x1FFFFFFFFFFFFFFELL;
  v17 = &v7[16 * v16];
  v18 = &v12[16 * v16];
  v19 = v16;
  v20 = v7;
  v21 = *(char **)a1;
  do
  {
    v22 = *(_OWORD *)v21;
    v23 = *((_OWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = 0;
    *((_QWORD *)v21 + 3) = 0;
    *(_OWORD *)v20 = v22;
    *((_OWORD *)v20 + 1) = v23;
    v20 += 32;
    v21 += 32;
    v19 -= 2;
  }
  while (v19);
  if (v15 != v16)
    goto LABEL_13;
LABEL_14:
  v25 = *(_QWORD *)a1 - 8;
  do
  {
    v26 = *(uint64_t **)(v25 + v9);
    *(_QWORD *)(v25 + v9) = 0;
    if (v26)
      std::default_delete<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>::operator()[abi:nn180100](v25 + v9, v26);
    v9 -= 16;
  }
  while (v9);
  v12 = *(char **)a1;
LABEL_19:
  v27 = v30;
  if (v12 != v6)
    free(v12);
  *(_QWORD *)a1 = v7;
  v28 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v28;
  *(_DWORD *)(a1 + 12) = v27;
  return (uint64_t)&v7[16 * v28 - 16];
}

uint64_t llvm::SmallVectorTemplateBase<mlir::AsmParserState::Impl::PartialOpDef,false>::growAndEmplaceBack<mlir::OperationName const&>(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  __int128 *v18;
  _OWORD *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  unsigned int v28;
  unint64_t v30;

  v30 = 0;
  v4 = (char *)(a1 + 16);
  v5 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 8, &v30);
  v6 = (uint64_t *)&v5[8 * *(unsigned int *)(a1 + 8)];
  *v6 = 0;
  if (mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>(a2))
  {
    v7 = operator new();
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_DWORD *)(v7 + 16) = 0;
    v8 = (uint64_t *)*v6;
    *v6 = v7;
    if (v8)
      std::default_delete<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>::operator()[abi:nn180100]((uint64_t)v6, v8);
  }
  v9 = *(char **)a1;
  v10 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v10)
  {
    v11 = (v10 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v12 = 8 * v10;
    if (v11 >= 0xB)
    {
      v15 = v9 >= &v5[v12] || v5 >= &v9[v12];
      v13 = v5;
      v14 = *(char **)a1;
      if (v15)
      {
        v16 = v11 + 1;
        v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
        v13 = &v5[v17];
        v14 = &v9[v17];
        v18 = (__int128 *)(v9 + 16);
        v19 = v5 + 16;
        v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v21 = *(v18 - 1);
          v22 = *v18;
          *(v18 - 1) = 0uLL;
          *v18 = 0uLL;
          *(v19 - 1) = v21;
          *v19 = v22;
          v18 += 2;
          v19 += 2;
          v20 -= 4;
        }
        while (v20);
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_17:
          v25 = *(_QWORD *)a1 - 8;
          do
          {
            v26 = *(uint64_t **)(v25 + v12);
            *(_QWORD *)(v25 + v12) = 0;
            if (v26)
              std::default_delete<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>::operator()[abi:nn180100](v25 + v12, v26);
            v12 -= 8;
          }
          while (v12);
          v9 = *(char **)a1;
          goto LABEL_22;
        }
      }
    }
    else
    {
      v13 = v5;
      v14 = *(char **)a1;
    }
    v23 = &v9[8 * v10];
    do
    {
      v24 = *(_QWORD *)v14;
      *(_QWORD *)v14 = 0;
      v14 += 8;
      *(_QWORD *)v13 = v24;
      v13 += 8;
    }
    while (v14 != v23);
    goto LABEL_17;
  }
LABEL_22:
  v27 = v30;
  if (v9 != v4)
    free(v9);
  *(_QWORD *)a1 = v5;
  v28 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v28;
  *(_DWORD *)(a1 + 12) = v27;
  return (uint64_t)&v5[8 * v28 - 8];
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>(_QWORD *a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SymbolTable<Empty>]";
      v15 = 83;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SymbolTable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SymbolTable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v13;
    }
  }
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v2[378]);
}

uint64_t llvm::SmallVectorTemplateBase<mlir::AsmParserState::OperationDefinition::ResultGroupDefinition,false>::growAndEmplaceBack<unsigned int const&,llvm::SMRange>(uint64_t a1, _DWORD *a2, _OWORD *a3)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  int v19;
  unsigned int v20;
  unint64_t v22;

  v22 = 0;
  v6 = (char *)(a1 + 16);
  v7 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 88, &v22);
  v8 = v7;
  v9 = &v7[88 * *(unsigned int *)(a1 + 8)];
  *(_DWORD *)v9 = *a2;
  *(_OWORD *)(v9 + 8) = *a3;
  *((_QWORD *)v9 + 3) = v9 + 40;
  *((_QWORD *)v9 + 4) = 0x300000000;
  v10 = *(char **)a1;
  v11 = *(_DWORD *)(a1 + 8);
  if (v11)
  {
    v12 = &v10[88 * v11];
    v13 = v7 + 24;
    v14 = (uint64_t)(v10 + 24);
    do
    {
      v15 = v14 - 24;
      *((_DWORD *)v13 - 6) = *(_DWORD *)(v14 - 24);
      *((_OWORD *)v13 - 1) = *(_OWORD *)(v14 - 16);
      *v13 = v13 + 2;
      v13[1] = 0x300000000;
      if (*(_DWORD *)(v14 + 8))
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v13, v14);
      v13 += 11;
      v14 += 88;
    }
    while ((char *)(v15 + 88) != v12);
    v10 = *(char **)a1;
    v16 = *(_DWORD *)(a1 + 8);
    if (v16)
    {
      v17 = 88 * v16;
      do
      {
        v18 = *(char **)&v10[v17 - 64];
        if (&v10[v17 - 48] != v18)
          free(v18);
        v17 -= 88;
      }
      while (v17);
      v10 = *(char **)a1;
    }
  }
  v19 = v22;
  if (v10 != v6)
    free(v10);
  *(_QWORD *)a1 = v8;
  v20 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 12) = v19;
  return (uint64_t)&v8[88 * v20 - 88];
}

uint64_t llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::AsmParserState::OperationDefinition>,false>::moveElementsForGrow(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  __int128 *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;

  v2 = *(unsigned int *)(result + 8);
  if (!(_DWORD)v2)
    return result;
  v3 = *(_QWORD *)result;
  v4 = (v2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v4 < 0xB || (v3 < a2 + 8 * v2 ? (v5 = v3 + 8 * v2 > a2) : (v5 = 0), v5))
  {
    v8 = (_QWORD *)a2;
    v9 = *(uint64_t **)result;
LABEL_12:
    v15 = (uint64_t *)(v3 + 8 * v2);
    do
    {
      v16 = *v9;
      *v9++ = 0;
      *v8++ = v16;
    }
    while (v9 != v15);
    goto LABEL_14;
  }
  v6 = v4 + 1;
  v7 = (v4 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  v8 = (_QWORD *)(a2 + 8 * v7);
  v9 = (uint64_t *)(v3 + 8 * v7);
  v10 = (__int128 *)(v3 + 16);
  v11 = (_OWORD *)(a2 + 16);
  v12 = v7;
  do
  {
    v13 = *(v10 - 1);
    v14 = *v10;
    *(v10 - 1) = 0uLL;
    *v10 = 0uLL;
    *(v11 - 1) = v13;
    *v11 = v14;
    v10 += 2;
    v11 += 2;
    v12 -= 4;
  }
  while (v12);
  if (v6 != v7)
    goto LABEL_12;
LABEL_14:
  v17 = *(_QWORD **)result;
  v18 = (_QWORD *)(*(_QWORD *)result + 8 * v2);
  do
  {
    v20 = *--v18;
    v19 = v20;
    *v18 = 0;
    if (v20)
    {
      v21 = *(void **)(v19 + 144);
      if (v21 != (void *)(v19 + 160))
        free(v21);
      v22 = *(char **)(v19 + 40);
      v23 = *(_DWORD *)(v19 + 48);
      if (v23)
      {
        v24 = 88 * v23;
        do
        {
          v25 = *(char **)&v22[v24 - 64];
          if (&v22[v24 - 48] != v25)
            free(v25);
          v24 -= 88;
        }
        while (v24);
        v22 = *(char **)(v19 + 40);
      }
      if (v22 != (char *)(v19 + 56))
        free(v22);
      result = MEMORY[0x20BD002F8](v19, 0x10F0C401650C48ELL);
    }
  }
  while (v18 != v17);
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::AsmParserState::BlockDefinition>,false>::moveElementsForGrow(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  __int128 *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;

  v2 = *(unsigned int *)(result + 8);
  if (!(_DWORD)v2)
    return result;
  v3 = *(_QWORD *)result;
  v4 = (v2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v4 < 0xB || (v3 < a2 + 8 * v2 ? (v5 = v3 + 8 * v2 > a2) : (v5 = 0), v5))
  {
    v8 = (_QWORD *)a2;
    v9 = *(uint64_t **)result;
LABEL_12:
    v15 = (uint64_t *)(v3 + 8 * v2);
    do
    {
      v16 = *v9;
      *v9++ = 0;
      *v8++ = v16;
    }
    while (v9 != v15);
    goto LABEL_14;
  }
  v6 = v4 + 1;
  v7 = (v4 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  v8 = (_QWORD *)(a2 + 8 * v7);
  v9 = (uint64_t *)(v3 + 8 * v7);
  v10 = (__int128 *)(v3 + 16);
  v11 = (_OWORD *)(a2 + 16);
  v12 = v7;
  do
  {
    v13 = *(v10 - 1);
    v14 = *v10;
    *(v10 - 1) = 0uLL;
    *v10 = 0uLL;
    *(v11 - 1) = v13;
    *v11 = v14;
    v10 += 2;
    v11 += 2;
    v12 -= 4;
  }
  while (v12);
  if (v6 != v7)
    goto LABEL_12;
LABEL_14:
  v17 = *(_QWORD **)result;
  v18 = (_QWORD *)(*(_QWORD *)result + 8 * v2);
  do
  {
    v20 = *--v18;
    v19 = v20;
    *v18 = 0;
    if (v20)
    {
      v21 = *(char **)(v19 + 88);
      v22 = *(unsigned int *)(v19 + 96);
      if ((_DWORD)v22)
      {
        v23 = 80 * v22;
        do
        {
          v24 = *(char **)&v21[v23 - 64];
          if (&v21[v23 - 48] != v24)
            free(v24);
          v23 -= 80;
        }
        while (v23);
        v21 = *(char **)(v19 + 88);
      }
      if (v21 != (char *)(v19 + 104))
        free(v21);
      v25 = *(void **)(v19 + 24);
      if (v25 != (void *)(v19 + 40))
        free(v25);
      result = MEMORY[0x20BD002F8](v19, 0x10F0C400A026A70);
    }
  }
  while (v18 != v17);
  return result;
}

void llvm::SmallVectorTemplateBase<mlir::AsmParserState::SMDefinition,false>::grow(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  int v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  unint64_t v16;

  v16 = 0;
  v3 = (char *)(a1 + 16);
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 80, &v16);
  v5 = v4;
  v6 = *(char **)a1;
  v7 = *(_DWORD *)(a1 + 8);
  if (v7)
  {
    v8 = &v6[80 * v7];
    v9 = v4 + 16;
    v10 = (uint64_t)(v6 + 16);
    do
    {
      *((_OWORD *)v9 - 1) = *(_OWORD *)(v10 - 16);
      *v9 = v9 + 2;
      v9[1] = 0x300000000;
      if (*(_DWORD *)(v10 + 8))
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v9, v10);
      v11 = v10 - 16;
      v9 += 10;
      v10 += 80;
    }
    while ((char *)(v11 + 80) != v8);
    v6 = *(char **)a1;
    v12 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v12)
    {
      v13 = 80 * v12;
      do
      {
        v14 = *(char **)&v6[v13 - 64];
        if (&v6[v13 - 48] != v14)
          free(v14);
        v13 -= 80;
      }
      while (v13);
      v6 = *(char **)a1;
    }
  }
  v15 = v16;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v15;
}

void llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::AsmParserState::AttributeAliasDefinition>,false>::grow(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int v24;
  unint64_t v25;

  v25 = 0;
  v3 = (char *)(a1 + 16);
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 8, &v25);
  v5 = *(char **)a1;
  v6 = *(char **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v7)
    goto LABEL_21;
  v8 = (v7 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v9 = 8 * v7;
  if (v8 < 0xB)
  {
    v10 = v4;
LABEL_12:
    v19 = &v5[8 * v7];
    do
    {
      v20 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      v6 += 8;
      *(_QWORD *)v10 = v20;
      v10 += 8;
    }
    while (v6 != v19);
    goto LABEL_14;
  }
  v11 = v5 >= &v4[v9] || v4 >= &v5[v9];
  v10 = v4;
  if (!v11)
    goto LABEL_12;
  v12 = v8 + 1;
  v13 = 8 * (v12 & 0x3FFFFFFFFFFFFFFCLL);
  v10 = &v4[v13];
  v6 = &v5[v13];
  v14 = (__int128 *)(v5 + 16);
  v15 = v4 + 16;
  v16 = v12 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v17 = *(v14 - 1);
    v18 = *v14;
    *(v14 - 1) = 0uLL;
    *v14 = 0uLL;
    *(v15 - 1) = v17;
    *v15 = v18;
    v14 += 2;
    v15 += 2;
    v16 -= 4;
  }
  while (v16);
  if (v12 != (v12 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_12;
LABEL_14:
  v21 = *(_QWORD *)a1 - 8;
  do
  {
    v22 = *(_QWORD *)(v21 + v9);
    *(_QWORD *)(v21 + v9) = 0;
    if (v22)
    {
      v23 = *(void **)(v22 + 32);
      if (v23 != (void *)(v22 + 48))
        free(v23);
      MEMORY[0x20BD002F8](v22, 0x10F0C40C6C5BB84);
    }
    v9 -= 8;
  }
  while (v9);
  v6 = *(char **)a1;
LABEL_21:
  v24 = v25;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v24;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::LookupBucketFor<mlir::Value>(uint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v7 = &unk_254519000;
    if ((v6 & 1) == 0)
    {
      v24 = a3;
      v22 = a2;
      v25 = *a1;
      v23 = *((_DWORD *)a1 + 4);
      v26 = *a2;
      v7 = &unk_254519000;
      v4 = v25;
      v5 = v26;
      v3 = v23;
      a2 = v22;
      a3 = v24;
      if (v20)
      {
        v21 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v21 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v21;
        v7 = (_QWORD *)&unk_254519000;
        v4 = v25;
        v5 = v26;
        v3 = v23;
        a2 = v22;
        a3 = v24;
      }
    }
    v8 = (v7[373] + 8 * v5) ^ HIDWORD(v5);
    v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v8) >> 47) ^ (0x9DDFEA08EB382D69 * v8));
    v10 = -348639895 * ((v9 >> 47) ^ v9);
    v11 = v3 - 1;
    v12 = v10 & (v3 - 1);
    v13 = (_QWORD *)(v4 + 72 * v12);
    v14 = *v13;
    if (*a2 == *v13)
    {
      result = 1;
LABEL_5:
      *a3 = v13;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v14 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == -8192;
        if (v18)
          v16 = v13;
        v19 = v12 + v17++;
        v12 = v19 & v11;
        v13 = (_QWORD *)(v4 + 72 * (v19 & v11));
        v14 = *v13;
        if (*a2 == *v13)
          goto LABEL_5;
      }
      result = 0;
      if (v16)
        v13 = v16;
      *a3 = v13;
    }
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(72 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v10 = 72 * v3;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::moveFromOldBuckets(a1, (uint64_t)v4, (uint64_t)v4 + v10);
    llvm::deallocate_buffer(v4, (void *)v10);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(_DWORD *)(a1 + 16);
  if (v11)
  {
    v12 = 72 * v11 - 72;
    if (v12 < 0x48)
    {
      v13 = result;
LABEL_12:
      v17 = &result[9 * v11];
      do
      {
        *v13 = -4096;
        v13 += 9;
      }
      while (v13 != v17);
      return result;
    }
    v14 = v12 / 0x48 + 1;
    v13 = &result[9 * (v14 & 0x7FFFFFFFFFFFFFELL)];
    v15 = v14 & 0x7FFFFFFFFFFFFFELL;
    v16 = result;
    do
    {
      *v16 = -4096;
      v16[9] = -4096;
      v16 += 18;
      v15 -= 2;
    }
    while (v15);
    if (v14 != (v14 & 0x7FFFFFFFFFFFFFELL))
      goto LABEL_12;
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::moveFromOldBuckets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)a1;
    v8 = 72 * v6 - 72;
    if (v8 < 0x48)
    {
      v9 = *(_QWORD **)a1;
LABEL_7:
      v13 = (_QWORD *)(v7 + 72 * v6);
      do
      {
        *v9 = -4096;
        v9 += 9;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x48 + 1;
    v9 = (_QWORD *)(v7 + 72 * (v10 & 0x7FFFFFFFFFFFFFELL));
    v11 = v10 & 0x7FFFFFFFFFFFFFELL;
    v12 = *(_QWORD **)a1;
    do
    {
      *v12 = -4096;
      v12[9] = -4096;
      v12 += 18;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0x7FFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v17 = 0;
        llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)v4, &v17);
        v14 = v17;
        *v17 = *(_QWORD *)v4;
        v14[2] = 0x600000000;
        v14[1] = v14 + 3;
        v15 = (uint64_t)(v14 + 1);
        if (*(_DWORD *)(v4 + 16))
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v15, v4 + 8);
        ++*(_DWORD *)(a1 + 8);
        v16 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v16)
          free(v16);
      }
      v4 += 72;
    }
    while (v4 != a3);
  }
}

uint64_t llvm::SmallVectorImpl<llvm::SMLoc>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_16;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 8 * v8);
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 8 * v9);
        v10 = *v7;
        if (v9 == v10)
        {
LABEL_15:
          *(_DWORD *)(a1 + 8) = v8;
LABEL_16:
          *v7 = 0;
          return a1;
        }
      }
      else
      {
        v9 = 0;
        v10 = *v7;
        if (!*v7)
          goto LABEL_15;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 8);
      v9 = 0;
      v10 = *v7;
      if (!*v7)
        goto LABEL_15;
    }
    memcpy((void *)(*(_QWORD *)a1 + 8 * v9), (const void *)(*(_QWORD *)a2 + 8 * v9), *(_QWORD *)a2 + 8 * v10 - (*(_QWORD *)a2 + 8 * v9));
    goto LABEL_15;
  }
  return a1;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>,mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>::InsertIntoBucket<mlir::Attribute const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  BOOL v28;
  unsigned int v29;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(24 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    v16 = 3 * v6;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>,mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>::moveFromOldBuckets(a1, v10, &v10[v16]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(v16 * 8));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = 24 * v17 - 24;
  v19 = buffer;
  if (v18 < 0x18)
    goto LABEL_34;
  v20 = v18 / 0x18 + 1;
  v19 = &buffer[3 * (v20 & 0x1FFFFFFFFFFFFFFELL)];
  v21 = v20 & 0x1FFFFFFFFFFFFFFELL;
  v22 = buffer;
  do
  {
    *v22 = -4096;
    v22[3] = -4096;
    v22 += 6;
    v21 -= 2;
  }
  while (v21);
  if (v20 != (v20 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v19 = -4096;
      v19 += 3;
    }
    while (v19 != &buffer[3 * v17]);
  }
  v7 = *a3;
  v23 = v17 - 1;
  v24 = ((*a3 >> 4) ^ (*a3 >> 9)) & v23;
  a2 = &buffer[3 * v24];
  v25 = *a2;
  if (*a3 != *a2)
  {
    v26 = 0;
    v27 = 1;
    while (v25 != -4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == -8192;
      if (v28)
        v26 = a2;
      v29 = v24 + v27++;
      v24 = v29 & v23;
      a2 = &buffer[3 * v24];
      v25 = *a2;
      if (v7 == *a2)
        goto LABEL_4;
    }
    if (v26)
      a2 = v26;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = (uint64_t)(a2 + 3);
  a2[2] = 0;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>,mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unsigned int v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  int v24;
  BOOL v25;
  unsigned int v26;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 24 * v6 - 24;
    if (v8 < 0x18)
    {
      v9 = *(_QWORD **)a1;
LABEL_7:
      v13 = &v7[3 * v6];
      do
      {
        *v9 = -4096;
        v9 += 3;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x18 + 1;
    v9 = &v7[3 * (v10 & 0x1FFFFFFFFFFFFFFELL)];
    v11 = v10 & 0x1FFFFFFFFFFFFFFELL;
    v12 = *(_QWORD **)a1;
    do
    {
      *v12 = -4096;
      v12[3] = -4096;
      v12 += 6;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    while (1)
    {
      v14 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_11:
      v4 += 3;
      if (v4 == a3)
        return;
    }
    v15 = *(_DWORD *)(a1 + 16) - 1;
    v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
    v17 = (_QWORD *)(*(_QWORD *)a1 + 24 * v16);
    v18 = *v17;
    if (v14 != *v17)
    {
      v23 = 0;
      v24 = 1;
      while (v18 != -4096)
      {
        if (v23)
          v25 = 0;
        else
          v25 = v18 == -8192;
        if (v25)
          v23 = v17;
        v26 = v16 + v24++;
        v16 = v26 & v15;
        v17 = (_QWORD *)(*(_QWORD *)a1 + 24 * (v26 & v15));
        v18 = *v17;
        if (v14 == *v17)
          goto LABEL_14;
      }
      if (v23)
        v17 = v23;
    }
LABEL_14:
    *v17 = v14;
    v17[1] = v17 + 3;
    v17[2] = 0;
    if (*((_DWORD *)v4 + 4))
    {
      llvm::SmallVectorImpl<llvm::SmallVector<llvm::SMRange,3u>>::operator=((uint64_t)(v17 + 1), (uint64_t)(v4 + 1));
      v19 = *((unsigned int *)v4 + 4);
      ++*(_DWORD *)(a1 + 8);
      v20 = (char *)v4[1];
      if (!(_DWORD)v19)
        goto LABEL_22;
      v21 = v19 << 6;
      do
      {
        v22 = *(char **)&v20[v21 - 64];
        if (&v20[v21 - 48] != v22)
          free(v22);
        v21 -= 64;
      }
      while (v21);
    }
    else
    {
      ++*(_DWORD *)(a1 + 8);
    }
    v20 = (char *)v4[1];
LABEL_22:
    if (v20 != (char *)(v4 + 3))
      free(v20);
    goto LABEL_11;
  }
}

uint64_t llvm::SmallVectorImpl<llvm::SmallVector<llvm::SMRange,3u>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _DWORD *v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;

  if (a1 != a2)
  {
    v5 = a2 + 16;
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v6 = *(char **)a1;
      v7 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v7)
      {
        v8 = v7 << 6;
        do
        {
          v9 = *(char **)&v6[v8 - 64];
          if (&v6[v8 - 48] != v9)
            free(v9);
          v8 -= 64;
        }
        while (v8);
        v6 = *(char **)a1;
      }
      if (v6 != (char *)(a1 + 16))
        free(v6);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v10 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
LABEL_12:
      *v10 = 0;
      return a1;
    }
    v10 = (_DWORD *)(a2 + 8);
    v12 = *(unsigned int *)(a2 + 8);
    v13 = *(unsigned int *)(a1 + 8);
    if (v13 >= v12)
    {
      v17 = *(char **)a1;
      if ((_DWORD)v12)
      {
        v18 = 0;
        do
        {
          llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)&v17[v18], v4 + v18);
          v18 += 64;
        }
        while (v12 << 6 != v18);
        v19 = &v17[v18];
        v17 = *(char **)a1;
        v13 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        v19 = *(char **)a1;
      }
      v31 = &v17[64 * v13];
      while (v31 != v19)
      {
        v33 = (char *)*((_QWORD *)v31 - 8);
        v31 -= 64;
        v32 = v33;
        if (v31 + 16 != v33)
          free(v32);
      }
      *(_DWORD *)(a1 + 8) = v12;
      v34 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v34)
      {
        v35 = *(_QWORD *)a2;
        v36 = v34 << 6;
        do
        {
          v37 = *(void **)(v35 + v36 - 64);
          if ((void *)(v35 + v36 - 48) != v37)
            free(v37);
          v36 -= 64;
        }
        while (v36);
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v12)
    {
      if (!(_DWORD)v13)
      {
        v13 = 0;
        v22 = *(_QWORD *)a2;
        v23 = *(unsigned int *)(a2 + 8);
        if (*(_DWORD *)(a2 + 8))
        {
LABEL_31:
          v24 = *(char **)a1;
          v25 = v13 << 6;
          v26 = v23 << 6;
          do
          {
            v27 = &v24[v25];
            *(_QWORD *)v27 = &v24[v25 + 16];
            *((_QWORD *)v27 + 1) = 0x300000000;
            if (*(_DWORD *)(v22 + v25 + 8))
              llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v27, v22 + v25);
            v24 += 64;
            v26 -= 64;
            v22 += 64;
          }
          while (v25 != v26);
          v22 = *(_QWORD *)a2;
        }
LABEL_36:
        *(_DWORD *)(a1 + 8) = v12;
        v28 = *v10;
        if ((_DWORD)v28)
        {
          v29 = v28 << 6;
          do
          {
            v30 = *(void **)(v22 + v29 - 64);
            if ((void *)(v22 + v29 - 48) != v30)
              free(v30);
            v29 -= 64;
          }
          while (v29);
        }
        goto LABEL_12;
      }
      v20 = *(_QWORD *)a1;
      v21 = v13 << 6;
      do
      {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=(v20, v4);
        v4 += 64;
        v20 += 64;
        v21 -= 64;
      }
      while (v21);
    }
    else
    {
      if ((_DWORD)v13)
      {
        v14 = *(_QWORD *)a1;
        v15 = v13 << 6;
        do
        {
          v16 = *(void **)(v14 + v15 - 64);
          if ((void *)(v14 + v15 - 48) != v16)
            free(v16);
          v15 -= 64;
        }
        while (v15);
      }
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorTemplateBase<llvm::SmallVector<llvm::SMRange,3u>,false>::grow(a1, v12);
      v13 = 0;
    }
    v22 = *(_QWORD *)a2;
    v23 = *(unsigned int *)(a2 + 8);
    if (v13 != v23)
      goto LABEL_31;
    goto LABEL_36;
  }
  return a1;
}

void llvm::SmallVectorTemplateBase<llvm::SmallVector<llvm::SMRange,3u>,false>::grow(uint64_t a1, unint64_t a2)
{
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  unint64_t v14;

  v14 = 0;
  v3 = (_DWORD *)(a1 + 16);
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 64, &v14);
  v5 = v4;
  v6 = *(_DWORD **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = v7 << 6;
    v9 = v4;
    do
    {
      *v9 = v9 + 2;
      v9[1] = 0x300000000;
      if (v6[2])
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v9, (uint64_t)v6);
      v9 += 8;
      v6 += 16;
      v8 -= 64;
    }
    while (v8);
    v6 = *(_DWORD **)a1;
    v10 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v10)
    {
      v11 = v10 << 6;
      do
      {
        v12 = *(char **)((char *)v6 + v11 - 64);
        if ((char *)v6 + v11 - 48 != v12)
          free(v12);
        v11 -= 64;
      }
      while (v11);
      v6 = *(_DWORD **)a1;
    }
  }
  v13 = v14;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::SmallVector<llvm::SMRange,3u>,false>::growAndEmplaceBack<llvm::SMRange const*,llvm::SMRange const*>(uint64_t a1, const void **a2, const void **a3)
{
  _DWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  unint64_t v23;

  v23 = 0;
  v6 = (_DWORD *)(a1 + 16);
  v7 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 64, &v23);
  v8 = &v7[8 * (unint64_t)*(unsigned int *)(a1 + 8)];
  v9 = *a2;
  v10 = *a3;
  *v8 = v8 + 2;
  v8[1] = 0x300000000;
  v11 = v10 - v9;
  if ((unint64_t)(v10 - v9) < 0x31)
  {
    v12 = 0;
    if (v9 == v10)
      goto LABEL_6;
    goto LABEL_5;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v8, v8 + 2, v11 >> 4, 16);
  v12 = *((_DWORD *)v8 + 2);
  if (v9 != v10)
  {
LABEL_5:
    memcpy((void *)(*v8 + 16 * v12), v9, v10 - v9);
    v12 = *((_DWORD *)v8 + 2);
  }
LABEL_6:
  *((_DWORD *)v8 + 2) = v12 + ((unint64_t)v11 >> 4);
  v13 = *(_DWORD **)a1;
  v14 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v14)
  {
    v15 = v14 << 6;
    v16 = v7;
    do
    {
      *v16 = v16 + 2;
      v16[1] = 0x300000000;
      if (v13[2])
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v16, (uint64_t)v13);
      v16 += 8;
      v13 += 16;
      v15 -= 64;
    }
    while (v15);
    v13 = *(_DWORD **)a1;
    v17 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v17)
    {
      v18 = v17 << 6;
      do
      {
        v19 = *(char **)((char *)v13 + v18 - 64);
        if ((char *)v13 + v18 - 48 != v19)
          free(v19);
        v18 -= 64;
      }
      while (v18);
      v13 = *(_DWORD **)a1;
    }
  }
  v20 = v23;
  if (v13 != v6)
    free(v13);
  *(_QWORD *)a1 = v7;
  v21 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v21;
  *(_DWORD *)(a1 + 12) = v20;
  return (uint64_t)&v7[8 * v21 - 8];
}

llvm::APFloatBase *mlir::detail::Parser::parseAttribute(mlir::StringAttr ****a1, _QWORD *a2)
{
  mlir::StringAttr ***v3;
  mlir::Token *v4;
  uint64_t v5;
  unsigned __int16 v7;
  uint64_t Dictionary;
  uint64_t LocRange;
  uint64_t *v10;
  uint64_t v11;
  mlir::StringAttr ***v12;
  mlir::StringAttr ***v13;
  MirInfoChannelAssignment *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t OCGSize;
  mlir::StringAttr ***v19;
  unsigned int v20;
  mlir::StringAttr ***v21;
  const char *v22;
  mlir::StringAttr ***v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  mlir::StringAttr ***v28;
  std::string *p_p;
  std::string::size_type v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  mlir::detail::Parser *v49;
  int v50;
  mlir::StringAttr ***v51;
  uint64_t v52;
  char v53;
  mlir::StringAttr ***v54;
  mlir::StringAttr ***v55;
  int v56;
  mlir::StringAttr ***v57;
  mlir::StringAttr ***v58;
  mlir::StringAttr ***v59;
  mlir::StringAttr ***v60;
  mlir::StringAttr ***v61;
  mlir::StringAttr ***v62;
  mlir::MLIRContext *v63;
  mlir::StringAttr ***v64;
  mlir::StringAttr ***v65;
  void *v66;
  mlir::StringAttr *v68;
  mlir::StringAttr ***v69;
  std::string *v70;
  std::string::size_type size;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  void *v75;
  _QWORD *v76;
  _QWORD *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  std::string __p;
  std::string v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[3];
  void *v86;
  uint64_t v87;
  void *v88;
  _QWORD *v89;
  void *v90;
  _QWORD *v91;
  char v92;
  _QWORD v93[24];
  __int128 v94;
  _QWORD v95[2];
  __int16 v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v4 = (mlir::Token *)(v3 + 7);
  v5 = (uint64_t)a2;
  switch(*((_DWORD *)v3 + 14))
  {
    case 2:
      if (mlir::Token::isCodeCompletionFor((uint64_t)v4, 5))
        return (llvm::APFloatBase *)mlir::detail::Parser::parseExtendedAttr((mlir::detail::Parser *)a1, v5);
      return (llvm::APFloatBase *)mlir::detail::Parser::codeCompleteAttribute((mlir::detail::Parser *)a1);
    case 4:
      *(_QWORD *)&v94 = v95;
      *((_QWORD *)&v94 + 1) = 0x300000000;
      if (v3[16])
      {
        LocRange = mlir::Token::getLocRange(v4);
        v10 = (uint64_t *)(v94 + 16 * DWORD2(v94));
        *v10 = LocRange;
        v10[1] = v11;
        ++DWORD2(v94);
        v3 = a1[1];
      }
      mlir::Token::getSymbolReference((mlir::Token *)(v3 + 7), &v82);
      mlir::Lexer::lexToken((mlir::Lexer *)(a1[1] + 1), (uint64_t)&v98);
      v12 = a1[1];
      *(_OWORD *)(v12 + 7) = v98;
      v12[9] = (mlir::StringAttr **)v99;
      v13 = a1[1];
      v14 = (MirInfoChannelAssignment *)(v13 + 7);
      if (*((_DWORD *)v13 + 14) != 15)
      {
        v16 = 0;
        v15 = 0;
LABEL_115:
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v70 = &v82;
        else
          v70 = (std::string *)v82.__r_.__value_.__r.__words[0];
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
        else
          size = v82.__r_.__value_.__l.__size_;
        Dictionary = mlir::SymbolRefAttr::get(**v13, (uint64_t)v70, size, (uint64_t)v15, v16 - v15);
        v72 = (uint64_t)a1[1][16];
        if (v72)
          mlir::AsmParserState::addUses(v72, Dictionary, (char *)v94, DWORD2(v94));
        goto LABEL_142;
      }
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        OCGSize = MirInfoChannelAssignment::GetOCGSize(v14);
        mlir::Lexer::lexToken((mlir::Lexer *)(a1[1] + 1), (uint64_t)&v98);
        v19 = a1[1];
        *(_OWORD *)(v19 + 7) = v98;
        v19[9] = (mlir::StringAttr **)v99;
        v13 = a1[1];
        v20 = *((_DWORD *)v13 + 14);
        if (v20 != 15)
        {
          if (v20 >= 2)
          {
            v13[5] = (mlir::StringAttr **)OCGSize;
            mlir::Lexer::lexToken((mlir::Lexer *)(v13 + 1), (uint64_t)&v98);
            v69 = a1[1];
            *(_OWORD *)(v69 + 7) = v98;
            v69[9] = (mlir::StringAttr **)v99;
            v13 = a1[1];
          }
          goto LABEL_115;
        }
        mlir::Lexer::lexToken((mlir::Lexer *)(v13 + 1), (uint64_t)&v98);
        v21 = a1[1];
        *(_OWORD *)(v21 + 7) = v98;
        v21[9] = (mlir::StringAttr **)v99;
        v22 = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(a1[1] + 7));
        v23 = a1[1];
        if (*((_DWORD *)v23 + 14) != 4)
          break;
        if (v23[16])
        {
          v25 = mlir::Token::getLocRange((mlir::Token *)(v23 + 7));
          v26 = DWORD2(v94);
          if (DWORD2(v94) >= (unint64_t)HIDWORD(v94))
          {
            v48 = v24;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v95, DWORD2(v94) + 1, 16);
            v24 = v48;
            v26 = DWORD2(v94);
          }
          v27 = (uint64_t *)(v94 + 16 * v26);
          *v27 = v25;
          v27[1] = v24;
          ++DWORD2(v94);
          v23 = a1[1];
        }
        mlir::Token::getSymbolReference((mlir::Token *)(v23 + 7), &__p);
        mlir::Lexer::lexToken((mlir::Lexer *)(a1[1] + 1), (uint64_t)&v98);
        v28 = a1[1];
        *(_OWORD *)(v28 + 7) = v98;
        v28[9] = (mlir::StringAttr **)v99;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v30 = __p.__r_.__value_.__l.__size_;
        v31 = mlir::SymbolRefAttr::get(**a1[1], (uint64_t)p_p, v30);
        v32 = v31;
        if (v16 < v17)
        {
          *v16++ = v31;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_13;
          goto LABEL_12;
        }
        v33 = v16 - v15;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61)
          abort();
        if (((char *)v17 - (char *)v15) >> 2 > v34)
          v34 = ((char *)v17 - (char *)v15) >> 2;
        if ((unint64_t)((char *)v17 - (char *)v15) >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        if (v35)
        {
          if (v35 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v36 = operator new(8 * v35);
          v37 = (uint64_t *)&v36[8 * v33];
          *v37 = v32;
          v38 = (uint64_t)(v37 + 1);
          if (v16 == v15)
            goto LABEL_52;
        }
        else
        {
          v36 = 0;
          v37 = (uint64_t *)(8 * v33);
          *(_QWORD *)(8 * v33) = v32;
          v38 = 8 * v33 + 8;
          if (v16 == v15)
            goto LABEL_52;
        }
        v39 = (char *)(v16 - 1) - (char *)v15;
        if (v39 < 0x168)
        {
          v40 = v16;
          goto LABEL_51;
        }
        if (&v36[(char *)v16 - (char *)v15 - 8 - (v39 & 0xFFFFFFFFFFFFFFF8)] > &v36[(char *)v16 - (char *)v15 - 8])
        {
          v40 = v16;
          goto LABEL_51;
        }
        if ((uint64_t *)((char *)v16 - (v39 & 0xFFFFFFFFFFFFFFF8) - 8) > v16 - 1)
        {
          v40 = v16;
          do
          {
LABEL_51:
            v47 = *--v40;
            *--v37 = v47;
          }
          while (v40 != v15);
          goto LABEL_52;
        }
        if ((unint64_t)((char *)v15 - v36) < 0x20)
        {
          v40 = v16;
          goto LABEL_51;
        }
        v41 = (v39 >> 3) + 1;
        v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
        v40 = &v16[v42 / 0xFFFFFFFFFFFFFFF8];
        v37 = (uint64_t *)((char *)v37 - v42);
        v43 = &v36[8 * v33 - 16];
        v44 = v16 - 2;
        v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v46 = *(_OWORD *)v44;
          *(v43 - 1) = *((_OWORD *)v44 - 1);
          *v43 = v46;
          v43 -= 2;
          v44 -= 4;
          v45 -= 4;
        }
        while (v45);
        if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_51;
LABEL_52:
        v17 = (uint64_t *)&v36[8 * v35];
        if (v15)
          operator delete(v15);
        v15 = v37;
        v16 = (uint64_t *)v38;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_13;
LABEL_12:
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_13:
        v13 = a1[1];
        v14 = (MirInfoChannelAssignment *)(v13 + 7);
        if (*((_DWORD *)v13 + 14) != 15)
          goto LABEL_115;
      }
      *(_QWORD *)&v98 = "expected nested symbol reference identifier";
      LOWORD(v101) = 259;
      mlir::detail::Parser::emitError((uint64_t)a1, v22, (uint64_t)&v98, v85);
      if (v85[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v85);
      if (v92)
      {
        v73 = v90;
        if (v90)
        {
          v74 = v91;
          v75 = v90;
          if (v91 != v90)
          {
            do
              v74 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v74 - 1);
            while (v74 != v73);
            v75 = v90;
          }
          v91 = v73;
          operator delete(v75);
        }
        v76 = v88;
        if (v88)
        {
          v77 = v89;
          v78 = v88;
          if (v89 != v88)
          {
            do
            {
              v80 = *--v77;
              v79 = v80;
              *v77 = 0;
              if (v80)
                MEMORY[0x20BD002D4](v79, 0x1000C8077774924);
            }
            while (v77 != v76);
            v78 = v88;
          }
          v89 = v76;
          operator delete(v78);
        }
        if (v86 != &v87)
          free(v86);
      }
      Dictionary = 0;
LABEL_142:
      if (v15)
        operator delete(v15);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      v66 = (void *)v94;
      if ((_QWORD *)v94 != v95)
LABEL_147:
        free(v66);
      return (llvm::APFloatBase *)Dictionary;
    case 5:
      return (llvm::APFloatBase *)mlir::detail::Parser::parseExtendedAttr((mlir::detail::Parser *)a1, v5);
    case 9:
      v49 = (mlir::detail::Parser *)a1;
      v50 = 0;
      return mlir::detail::Parser::parseFloatAttr(v49, (uint64_t)a2, v50);
    case 0xA:
      return (llvm::APFloatBase *)mlir::detail::Parser::parseDecOrHexAttr((mlir::detail::Parser *)a1, (uint64_t)a2, 0);
    case 0xB:
      mlir::Token::getStringValue(v4, &v82);
      mlir::Lexer::lexToken((mlir::Lexer *)(a1[1] + 1), (uint64_t)&v94);
      v51 = a1[1];
      *(_OWORD *)(v51 + 7) = v94;
      v51[9] = (mlir::StringAttr **)v95[0];
      if (v5)
        goto LABEL_59;
      v64 = a1[1];
      if (*((_DWORD *)v64 + 14) == 15)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v64 + 1), (uint64_t)&v94);
        v65 = a1[1];
        *(_OWORD *)(v65 + 7) = v94;
        v65[9] = (mlir::StringAttr **)v95[0];
        v5 = mlir::detail::Parser::parseType((mlir::detail::Parser *)a1);
        if (!v5)
        {
          Dictionary = 0;
          goto LABEL_111;
        }
LABEL_59:
        v96 = 260;
        *(_QWORD *)&v94 = &v82;
        v52 = mlir::StringAttr::get((char **)&v94, v5);
      }
      else
      {
        v68 = **v64;
        LOWORD(v101) = 260;
        *(_QWORD *)&v98 = &v82;
        v52 = mlir::StringAttr::get(v68, (mlir::MLIRContext *)&v98);
      }
      Dictionary = v52;
LABEL_111:
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      return (llvm::APFloatBase *)Dictionary;
    case 0x14:
      *(_QWORD *)&v94 = v95;
      *((_QWORD *)&v94 + 1) = *(_QWORD *)"";
      v97 = 4;
      *(_QWORD *)&v98 = 1;
      *((_QWORD *)&v98 + 1) = -4096;
      v99 = -4096;
      v100 = -4096;
      v101 = -4096;
      v82.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
      v82.__r_.__value_.__l.__size_ = (std::string::size_type)&v98;
      v82.__r_.__value_.__r.__words[2] = (std::string::size_type)&v94;
      v53 = mlir::detail::Parser::parseCommaSeparatedList((uint64_t)a1, 4, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseAttributeDict(mlir::NamedAttrList &)::$_0>, (uint64_t)&v82, (uint64_t)" in attribute dictionary", 24);
      if ((v98 & 1) == 0)
        llvm::deallocate_buffer(*((llvm **)&v98 + 1), (void *)(8 * v99));
      if (v53)
        Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)&v94, **a1[1]);
      else
        Dictionary = 0;
      v66 = (void *)v94;
      if ((_QWORD *)v94 == v95)
        return (llvm::APFloatBase *)Dictionary;
      goto LABEL_147;
    case 0x16:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 1), (uint64_t)&v94);
      v54 = a1[1];
      *(_OWORD *)(v54 + 7) = v94;
      v54[9] = (mlir::StringAttr **)v95[0];
      *(_QWORD *)&v94 = v95;
      *((_QWORD *)&v94 + 1) = *(_QWORD *)"";
      *(_QWORD *)&v98 = &v94;
      *((_QWORD *)&v98 + 1) = a1;
      if (mlir::detail::Parser::parseCommaSeparatedListUntil((uint64_t)a1, 29, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseAttribute(mlir::Type)::$_0>, (uint64_t)&v98, 1))
      {
        Dictionary = mlir::Builder::getArrayAttr((mlir::MLIRContext **)a1, v94, DWORD2(v94));
      }
      else
      {
        Dictionary = 0;
      }
      v66 = (void *)v94;
      if ((_QWORD *)v94 == v95)
        return (llvm::APFloatBase *)Dictionary;
      goto LABEL_147;
    case 0x18:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 1), (uint64_t)&v94);
      v55 = a1[1];
      *(_OWORD *)(v55 + 7) = v94;
      v55[9] = (mlir::StringAttr **)v95[0];
      v56 = *((_DWORD *)a1[1] + 14);
      if (v56 == 9)
      {
        v49 = (mlir::detail::Parser *)a1;
        a2 = (_QWORD *)v5;
        v50 = 1;
        return mlir::detail::Parser::parseFloatAttr(v49, (uint64_t)a2, v50);
      }
      if (v56 == 10)
        return (llvm::APFloatBase *)mlir::detail::Parser::parseDecOrHexAttr((mlir::detail::Parser *)a1, v5, 1);
      *(_QWORD *)&v94 = "expected constant integer or floating point value";
      v96 = 259;
      mlir::detail::Parser::emitWrongTokenError((uint64_t)a1, (uint64_t)&v94, v93);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v93);
      return 0;
    case 0x22:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 1), (uint64_t)&v94);
      v57 = a1[1];
      *(_OWORD *)(v57 + 7) = v94;
      v57[9] = (mlir::StringAttr **)v95[0];
      v82.__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)&v94 = "expected '<' in affine map";
      v96 = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)a1, 23, (uint64_t)&v94))
        return 0;
      if (!mlir::detail::Parser::parseAffineMapReference((mlir::detail::Parser *)a1, (mlir::AffineMap *)&v82))return 0;
      *(_QWORD *)&v98 = "expected '>' in affine map";
      LOWORD(v101) = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)a1, 19, (uint64_t)&v98))
        return 0;
      return (llvm::APFloatBase *)mlir::AffineMapAttr::get(v82.__r_.__value_.__r.__words[0]);
    case 0x23:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 1), (uint64_t)&v94);
      v58 = a1[1];
      *(_OWORD *)(v58 + 7) = v94;
      v58[9] = (mlir::StringAttr **)v95[0];
      v82.__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)&v94 = "expected '<' in integer set";
      v96 = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)a1, 23, (uint64_t)&v94))
        return 0;
      if (!mlir::detail::Parser::parseIntegerSetReference((mlir::detail::Parser *)a1, (mlir::IntegerSet *)&v82))return 0;
      *(_QWORD *)&v98 = "expected '>' in integer set";
      LOWORD(v101) = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)a1, 19, (uint64_t)&v98))
        return 0;
      return (llvm::APFloatBase *)mlir::IntegerSetAttr::get(v82.__r_.__value_.__r.__words[0]);
    case 0x24:
      return (llvm::APFloatBase *)mlir::detail::Parser::parseDenseArrayAttr((mlir::detail::Parser *)a1);
    case 0x29:
      return (llvm::APFloatBase *)mlir::detail::Parser::parseDenseElementsAttr(a1, a2);
    case 0x2A:
      return (llvm::APFloatBase *)mlir::detail::Parser::parseDenseResourceElementsAttr((uint64_t ****)a1, a2);
    case 0x2B:
      return (llvm::APFloatBase *)mlir::detail::Parser::parseDistinctAttr((uint64_t)a1, (uint64_t)a2);
    case 0x36:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 1), (uint64_t)&v94);
      v59 = a1[1];
      *(_OWORD *)(v59 + 7) = v94;
      v59[9] = (mlir::StringAttr **)v95[0];
      return (llvm::APFloatBase *)mlir::Builder::getBoolAttr((mlir::BoolAttr **)a1, 0);
    case 0x3B:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 1), (uint64_t)&v94);
      v60 = a1[1];
      *(_OWORD *)(v60 + 7) = v94;
      v60[9] = (mlir::StringAttr **)v95[0];
      v82.__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)&v94 = "expected '(' in inline location";
      v96 = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)a1, 21, (uint64_t)&v94))
        return 0;
      if (!mlir::detail::Parser::parseLocationInstance(a1, (uint64_t *)&v82))
        return 0;
      *(_QWORD *)&v98 = "expected ')' in inline location";
      LOWORD(v101) = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)a1, 28, (uint64_t)&v98))
        return 0;
      return (llvm::APFloatBase *)v82.__r_.__value_.__r.__words[0];
    case 0x43:
      return (llvm::APFloatBase *)mlir::detail::Parser::parseSparseElementsAttr((char *)a1, a2);
    case 0x45:
      return (llvm::APFloatBase *)mlir::detail::Parser::parseStridedLayoutAttr((mlir::detail::Parser *)a1);
    case 0x4A:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 1), (uint64_t)&v94);
      v61 = a1[1];
      *(_OWORD *)(v61 + 7) = v94;
      v61[9] = (mlir::StringAttr **)v95[0];
      return (llvm::APFloatBase *)mlir::Builder::getBoolAttr((mlir::BoolAttr **)a1, (mlir::MLIRContext *)1);
    case 0x4D:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 1), (uint64_t)&v94);
      v62 = a1[1];
      *(_OWORD *)(v62 + 7) = v94;
      v62[9] = (mlir::StringAttr **)v95[0];
      return (llvm::APFloatBase *)mlir::Builder::getUnitAttr((mlir::UnitAttr **)a1, v63);
    default:
      *(_QWORD *)&v98 = 0;
      v7 = mlir::detail::Parser::parseOptionalType((mlir::detail::Parser *)a1, (mlir::Type *)&v98);
      if (v7 > 0xFFu)
      {
        if ((_BYTE)v7)
          return (llvm::APFloatBase *)mlir::TypeAttr::get(v98);
        else
          return 0;
      }
      else
      {
        *(_QWORD *)&v94 = "expected attribute value";
        v96 = 259;
        mlir::detail::Parser::emitWrongTokenError((uint64_t)a1, (uint64_t)&v94, &v83);
        if (v83)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v83);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v84);
        return 0;
      }
  }
}

uint64_t mlir::detail::Parser::parseDenseElementsAttr(_QWORD *a1, _QWORD *a2)
{
  const char *OCGSize;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t Attr;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v16;
  uint64_t v17;
  __int16 v18;
  void *v19[2];
  uint64_t v20;
  _WORD v21[16];
  void *__p;
  void *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(a1[1] + 56));
  mlir::Lexer::lexToken((mlir::Lexer *)(a1[1] + 8), (uint64_t)v19);
  v5 = a1[1];
  *(_OWORD *)(v5 + 56) = *(_OWORD *)v19;
  *(_QWORD *)(v5 + 72) = v20;
  v19[0] = "expected '<' after 'dense'";
  v21[4] = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 23, (uint64_t)v19))
    return 0;
  v19[0] = a1;
  v19[1] = v21;
  v20 = *(_QWORD *)"";
  v27 = 0;
  v23 = 0;
  v24 = 0;
  __p = 0;
  LOBYTE(v25) = 0;
  v6 = a1[1];
  v7 = *(_DWORD *)(v6 + 56);
  switch(v7)
  {
    case 11:
      v10 = *(_OWORD *)(v6 + 56);
      v26 = *(_QWORD *)(v6 + 72);
      v25 = v10;
      v27 = 1;
      mlir::Lexer::lexToken((mlir::Lexer *)(v6 + 8), (uint64_t)&v16);
      v11 = a1[1];
      *(_OWORD *)(v11 + 56) = v16;
      *(_QWORD *)(v11 + 72) = v17;
      break;
    case 22:
        goto LABEL_17;
      break;
    case 19:
      mlir::Lexer::lexToken((mlir::Lexer *)(v6 + 8), (uint64_t)&v16);
      v8 = a1[1];
      *(_OWORD *)(v8 + 56) = v16;
      *(_QWORD *)(v8 + 72) = v17;
      goto LABEL_12;
    default:
        goto LABEL_17;
      break;
  }
  *(_QWORD *)&v16 = "expected '>'";
  v18 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 19, (uint64_t)&v16))
    goto LABEL_17;
LABEL_12:
  if (a2)
  {
    v12 = mlir::detail::Parser::parseElementsLiteralType((mlir::detail::Parser *)a1, a2);
    if (v12)
      goto LABEL_14;
LABEL_17:
    Attr = 0;
    v14 = __p;
    if (!__p)
      goto LABEL_19;
    goto LABEL_18;
  }
  OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(a1[1] + 56));
  v12 = mlir::detail::Parser::parseElementsLiteralType((mlir::detail::Parser *)a1, 0);
  if (!v12)
    goto LABEL_17;
LABEL_14:
  v14 = __p;
  if (__p)
  {
LABEL_18:
    v23 = v14;
    operator delete(v14);
  }
LABEL_19:
  if (v19[1] != v21)
    free(v19[1]);
  return Attr;
}

_QWORD *mlir::detail::Parser::parseDenseResourceElementsAttr(uint64_t ****a1, _QWORD *a2)
{
  const char *OCGSize;
  uint64_t ***v5;
  mlir::Dialect *LoadedDialect;
  uint64_t v7;
  unsigned __int8 v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *result;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t **v44;
  __int16 v45;
  _QWORD v46[3];
  uint64_t *v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  void *__p;
  _QWORD *v52;
  char v53;
  _QWORD v54[3];
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(a1[1] + 7));
  mlir::Lexer::lexToken((mlir::Lexer *)(a1[1] + 1), (uint64_t)&v43);
  v5 = a1[1];
  *(_OWORD *)(v5 + 7) = v43;
  v5[9] = v44;
  *(_QWORD *)&v43 = "expected '<' after 'dense_resource'";
  v45 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 23, (uint64_t)&v43))
    return 0;
  LoadedDialect = (mlir::Dialect *)mlir::MLIRContext::getLoadedDialect(**a1[1], (uint64_t)"builtin", 7);
  mlir::detail::Parser::parseResourceHandle((mlir::detail::Parser *)a1, LoadedDialect, &v40);
  if (!v42)
    return 0;
  *(_QWORD *)&v43 = "expected '>'";
  v45 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 19, (uint64_t)&v43))
    return 0;
  v7 = *((_QWORD *)&v40 + 1);
  v9 = &unk_25451A000;
  if ((v8 & 1) == 0)
  {
    v37 = *((_QWORD *)&v40 + 1);
    v9 = (_QWORD *)&unk_25451A000;
    v7 = v37;
    if (v29)
    {
      *(_QWORD *)&v43 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>]";
      *((_QWORD *)&v43 + 1) = 103;
      v30 = llvm::StringRef::find((uint64_t *)&v43, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v43 + 1) >= v30)
        v31 = v30;
      else
        v31 = *((_QWORD *)&v43 + 1);
      v32 = v43 + v31;
      v33 = *((_QWORD *)&v43 + 1) - v31;
      if (*((_QWORD *)&v43 + 1) - v31 >= 0x12)
        v34 = 18;
      else
        v34 = *((_QWORD *)&v43 + 1) - v31;
      v35 = v33 - v34;
      if (v35 >= v35 - 1)
        v36 = v35 - 1;
      else
        v36 = v35;
      mlir::detail::TypeIDResolver<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v32 + v34, v36);
      v9 = (_QWORD *)&unk_25451A000;
      v7 = v37;
    }
  }
  if (v7 != v9[380])
  {
    v45 = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, OCGSize, (uint64_t)&v43, v54);
    if (v54[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v54);
    if (!v61)
      return 0;
    v10 = v59;
    if (v59)
    {
      v11 = v60;
      v12 = v59;
      if (v60 != v59)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = v59;
      }
      v60 = v10;
      operator delete(v12);
    }
    v13 = v57;
    if (v57)
    {
      v14 = v58;
      v15 = v57;
      if (v58 != v57)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v57;
      }
      v58 = v13;
      operator delete(v15);
    }
    v20 = v55;
    if (v55 == &v56)
      return 0;
    goto LABEL_27;
  }
  if (a2)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a2 + 8))
      goto LABEL_22;
    goto LABEL_33;
  }
  OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(a1[1] + 7));
  *(_QWORD *)&v43 = "expected ':'";
  v45 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 15, (uint64_t)&v43))
    return 0;
  result = (_QWORD *)mlir::detail::Parser::parseType((mlir::detail::Parser *)a1);
  if (result)
  {
    a2 = result;
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*result + 8))
    {
LABEL_22:
      v18 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a2 + 8);
      v38 = v40;
      v39 = v41;
      return (_QWORD *)mlir::DenseResourceElementsAttr::get((uint64_t)a2, v18, &v38);
    }
LABEL_33:
    v45 = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, OCGSize, (uint64_t)&v43, v46);
    if (v46[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v46);
    if (!v53)
      return 0;
    v21 = __p;
    if (__p)
    {
      v22 = v52;
      v23 = __p;
      if (v52 != __p)
      {
        do
          v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        v23 = __p;
      }
      v52 = v21;
      operator delete(v23);
    }
    v24 = v49;
    if (v49)
    {
      v25 = v50;
      v26 = v49;
      if (v50 != v49)
      {
        do
        {
          v28 = *--v25;
          v27 = v28;
          *v25 = 0;
          if (v28)
            MEMORY[0x20BD002D4](v27, 0x1000C8077774924);
        }
        while (v25 != v24);
        v26 = v49;
      }
      v50 = v24;
      operator delete(v26);
    }
    v20 = v47;
    if (v47 == &v48)
      return 0;
LABEL_27:
    free(v20);
    return 0;
  }
  return result;
}

uint64_t mlir::detail::Parser::parseDenseArrayAttr(mlir::detail::Parser *a1)
{
  uint64_t v2;
  const char *OCGSize;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 (*v35)(uint64_t);
  uint64_t *v36;
  unint64_t v38;
  _BYTE *v39;
  _QWORD v40[4];
  __int16 v41;
  uint64_t v42;
  _BYTE v43[24];
  _QWORD v44[3];
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  _QWORD *v48;
  void *__p;
  _QWORD *v50;
  char v51;
  _BYTE v52[24];
  __int128 v53;
  _BYTE v54[96];
  void *v55;
  _QWORD *v56;
  void *v57;
  _QWORD *v58;
  char v59;
  _QWORD v60[3];
  uint64_t *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)a1 + 1) + 8), (uint64_t)v52);
  v2 = *((_QWORD *)a1 + 1);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)v52;
  *(_QWORD *)(v2 + 72) = *(_QWORD *)&v52[16];
  *(_QWORD *)v52 = "expected '<' after 'array'";
  WORD4(v53) = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 23, (uint64_t)v52))
    return 0;
  OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)a1 + 1) + 56));
  v42 = mlir::detail::Parser::parseType(a1);
  if (!v42)
  {
    *(_QWORD *)v52 = "expected an integer or floating point type";
    WORD4(v53) = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, OCGSize, (uint64_t)v52, v60);
    if (v60[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
    if (!v67)
      return 0;
    v12 = v65;
    if (v65)
    {
      v13 = v66;
      v14 = v65;
      if (v66 != v65)
      {
        do
          v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        v14 = v65;
      }
      v66 = v12;
      operator delete(v14);
    }
    v15 = v63;
    if (v63)
    {
      v16 = v64;
      v17 = v63;
      if (v64 != v63)
      {
        do
        {
          v19 = *--v16;
          v18 = v19;
          *v16 = 0;
          if (v19)
            MEMORY[0x20BD002D4](v18, 0x1000C8077774924);
        }
        while (v16 != v15);
        v17 = v63;
      }
      v64 = v15;
      operator delete(v17);
    }
    v36 = v61;
    if (v61 == &v62)
      return 0;
LABEL_58:
    free(v36);
    return 0;
  }
  if (!mlir::Type::isIntOrIndexOrFloat((mlir::Type *)&v42))
  {
    v40[0] = "expected integer or float type, got: ";
    v41 = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, OCGSize, (uint64_t)v40, v52);
    if (*(_QWORD *)v52)
    {
      v20 = v43;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v43, v42);
      v21 = v53;
      if (DWORD2(v53) >= HIDWORD(v53))
      {
        v38 = DWORD2(v53) + 1;
        if ((unint64_t)v53 <= (unint64_t)v43
          && (unint64_t)v53 + 24 * DWORD2(v53) > (unint64_t)v43)
        {
          v39 = &v43[-v53];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v54, v38, 24);
          v21 = v53;
          v20 = &v39[v53];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v54, v38, 24);
          v20 = v43;
          v21 = v53;
        }
      }
      v22 = v21 + 24 * DWORD2(v53);
      v23 = *(_OWORD *)v20;
      *(_QWORD *)(v22 + 16) = *((_QWORD *)v20 + 2);
      *(_OWORD *)v22 = v23;
      ++DWORD2(v53);
      if (*(_QWORD *)v52)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v52);
    }
    if (!v59)
      return 0;
    v24 = v57;
    if (v57)
    {
      v25 = v58;
      v26 = v57;
      if (v58 != v57)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = v57;
      }
      v58 = v24;
      operator delete(v26);
    }
    v27 = v55;
    if (v55)
    {
      v28 = v56;
      v29 = v55;
      if (v56 != v55)
      {
        do
        {
          v31 = *--v28;
          v30 = v31;
          *v28 = 0;
          if (v31)
            MEMORY[0x20BD002D4](v30, 0x1000C8077774924);
        }
        while (v28 != v27);
        v29 = v55;
      }
      v56 = v27;
      operator delete(v29);
    }
    v36 = (uint64_t *)v53;
    if ((_BYTE *)v53 == v54)
      return 0;
    goto LABEL_58;
  }
  if (!mlir::Type::isInteger((mlir::Type *)&v42, 1) && (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v42) & 7) != 0)
  {
    *(_QWORD *)v52 = "element type bitwidth must be a multiple of 8";
    WORD4(v53) = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, OCGSize, (uint64_t)v52, v44);
    if (v44[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v44);
    if (!v51)
      return 0;
    v4 = __p;
    if (__p)
    {
      v5 = v50;
      v6 = __p;
      if (v50 != __p)
      {
        do
          v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        v6 = __p;
      }
      v50 = v4;
      operator delete(v6);
    }
    v7 = v47;
    if (v47)
    {
      v8 = v48;
      v9 = v47;
      if (v48 != v47)
      {
        do
        {
          v11 = *--v8;
          v10 = v11;
          *v8 = 0;
          if (v11)
            MEMORY[0x20BD002D4](v10, 0x1000C8077774924);
        }
        while (v8 != v7);
        v9 = v47;
      }
      v48 = v7;
      operator delete(v9);
    }
    v36 = v45;
    if (v45 == &v46)
      return 0;
    goto LABEL_58;
  }
  v32 = *((_QWORD *)a1 + 1);
  if (*(_DWORD *)(v32 + 56) == 19)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v32 + 8), (uint64_t)v52);
    v33 = *((_QWORD *)a1 + 1);
    *(_OWORD *)(v33 + 56) = *(_OWORD *)v52;
    *(_QWORD *)(v33 + 72) = *(_QWORD *)&v52[16];
    return mlir::DenseArrayAttr::get(v42, 0, 0, 0);
  }
  else
  {
    *(_QWORD *)v52 = "expected ':' after dense array type";
    WORD4(v53) = 259;
    if (!mlir::detail::Parser::parseToken((uint64_t)a1, 15, (uint64_t)v52))
      return 0;
    *(_QWORD *)v52 = v42;
    *(_OWORD *)&v52[8] = 0u;
    v53 = 0u;
    v40[0] = v52;
    v40[1] = a1;
    if (mlir::Type::isIntOrIndex((mlir::Type *)&v42))
      v35 = (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseDenseArrayAttr(mlir::Type)::$_0>;
    else
      v35 = (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseDenseArrayAttr(mlir::Type)::$_1>;
    if (mlir::detail::Parser::parseCommaSeparatedList((uint64_t)a1, 0, v35, (uint64_t)v40, 0, 0)
      && (v40[0] = "expected '>' to close an array attribute",
          v41 = 259,
          mlir::detail::Parser::parseToken((uint64_t)a1, 19, (uint64_t)v40)))
    {
      v34 = mlir::DenseArrayAttr::get(*(uint64_t *)v52, DWORD2(v53), *(uint64_t *)&v52[8], *(_QWORD *)&v52[16] - *(_QWORD *)&v52[8]);
    }
    else
    {
      v34 = 0;
    }
    if (*(_QWORD *)&v52[8])
    {
      *(_QWORD *)&v52[16] = *(_QWORD *)&v52[8];
      operator delete(*(void **)&v52[8]);
    }
  }
  return v34;
}

uint64_t mlir::detail::Parser::parseAttributeDict(mlir::detail::Parser *this, mlir::NamedAttrList *a2)
{
  uint64_t result;
  _QWORD v3[3];
  uint64_t v4;
  llvm *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = 1;
  v5 = (llvm *)-4096;
  v6 = -4096;
  v7 = -4096;
  v8 = -4096;
  v3[0] = this;
  v3[1] = &v4;
  v3[2] = a2;
  result = mlir::detail::Parser::parseCommaSeparatedList((uint64_t)this, 4, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseAttributeDict(mlir::NamedAttrList &)::$_0>, (uint64_t)v3, (uint64_t)" in attribute dictionary", 24);
  if ((v4 & 1) == 0)
    llvm::deallocate_buffer(v5, (void *)(8 * v6));
  return result;
}

llvm::APFloatBase *mlir::detail::Parser::parseFloatAttr(mlir::detail::Parser *a1, uint64_t F64Type, int a3)
{
  uint64_t FloatingPointValue;
  char v7;
  double v8;
  mlir::MLIRContext *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::APFloatBase *result;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  double v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int16 v45;
  _QWORD v46[3];
  void *v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  void *v51;
  _QWORD *v52;
  char v53;
  _QWORD v54[3];
  void *v55;
  uint64_t v56;
  void *v57;
  _QWORD *v58;
  void *__p;
  _QWORD *v60;
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  FloatingPointValue = mlir::Token::getFloatingPointValue((mlir::Token *)(*((_QWORD *)a1 + 1) + 56));
  if (v7)
  {
    v8 = *(double *)&FloatingPointValue;
    mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)a1 + 1) + 8), (uint64_t)&v43);
    v10 = *((_QWORD *)a1 + 1);
    *(_OWORD *)(v10 + 56) = v43;
    *(_QWORD *)(v10 + 72) = v44;
    if (!F64Type)
    {
      v11 = *((_QWORD *)a1 + 1);
      if (*(_DWORD *)(v11 + 56) == 15)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v11 + 8), (uint64_t)&v43);
        v12 = *((_QWORD *)a1 + 1);
        *(_OWORD *)(v12 + 56) = v43;
        *(_QWORD *)(v12 + 72) = v44;
        result = (llvm::APFloatBase *)mlir::detail::Parser::parseType(a1);
        F64Type = (uint64_t)result;
        if (!result)
          return result;
      }
      else
      {
        F64Type = mlir::Builder::getF64Type((mlir::Float64Type **)a1, v9);
      }
    }
    v22 = *(void **)(*(_QWORD *)F64Type + 136);
    if (v22 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      v34 = v8;
      if (a3)
        v34 = -v8;
      return mlir::FloatAttr::get(F64Type, v34);
    }
    else
    {
      *(_QWORD *)&v43 = "floating point value not valid for specified type";
      v45 = 259;
      mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)&v43, v46);
      if (v46[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v46);
      if (v53)
      {
        v35 = v51;
        if (v51)
        {
          v36 = v52;
          v37 = v51;
          if (v52 != v51)
          {
            do
              v36 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v36 - 1);
            while (v36 != v35);
            v37 = v51;
          }
          v52 = v35;
          operator delete(v37);
        }
        v38 = v49;
        if (v49)
        {
          v39 = v50;
          v40 = v49;
          if (v50 != v49)
          {
            do
            {
              v42 = *--v39;
              v41 = v42;
              *v39 = 0;
              if (v42)
                MEMORY[0x20BD002D4](v41, 0x1000C8077774924);
            }
            while (v39 != v38);
            v40 = v49;
          }
          v50 = v38;
          operator delete(v40);
        }
        if (v47 != &v48)
          free(v47);
      }
      return 0;
    }
  }
  else
  {
    *(_QWORD *)&v43 = "floating point value too large for attribute";
    v45 = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)&v43, v54);
    if (v54[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v54);
    if (v61)
    {
      v14 = __p;
      if (__p)
      {
        v15 = v60;
        v16 = __p;
        if (v60 != __p)
        {
          do
            v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          v16 = __p;
        }
        v60 = v14;
        operator delete(v16);
      }
      v17 = v57;
      if (v57)
      {
        v18 = v58;
        v19 = v57;
        if (v58 != v57)
        {
          do
          {
            v21 = *--v18;
            v20 = v21;
            *v18 = 0;
            if (v21)
              MEMORY[0x20BD002D4](v20, 0x1000C8077774924);
          }
          while (v18 != v17);
          v19 = v57;
        }
        v58 = v17;
        operator delete(v19);
      }
      if (v55 != &v56)
        free(v55);
    }
    return 0;
  }
}

uint64_t mlir::detail::Parser::parseDecOrHexAttr(mlir::detail::Parser *a1, uint64_t a2, int a3)
{
  uint64_t IntegerType;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const char *OCGSize;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t IntegerAttr;
  void *v14;
  llvm::APFloatBase *FloatSemantics;
  unsigned int Width;
  llvm::APFloatBase *v28;
  void *v29;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  unsigned int v57;
  char v58;
  __int128 v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD v62[3];
  void *v63;
  uint64_t v64;
  void *v65;
  _QWORD *v66;
  void *v67;
  _QWORD *v68;
  char v69;
  _QWORD v70[3];
  void *v71;
  uint64_t v72;
  void *v73;
  _QWORD *v74;
  void *v75;
  _QWORD *v76;
  char v77;
  _QWORD v78[3];
  uint64_t *v79;
  uint64_t v80;
  void *v81;
  _QWORD *v82;
  void *__p;
  _QWORD *v84;
  char v85;
  __int128 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;

  IntegerType = a2;
  v89 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)a1 + 1);
  v59 = *(_OWORD *)(v6 + 56);
  v7 = *(_QWORD *)(v6 + 72);
  v60 = v7;
  v61 = a2;
  v8 = *((_QWORD *)&v59 + 1);
  OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v59);
  mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)a1 + 1) + 8), (uint64_t)&v86);
  v10 = *((_QWORD *)a1 + 1);
  *(_OWORD *)(v10 + 56) = v86;
  *(_QWORD *)(v10 + 72) = v87;
  if (!IntegerType)
  {
    v11 = *((_QWORD *)a1 + 1);
    if (*(_DWORD *)(v11 + 56) == 15)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v11 + 8), (uint64_t)&v86);
      v12 = *((_QWORD *)a1 + 1);
      *(_OWORD *)(v12 + 56) = v86;
      *(_QWORD *)(v12 + 72) = v87;
      IntegerType = mlir::detail::Parser::parseType(a1);
      v61 = IntegerType;
      if (!IntegerType)
        return 0;
    }
    else
    {
      IntegerType = mlir::Builder::getIntegerType(a1, 0x40u);
      v61 = IntegerType;
    }
  }
  v14 = *(void **)(*(_QWORD *)IntegerType + 136);
  if (v14 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    v56 = IntegerType;
    LOBYTE(v86) = 0;
    LOBYTE(v88) = 0;
    FloatSemantics = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v56);
    Width = mlir::FloatType::getWidth((mlir::FloatType *)&v56);
    v28 = (llvm::APFloatBase *)mlir::detail::Parser::parseFloatFromIntegerLiteral((uint64_t)a1, (uint64_t)&v86, (MirInfoChannelAssignment *)&v59, a3, FloatSemantics, Width);
    if ((_BYTE)v28)
    {
      v28 = (llvm::APFloatBase *)mlir::FloatAttr::get(v56, (uint64_t)&v86);
      IntegerAttr = (uint64_t)v28;
      if (!(_BYTE)v88)
        return IntegerAttr;
    }
    else
    {
      IntegerAttr = 0;
      if (!(_BYTE)v88)
        return IntegerAttr;
    }
    v29 = (void *)*((_QWORD *)&v86 + 1);
    if (llvm::APFloatBase::PPCDoubleDouble(v28) == v29)
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v86 + 8));
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v86 + 8));
  }
  else
  {
    if (v14 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      && v14 != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
    {
      *(_QWORD *)&v86 = "integer literal not valid for specified type";
      v88 = 259;
      mlir::detail::Parser::emitError((uint64_t)a1, OCGSize, (uint64_t)&v86, v78);
      if (v78[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v78);
      if (!v85)
        return 0;
      v31 = __p;
      if (__p)
      {
        v32 = v84;
        v33 = __p;
        if (v84 != __p)
        {
          do
            v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
          while (v32 != v31);
          v33 = __p;
        }
        v84 = v31;
        operator delete(v33);
      }
      v34 = v81;
      if (v81)
      {
        v35 = v82;
        v36 = v81;
        if (v82 != v81)
        {
          do
          {
            v38 = *--v35;
            v37 = v38;
            *v35 = 0;
            if (v38)
              MEMORY[0x20BD002D4](v37, 0x1000C8077774924);
          }
          while (v35 != v34);
          v36 = v81;
        }
        v82 = v34;
        operator delete(v36);
      }
      v55 = v79;
      if (v79 == &v80)
        return 0;
      goto LABEL_114;
    }
    if (a3)
    {
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v61))
      {
        *(_QWORD *)&v86 = "negative integer literal not valid for unsigned integer type";
        v88 = 259;
        mlir::detail::Parser::emitError((uint64_t)a1, OCGSize, (uint64_t)&v86, v70);
        if (v70[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v70);
        if (!v77)
          return 0;
        v39 = v75;
        if (v75)
        {
          v40 = v76;
          v41 = v75;
          if (v76 != v75)
          {
            do
              v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
            while (v40 != v39);
            v41 = v75;
          }
          v76 = v39;
          operator delete(v41);
        }
        v42 = v73;
        if (v73)
        {
          v43 = v74;
          v44 = v73;
          if (v74 != v73)
          {
            do
            {
              v46 = *--v43;
              v45 = v46;
              *v43 = 0;
              if (v46)
                MEMORY[0x20BD002D4](v45, 0x1000C8077774924);
            }
            while (v43 != v42);
            v44 = v73;
          }
          v74 = v42;
          operator delete(v44);
        }
        v55 = v71;
        if (v71 == &v72)
          return 0;
LABEL_114:
        free(v55);
        return 0;
      }
      IntegerType = v61;
    }
    buildAttributeAPInt((uint64_t)&v56, IntegerType, a3, v8, v7);
    if (v58)
    {
      IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, v61, (llvm::APInt *)&v56);
    }
    else
    {
      *(_QWORD *)&v86 = "integer constant out of range for attribute";
      v88 = 259;
      mlir::detail::Parser::emitError((uint64_t)a1, OCGSize, (uint64_t)&v86, v62);
      if (v62[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v62);
      if (v69)
      {
        v47 = v67;
        if (v67)
        {
          v48 = v68;
          v49 = v67;
          if (v68 != v67)
          {
            do
              v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
            while (v48 != v47);
            v49 = v67;
          }
          v68 = v47;
          operator delete(v49);
        }
        v50 = v65;
        if (v65)
        {
          v51 = v66;
          v52 = v65;
          if (v66 != v65)
          {
            do
            {
              v54 = *--v51;
              v53 = v54;
              *v51 = 0;
              if (v54)
                MEMORY[0x20BD002D4](v53, 0x1000C8077774924);
            }
            while (v51 != v50);
            v52 = v65;
          }
          v66 = v50;
          operator delete(v52);
        }
        if (v63 != &v64)
          free(v63);
      }
      IntegerAttr = 0;
    }
    if (v58 && v57 >= 0x41 && v56)
      MEMORY[0x20BD002D4](v56, 0x1000C8000313F17);
  }
  return IntegerAttr;
}

uint64_t mlir::detail::Parser::parseSparseElementsAttr(char *a1, _QWORD *a2)
{
  uint64_t OCGSize;
  uint64_t v5;
  uint64_t IntegerType;
  uint64_t v7;
  MirInfoChannelAssignment *v8;
  int v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Checked;
  const char *v17;
  const char *v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  uint64_t OperandRange;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  uint64_t v34;
  uint64_t Attr;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int16 v50;
  const char *v51;
  void *v52;
  uint64_t v53;
  _WORD v54[16];
  void *__p;
  void *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  void *v61[2];
  uint64_t v62;
  _WORD v63[16];
  void *v64;
  void *v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)a1 + 1) + 56));
  mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)a1 + 1) + 8), (uint64_t)v61);
  v5 = *((_QWORD *)a1 + 1);
  *(_OWORD *)(v5 + 56) = *(_OWORD *)v61;
  *(_QWORD *)(v5 + 72) = v62;
  v61[0] = "Expected '<' after 'sparse'";
  v63[4] = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 23, (uint64_t)v61))
    return 0;
  IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)a1, 0x40u);
  v7 = *((_QWORD *)a1 + 1);
  v9 = *(_DWORD *)(v7 + 56);
  v8 = (MirInfoChannelAssignment *)(v7 + 56);
  if (v9 == 19)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)a1 + 1) + 8), (uint64_t)v61);
    v10 = *((_QWORD *)a1 + 1);
    *(_OWORD *)(v10 + 56) = *(_OWORD *)v61;
    *(_QWORD *)(v10 + 72) = v62;
    v51 = (const char *)mlir::detail::Parser::parseElementsLiteralType((mlir::detail::Parser *)a1, a2);
    v52 = v11;
    if (v51)
    {
      v61[0] = 0;
      mlir::ShapedType::getShape((mlir::ShapedType *)&v51);
      v61[1] = v12;
      v13 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v61, 2, IntegerType, 0);
      v14 = (uint64_t)v13;
      if (v13)
        v15 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
      else
        v15 = 0;
      v61[0] = 0;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v51);
      v24 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v61, 1, OperandRange, 0);
      v25 = (uint64_t)v24;
      if (v24)
        v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v24 + 8);
      else
        v26 = 0;
      v27 = mlir::DenseElementsAttr::get(v14, v15, 0, 0);
      v28 = mlir::DenseElementsAttr::get(v25, v26, 0, 0);
      *(_QWORD *)&v48 = OCGSize;
      v61[0] = a1;
      v61[1] = &v48;
      return mlir::SparseElementsAttr::getChecked((void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::SparseElementsAttr mlir::detail::Parser::getChecked<mlir::SparseElementsAttr,mlir::ShapedType &,mlir::DenseElementsAttr,mlir::DenseElementsAttr>(llvm::SMLoc,mlir::ShapedType &,mlir::DenseElementsAttr,mlir::DenseElementsAttr &&)::{lambda(void)#1}>, (uint64_t)v61, (uint64_t)v51, (uint64_t)v52, v27, v28);
    }
    return 0;
  }
  v17 = (const char *)MirInfoChannelAssignment::GetOCGSize(v8);
  v61[0] = a1;
  v61[1] = v63;
  v62 = *(_QWORD *)"";
  v68 = 0;
  v65 = 0;
  v66 = 0;
  v64 = 0;
  v67 = 0;
  if (*(_DWORD *)(*((_QWORD *)a1 + 1) + 56) == 22)
  {
      goto LABEL_15;
  }
  {
    goto LABEL_15;
  }
  v51 = "expected ','";
  v54[4] = 259;
  if (mlir::detail::Parser::parseToken((uint64_t)a1, 16, (uint64_t)&v51))
  {
    v18 = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)a1 + 1) + 56));
    v51 = a1;
    v52 = v54;
    v53 = *(_QWORD *)"";
    v60 = 0;
    v56 = 0;
    v57 = 0;
    __p = 0;
    LOBYTE(v58) = 0;
    v19 = *((_QWORD *)a1 + 1);
    v20 = *(_DWORD *)(v19 + 56);
    if (v20 == 22)
    {
        goto LABEL_29;
    }
    else if (v20 == 11)
    {
      v21 = *(_OWORD *)(v19 + 56);
      v59 = *(_QWORD *)(v19 + 72);
      v58 = v21;
      v60 = 1;
      mlir::Lexer::lexToken((mlir::Lexer *)(v19 + 8), (uint64_t)&v48);
      v22 = *((_QWORD *)a1 + 1);
      *(_OWORD *)(v22 + 56) = v48;
      *(_QWORD *)(v22 + 72) = v49;
    }
    {
      goto LABEL_29;
    }
    *(_QWORD *)&v48 = "expected '>'";
    v50 = 259;
    if (mlir::detail::Parser::parseToken((uint64_t)a1, 19, (uint64_t)&v48))
    {
      v45 = mlir::detail::Parser::parseElementsLiteralType((mlir::detail::Parser *)a1, a2);
      v46 = v29;
      if (v45)
      {
        v43 = 0;
        v44 = 0;
        if ((_DWORD)v62)
        {
          v30 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v61[1], v62, IntegerType, 0);
          if (v30)
          {
LABEL_28:
            v31 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v30 + 8);
            goto LABEL_40;
          }
        }
        else
        {
          *(_QWORD *)&v48 = 1;
          mlir::ShapedType::getShape((mlir::ShapedType *)&v45);
          *((_QWORD *)&v48 + 1) = v34;
          v30 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v48, 2, IntegerType, 0);
          if (v30)
            goto LABEL_28;
        }
        v31 = 0;
LABEL_40:
        v43 = v30;
        v44 = v31;
        v36 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v45);
        v37 = v53;
        if ((_DWORD)v53)
        {
          v38 = (__int128 *)v52;
        }
        else
        {
          *(_QWORD *)&v48 = *(_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v43);
          v38 = &v48;
          v37 = 1;
        }
        v39 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v38, v37, v36, 0);
        v40 = (uint64_t)v39;
        if (v39)
          v41 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v39 + 8);
        else
          v41 = 0;
        v47 = OCGSize;
        *(_QWORD *)&v48 = a1;
        *((_QWORD *)&v48 + 1) = &v47;
        Checked = mlir::SparseElementsAttr::getChecked((void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::SparseElementsAttr mlir::detail::Parser::getChecked<mlir::SparseElementsAttr,mlir::ShapedType &,mlir::DenseElementsAttr &,mlir::DenseElementsAttr &>(llvm::SMLoc,mlir::ShapedType &,mlir::DenseElementsAttr &,mlir::DenseElementsAttr &)::{lambda(void)#1}>, (uint64_t)&v48, v45, v46, Attr, v42);
        v32 = __p;
        if (!__p)
        {
LABEL_31:
          if (v52 != v54)
            free(v52);
          goto LABEL_33;
        }
LABEL_30:
        v56 = v32;
        operator delete(v32);
        goto LABEL_31;
      }
    }
LABEL_29:
    Checked = 0;
    v32 = __p;
    if (!__p)
      goto LABEL_31;
    goto LABEL_30;
  }
LABEL_15:
  Checked = 0;
LABEL_33:
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v61[1] != v63)
    free(v61[1]);
  return Checked;
}

uint64_t mlir::detail::Parser::parseStridedLayoutAttr(mlir::detail::Parser *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  __int128 v22;
  uint64_t v23;
  __int16 v24;
  _QWORD v25[2];
  uint64_t OCGSize;
  __int128 v27;
  _QWORD v28[2];
  __int16 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)this + 1) + 56));
  v25[0] = this;
  v25[1] = &OCGSize;
  mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)this + 1) + 8), (uint64_t)&v27);
  v2 = *((_QWORD *)this + 1);
  *(_OWORD *)(v2 + 56) = v27;
  *(_QWORD *)(v2 + 72) = v28[0];
  *(_QWORD *)&v27 = "expected '<' after 'strided'";
  v29 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)&v27))
    return 0;
  *(_QWORD *)&v22 = "expected '['";
  v24 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 22, (uint64_t)&v22))
    return 0;
  *(_QWORD *)&v27 = v28;
  *((_QWORD *)&v27 + 1) = 0x600000000;
  if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 29)
    goto LABEL_4;
  v7 = mlir::detail::Parser::parseStridedLayoutAttr(void)::$_1::operator()((uint64_t)this);
  if (v8)
  {
    v9 = v7;
    while (1)
    {
      v10 = DWORD2(v27);
      if (DWORD2(v27) >= (unint64_t)HIDWORD(v27))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v28, DWORD2(v27) + 1, 8);
        v10 = DWORD2(v27);
      }
      *(_QWORD *)(v27 + 8 * v10) = v9;
      ++DWORD2(v27);
      v11 = *((_QWORD *)this + 1);
      if (*(_DWORD *)(v11 + 56) != 16)
        break;
      mlir::Lexer::lexToken((mlir::Lexer *)(v11 + 8), (uint64_t)&v22);
      v12 = *((_QWORD *)this + 1);
      *(_OWORD *)(v12 + 56) = v22;
      *(_QWORD *)(v12 + 72) = v23;
      v9 = mlir::detail::Parser::parseStridedLayoutAttr(void)::$_1::operator()((uint64_t)this);
      if (!v13)
        goto LABEL_25;
    }
LABEL_4:
    *(_QWORD *)&v22 = "expected ']'";
    v24 = 259;
    if (mlir::detail::Parser::parseToken((uint64_t)this, 29, (uint64_t)&v22))
    {
      v3 = *((_QWORD *)this + 1);
      if (*(_DWORD *)(v3 + 56) == 19)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v22);
        v4 = *((_QWORD *)this + 1);
        *(_OWORD *)(v4 + 56) = v22;
        *(_QWORD *)(v4 + 72) = v23;
        if (mlir::StridedLayoutAttr::verify((void (*)(_QWORD *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseStridedLayoutAttr(void)::$_0>, (uint64_t)v25, 0, (_QWORD *)v27, DWORD2(v27)))
        {
          v5 = mlir::StridedLayoutAttr::get(***((mlir::MLIRContext ****)this + 1), 0, v27, DWORD2(v27));
          v6 = (void *)v27;
          if ((_QWORD *)v27 == v28)
            return v5;
          goto LABEL_26;
        }
      }
      else
      {
        *(_QWORD *)&v22 = "expected ','";
        v24 = 259;
        if (mlir::detail::Parser::parseToken((uint64_t)this, 16, (uint64_t)&v22))
        {
          v20 = "expected 'offset' after comma";
          v21 = 259;
          if (mlir::detail::Parser::parseToken((uint64_t)this, 65, (uint64_t)&v20))
          {
            v18 = "expected ':' after 'offset'";
            v19 = 259;
            if (mlir::detail::Parser::parseToken((uint64_t)this, 15, (uint64_t)&v18))
            {
              v14 = mlir::detail::Parser::parseStridedLayoutAttr(void)::$_1::operator()((uint64_t)this);
              if (v15)
              {
                v16 = v14;
                *(_QWORD *)&v22 = "expected '>'";
                v24 = 259;
                if (mlir::detail::Parser::parseToken((uint64_t)this, 19, (uint64_t)&v22))
                {
                  if (mlir::StridedLayoutAttr::verify((void (*)(_QWORD *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseStridedLayoutAttr(void)::$_0>, (uint64_t)v25, v16, (_QWORD *)v27, DWORD2(v27)))
                  {
                    v5 = mlir::StridedLayoutAttr::get(***((mlir::MLIRContext ****)this + 1), v16, v27, DWORD2(v27));
                    v6 = (void *)v27;
                    if ((_QWORD *)v27 == v28)
                      return v5;
                    goto LABEL_26;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_25:
  v5 = 0;
  v6 = (void *)v27;
  if ((_QWORD *)v27 != v28)
LABEL_26:
    free(v6);
  return v5;
}

uint64_t mlir::detail::Parser::parseDistinctAttr(uint64_t a1, uint64_t a2)
{
  const char *OCGSize;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  mlir::MLIRContext *v12;
  uint64_t UnitAttr;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  mlir::AffineMapAttr *v26;
  mlir::InFlightDiagnostic *v27;
  uint64_t Value;
  uint64_t v30[4];
  __int16 v31;
  uint64_t v32[2];
  __int128 v33;
  uint64_t v34;
  __int16 v35;
  _QWORD v36[24];
  _QWORD v37[3];
  void *v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  void *__p;
  _QWORD *v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(_QWORD *)(a1 + 8) + 56));
  mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)&v33);
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v5 + 56) = v33;
  *(_QWORD *)(v5 + 72) = v34;
  *(_QWORD *)&v33 = "expected '[' after 'distinct'";
  v35 = 259;
  if (mlir::detail::Parser::parseToken(a1, 22, (uint64_t)&v33))
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned __int8 **)(v6 + 64);
    v8 = *(_QWORD *)(v6 + 72);
    *(_QWORD *)&v33 = "expected distinct ID";
    v35 = 259;
    if (mlir::detail::Parser::parseToken(a1, 10, (uint64_t)&v33))
    {
      v32[0] = mlir::Token::getUInt64IntegerValue(v7, v8);
      v32[1] = v9;
      if (!(_BYTE)v9)
      {
        *(_QWORD *)&v33 = "expected an unsigned 64-bit integer";
        v35 = 259;
        mlir::detail::Parser::emitError(a1, (uint64_t)&v33, v37);
        if (v37[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
        if (v44)
        {
          v14 = __p;
          if (__p)
          {
            v15 = v43;
            v16 = __p;
            if (v43 != __p)
            {
              do
                v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
              while (v15 != v14);
              v16 = __p;
            }
            v43 = v14;
            operator delete(v16);
          }
          v17 = v40;
          if (v40)
          {
            v18 = v41;
            v19 = v40;
            if (v41 != v40)
            {
              do
              {
                v21 = *--v18;
                v20 = v21;
                *v18 = 0;
                if (v21)
                  MEMORY[0x20BD002D4](v20, 0x1000C8077774924);
              }
              while (v18 != v17);
              v19 = v40;
            }
            v41 = v17;
            operator delete(v19);
          }
          if (v38 != &v39)
            free(v38);
        }
        return 0;
      }
      *(_QWORD *)&v33 = "expected ']' to close distinct ID";
      v35 = 259;
      if (mlir::detail::Parser::parseToken(a1, 29, (uint64_t)&v33))
      {
        v30[0] = (uint64_t)"expected '<' after distinct ID";
        v31 = 259;
        if (mlir::detail::Parser::parseToken(a1, 23, (uint64_t)v30))
        {
          v10 = *(_QWORD *)(a1 + 8);
          if (*(_DWORD *)(v10 + 56) == 19)
          {
            mlir::Lexer::lexToken((mlir::Lexer *)(v10 + 8), (uint64_t)&v33);
            v11 = *(_QWORD *)(a1 + 8);
            *(_OWORD *)(v11 + 56) = v33;
            *(_QWORD *)(v11 + 72) = v34;
            UnitAttr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)a1, v12);
            goto LABEL_24;
          }
          v22 = mlir::detail::Parser::parseAttribute(a1, a2);
          if (!v22)
          {
            *(_QWORD *)&v33 = "expected attribute";
            v35 = 259;
            mlir::detail::Parser::emitError(a1, (uint64_t)&v33, v36);
            v27 = (mlir::InFlightDiagnostic *)v36;
            goto LABEL_34;
          }
          UnitAttr = v22;
          *(_QWORD *)&v33 = "expected '>' to close distinct attribute";
          v35 = 259;
          if (mlir::detail::Parser::parseToken(a1, 19, (uint64_t)&v33))
          {
LABEL_24:
            v23 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
            v24 = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>,unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>::find((uint64_t *)(v23 + 72), v32);
            if ((uint64_t *)(*(_QWORD *)(v23 + 72) + 16 * *(unsigned int *)(v23 + 88)) == v24)
            {
              v30[0] = (uint64_t)mlir::DistinctAttr::create(UnitAttr);
              llvm::DenseMapBase<llvm::DenseMap<unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>,unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>::try_emplace<mlir::DistinctAttr&>((_QWORD *)(v23 + 72), v32, v30, (uint64_t)&v33);
              v25 = (uint64_t *)v33;
            }
            else
            {
              v25 = v24;
              v26 = (mlir::AffineMapAttr *)(v24 + 1);
              if (mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)(v24 + 1)) != UnitAttr)
              {
                v30[0] = (uint64_t)"referenced attribute does not match previous definition: ";
                v31 = 259;
                mlir::detail::Parser::emitError(a1, OCGSize, (uint64_t)v30, &v33);
                Value = mlir::AffineMapAttr::getValue(v26);
                mlir::InFlightDiagnostic::append<mlir::Attribute>((uint64_t)&v33, &Value);
                v27 = (mlir::InFlightDiagnostic *)&v33;
LABEL_34:
                mlir::InFlightDiagnostic::~InFlightDiagnostic(v27);
                return 0;
              }
            }
            return v25[1];
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::detail::Parser::parseOptionalAttribute(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  llvm::APFloatBase *v4;
  BOOL v5;
  int v6;
  __int16 v8;
  uint64_t v9;

  switch(*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56))
  {
    case 4:
    case 5:
    case 9:
    case 0xA:
    case 0xB:
    case 0x14:
    case 0x16:
    case 0x18:
    case 0x22:
    case 0x23:
    case 0x29:
    case 0x2A:
    case 0x36:
    case 0x3B:
    case 0x43:
    case 0x4A:
    case 0x4D:
      v4 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)a1, a3);
      *a2 = v4;
      v5 = v4 != 0;
      v6 = 1;
      break;
    default:
      v9 = 0;
      v8 = mlir::detail::Parser::parseOptionalType((mlir::detail::Parser *)a1, (mlir::Type *)&v9);
      v5 = v8;
      v6 = HIBYTE(v8);
      if ((_BYTE)v8 && HIBYTE(v8))
        *a2 = mlir::TypeAttr::get(v9);
      break;
  }
  return v5 | (v6 << 8);
}

uint64_t mlir::detail::Parser::parseOptionalAttribute(uint64_t a1, llvm::APFloatBase **a2, _QWORD *a3)
{
  llvm::APFloatBase *v4;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) != 22)
    return 0;
  v4 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)a1, a3);
  if (!v4)
    return 256;
  *a2 = v4;
  return 257;
}

{
  llvm::APFloatBase *v4;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) != 11)
    return 0;
  v4 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)a1, a3);
  if (!v4)
    return 256;
  *a2 = v4;
  return 257;
}

{
  llvm::APFloatBase *v4;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) != 4)
    return 0;
  v4 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)a1, a3);
  if (!v4)
    return 256;
  *a2 = v4;
  return 257;
}

uint64_t buildAttributeAPInt(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5)
{
  unsigned int v7;
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD v20[2];
  uint64_t v21;

  v20[1] = a5;
  v21 = a2;
  v20[0] = a4;
  v19 = 1;
  v7 = 10;
  v18 = 0;
  if (a5 >= 2)
  {
    if (*(_BYTE *)(a4 + 1) == 120)
      v7 = 0;
    else
      v7 = 10;
  }
  result = llvm::StringRef::getAsInteger((llvm::StringRef *)v20, v7, (llvm::APInt *)&v18);
  if (!(_DWORD)result)
  {
    result = mlir::Type::isIndex((mlir::Type *)&v21);
    if ((result & 1) != 0)
    {
      v9 = 64;
      v10 = v19;
      v12 = v19 - 64;
      v11 = v19 > 0x40;
      if (v19 >= 0x40)
        goto LABEL_10;
    }
    else
    {
      result = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v21);
      v9 = result;
      v10 = v19;
      v12 = v19 - result;
      v11 = v19 > result;
      if (v19 >= result)
      {
LABEL_10:
        if (v11)
        {
          if (v10 > 0x40)
          {
            result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v18);
            if (result < v12)
              goto LABEL_43;
          }
          else
          {
            result = v10 + __clz(v18) - 64;
            if (result < v12)
              goto LABEL_43;
          }
          result = (uint64_t)llvm::APInt::trunc((char *)&v18, v9, (uint64_t)&v16);
          if (v19 >= 0x41)
          {
            result = v18;
            if (v18)
              result = MEMORY[0x20BD002D4](v18, 0x1000C8000313F17);
          }
          v18 = (unint64_t)v16;
          v10 = v17;
          v19 = v17;
        }
        if (!v9)
        {
          if (a3)
            goto LABEL_43;
          goto LABEL_47;
        }
LABEL_26:
        if (a3)
        {
          if (v10 > 0x40)
          {
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v18);
          }
          else
          {
            v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
            if (!v10)
              v13 = 0;
            v18 = v13 & ~v18;
          }
          result = (uint64_t)llvm::APInt::operator++((uint64_t **)&v18);
          v10 = v19;
          v15 = (uint64_t *)(v18 + 8 * ((v19 - 1) >> 6));
          if (v19 < 0x41)
            v15 = (uint64_t *)&v18;
          if ((((unint64_t)*v15 >> (v19 - 1)) & 1) == 0)
            goto LABEL_43;
        }
        else
        {
          result = mlir::Type::isSignedInteger((mlir::Type *)&v21);
          if ((result & 1) != 0 || (result = mlir::Type::isIndex((mlir::Type *)&v21), (result & 1) != 0))
          {
            v10 = v19;
            v14 = (uint64_t *)(v18 + 8 * ((v19 - 1) >> 6));
            if (v19 < 0x41)
              v14 = (uint64_t *)&v18;
            if ((((unint64_t)*v14 >> (v19 - 1)) & 1) != 0)
            {
LABEL_43:
              *(_BYTE *)a1 = 0;
              *(_BYTE *)(a1 + 16) = 0;
              if (v10 < 0x41)
                return result;
              goto LABEL_44;
            }
          }
          else
          {
            v10 = v19;
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v18;
        *(_BYTE *)(a1 + 16) = 1;
        return result;
      }
    }
    llvm::APInt::zext((llvm::APInt *)&v18, v9, (uint64_t)&v16);
    if (v19 >= 0x41 && v18)
      MEMORY[0x20BD002D4](v18, 0x1000C8000313F17);
    v18 = (unint64_t)v16;
    v10 = v17;
    v19 = v17;
    goto LABEL_26;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (v19 < 0x41)
    return result;
LABEL_44:
  result = v18;
  if (v18)
    return MEMORY[0x20BD002D4](v18, 0x1000C8000313F17);
  return result;
}

uint64_t mlir::detail::Parser::parseElementsLiteralType(mlir::detail::Parser *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *Shape;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v28[4];
  __int16 v29;
  _QWORD v30[3];
  void *v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  void *__p;
  _QWORD *v36;
  char v37;
  _QWORD v38[3];
  uint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  char v45;
  uint64_t v46;

  v2 = a2;
  v46 = *MEMORY[0x24BDAC8D0];
  if (a2)
    goto LABEL_53;
  v28[0] = "expected ':'";
  v29 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 15, (uint64_t)v28))
    return 0;
  result = mlir::detail::Parser::parseType(a1);
  v2 = (_QWORD *)result;
  if (result)
  {
LABEL_53:
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8))
    {
      v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
      v26 = v2;
      v27 = v4;
      if (v2)
      {
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v26))
        {
          Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v26);
          if (!v6)
            return (uint64_t)v26;
          v7 = 8 * v6;
          while (*Shape != 0x8000000000000000)
          {
            ++Shape;
            v7 -= 8;
            if (!v7)
              return (uint64_t)v26;
          }
        }
        v28[0] = "elements literal type must have static shape";
        v29 = 259;
        mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)v28, v30);
        if (v30[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
        if (!v37)
          return 0;
        v9 = __p;
        if (__p)
        {
          v10 = v36;
          v11 = __p;
          if (v36 != __p)
          {
            do
              v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
            while (v10 != v9);
            v11 = __p;
          }
          v36 = v9;
          operator delete(v11);
        }
        v12 = v33;
        if (v33)
        {
          v13 = v34;
          v14 = v33;
          if (v34 != v33)
          {
            do
            {
              v16 = *--v13;
              v15 = v16;
              *v13 = 0;
              if (v16)
                MEMORY[0x20BD002D4](v15, 0x1000C8077774924);
            }
            while (v13 != v12);
            v14 = v33;
          }
          v34 = v12;
          operator delete(v14);
        }
        v25 = v31;
        if (v31 == &v32)
          return 0;
LABEL_45:
        free(v25);
        return 0;
      }
    }
    else
    {
      v26 = 0;
      v27 = 0;
    }
    v28[0] = "elements literal must be a shaped type";
    v29 = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)v28, v38);
    if (v38[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
    if (!v45)
      return 0;
    v17 = v43;
    if (v43)
    {
      v18 = v44;
      v19 = v43;
      if (v44 != v43)
      {
        do
          v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        v19 = v43;
      }
      v44 = v17;
      operator delete(v19);
    }
    v20 = v41;
    if (v41)
    {
      v21 = v42;
      v22 = v41;
      if (v42 != v41)
      {
        do
        {
          v24 = *--v21;
          v23 = v24;
          *v21 = 0;
          if (v24)
            MEMORY[0x20BD002D4](v23, 0x1000C8077774924);
        }
        while (v21 != v20);
        v22 = v41;
      }
      v42 = v20;
      operator delete(v22);
    }
    v25 = v39;
    if (v39 == &v40)
      return 0;
    goto LABEL_45;
  }
  return result;
}

uint64_t `anonymous namespace'::TensorLiteralParser::getAttr(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  mlir::Token *v6;
  uint64_t v7;
  const void *v8;
  const void *Shape;
  uint64_t v10;
  uint64_t v11;
  const char **v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  const char **v17;
  const char **v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  const char **v22;
  uint64_t v23;
  const char **v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char **v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  const char **v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  _BOOL4 isUnsignedInteger;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  _BOOL4 v57;
  int v58;
  int *v59;
  const char *v60;
  _BOOL4 v61;
  int v62;
  int v63;
  llvm::APInt *v64;
  unsigned int v65;
  _BOOL8 v66;
  llvm::APFloatBase *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  const char *OCGSize;
  char v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  _QWORD *v83;
  _QWORD *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  int v102;
  int v103;
  uint64_t v104;
  llvm::APFloatBase *v105;
  unsigned int Width;
  llvm::APFloatBase *v107;
  char v108;
  llvm::APFloatBase *v109;
  void *v110;
  double v111;
  char v112;
  double v113;
  llvm::APFloatBase *v114;
  void *v115;
  uint64_t isF64;
  void *FloatSemantics;
  llvm::APFloatBase *v118;
  void *v119;
  void *v120;
  char *v121;
  void *v122;
  void *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  const char **v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  const char **v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  const char **v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  _QWORD *v140;
  _QWORD *v141;
  void *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  const char **v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  char v152;
  _QWORD *v153;
  _QWORD *v154;
  void *v155;
  _QWORD *v156;
  _QWORD *v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  unsigned __int8 *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  const char **v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  const char **v171;
  uint64_t v172;
  uint64_t v173;
  __int128 v174;
  _QWORD *v175;
  _QWORD *v176;
  void *v177;
  _QWORD *v178;
  _QWORD *v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  llvm::APFloatBase *v183;
  uint64_t v184;
  const char **v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  char v189;
  _QWORD *v190;
  _QWORD *v191;
  void *v192;
  _QWORD *v193;
  _QWORD *v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  const char **v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  char v203;
  _QWORD *v204;
  _QWORD *v205;
  void *v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  void *v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  llvm::APFloatBase *v217;
  llvm::APFloatBase *v218;
  void *v219;
  llvm::detail::DoubleAPFloat *v220;
  uint64_t v221;
  llvm::APFloatBase *v222;
  uint64_t v223;
  llvm::APFloatBase *v224;
  uint64_t v225;
  const char **v226;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  char v230;
  _QWORD *v231;
  _QWORD *v232;
  void *v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  llvm::APFloatBase *v237;
  llvm::APFloatBase *v238;
  uint64_t v239;
  __int128 v241;
  std::string::size_type v242;
  __int128 *v243;
  char *v244;
  uint64_t v245;
  std::string *v246;
  std::string *v247;
  char *v248;
  std::string *v249;
  char *v250;
  char *v251;
  std::string *data;
  std::string::size_type size;
  __int128 v254;
  __int128 v255;
  unint64_t v256;
  unint64_t v257;
  char *v258;
  std::string *v259;
  std::string *v260;
  char *v261;
  __int128 v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  char *v266;
  char *v267;
  std::string::size_type v268;
  std::string *v269;
  char *v270;
  char *v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  BOOL v285;
  unint64_t v286;
  char *v287;
  char *v288;
  char *v289;
  char *v290;
  char *v291;
  char *v292;
  char *v293;
  char *v294;
  char *v295;
  char *v296;
  char *v297;
  char *v298;
  char *v299;
  char *v300;
  char *v301;
  char v302;
  char *v303;
  uint64_t OperandRange;
  __int128 v305;
  BOOL v306;
  __int128 v307;
  uint64_t v308;
  llvm::APFloatBase *v309[2];
  llvm::APFloatBase *v310;
  uint64_t v311;
  __int128 v312;
  const char *v313;
  const char *v314;
  uint64_t v315;
  std::string v316;
  __int16 v317;
  __int128 v318;
  __int128 v319;
  unsigned int v320;
  unsigned int v321;
  _BYTE v322[96];
  void *v323;
  _QWORD *v324;
  void *__p;
  _QWORD *v326;
  char v327;
  uint64_t v328;

  v328 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v305 = a3;
  *((_QWORD *)&v305 + 1) = a4;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v305);
  v6 = (mlir::Token *)(a1 + 80);
  if (*(_BYTE *)(a1 + 104)
    && (mlir::Type::isIntOrIndexOrFloat((mlir::Type *)&OperandRange)
     || *(_UNKNOWN **)(*(_QWORD *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id))
  {
    v312 = v305;
    v311 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v312);
    if (!mlir::Type::isIntOrIndexOrFloat((mlir::Type *)&v311)
      && *(_UNKNOWN **)(*(_QWORD *)v311 + 136) != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v36 = *(_QWORD *)a1;
      v317 = 257;
      mlir::detail::Parser::emitError(v36, a2, (uint64_t)&v316, &v318);
      if ((_QWORD)v318)
      {
        LODWORD(v313) = 3;
        v314 = "expected floating-point, integer, or complex element type, got ";
        v315 = 63;
        v37 = &v313;
        v38 = *((_QWORD *)&v319 + 1);
        if (v320 >= v321)
        {
          v274 = v320 + 1;
          if (*((_QWORD *)&v319 + 1) <= (unint64_t)&v313
            && *((_QWORD *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
          {
            v289 = (char *)&v313 - *((_QWORD *)&v319 + 1);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v274, 24);
            v38 = *((_QWORD *)&v319 + 1);
            v37 = (const char **)&v289[*((_QWORD *)&v319 + 1)];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v274, 24);
            v37 = &v313;
            v38 = *((_QWORD *)&v319 + 1);
          }
        }
        v39 = v38 + 24 * v320;
        v40 = *(_OWORD *)v37;
        *(_QWORD *)(v39 + 16) = v37[2];
        *(_OWORD *)v39 = v40;
        ++v320;
        if ((_QWORD)v318)
        {
          v41 = &v313;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v313, v311);
          v42 = *((_QWORD *)&v319 + 1);
          if (v320 >= v321)
          {
            v277 = v320 + 1;
            if (*((_QWORD *)&v319 + 1) <= (unint64_t)&v313
              && *((_QWORD *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
            {
              v292 = (char *)&v313 - *((_QWORD *)&v319 + 1);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v277, 24);
              v42 = *((_QWORD *)&v319 + 1);
              v41 = (const char **)&v292[*((_QWORD *)&v319 + 1)];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v277, 24);
              v41 = &v313;
              v42 = *((_QWORD *)&v319 + 1);
            }
          }
          v43 = v42 + 24 * v320;
          v44 = *(_OWORD *)v41;
          *(_QWORD *)(v43 + 16) = v41[2];
          *(_OWORD *)v43 = v44;
          ++v320;
          if ((_QWORD)v318)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
        }
      }
      if (!v327)
        return 0;
      v45 = __p;
      if (__p)
      {
        v46 = v326;
        v47 = __p;
        if (v326 != __p)
        {
          do
            v46 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v46 - 1);
          while (v46 != v45);
          v47 = __p;
        }
        v326 = v45;
        operator delete(v47);
      }
      v31 = v323;
      if (!v323)
        goto LABEL_214;
      v48 = v324;
      v33 = v323;
      if (v324 == v323)
        goto LABEL_213;
      do
      {
        v50 = *--v48;
        v49 = v50;
        *v48 = 0;
        if (v50)
          MEMORY[0x20BD002D4](v49, 0x1000C8077774924);
      }
      while (v48 != v31);
      goto LABEL_212;
    }
    v309[0] = 0;
    v309[1] = 0;
    v310 = 0;
    v51 = *(_QWORD *)a1;
    v307 = *(_OWORD *)v6;
    v308 = *(_QWORD *)(a1 + 96);
    mlir::Token::getHexStringValue((mlir::Token *)&v307, (std::string *)&v318);
    if (BYTE8(v319))
    {
      if (SHIBYTE(v310) < 0)
        operator delete(v309[0]);
      *(_OWORD *)v309 = v318;
      v310 = (llvm::APFloatBase *)v319;
    }
    else
    {
      OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v307);
      v317 = 259;
      mlir::detail::Parser::emitError(v51, OCGSize, (uint64_t)&v316, &v318);
      v79 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v318);
      if ((_QWORD)v318)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
      if (v327)
      {
        v80 = __p;
        if (__p)
        {
          v81 = v326;
          v82 = __p;
          if (v326 != __p)
          {
            do
              v81 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v81 - 1);
            while (v81 != v80);
            v82 = __p;
          }
          v326 = v80;
          operator delete(v82);
        }
        v83 = v323;
        if (v323)
        {
          v84 = v324;
          v85 = v323;
          if (v324 != v323)
          {
            do
            {
              v87 = *--v84;
              v86 = v87;
              *v84 = 0;
              if (v87)
                MEMORY[0x20BD002D4](v86, 0x1000C8077774924);
            }
            while (v84 != v83);
            v85 = v323;
          }
          v324 = v83;
          operator delete(v85);
        }
        if (*((_BYTE **)&v319 + 1) != v322)
          free(*((void **)&v319 + 1));
      }
      if (!v79)
        goto LABEL_270;
    }
    if (SHIBYTE(v310) >= 0)
      v161 = (unsigned __int8 *)v309;
    else
      v161 = (unsigned __int8 *)v309[0];
    if (SHIBYTE(v310) >= 0)
      v162 = HIBYTE(v310);
    else
      v162 = (uint64_t)v309[1];
    v306 = 0;
    if (mlir::DenseElementsAttr::isValidRawBuffer(v312, *((uint64_t *)&v312 + 1), v161, v162, &v306))
    {
      v146 = mlir::DenseElementsAttr::getFromRawBuffer(v312, *((_QWORD *)&v312 + 1), v161, v162, v163, v164, v165);
      if ((SHIBYTE(v310) & 0x80000000) == 0)
        return v146;
LABEL_271:
      v183 = v309[0];
      goto LABEL_374;
    }
    v166 = *(_QWORD *)a1;
    v317 = 257;
    mlir::detail::Parser::emitError(v166, a2, (uint64_t)&v316, &v318);
    if ((_QWORD)v318)
    {
      LODWORD(v313) = 3;
      v314 = "elements hex data size is invalid for provided type: ";
      v315 = 53;
      v167 = &v313;
      v168 = *((_QWORD *)&v319 + 1);
      if (v320 >= v321)
      {
        v275 = v320 + 1;
        if (*((_QWORD *)&v319 + 1) <= (unint64_t)&v313
          && *((_QWORD *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
        {
          v290 = (char *)&v313 - *((_QWORD *)&v319 + 1);
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v275, 24);
          v168 = *((_QWORD *)&v319 + 1);
          v167 = (const char **)&v290[*((_QWORD *)&v319 + 1)];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v275, 24);
          v167 = &v313;
          v168 = *((_QWORD *)&v319 + 1);
        }
      }
      v169 = v168 + 24 * v320;
      v170 = *(_OWORD *)v167;
      *(_QWORD *)(v169 + 16) = v167[2];
      *(_OWORD *)v169 = v170;
      ++v320;
      if ((_QWORD)v318)
      {
        v171 = &v313;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v313, v312);
        v172 = *((_QWORD *)&v319 + 1);
        if (v320 >= v321)
        {
          v278 = v320 + 1;
          if (*((_QWORD *)&v319 + 1) <= (unint64_t)&v313
            && *((_QWORD *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
          {
            v293 = (char *)&v313 - *((_QWORD *)&v319 + 1);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v278, 24);
            v172 = *((_QWORD *)&v319 + 1);
            v171 = (const char **)&v293[*((_QWORD *)&v319 + 1)];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v278, 24);
            v171 = &v313;
            v172 = *((_QWORD *)&v319 + 1);
          }
        }
        v173 = v172 + 24 * v320;
        v174 = *(_OWORD *)v171;
        *(_QWORD *)(v173 + 16) = v171[2];
        *(_OWORD *)v173 = v174;
        ++v320;
        if ((_QWORD)v318)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
      }
    }
    if (v327)
    {
      v175 = __p;
      if (__p)
      {
        v176 = v326;
        v177 = __p;
        if (v326 != __p)
        {
          do
            v176 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v176 - 1);
          while (v176 != v175);
          v177 = __p;
        }
        v326 = v175;
        operator delete(v177);
      }
      v178 = v323;
      if (v323)
      {
        v179 = v324;
        v180 = v323;
        if (v324 != v323)
        {
          do
          {
            v182 = *--v179;
            v181 = v182;
            *v179 = 0;
            if (v182)
              MEMORY[0x20BD002D4](v181, 0x1000C8077774924);
          }
          while (v179 != v178);
          v180 = v323;
        }
        v324 = v178;
        operator delete(v180);
      }
      if (*((_BYTE **)&v319 + 1) != v322)
        free(*((void **)&v319 + 1));
    }
LABEL_270:
    v146 = 0;
    if ((SHIBYTE(v310) & 0x80000000) == 0)
      return v146;
    goto LABEL_271;
  }
  v7 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v7)
  {
    v8 = *(const void **)(a1 + 8);
    Shape = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v305);
    if (v10 != v7 || memcmp(v8, Shape, 8 * v7))
    {
      v11 = *(_QWORD *)a1;
      v317 = 257;
      mlir::detail::Parser::emitError(v11, a2, (uint64_t)&v316, &v318);
      if ((_QWORD)v318)
      {
        LODWORD(v313) = 3;
        v314 = "inferred shape of elements literal ([";
        v315 = 37;
        v12 = &v313;
        v13 = *((_QWORD *)&v319 + 1);
        if (v320 >= v321)
        {
          v272 = v320 + 1;
          if (*((_QWORD *)&v319 + 1) <= (unint64_t)&v313
            && *((_QWORD *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
          {
            v287 = (char *)&v313 - *((_QWORD *)&v319 + 1);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v272, 24);
            v13 = *((_QWORD *)&v319 + 1);
            v12 = (const char **)&v287[*((_QWORD *)&v319 + 1)];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v272, 24);
            v12 = &v313;
            v13 = *((_QWORD *)&v319 + 1);
          }
        }
        v14 = v13 + 24 * v320;
        v15 = *(_OWORD *)v12;
        *(_QWORD *)(v14 + 16) = v12[2];
        *(_OWORD *)v14 = v15;
        ++v320;
        if ((_QWORD)v318)
        {
          v16 = *(unsigned int *)(a1 + 16);
          v17 = *(const char ***)(a1 + 8);
          v313 = ", ";
          llvm::interleave<long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(llvm::ArrayRef<long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(void)#1},void>(v17, &v17[v16], (uint64_t)&v318 + 8, (uint64_t)&v318 + 8, &v313);
          if ((_QWORD)v318)
          {
            LODWORD(v313) = 3;
            v314 = "]) does not match type ([";
            v315 = 25;
            v18 = &v313;
            v19 = *((_QWORD *)&v319 + 1);
            if (v320 >= v321)
            {
              v276 = v320 + 1;
              if (*((_QWORD *)&v319 + 1) <= (unint64_t)&v313
                && *((_QWORD *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
              {
                v291 = (char *)&v313 - *((_QWORD *)&v319 + 1);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v276, 24);
                v19 = *((_QWORD *)&v319 + 1);
                v18 = (const char **)&v291[*((_QWORD *)&v319 + 1)];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v276, 24);
                v18 = &v313;
                v19 = *((_QWORD *)&v319 + 1);
              }
            }
            v20 = v19 + 24 * v320;
            v21 = *(_OWORD *)v18;
            *(_QWORD *)(v20 + 16) = v18[2];
            *(_OWORD *)v20 = v21;
            ++v320;
          }
        }
      }
      v22 = (const char **)mlir::ShapedType::getShape((mlir::ShapedType *)&v305);
      if ((_QWORD)v318)
      {
        v313 = ", ";
        llvm::interleave<long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(llvm::ArrayRef<long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(void)#1},void>(v22, &v22[v23], (uint64_t)&v318 + 8, (uint64_t)&v318 + 8, &v313);
        if ((_QWORD)v318)
        {
          LODWORD(v313) = 3;
          v314 = "])";
          v315 = 2;
          v24 = &v313;
          v25 = *((_QWORD *)&v319 + 1);
          if (v320 >= v321)
          {
            v273 = v320 + 1;
            if (*((_QWORD *)&v319 + 1) <= (unint64_t)&v313
              && *((_QWORD *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
            {
              v288 = (char *)&v313 - *((_QWORD *)&v319 + 1);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v273, 24);
              v25 = *((_QWORD *)&v319 + 1);
              v24 = (const char **)&v288[*((_QWORD *)&v319 + 1)];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v273, 24);
              v24 = &v313;
              v25 = *((_QWORD *)&v319 + 1);
            }
          }
          v26 = v25 + 24 * v320;
          v27 = *(_OWORD *)v24;
          *(_QWORD *)(v26 + 16) = v24[2];
          *(_OWORD *)v26 = v27;
          ++v320;
          if ((_QWORD)v318)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
        }
      }
      if (!v327)
        return 0;
      v28 = __p;
      if (__p)
      {
        v29 = v326;
        v30 = __p;
        if (v326 != __p)
        {
          do
            v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          v30 = __p;
        }
        v326 = v28;
        operator delete(v30);
      }
      v31 = v323;
      if (!v323)
      {
LABEL_214:
        if (*((_BYTE **)&v319 + 1) != v322)
          free(*((void **)&v319 + 1));
        return 0;
      }
      v32 = v324;
      v33 = v323;
      if (v324 == v323)
      {
LABEL_213:
        v324 = v31;
        operator delete(v33);
        goto LABEL_214;
      }
      do
      {
        v35 = *--v32;
        v34 = v35;
        *v32 = 0;
        if (v35)
          MEMORY[0x20BD002D4](v34, 0x1000C8077774924);
      }
      while (v32 != v31);
LABEL_212:
      v33 = v323;
      goto LABEL_213;
    }
  }
  if (!*(_BYTE *)(a1 + 104) && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a1 + 64))
  {
    v124 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v305);
    if (mlir::ShapedType::getNumElements(v124, v125))
    {
      v126 = *(_QWORD *)a1;
      v317 = 257;
      mlir::detail::Parser::emitError(v126, a2, (uint64_t)&v316, &v318);
      if ((_QWORD)v318)
      {
        LODWORD(v313) = 3;
        v314 = "parsed zero elements, but type (";
        v315 = 32;
        v127 = &v313;
        v128 = *((_QWORD *)&v319 + 1);
        if (v320 >= v321)
        {
          v281 = v320 + 1;
          if (*((_QWORD *)&v319 + 1) <= (unint64_t)&v313
            && *((_QWORD *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
          {
            v296 = (char *)&v313 - *((_QWORD *)&v319 + 1);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v281, 24);
            v128 = *((_QWORD *)&v319 + 1);
            v127 = (const char **)&v296[*((_QWORD *)&v319 + 1)];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v281, 24);
            v127 = &v313;
            v128 = *((_QWORD *)&v319 + 1);
          }
        }
        v129 = v128 + 24 * v320;
        v130 = *(_OWORD *)v127;
        *(_QWORD *)(v129 + 16) = v127[2];
        *(_OWORD *)v129 = v130;
        ++v320;
        if ((_QWORD)v318)
        {
          v131 = &v313;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v313, v305);
          v132 = *((_QWORD *)&v319 + 1);
          if (v320 >= v321)
          {
            v283 = v320 + 1;
            if (*((_QWORD *)&v319 + 1) <= (unint64_t)&v313
              && *((_QWORD *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
            {
              v298 = (char *)&v313 - *((_QWORD *)&v319 + 1);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v283, 24);
              v132 = *((_QWORD *)&v319 + 1);
              v131 = (const char **)&v298[*((_QWORD *)&v319 + 1)];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v283, 24);
              v131 = &v313;
              v132 = *((_QWORD *)&v319 + 1);
            }
          }
          v133 = v132 + 24 * v320;
          v134 = *(_OWORD *)v131;
          *(_QWORD *)(v133 + 16) = v131[2];
          *(_OWORD *)v133 = v134;
          v135 = ++v320;
          if ((_QWORD)v318)
          {
            LODWORD(v313) = 3;
            v314 = ") expected at least 1";
            v315 = 21;
            v136 = &v313;
            v137 = *((_QWORD *)&v319 + 1);
            if (v135 >= v321)
            {
              v284 = v135 + 1;
              v285 = *((_QWORD *)&v319 + 1) + 24 * (unint64_t)v135 > (unint64_t)&v313;
              if (*((_QWORD *)&v319 + 1) <= (unint64_t)&v313 && v285)
              {
                v299 = (char *)&v313 - *((_QWORD *)&v319 + 1);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v284, 24);
                v137 = *((_QWORD *)&v319 + 1);
                v136 = (const char **)&v299[*((_QWORD *)&v319 + 1)];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v284, 24);
                v136 = &v313;
                v137 = *((_QWORD *)&v319 + 1);
              }
            }
            v138 = v137 + 24 * v320;
            v139 = *(_OWORD *)v136;
            *(_QWORD *)(v138 + 16) = v136[2];
            *(_OWORD *)v138 = v139;
            ++v320;
            if ((_QWORD)v318)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
          }
        }
      }
      if (!v327)
        return 0;
      v140 = __p;
      if (__p)
      {
        v141 = v326;
        v142 = __p;
        if (v326 != __p)
        {
          do
            v141 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v141 - 1);
          while (v141 != v140);
          v142 = __p;
        }
        v326 = v140;
        operator delete(v142);
      }
      v31 = v323;
      if (!v323)
        goto LABEL_214;
      v143 = v324;
      v33 = v323;
      if (v324 == v323)
        goto LABEL_213;
      do
      {
        v145 = *--v143;
        v144 = v145;
        *v143 = 0;
        if (v145)
          MEMORY[0x20BD002D4](v144, 0x1000C8077774924);
      }
      while (v143 != v31);
      goto LABEL_212;
    }
  }
  v52 = OperandRange;
  v53 = *(void **)(*(_QWORD *)OperandRange + 136);
  if (v53 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v52 = 0;
  *(_QWORD *)&v318 = v52;
  if (v53 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    OperandRange = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v318);
    if (mlir::Type::isIntOrIndex((mlir::Type *)&OperandRange))
      goto LABEL_60;
  }
  else if (mlir::Type::isIntOrIndex((mlir::Type *)&OperandRange))
  {
LABEL_60:
    v309[0] = 0;
    v309[1] = 0;
    v310 = 0;
    *(_QWORD *)&v307 = OperandRange;
    std::vector<llvm::APInt>::reserve((uint64_t)v309, (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 5);
    isUnsignedInteger = mlir::Type::isUnsignedInteger((mlir::Type *)&v307);
    v55 = *(unsigned __int8 **)(a1 + 56);
    v56 = *(unsigned __int8 **)(a1 + 64);
    if (v55 == v56)
      goto LABEL_360;
    v57 = isUnsignedInteger;
    while (1)
    {
      v59 = (int *)(v55 + 8);
      v58 = *v55;
      v60 = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(v55 + 8));
      if (v58)
        v61 = v57;
      else
        v61 = 0;
      if (v61)
      {
        v184 = *(_QWORD *)a1;
        v317 = 257;
        mlir::detail::Parser::emitError(v184, v60, (uint64_t)&v316, &v318);
        if ((_QWORD)v318)
        {
          LODWORD(v313) = 3;
          v314 = "expected unsigned integer elements, but parsed negative value";
          v315 = 61;
          v185 = &v313;
          v186 = *((_QWORD *)&v319 + 1);
          if (v320 >= v321)
          {
            v280 = v320 + 1;
            if (*((_QWORD *)&v319 + 1) <= (unint64_t)&v313
              && *((_QWORD *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
            {
              v295 = (char *)&v313 - *((_QWORD *)&v319 + 1);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v280, 24);
              v186 = *((_QWORD *)&v319 + 1);
              v185 = (const char **)&v295[*((_QWORD *)&v319 + 1)];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v280, 24);
              v185 = &v313;
              v186 = *((_QWORD *)&v319 + 1);
            }
          }
          v187 = v186 + 24 * v320;
          v188 = *(_OWORD *)v185;
          *(_QWORD *)(v187 + 16) = v185[2];
          *(_OWORD *)v187 = v188;
          ++v320;
        }
        v189 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v318);
        if ((_QWORD)v318)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
        v302 = v189;
        if (v327)
        {
          v190 = __p;
          if (__p)
          {
            v191 = v326;
            v192 = __p;
            if (v326 != __p)
            {
              do
                v191 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v191 - 1);
              while (v191 != v190);
              v192 = __p;
            }
            v326 = v190;
            operator delete(v192);
          }
          v193 = v323;
          if (v323)
          {
            v194 = v324;
            v195 = v323;
            if (v324 == v323)
              goto LABEL_356;
            do
            {
              v197 = *--v194;
              v196 = v197;
              *v194 = 0;
              if (v197)
                MEMORY[0x20BD002D4](v196, 0x1000C8077774924);
            }
            while (v194 != v193);
            goto LABEL_355;
          }
LABEL_357:
          if (*((_BYTE **)&v319 + 1) != v322)
            free(*((void **)&v319 + 1));
        }
LABEL_359:
        if (v302)
        {
LABEL_360:
          if (v53 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
          {
            v146 = mlir::DenseElementsAttr::get(v305, *((uint64_t *)&v305 + 1), v309[0], (unint64_t)((v309[1] - v309[0]) >> 4) >> 1);
            v237 = v309[0];
            if (!v309[0])
              return v146;
          }
          else
          {
            v146 = mlir::DenseElementsAttr::get(v305, *((uint64_t *)&v305 + 1), v309[0], (v309[1] - v309[0]) >> 4);
            v237 = v309[0];
            if (!v309[0])
              return v146;
          }
LABEL_366:
          v238 = v309[1];
          v183 = v237;
          if (v309[1] != v237)
          {
            do
            {
              if (*((_DWORD *)v238 - 2) >= 0x41u)
              {
                v239 = *((_QWORD *)v238 - 2);
                if (v239)
                  MEMORY[0x20BD002D4](v239, 0x1000C8000313F17);
              }
              v238 = (llvm::APFloatBase *)((char *)v238 - 16);
            }
            while (v238 != v237);
            v183 = v309[0];
          }
          v309[1] = v237;
LABEL_374:
          operator delete(v183);
        }
        else
        {
          v146 = 0;
          v237 = v309[0];
          if (v309[0])
            goto LABEL_366;
        }
        return v146;
      }
      v62 = *v59;
      if (*v59 == 54 || v62 == 74)
      {
        if (!mlir::Type::isInteger((mlir::Type *)&v307, 1))
        {
          v198 = *(_QWORD *)a1;
          v317 = 257;
          mlir::detail::Parser::emitError(v198, v60, (uint64_t)&v316, &v318);
          if ((_QWORD)v318)
          {
            LODWORD(v313) = 3;
            v314 = "expected i1 type for 'true' or 'false' values";
            v315 = 45;
            v199 = &v313;
            v200 = *((_QWORD *)&v319 + 1);
            if (v320 >= v321)
            {
              v282 = v320 + 1;
              if (*((_QWORD *)&v319 + 1) <= (unint64_t)&v313
                && *((_QWORD *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
              {
                v297 = (char *)&v313 - *((_QWORD *)&v319 + 1);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v282, 24);
                v200 = *((_QWORD *)&v319 + 1);
                v199 = (const char **)&v297[*((_QWORD *)&v319 + 1)];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v282, 24);
                v199 = &v313;
                v200 = *((_QWORD *)&v319 + 1);
              }
            }
            v201 = v200 + 24 * v320;
            v202 = *(_OWORD *)v199;
            *(_QWORD *)(v201 + 16) = v199[2];
            *(_OWORD *)v201 = v202;
            ++v320;
          }
          v203 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v318);
          if ((_QWORD)v318)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
          v302 = v203;
          if (v327)
          {
            v204 = __p;
            if (__p)
            {
              v205 = v326;
              v206 = __p;
              if (v326 != __p)
              {
                do
                  v205 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v205 - 1);
                while (v205 != v204);
                v206 = __p;
              }
              v326 = v204;
              operator delete(v206);
            }
            v193 = v323;
            if (v323)
            {
              v207 = v324;
              v195 = v323;
              if (v324 == v323)
                goto LABEL_356;
              do
              {
                v209 = *--v207;
                v208 = v209;
                *v207 = 0;
                if (v209)
                  MEMORY[0x20BD002D4](v208, 0x1000C8077774924);
              }
              while (v207 != v193);
LABEL_355:
              v195 = v323;
              goto LABEL_356;
            }
            goto LABEL_357;
          }
          goto LABEL_359;
        }
        v66 = *v59 == 74;
        DWORD2(v318) = 1;
        *(_QWORD *)&v318 = v66;
        v67 = v309[1];
        if (v309[1] >= v310)
        {
          v309[1] = (llvm::APFloatBase *)std::vector<llvm::APInt>::__push_back_slow_path<llvm::APInt const&>(v309, (uint64_t)&v318);
          if (DWORD2(v318) >= 0x41)
          {
LABEL_80:
            if ((_QWORD)v318)
              MEMORY[0x20BD002D4](v318, 0x1000C8000313F17);
          }
        }
        else
        {
          *((_DWORD *)v309[1] + 2) = 1;
          *(_QWORD *)v67 = v66;
          v309[1] = (llvm::APFloatBase *)((char *)v67 + 16);
          if (DWORD2(v318) >= 0x41)
            goto LABEL_80;
        }
      }
      else
      {
        if (v62 == 9)
        {
          v225 = *(_QWORD *)a1;
          v317 = 257;
          mlir::detail::Parser::emitError(v225, v60, (uint64_t)&v316, &v318);
          if ((_QWORD)v318)
          {
            LODWORD(v313) = 3;
            v314 = "expected integer elements, but parsed floating-point";
            v315 = 52;
            v226 = &v313;
            v227 = *((_QWORD *)&v319 + 1);
            if (v320 >= v321)
            {
              v286 = v320 + 1;
              if (*((_QWORD *)&v319 + 1) <= (unint64_t)&v313
                && *((_QWORD *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
              {
                v300 = (char *)&v313 - *((_QWORD *)&v319 + 1);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v286, 24);
                v227 = *((_QWORD *)&v319 + 1);
                v226 = (const char **)&v300[*((_QWORD *)&v319 + 1)];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v286, 24);
                v226 = &v313;
                v227 = *((_QWORD *)&v319 + 1);
              }
            }
            v228 = v227 + 24 * v320;
            v229 = *(_OWORD *)v226;
            *(_QWORD *)(v228 + 16) = v226[2];
            *(_OWORD *)v228 = v229;
            ++v320;
          }
          v230 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v318);
          if ((_QWORD)v318)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
          v302 = v230;
          if (v327)
          {
            v231 = __p;
            if (__p)
            {
              v232 = v326;
              v233 = __p;
              if (v326 != __p)
              {
                do
                  v232 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v232 - 1);
                while (v232 != v231);
                v233 = __p;
              }
              v326 = v231;
              operator delete(v233);
            }
            v193 = v323;
            if (v323)
            {
              v234 = v324;
              v195 = v323;
              if (v324 != v323)
              {
                do
                {
                  v236 = *--v234;
                  v235 = v236;
                  *v234 = 0;
                  if (v236)
                    MEMORY[0x20BD002D4](v235, 0x1000C8077774924);
                }
                while (v234 != v193);
                goto LABEL_355;
              }
LABEL_356:
              v324 = v193;
              operator delete(v195);
            }
            goto LABEL_357;
          }
          goto LABEL_359;
        }
        buildAttributeAPInt((uint64_t)&v313, v307, v58 != 0, *((_QWORD *)v55 + 2), *((_QWORD *)v55 + 3));
        v63 = v315;
        if ((_BYTE)v315)
        {
          v64 = v309[1];
          if (v309[1] >= v310)
          {
            v77 = std::vector<llvm::APInt>::__push_back_slow_path<llvm::APInt const&>(v309, (uint64_t)&v313);
          }
          else
          {
            v65 = v314;
            *((_DWORD *)v309[1] + 2) = (_DWORD)v314;
            if (v65 > 0x40)
              llvm::APInt::initSlowCase(v64, (const void **)&v313);
            else
              *(_QWORD *)v64 = v313;
            v77 = (char *)v64 + 16;
          }
          v309[1] = (llvm::APFloatBase *)v77;
        }
        else
        {
          v68 = *(_QWORD *)a1;
          v316.__r_.__value_.__r.__words[0] = (std::string::size_type)"integer constant out of range for type";
          v317 = 259;
          mlir::detail::Parser::emitError(v68, v60, (uint64_t)&v316, &v318);
          v302 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v318);
          if ((_QWORD)v318)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
          if (v327)
          {
            v69 = __p;
            if (__p)
            {
              v70 = v326;
              v71 = __p;
              if (v326 != __p)
              {
                do
                  v70 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v70 - 1);
                while (v70 != v69);
                v71 = __p;
              }
              v326 = v69;
              operator delete(v71);
            }
            v72 = v323;
            if (v323)
            {
              v73 = v324;
              v74 = v323;
              if (v324 != v323)
              {
                do
                {
                  v76 = *--v73;
                  v75 = v76;
                  *v73 = 0;
                  if (v76)
                    MEMORY[0x20BD002D4](v75, 0x1000C8077774924);
                }
                while (v73 != v72);
                v74 = v323;
              }
              v324 = v72;
              operator delete(v74);
            }
            if (*((_BYTE **)&v319 + 1) != v322)
              free(*((void **)&v319 + 1));
          }
        }
        if ((_BYTE)v315 && v314 >= 0x41 && v313)
          MEMORY[0x20BD002D4](v313, 0x1000C8000313F17);
        if (!v63)
          goto LABEL_359;
      }
      v55 += 32;
      if (v55 == v56)
        goto LABEL_360;
    }
  }
  v88 = *(void **)(*(_QWORD *)OperandRange + 136);
  if (v88 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    v309[0] = 0;
    v309[1] = 0;
    v310 = 0;
    *(_QWORD *)&v307 = OperandRange;
    std::vector<llvm::APFloat>::reserve((uint64_t)v309, (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 5);
    v100 = *(unsigned __int8 **)(a1 + 56);
    v101 = *(unsigned __int8 **)(a1 + 64);
    if (v100 == v101)
      goto LABEL_325;
    while (1)
    {
      v102 = *v100;
      v103 = *((_DWORD *)v100 + 2);
      if (v103 == 9)
      {
        v111 = COERCE_DOUBLE(mlir::Token::getFloatingPointValue((mlir::Token *)(v100 + 8)));
        if (!v112)
        {
          v210 = *(_QWORD *)a1;
          v316.__r_.__value_.__r.__words[0] = (std::string::size_type)"floating point value too large for attribute";
          v317 = 259;
          mlir::detail::Parser::emitError(v210, (uint64_t)&v316, &v318);
          v152 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v318);
          if ((_QWORD)v318)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
          if (v327)
          {
            v211 = __p;
            if (__p)
            {
              v212 = v326;
              v213 = __p;
              if (v326 != __p)
              {
                do
                  v212 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v212 - 1);
                while (v212 != v211);
                v213 = __p;
              }
              v326 = v211;
              operator delete(v213);
            }
            v156 = v323;
            if (v323)
            {
              v214 = v324;
              v158 = v323;
              if (v324 != v323)
              {
                do
                {
                  v216 = *--v214;
                  v215 = v216;
                  *v214 = 0;
                  if (v216)
                    MEMORY[0x20BD002D4](v215, 0x1000C8077774924);
                }
                while (v214 != v156);
                goto LABEL_320;
              }
LABEL_321:
              v324 = v156;
              operator delete(v158);
            }
LABEL_322:
            if (*((_BYTE **)&v319 + 1) != v322)
              free(*((void **)&v319 + 1));
          }
LABEL_324:
          if (v152)
          {
LABEL_325:
            if (v53 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
            {
              v146 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)v305, *((uint64_t *)&v305 + 1), (uint64_t)v309[0], (unint64_t)((v309[1] - v309[0]) >> 5) >> 1);
              v217 = v309[0];
              if (!v309[0])
                return v146;
            }
            else
            {
              v146 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)v305, *((uint64_t *)&v305 + 1), (uint64_t)v309[0], (v309[1] - v309[0]) >> 5);
              v217 = v309[0];
              if (!v309[0])
                return v146;
            }
          }
          else
          {
LABEL_330:
            v146 = 0;
            v217 = v309[0];
            if (!v309[0])
              return v146;
          }
          v218 = v309[1];
          v183 = v217;
          if (v309[1] != v217)
          {
            v219 = llvm::APFloatBase::PPCDoubleDouble(v217);
            v220 = (llvm::APFloatBase *)((char *)v218 - 24);
            do
            {
              while (v219 == *(void **)v220)
              {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v220);
                v222 = (llvm::APFloatBase *)(v221 - 8);
                v220 = (llvm::detail::DoubleAPFloat *)(v221 - 32);
                if (v222 == v217)
                  goto LABEL_336;
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v220);
              v224 = (llvm::APFloatBase *)(v223 - 8);
              v220 = (llvm::detail::DoubleAPFloat *)(v223 - 32);
            }
            while (v224 != v217);
LABEL_336:
            v183 = v309[0];
          }
          v309[1] = v217;
          goto LABEL_374;
        }
        v113 = v111;
        if (v102)
          v113 = -v111;
        v114 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v316, v113);
        v115 = llvm::APFloatBase::IEEEdouble(v114);
        llvm::APFloat::Storage::Storage((char *)&v318 + 8, &v316, v115);
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v316);
        isF64 = mlir::Type::isF64((mlir::Type *)&v307);
        if ((isF64 & 1) == 0)
        {
          v316.__r_.__value_.__s.__data_[0] = 0;
          FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v307);
          isF64 = llvm::APFloat::convert((uint64_t)&v318, FloatSemantics, 1, &v316);
        }
        v118 = v309[1];
        if (v309[1] >= v310)
        {
          v121 = std::vector<llvm::APFloat>::__push_back_slow_path<llvm::APFloat const&>((char **)v309, (uint64_t)&v318);
          v122 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v121);
          v309[1] = (llvm::APFloatBase *)v121;
          if (v122 != *((void **)&v318 + 1))
            goto LABEL_181;
        }
        else
        {
          v119 = (void *)*((_QWORD *)&v318 + 1);
          v120 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)isF64);
          if (v120 == v119)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)v118 + 1, (const llvm::detail::DoubleAPFloat *)((char *)&v318 + 8));
            v309[1] = (llvm::APFloatBase *)((char *)v118 + 32);
            if (v120 != *((void **)&v318 + 1))
            {
LABEL_181:
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v318 + 8));
              goto LABEL_162;
            }
          }
          else
          {
            llvm::detail::IEEEFloat::IEEEFloat((llvm::APFloatBase *)((char *)v118 + 8), (const llvm::detail::IEEEFloat *)((char *)&v318 + 8));
            v309[1] = (llvm::APFloatBase *)((char *)v118 + 32);
            if (v120 != *((void **)&v318 + 1))
              goto LABEL_181;
          }
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v318 + 8));
      }
      else
      {
        if (v103 != 10 || *((_QWORD *)v100 + 3) < 2uLL || **((_WORD **)v100 + 2) != 30768)
        {
          v147 = *(_QWORD *)a1;
          v317 = 257;
          mlir::detail::Parser::emitError(v147, (uint64_t)&v316, &v318);
          if ((_QWORD)v318)
          {
            LODWORD(v313) = 3;
            v314 = "expected floating-point elements, but parsed integer";
            v315 = 52;
            v148 = &v313;
            v149 = *((_QWORD *)&v319 + 1);
            if (v320 >= v321)
            {
              v279 = v320 + 1;
              if (*((_QWORD *)&v319 + 1) <= (unint64_t)&v313
                && *((_QWORD *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
              {
                v294 = (char *)&v313 - *((_QWORD *)&v319 + 1);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v279, 24);
                v149 = *((_QWORD *)&v319 + 1);
                v148 = (const char **)&v294[*((_QWORD *)&v319 + 1)];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v279, 24);
                v148 = &v313;
                v149 = *((_QWORD *)&v319 + 1);
              }
            }
            v150 = v149 + 24 * v320;
            v151 = *(_OWORD *)v148;
            *(_QWORD *)(v150 + 16) = v148[2];
            *(_OWORD *)v150 = v151;
            ++v320;
          }
          v152 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v318);
          if ((_QWORD)v318)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
          if (v327)
          {
            v153 = __p;
            if (__p)
            {
              v154 = v326;
              v155 = __p;
              if (v326 != __p)
              {
                do
                  v154 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v154 - 1);
                while (v154 != v153);
                v155 = __p;
              }
              v326 = v153;
              operator delete(v155);
            }
            v156 = v323;
            if (v323)
            {
              v157 = v324;
              v158 = v323;
              if (v324 == v323)
                goto LABEL_321;
              do
              {
                v160 = *--v157;
                v159 = v160;
                *v157 = 0;
                if (v160)
                  MEMORY[0x20BD002D4](v159, 0x1000C8077774924);
              }
              while (v157 != v156);
LABEL_320:
              v158 = v323;
              goto LABEL_321;
            }
            goto LABEL_322;
          }
          goto LABEL_324;
        }
        LOBYTE(v318) = 0;
        LOBYTE(v320) = 0;
        v104 = *(_QWORD *)a1;
        v105 = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v307);
        Width = mlir::FloatType::getWidth((mlir::FloatType *)&v307);
        v107 = (llvm::APFloatBase *)mlir::detail::Parser::parseFloatFromIntegerLiteral(v104, (uint64_t)&v318, (MirInfoChannelAssignment *)(v100 + 8), v102 != 0, v105, Width);
        v108 = (char)v107;
        if ((_BYTE)v107)
        {
          v109 = v309[1];
          if (v309[1] >= v310)
          {
            v107 = (llvm::APFloatBase *)std::vector<llvm::APFloat>::__push_back_slow_path<llvm::APFloat const&>((char **)v309, (uint64_t)&v318);
          }
          else
          {
            v110 = (void *)*((_QWORD *)&v318 + 1);
            if (llvm::APFloatBase::PPCDoubleDouble(v107) == v110)
              llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)v109 + 1, (const llvm::detail::DoubleAPFloat *)((char *)&v318 + 8));
            else
              llvm::detail::IEEEFloat::IEEEFloat((llvm::APFloatBase *)((char *)v109 + 8), (const llvm::detail::IEEEFloat *)((char *)&v318 + 8));
            v107 = (llvm::APFloatBase *)((char *)v109 + 32);
          }
          v309[1] = v107;
        }
        if ((_BYTE)v320)
        {
          v123 = (void *)*((_QWORD *)&v318 + 1);
          if (llvm::APFloatBase::PPCDoubleDouble(v107) == v123)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v318 + 8));
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v318 + 8));
        }
        if (!v108)
          goto LABEL_330;
      }
LABEL_162:
      v100 += 32;
      if (v100 == v101)
        goto LABEL_325;
    }
  }
  v241 = v305;
  mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v305);
  if (*(_BYTE *)(a1 + 104))
  {
    mlir::Token::getStringValue(v6, (std::string *)&v318);
    v242 = BYTE7(v319);
    v243 = (__int128 *)v318;
    if (SBYTE7(v319) < 0)
      v242 = *((_QWORD *)&v318 + 1);
    else
      v243 = &v318;
    v316.__r_.__value_.__r.__words[0] = (std::string::size_type)v243;
    v316.__r_.__value_.__l.__size_ = v242;
    v146 = mlir::DenseStringElementsAttr::get(v241, *((uint64_t *)&v241 + 1), (uint64_t)&v316, 1);
    if (SBYTE7(v319) < 0)
    {
      v183 = (llvm::APFloatBase *)v318;
      goto LABEL_374;
    }
    return v146;
  }
  v244 = *(char **)(a1 + 56);
  v303 = *(char **)(a1 + 64);
  v245 = v303 - v244;
  if (v303 == v244)
  {
    v250 = 0;
    v248 = 0;
    v249 = 0;
    v246 = 0;
  }
  else
  {
    if (v245 < 0)
LABEL_494:
      abort();
    v246 = (std::string *)operator new(24 * (v245 >> 5));
    v247 = &v246[v245 >> 5];
    v248 = (char *)operator new((unint64_t)v245 >> 1);
    v249 = v246;
    v250 = v248;
    v251 = &v248[16 * (v245 >> 5)];
    do
    {
      while (1)
      {
        v254 = *((_OWORD *)v244 + 1);
        v318 = *(_OWORD *)v244;
        v319 = v254;
        mlir::Token::getStringValue((mlir::Token *)((char *)&v318 + 8), &v316);
        if (v249 >= v247)
        {
          v256 = 0xAAAAAAAAAAAAAAABLL * (((char *)v249 - (char *)v246) >> 3) + 1;
          if (v256 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_494;
          if (0x5555555555555556 * (((char *)v247 - (char *)v246) >> 3) > v256)
            v256 = 0x5555555555555556 * (((char *)v247 - (char *)v246) >> 3);
          v257 = 0xAAAAAAAAAAAAAAABLL * (((char *)v247 - (char *)v246) >> 3) >= 0x555555555555555
               ? 0xAAAAAAAAAAAAAAALL
               : v256;
          v301 = v251;
          if (v257)
          {
            if (v257 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_497;
            v258 = (char *)operator new(24 * v257);
          }
          else
          {
            v258 = 0;
          }
          v259 = (std::string *)&v258[8 * (((char *)v249 - (char *)v246) >> 3)];
          *v259 = v316;
          memset(&v316, 0, sizeof(v316));
          if (v249 == v246)
          {
            v261 = &v258[8 * (((char *)v249 - (char *)v246) >> 3)];
          }
          else
          {
            v260 = v249;
            v261 = &v258[8 * (((char *)v249 - (char *)v246) >> 3)];
            do
            {
              v262 = *(_OWORD *)&v260[-1].__r_.__value_.__l.__data_;
              *((_QWORD *)v261 - 1) = *((_QWORD *)&v260[-1].__r_.__value_.__l + 2);
              *(_OWORD *)(v261 - 24) = v262;
              v261 -= 24;
              v260[-1].__r_.__value_.__l.__size_ = 0;
              v260[-1].__r_.__value_.__r.__words[2] = 0;
              v260[-1].__r_.__value_.__r.__words[0] = 0;
              --v260;
            }
            while (v260 != v246);
            do
            {
              if (SHIBYTE(v249[-1].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v249[-1].__r_.__value_.__l.__data_);
              --v249;
            }
            while (v249 != v246);
          }
          v247 = (std::string *)&v258[24 * v257];
          v249 = v259 + 1;
          if (v246)
            operator delete(v246);
          v246 = (std::string *)v261;
          v251 = v301;
        }
        else
        {
          v255 = *(_OWORD *)&v316.__r_.__value_.__l.__data_;
          v249->__r_.__value_.__r.__words[2] = v316.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v249->__r_.__value_.__l.__data_ = v255;
          ++v249;
          memset(&v316, 0, sizeof(v316));
        }
        if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v316.__r_.__value_.__l.__data_);
        if (v248 >= v251)
          break;
        if ((v249[-1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          data = v249 - 1;
        else
          data = (std::string *)v249[-1].__r_.__value_.__l.__data_;
        *(_QWORD *)v248 = data;
        size = HIBYTE(v249[-1].__r_.__value_.__r.__words[2]);
        if ((size & 0x80u) != 0)
          size = v249[-1].__r_.__value_.__l.__size_;
        *((_QWORD *)v248 + 1) = size;
        v248 += 16;
        v244 += 32;
        if (v244 == v303)
          goto LABEL_438;
      }
      v263 = (v248 - v250) >> 4;
      v264 = v263 + 1;
      if ((unint64_t)(v263 + 1) >> 60)
        goto LABEL_494;
      if ((v251 - v250) >> 3 > v264)
        v264 = (v251 - v250) >> 3;
      if ((unint64_t)(v251 - v250) >= 0x7FFFFFFFFFFFFFF0)
        v264 = 0xFFFFFFFFFFFFFFFLL;
      if (v264 >> 60)
LABEL_497:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v265 = 16 * v264;
      v266 = (char *)operator new(16 * v264);
      v267 = &v266[16 * v263];
      v268 = HIBYTE(v249[-1].__r_.__value_.__r.__words[2]);
      if ((v268 & 0x80u) == 0)
        v269 = v249 - 1;
      else
        v269 = (std::string *)v249[-1].__r_.__value_.__l.__data_;
      *(_QWORD *)v267 = v269;
      if ((v268 & 0x80u) != 0)
        v268 = v249[-1].__r_.__value_.__l.__size_;
      *((_QWORD *)v267 + 1) = v268;
      if (v248 == v250)
      {
        v271 = &v266[16 * v263];
      }
      else
      {
        v270 = &v266[16 * v263];
        do
        {
          v271 = v270 - 16;
          *((_OWORD *)v270 - 1) = *((_OWORD *)v248 - 1);
          v248 -= 16;
          v270 -= 16;
        }
        while (v248 != v250);
      }
      v251 = &v266[v265];
      v248 = v267 + 16;
      if (v250)
        operator delete(v250);
      v250 = v271;
      v244 += 32;
    }
    while (v244 != v303);
  }
LABEL_438:
  v146 = mlir::DenseStringElementsAttr::get(v241, *((uint64_t *)&v241 + 1), (uint64_t)v250, (v248 - v250) >> 4);
  if (v250)
    operator delete(v250);
  if (v246)
  {
    while (v249 != v246)
    {
      if (SHIBYTE(v249[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v249[-1].__r_.__value_.__l.__data_);
      --v249;
    }
    v183 = (llvm::APFloatBase *)v246;
    goto LABEL_374;
  }
  return v146;
}

unint64_t mlir::detail::Parser::parseStridedLayoutAttr(void)::$_1::operator()(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  const char *OCGSize;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t UInt64IntegerValue;
  char v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 + 56) == 26)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v15);
    v3 = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_OWORD *)(v4 + 56) = v15;
    *(_QWORD *)(v4 + 72) = v16;
    v5 = 0x8000000000000000;
    return v5 | v3;
  }
  OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(v2 + 56));
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_DWORD *)(v7 + 56);
  if (v8 == 24)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v15);
    v9 = *(_QWORD *)(a1 + 8);
    *(_OWORD *)(v9 + 56) = v15;
    *(_QWORD *)(v9 + 72) = v16;
    v7 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v7 + 56) != 10)
      goto LABEL_14;
  }
  else if (v8 != 10)
  {
    goto LABEL_14;
  }
  UInt64IntegerValue = mlir::Token::getUInt64IntegerValue(*(unsigned __int8 **)(v7 + 64), *(_QWORD *)(v7 + 72));
  if (v11)
  {
    v12 = UInt64IntegerValue;
    if ((UInt64IntegerValue & 0x8000000000000000) == 0)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)&v15);
      v13 = *(_QWORD *)(a1 + 8);
      *(_OWORD *)(v13 + 56) = v15;
      *(_QWORD *)(v13 + 72) = v16;
      if (v8 == 24)
        v3 = -(uint64_t)v12;
      else
        v3 = v12;
      v5 = v3 & 0xFFFFFFFFFFFFFF00;
      v3 = v3;
      return v5 | v3;
    }
  }
LABEL_14:
  mlir::detail::Parser::parseStridedLayoutAttr(void)::$_1::operator() const(void)::{lambda(void)#1}::operator()(a1, OCGSize);
  return 0;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>,unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>::find(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *result;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (37 * *a2) & (v3 - 1);
    result = (uint64_t *)(v2 + 16 * v4);
    v6 = *result;
    if (*a2 == *result)
      return result;
    v7 = 1;
    while (v6 != -1)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (*a2 == v6)
        return (uint64_t *)(v2 + 16 * v4);
    }
  }
  return (uint64_t *)(v2 + 16 * v3);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>,unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>::try_emplace<mlir::DistinctAttr&>@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  v6 = result;
  v8 = *((_DWORD *)result + 4);
  if (!v8)
    goto LABEL_23;
  v9 = *result;
  v10 = v8 - 1;
  v11 = (37 * *a2) & (v8 - 1);
  v12 = (uint64_t *)(*result + 16 * v11);
  v13 = *v12;
  if (*a2 == *v12)
  {
LABEL_3:
    v14 = 0;
    goto LABEL_10;
  }
  v16 = 0;
  v17 = 1;
  while (v13 != -1)
  {
    if (v16)
      v18 = 0;
    else
      v18 = v13 == -2;
    if (v18)
      v16 = v12;
    v19 = v11 + v17++;
    v11 = v19 & v10;
    v12 = (uint64_t *)(v9 + 16 * (v19 & v10));
    v13 = *v12;
    if (*a2 == *v12)
      goto LABEL_3;
  }
  if (v16)
    v12 = v16;
  v20 = *((_DWORD *)result + 2);
  if (4 * v20 + 4 < 3 * v8)
  {
    if (v8 + ~v20 - *((_DWORD *)result + 3) > v8 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_23:
    v8 *= 2;
  }
  result = llvm::DenseMap<unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>::grow((uint64_t)result, v8);
  v15 = *a2;
  v21 = *((_DWORD *)v6 + 4) - 1;
  v22 = (37 * *a2) & v21;
  v12 = (uint64_t *)(*v6 + 16 * v22);
  v23 = *v12;
  if (*a2 == *v12)
    goto LABEL_7;
  v24 = 0;
  v25 = 1;
  while (v23 != -1)
  {
    if (v24)
      v26 = 0;
    else
      v26 = v23 == -2;
    if (v26)
      v24 = v12;
    v27 = v22 + v25++;
    v22 = v27 & v21;
    v12 = (uint64_t *)(*v6 + 16 * (v27 & v21));
    v23 = *v12;
    if (v15 == *v12)
      goto LABEL_7;
  }
  if (v24)
    v12 = v24;
LABEL_6:
  v15 = *v12;
LABEL_7:
  ++*((_DWORD *)v6 + 2);
  if (v15 != -1)
    --*((_DWORD *)v6 + 3);
  *v12 = *a2;
  v12[1] = *a3;
  v9 = *v6;
  v8 = *((_DWORD *)v6 + 4);
  v14 = 1;
LABEL_10:
  *(_QWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = v9 + 16 * v8;
  *(_BYTE *)(a4 + 16) = v14;
  return result;
}

uint64_t `anonymous namespace'::TensorLiteralParser::parseList(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[5];
  unsigned int v14;
  char v15;
  uint64_t *v16;
  void *__src;
  uint64_t v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x24BDAC8D0];
  v15 = 1;
  v16 = a1;
  __src = v19;
  v18 = *(_QWORD *)"";
  v14 = 0;
  v13[0] = a1;
  v13[1] = &v14;
  v13[2] = &v15;
  v13[3] = &v16;
  v13[4] = &__src;
  {
    v10 = 0;
    v11 = __src;
    if (__src == v19)
      return v10;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 8) = 0;
  v3 = v14;
  if (*(_DWORD *)(a2 + 12))
  {
    v4 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), 1uLL, 8);
    v4 = *(unsigned int *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v4) = v3;
  v5 = *(unsigned int *)(a2 + 12);
  v6 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v6;
  v7 = __src;
  v8 = v18;
  v9 = v18 + v6;
  if (v9 > v5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v9, 8);
    LODWORD(v6) = *(_DWORD *)(a2 + 8);
  }
  if ((_DWORD)v8)
  {
    memcpy((void *)(*(_QWORD *)a2 + 8 * v6), v7, 8 * v8);
    LODWORD(v6) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(a2 + 8) = v6 + v8;
  v10 = 1;
  v11 = __src;
  if (__src != v19)
LABEL_9:
    free(v11);
  return v10;
}

uint64_t `anonymous namespace'::TensorLiteralParser::parseElement(_anonymous_namespace_::TensorLiteralParser *this)
{
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  unint64_t v5;
  char *v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  __int128 v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  int v32;
  unint64_t v33;
  char *v34;
  __int128 v35;
  char *v36;
  __int128 v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  char *v63;
  __int128 v64;
  char *v65;
  __int128 v66;
  _QWORD v67[4];
  __int16 v68;
  __int128 v69;
  uint64_t v70;
  void *v71;
  __int16 v72;
  uint64_t v73;
  void *v74;
  _QWORD *v75;
  void *__p;
  _QWORD *v77;
  char v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)this;
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  v3 = (__int128 *)(v2 + 56);
  switch(*(_DWORD *)(v2 + 56))
  {
    case 9:
    case 0xA:
    case 0x36:
    case 0x4A:
      v6 = (char *)*((_QWORD *)this + 8);
      v5 = *((_QWORD *)this + 9);
      if ((unint64_t)v6 < v5)
        goto LABEL_13;
      v7 = (_BYTE *)*((_QWORD *)this + 7);
      v8 = (v6 - v7) >> 5;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 59)
        goto LABEL_93;
      v10 = v5 - (_QWORD)v7;
      if (v10 >> 4 > v9)
        v9 = v10 >> 4;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
        v11 = 0x7FFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (!v11)
      {
        v12 = 0;
        goto LABEL_37;
      }
      if (!(v11 >> 59))
      {
        v12 = (char *)operator new(32 * v11);
LABEL_37:
        v36 = &v12[32 * v8];
        *v36 = 0;
        v37 = *v3;
        v38 = &v12[32 * v11];
        *((_QWORD *)v36 + 3) = *((_QWORD *)v3 + 2);
        *(_OWORD *)(v36 + 8) = v37;
        v15 = v36 + 32;
        if (v6 == v7)
          goto LABEL_40;
        do
        {
          v39 = *((_OWORD *)v6 - 1);
          *((_OWORD *)v36 - 2) = *((_OWORD *)v6 - 2);
          *((_OWORD *)v36 - 1) = v39;
          v36 -= 32;
          v6 -= 32;
        }
        while (v6 != v7);
        goto LABEL_39;
      }
      goto LABEL_94;
    case 0xB:
      v6 = (char *)*((_QWORD *)this + 8);
      v13 = *((_QWORD *)this + 9);
      if ((unint64_t)v6 < v13)
      {
LABEL_13:
        *v6 = 0;
        v14 = *v3;
        *((_QWORD *)v6 + 3) = *((_QWORD *)v3 + 2);
        *(_OWORD *)(v6 + 8) = v14;
        v15 = v6 + 32;
LABEL_42:
        *((_QWORD *)this + 8) = v15;
        goto LABEL_43;
      }
      v43 = (_BYTE *)*((_QWORD *)this + 7);
      v44 = (v6 - v43) >> 5;
      v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 59)
        goto LABEL_93;
      v46 = v13 - (_QWORD)v43;
      if (v46 >> 4 > v45)
        v45 = v46 >> 4;
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFE0)
        v47 = 0x7FFFFFFFFFFFFFFLL;
      else
        v47 = v45;
      if (!v47)
      {
        v48 = 0;
        goto LABEL_83;
      }
      if (!(v47 >> 59))
      {
        v48 = (char *)operator new(32 * v47);
LABEL_83:
        v36 = &v48[32 * v44];
        *v36 = 0;
        v61 = *v3;
        v38 = &v48[32 * v47];
        *((_QWORD *)v36 + 3) = *((_QWORD *)v3 + 2);
        *(_OWORD *)(v36 + 8) = v61;
        v15 = v36 + 32;
        if (v6 == v43)
        {
LABEL_40:
          *((_QWORD *)this + 7) = v36;
          *((_QWORD *)this + 8) = v15;
          *((_QWORD *)this + 9) = v38;
          if (v6)
            operator delete(v6);
          goto LABEL_42;
        }
        do
        {
          v62 = *((_OWORD *)v6 - 1);
          *((_OWORD *)v36 - 2) = *((_OWORD *)v6 - 2);
          *((_OWORD *)v36 - 1) = v62;
          v36 -= 32;
          v6 -= 32;
        }
        while (v6 != v43);
LABEL_39:
        v6 = (char *)*((_QWORD *)this + 7);
        goto LABEL_40;
      }
      goto LABEL_94;
    case 0x15:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v69);
      v25 = *(_QWORD *)(v1 + 8);
      *(_OWORD *)(v25 + 56) = v69;
      *(_QWORD *)(v25 + 72) = v70;
      {
        v26 = *(_QWORD *)this;
        *(_QWORD *)&v69 = "expected ',' between complex elements";
        v72 = 259;
        if (mlir::detail::Parser::parseToken(v26, 16, (uint64_t)&v69))
        {
          {
            v27 = *(_QWORD *)this;
            v67[0] = "expected ')' after complex elements";
            v68 = 259;
            if (mlir::detail::Parser::parseToken(v27, 28, (uint64_t)v67))
              return 1;
          }
        }
      }
      return 0;
    case 0x18:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v69);
      v28 = *(_QWORD *)(v1 + 8);
      *(_OWORD *)(v28 + 56) = v69;
      *(_QWORD *)(v28 + 72) = v70;
      v29 = *(_QWORD *)this;
      v30 = *(_QWORD *)(*(_QWORD *)this + 8);
      v32 = *(_DWORD *)(v30 + 56);
      v31 = (__int128 *)(v30 + 56);
      if ((v32 - 9) < 2)
      {
        v34 = (char *)*((_QWORD *)this + 8);
        v33 = *((_QWORD *)this + 9);
        if ((unint64_t)v34 < v33)
        {
          *v34 = 1;
          v35 = *v31;
          *((_QWORD *)v34 + 3) = *((_QWORD *)v31 + 2);
          *(_OWORD *)(v34 + 8) = v35;
          *((_QWORD *)this + 8) = v34 + 32;
          goto LABEL_43;
        }
        v55 = (_BYTE *)*((_QWORD *)this + 7);
        v56 = (v34 - v55) >> 5;
        v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 59)
LABEL_93:
          abort();
        v58 = v33 - (_QWORD)v55;
        if (v58 >> 4 > v57)
          v57 = v58 >> 4;
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFE0)
          v59 = 0x7FFFFFFFFFFFFFFLL;
        else
          v59 = v57;
        if (v59)
        {
          if (v59 >> 59)
LABEL_94:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v60 = (char *)operator new(32 * v59);
        }
        else
        {
          v60 = 0;
        }
        v63 = &v60[32 * v56];
        *v63 = 1;
        v64 = *v31;
        *((_QWORD *)v63 + 3) = *((_QWORD *)v31 + 2);
        *(_OWORD *)(v63 + 8) = v64;
        v65 = v63 + 32;
        if (v34 != v55)
        {
          do
          {
            v66 = *((_OWORD *)v34 - 1);
            *((_OWORD *)v63 - 2) = *((_OWORD *)v34 - 2);
            *((_OWORD *)v63 - 1) = v66;
            v63 -= 32;
            v34 -= 32;
          }
          while (v34 != v55);
          v34 = (char *)*((_QWORD *)this + 7);
        }
        *((_QWORD *)this + 7) = v63;
        *((_QWORD *)this + 8) = v65;
        *((_QWORD *)this + 9) = &v60[32 * v59];
        if (v34)
          operator delete(v34);
        *((_QWORD *)this + 8) = v65;
LABEL_43:
        v40 = *(_QWORD *)this;
        mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v40 + 8) + 8), (uint64_t)&v69);
        v41 = *(_QWORD *)(v40 + 8);
        *(_OWORD *)(v41 + 56) = v69;
        *(_QWORD *)(v41 + 72) = v70;
        return 1;
      }
      v67[0] = "expected integer or floating point literal";
      v68 = 259;
      mlir::detail::Parser::emitError(v29, (uint64_t)v67, &v69);
      v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v69);
      if ((_QWORD)v69)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v69);
      if (v78)
      {
        v49 = __p;
        if (__p)
        {
          v50 = v77;
          v51 = __p;
          if (v77 != __p)
          {
            do
              v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
            while (v50 != v49);
            v51 = __p;
          }
          v77 = v49;
          operator delete(v51);
        }
        v20 = v74;
        if (v74)
        {
          v52 = v75;
          v22 = v74;
          if (v75 != v74)
          {
            do
            {
              v54 = *--v52;
              v53 = v54;
              *v52 = 0;
              if (v54)
                MEMORY[0x20BD002D4](v53, 0x1000C8077774924);
            }
            while (v52 != v20);
LABEL_69:
            v22 = v74;
          }
LABEL_70:
          v75 = v20;
          operator delete(v22);
        }
LABEL_71:
        if (v71 != &v73)
          free(v71);
      }
      return v16;
    default:
      v67[0] = "expected element literal of primitive type";
      v68 = 259;
      mlir::detail::Parser::emitError(v1, (uint64_t)v67, &v69);
      v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v69);
      if ((_QWORD)v69)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v69);
      if (!v78)
        return v16;
      v17 = __p;
      if (__p)
      {
        v18 = v77;
        v19 = __p;
        if (v77 != __p)
        {
          do
            v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          v19 = __p;
        }
        v77 = v17;
        operator delete(v19);
      }
      v20 = v74;
      if (!v74)
        goto LABEL_71;
      v21 = v75;
      v22 = v74;
      if (v75 == v74)
        goto LABEL_70;
      do
      {
        v24 = *--v21;
        v23 = v24;
        *v21 = 0;
        if (v24)
          MEMORY[0x20BD002D4](v23, 0x1000C8077774924);
      }
      while (v21 != v20);
      goto LABEL_69;
  }
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::TensorLiteralParser::parseList(llvm::SmallVectorImpl<long long> &)::$_0>(uint64_t a1)
{
  _anonymous_namespace_::TensorLiteralParser *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v22;
  __int16 v23;
  void *__s2;
  uint64_t v25;
  _BYTE v26[32];
  _QWORD v27[3];
  void *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void *__p;
  _QWORD *v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = *(_anonymous_namespace_::TensorLiteralParser **)a1;
  __s2 = v26;
  v25 = *(_QWORD *)"";
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 8) + 56) == 22)
  {
    {
LABEL_3:
      v3 = 0;
      goto LABEL_35;
    }
  }
  {
    goto LABEL_3;
  }
  ++**(_DWORD **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  if (*v4)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if ((void **)v5 == &__s2)
    {
LABEL_33:
      *v4 = 0;
LABEL_34:
      v3 = 1;
      goto LABEL_35;
    }
    v6 = v25;
    v7 = *(unsigned int *)(v5 + 8);
    if (v7 >= v25)
    {
      if ((_DWORD)v25)
        memmove(*(void **)v5, __s2, 8 * v25);
      goto LABEL_32;
    }
    if (*(_DWORD *)(v5 + 12) >= v25)
    {
      if ((_DWORD)v7)
      {
        memmove(*(void **)v5, __s2, 8 * v7);
        v8 = v25;
        if (v7 == v25)
        {
LABEL_32:
          *(_DWORD *)(v5 + 8) = v6;
          v4 = *(_BYTE **)(a1 + 16);
          goto LABEL_33;
        }
      }
      else
      {
        v7 = 0;
        v8 = v25;
        if (!(_DWORD)v25)
          goto LABEL_32;
      }
    }
    else
    {
      *(_DWORD *)(v5 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v6, 8);
      v7 = 0;
      v8 = v25;
      if (!(_DWORD)v25)
        goto LABEL_32;
    }
    memcpy((void *)(*(_QWORD *)v5 + 8 * v7), (char *)__s2 + 8 * v7, 8 * v8 - 8 * v7);
    goto LABEL_32;
  }
  v9 = *(_QWORD *)(a1 + 32);
  v10 = **(uint64_t ***)(a1 + 24);
  v11 = *(unsigned int *)(v9 + 8);
  if ((_DWORD)v11 == (_DWORD)v25 && !memcmp(*(const void **)v9, __s2, 8 * v11))
    goto LABEL_34;
  v12 = *v10;
  v22 = "tensor literal is invalid; ranks are not consistent between elements";
  v23 = 259;
  mlir::detail::Parser::emitError(v12, (uint64_t)&v22, v27);
  v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
  if (v27[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
  if (v34)
  {
    v13 = __p;
    if (__p)
    {
      v14 = v33;
      v15 = __p;
      if (v33 != __p)
      {
        do
          v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        v15 = __p;
      }
      v33 = v13;
      operator delete(v15);
    }
    v16 = v30;
    if (v30)
    {
      v17 = v31;
      v18 = v30;
      if (v31 != v30)
      {
        do
        {
          v20 = *--v17;
          v19 = v20;
          *v17 = 0;
          if (v20)
            MEMORY[0x20BD002D4](v19, 0x1000C8077774924);
        }
        while (v17 != v16);
        v18 = v30;
      }
      v31 = v16;
      operator delete(v18);
    }
    if (v28 != &v29)
      free(v28);
  }
LABEL_35:
  if (__s2 != v26)
    free(__s2);
  return v3;
}

__n128 llvm::interleave<long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(llvm::ArrayRef<long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(void)#1},void>(const char **a1, const char **a2, uint64_t a3, uint64_t a4, const char **a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v12;
  unint64_t *v13;
  const char *v14;
  uint64_t v15;
  __n128 *v16;
  __n128 *v17;
  __n128 result;
  const char **v19;
  const char *v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  __int128 v26;
  const char *v27;
  uint64_t v28;
  unint64_t v29;
  __n128 *v30;
  __n128 *v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  BOOL v35;
  char *v36;
  unint64_t v37;
  BOOL v38;
  char *v39;
  char *v40;
  void *v41;
  void *v42;
  unint64_t *v43;
  int v44;
  const char *v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;

  if (a1 != a2)
  {
    v47 = v5;
    v48 = v6;
    v13 = (unint64_t *)(a3 + 16);
    v12 = *(_QWORD *)(a3 + 16);
    v14 = *a1;
    v44 = 2;
    v45 = v14;
    v15 = *(unsigned int *)(a3 + 24);
    v16 = (__n128 *)&v44;
    if (v15 >= *(_DWORD *)(a3 + 28))
    {
      v37 = v15 + 1;
      v38 = v12 + 24 * v15 > (unint64_t)&v44;
      if (v12 <= (unint64_t)&v44 && v38)
      {
        v39 = (char *)&v44 - v12;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, (void *)(a3 + 32), v37, 24);
        v12 = *(_QWORD *)(a3 + 16);
        v16 = (__n128 *)&v39[v12];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, (void *)(a3 + 32), v37, 24);
        v12 = *(_QWORD *)(a3 + 16);
        v16 = (__n128 *)&v44;
      }
    }
    v17 = (__n128 *)(v12 + 24 * *(unsigned int *)(a3 + 24));
    result = *v16;
    v17[1].n128_u64[0] = v16[1].n128_u64[0];
    *v17 = result;
    ++*(_DWORD *)(a3 + 24);
    v19 = a1 + 1;
    if (a1 + 1 != a2)
    {
      v42 = (void *)(a4 + 32);
      v43 = (unint64_t *)(a4 + 16);
      v41 = (void *)(a3 + 32);
      do
      {
        v20 = *a5;
        if (*a5)
        {
          v21 = strlen(*a5);
          v44 = 3;
          v45 = v20;
          v46 = v21;
          v22 = *(unsigned int *)(a4 + 24);
          v23 = *(_QWORD *)(a4 + 16);
          if (v22 < *(_DWORD *)(a4 + 28))
            goto LABEL_9;
        }
        else
        {
          v44 = 3;
          v45 = 0;
          v46 = 0;
          v22 = *(unsigned int *)(a4 + 24);
          v23 = *(_QWORD *)(a4 + 16);
          if (v22 < *(_DWORD *)(a4 + 28))
            goto LABEL_9;
        }
        v32 = v22 + 1;
        v33 = v23 + 24 * v22 > (unint64_t)&v44;
        if (v23 > (unint64_t)&v44 || !v33)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v43, v42, v32, 24);
          v23 = *v43;
LABEL_9:
          v24 = &v44;
          goto LABEL_10;
        }
        v40 = (char *)&v44 - v23;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v43, v42, v32, 24);
        v23 = *v43;
        v24 = (int *)&v40[*v43];
LABEL_10:
        v25 = v23 + 24 * *(unsigned int *)(a4 + 24);
        v26 = *(_OWORD *)v24;
        *(_QWORD *)(v25 + 16) = *((_QWORD *)v24 + 2);
        *(_OWORD *)v25 = v26;
        ++*(_DWORD *)(a4 + 24);
        v27 = *v19;
        v44 = 2;
        v45 = v27;
        v28 = *(unsigned int *)(a3 + 24);
        v29 = *(_QWORD *)(a3 + 16);
        if (v28 >= *(_DWORD *)(a3 + 28))
        {
          v34 = v28 + 1;
          v35 = v29 + 24 * v28 > (unint64_t)&v44;
          if (v29 <= (unint64_t)&v44 && v35)
          {
            v36 = (char *)&v44 - v29;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, v41, v34, 24);
            v29 = *v13;
            v30 = (__n128 *)&v36[*v13];
            goto LABEL_12;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, v41, v34, 24);
          v29 = *v13;
        }
        v30 = (__n128 *)&v44;
LABEL_12:
        v31 = (__n128 *)(v29 + 24 * *(unsigned int *)(a3 + 24));
        result = *v30;
        v31[1].n128_u64[0] = v30[1].n128_u64[0];
        *v31 = result;
        ++*(_DWORD *)(a3 + 24);
        ++v19;
      }
      while (v19 != a2);
    }
  }
  return result;
}

void std::vector<llvm::APInt>::reserve(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v4 = *(char **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = v4;
      v10 = &v6[v4 - v2];
      v11 = v4;
      do
      {
        *((_DWORD *)v10 - 2) = *((_DWORD *)v9 - 2);
        v12 = *((_QWORD *)v11 - 2);
        v11 -= 16;
        *((_QWORD *)v10 - 2) = v12;
        v10 -= 16;
        *((_DWORD *)v9 - 2) = 0;
        v9 = v11;
      }
      while (v11 != v2);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v4 != v2)
      {
        if (*((_DWORD *)v4 - 2) >= 0x41u)
        {
          v13 = *((_QWORD *)v4 - 2);
          if (v13)
            MEMORY[0x20BD002D4](v13, 0x1000C8000313F17);
        }
        v4 -= 16;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

char *std::vector<llvm::APInt>::__push_back_slow_path<llvm::APInt const&>(llvm::APInt **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  llvm::APInt *v12;
  unsigned int v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = (char *)*a1;
  v3 = (char *)a1[1];
  v4 = (v3 - (char *)*a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    abort();
  v7 = a1[2] - (llvm::APInt *)v2;
  if (v7 >> 3 > v5)
    v5 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v5 = 0xFFFFFFFFFFFFFFFLL;
  if (v5 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v9 = 16 * v5;
  v10 = (char *)operator new(16 * v5);
  v11 = v10;
  v12 = (llvm::APInt *)&v10[16 * v4];
  v13 = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v12 + 2) = v13;
  if (v13 > 0x40)
  {
    llvm::APInt::initSlowCase(v12, (const void **)a2);
    v2 = (char *)*a1;
    v3 = (char *)a1[1];
    v14 = &v11[v9];
    v15 = (char *)v12 + 16;
    if (v3 != (char *)*a1)
      goto LABEL_9;
LABEL_18:
    *a1 = v12;
    a1[1] = (llvm::APInt *)v15;
    a1[2] = (llvm::APInt *)v14;
    goto LABEL_19;
  }
  *(_QWORD *)v12 = *(_QWORD *)a2;
  v14 = &v10[v9];
  v15 = (char *)v12 + 16;
  if (v3 == v2)
    goto LABEL_18;
LABEL_9:
  v16 = v3;
  v17 = v3;
  do
  {
    *((_DWORD *)v12 - 2) = *((_DWORD *)v16 - 2);
    v18 = *((_QWORD *)v17 - 2);
    v17 -= 16;
    *((_QWORD *)v12 - 2) = v18;
    v12 = (llvm::APInt *)((char *)v12 - 16);
    *((_DWORD *)v16 - 2) = 0;
    v16 = v17;
  }
  while (v17 != v2);
  *a1 = v12;
  a1[1] = (llvm::APInt *)v15;
  a1[2] = (llvm::APInt *)v14;
  while (v3 != v2)
  {
    if (*((_DWORD *)v3 - 2) >= 0x41u)
    {
      v19 = *((_QWORD *)v3 - 2);
      if (v19)
        MEMORY[0x20BD002D4](v19, 0x1000C8000313F17);
    }
    v3 -= 16;
  }
LABEL_19:
  if (v2)
    operator delete(v2);
  return v15;
}

void std::vector<llvm::APFloat>::reserve(uint64_t a1, unint64_t a2)
{
  void **v2;
  void **v4;
  uint64_t v5;
  llvm::APFloatBase *v6;
  char *v7;
  char *v8;
  void *v9;
  void **v10;
  char *v11;
  void **v12;
  char *v13;
  void **v14;
  void **v15;
  llvm::detail::IEEEFloat *v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  void **v20;

  v2 = *(void ***)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    if (a2 >> 59)
      abort();
    v4 = *(void ***)(a1 + 8);
    v5 = 32 * a2;
    v6 = (llvm::APFloatBase *)operator new(32 * a2);
    v7 = (char *)v6 + v5;
    v8 = (char *)v6 + (char *)v4 - (char *)v2;
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_14:
        operator delete(v2);
    }
    else
    {
      v9 = llvm::APFloatBase::PPCDoubleDouble(v6);
      v10 = v4 - 3;
      v11 = v8;
      do
      {
        while (1)
        {
          v13 = v11 - 24;
          if (v9 != *v10)
            break;
          llvm::detail::DoubleAPFloat::DoubleAPFloat(v13, v10);
          v11 -= 32;
          v12 = v10 - 1;
          v10 -= 4;
          if (v12 == v2)
            goto LABEL_8;
        }
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v13, (uint64_t)v10);
        v11 -= 32;
        v14 = v10 - 1;
        v10 -= 4;
      }
      while (v14 != v2);
LABEL_8:
      v2 = *(void ***)a1;
      v15 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v15 != v2)
      {
        v16 = (llvm::detail::IEEEFloat *)(v15 - 3);
        do
        {
          while (v9 != *(void **)v16)
          {
            llvm::detail::IEEEFloat::~IEEEFloat(v16);
            v18 = (void **)(v17 - 8);
            v16 = (llvm::detail::IEEEFloat *)(v17 - 32);
            if (v18 == v2)
              goto LABEL_13;
          }
          llvm::detail::DoubleAPFloat::~DoubleAPFloat(v16);
          v20 = (void **)(v19 - 8);
          v16 = (llvm::detail::IEEEFloat *)(v19 - 32);
        }
        while (v20 != v2);
      }
LABEL_13:
      if (v2)
        goto LABEL_14;
    }
  }
}

char *std::vector<llvm::APFloat>::__push_back_slow_path<llvm::APFloat const&>(char **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  char **v5;
  uint64_t v6;
  unint64_t v7;
  char **v8;
  char *v9;
  const llvm::detail::IEEEFloat *v10;
  void *v11;
  void *v12;
  char *v13;
  char *v14;
  char *v15;
  void **v16;
  void **v17;
  void **v18;
  char *v19;
  void **v20;
  char *v21;
  llvm::detail::IEEEFloat *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;

  v2 = (a1[1] - *a1) >> 5;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59)
    abort();
  v5 = a1;
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v3)
    v3 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 59)
      std::__throw_bad_array_new_length[abi:nn180100]();
    a1 = (char **)operator new(32 * v7);
    v8 = a1;
  }
  else
  {
    v8 = 0;
  }
  v9 = (char *)&v8[4 * v2];
  v11 = *(void **)(a2 + 8);
  v10 = (const llvm::detail::IEEEFloat *)(a2 + 8);
  v12 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v12 != v11)
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)(v9 + 8), v10);
    v13 = (char *)&v8[4 * v7];
    v14 = v9 + 32;
    v16 = (void **)*v5;
    v15 = v5[1];
    if (v15 != *v5)
      goto LABEL_13;
LABEL_24:
    *v5 = v9;
    v5[1] = v14;
    v5[2] = v13;
    goto LABEL_25;
  }
  llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)v9 + 1, v10);
  v13 = (char *)&v8[4 * v7];
  v14 = v9 + 32;
  v16 = (void **)*v5;
  v15 = v5[1];
  if (v15 == *v5)
    goto LABEL_24;
LABEL_13:
  v17 = (void **)(v15 - 24);
  do
  {
    while (1)
    {
      v19 = v9 - 24;
      if (v12 != *v17)
        break;
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v19, v17);
      v9 -= 32;
      v18 = v17 - 1;
      v17 -= 4;
      if (v18 == v16)
        goto LABEL_17;
    }
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v19, (uint64_t)v17);
    v9 -= 32;
    v20 = v17 - 1;
    v17 -= 4;
  }
  while (v20 != v16);
LABEL_17:
  v15 = *v5;
  v21 = v5[1];
  *v5 = v9;
  v5[1] = v14;
  v5[2] = v13;
  if (v21 != v15)
  {
    v22 = (llvm::detail::IEEEFloat *)(v21 - 24);
    do
    {
      while (v12 != *(void **)v22)
      {
        llvm::detail::IEEEFloat::~IEEEFloat(v22);
        v24 = (char *)(v23 - 8);
        v22 = (llvm::detail::IEEEFloat *)(v23 - 32);
        if (v24 == v15)
          goto LABEL_25;
      }
      llvm::detail::DoubleAPFloat::~DoubleAPFloat(v22);
      v26 = (char *)(v25 - 8);
      v22 = (llvm::detail::IEEEFloat *)(v25 - 32);
    }
    while (v26 != v15);
  }
LABEL_25:
  if (v15)
    operator delete(v15);
  return v14;
}

void mlir::detail::Parser::parseStridedLayoutAttr(void)::$_1::operator() const(void)::{lambda(void)#1}::operator()(uint64_t a1, const char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  __int16 v11;
  _QWORD v12[3];
  void *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  void *__p;
  _QWORD *v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v10 = "expected a 64-bit signed integer or '?'";
  v11 = 259;
  mlir::detail::Parser::emitError(a1, a2, (uint64_t)&v10, v12);
  if (v12[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v12);
  if (v19)
  {
    v2 = __p;
    if (__p)
    {
      v3 = v18;
      v4 = __p;
      if (v18 != __p)
      {
        do
          v3 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v3 - 1);
        while (v3 != v2);
        v4 = __p;
      }
      v18 = v2;
      operator delete(v4);
    }
    v5 = v15;
    if (v15)
    {
      v6 = v16;
      v7 = v15;
      if (v16 != v15)
      {
        do
        {
          v9 = *--v6;
          v8 = v9;
          *v6 = 0;
          if (v9)
            MEMORY[0x20BD002D4](v8, 0x1000C8077774924);
        }
        while (v6 != v5);
        v7 = v15;
      }
      v16 = v5;
      operator delete(v7);
    }
    if (v13 != &v14)
      free(v13);
  }
}

BOOL llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseAttribute(mlir::Type)::$_0>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)*a1;
  v3 = mlir::detail::Parser::parseAttribute(a1[1], 0);
  v4 = *((unsigned int *)v2 + 2);
  if (v4 >= *((_DWORD *)v2 + 3))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2, v2 + 2, v4 + 1, 8);
    LODWORD(v4) = *((_DWORD *)v2 + 2);
  }
  *(_QWORD *)(*v2 + 8 * v4) = v3;
  ++*((_DWORD *)v2 + 2);
  return *(_QWORD *)(*(_QWORD *)*a1 + 8 * *(unsigned int *)(*a1 + 8) - 8) != 0;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseAttributeDict(mlir::NamedAttrList &)::$_0>(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  mlir::Token *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t AttrData;
  std::string::size_type v16;
  std::string *p_s2;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  mlir::MLIRContext *v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t UnitAttr;
  _QWORD *v65;
  int v66;
  BOOL v67;
  unsigned int v68;
  unint64_t v69;
  int64_t v70;
  const char *v71;
  __int16 v72;
  uint64_t StringAttr;
  char v74;
  std::string __s2;
  __int16 v76;
  __int128 v77;
  uint64_t v78;
  void *v79;
  unsigned int v80;
  unsigned int v81;
  _BYTE v82[96];
  void *v83;
  _QWORD *v84;
  void *__p;
  _QWORD *v86;
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  LOBYTE(StringAttr) = 0;
  v74 = 0;
  v3 = *(_QWORD **)(v2 + 8);
  v4 = (mlir::Token *)(v3 + 7);
  v5 = *((_DWORD *)v3 + 14);
  if (v5 != 3 && v5 != 12)
  {
    if (v5 == 11)
    {
      mlir::Token::getStringValue(v4, &__s2);
      LOWORD(v80) = 260;
      *(_QWORD *)&v77 = &__s2;
      v74 = 1;
      StringAttr = mlir::Builder::getStringAttr((mlir::StringAttr **)v2, (mlir::MLIRContext *)&v77);
      if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__s2.__r_.__value_.__l.__data_);
        mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&StringAttr);
        if (!v60)
          goto LABEL_34;
      }
      else
      {
        mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&StringAttr);
        if (!v7)
          goto LABEL_34;
      }
      goto LABEL_8;
    }
    if (!mlir::Token::isKeyword(v4))
    {
      __s2.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected attribute name";
      v76 = 259;
      mlir::detail::Parser::emitWrongTokenError(v2, (uint64_t)&__s2, &v77);
      v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
      if ((_QWORD)v77)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
      if (v87)
      {
        v39 = __p;
        if (__p)
        {
          v40 = v86;
          v41 = __p;
          if (v86 != __p)
          {
            do
              v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
            while (v40 != v39);
            v41 = __p;
          }
          v86 = v39;
          operator delete(v41);
        }
        v42 = v83;
        if (v83)
        {
          v43 = v84;
          v44 = v83;
          if (v84 != v83)
          {
            do
            {
              v46 = *--v43;
              v45 = v46;
              *v43 = 0;
              if (v46)
                MEMORY[0x20BD002D4](v45, 0x1000C8077774924);
            }
            while (v43 != v42);
            v44 = v83;
          }
          v84 = v42;
          operator delete(v44);
        }
        if (v79 != v82)
          free(v79);
      }
      return v21;
    }
    v3 = *(_QWORD **)(v2 + 8);
  }
  v31 = v3[8];
  v30 = v3[9];
  LOWORD(v80) = 261;
  *(_QWORD *)&v77 = v31;
  *((_QWORD *)&v77 + 1) = v30;
  v74 = 1;
  StringAttr = mlir::Builder::getStringAttr((mlir::StringAttr **)v2, (mlir::MLIRContext *)&v77);
  mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&StringAttr);
  if (!v38)
  {
LABEL_34:
    __s2.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected valid attribute name";
    v76 = 259;
    mlir::detail::Parser::emitError(v2, (uint64_t)&__s2, &v77);
    v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
    if ((_QWORD)v77)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
    if (v87)
    {
      v32 = __p;
      if (__p)
      {
        v33 = v86;
        v34 = __p;
        if (v86 != __p)
        {
          do
            v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
          while (v33 != v32);
          v34 = __p;
        }
        v86 = v32;
        operator delete(v34);
      }
      v25 = v83;
      if (!v83)
        goto LABEL_52;
      v35 = v84;
      v27 = v83;
      if (v84 == v83)
      {
LABEL_51:
        v84 = v25;
        operator delete(v27);
LABEL_52:
        if (v79 != v82)
          free(v79);
        return v21;
      }
      do
      {
        v37 = *--v35;
        v36 = v37;
        *v35 = 0;
        if (v37)
          MEMORY[0x20BD002D4](v36, 0x1000C8077774924);
      }
      while (v35 != v25);
LABEL_50:
      v27 = v83;
      goto LABEL_51;
    }
    return v21;
  }
LABEL_8:
  v8 = a1[1];
  v9 = v8 + 8;
  if ((*(_BYTE *)v8 & 1) != 0)
  {
    v10 = 4;
  }
  else
  {
    v10 = *(_DWORD *)(v8 + 16);
    if (!v10)
    {
      v47 = 0;
LABEL_69:
      llvm::DenseMapBase<llvm::SmallDenseMap<mlir::StringAttr,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::StringAttr,void>,llvm::detail::DenseSetPair<mlir::StringAttr>>,mlir::StringAttr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::StringAttr,void>,llvm::detail::DenseSetPair<mlir::StringAttr>>::InsertIntoBucket<mlir::StringAttr const&,llvm::detail::DenseSetEmpty&>(v8, v47, &StringAttr);
      mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v2 + 8) + 8), (uint64_t)&v77);
      v48 = *(_QWORD *)(v2 + 8);
      *(_OWORD *)(v48 + 56) = v77;
      *(_QWORD *)(v48 + 72) = v78;
      *(_QWORD *)&v77 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&StringAttr);
      *((_QWORD *)&v77 + 1) = v49;
      __s2.__r_.__value_.__s.__data_[0] = 46;
      v50 = llvm::StringRef::find((uint64_t *)&v77, (char *)&__s2, 1uLL, 0);
      if (v50 != -1 && *((_QWORD *)&v77 + 1) > v50 + 1)
      {
        if (v50 >= *((_QWORD *)&v77 + 1))
          v52 = *((_QWORD *)&v77 + 1);
        else
          v52 = v50;
        mlir::MLIRContext::getOrLoadDialect(***(_QWORD ***)(v2 + 8), (void *)v77, v52);
      }
      v53 = *(_QWORD *)(v2 + 8);
      if (*(_DWORD *)(v53 + 56) == 18)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v53 + 8), (uint64_t)&v77);
        v54 = *(_QWORD *)(v2 + 8);
        *(_OWORD *)(v54 + 56) = v77;
        *(_QWORD *)(v54 + 72) = v78;
        v55 = mlir::detail::Parser::parseAttribute(v2, 0);
        if (!v55)
          return 0;
        v56 = a1[2];
        ZinMirCacheTensors::ZinMirCacheTensors(&v77, StringAttr, v55);
        v58 = *((_QWORD *)&v77 + 1);
        v57 = v77;
        v59 = v56;
      }
      else
      {
        v61 = a1[2];
        v62 = StringAttr;
        UnitAttr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)v2, v51);
        ZinMirCacheTensors::ZinMirCacheTensors(&v77, v62, UnitAttr);
        v58 = *((_QWORD *)&v77 + 1);
        v57 = v77;
        v59 = v61;
      }
      mlir::NamedAttrList::push_back(v59, v57, v58);
      return 1;
    }
    v9 = *(_QWORD *)(v8 + 8);
  }
  v11 = v10 - 1;
  v12 = ((StringAttr >> 4) ^ (StringAttr >> 9)) & v11;
  v13 = (_QWORD *)(v9 + 8 * v12);
  v14 = *v13;
  if (StringAttr != *v13)
  {
    v65 = 0;
    v66 = 1;
    while (v14 != -4096)
    {
      if (v65)
        v67 = 0;
      else
        v67 = v14 == -8192;
      if (v67)
        v65 = v13;
      v68 = v12 + v66++;
      v12 = v68 & v11;
      v13 = (_QWORD *)(v9 + 8 * v12);
      v14 = *v13;
      if (StringAttr == *v13)
        goto LABEL_13;
    }
    if (v65)
      v47 = v65;
    else
      v47 = v13;
    goto LABEL_69;
  }
LABEL_13:
  v71 = "duplicate key '";
  v72 = 259;
  mlir::detail::Parser::emitError(v2, (uint64_t)&v71, &v77);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&StringAttr);
  if ((_QWORD)v77)
  {
    v76 = 261;
    __s2.__r_.__value_.__r.__words[0] = AttrData;
    __s2.__r_.__value_.__l.__size_ = v16;
    mlir::Diagnostic::operator<<((uint64_t)&v77 + 8, (const void ***)&__s2);
    if ((_QWORD)v77)
    {
      LODWORD(__s2.__r_.__value_.__l.__data_) = 3;
      __s2.__r_.__value_.__l.__size_ = (std::string::size_type)"' in dictionary attribute";
      __s2.__r_.__value_.__r.__words[2] = 25;
      p_s2 = &__s2;
      v18 = (char *)v79;
      if (v80 >= v81)
      {
        v69 = v80 + 1;
        if (v79 <= &__s2 && (char *)v79 + 24 * v80 > (char *)&__s2)
        {
          v70 = (char *)&__s2 - (_BYTE *)v79;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v69, 24);
          v18 = (char *)v79;
          p_s2 = (std::string *)((char *)v79 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v69, 24);
          p_s2 = &__s2;
          v18 = (char *)v79;
        }
      }
      v19 = &v18[24 * v80];
      v20 = *(_OWORD *)&p_s2->__r_.__value_.__l.__data_;
      *((_QWORD *)v19 + 2) = *((_QWORD *)&p_s2->__r_.__value_.__l + 2);
      *(_OWORD *)v19 = v20;
      ++v80;
    }
  }
  v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
  if ((_QWORD)v77)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
  if (v87)
  {
    v22 = __p;
    if (__p)
    {
      v23 = v86;
      v24 = __p;
      if (v86 != __p)
      {
        do
          v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        v24 = __p;
      }
      v86 = v22;
      operator delete(v24);
    }
    v25 = v83;
    if (!v83)
      goto LABEL_52;
    v26 = v84;
    v27 = v83;
    if (v84 == v83)
      goto LABEL_51;
    do
    {
      v29 = *--v26;
      v28 = v29;
      *v26 = 0;
      if (v29)
        MEMORY[0x20BD002D4](v28, 0x1000C8077774924);
    }
    while (v26 != v25);
    goto LABEL_50;
  }
  return v21;
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<mlir::StringAttr,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::StringAttr,void>,llvm::detail::DenseSetPair<mlir::StringAttr>>,mlir::StringAttr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::StringAttr,void>,llvm::detail::DenseSetPair<mlir::StringAttr>>::InsertIntoBucket<mlir::StringAttr const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 4;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
  {
    v9 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<mlir::StringAttr,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::StringAttr,void>,llvm::detail::DenseSetPair<mlir::StringAttr>>::grow((unsigned int *)a1, v8);
  v11 = a1 + 8;
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v12 = 4;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 16);
    if (!v12)
    {
      v9 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    v11 = *(_QWORD *)(a1 + 8);
  }
  v9 = *(_DWORD *)a1 & 1;
  v13 = v12 - 1;
  v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v12 - 1);
  a2 = (_QWORD *)(v11 + 8 * v14);
  v15 = *a2;
  if (*a3 != *a2)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = a2;
      v19 = v14 + v17++;
      v14 = v19 & v13;
      a2 = (_QWORD *)(v11 + 8 * (v19 & v13));
      v15 = *a2;
      if (*a3 == *a2)
        goto LABEL_7;
    }
    if (v16)
      a2 = v16;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a2 != -4096)
    --*(_DWORD *)(a1 + 4);
  *a2 = *a3;
  return a2;
}

unsigned int *llvm::SmallDenseMap<mlir::StringAttr,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::StringAttr,void>,llvm::detail::DenseSetPair<mlir::StringAttr>>::grow(unsigned int *result, unsigned int a2)
{
  unsigned int *v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  llvm *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int64x2_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int64x2_t *v20;
  int64x2_t v21;
  uint64_t v22;
  uint64_t v23;
  int64x2_t *buffer;
  int v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  int64x2_t *v30;
  int64x2_t v31;
  uint64_t v32;
  llvm *v33;
  unsigned int *v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  int v42;
  BOOL v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t *v47;
  unsigned int *v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  int v56;
  BOOL v57;
  unsigned int v58;
  uint64_t v59;
  _QWORD v60[4];

  v2 = result;
  v60[3] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_BYTE *)result & 1) == 0)
  {
    v6 = (llvm *)*((_QWORD *)result + 1);
    v7 = result[4];
    if (a2 > 4)
    {
      v23 = a2;
      buffer = (int64x2_t *)llvm::allocate_buffer(8 * a2, (std::align_val_t)8uLL);
      *((_QWORD *)v2 + 1) = buffer;
      *((_QWORD *)v2 + 2) = v23;
      v25 = *v2;
      v8 = (llvm *)((char *)v6 + 8 * v7);
      *(_QWORD *)v2 = *v2 & 1;
      if ((v25 & 1) == 0)
      {
        v26 = &buffer->i8[8 * v23];
        v27 = 8 * v23 - 8;
        if (v27 < 0x18)
        {
          v29 = (char *)buffer;
          goto LABEL_28;
        }
LABEL_22:
        v28 = (v27 >> 3) + 1;
        v29 = &buffer->i8[8 * (v28 & 0x3FFFFFFFFFFFFFFCLL)];
        v30 = buffer + 1;
        v31 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30[-1] = v31;
          *v30 = v31;
          v30 += 2;
          v32 -= 4;
        }
        while (v32);
        if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_29:
          if ((_DWORD)v7)
          {
            v33 = v6;
            do
            {
              v40 = *(_QWORD *)v33;
              if ((*(_QWORD *)v33 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                if ((*(_BYTE *)v2 & 1) != 0)
                {
                  v35 = 4;
                  v34 = v2 + 2;
                }
                else
                {
                  v34 = (unsigned int *)*((_QWORD *)v2 + 1);
                  v35 = v2[4];
                }
                v36 = v35 - 1;
                v37 = (v35 - 1) & ((v40 >> 4) ^ (v40 >> 9));
                v38 = &v34[2 * v37];
                v39 = *(_QWORD *)v38;
                if (v40 != *(_QWORD *)v38)
                {
                  v41 = 0;
                  v42 = 1;
                  while (v39 != -4096)
                  {
                    if (v41)
                      v43 = 0;
                    else
                      v43 = v39 == -8192;
                    if (v43)
                      v41 = v38;
                    v44 = v37 + v42++;
                    v37 = v44 & v36;
                    v38 = &v34[2 * (v44 & v36)];
                    v39 = *(_QWORD *)v38;
                    if (v40 == *(_QWORD *)v38)
                      goto LABEL_33;
                  }
                  if (v41)
                    v38 = v41;
                }
LABEL_33:
                *(_QWORD *)v38 = v40;
                *v2 += 2;
              }
              v33 = (llvm *)((char *)v33 + 8);
            }
            while (v33 != v8);
          }
          llvm::deallocate_buffer(v6, (void *)(8 * v7));
        }
        do
        {
LABEL_28:
          *(_QWORD *)v29 = -4096;
          v29 += 8;
        }
        while (v29 != v26);
        goto LABEL_29;
      }
    }
    else
    {
      v8 = (llvm *)((char *)v6 + 8 * v7);
      *(_QWORD *)result = 1;
    }
    v26 = (char *)(v2 + 10);
    buffer = (int64x2_t *)(v2 + 2);
    v27 = 24;
    goto LABEL_22;
  }
  v9 = &v59;
  if ((*((_QWORD *)result + 1) | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v10 = *((_QWORD *)result + 2);
    if ((v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_10;
  }
  else
  {
    v59 = *((_QWORD *)result + 1);
    v9 = v60;
    v10 = *((_QWORD *)result + 2);
    if ((v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_10:
      v11 = *((_QWORD *)result + 3);
      if ((v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
        goto LABEL_11;
      goto LABEL_53;
    }
  }
  *v9++ = v10;
  v11 = *((_QWORD *)result + 3);
  if ((v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_11:
    v12 = *((_QWORD *)result + 4);
    if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_12;
    goto LABEL_54;
  }
LABEL_53:
  *v9++ = v11;
  v12 = *((_QWORD *)result + 4);
  if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_12:
    v13 = *result;
    if (a2 < 5)
      goto LABEL_13;
    goto LABEL_55;
  }
LABEL_54:
  *v9++ = v12;
  v13 = *result;
  if (a2 < 5)
  {
LABEL_13:
    *(_QWORD *)result = v13 & 1;
    if ((v13 & 1) == 0)
      goto LABEL_14;
LABEL_56:
    v16 = (uint64_t *)(v2 + 10);
    v15 = (int64x2_t *)(v2 + 2);
    v17 = 24;
    goto LABEL_16;
  }
LABEL_55:
  *result = v13 & 0xFFFFFFFE;
  v45 = a2;
  result = (unsigned int *)llvm::allocate_buffer(8 * a2, (std::align_val_t)8uLL);
  *((_QWORD *)v2 + 1) = result;
  *((_QWORD *)v2 + 2) = v45;
  v46 = *v2;
  *(_QWORD *)v2 = *v2 & 1;
  if ((v46 & 1) != 0)
    goto LABEL_56;
LABEL_14:
  v14 = v2[4];
  if (!(_DWORD)v14)
    goto LABEL_59;
  v15 = (int64x2_t *)*((_QWORD *)v2 + 1);
  v16 = &v15->i64[v14];
  v17 = (char *)v16 - (char *)v15 - 8;
  if (v17 < 0x18)
  {
    v19 = (uint64_t *)*((_QWORD *)v2 + 1);
    do
LABEL_58:
      *v19++ = -4096;
    while (v19 != v16);
    goto LABEL_59;
  }
LABEL_16:
  v18 = (v17 >> 3) + 1;
  v19 = &v15->i64[v18 & 0x3FFFFFFFFFFFFFFCLL];
  v20 = v15 + 1;
  v21 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v20[-1] = v21;
    *v20 = v21;
    v20 += 2;
    v22 -= 4;
  }
  while (v22);
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_58;
LABEL_59:
  if (&v59 != v9)
  {
    v47 = &v59;
    do
    {
      v54 = *v47;
      if ((*v47 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if ((*(_BYTE *)v2 & 1) != 0)
        {
          v49 = 4;
          v48 = v2 + 2;
        }
        else
        {
          v48 = (unsigned int *)*((_QWORD *)v2 + 1);
          v49 = v2[4];
        }
        v50 = v49 - 1;
        v51 = (v49 - 1) & ((v54 >> 4) ^ (v54 >> 9));
        v52 = &v48[2 * v51];
        v53 = *(_QWORD *)v52;
        if (v54 != *(_QWORD *)v52)
        {
          v55 = 0;
          v56 = 1;
          while (v53 != -4096)
          {
            if (v55)
              v57 = 0;
            else
              v57 = v53 == -8192;
            if (v57)
              v55 = v52;
            v58 = v51 + v56++;
            v51 = v58 & v50;
            v52 = &v48[2 * (v58 & v50)];
            v53 = *(_QWORD *)v52;
            if (v54 == *(_QWORD *)v52)
              goto LABEL_63;
          }
          if (v55)
            v52 = v55;
        }
LABEL_63:
        *(_QWORD *)v52 = v54;
        *v2 += 2;
      }
      ++v47;
    }
    while (v47 != v9);
  }
  return result;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseDenseArrayAttr(mlir::Type)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  _BOOL8 v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  std::vector<char>::size_type v37;
  std::vector<char>::const_iterator v38;
  const char *v39;
  _QWORD v41[4];
  __int16 v42;
  llvm *v43;
  unsigned int v44;
  unsigned __int8 v45;
  std::vector<char>::value_type __x[16];
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD *v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = a1[1];
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_DWORD *)(v3 + 56);
  if (v4 != 24)
  {
    v6 = *(_DWORD *)(v3 + 56);
    LOBYTE(v43) = 0;
    v45 = 0;
    if (v4 != 10)
      goto LABEL_3;
LABEL_8:
    v11 = *(_QWORD *)(v3 + 64);
    v12 = *(_QWORD *)(v3 + 72);
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)__x);
    v13 = *(_QWORD *)(v2 + 8);
    *(_OWORD *)(v13 + 56) = *(_OWORD *)__x;
    *(_QWORD *)(v13 + 72) = v47;
    buildAttributeAPInt((uint64_t)__x, *(_QWORD *)v1, v4 == 24, v11, v12);
    v14 = v47;
    if (v45 == v47)
    {
      if (v45)
      {
        if (v44 >= 0x41 && v43)
          MEMORY[0x20BD002D4](v43, 0x1000C8000313F17);
        v15 = 0;
        v43 = *(llvm **)__x;
        v44 = *(_DWORD *)&__x[8];
        *(_DWORD *)&__x[8] = 0;
      }
      else
      {
        v15 = 1;
      }
    }
    else if (v45)
    {
      if (v44 >= 0x41 && v43)
        MEMORY[0x20BD002D4](v43, 0x1000C8000313F17);
      v45 = 0;
      v15 = 1;
    }
    else
    {
      v15 = 0;
      v44 = *(_DWORD *)&__x[8];
      v43 = *(llvm **)__x;
      *(_DWORD *)&__x[8] = 0;
      v45 = 1;
    }
    if (v14 && *(_DWORD *)&__x[8] >= 0x41u && *(_QWORD *)__x)
      MEMORY[0x20BD002D4](*(_QWORD *)__x, 0x1000C8000313F17);
    if (!v15)
    {
      v9 = v44;
      if (!v44)
      {
LABEL_74:
        ++*(_QWORD *)(v1 + 32);
        v16 = 1;
        goto LABEL_75;
      }
LABEL_73:
      v37 = v9 >> 3;
      v38.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)(v1 + 16);
      v39 = &v38.__i_[-*(_QWORD *)(v1 + 8)];
      __x[0] = 0;
      std::vector<char>::insert((std::vector<char> *)(v1 + 8), v38, v37, __x);
      llvm::StoreIntToMemory(&v43, (const llvm::APInt *)&v39[*(_QWORD *)(v1 + 8)], v37);
      goto LABEL_74;
    }
    v41[0] = "integer constant out of range";
    v42 = 259;
    mlir::detail::Parser::emitError(v2, (uint64_t)v41, __x);
    v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__x);
    if (*(_QWORD *)__x)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__x);
    if (v54)
    {
      v31 = __p;
      if (__p)
      {
        v32 = v53;
        v33 = __p;
        if (v53 != __p)
        {
          do
            v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
          while (v32 != v31);
          v33 = __p;
        }
        v53 = v31;
        operator delete(v33);
      }
      v20 = v50;
      if (!v50)
        goto LABEL_70;
      v34 = v51;
      v22 = v50;
      if (v51 == v50)
        goto LABEL_69;
      do
      {
        v36 = *--v34;
        v35 = v36;
        *v34 = 0;
        if (v36)
          MEMORY[0x20BD002D4](v35, 0x1000C8077774924);
      }
      while (v34 != v20);
      goto LABEL_68;
    }
    goto LABEL_75;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)__x);
  v5 = *(_QWORD *)(v2 + 8);
  *(_OWORD *)(v5 + 56) = *(_OWORD *)__x;
  *(_QWORD *)(v5 + 72) = v47;
  v3 = *(_QWORD *)(v2 + 8);
  v6 = *(_DWORD *)(v3 + 56);
  LOBYTE(v43) = 0;
  v45 = 0;
  if (v6 == 10)
    goto LABEL_8;
LABEL_3:
  if (v6 == 74 || v6 == 54)
  {
    if (mlir::Type::isInteger((mlir::Type *)v1, 1))
    {
      v7 = *(_DWORD *)(*(_QWORD *)(v2 + 8) + 56);
      mlir::Type::isUnsignedInteger((mlir::Type *)v1);
      v8 = v7 == 74;
      v9 = 8;
      v44 = 8;
      v43 = (llvm *)v8;
      v45 = 1;
      mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v2 + 8) + 8), (uint64_t)__x);
      v10 = *(_QWORD *)(v2 + 8);
      *(_OWORD *)(v10 + 56) = *(_OWORD *)__x;
      *(_QWORD *)(v10 + 72) = v47;
      goto LABEL_73;
    }
    v41[0] = "expected i1 type for 'true' or 'false' values";
    v42 = 259;
    mlir::detail::Parser::emitError(v2, (uint64_t)v41, __x);
    v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__x);
    if (*(_QWORD *)__x)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__x);
    if (v54)
    {
      v17 = __p;
      if (__p)
      {
        v18 = v53;
        v19 = __p;
        if (v53 != __p)
        {
          do
            v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          v19 = __p;
        }
        v53 = v17;
        operator delete(v19);
      }
      v20 = v50;
      if (!v50)
        goto LABEL_70;
      v21 = v51;
      v22 = v50;
      if (v51 == v50)
      {
LABEL_69:
        v51 = v20;
        operator delete(v22);
LABEL_70:
        if (v48 != &v49)
          free(v48);
        goto LABEL_75;
      }
      do
      {
        v24 = *--v21;
        v23 = v24;
        *v21 = 0;
        if (v24)
          MEMORY[0x20BD002D4](v23, 0x1000C8077774924);
      }
      while (v21 != v20);
LABEL_68:
      v22 = v50;
      goto LABEL_69;
    }
  }
  else
  {
    v41[0] = "expected integer literal";
    v42 = 259;
    mlir::detail::Parser::emitError(v2, (uint64_t)v41, __x);
    v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__x);
    if (*(_QWORD *)__x)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__x);
    if (v54)
    {
      v25 = __p;
      if (__p)
      {
        v26 = v53;
        v27 = __p;
        if (v53 != __p)
        {
          do
            v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
          while (v26 != v25);
          v27 = __p;
        }
        v53 = v25;
        operator delete(v27);
      }
      v20 = v50;
      if (!v50)
        goto LABEL_70;
      v28 = v51;
      v22 = v50;
      if (v51 == v50)
        goto LABEL_69;
      do
      {
        v30 = *--v28;
        v29 = v30;
        *v28 = 0;
        if (v30)
          MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
      }
      while (v28 != v20);
      goto LABEL_68;
    }
  }
LABEL_75:
  if (v45 && v44 >= 0x41 && v43)
    MEMORY[0x20BD002D4](v43, 0x1000C8000313F17);
  return v16;
}

std::vector<char>::iterator std::vector<char>::insert(std::vector<char> *this, std::vector<char>::const_iterator __position, std::vector<char>::size_type __n, std::vector<char>::const_reference __x)
{
  char *v5;
  char *value;
  const char *end;
  const char *begin;
  int64_t v11;
  const char *v12;
  unint64_t v13;
  size_t v14;
  void *v15;
  const char *v16;
  char *v17;
  char *v18;
  std::vector<char>::size_type v19;
  char *v20;
  std::vector<char>::size_type v21;
  std::vector<char>::size_type v22;
  std::vector<char>::pointer v23;
  unint64_t v24;
  std::vector<char>::size_type v25;
  int8x16_t v26;
  int8x16_t *v27;
  std::vector<char>::size_type v28;
  int8x8_t v29;
  char *v30;
  std::vector<char>::size_type v31;
  int8x16_t v32;
  int8x16_t *v33;
  unint64_t v34;
  int8x8_t v35;
  int8x8_t *v36;
  unint64_t v37;
  const char *v38;
  int64_t v39;
  std::__wrap_iter<const char *>::iterator_type v40;
  char *v41;
  std::__wrap_iter<const char *>::iterator_type v42;
  char *v43;
  unint64_t v44;
  __int128 v45;
  char v46;
  const char *v47;
  char *v48;
  size_t v49;
  std::vector<char>::pointer v50;
  const char *v51;
  const char *v52;
  char *v53;
  std::vector<char>::size_type v54;
  std::vector<char>::size_type v55;
  unint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  __int128 v60;
  char v61;
  std::vector<char>::size_type v62;
  char *i;
  std::vector<char>::size_type v64;
  unint64_t v66;
  int8x16_t v67;
  char *v68;
  unint64_t v69;
  int8x8_t v70;
  char *v71;
  unint64_t v72;

  if (!__n)
    return (std::vector<char>::iterator)__position.__i_;
  v5 = (char *)__x;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    v19 = end - __position.__i_;
    v20 = this->__end_;
    v21 = __n;
    v22 = __n - (end - __position.__i_);
    if (__n <= end - __position.__i_)
      goto LABEL_58;
    v20 = (char *)&__position.__i_[__n];
    v23 = this->__end_;
    if (v22 >= 8)
    {
      if (end >= __x + 1 || (v23 = this->__end_, v20 <= __x))
      {
        if (v22 < 0x20)
        {
          v24 = 0;
          goto LABEL_35;
        }
        v24 = v22 & 0xFFFFFFFFFFFFFFE0;
        v32 = vld1q_dup_s8(__x);
        v33 = (int8x16_t *)(end + 16);
        v34 = v22 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v33[-1] = v32;
          *v33 = v32;
          v33 += 2;
          v34 -= 32;
        }
        while (v34);
        if (v22 == v24)
          goto LABEL_56;
        if ((v22 & 0x18) != 0)
        {
LABEL_35:
          v23 = (std::vector<char>::pointer)&end[v22 & 0xFFFFFFFFFFFFFFF8];
          v35 = vld1_dup_s8(__x);
          v36 = (int8x8_t *)&end[v24];
          v37 = v24 - (v22 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *v36++ = v35;
            v37 += 8;
          }
          while (v37);
          if (v22 == (v22 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_56;
          goto LABEL_55;
        }
        v23 = (std::vector<char>::pointer)&end[v24];
      }
    }
    do
LABEL_55:
      *v23++ = *__x;
    while (v23 != v20);
LABEL_56:
    this->__end_ = v20;
    if (!v19)
      return (std::vector<char>::iterator)__position.__i_;
    v21 = end - __position.__i_;
LABEL_58:
    v51 = &__position.__i_[__n];
    v52 = &v20[-__n];
    v53 = v20;
    if (&v20[-__n] >= end)
      goto LABEL_69;
    if (__n <= v19)
      v54 = end - __position.__i_;
    else
      v54 = __n;
    v55 = &end[__n] - &__position.__i_[v54];
    if (v55 >= 0x20)
    {
      v56 = (unint64_t)&v20[__n - (unint64_t)&__position.__i_[v54]];
      v53 = v20;
      if (v56 >= 0x20)
      {
        v52 += v55 & 0xFFFFFFFFFFFFFFE0;
        v53 = &v20[v55 & 0xFFFFFFFFFFFFFFE0];
        v57 = (char *)&__position.__i_[v54 + 16];
        v58 = &v57[-v56];
        v59 = v55 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v60 = *(_OWORD *)v58;
          *((_OWORD *)v57 - 1) = *((_OWORD *)v58 - 1);
          *(_OWORD *)v57 = v60;
          v57 += 32;
          v58 += 32;
          v59 -= 32;
        }
        while (v59);
        if (v55 == (v55 & 0xFFFFFFFFFFFFFFE0))
        {
LABEL_69:
          this->__end_ = v53;
          if (v20 != v51)
            memmove((void *)&__position.__i_[__n], __position.__i_, v20 - v51);
          if (__position.__i_ <= v5)
          {
            if (this->__end_ <= v5)
              v62 = 0;
            else
              v62 = __n;
            v5 += v62;
          }
          if (v21 < 8 || __position.__i_ < v5 + 1 && v5 < &__position.__i_[v21])
          {
            i = (char *)__position.__i_;
            v64 = v21;
            goto LABEL_80;
          }
          if (v21 >= 0x20)
          {
            v66 = v21 & 0xFFFFFFFFFFFFFFE0;
            v67 = vld1q_dup_s8(v5);
            v68 = (char *)(__position.__i_ + 16);
            v69 = v21 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              *((int8x16_t *)v68 - 1) = v67;
              *(int8x16_t *)v68 = v67;
              v68 += 32;
              v69 -= 32;
            }
            while (v69);
            if (v21 == v66)
              return (std::vector<char>::iterator)__position.__i_;
            if ((v21 & 0x18) == 0)
            {
              v64 = v21 & 0x1F;
              i = (char *)&__position.__i_[v66];
              do
              {
LABEL_80:
                *i++ = *v5;
                --v64;
              }
              while (v64);
              return (std::vector<char>::iterator)__position.__i_;
            }
          }
          else
          {
            v66 = 0;
          }
          i = (char *)&__position.__i_[v21 & 0xFFFFFFFFFFFFFFF8];
          v64 = v21 & 7;
          v70 = vld1_dup_s8(v5);
          v71 = (char *)&__position.__i_[v66];
          v72 = v66 - (v21 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *(int8x8_t *)v71 = v70;
            v71 += 8;
            v72 += 8;
          }
          while (v72);
          if (v21 == (v21 & 0xFFFFFFFFFFFFFFF8))
            return (std::vector<char>::iterator)__position.__i_;
          goto LABEL_80;
        }
      }
    }
    else
    {
      v53 = v20;
    }
    do
    {
      v61 = *v52++;
      *v53++ = v61;
    }
    while (v52 != end);
    goto LABEL_69;
  }
  begin = this->__begin_;
  v11 = end - this->__begin_ + __n;
  if (v11 < 0)
    abort();
  v12 = (const char *)(__position.__i_ - begin);
  v13 = value - begin;
  if (2 * v13 > v11)
    v11 = 2 * v13;
  if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v14 = v11;
  if (v14)
  {
    v15 = operator new(v14);
    v16 = &v12[(_QWORD)v15];
    v17 = (char *)&v12[(_QWORD)v15 + __n];
    v18 = (char *)&v12[(_QWORD)v15];
    if (__n < 8)
      goto LABEL_40;
  }
  else
  {
    v15 = 0;
    v16 = (const char *)(__position.__i_ - begin);
    v17 = (char *)&v12[__n];
    v18 = (char *)(__position.__i_ - begin);
    if (__n < 8)
      goto LABEL_40;
  }
  if (v16 < v5 + 1)
  {
    v18 = (char *)v16;
    if (v17 > v5)
      goto LABEL_40;
  }
  if (__n < 0x20)
  {
    v25 = 0;
    goto LABEL_27;
  }
  v25 = __n & 0xFFFFFFFFFFFFFFE0;
  v26 = vld1q_dup_s8(v5);
  v27 = (int8x16_t *)((char *)v15 + (_QWORD)v12 + 16);
  v28 = __n & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v27[-1] = v26;
    *v27 = v26;
    v27 += 2;
    v28 -= 32;
  }
  while (v28);
  if (v25 != __n)
  {
    if ((__n & 0x18) == 0)
    {
      v18 = (char *)&v16[v25];
      goto LABEL_40;
    }
LABEL_27:
    v18 = (char *)&v16[__n & 0xFFFFFFFFFFFFFFF8];
    v29 = vld1_dup_s8(v5);
    v30 = (char *)v15 + &__position.__i_[v25] - begin;
    v31 = v25 - (__n & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *(int8x8_t *)v30 = v29;
      v30 += 8;
      v31 += 8;
    }
    while (v31);
    if ((__n & 0xFFFFFFFFFFFFFFF8) == __n)
      goto LABEL_41;
    do
LABEL_40:
      *v18++ = *v5;
    while (v18 != v17);
  }
LABEL_41:
  v38 = this->__begin_;
  if (this->__begin_ != __position.__i_)
  {
    v39 = __position.__i_ - v38;
    v40 = __position.__i_;
    v41 = (char *)v16;
    if ((std::__wrap_iter<const char *>::iterator_type)(__position.__i_ - v38) < (std::__wrap_iter<const char *>::iterator_type)0x20)
      goto LABEL_98;
    v40 = __position.__i_;
    v41 = (char *)v16;
    if ((unint64_t)(begin - (_BYTE *)v15) < 0x20)
      goto LABEL_98;
    v40 = &__position.__i_[-(v39 & 0xFFFFFFFFFFFFFFE0)];
    v41 = (char *)&v16[-(v39 & 0xFFFFFFFFFFFFFFE0)];
    v42 = __position.__i_ - 16;
    v43 = (char *)v15 + __position.__i_ - 16 - begin;
    v44 = v39 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v45 = *(_OWORD *)v42;
      *((_OWORD *)v43 - 1) = *((_OWORD *)v42 - 1);
      *(_OWORD *)v43 = v45;
      v43 -= 32;
      v42 -= 32;
      v44 -= 32;
    }
    while (v44);
    if (v39 != (v39 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_98:
      do
      {
        v46 = *--v40;
        *--v41 = v46;
      }
      while (v40 != v38);
    }
    v47 = this->__end_;
    v48 = (char *)v15 + v14;
    v49 = v47 - __position.__i_;
    if (v47 == __position.__i_)
      goto LABEL_50;
    goto LABEL_49;
  }
  v41 = (char *)v16;
  v48 = (char *)v15 + v14;
  v49 = end - __position.__i_;
  if (end != __position.__i_)
LABEL_49:
    memmove(v17, __position.__i_, v49);
LABEL_50:
  v50 = this->__begin_;
  this->__begin_ = v41;
  this->__end_ = &v17[v49];
  this->__end_cap_.__value_ = v48;
  if (v50)
    operator delete(v50);
  return (std::vector<char>::iterator)v16;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseDenseArrayAttr(mlir::Type)::$_1>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  llvm::APFloatBase *v7;
  unsigned int Width;
  double v9;
  void *v10;
  uint64_t v11;
  char v12;
  double v13;
  llvm::APFloatBase *v14;
  void *v15;
  llvm::APFloatBase *v16;
  llvm::APFloatBase *v17;
  void *FloatSemantics;
  unint64_t v19;
  std::vector<char>::size_type v20;
  std::vector<char>::const_iterator v21;
  uint64_t v22;
  std::vector<char> *v23;
  const char *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v37;
  std::vector<char>::value_type v38[32];
  __int16 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  _QWORD *v48;
  void *__p;
  _QWORD *v50;
  char v51;
  _BYTE v52[8];
  _QWORD v53[3];
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = (uint64_t)a1[1];
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_DWORD *)(v3 + 56);
  if (v4 == 24)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v43);
    v5 = *(_QWORD *)(v2 + 8);
    *(_OWORD *)(v5 + 56) = v43;
    *(_QWORD *)(v5 + 72) = v44;
    v3 = *(_QWORD *)(v2 + 8);
  }
  v41 = *(_OWORD *)(v3 + 56);
  v42 = *(_QWORD *)(v3 + 72);
  v52[0] = 0;
  v54 = 0;
  v40 = *v1;
  if ((_DWORD)v41 == 9)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v43);
    v11 = *(_QWORD *)(v2 + 8);
    *(_OWORD *)(v11 + 56) = v43;
    *(_QWORD *)(v11 + 72) = v44;
    v9 = COERCE_DOUBLE(mlir::Token::getFloatingPointValue((mlir::Token *)&v41));
    if (!v12)
      goto LABEL_33;
    v13 = v9;
    if (v4 == 24)
      v13 = -v9;
    v14 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v38, v13);
    v15 = llvm::APFloatBase::IEEEdouble(v14);
    llvm::APFloat::Storage::Storage((char *)&v43 + 8, v38, v15);
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v38);
    if (v54)
    {
      v17 = llvm::APFloat::Storage::operator=((llvm::APFloatBase *)v53, (llvm::APFloatBase *)((char *)&v43 + 8));
      v10 = llvm::APFloatBase::PPCDoubleDouble(v17);
      if (v10 != *((void **)&v43 + 1))
        goto LABEL_12;
LABEL_50:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v43 + 8));
      if (mlir::Type::isF64((mlir::Type *)v1))
      {
LABEL_14:
        if (v10 == (void *)v53[0])
        {
          v9 = COERCE_DOUBLE(llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v53, (llvm::APInt *)&v43));
          v19 = DWORD2(v43);
          if (DWORD2(v43))
            goto LABEL_16;
        }
        else
        {
          v9 = COERCE_DOUBLE(llvm::detail::IEEEFloat::bitcastToAPInt(v53, (uint64_t)&v43));
          v19 = DWORD2(v43);
          if (DWORD2(v43))
          {
LABEL_16:
            v20 = v19 >> 3;
            v22 = v1[1];
            v21.__i_ = (std::__wrap_iter<const char *>::iterator_type)v1[2];
            v23 = (std::vector<char> *)(v1 + 1);
            v24 = &v21.__i_[-v22];
            v38[0] = 0;
            std::vector<char>::insert(v23, v21, v20, v38);
            v9 = COERCE_DOUBLE(llvm::StoreIntToMemory((llvm **)&v43, (const llvm::APInt *)&v23->__begin_[(unint64_t)v24], v20));
            v25 = DWORD2(v43);
            ++v23[1].__begin_;
            if (v25 >= 0x41)
            {
              v9 = *(double *)&v43;
              if ((_QWORD)v43)
                v9 = COERCE_DOUBLE(MEMORY[0x20BD002D4](v43, 0x1000C8000313F17));
            }
            goto LABEL_36;
          }
        }
        ++v1[4];
LABEL_36:
        v26 = 1;
        goto LABEL_41;
      }
LABEL_13:
      LOBYTE(v43) = 0;
      FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v40);
      llvm::APFloat::convert((uint64_t)v52, FloatSemantics, 1, &v43);
      goto LABEL_14;
    }
    v37 = (void *)*((_QWORD *)&v43 + 1);
    v10 = llvm::APFloatBase::PPCDoubleDouble(v16);
    if (v10 == v37)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v53, (_QWORD *)&v43 + 1);
      v54 = 1;
      if (v10 == *((void **)&v43 + 1))
        goto LABEL_50;
    }
    else
    {
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v53, (uint64_t)&v43 + 8);
      v54 = 1;
      if (v10 == *((void **)&v43 + 1))
        goto LABEL_50;
    }
LABEL_12:
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v43 + 8));
    if (mlir::Type::isF64((mlir::Type *)v1))
      goto LABEL_14;
    goto LABEL_13;
  }
  if ((_DWORD)v41 == 10)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v43);
    v6 = *(_QWORD *)(v2 + 8);
    *(_OWORD *)(v6 + 56) = v43;
    *(_QWORD *)(v6 + 72) = v44;
    v7 = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v40);
    Width = mlir::FloatType::getWidth((mlir::FloatType *)&v40);
    v9 = COERCE_DOUBLE(mlir::detail::Parser::parseFloatFromIntegerLiteral(v2, (uint64_t)v52, (MirInfoChannelAssignment *)&v41, v4 == 24, v7, Width));
    if (LOBYTE(v9))
    {
      v10 = llvm::APFloatBase::PPCDoubleDouble(*(llvm::APFloatBase **)&v9);
      goto LABEL_14;
    }
LABEL_33:
    v26 = 0;
    goto LABEL_41;
  }
  *(_QWORD *)v38 = "expected integer or floating point literal";
  v39 = 259;
  mlir::detail::Parser::emitError(v2, (uint64_t)v38, &v43);
  v9 = COERCE_DOUBLE(mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v43));
  v26 = *(_QWORD *)&v9;
  if ((_QWORD)v43)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
  if (v51)
  {
    v27 = __p;
    if (__p)
    {
      v28 = v50;
      v29 = __p;
      if (v50 != __p)
      {
        do
          v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        v29 = __p;
      }
      v50 = v27;
      operator delete(v29);
    }
    v30 = v47;
    if (v47)
    {
      v31 = v48;
      v32 = v47;
      if (v48 != v47)
      {
        do
        {
          v34 = *--v31;
          v33 = v34;
          *v31 = 0;
          if (v34)
            MEMORY[0x20BD002D4](v33, 0x1000C8077774924);
        }
        while (v31 != v30);
        v32 = v47;
      }
      v48 = v30;
      operator delete(v32);
    }
    v9 = *(double *)&v45;
    if (v45 != &v46)
      free(v45);
  }
LABEL_41:
  if (v54)
  {
    v35 = (void *)v53[0];
    if (llvm::APFloatBase::PPCDoubleDouble(*(llvm::APFloatBase **)&v9) == v35)
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v53);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v53);
  }
  return v26;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::SparseElementsAttr mlir::detail::Parser::getChecked<mlir::SparseElementsAttr,mlir::ShapedType &,mlir::DenseElementsAttr,mlir::DenseElementsAttr>(llvm::SMLoc,mlir::ShapedType &,mlir::DenseElementsAttr,mlir::DenseElementsAttr &&)::{lambda(void)#1}>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  const char *v3;
  _BYTE v4[32];
  __int16 v5;

  v2 = *(_QWORD *)a1;
  v3 = **(const char ***)(a1 + 8);
  v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::SparseElementsAttr mlir::detail::Parser::getChecked<mlir::SparseElementsAttr,mlir::ShapedType &,mlir::DenseElementsAttr &,mlir::DenseElementsAttr &>(llvm::SMLoc,mlir::ShapedType &,mlir::DenseElementsAttr &,mlir::DenseElementsAttr &)::{lambda(void)#1}>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  const char *v3;
  _BYTE v4[32];
  __int16 v5;

  v2 = *(_QWORD *)a1;
  v3 = **(const char ***)(a1 + 8);
  v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseStridedLayoutAttr(void)::$_0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  const char *v3;
  _BYTE v4[32];
  __int16 v5;

  v2 = *(_QWORD *)a1;
  v3 = **(const char ***)(a1 + 8);
  v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

_QWORD *llvm::DenseMap<unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  llvm *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = result + 2;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -1;
        *v13 = -1;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[2 * v11];
        do
        {
          *v10 = -1;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    if ((_DWORD)v3)
    {
      v16 = v4;
      do
      {
        v23 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v24 = *(_DWORD *)(a1 + 16) - 1;
          v25 = v24 & (37 * v23);
          v22 = (_QWORD *)(*(_QWORD *)a1 + 16 * v25);
          v26 = *v22;
          if (v23 != *v22)
          {
            v27 = 0;
            v28 = 1;
            while (v26 != -1)
            {
              if (v27)
                v29 = 0;
              else
                v29 = v26 == -2;
              if (v29)
                v27 = v22;
              v30 = v25 + v28++;
              v25 = v30 & v24;
              v22 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v30 & v24));
              v26 = *v22;
              if (v23 == *v22)
                goto LABEL_24;
            }
            if (v27)
              v22 = v27;
          }
LABEL_24:
          *v22 = v23;
          v22[1] = *((_QWORD *)v16 + 1);
          ++*(_DWORD *)(a1 + 8);
        }
        v16 = (llvm *)((char *)v16 + 16);
      }
      while (v16 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_19;
    v18 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v18 & 0x1FFFFFFFFFFFFFFELL)];
    v19 = result + 2;
    v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 2) = -1;
      *v19 = -1;
      v19 += 4;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_19:
      v21 = &result[2 * v17];
      do
      {
        *v10 = -1;
        v10 += 2;
      }
      while (v10 != v21);
    }
  }
  return result;
}

uint64_t mlir::detail::Parser::parseDialectSymbolBody(mlir::detail::Parser *this, llvm::StringRef *a2, BOOL *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  _BYTE *v11;
  uint64_t EndLoc;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  __int16 v36;
  _QWORD v37[2];
  __int128 v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  _QWORD *v43;
  void *__p;
  _QWORD *v45;
  char v46;
  _BYTE *v47;
  __int128 v48;
  _QWORD v49[2];

  v6 = 0;
  v49[1] = *MEMORY[0x24BDAC8D0];
  v7 = *((_QWORD *)this + 1);
  v8 = *(char **)(v7 + 64);
  v47 = v49;
  v48 = xmmword_207AB6C20;
  v9 = *(char **)(v7 + 48);
  v37[0] = this;
  v37[1] = &v47;
  while (2)
  {
    if (v8 == v9)
    {
      EndLoc = (uint64_t)v9;
LABEL_24:
      *a3 = 1;
      *(_QWORD *)&v48 = 0;
LABEL_25:
      v17 = *((_QWORD *)this + 1);
      *(_QWORD *)(v17 + 40) = EndLoc;
      mlir::Lexer::lexToken((mlir::Lexer *)(v17 + 8), (uint64_t)&v38);
      v18 = *((_QWORD *)this + 1);
      *(_OWORD *)(v18 + 56) = v38;
      *(_QWORD *)(v18 + 72) = v39;
      *((_QWORD *)a2 + 1) = (EndLoc - *(_DWORD *)a2);
      v19 = 1;
      goto LABEL_26;
    }
    EndLoc = (uint64_t)(v8 + 1);
    v13 = *v8;
    switch(*v8)
    {
      case '"':
        v14 = *((_QWORD *)this + 1);
        *(_QWORD *)(v14 + 40) = v8;
        mlir::Lexer::lexToken((mlir::Lexer *)(v14 + 8), (uint64_t)&v38);
        v15 = *((_QWORD *)this + 1);
        *(_OWORD *)(v15 + 56) = v38;
        *(_QWORD *)(v15 + 72) = v39;
        EndLoc = mlir::Token::getEndLoc((mlir::Token *)(*((_QWORD *)this + 1) + 56));
        v16 = *(_DWORD *)(*((_QWORD *)this + 1) + 56);
        if (v16 == 11)
          goto LABEL_4;
        if (v16 == 2)
          goto LABEL_24;
LABEL_30:
        v19 = 0;
        goto LABEL_26;
      case '#':
      case '$':
      case '%':
      case '&':
      case '\'':
      case '*':
      case '+':
      case ',':
      case '.':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '=':
      case '?':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '\\':
      case '^':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
      case '|':
        goto LABEL_4;
      case '(':
      case '<':
      case '[':
      case '{':
        if ((unint64_t)(v6 + 1) > *((_QWORD *)&v48 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v47, v49, v6 + 1, 1);
          v6 = v48;
        }
        v47[v6] = v13;
        v8 = (char *)EndLoc;
        v6 = v48 + 1;
        *(_QWORD *)&v48 = v6;
        if (!v6)
          goto LABEL_25;
        continue;
      case ')':
        if (!mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_1::operator()(&v47, (uint64_t)v37, 0x28u))goto LABEL_30;
        goto LABEL_4;
      case '-':
        v10 = v8[1];
        v11 = v8 + 2;
        if (v10 == 62)
          EndLoc = (uint64_t)v11;
        goto LABEL_4;
      case '>':
        if (!mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_1::operator()(&v47, (uint64_t)v37, 0x3Cu))goto LABEL_30;
        goto LABEL_4;
      case ']':
        if (!mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_1::operator()(&v47, (uint64_t)v37, 0x5Bu))goto LABEL_30;
        goto LABEL_4;
      case '}':
        if (!mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_1::operator()(&v47, (uint64_t)v37, 0x7Bu))goto LABEL_30;
        goto LABEL_4;
      default:
        if (*v8)
        {
LABEL_4:
          v6 = v48;
          v8 = (char *)EndLoc;
          if (!(_QWORD)v48)
            goto LABEL_25;
          continue;
        }
        if (v6)
        {
          mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_0::operator()((uint64_t)&v38, (uint64_t)v37);
          v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v38);
          if ((_QWORD)v38)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v38);
          if (v46)
          {
            v21 = __p;
            if (__p)
            {
              v22 = v45;
              v23 = __p;
              if (v45 != __p)
              {
                do
                  v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
                while (v22 != v21);
                v23 = __p;
              }
              v45 = v21;
              operator delete(v23);
            }
            v24 = v42;
            if (v42)
            {
              v25 = v43;
              v26 = v42;
              if (v43 == v42)
                goto LABEL_61;
              do
              {
                v28 = *--v25;
                v27 = v28;
                *v25 = 0;
                if (v28)
                  MEMORY[0x20BD002D4](v27, 0x1000C8077774924);
              }
              while (v25 != v24);
LABEL_60:
              v26 = v42;
              goto LABEL_61;
            }
            goto LABEL_62;
          }
        }
        else
        {
          v35 = "unexpected nul or EOF in pretty dialect name";
          v36 = 259;
          mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v35, &v38);
          v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v38);
          if ((_QWORD)v38)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v38);
          if (v46)
          {
            v29 = __p;
            if (__p)
            {
              v30 = v45;
              v31 = __p;
              if (v45 != __p)
              {
                do
                  v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
                while (v30 != v29);
                v31 = __p;
              }
              v45 = v29;
              operator delete(v31);
            }
            v24 = v42;
            if (v42)
            {
              v32 = v43;
              v26 = v42;
              if (v43 != v42)
              {
                do
                {
                  v34 = *--v32;
                  v33 = v34;
                  *v32 = 0;
                  if (v34)
                    MEMORY[0x20BD002D4](v33, 0x1000C8077774924);
                }
                while (v32 != v24);
                goto LABEL_60;
              }
LABEL_61:
              v43 = v24;
              operator delete(v26);
            }
LABEL_62:
            if (v40 != &v41)
              free(v40);
          }
        }
LABEL_26:
        if (v47 != (_BYTE *)v49)
          free(v47);
        return v19;
    }
  }
}

void mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  int64_t v37;
  char v38[32];
  __int16 v39;
  int v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  void *__src;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[96];
  void *v50[2];
  uint64_t v51;
  void *__p[2];
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)a2;
  v39 = 257;
  mlir::detail::Parser::emitError(v4, (uint64_t)v38, &v43);
  v5 = v43;
  if (v43)
  {
    v40 = 3;
    v41 = "unbalanced '";
    v42 = 12;
    v6 = &v40;
    v7 = (char *)__src;
    if (v47 >= v48)
    {
      v34 = v47 + 1;
      if (__src <= &v40 && (char *)__src + 24 * v47 > (char *)&v40)
      {
        v36 = (char *)&v40 - (_BYTE *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v49, v34, 24);
        v7 = (char *)__src;
        v6 = (int *)((char *)__src + v36);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v49, v34, 24);
        v6 = &v40;
        v7 = (char *)__src;
      }
    }
    v8 = &v7[24 * v47];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v47;
    v5 = v43;
    if (v43)
    {
      mlir::Diagnostic::operator<<((uint64_t)&v44, *(_BYTE *)(**(_QWORD **)(a2 + 8) + *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 1));
      v5 = v43;
      if (v43)
      {
        v40 = 3;
        v41 = "' character in pretty dialect name";
        v42 = 34;
        v10 = &v40;
        v11 = (char *)__src;
        if (v47 >= v48)
        {
          v35 = v47 + 1;
          if (__src <= &v40 && (char *)__src + 24 * v47 > (char *)&v40)
          {
            v37 = (char *)&v40 - (_BYTE *)__src;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v49, v35, 24);
            v11 = (char *)__src;
            v10 = (int *)((char *)__src + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v49, v35, 24);
            v10 = &v40;
            v11 = (char *)__src;
          }
        }
        v12 = &v11[24 * v47];
        v13 = *(_OWORD *)v10;
        *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v12 = v13;
        ++v47;
        v5 = v43;
      }
    }
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (v54)
  {
    *(_QWORD *)(a1 + 8) = v44;
    v14 = v47;
    *(_DWORD *)(a1 + 16) = v45;
    *(_QWORD *)(a1 + 24) = a1 + 40;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)"";
    if (!(_DWORD)v14 || &v43 == (uint64_t *)a1)
    {
      v16 = 1;
      goto LABEL_20;
    }
    if (__src != v49)
    {
      *(_QWORD *)(a1 + 24) = __src;
      v15 = v48;
      *(_DWORD *)(a1 + 32) = v14;
      *(_DWORD *)(a1 + 36) = v15;
      __src = v49;
      v48 = 0;
      v16 = 1;
LABEL_19:
      v47 = 0;
LABEL_20:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v50;
      *(_QWORD *)(a1 + 152) = v51;
      v50[0] = 0;
      v50[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 176) = v53;
      v51 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v53 = 0;
      *(_BYTE *)(a1 + 184) = 1;
      if (v16)
      {
        v18 = __p[0];
        if (__p[0])
        {
          v19 = __p[1];
          v20 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
            while (v19 != v18);
            v20 = __p[0];
          }
          __p[1] = v18;
          operator delete(v20);
        }
        v21 = v50[0];
        if (v50[0])
        {
          v22 = v50[1];
          v23 = v50[0];
          if (v50[1] != v50[0])
          {
            do
            {
              v25 = *--v22;
              v24 = v25;
              *v22 = 0;
              if (v25)
                MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
            }
            while (v22 != v21);
            v23 = v50[0];
          }
          v50[1] = v21;
          operator delete(v23);
        }
        if (__src != v49)
          free(__src);
        v54 = 0;
      }
      goto LABEL_37;
    }
    if (v14 < 5)
    {
      v17 = v14;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v14, 24);
      v17 = v47;
      if (!v47)
        goto LABEL_18;
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v17);
LABEL_18:
    *(_DWORD *)(a1 + 32) = v14;
    v16 = v54;
    goto LABEL_19;
  }
LABEL_37:
  mlir::InFlightDiagnostic::abandon(&v43);
  if (v43)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
  if (v54)
  {
    v26 = __p[0];
    if (__p[0])
    {
      v27 = __p[1];
      v28 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        v28 = __p[0];
      }
      __p[1] = v26;
      operator delete(v28);
    }
    v29 = v50[0];
    if (v50[0])
    {
      v30 = v50[1];
      v31 = v50[0];
      if (v50[1] != v50[0])
      {
        do
        {
          v33 = *--v30;
          v32 = v33;
          *v30 = 0;
          if (v33)
            MEMORY[0x20BD002D4](v32, 0x1000C8077774924);
        }
        while (v30 != v29);
        v31 = v50[0];
      }
      v50[1] = v29;
      operator delete(v31);
    }
    if (__src != v49)
      free(__src);
  }
}

uint64_t mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_1::operator()(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *__p;
  _QWORD *v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  if (*(char *)(*a1 + v3 - 1) == a3)
  {
    a1[1] = v3 - 1;
    return 1;
  }
  else
  {
    mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_0::operator()((uint64_t)v14, a2);
    v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v14[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
    if (v21)
    {
      v5 = __p;
      if (__p)
      {
        v6 = v20;
        v7 = __p;
        if (v20 != __p)
        {
          do
            v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          v7 = __p;
        }
        v20 = v5;
        operator delete(v7);
      }
      v8 = v17;
      if (v17)
      {
        v9 = v18;
        v10 = v17;
        if (v18 != v17)
        {
          do
          {
            v12 = *--v9;
            v11 = v12;
            *v9 = 0;
            if (v12)
              MEMORY[0x20BD002D4](v11, 0x1000C8077774924);
          }
          while (v9 != v8);
          v10 = v17;
        }
        v18 = v8;
        operator delete(v10);
      }
      if (v15 != &v16)
        free(v15);
    }
  }
  return v4;
}

_QWORD *mlir::detail::Parser::parseExtendedAttr(mlir::detail::Parser *a1, uint64_t a2)
{
  uint64_t v4;
  mlir::StringAttr *v5;
  uint64_t *v6;
  uint64_t v7;
  mlir::Token *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t LocRange;
  uint64_t v16;
  uint64_t v17;
  uint64_t OCGSize;
  uint64_t v19;
  unint64_t v20;
  const unsigned __int8 *v21;
  int8x16_t *v22;
  unint64_t v23;
  unint64_t v24;
  const void **v25;
  const char *v26;
  _BOOL4 v27;
  uint64_t v28;
  _BOOL4 v29;
  int Key;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t Checked;
  _QWORD *v41;
  const void **v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t **(*Dialect)(uint64_t, uint64_t);
  uint64_t **(*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  mlir::MLIRContext *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  __int128 v68;
  uint64_t canMapOperands;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  _QWORD *v74;
  _QWORD *v75;
  void *v76;
  _QWORD *v77;
  _QWORD *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  BOOL v86;
  int64_t v87;
  int64_t v88;
  int64_t v89;
  _QWORD v90[2];
  __int128 v91;
  __int16 v92;
  __int128 v93;
  const char *v94;
  __int16 v95;
  __int128 v96;
  const void **v97;
  const char *v98;
  __int128 v99;
  __int128 __s2;
  mlir::detail::Parser *v101;
  void *v102;
  const void **v103;
  _QWORD v104[12];
  void *v105;
  _QWORD *v106;
  void *__p;
  _QWORD *v108;
  char v109;
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a1 + 1);
  v5 = **(mlir::StringAttr ***)v4;
  v6 = *(uint64_t **)(v4 + 128);
  v7 = *(_QWORD *)(v4 + 80);
  v10 = *(_DWORD *)(v4 + 56);
  v8 = (mlir::Token *)(v4 + 56);
  v9 = v10;
  v11 = *((_QWORD *)v8 + 1);
  v12 = *((_QWORD *)v8 + 2);
  v13 = v12 != 0;
  if (v12)
    ++v11;
  *(_QWORD *)&v99 = v11;
  *((_QWORD *)&v99 + 1) = v12 - v13;
  if (v9 == 2 && v12 == v13)
  {
    Checked = mlir::detail::Parser::codeCompleteDialectSymbol((uint64_t)a1);
LABEL_36:
    v41 = (_QWORD *)Checked;
    if (!Checked)
      goto LABEL_63;
    goto LABEL_73;
  }
  LocRange = mlir::Token::getLocRange(v8);
  v17 = v16;
  OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)a1 + 1) + 56));
  mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)a1 + 1) + 8), (uint64_t)&__s2);
  v19 = *((_QWORD *)a1 + 1);
  *(_OWORD *)(v19 + 56) = __s2;
  *(_QWORD *)(v19 + 72) = v101;
  LOBYTE(__s2) = 46;
  v20 = llvm::StringRef::find((uint64_t *)&v99, (char *)&__s2, 1uLL, 0);
  if (v20 == -1)
  {
    v25 = 0;
    v97 = 0;
    v98 = 0;
    v96 = v99;
    v21 = (const unsigned __int8 *)*((_QWORD *)&v99 + 1);
    v22 = (int8x16_t *)v99;
  }
  else
  {
    v21 = (const unsigned __int8 *)*((_QWORD *)&v99 + 1);
    v22 = (int8x16_t *)v99;
    if (v20 >= *((_QWORD *)&v99 + 1))
      v23 = *((_QWORD *)&v99 + 1);
    else
      v23 = v20;
    if (*((_QWORD *)&v99 + 1) >= v20 + 1)
      v24 = v20 + 1;
    else
      v24 = *((_QWORD *)&v99 + 1);
    v25 = (const void **)(v99 + v24);
    *(_QWORD *)&v96 = v99;
    *((_QWORD *)&v96 + 1) = v23;
    v26 = (const char *)(*((_QWORD *)&v99 + 1) - v24);
    v97 = (const void **)(v99 + v24);
    v98 = (const char *)(*((_QWORD *)&v99 + 1) - v24);
    if (*((_QWORD *)&v99 + 1) != v24)
    {
      v27 = 1;
      v28 = *((_QWORD *)a1 + 1);
      if (*(_DWORD *)(v28 + 56) != 23)
        goto LABEL_16;
      goto LABEL_40;
    }
  }
  v26 = 0;
  v27 = v22->u8[(_QWORD)v21 - 1] == 46;
  v28 = *((_QWORD *)a1 + 1);
  if (*(_DWORD *)(v28 + 56) != 23)
  {
LABEL_16:
    v29 = 0;
    if (!v27)
      goto LABEL_17;
LABEL_41:
    if (v27)
    {
      if (v29)
      {
        if (!mlir::detail::Parser::parseDialectSymbolBody(a1, (llvm::StringRef *)&v97, (BOOL *)&__s2))
          goto LABEL_72;
        v42 = v97;
        v26 = v98;
      }
      else
      {
        v42 = v25;
      }
    }
    else
    {
      v97 = (const void **)(v96 + *((_QWORD *)&v96 + 1));
      v98 = 0;
      LOBYTE(__s2) = 0;
      if (!mlir::detail::Parser::parseDialectSymbolBody(a1, (llvm::StringRef *)&v97, (BOOL *)&__s2))
        goto LABEL_72;
      v44 = v98 != 0;
      if (v98)
        v42 = (const void **)((char *)v97 + 1);
      else
        v42 = v97;
      v26 = &v98[-v44];
      v97 = v42;
      v98 -= v44;
      if (!(_BYTE)__s2)
      {
        if (v26 >= v26 - 1)
          --v26;
        v98 = v26;
      }
      v25 = (const void **)OCGSize;
    }
    v45 = v96;
    v90[0] = v25;
    v46 = *((_QWORD *)a1 + 1);
    v47 = a2;
    if (*(_DWORD *)(v46 + 56) != 15
      || (mlir::Lexer::lexToken((mlir::Lexer *)(v46 + 8), (uint64_t)&__s2),
          v48 = *((_QWORD *)a1 + 1),
          *(_OWORD *)(v48 + 56) = __s2,
          *(_QWORD *)(v48 + 72) = v101,
          (v47 = mlir::detail::Parser::parseType(a1)) != 0))
    {
      Dialect = mlir::MLIRContext::getOrLoadDialect(*(_QWORD *)a1, (void *)v45, *((size_t *)&v45 + 1));
      if (Dialect)
      {
        v50 = Dialect;
        v51 = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)a1 + 1) + 56));
        v52 = *((_QWORD *)a1 + 1);
        *(_QWORD *)(v52 + 40) = v42;
        mlir::Lexer::lexToken((mlir::Lexer *)(v52 + 8), (uint64_t)&__s2);
        v53 = *((_QWORD *)a1 + 1);
        *(_OWORD *)(v53 + 56) = __s2;
        *(_QWORD *)(v53 + 72) = v101;
        *((_QWORD *)&__s2 + 1) = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)a1 + 1)
                                                                                                 + 56));
        v101 = a1;
        LOBYTE(v102) = 0;
        *(_QWORD *)&__s2 = &off_24C02A088;
        v103 = v42;
        v104[0] = v26;
        v41 = (_QWORD *)(*(uint64_t (**)(uint64_t **(*)(uint64_t, uint64_t), __int128 *, uint64_t))(*(_QWORD *)v50 + 32))(v50, &__s2, v47);
        v54 = *((_QWORD *)a1 + 1);
        *(_QWORD *)(v54 + 40) = v51;
        mlir::Lexer::lexToken((mlir::Lexer *)(v54 + 8), (uint64_t)&v93);
        v55 = *((_QWORD *)a1 + 1);
        *(_OWORD *)(v55 + 56) = v93;
        *(_QWORD *)(v55 + 72) = v94;
        ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&__s2);
        if (!v41)
          goto LABEL_63;
        goto LABEL_73;
      }
      *(_QWORD *)&v93 = a1;
      *((_QWORD *)&v93 + 1) = v90;
      LOWORD(v103) = 261;
      __s2 = v45;
      v58 = mlir::StringAttr::get(v5, (mlir::MLIRContext *)&__s2);
      if (!v47)
        v47 = mlir::NoneType::get(v5, v57);
      Checked = mlir::OpaqueAttr::getChecked((void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseExtendedAttr(mlir::Type)::$_0::operator() const(llvm::StringRef,llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>, (uint64_t)&v93, v58, v42, v26, v47);
      goto LABEL_36;
    }
LABEL_72:
    v41 = 0;
    goto LABEL_63;
  }
LABEL_40:
  v29 = &v21[(_QWORD)v22] == *(const unsigned __int8 **)(v28 + 64);
  if (v29 || v27)
    goto LABEL_41;
LABEL_17:
  Key = llvm::StringMapImpl::FindKey((uint64_t *)v7, v22, v21);
  if (Key == -1)
    v31 = *(unsigned int *)(v7 + 8);
  else
    v31 = Key;
  if (v31 == *(_DWORD *)(v7 + 8))
  {
    v92 = 1283;
    v90[0] = "undefined symbol alias id '";
    v91 = v99;
    *(_QWORD *)&v93 = v90;
    v94 = "'";
    v95 = 770;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)a1, (uint64_t)&v93, &__s2);
    if ((_QWORD)__s2)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__s2);
    if (v109)
    {
      v32 = __p;
      if (__p)
      {
        v33 = v108;
        v34 = __p;
        if (v108 != __p)
        {
          do
            v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
          while (v33 != v32);
          v34 = __p;
        }
        v108 = v32;
        operator delete(v34);
      }
      v35 = v105;
      if (v105)
      {
        v36 = v106;
        v37 = v105;
        if (v106 != v105)
        {
          do
          {
            v39 = *--v36;
            v38 = v39;
            *v36 = 0;
            if (v39)
              MEMORY[0x20BD002D4](v38, 0x1000C8077774924);
          }
          while (v36 != v35);
          v37 = v105;
        }
        v106 = v35;
        operator delete(v37);
      }
      if (v102 != v104)
        free(v102);
    }
    goto LABEL_72;
  }
  v43 = *(_QWORD *)v7;
  if (v6)
    mlir::AsmParserState::addAttrAliasUses(v6, (int8x16_t *)v99, *((const unsigned __int8 **)&v99 + 1), LocRange, v17);
  v41 = *(_QWORD **)(*(_QWORD *)(v43 + 8 * v31) + 8);
  if (!v41)
  {
LABEL_63:
    v56 = 0;
    v96 = 0uLL;
    if (!a2)
      return v41;
    goto LABEL_77;
  }
LABEL_73:
  if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v41 + 8))
  {
    v59 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v41 + 8);
    v56 = v41;
    *(_QWORD *)&v96 = v41;
    *((_QWORD *)&v96 + 1) = v59;
    if (!a2)
      return v41;
  }
  else
  {
    v56 = 0;
    v96 = 0uLL;
    if (!a2)
      return v41;
  }
LABEL_77:
  if (v56 && mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v96) != a2)
  {
    *(_QWORD *)&v93 = "attribute type different than expected: expected ";
    v95 = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)&v93, &__s2);
    if ((_QWORD)__s2)
    {
      v60 = (char *)v90;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v90, a2);
      v61 = (char *)v102;
      if (v103 >= HIDWORD(v103))
      {
        v83 = v103 + 1;
        if (v102 <= v90 && (char *)v102 + 24 * v103 > (char *)v90)
        {
          v87 = (char *)v90 - (_BYTE *)v102;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v83, 24);
          v61 = (char *)v102;
          v60 = (char *)v102 + v87;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v83, 24);
          v60 = (char *)v90;
          v61 = (char *)v102;
        }
      }
      v62 = &v61[24 * v103];
      v63 = *(_OWORD *)v60;
      *((_QWORD *)v62 + 2) = *((_QWORD *)v60 + 2);
      *(_OWORD *)v62 = v63;
      v64 = ((_DWORD)v103 + 1);
      LODWORD(v103) = (_DWORD)v103 + 1;
      if ((_QWORD)__s2)
      {
        LODWORD(v90[0]) = 3;
        v90[1] = ", but got ";
        *(_QWORD *)&v91 = 10;
        v65 = (char *)v90;
        v66 = (char *)v102;
        if (v64 >= HIDWORD(v103))
        {
          v85 = v64 + 1;
          v86 = (char *)v102 + 24 * v64 > (char *)v90;
          if (v102 <= v90 && v86)
          {
            v89 = (char *)v90 - (_BYTE *)v102;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v85, 24);
            v66 = (char *)v102;
            v65 = (char *)v102 + v89;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v85, 24);
            v65 = (char *)v90;
            v66 = (char *)v102;
          }
        }
        v67 = &v66[24 * v103];
        v68 = *(_OWORD *)v65;
        *((_QWORD *)v67 + 2) = *((_QWORD *)v65 + 2);
        *(_OWORD *)v67 = v68;
        LODWORD(v103) = (_DWORD)v103 + 1;
      }
    }
    canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v96);
    if ((_QWORD)__s2)
    {
      v70 = (char *)v90;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v90, canMapOperands);
      v71 = (char *)v102;
      if (v103 >= HIDWORD(v103))
      {
        v84 = v103 + 1;
        if (v102 <= v90 && (char *)v102 + 24 * v103 > (char *)v90)
        {
          v88 = (char *)v90 - (_BYTE *)v102;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v84, 24);
          v71 = (char *)v102;
          v70 = (char *)v102 + v88;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v84, 24);
          v70 = (char *)v90;
          v71 = (char *)v102;
        }
      }
      v72 = &v71[24 * v103];
      v73 = *(_OWORD *)v70;
      *((_QWORD *)v72 + 2) = *((_QWORD *)v70 + 2);
      *(_OWORD *)v72 = v73;
      LODWORD(v103) = (_DWORD)v103 + 1;
      if ((_QWORD)__s2)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__s2);
    }
    if (v109)
    {
      v74 = __p;
      if (__p)
      {
        v75 = v108;
        v76 = __p;
        if (v108 != __p)
        {
          do
            v75 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v75 - 1);
          while (v75 != v74);
          v76 = __p;
        }
        v108 = v74;
        operator delete(v76);
      }
      v77 = v105;
      if (v105)
      {
        v78 = v106;
        v79 = v105;
        if (v106 != v105)
        {
          do
          {
            v81 = *--v78;
            v80 = v81;
            *v78 = 0;
            if (v81)
              MEMORY[0x20BD002D4](v80, 0x1000C8077774924);
          }
          while (v78 != v77);
          v79 = v105;
        }
        v106 = v77;
        operator delete(v79);
      }
      if (v102 != v104)
        free(v102);
    }
    return 0;
  }
  return v41;
}

uint64_t mlir::detail::Parser::parseExtendedType(mlir::detail::Parser *this)
{
  uint64_t v2;
  mlir::StringAttr *v3;
  uint64_t *v4;
  uint64_t v5;
  mlir::Token *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t LocRange;
  uint64_t v14;
  uint64_t v15;
  uint64_t OCGSize;
  uint64_t v17;
  unint64_t v18;
  const unsigned __int8 *v19;
  int8x16_t *v20;
  unint64_t v21;
  unint64_t v22;
  const void **v23;
  const char *v24;
  _BOOL4 v25;
  uint64_t v26;
  _BOOL4 v27;
  int Key;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  const void **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t **(*Dialect)(uint64_t, uint64_t);
  uint64_t **(*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v52[2];
  __int128 v53;
  __int16 v54;
  __int128 v55;
  const char *v56;
  __int16 v57;
  __int128 v58;
  const void **v59;
  const char *v60;
  __int128 v61;
  __int128 __s2;
  mlir::detail::Parser *v63;
  void *v64;
  const void **v65;
  const char *v66;
  void *v67;
  _QWORD *v68;
  void *__p;
  _QWORD *v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 1);
  v3 = **(mlir::StringAttr ***)v2;
  v4 = *(uint64_t **)(v2 + 128);
  v5 = *(_QWORD *)(v2 + 80);
  v8 = *(_DWORD *)(v2 + 56);
  v6 = (mlir::Token *)(v2 + 56);
  v7 = v8;
  v9 = *((_QWORD *)v6 + 1);
  v10 = *((_QWORD *)v6 + 2);
  v11 = v10 != 0;
  if (v10)
    ++v9;
  *(_QWORD *)&v61 = v9;
  *((_QWORD *)&v61 + 1) = v10 - v11;
  if (v7 == 2 && v10 == v11)
    return mlir::detail::Parser::codeCompleteDialectSymbol((uint64_t)this);
  LocRange = mlir::Token::getLocRange(v6);
  v15 = v14;
  OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)this + 1) + 56));
  mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)this + 1) + 8), (uint64_t)&__s2);
  v17 = *((_QWORD *)this + 1);
  *(_OWORD *)(v17 + 56) = __s2;
  *(_QWORD *)(v17 + 72) = v63;
  LOBYTE(__s2) = 46;
  v18 = llvm::StringRef::find((uint64_t *)&v61, (char *)&__s2, 1uLL, 0);
  if (v18 == -1)
  {
    v23 = 0;
    v59 = 0;
    v60 = 0;
    v58 = v61;
    v19 = (const unsigned __int8 *)*((_QWORD *)&v61 + 1);
    v20 = (int8x16_t *)v61;
  }
  else
  {
    v19 = (const unsigned __int8 *)*((_QWORD *)&v61 + 1);
    v20 = (int8x16_t *)v61;
    if (v18 >= *((_QWORD *)&v61 + 1))
      v21 = *((_QWORD *)&v61 + 1);
    else
      v21 = v18;
    if (*((_QWORD *)&v61 + 1) >= v18 + 1)
      v22 = v18 + 1;
    else
      v22 = *((_QWORD *)&v61 + 1);
    v23 = (const void **)(v61 + v22);
    *(_QWORD *)&v58 = v61;
    *((_QWORD *)&v58 + 1) = v21;
    v24 = (const char *)(*((_QWORD *)&v61 + 1) - v22);
    v59 = (const void **)(v61 + v22);
    v60 = (const char *)(*((_QWORD *)&v61 + 1) - v22);
    if (*((_QWORD *)&v61 + 1) != v22)
    {
      v25 = 1;
      v26 = *((_QWORD *)this + 1);
      if (*(_DWORD *)(v26 + 56) != 23)
        goto LABEL_16;
LABEL_39:
      v27 = &v19[(_QWORD)v20] == *(const unsigned __int8 **)(v26 + 64);
      if (!v27 && !v25)
        goto LABEL_17;
LABEL_40:
      if (v25)
      {
        if (!v27)
        {
          v40 = v23;
          goto LABEL_57;
        }
        if (mlir::detail::Parser::parseDialectSymbolBody(this, (llvm::StringRef *)&v59, (BOOL *)&__s2))
        {
          v40 = v59;
          v24 = v60;
LABEL_57:
          v52[0] = v23;
          Dialect = mlir::MLIRContext::getOrLoadDialect((uint64_t)v3, (void *)v58, *((size_t *)&v58 + 1));
          if (Dialect)
          {
            v44 = Dialect;
            v45 = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)this + 1) + 56));
            v46 = *((_QWORD *)this + 1);
            *(_QWORD *)(v46 + 40) = v40;
            mlir::Lexer::lexToken((mlir::Lexer *)(v46 + 8), (uint64_t)&__s2);
            v47 = *((_QWORD *)this + 1);
            *(_OWORD *)(v47 + 56) = __s2;
            *(_QWORD *)(v47 + 72) = v63;
            *((_QWORD *)&__s2 + 1) = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)this + 1) + 56));
            v63 = this;
            LOBYTE(v64) = 0;
            *(_QWORD *)&__s2 = &off_24C02A088;
            v65 = v40;
            v66 = v24;
            v39 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)v44 + 48))(v44, &__s2);
            v48 = *((_QWORD *)this + 1);
            *(_QWORD *)(v48 + 40) = v45;
            mlir::Lexer::lexToken((mlir::Lexer *)(v48 + 8), (uint64_t)&v55);
            v49 = *((_QWORD *)this + 1);
            *(_OWORD *)(v49 + 56) = v55;
            *(_QWORD *)(v49 + 72) = v56;
            ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&__s2);
            return v39;
          }
          *(_QWORD *)&v55 = this;
          *((_QWORD *)&v55 + 1) = v52;
          LOWORD(v65) = 261;
          __s2 = v58;
          v50 = mlir::StringAttr::get(v3, (mlir::MLIRContext *)&__s2);
          return mlir::OpaqueType::getChecked((void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseExtendedType(void)::$_0::operator() const(llvm::StringRef,llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>, (uint64_t)&v55, v50, v40, v24);
        }
      }
      else
      {
        v59 = (const void **)(v58 + *((_QWORD *)&v58 + 1));
        v60 = 0;
        LOBYTE(__s2) = 0;
        if (mlir::detail::Parser::parseDialectSymbolBody(this, (llvm::StringRef *)&v59, (BOOL *)&__s2))
        {
          v42 = v60 != 0;
          if (v60)
            v40 = (const void **)((char *)v59 + 1);
          else
            v40 = v59;
          v24 = &v60[-v42];
          v59 = v40;
          v60 -= v42;
          if (!(_BYTE)__s2)
          {
            if (v24 >= v24 - 1)
              --v24;
            v60 = v24;
          }
          v23 = (const void **)OCGSize;
          goto LABEL_57;
        }
      }
      return 0;
    }
  }
  v24 = 0;
  v25 = v20->u8[(_QWORD)v19 - 1] == 46;
  v26 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v26 + 56) == 23)
    goto LABEL_39;
LABEL_16:
  v27 = 0;
  if (v25)
    goto LABEL_40;
LABEL_17:
  Key = llvm::StringMapImpl::FindKey((uint64_t *)(v5 + 24), v20, v19);
  if (Key == -1)
    v29 = *(unsigned int *)(v5 + 32);
  else
    v29 = Key;
  if (v29 == *(_DWORD *)(v5 + 32))
  {
    v54 = 1283;
    v52[0] = "undefined symbol alias id '";
    v53 = v61;
    *(_QWORD *)&v55 = v52;
    v56 = "'";
    v57 = 770;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v55, &__s2);
    if ((_QWORD)__s2)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__s2);
    if (v71)
    {
      v30 = __p;
      if (__p)
      {
        v31 = v70;
        v32 = __p;
        if (v70 != __p)
        {
          do
            v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
          while (v31 != v30);
          v32 = __p;
        }
        v70 = v30;
        operator delete(v32);
      }
      v33 = v67;
      if (v67)
      {
        v34 = v68;
        v35 = v67;
        if (v68 != v67)
        {
          do
          {
            v37 = *--v34;
            v36 = v37;
            *v34 = 0;
            if (v37)
              MEMORY[0x20BD002D4](v36, 0x1000C8077774924);
          }
          while (v34 != v33);
          v35 = v67;
        }
        v68 = v33;
        operator delete(v35);
      }
      if (v64 != &v66)
        free(v64);
    }
    return 0;
  }
  v41 = *(_QWORD *)(v5 + 24);
  if (v4)
    mlir::AsmParserState::addTypeAliasUses(v4, (int8x16_t *)v61, *((const unsigned __int8 **)&v61 + 1), LocRange, v15);
  return *(_QWORD *)(*(_QWORD *)(v41 + 8 * v29) + 8);
}

void mlir::parseAttribute(char *a1, unint64_t a2, uint64_t **a3, _QWORD *a4, unint64_t *a5, int a6)
{
  char *v11;
  uint64_t v12;
  __n128 *v13;
  uint64_t ***v14;
  uint64_t OCGSize;
  unint64_t v16;
  const char *v17;
  const void ***v18;
  char *v19;
  char *v20;
  __int128 v21;
  unint64_t v22;
  const void ***v23;
  char *v24;
  char *v25;
  __int128 v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int64_t v37;
  int64_t v38;
  char v39[32];
  __int16 v40;
  __int128 v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  mlir::StringAttr ***v45;
  __n128 *v46;
  _QWORD v47[8];
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  __n128 *v53;
  unint64_t v54;
  char *v55;
  const void **v56;
  const char *v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  unsigned int v63;
  unsigned int v64;
  _BYTE v65[96];
  void *v66;
  _QWORD *v67;
  void *__p;
  _QWORD *v69;
  char v70;
  __n128 v71;
  uint64_t v72;
  __int16 v73;
  __int128 v74;
  uint64_t v75;
  _QWORD *v76;
  llvm *v77;
  uint64_t v78;
  unsigned int v79;
  void *v80;
  uint64_t v81;
  _QWORD v82[2];
  void *v83;
  uint64_t v84;
  _QWORD v85[6];
  uint64_t **v86;
  char v87;
  llvm *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  _QWORD v97[8];

  v97[6] = *MEMORY[0x24BDAC8D0];
  if (a6)
  {
    llvm::MemoryBuffer::getMemBuffer((uint64_t)a1, a2, (uint64_t)a1, a2, &v55);
  }
  else
  {
    v73 = 261;
    v71.n128_u64[0] = (unint64_t)a1;
    v71.n128_u64[1] = a2;
    llvm::MemoryBuffer::getMemBufferCopy(a1, a2, (uint64_t)&v71, 0, &v55);
  }
  llvm::SourceMgr::SourceMgr((llvm::SourceMgr *)&v52);
  v11 = v55;
  v55 = 0;
  v72 = 0;
  v71 = (__n128)(unint64_t)v11;
  if ((unint64_t)v53 >= v54)
  {
    v13 = std::vector<llvm::SourceMgr::SrcBuffer>::__push_back_slow_path<llvm::SourceMgr::SrcBuffer>((__n128 **)&v52, &v71);
  }
  else
  {
    llvm::SourceMgr::SrcBuffer::SrcBuffer(v53, &v71);
    v13 = (__n128 *)(v12 + 24);
  }
  v53 = v13;
  llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&v71);
  v47[0] = 0;
  v47[1] = 0;
  v47[2] = 0x1000000000;
  v47[3] = 0;
  v47[4] = 0;
  v47[5] = 0x1000000000;
  v47[6] = 0;
  v47[7] = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v86 = a3;
  v87 = 1;
  v89 = 0;
  v88 = 0;
  v90 = 0;
  v91 = 0;
  v92 = &v94;
  v93 = 0x600000000;
  v95 = v97;
  v71.n128_u64[0] = (unint64_t)&v86;
  v96 = 0x600000000;
  v14 = mlir::Lexer::Lexer((uint64_t ***)&v71.n128_u64[1], &v52, a3, 0);
  mlir::Lexer::lexToken((mlir::Lexer *)v14, (uint64_t)&v74);
  v78 = 0;
  v76 = v47;
  v77 = 0;
  v79 = 0;
  v80 = v82;
  v81 = 0;
  v82[1] = 0;
  v82[0] = 0;
  v83 = v85;
  v85[0] = "builtin";
  v85[1] = 7;
  v84 = 0x300000001;
  v45 = *(mlir::StringAttr ****)v71.n128_u64[0];
  v46 = &v71;
  v43 = v74;
  v44 = v75;
  if (mlir::detail::Parser::parseAttribute(&v45, a4))
  {
    v41 = *(__int128 *)((char *)&v46[3] + 8);
    v42 = v46[4].n128_u64[1];
    OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v41);
    v16 = OCGSize - MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v43);
    if (a5)
    {
      *a5 = v16;
    }
    else if (v16 != a2)
    {
      v17 = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v41);
      v40 = 257;
      mlir::detail::Parser::emitError((uint64_t)&v45, v17, (uint64_t)v39, &v60);
      if (v60)
      {
        LODWORD(v56) = 3;
        v57 = "found trailing characters: '";
        v58 = 28;
        v18 = &v56;
        v19 = (char *)v62;
        if (v63 >= v64)
        {
          v35 = v63 + 1;
          if (v62 <= &v56 && (char *)v62 + 24 * v63 > (char *)&v56)
          {
            v37 = (char *)&v56 - (_BYTE *)v62;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v35, 24);
            v19 = (char *)v62;
            v18 = (const void ***)((char *)v62 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v35, 24);
            v18 = &v56;
            v19 = (char *)v62;
          }
        }
        v20 = &v19[24 * v63];
        v21 = *(_OWORD *)v18;
        *((_QWORD *)v20 + 2) = v18[2];
        *(_OWORD *)v20 = v21;
        ++v63;
        if (v60)
        {
          v22 = a2 >= v16 ? v16 : a2;
          v59 = 261;
          v56 = (const void **)&a1[v22];
          v57 = (const char *)(a2 - v22);
          mlir::Diagnostic::operator<<((uint64_t)&v61, &v56);
          if (v60)
          {
            LODWORD(v56) = 3;
            v57 = "'";
            v58 = 1;
            v23 = &v56;
            v24 = (char *)v62;
            if (v63 >= v64)
            {
              v36 = v63 + 1;
              if (v62 <= &v56 && (char *)v62 + 24 * v63 > (char *)&v56)
              {
                v38 = (char *)&v56 - (_BYTE *)v62;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v36, 24);
                v24 = (char *)v62;
                v23 = (const void ***)((char *)v62 + v38);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v36, 24);
                v23 = &v56;
                v24 = (char *)v62;
              }
            }
            v25 = &v24[24 * v63];
            v26 = *(_OWORD *)v23;
            *((_QWORD *)v25 + 2) = v23[2];
            *(_OWORD *)v25 = v26;
            ++v63;
            if (v60)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v60);
          }
        }
      }
      if (v70)
      {
        v27 = __p;
        if (__p)
        {
          v28 = v69;
          v29 = __p;
          if (v69 != __p)
          {
            do
              v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
            while (v28 != v27);
            v29 = __p;
          }
          v69 = v27;
          operator delete(v29);
        }
        v30 = v66;
        if (v66)
        {
          v31 = v67;
          v32 = v66;
          if (v67 != v66)
          {
            do
            {
              v34 = *--v31;
              v33 = v34;
              *v31 = 0;
              if (v34)
                MEMORY[0x20BD002D4](v33, 0x1000C8077774924);
            }
            while (v31 != v30);
            v32 = v66;
          }
          v67 = v30;
          operator delete(v32);
        }
        if (v62 != v65)
          free(v62);
      }
    }
  }
  if (v83 != v85)
    free(v83);
  if (v80 != v82)
    free(v80);
  llvm::deallocate_buffer(v77, (void *)(8 * v79));
}

void mlir::parseType(char *a1, unint64_t a2, uint64_t **a3, unint64_t *a4, int a5)
{
  char *v9;
  uint64_t v10;
  __n128 *v11;
  uint64_t ***v12;
  uint64_t OCGSize;
  unint64_t v14;
  const char *v15;
  const void ***v16;
  char *v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  const void ***v21;
  char *v22;
  char *v23;
  __int128 v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  char v37[32];
  __int16 v38;
  __int128 v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __n128 *v44;
  _QWORD v45[8];
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  __n128 *v51;
  unint64_t v52;
  char *v53;
  const void **v54;
  const char *v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[96];
  void *v64;
  _QWORD *v65;
  void *__p;
  _QWORD *v67;
  char v68;
  __n128 v69;
  uint64_t v70;
  __int16 v71;
  __int128 v72;
  uint64_t v73;
  _QWORD *v74;
  llvm *v75;
  uint64_t v76;
  unsigned int v77;
  void *v78;
  uint64_t v79;
  _QWORD v80[2];
  void *v81;
  uint64_t v82;
  _QWORD v83[6];
  uint64_t **v84;
  char v85;
  llvm *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  _QWORD v95[7];

  v95[6] = *MEMORY[0x24BDAC8D0];
  if (a5)
  {
    llvm::MemoryBuffer::getMemBuffer((uint64_t)a1, a2, (uint64_t)a1, a2, &v53);
  }
  else
  {
    v71 = 261;
    v69.n128_u64[0] = (unint64_t)a1;
    v69.n128_u64[1] = a2;
    llvm::MemoryBuffer::getMemBufferCopy(a1, a2, (uint64_t)&v69, 0, &v53);
  }
  llvm::SourceMgr::SourceMgr((llvm::SourceMgr *)&v50);
  v9 = v53;
  v53 = 0;
  v70 = 0;
  v69 = (__n128)(unint64_t)v9;
  if ((unint64_t)v51 >= v52)
  {
    v11 = std::vector<llvm::SourceMgr::SrcBuffer>::__push_back_slow_path<llvm::SourceMgr::SrcBuffer>((__n128 **)&v50, &v69);
  }
  else
  {
    llvm::SourceMgr::SrcBuffer::SrcBuffer(v51, &v69);
    v11 = (__n128 *)(v10 + 24);
  }
  v51 = v11;
  llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&v69);
  v45[0] = 0;
  v45[1] = 0;
  v45[2] = 0x1000000000;
  v45[3] = 0;
  v45[4] = 0;
  v45[5] = 0x1000000000;
  v45[6] = 0;
  v45[7] = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v84 = a3;
  v85 = 1;
  v87 = 0;
  v86 = 0;
  v88 = 0;
  v89 = 0;
  v90 = &v92;
  v91 = 0x600000000;
  v93 = v95;
  v69.n128_u64[0] = (unint64_t)&v84;
  v94 = 0x600000000;
  v12 = mlir::Lexer::Lexer((uint64_t ***)&v69.n128_u64[1], &v50, a3, 0);
  mlir::Lexer::lexToken((mlir::Lexer *)v12, (uint64_t)&v72);
  v76 = 0;
  v74 = v45;
  v75 = 0;
  v77 = 0;
  v78 = v80;
  v79 = 0;
  v80[1] = 0;
  v80[0] = 0;
  v81 = v83;
  v83[0] = "builtin";
  v83[1] = 7;
  v82 = 0x300000001;
  v43 = *(_QWORD *)v69.n128_u64[0];
  v44 = &v69;
  v41 = v72;
  v42 = v73;
  if (mlir::detail::Parser::parseType((mlir::detail::Parser *)&v43))
  {
    v39 = *(__int128 *)((char *)&v44[3] + 8);
    v40 = v44[4].n128_u64[1];
    OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v39);
    v14 = OCGSize - MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v41);
    if (a4)
    {
      *a4 = v14;
    }
    else if (v14 != a2)
    {
      v15 = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v39);
      v38 = 257;
      mlir::detail::Parser::emitError((uint64_t)&v43, v15, (uint64_t)v37, &v58);
      if (v58)
      {
        LODWORD(v54) = 3;
        v55 = "found trailing characters: '";
        v56 = 28;
        v16 = &v54;
        v17 = (char *)v60;
        if (v61 >= v62)
        {
          v33 = v61 + 1;
          if (v60 <= &v54 && (char *)v60 + 24 * v61 > (char *)&v54)
          {
            v35 = (char *)&v54 - (_BYTE *)v60;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v33, 24);
            v17 = (char *)v60;
            v16 = (const void ***)((char *)v60 + v35);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v33, 24);
            v16 = &v54;
            v17 = (char *)v60;
          }
        }
        v18 = &v17[24 * v61];
        v19 = *(_OWORD *)v16;
        *((_QWORD *)v18 + 2) = v16[2];
        *(_OWORD *)v18 = v19;
        ++v61;
        if (v58)
        {
          v20 = a2 >= v14 ? v14 : a2;
          v57 = 261;
          v54 = (const void **)&a1[v20];
          v55 = (const char *)(a2 - v20);
          mlir::Diagnostic::operator<<((uint64_t)&v59, &v54);
          if (v58)
          {
            LODWORD(v54) = 3;
            v55 = "'";
            v56 = 1;
            v21 = &v54;
            v22 = (char *)v60;
            if (v61 >= v62)
            {
              v34 = v61 + 1;
              if (v60 <= &v54 && (char *)v60 + 24 * v61 > (char *)&v54)
              {
                v36 = (char *)&v54 - (_BYTE *)v60;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v34, 24);
                v22 = (char *)v60;
                v21 = (const void ***)((char *)v60 + v36);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v34, 24);
                v21 = &v54;
                v22 = (char *)v60;
              }
            }
            v23 = &v22[24 * v61];
            v24 = *(_OWORD *)v21;
            *((_QWORD *)v23 + 2) = v21[2];
            *(_OWORD *)v23 = v24;
            ++v61;
            if (v58)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
          }
        }
      }
      if (v68)
      {
        v25 = __p;
        if (__p)
        {
          v26 = v67;
          v27 = __p;
          if (v67 != __p)
          {
            do
              v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
            while (v26 != v25);
            v27 = __p;
          }
          v67 = v25;
          operator delete(v27);
        }
        v28 = v64;
        if (v64)
        {
          v29 = v65;
          v30 = v64;
          if (v65 != v64)
          {
            do
            {
              v32 = *--v29;
              v31 = v32;
              *v29 = 0;
              if (v32)
                MEMORY[0x20BD002D4](v31, 0x1000C8077774924);
            }
            while (v29 != v28);
            v30 = v64;
          }
          v65 = v28;
          operator delete(v30);
        }
        if (v60 != v63)
          free(v60);
      }
    }
  }
  if (v81 != v83)
    free(v81);
  if (v78 != v80)
    free(v78);
  llvm::deallocate_buffer(v75, (void *)(8 * v77));
}

void `anonymous namespace'::CustomDialectAsmParser::~CustomDialectAsmParser(_anonymous_namespace_::CustomDialectAsmParser *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::getNameLoc(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::emitError(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *(_BYTE *)(a1 + 24) = 1;
  mlir::detail::Parser::emitError(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::getBuilder(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::getCurrentLocation(uint64_t a1)
{
  return MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 56));
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::getEncodedSourceLoc(uint64_t a1, const char *a2)
{
  return mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 8, a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseArrow(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '->'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 13, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalArrow(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 13)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 13;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseLBrace(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '{'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 20, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalLBrace(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 20)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 20;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseRBrace(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '}'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 27, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalRBrace(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 27)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 27;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseColon(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected ':'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 15, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalColon(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 15)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 15;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseComma(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected ','";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 16, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalComma(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 16)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseEqual(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '='";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 18, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalEqual(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 18)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 18;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseLess(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '<'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 23, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalLess(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 23)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 23;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseGreater(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '>'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 19, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalGreater(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 19)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 19;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseQuestion(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '?'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 26, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalQuestion(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 26)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 26;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parsePlus(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '+'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 25, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalPlus(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 25)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 25;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseStar(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '*'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 30, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalStar(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 30)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 30;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseVerticalBar(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '|'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 31, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalVerticalBar(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 31)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 31;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalString(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  std::string v7;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 8);
  if (*(_DWORD *)(v4 + 56) != 11)
    return 0;
  if (a2)
  {
    mlir::Token::getStringValue((mlir::Token *)(v4 + 56), &v7);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v7;
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(_QWORD *)(v3 + 8);
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v7);
  *(std::string *)(*(_QWORD *)(v3 + 8) + 56) = v7;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseBase64Bytes(_QWORD *a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t first_not_of;
  unint64_t v8;
  unint64_t v9;
  uint64_t last_not_of;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  int8x16_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  std::string v36;
  _QWORD *v37;
  __int128 v38;
  _QWORD v39[4];
  __int16 v40;
  __int128 v41;
  uint64_t v42;
  void *v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD *v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
  v5 = a1[2];
  v6 = *(_QWORD *)(v5 + 8);
  if (*(_DWORD *)(v6 + 56) == 11)
  {
    if (a2)
    {
      v38 = *(_OWORD *)(v6 + 64);
      first_not_of = llvm::StringRef::find_first_not_of(&v38, "\"  \t\n\v\f\r", 8, 0);
      if (first_not_of >= *((_QWORD *)&v38 + 1))
        v8 = *((_QWORD *)&v38 + 1);
      else
        v8 = first_not_of;
      v9 = *((_QWORD *)&v38 + 1) - v8;
      *(_QWORD *)&v41 = v38 + v8;
      *((_QWORD *)&v41 + 1) = *((_QWORD *)&v38 + 1) - v8;
      last_not_of = llvm::StringRef::find_last_not_of(&v41, "\" \t\n\v\f\r", 7, 0xFFFFFFFFFFFFFFFFLL);
      if ((unint64_t)(last_not_of + 1) < *((_QWORD *)&v41 + 1))
        v11 = last_not_of + 1;
      else
        v11 = *((_QWORD *)&v41 + 1);
      v12 = *((_QWORD *)&v41 + 1) - v9 + v11;
      if (*((_QWORD *)&v41 + 1) >= v12)
        v13 = v12;
      else
        v13 = *((_QWORD *)&v41 + 1);
      llvm::decodeBase64(v41, v13, a2, (uint64_t *)&v37);
      if (v37)
      {
        v35 = v37;
        v37 = 0;
        llvm::toString(&v35, &v36, v14, v15);
        v40 = 260;
        v39[0] = &v36;
        (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t, _QWORD *))(*a1 + 24))(&v41, a1, v4, v39);
        v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
        if ((_QWORD)v41)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
        if (v49)
        {
          v17 = __p;
          if (__p)
          {
            v18 = v48;
            v19 = __p;
            if (v48 != __p)
            {
              do
                v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
              while (v18 != v17);
              v19 = __p;
            }
            v48 = v17;
            operator delete(v19);
          }
          v20 = v45;
          if (v45)
          {
            v21 = v46;
            v22 = v45;
            if (v46 != v45)
            {
              do
              {
                v24 = *--v21;
                v23 = v24;
                *v21 = 0;
                if (v24)
                  MEMORY[0x20BD002D4](v23, 0x1000C8077774924);
              }
              while (v21 != v20);
              v22 = v45;
            }
            v46 = v20;
            operator delete(v22);
          }
          if (v43 != v44)
            free(v43);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        if (v35)
          (*(void (**)(_QWORD *))(*v35 + 8))(v35);
        if (v37)
          (*(void (**)(_QWORD *))(*v37 + 8))(v37);
        return v16;
      }
      v5 = a1[2];
      v6 = *(_QWORD *)(v5 + 8);
    }
    mlir::Lexer::lexToken((mlir::Lexer *)(v6 + 8), (uint64_t)&v41);
    v33 = *(_QWORD *)(v5 + 8);
    *(_OWORD *)(v33 + 56) = v41;
    *(_QWORD *)(v33 + 72) = v42;
    return 1;
  }
  v39[0] = "expected string";
  v40 = 259;
  (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t, _QWORD *))(*a1 + 24))(&v41, a1, v4, v39);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if ((_QWORD)v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v49)
  {
    v25 = __p;
    if (__p)
    {
      v26 = v48;
      v27 = __p;
      if (v48 != __p)
      {
        do
          v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        v27 = __p;
      }
      v48 = v25;
      operator delete(v27);
    }
    v28 = v45;
    if (v45)
    {
      v29 = v46;
      v30 = v45;
      if (v46 != v45)
      {
        do
        {
          v32 = *--v29;
          v31 = v32;
          *v29 = 0;
          if (v32)
            MEMORY[0x20BD002D4](v31, 0x1000C8077774924);
        }
        while (v29 != v28);
        v30 = v45;
      }
      v46 = v28;
      operator delete(v30);
    }
    if (v43 != v44)
      free(v43);
  }
  return v16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseLParen(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '('";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 21, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalLParen(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 21)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 21;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseRParen(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected ')'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 28, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalRParen(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 28)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 28;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseLSquare(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '['";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 22, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalLSquare(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 22)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 22;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseRSquare(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected ']'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 29, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalRSquare(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 29)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 29;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseEllipsis(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '...'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 17, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalEllipsis(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 17)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 17;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseFloat(_QWORD *a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  llvm::APFloatBase *OCGSize;
  llvm::APFloatBase *v9;
  uint64_t FloatingPointValue;
  char v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  llvm::APFloatBase *v19;
  llvm::APFloatBase *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  __int128 v39;
  uint64_t v40;
  __int16 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  void *v46;
  char v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  void *__p;
  _QWORD *v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v4 = a1[2];
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_DWORD *)(v5 + 56);
  if (v6 == 24)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v44);
    v7 = *(_QWORD *)(v4 + 8);
    *(_OWORD *)(v7 + 56) = v44;
    *(_QWORD *)(v7 + 72) = v45;
    v5 = *(_QWORD *)(a1[2] + 8);
  }
  v42 = *(_OWORD *)(v5 + 56);
  v43 = *(_QWORD *)(v5 + 72);
  OCGSize = (llvm::APFloatBase *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v42);
  if ((_DWORD)v42 == 10)
  {
    v17 = v6 == 24;
    LOBYTE(v44) = 0;
    v47 = 0;
    v18 = a1[2];
    v19 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(OCGSize);
    v20 = (llvm::APFloatBase *)mlir::detail::Parser::parseFloatFromIntegerLiteral(v18, (uint64_t)&v44, (MirInfoChannelAssignment *)&v42, v17, v19, 0x40u);
    if ((_BYTE)v20)
    {
      v21 = a1[2];
      mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v21 + 8) + 8), (uint64_t)&v39);
      v22 = *(_QWORD *)(v21 + 8);
      *(_OWORD *)(v22 + 56) = v39;
      *(_QWORD *)(v22 + 72) = v40;
      *a2 = llvm::APFloat::convertToDouble((llvm::APFloat *)&v44);
      v16 = 1;
      if (!v47)
        return v16;
    }
    else
    {
      v16 = 0;
      if (!v47)
        return v16;
    }
    v37 = (void *)*((_QWORD *)&v44 + 1);
    if (llvm::APFloatBase::PPCDoubleDouble(v20) == v37)
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v44 + 8));
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v44 + 8));
  }
  else
  {
    v9 = OCGSize;
    if ((_DWORD)v42 == 9)
    {
      FloatingPointValue = mlir::Token::getFloatingPointValue((mlir::Token *)&v42);
      if (v11)
      {
        v12 = *(double *)&FloatingPointValue;
        v13 = a1[2];
        mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v13 + 8) + 8), (uint64_t)&v44);
        v14 = *(_QWORD *)(v13 + 8);
        *(_OWORD *)(v14 + 56) = v44;
        *(_QWORD *)(v14 + 72) = v45;
        v15 = -v12;
        if (v6 != 24)
          v15 = v12;
        *a2 = v15;
        return 1;
      }
      *(_QWORD *)&v39 = "floating point value too large";
      v41 = 259;
      (*(void (**)(__int128 *__return_ptr, _QWORD *, llvm::APFloatBase *, __int128 *))(*a1 + 24))(&v44, a1, v9, &v39);
      v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
      if ((_QWORD)v44)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
      if (v53)
      {
        v31 = __p;
        if (__p)
        {
          v32 = v52;
          v33 = __p;
          if (v52 != __p)
          {
            do
              v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
            while (v32 != v31);
            v33 = __p;
          }
          v52 = v31;
          operator delete(v33);
        }
        v26 = v49;
        if (!v49)
          goto LABEL_45;
        v34 = v50;
        v28 = v49;
        if (v50 == v49)
        {
LABEL_44:
          v50 = v26;
          operator delete(v28);
LABEL_45:
          if (v46 != &v48)
            free(v46);
          return v16;
        }
        do
        {
          v36 = *--v34;
          v35 = v36;
          *v34 = 0;
          if (v36)
            MEMORY[0x20BD002D4](v35, 0x1000C8077774924);
        }
        while (v34 != v26);
LABEL_43:
        v28 = v49;
        goto LABEL_44;
      }
    }
    else
    {
      *(_QWORD *)&v39 = "expected floating point literal";
      v41 = 259;
      (*(void (**)(__int128 *__return_ptr, _QWORD *, llvm::APFloatBase *, __int128 *))(*a1 + 24))(&v44, a1, OCGSize, &v39);
      v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
      if ((_QWORD)v44)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
      if (v53)
      {
        v23 = __p;
        if (__p)
        {
          v24 = v52;
          v25 = __p;
          if (v52 != __p)
          {
            do
              v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
            while (v24 != v23);
            v25 = __p;
          }
          v52 = v23;
          operator delete(v25);
        }
        v26 = v49;
        if (!v49)
          goto LABEL_45;
        v27 = v50;
        v28 = v49;
        if (v50 == v49)
          goto LABEL_44;
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        goto LABEL_43;
      }
    }
  }
  return v16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalInteger(uint64_t a1, llvm::APInt *a2)
{
  return mlir::detail::Parser::parseOptionalInteger(*(mlir::detail::Parser **)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseCommaSeparatedList(uint64_t a1, int a2, unsigned __int8 (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return mlir::detail::Parser::parseCommaSeparatedList(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseKeyword(_QWORD *a1, const void **a2, const char *a3, const void ***a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  const void ***v12;
  char *v13;
  char *v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  const char *v26;
  __int16 v27;
  _QWORD v28[2];
  const void **v29;
  const char *v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  _BYTE v34[16];
  void *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE v38[96];
  void *v39;
  _QWORD *v40;
  void *__p;
  _QWORD *v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v28[0] = a2;
  v28[1] = a3;
  v5 = a1[2];
  if (*(_DWORD *)(*(_QWORD *)(v5 + 8) + 56) == 2)
    return mlir::detail::Parser::codeCompleteExpectedTokens(v5, (uint64_t)v28, 1);
  v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(_QWORD *, const void **, const char *))(*a1 + 376))(a1, a2, a3))
    return 1;
  v26 = "expected '";
  v27 = 259;
  (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, const char **))(*a1 + 24))(&v33, a1, v10, &v26);
  if (v33)
  {
    v32 = 261;
    v29 = a2;
    v30 = a3;
    mlir::Diagnostic::operator<<((uint64_t)v34, &v29);
    if (v33)
    {
      LODWORD(v29) = 3;
      v30 = "'";
      v31 = 1;
      v12 = &v29;
      v13 = (char *)v35;
      if (v36 >= v37)
      {
        v24 = v36 + 1;
        if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
        {
          v25 = (char *)&v29 - (_BYTE *)v35;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v24, 24);
          v13 = (char *)v35;
          v12 = (const void ***)((char *)v35 + v25);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v24, 24);
          v12 = &v29;
          v13 = (char *)v35;
        }
      }
      v14 = &v13[24 * v36];
      v15 = *(_OWORD *)v12;
      *((_QWORD *)v14 + 2) = v12[2];
      *(_OWORD *)v14 = v15;
      ++v36;
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, a4);
    }
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  if (v43)
  {
    v16 = __p;
    if (__p)
    {
      v17 = v42;
      v18 = __p;
      if (v42 != __p)
      {
        do
          v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        v18 = __p;
      }
      v42 = v16;
      operator delete(v18);
    }
    v19 = v39;
    if (v39)
    {
      v20 = v40;
      v21 = v39;
      if (v40 != v39)
      {
        do
        {
          v23 = *--v20;
          v22 = v23;
          *v20 = 0;
          if (v23)
            MEMORY[0x20BD002D4](v22, 0x1000C8077774924);
        }
        while (v20 != v19);
        v21 = v39;
      }
      v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38)
      free(v35);
  }
  return v6;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalKeyword(uint64_t a1, void *__s2, size_t __n)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v11;
  _QWORD v12[2];
  __int128 v13;
  uint64_t v14;

  v12[0] = __s2;
  v12[1] = __n;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(_DWORD *)(v7 + 56);
  if (v8 == 12 || v8 == 3)
  {
LABEL_9:
    if (*(_QWORD *)(v7 + 72) != __n || __n && memcmp(*(const void **)(v7 + 64), __s2, __n))
      return 0;
    mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v13);
    v11 = *(_QWORD *)(v6 + 8);
    *(_OWORD *)(v11 + 56) = v13;
    *(_QWORD *)(v11 + 72) = v14;
    return 1;
  }
  if (v8 == 2)
    return mlir::detail::Parser::codeCompleteOptionalTokens(v6, (uint64_t)v12, 1);
  result = mlir::Token::isKeyword((mlir::Token *)(v7 + 56));
  if ((_DWORD)result)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(v6 + 8);
    goto LABEL_9;
  }
  return result;
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalKeyword(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  int v5;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v5 = *(_DWORD *)(v4 + 56);
  if (v5 != 3 && v5 != 12)
  {
    result = mlir::Token::isKeyword((mlir::Token *)(v4 + 56));
    if (!result)
      return result;
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  }
  *a2 = *(_OWORD *)(v4 + 64);
  v8 = *(_QWORD *)(a1 + 16);
  mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v8 + 8) + 8), (uint64_t)&v10);
  v9 = *(_QWORD *)(v8 + 8);
  *(_OWORD *)(v9 + 56) = v10;
  *(_QWORD *)(v9 + 72) = v11;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalKeyword(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  const void *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD **)(v8 + 8);
  v10 = *((_DWORD *)v9 + 14);
  if (v10 == 12 || v10 == 3)
    goto LABEL_9;
  if (v10 == 2)
    return mlir::detail::Parser::codeCompleteOptionalTokens(v8, a3, a4);
  result = mlir::Token::isKeyword((mlir::Token *)(v9 + 7));
  if ((_DWORD)result)
  {
    v9 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
LABEL_9:
    v13 = (const void *)v9[8];
    v14 = v9[9];
    if (a4)
    {
      if (v14)
      {
        v15 = 16 * a4;
        v16 = a3;
        while (*(_QWORD *)(v16 + 8) != v14 || memcmp(*(const void **)v16, v13, v14))
        {
          v16 += 16;
          v15 -= 16;
          if (!v15)
            goto LABEL_20;
        }
      }
      else
      {
        v17 = 16 * a4;
        v16 = a3;
        while (*(_QWORD *)(v16 + 8))
        {
          v16 += 16;
          v17 -= 16;
          if (!v17)
          {
LABEL_20:
            v16 = a3 + 16 * a4;
            break;
          }
        }
      }
    }
    else
    {
      v16 = a3;
    }
    if (a4 == (v16 - a3) >> 4)
    {
      return 0;
    }
    else
    {
      *a2 = v13;
      a2[1] = v14;
      v18 = *(_QWORD *)(a1 + 16);
      mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v18 + 8) + 8), (uint64_t)&v20);
      v19 = *(_QWORD *)(v18 + 8);
      *(_OWORD *)(v19 + 56) = v20;
      *(_QWORD *)(v19 + 72) = v21;
      return 1;
    }
  }
  return result;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalKeywordOrString(uint64_t a1, uint64_t a2)
{
  void *v4;
  size_t v5;
  __int128 *p_dst;
  size_t v8;
  size_t v9;
  __int128 __dst;
  unint64_t v11;
  void *__src;
  size_t __len;

  __src = 0;
  __len = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(_QWORD *)a1 + 384))(a1, &__src))
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 248))(a1, a2);
  v4 = __src;
  if (!__src)
  {
    __dst = 0uLL;
    v11 = 0;
    if (*(char *)(a2 + 23) < 0)
      goto LABEL_15;
    goto LABEL_16;
  }
  v5 = __len;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v8 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v8 = __len | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v11 = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v11) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_13:
    memmove(p_dst, v4, v5);
  *((_BYTE *)p_dst + v5) = 0;
  if (*(char *)(a2 + 23) < 0)
LABEL_15:
    operator delete(*(void **)a2);
LABEL_16:
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v11;
  return 1;
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseAttribute(uint64_t a1, llvm::APFloatBase **a2, _QWORD *a3)
{
  llvm::APFloatBase *v4;

  v4 = mlir::detail::Parser::parseAttribute(*(mlir::StringAttr *****)(a1 + 16), a3);
  *a2 = v4;
  return v4 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseCustomAttributeWithFallback(uint64_t a1, llvm::APFloatBase **a2, _QWORD *a3, uint64_t (*a4)(uint64_t, llvm::APFloatBase **), uint64_t a5)
{
  uint64_t v6;
  llvm::APFloatBase *v7;

  v6 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(*(_QWORD *)(v6 + 8) + 56) != 5)
    return a4(a5, a2);
  v7 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)v6, a3);
  *a2 = v7;
  return v7 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalAttribute(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return mlir::detail::Parser::parseOptionalAttribute(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalAttribute(uint64_t a1, llvm::APFloatBase **a2, _QWORD *a3)
{
  return mlir::detail::Parser::parseOptionalAttribute(*(_QWORD *)(a1 + 16), a2, a3);
}

{
  return mlir::detail::Parser::parseOptionalAttribute(*(_QWORD *)(a1 + 16), a2, a3);
}

{
  return mlir::detail::Parser::parseOptionalAttribute(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalAttrDict(uint64_t a1, mlir::NamedAttrList *a2)
{
  mlir::detail::Parser *v2;

  v2 = *(mlir::detail::Parser **)(a1 + 16);
  if (*(_DWORD *)(*((_QWORD *)v2 + 1) + 56) == 20)
    return mlir::detail::Parser::parseAttributeDict(v2, a2);
  else
    return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalAttrDictWithKeyword(mlir::detail::Parser **a1, mlir::NamedAttrList *a2)
{
  if ((*((unsigned __int8 (**)(mlir::detail::Parser **, const char *, uint64_t))*a1 + 47))(a1, "attributes", 10))
  {
    return mlir::detail::Parser::parseAttributeDict(a1[2], a2);
  }
  else
  {
    return 1;
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseAffineMap(uint64_t a1, mlir::AffineMap *a2)
{
  return mlir::detail::Parser::parseAffineMapReference(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseAffineExpr(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  return mlir::detail::Parser::parseAffineExprReference(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseIntegerSet(uint64_t a1, mlir::IntegerSet *a2)
{
  return mlir::detail::Parser::parseIntegerSetReference(*(mlir::detail::Parser **)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalSymbolName(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  mlir::StringAttr **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string __p;
  __int128 v13;
  uint64_t v14;
  __int16 v15;
  __int128 v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1[2] + 8);
  v16 = *(_OWORD *)(v2 + 56);
  v17 = *(_QWORD *)(v2 + 72);
  if ((_DWORD)v16 != 4)
    return 0;
  v5 = (mlir::StringAttr **)(*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  mlir::Token::getSymbolReference((mlir::Token *)&v16, &__p);
  v15 = 260;
  *(_QWORD *)&v13 = &__p;
  *a2 = mlir::Builder::getStringAttr(v5, (mlir::MLIRContext *)&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = a1[2];
  mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v6 + 8) + 8), (uint64_t)&v13);
  v7 = *(_QWORD *)(v6 + 8);
  *(_OWORD *)(v7 + 56) = v13;
  *(_QWORD *)(v7 + 72) = v14;
  v8 = *(_QWORD *)(*(_QWORD *)(a1[2] + 8) + 128);
  if (v8)
  {
    v9 = mlir::SymbolRefAttr::get(*a2);
    *(_QWORD *)&v13 = mlir::Token::getLocRange((mlir::Token *)&v16);
    *((_QWORD *)&v13 + 1) = v10;
    mlir::AsmParserState::addUses(v8, v9, (char *)&v13, 1);
  }
  return 1;
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseType(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = mlir::detail::Parser::parseType(*(mlir::detail::Parser **)(a1 + 16));
  *a2 = v3;
  return v3 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseCustomTypeWithFallback(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  mlir::detail::Parser *v5;
  uint64_t v6;

  v5 = *(mlir::detail::Parser **)(a1 + 16);
  if (*(_DWORD *)(*((_QWORD *)v5 + 1) + 56) != 8)
    return a3(a4, a2);
  v6 = mlir::detail::Parser::parseType(v5);
  *a2 = v6;
  return v6 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalType(uint64_t a1, mlir::Type *a2)
{
  return mlir::detail::Parser::parseOptionalType(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseArrowTypeList(mlir::detail::Parser **a1, uint64_t a2)
{
  return (*((unsigned __int8 (**)(mlir::detail::Parser **))*a1 + 7))(a1)
      && mlir::detail::Parser::parseFunctionResultTypes(a1[2], a2) != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalArrowTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 8);
  if (*(_DWORD *)(v3 + 56) != 13)
    return 1;
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
  v6 = *(_QWORD *)(v2 + 8);
  *(_OWORD *)(v6 + 56) = v8;
  *(_QWORD *)(v6 + 72) = v9;
  return mlir::detail::Parser::parseFunctionResultTypes(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseColonType(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v7;
  __int16 v8;

  v4 = *(_QWORD *)(a1 + 16);
  v7 = "expected ':'";
  v8 = 259;
  if (!mlir::detail::Parser::parseToken(v4, 15, (uint64_t)&v7))
    return 0;
  v5 = mlir::detail::Parser::parseType(*(mlir::detail::Parser **)(a1 + 16));
  *a2 = v5;
  return v5 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseColonTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const char *v6;
  __int16 v7;

  v4 = *(_QWORD *)(a1 + 16);
  v6 = "expected ':'";
  v7 = 259;
  if (mlir::detail::Parser::parseToken(v4, 15, (uint64_t)&v6))
    return mlir::detail::Parser::parseTypeListNoParens(*(_QWORD *)(a1 + 16), a2);
  else
    return 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalColonTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 8);
  if (*(_DWORD *)(v3 + 56) != 15)
    return 1;
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
  v6 = *(_QWORD *)(v2 + 8);
  *(_OWORD *)(v6 + 56) = v8;
  *(_QWORD *)(v6 + 72) = v9;
  return mlir::detail::Parser::parseTypeListNoParens(*(_QWORD *)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseDimensionList(uint64_t a1, uint64_t a2, char a3, int a4)
{
  return mlir::detail::Parser::parseDimensionListRanked(*(mlir::detail::Parser **)(a1 + 16), a2, a3, a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseXInDimensionList(uint64_t a1)
{
  return mlir::detail::Parser::parseXInDimensionList(*(mlir::detail::Parser **)(a1 + 16));
}

void mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseResourceHandle(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  const void ***v8;
  char *v9;
  char *v10;
  __int128 v11;
  const void **v12;
  const char *v13;
  const void ***v14;
  char *v15;
  char *v16;
  __int128 v17;
  int8x16_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  char v31[32];
  __int16 v32;
  const void **v33;
  const char *v34;
  uint64_t v35;
  __int16 v36;
  int8x16_t *v37;
  uint64_t v38;
  void *v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE v42[96];
  void *v43;
  _QWORD *v44;
  void *__p;
  _QWORD *v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(a2)
    && (v6 = (_QWORD *)mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(a2)) != 0)
  {
    v37 = 0;
    v38 = 0;
    mlir::detail::Parser::parseResourceHandle(*(_QWORD *)(a1 + 16), v6, &v37, (uint64_t)a3);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
    v32 = 257;
    mlir::detail::Parser::emitError(v7, (uint64_t)v31, &v37);
    if (!v37)
      goto LABEL_11;
    LODWORD(v33) = 3;
    v34 = "dialect '";
    v35 = 9;
    v8 = &v33;
    v9 = (char *)v39;
    if (v40 >= v41)
    {
      v27 = v40 + 1;
      if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
      {
        v29 = (char *)&v33 - (_BYTE *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
        v9 = (char *)v39;
        v8 = (const void ***)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
        v8 = &v33;
        v9 = (char *)v39;
      }
    }
    v10 = &v9[24 * v40];
    v11 = *(_OWORD *)v8;
    *((_QWORD *)v10 + 2) = v8[2];
    *(_OWORD *)v10 = v11;
    ++v40;
    if (!v37)
      goto LABEL_11;
    v12 = *(const void ***)(a2 + 8);
    v13 = *(const char **)(a2 + 16);
    v36 = 261;
    v33 = v12;
    v34 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    if (v37)
    {
      LODWORD(v33) = 3;
      v34 = "' does not expect resource handles";
      v35 = 34;
      v14 = &v33;
      v15 = (char *)v39;
      if (v40 >= v41)
      {
        v28 = v40 + 1;
        if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
        {
          v30 = (char *)&v33 - (_BYTE *)v39;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
          v15 = (char *)v39;
          v14 = (const void ***)((char *)v39 + v30);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
          v14 = &v33;
          v15 = (char *)v39;
        }
      }
      v16 = &v15[24 * v40];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = v14[2];
      *(_OWORD *)v16 = v17;
      ++v40;
      v18 = v37;
      *a3 = 0;
      a3[24] = 0;
      if (v18)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
    }
    else
    {
LABEL_11:
      *a3 = 0;
      a3[24] = 0;
    }
    if (v47)
    {
      v19 = __p;
      if (__p)
      {
        v20 = v46;
        v21 = __p;
        if (v46 != __p)
        {
          do
            v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          v21 = __p;
        }
        v46 = v19;
        operator delete(v21);
      }
      v22 = v43;
      if (v43)
      {
        v23 = v44;
        v24 = v43;
        if (v44 != v43)
        {
          do
          {
            v26 = *--v23;
            v25 = v26;
            *v23 = 0;
            if (v26)
              MEMORY[0x20BD002D4](v25, 0x1000C8077774924);
          }
          while (v23 != v22);
          v24 = v43;
        }
        v44 = v22;
        operator delete(v24);
      }
      if (v39 != v42)
        free(v39);
    }
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::pushCyclicParsing(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[16];
  unsigned __int8 v9;

  v7 = a2;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>((int64x2_t *)(v2 + 88), &v7, (uint64_t)v8);
  v3 = v9;
  if (v9)
  {
    v4 = v7;
    v5 = *(unsigned int *)(v2 + 120);
    if (v5 >= *(_DWORD *)(v2 + 124))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 112, (void *)(v2 + 128), v5 + 1, 8);
      LODWORD(v5) = *(_DWORD *)(v2 + 120);
    }
    *(_QWORD *)(*(_QWORD *)(v2 + 112) + 8 * v5) = v4;
    ++*(_DWORD *)(v2 + 120);
  }
  return v3;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::popCyclicParsing(uint64_t result)
{
  int32x2_t *v1;
  __int32 v2;
  int32x2_t v3;
  uint64_t v4;
  uint64_t v5;
  __int32 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;

  v1 = *(int32x2_t **)(*(_QWORD *)(result + 16) + 8);
  v2 = v1[13].i32[0];
  if (v2)
  {
    v3 = v1[11];
    v4 = v1[15].u32[0];
    v5 = *(_QWORD *)(*(_QWORD *)&v1[14] + 8 * v4 - 8);
    v6 = v2 - 1;
    LODWORD(v7) = ((v5 >> 4) ^ (v5 >> 9)) & (v2 - 1);
    v8 = (uint64_t *)(*(_QWORD *)&v3 + 8 * v7);
    v9 = *v8;
    if (v5 == *v8)
    {
LABEL_3:
      *v8 = -8192;
      v1[12] = vadd_s32(v1[12], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v10 = 1;
      while (v9 != -4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & v6;
        v9 = *(_QWORD *)(*(_QWORD *)&v3 + 8 * v7);
        if (v5 == v9)
        {
          v8 = (uint64_t *)(*(_QWORD *)&v3 + 8 * v7);
          goto LABEL_3;
        }
      }
    }
    v1[15].i32[0] = v4 - 1;
  }
  else
  {
    --v1[15].i32[0];
  }
  return result;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseKeywordOrCompletion(mlir::AsmParser *a1, llvm::StringRef *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
  if (*(_DWORD *)(v2 + 56) != 2 || *(_QWORD *)(v2 + 72))
    return mlir::AsmParser::parseKeyword(a1, a2);
  *(_QWORD *)a2 = &byte_207AF6795;
  *((_QWORD *)a2 + 1) = 0;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::codeCompleteExpectedTokens(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;

  result = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(result + 8);
  if (*(_DWORD *)(v4 + 56) == 2 && !*(_QWORD *)(v4 + 72))
    return mlir::detail::Parser::codeCompleteExpectedTokens(result, a2, a3);
  return result;
}

uint64_t `anonymous namespace'::CustomDialectAsmParser::getFullSymbolSpec(_anonymous_namespace_::CustomDialectAsmParser *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmDialectInterface]";
      v23 = 77;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::OpAsmDialectInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v21;
    }
  }
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4)
  {
    v5 = v2[382];
    LODWORD(v6) = ((v5 >> 4) ^ (v5 >> 9)) & (v4 - 1);
    v7 = (uint64_t *)(v3 + 16 * v6);
    v8 = *v7;
    if (*v7 == v5)
      goto LABEL_9;
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v4 - 1);
      v8 = *(_QWORD *)(v3 + 16 * v6);
      if (v8 == v5)
      {
        v7 = (uint64_t *)(v3 + 16 * v6);
        goto LABEL_9;
      }
    }
  }
  v7 = (uint64_t *)(v3 + 16 * v4);
LABEL_9:
  if (v7 == (uint64_t *)(v3 + 16 * v4))
    return 0;
  else
    return v7[1];
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseExtendedAttr(mlir::Type)::$_0::operator() const(llvm::StringRef,llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  const char *v3;
  _BYTE v4[32];
  __int16 v5;

  v2 = *(_QWORD *)a1;
  v3 = **(const char ***)(a1 + 8);
  v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseExtendedType(void)::$_0::operator() const(llvm::StringRef,llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  const char *v3;
  _BYTE v4[32];
  __int16 v5;

  v2 = *(_QWORD *)a1;
  v3 = **(const char ***)(a1 + 8);
  v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

uint64_t ***mlir::Lexer::Lexer(uint64_t ***result, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t **v6;

  *result = a2;
  result[1] = a3;
  result[2] = 0;
  result[3] = 0;
  result[5] = 0;
  v4 = **a2;
  v5 = *(uint64_t ***)(v4 + 8);
  v6 = (uint64_t **)(*(_QWORD *)(v4 + 16) - (_QWORD)v5);
  result[2] = v5;
  result[3] = v6;
  result[4] = v5;
  if (a4)
    result[5] = *(uint64_t ***)(a4 + 8);
  return result;
}

uint64_t mlir::Lexer::getEncodedSourceLocation(uint64_t a1, const char *a2)
{
  int v2;
  llvm::SourceMgr::SrcBuffer **v4;
  llvm::SourceMgr::SrcBuffer *v5;
  unsigned int LineNumber;
  uint64_t v7;
  mlir::StringAttr *v8;
  const char *v9;
  unint64_t v10;

  v2 = (int)a2;
  v4 = *(llvm::SourceMgr::SrcBuffer ***)a1;
  v5 = **(llvm::SourceMgr::SrcBuffer ***)a1;
  LineNumber = llvm::SourceMgr::SrcBuffer::getLineNumber(v5, a2);
  v7 = v2 - llvm::SourceMgr::SrcBuffer::getPointerForLineNumber((unint64_t **)v5, LineNumber) + 1;
  v8 = *(mlir::StringAttr **)(a1 + 8);
  v9 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)*v4 + 16))(*(_QWORD *)*v4);
  return mlir::FileLineColLoc::get(v8, v9, v10, LineNumber, v7);
}

void mlir::Lexer::emitError(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::SourceMgr::SrcBuffer **v8;
  llvm::SourceMgr::SrcBuffer *v9;
  unsigned int LineNumber;
  uint64_t v11;
  uint64_t v12;
  mlir::StringAttr *v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  void *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v8 = *(llvm::SourceMgr::SrcBuffer ***)a1;
  v9 = **(llvm::SourceMgr::SrcBuffer ***)a1;
  LineNumber = llvm::SourceMgr::SrcBuffer::getLineNumber(v9, a2);
  v11 = a2
      - llvm::SourceMgr::SrcBuffer::getPointerForLineNumber((unint64_t **)v9, LineNumber)
      + 1;
  v12 = *(_QWORD *)*v8;
  v13 = *(mlir::StringAttr **)(a1 + 8);
  v14 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  v16 = mlir::FileLineColLoc::get(v13, v14, v15, LineNumber, v11);
  mlir::emitError(v16, a3, (uint64_t)v26);
  if (v26[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
  if (v33)
  {
    v17 = __p;
    if (__p)
    {
      v18 = v32;
      v19 = __p;
      if (v32 != __p)
      {
        do
          v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        v19 = __p;
      }
      v32 = v17;
      operator delete(v19);
    }
    v20 = v29;
    if (v29)
    {
      v21 = v30;
      v22 = v29;
      if (v30 != v29)
      {
        do
        {
          v24 = *--v21;
          v23 = v24;
          *v21 = 0;
          if (v24)
            MEMORY[0x20BD002D4](v23, 0x1000C8077774924);
        }
        while (v21 != v20);
        v22 = v29;
      }
      v30 = v20;
      operator delete(v22);
    }
    if (v27 != &v28)
      free(v27);
  }
  v25 = *(_QWORD *)(a1 + 32) - (_QWORD)a2;
  *(_DWORD *)a4 = 1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = v25;
}

void mlir::Lexer::lexToken(mlir::Lexer *this@<X0>, uint64_t a2@<X8>)
{
  const char *v3;
  const char *v4;
  const char *v6;
  unsigned int v7;
  char *v8;
  int v9;
  int v11;
  int v12;
  int v13;
  _QWORD v14[4];
  __int16 v15;

  v4 = (const char *)*((_QWORD *)this + 4);
  v3 = (const char *)*((_QWORD *)this + 5);
  if (v4 != v3)
  {
    do
    {
      v6 = v4 + 1;
      *((_QWORD *)this + 4) = v4 + 1;
      v7 = *v4;
      switch(*v4)
      {
        case 0:
          if (v4 != (const char *)(*((_QWORD *)this + 2) + *((_QWORD *)this + 3)))
            goto LABEL_4;
          *(_DWORD *)a2 = 0;
          goto LABEL_56;
        case 9:
        case 0xA:
        case 0xD:
        case 0x20:
          goto LABEL_4;
        case 0x21:
        case 0x25:
        case 0x5E:
          goto LABEL_25;
        case 0x22:
          mlir::Lexer::lexString(this, v4, a2);
          return;
        case 0x23:
          if (*v6 == 45 && v4[2] == 125)
          {
            *((_QWORD *)this + 4) = v4 + 3;
            v12 = 33;
            goto LABEL_48;
          }
LABEL_25:
          mlir::Lexer::lexPrefixedIdentifier(this, v4, a2);
          return;
        case 0x28:
          v13 = 21;
          goto LABEL_55;
        case 0x29:
          v13 = 28;
          goto LABEL_55;
        case 0x2A:
          v13 = 30;
          goto LABEL_55;
        case 0x2B:
          v13 = 25;
          goto LABEL_55;
        case 0x2C:
          v13 = 16;
          goto LABEL_55;
        case 0x2D:
          if (*v6 == 62)
          {
            *((_QWORD *)this + 4) = v4 + 2;
            *(_DWORD *)a2 = 13;
            *(_QWORD *)(a2 + 8) = v4;
            *(_QWORD *)(a2 + 16) = 2;
            return;
          }
          v13 = 24;
          goto LABEL_55;
        case 0x2E:
          if (v6 != (const char *)(*((_QWORD *)this + 2) + *((_QWORD *)this + 3)) && *v6 == 46 && v4[2] == 46)
          {
            *((_QWORD *)this + 4) = v4 + 3;
            v12 = 17;
            goto LABEL_48;
          }
          v14[0] = "expected three consecutive dots for an ellipsis";
          v15 = 259;
          mlir::Lexer::emitError((uint64_t)this, v6, (uint64_t)v14, a2);
          return;
        case 0x2F:
          if (*v6 != 47)
            goto LABEL_60;
          v8 = (char *)(v4 + 2);
          break;
        case 0x30:
        case 0x31:
        case 0x32:
        case 0x33:
        case 0x34:
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x39:
          mlir::Lexer::lexNumber((uint64_t)this, v4, a2);
          return;
        case 0x3A:
          v13 = 15;
          goto LABEL_55;
        case 0x3C:
          v13 = 23;
          goto LABEL_55;
        case 0x3D:
          v13 = 18;
          goto LABEL_55;
        case 0x3E:
          v13 = 19;
          goto LABEL_55;
        case 0x3F:
          v13 = 26;
          goto LABEL_55;
        case 0x40:
          mlir::Lexer::lexAtIdentifier(this, v4, a2);
          return;
        case 0x5B:
          v13 = 22;
          goto LABEL_55;
        case 0x5D:
          v13 = 29;
          goto LABEL_55;
        case 0x5F:
          goto LABEL_59;
        case 0x7B:
          if (*v6 == 45 && v4[2] == 35)
          {
            *((_QWORD *)this + 4) = v4 + 3;
            v12 = 32;
LABEL_48:
            *(_DWORD *)a2 = v12;
            *(_QWORD *)(a2 + 8) = v4;
            *(_QWORD *)(a2 + 16) = 3;
          }
          else
          {
            v13 = 20;
LABEL_55:
            *(_DWORD *)a2 = v13;
LABEL_56:
            *(_QWORD *)(a2 + 8) = v4;
            *(_QWORD *)(a2 + 16) = 1;
          }
          return;
        case 0x7C:
          v13 = 31;
          goto LABEL_55;
        case 0x7D:
          v13 = 27;
          goto LABEL_55;
        default:
          if ((v7 & 0x80000000) != 0)
            v11 = __maskrune(v7, 0x100uLL);
          else
            v11 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v7 + 60) & 0x100;
          if (v11)
          {
LABEL_59:
            mlir::Lexer::lexBareIdentifierOrKeyword(this, (unint64_t)v4, a2);
          }
          else
          {
LABEL_60:
            v14[0] = "unexpected character";
            v15 = 259;
            mlir::Lexer::emitError((uint64_t)this, v4, (uint64_t)v14, a2);
          }
          return;
      }
      do
      {
        while (1)
        {
          v6 = v8++;
          *((_QWORD *)this + 4) = v8;
          v9 = *v6;
          if (!*v6)
            break;
          if (v9 == 10 || v9 == 13)
          {
            ++v6;
            goto LABEL_4;
          }
        }
      }
      while (v6 != (const char *)(*((_QWORD *)this + 2) + *((_QWORD *)this + 3)));
      *((_QWORD *)this + 4) = v6;
LABEL_4:
      v4 = v6;
    }
    while (v6 != v3);
  }
  *(_DWORD *)a2 = 2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = 0;
}

uint64_t mlir::Lexer::lexBareIdentifierOrKeyword@<X0>(mlir::Lexer *this@<X0>, unint64_t __s1@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v12;
  uint64_t result;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  char *v19;
  const char *v20;
  uint64_t v21;
  int v22;

  v6 = (unsigned __int8 *)*((_QWORD *)this + 4);
  v7 = MEMORY[0x24BDAC740];
  while (1)
  {
    v12 = (char)*v6;
    if ((v12 & 0x80000000) != 0)
    {
      result = __maskrune(v12, 0x100uLL);
      v6 = (unsigned __int8 *)*((_QWORD *)this + 4);
      if ((_DWORD)result)
        goto LABEL_6;
    }
    else
    {
      result = *(_DWORD *)(v7 + 4 * v12 + 60) & 0x100;
      if ((_DWORD)result)
        goto LABEL_6;
    }
    v14 = *v6;
    if ((char)*v6 < 0 || (*(_DWORD *)(v7 + 4 * v14 + 60) & 0x400) == 0)
    {
      v8 = v14 - 36;
      v9 = v8 > 0x3B;
      v10 = (1 << v8) & 0x800000000000401;
      if (v9 || v10 == 0)
        break;
    }
LABEL_6:
    *((_QWORD *)this + 4) = ++v6;
  }
  v15 = (size_t)&v6[-__s1];
  v16 = (uint64_t)&v6[-__s1 - 2];
  if ((unint64_t)&v6[-__s1] < 2)
    goto LABEL_30;
  v17 = *(unsigned __int8 *)__s1;
  if (v17 == 105)
  {
    v18 = (const char *)(__s1 + 1);
    v19 = (char *)&v6[~__s1];
    while (*(unsigned __int8 *)v18 - 48 < 0xA)
    {
      ++v18;
      if (!--v19)
      {
LABEL_27:
        v22 = 12;
        goto LABEL_31;
      }
    }
  }
  if (v15 >= 3)
  {
    if (*(_BYTE *)(__s1 + 1) == 105 && (v17 == 117 || v17 == 115))
    {
      v20 = (const char *)(__s1 + 2);
      v21 = v16;
      while (*(unsigned __int8 *)v20 - 48 < 0xA)
      {
        ++v20;
        if (!--v21)
          goto LABEL_27;
      }
    }
    switch(v16)
    {
      case 0:
        goto LABEL_29;
      case 1:
        if (*(_WORD *)__s1 == 12646 && *(_BYTE *)(__s1 + 2) == 54)
        {
          v22 = 44;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 13158 && *(_BYTE *)(__s1 + 2) == 50)
        {
          v22 = 45;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 13926 && *(_BYTE *)(__s1 + 2) == 52)
        {
          v22 = 46;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 14438 && *(_BYTE *)(__s1 + 2) == 48)
        {
          v22 = 47;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 28518 && *(_BYTE *)(__s1 + 2) == 114)
        {
          v22 = 56;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 28524 && *(_BYTE *)(__s1 + 2) == 99)
        {
          v22 = 59;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 24941 && *(_BYTE *)(__s1 + 2) == 120)
        {
          v22 = 60;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 26989 && *(_BYTE *)(__s1 + 2) == 110)
        {
          v22 = 62;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 28525 && *(_BYTE *)(__s1 + 2) == 100)
        {
          v22 = 63;
          goto LABEL_31;
        }
        goto LABEL_30;
      case 2:
        switch(*(_DWORD *)__s1)
        {
          case 0x36316662:
            v22 = 38;
            break;
          case 0x38323166:
            v22 = 53;
            break;
          case 0x636E7566:
            v22 = 57;
            break;
          case 0x656E6F6E:
            v22 = 64;
            break;
          case 0x657A6973:
            v22 = 66;
            break;
          case 0x70657473:
            v22 = 68;
            break;
          case 0x32336674:
            v22 = 72;
            break;
          case 0x65757274:
            v22 = 74;
            break;
          case 0x65707974:
            v22 = 76;
            break;
          case 0x74696E75:
            v22 = 77;
            break;
          default:
            goto LABEL_30;
        }
        goto LABEL_31;
      case 3:
        if (*(_DWORD *)__s1 == 1634890337 && *(_BYTE *)(__s1 + 4) == 121)
        {
          v22 = 36;
        }
        else if (*(_DWORD *)__s1 == 1936614756 && *(_BYTE *)(__s1 + 4) == 101)
        {
          v22 = 41;
        }
        else if (*(_DWORD *)__s1 == 1936482662 && *(_BYTE *)(__s1 + 4) == 101)
        {
          v22 = 54;
        }
        else if (*(_DWORD *)__s1 == 1701080681 && *(_BYTE *)(__s1 + 4) == 120)
        {
          v22 = 58;
        }
        else
        {
          result = memcmp((const void *)__s1, "tuple", v15);
          if ((_DWORD)result)
            goto LABEL_30;
          v22 = 75;
        }
        goto LABEL_31;
      case 4:
        if (*(_DWORD *)__s1 == 893728870 && *(_WORD *)(__s1 + 4) == 12877)
        {
          v22 = 48;
        }
        else if (*(_DWORD *)__s1 == 1919772013 && *(_WORD *)(__s1 + 4) == 26213)
        {
          v22 = 61;
        }
        else if (*(_DWORD *)__s1 == 1936090735 && *(_WORD *)(__s1 + 4) == 29797)
        {
          v22 = 65;
        }
        else if (*(_DWORD *)__s1 == 1918988403 && *(_WORD *)(__s1 + 4) == 25971)
        {
          v22 = 67;
        }
        else if (*(_DWORD *)__s1 == 1651341683 && *(_WORD *)(__s1 + 4) == 27759)
        {
          v22 = 70;
        }
        else if (*(_DWORD *)__s1 == 1936614772 && *(_WORD *)(__s1 + 4) == 29295)
        {
          v22 = 71;
        }
        else
        {
          result = memcmp((const void *)__s1, "vector", v15);
          if ((_DWORD)result)
            goto LABEL_30;
          v22 = 78;
        }
        goto LABEL_31;
      case 5:
        if (*(_DWORD *)__s1 == 1818846563 && *(_DWORD *)(__s1 + 3) == 1986618476)
        {
          v22 = 39;
          goto LABEL_31;
        }
        if (*(_DWORD *)__s1 == 1886220131 && *(_DWORD *)(__s1 + 3) == 2019912816)
        {
          v22 = 40;
          goto LABEL_31;
        }
        if (*(_DWORD *)__s1 == 1769108595 && *(_DWORD *)(__s1 + 3) == 1684366441)
        {
          v22 = 69;
          goto LABEL_31;
        }
        goto LABEL_30;
      case 6:
        switch(*(_QWORD *)__s1)
        {
          case 0x74636E6974736964:
            v22 = 43;
            break;
          case 0x4E46334D34453866:
            v22 = 49;
            break;
          case 0x766964726F6F6C66:
            v22 = 55;
            break;
          default:
            goto LABEL_30;
        }
        goto LABEL_31;
      case 8:
        if (*(_QWORD *)__s1 == 0x6D5F656E69666661 && *(_WORD *)(__s1 + 8) == 28769)
        {
          v22 = 34;
          goto LABEL_31;
        }
        if (*(_QWORD *)__s1 == 0x735F656E69666661 && *(_WORD *)(__s1 + 8) == 29797)
        {
          v22 = 35;
          goto LABEL_31;
        }
        if (*(_QWORD *)__s1 == 0x7475626972747461 && *(_WORD *)(__s1 + 8) == 29541)
        {
          v22 = 37;
          goto LABEL_31;
        }
        if (*(_QWORD *)__s1 == 0x4E46324D35453866 && *(_WORD *)(__s1 + 8) == 23125)
        {
          v22 = 50;
          goto LABEL_31;
        }
        if (*(_QWORD *)__s1 == 0x4E46334D34453866 && *(_WORD *)(__s1 + 8) == 23125)
        {
          v22 = 51;
          goto LABEL_31;
        }
        break;
      case 11:
        if (*(_QWORD *)__s1 != 0x3142334D34453866 || *(_QWORD *)(__s1 + 5) != 0x5A554E4631314233)
          goto LABEL_30;
        v22 = 52;
        goto LABEL_31;
      case 12:
        if (*(_QWORD *)__s1 != 0x65725F65736E6564 || *(_QWORD *)(__s1 + 6) != 0x656372756F736572)
          goto LABEL_30;
        v22 = 42;
        goto LABEL_31;
      default:
        goto LABEL_30;
    }
    goto LABEL_30;
  }
  if (v15 != 2)
    goto LABEL_30;
LABEL_29:
  result = memcmp((const void *)__s1, "to", v15);
  if ((_DWORD)result)
LABEL_30:
    v22 = 3;
  else
    v22 = 73;
LABEL_31:
  *(_DWORD *)a3 = v22;
  *(_QWORD *)(a3 + 8) = __s1;
  *(_QWORD *)(a3 + 16) = v15;
  return result;
}

void mlir::Lexer::lexAtIdentifier(mlir::Lexer *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  unsigned int v7;
  int64_t v8;
  unsigned __int8 *v9;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  __int128 v21;
  int64_t v22;
  __int16 v23;

  v6 = (char *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v6 + 1;
  v7 = *v6;
  if (v7 != 34)
  {
    if ((v7 & 0x80000000) != 0)
    {
      v19 = __maskrune(*v6, 0x100uLL);
      v9 = (unsigned __int8 *)*((_QWORD *)this + 4);
      if (v7 == 95 || v19 != 0)
        goto LABEL_9;
    }
    else
    {
      v9 = (unsigned __int8 *)*((_QWORD *)this + 4);
      if (v7 == 95 || (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v7 + 60) & 0x100) != 0)
      {
LABEL_9:
        v11 = MEMORY[0x24BDAC740];
        while (1)
        {
          v16 = (char)*v9;
          if ((v16 & 0x80000000) != 0)
          {
            v17 = __maskrune(v16, 0x100uLL);
            v9 = (unsigned __int8 *)*((_QWORD *)this + 4);
            if (v17)
              goto LABEL_14;
          }
          else if ((*(_DWORD *)(v11 + 4 * v16 + 60) & 0x100) != 0)
          {
            goto LABEL_14;
          }
          v18 = *v9;
          if ((char)*v9 < 0 || (*(_DWORD *)(v11 + 4 * v18 + 60) & 0x400) == 0)
          {
            v12 = v18 - 36;
            v13 = v12 > 0x3B;
            v14 = (1 << v12) & 0x800000000000401;
            if (v13 || v14 == 0)
            {
              *(_DWORD *)a3 = 4;
              v8 = v9 - (unsigned __int8 *)a2;
LABEL_24:
              *(_QWORD *)(a3 + 8) = a2;
              goto LABEL_25;
            }
          }
LABEL_14:
          *((_QWORD *)this + 4) = ++v9;
        }
      }
    }
    *(_QWORD *)&v21 = "@ identifier expected to start with letter or '_'";
    v23 = 259;
    mlir::Lexer::emitError((uint64_t)this, (const char *)v9 - 1, (uint64_t)&v21, a3);
    return;
  }
  mlir::Lexer::lexString(this, v6 + 1, (uint64_t)&v21);
  if ((_DWORD)v21 != 1)
  {
    v8 = *((_QWORD *)this + 4) - (_QWORD)a2;
    *(_DWORD *)a3 = 4;
    goto LABEL_24;
  }
  *(_OWORD *)a3 = v21;
  v8 = v22;
LABEL_25:
  *(_QWORD *)(a3 + 16) = v8;
}

void mlir::Lexer::lexPrefixedIdentifier(mlir::Lexer *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  const char *v8;
  int v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  char *v14;
  int v15;
  char *v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  const char *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD v30[4];
  __int16 v31;

  v6 = *a2;
  if (v6 > 36)
  {
    if (v6 == 94)
    {
      v9 = 7;
      v8 = "invalid block name";
      v7 = 18;
      v10 = (char *)*((_QWORD *)this + 4);
      v11 = *v10;
      v12 = MEMORY[0x24BDAC740];
      if ((v11 & 0x80000000) != 0)
        goto LABEL_31;
    }
    else
    {
      v9 = 6;
      v8 = "invalid SSA name";
      v7 = 16;
      v10 = (char *)*((_QWORD *)this + 4);
      v11 = *v10;
      v12 = MEMORY[0x24BDAC740];
      if ((v11 & 0x80000000) != 0)
        goto LABEL_31;
    }
  }
  else
  {
    if (v6 == 33)
      v7 = 23;
    else
      v7 = 22;
    if (v6 == 33)
      v8 = "invalid type identifier";
    else
      v8 = "invalid attribute name";
    if (v6 == 33)
      v9 = 8;
    else
      v9 = 5;
    v10 = (char *)*((_QWORD *)this + 4);
    v11 = *v10;
    v12 = MEMORY[0x24BDAC740];
    if ((v11 & 0x80000000) != 0)
    {
LABEL_31:
      if (__maskrune(v11, 0x100uLL))
        goto LABEL_41;
      goto LABEL_32;
    }
  }
  v13 = *(_DWORD *)(v12 + 4 * v11 + 60);
  if ((v13 & 0x400) != 0)
  {
    v14 = v10 + 1;
    do
    {
      if ((*(_DWORD *)(v12 + 4 * v11 + 60) & 0x400) == 0)
        break;
      *((_QWORD *)this + 4) = v14;
      v15 = *v14++;
      LOBYTE(v11) = v15;
    }
    while ((v15 & 0x80000000) == 0);
    v16 = v14 - 1;
LABEL_22:
    v17 = *((_QWORD *)this + 5);
    v18 = v17 < (unint64_t)a2 || v17 > (unint64_t)v16;
    if (!v18)
    {
      *(_DWORD *)a3 = 2;
      *(_QWORD *)(a3 + 8) = a2;
      *(_QWORD *)(a3 + 16) = v17 - (_QWORD)a2;
      return;
    }
    v19 = v16 - a2;
    *(_DWORD *)a3 = v9;
    goto LABEL_28;
  }
  if ((v13 & 0x100) != 0)
    goto LABEL_41;
LABEL_32:
  v20 = (const char *)*((_QWORD *)this + 4);
  v21 = *(unsigned __int8 *)v20 - 36;
  v18 = v21 > 0x3B;
  v22 = (1 << v21) & 0x800000000000601;
  if (!v18 && v22 != 0)
  {
    while (1)
    {
LABEL_41:
      while (1)
      {
        v27 = (char *)(*((_QWORD *)this + 4) + 1);
        *((_QWORD *)this + 4) = v27;
        v28 = *v27;
        if ((v28 & 0x80000000) != 0)
          break;
        if ((*(_DWORD *)(v12 + 4 * v28 + 60) & 0x100) == 0)
          goto LABEL_45;
      }
      if (!__maskrune(v28, 0x100uLL))
      {
LABEL_45:
        v16 = (char *)*((_QWORD *)this + 4);
        v29 = *v16;
        if (*v16 < 0 || (*(_DWORD *)(v12 + 4 * v29 + 60) & 0x400) == 0)
        {
          v24 = v29 - 36;
          v18 = v24 > 0x3B;
          v25 = (1 << v24) & 0x800000000000601;
          if (v18 || v25 == 0)
            goto LABEL_22;
        }
      }
    }
  }
  if (v20 != *((const char **)this + 5))
  {
    v31 = 261;
    v30[0] = v8;
    v30[1] = v7;
    mlir::Lexer::emitError((uint64_t)this, v20 - 1, (uint64_t)v30, a3);
    return;
  }
  *(_DWORD *)a3 = 2;
  v19 = v20 - a2;
LABEL_28:
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = v19;
}

void mlir::Lexer::lexString(mlir::Lexer *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  char *v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  const char *v9;
  const char *v10;
  __int16 v11;

  v3 = (char *)*((_QWORD *)this + 4);
  v4 = (char *)*((_QWORD *)this + 5);
  if (v3 == v4)
  {
LABEL_23:
    *(_DWORD *)a3 = 2;
    *(_QWORD *)(a3 + 8) = a2;
    *(_QWORD *)(a3 + 16) = v4 - a2;
    return;
  }
  while (1)
  {
    v5 = (unsigned __int8 *)(v3 + 1);
    *((_QWORD *)this + 4) = v3 + 1;
    v6 = *v3;
    if (v6 > 33)
    {
      if (v6 == 92)
      {
        v7 = *v5;
        v8 = (v7 - 92) > 0x18 || ((1 << (v7 - 92)) & 0x1040001) == 0;
        if (v8 && (_DWORD)v7 != 34)
        {
          if (llvm::hexDigitValue(char)::LUT[v7] == -1 || llvm::hexDigitValue(char)::LUT[v3[2]] == -1)
          {
            v9 = "unknown escape in string literal";
            goto LABEL_25;
          }
        }
        else
        {
          v5 = (unsigned __int8 *)v3;
        }
        v5 += 2;
        *((_QWORD *)this + 4) = v5;
      }
      else if (v6 == 34)
      {
        *(_DWORD *)a3 = 11;
        *(_QWORD *)(a3 + 8) = a2;
        *(_QWORD *)(a3 + 16) = v5 - (unsigned __int8 *)a2;
        return;
      }
      goto LABEL_5;
    }
    if (*v3)
      break;
    if (v3 == (char *)(*((_QWORD *)this + 2) + *((_QWORD *)this + 3)))
      goto LABEL_24;
LABEL_5:
    v3 = (char *)v5;
    if (v5 == (unsigned __int8 *)v4)
      goto LABEL_23;
  }
  if ((v6 - 10) >= 3)
    goto LABEL_5;
LABEL_24:
  v9 = "expected '\"' in string literal";
LABEL_25:
  v10 = v9;
  v11 = 259;
  mlir::Lexer::emitError((uint64_t)this, v3, (uint64_t)&v10, a3);
}

uint64_t mlir::Lexer::lexNumber@<X0>(uint64_t this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  char *v19;
  int v20;

  v3 = *(unsigned __int8 **)(this + 32);
  v4 = *v3;
  if (__PAIR64__(v4, *(v3 - 1)) == 0x7800000030)
  {
    if (((char)v3[1] & 0x80000000) == 0
      && (v5 = MEMORY[0x24BDAC740], (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v3[1] + 60) & 0x10000) != 0))
    {
      v17 = v3 + 2;
      *(_QWORD *)(this + 32) = v3 + 2;
      if (((char)v3[2] & 0x80000000) == 0)
      {
        v18 = v3[2];
        v19 = (char *)(v3 + 3);
        do
        {
          if ((*(_DWORD *)(v5 + 4 * v18 + 60) & 0x10000) == 0)
            break;
          *(_QWORD *)(this + 32) = v19;
          v20 = *v19++;
          v18 = v20;
        }
        while ((v20 & 0x80000000) == 0);
        v17 = (unsigned __int8 *)(v19 - 1);
      }
      *(_DWORD *)a3 = 10;
      *(_QWORD *)(a3 + 8) = a2;
      *(_QWORD *)(a3 + 16) = v17 - (unsigned __int8 *)a2;
    }
    else
    {
      *(_DWORD *)a3 = 10;
      *(_QWORD *)(a3 + 8) = a2;
      *(_QWORD *)(a3 + 16) = v3 - (unsigned __int8 *)a2;
    }
  }
  else
  {
    if ((v4 & 0x80) != 0)
      goto LABEL_25;
    v6 = MEMORY[0x24BDAC740];
    while ((*(_DWORD *)(v6 + 4 * v4 + 60) & 0x400) != 0)
    {
      v7 = v3 + 1;
      *(_QWORD *)(this + 32) = v3 + 1;
      v8 = (char)v3[1];
      v4 = *++v3;
      if (v8 < 0)
      {
        *(_DWORD *)a3 = 10;
        *(_QWORD *)(a3 + 8) = a2;
        *(_QWORD *)(a3 + 16) = v7 - (unsigned __int8 *)a2;
        return this;
      }
    }
    if (v4 != 46)
    {
LABEL_25:
      *(_DWORD *)a3 = 10;
      *(_QWORD *)(a3 + 8) = a2;
      *(_QWORD *)(a3 + 16) = v3 - (unsigned __int8 *)a2;
    }
    else
    {
      v9 = v3 + 4;
      do
      {
        v10 = v9;
        v11 = (char *)(v9 - 3);
        *(_QWORD *)(this + 32) = v9 - 3;
        v12 = (char)*(v9 - 3);
        v13 = v12;
        if (v12 < 0)
          break;
        v9 = v10 + 1;
      }
      while ((*(_DWORD *)(v6 + 4 * v13 + 60) & 0x400) != 0);
      if ((v13 | 0x20) == 0x65)
      {
        v14 = *(v10 - 2);
        if ((*(_DWORD *)(v6 + 4 * v14 + 60) & 0x400) != 0
          || ((_DWORD)v14 == 43 || (_DWORD)v14 == 45) && (*(_DWORD *)(v6 + 4 * *(v10 - 1) + 60) & 0x400) != 0)
        {
          v11 = (char *)(v10 - 1);
          *(_QWORD *)(this + 32) = v10 - 1;
          if (((char)*(v10 - 1) & 0x80000000) == 0)
          {
            v15 = *(v10 - 1);
            do
            {
              if ((*(_DWORD *)(v6 + 4 * v15 + 60) & 0x400) == 0)
                break;
              *(_QWORD *)(this + 32) = v10;
              v16 = (char)*v10++;
              v15 = v16;
            }
            while ((v16 & 0x80000000) == 0);
            v11 = (char *)(v10 - 1);
          }
        }
      }
      *(_DWORD *)a3 = 9;
      *(_QWORD *)(a3 + 8) = a2;
      *(_QWORD *)(a3 + 16) = v11 - a2;
    }
  }
  return this;
}

uint64_t mlir::detail::Parser::parseCallSiteLocation(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17[4];
  __int16 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  __int16 v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *__p;
  _QWORD *v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)&v20);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 56) = v20;
  *(_QWORD *)(v4 + 72) = v21;
  *(_QWORD *)&v20 = "expected '(' in callsite location";
  v23 = 259;
  if (!mlir::detail::Parser::parseToken(a1, 21, (uint64_t)&v20))
    return 0;
  v19 = 0;
  if (!mlir::detail::Parser::parseLocationInstance(a1, &v19))
    return 0;
  v5 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v5 + 56) == 3 && *(_QWORD *)(v5 + 72) == 2 && **(_WORD **)(v5 + 64) == 29793)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v20);
    v15 = *(_QWORD *)(a1 + 8);
    *(_OWORD *)(v15 + 56) = v20;
    *(_QWORD *)(v15 + 72) = v21;
    v17[0] = 0;
    if (mlir::detail::Parser::parseLocationInstance(a1, v17))
    {
      *(_QWORD *)&v20 = "expected ')' in callsite location";
      v23 = 259;
      if (mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v20))
      {
        *a2 = mlir::CallSiteLoc::get(v19, v17[0]);
        return 1;
      }
    }
    return 0;
  }
  v17[0] = (uint64_t)"expected 'at' in callsite location";
  v18 = 259;
  mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v17, &v20);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v20);
  if ((_QWORD)v20)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
  if (v29)
  {
    v7 = __p;
    if (__p)
    {
      v8 = v28;
      v9 = __p;
      if (v28 != __p)
      {
        do
          v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        v9 = __p;
      }
      v28 = v7;
      operator delete(v9);
    }
    v10 = v25;
    if (v25)
    {
      v11 = v26;
      v12 = v25;
      if (v26 != v25)
      {
        do
        {
          v14 = *--v11;
          v13 = v14;
          *v11 = 0;
          if (v14)
            MEMORY[0x20BD002D4](v13, 0x1000C8077774924);
        }
        while (v11 != v10);
        v12 = v25;
      }
      v26 = v10;
      operator delete(v12);
    }
    if (v22 != &v24)
      free(v22);
  }
  return v6;
}

uint64_t mlir::detail::Parser::parseLocationInstance(mlir::UnknownLoc ****a1, uint64_t *a2)
{
  mlir::UnknownLoc ***v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  mlir::UnknownLoc **v11;
  mlir::UnknownLoc **v12;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  mlir::UnknownLoc ***v32;
  mlir::MLIRContext *v33;
  unint64_t v34;
  int64_t v35;
  _QWORD v36[4];
  __int16 v37;
  _BYTE v38[24];
  __int128 v39;
  mlir::UnknownLoc **v40;
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD *v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v4 = a1[1];
  v5 = *((_DWORD *)v4 + 14);
  if (v5 != 3)
  {
    if (v5 == 11)
      return mlir::detail::Parser::parseNameOrFileLineColLocation((uint64_t)a1, a2);
    if (v5 == 5)
    {
      v6 = mlir::detail::Parser::parseExtendedAttr((mlir::detail::Parser *)a1, 0);
      if (!v6)
        return 0;
      v7 = (uint64_t)v6;
      v8 = mlir::LocationAttr::classof((uint64_t)v6);
      if (v8)
        v9 = v7;
      else
        v9 = 0;
      *a2 = v9;
      if (v8)
        return 1;
      v36[0] = "expected location attribute, but got";
      v37 = 259;
      mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)v36, &v39);
      if ((_QWORD)v39)
      {
        v22 = v38;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v38, v7);
        v23 = (char *)v41;
        if (v42 >= v43)
        {
          v34 = v42 + 1;
          if (v41 <= v38 && (char *)v41 + 24 * v42 > v38)
          {
            v35 = v38 - (_BYTE *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v34, 24);
            v23 = (char *)v41;
            v22 = (char *)v41 + v35;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v34, 24);
            v22 = v38;
            v23 = (char *)v41;
          }
        }
        v24 = &v23[24 * v42];
        v25 = *(_OWORD *)v22;
        *((_QWORD *)v24 + 2) = *((_QWORD *)v22 + 2);
        *(_OWORD *)v24 = v25;
        ++v42;
      }
      v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
      if ((_QWORD)v39)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
      if (!v49)
        return v10;
      v26 = __p;
      if (__p)
      {
        v27 = v48;
        v28 = __p;
        if (v48 != __p)
        {
          do
            v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          v28 = __p;
        }
        v48 = v26;
        operator delete(v28);
      }
      v17 = v45;
      if (!v45)
      {
LABEL_50:
        if (v41 != v44)
          free(v41);
        return v10;
      }
      v29 = v46;
      v19 = v45;
      if (v46 == v45)
      {
LABEL_49:
        v46 = v17;
        operator delete(v19);
        goto LABEL_50;
      }
      do
      {
        v31 = *--v29;
        v30 = v31;
        *v29 = 0;
        if (v31)
          MEMORY[0x20BD002D4](v30, 0x1000C8077774924);
      }
      while (v29 != v17);
    }
    else
    {
      v36[0] = "expected location instance";
      v37 = 259;
      mlir::detail::Parser::emitWrongTokenError((uint64_t)a1, (uint64_t)v36, &v39);
      v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
      if ((_QWORD)v39)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
      if (!v49)
        return v10;
      v14 = __p;
      if (__p)
      {
        v15 = v48;
        v16 = __p;
        if (v48 != __p)
        {
          do
            v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          v16 = __p;
        }
        v48 = v14;
        operator delete(v16);
      }
      v17 = v45;
      if (!v45)
        goto LABEL_50;
      v18 = v46;
      v19 = v45;
      if (v46 == v45)
        goto LABEL_49;
      do
      {
        v21 = *--v18;
        v20 = v21;
        *v18 = 0;
        if (v21)
          MEMORY[0x20BD002D4](v20, 0x1000C8077774924);
      }
      while (v18 != v17);
    }
    v19 = v45;
    goto LABEL_49;
  }
  v11 = v4[8];
  v12 = v4[9];
  if (v12 == (mlir::UnknownLoc **)5)
  {
    if (!memcmp(v11, "fused", 5uLL))
      return mlir::detail::Parser::parseFusedLocation((uint64_t)a1);
  }
  else if (v12 == (mlir::UnknownLoc **)7)
  {
    if (!memcmp(v11, "unknown", 7uLL))
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 1), (uint64_t)&v39);
      v32 = a1[1];
      *(_OWORD *)(v32 + 7) = v39;
      v32[9] = v40;
      *a2 = mlir::UnknownLoc::get(**a1[1], v33);
      return 1;
    }
  }
  else if (v12 == (mlir::UnknownLoc **)8 && *v11 == (mlir::UnknownLoc *)0x657469736C6C6163)
  {
    return mlir::detail::Parser::parseCallSiteLocation((uint64_t)a1, a2);
  }
  v36[0] = "expected location instance";
  v37 = 259;
  mlir::detail::Parser::emitWrongTokenError((uint64_t)a1, (uint64_t)v36, &v39);
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v39);
  return v10;
}

uint64_t mlir::detail::Parser::parseFusedLocation(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  void *v9[2];
  _QWORD v10[2];
  __int16 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)v9);
  v2 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)v9;
  *(_QWORD *)(v2 + 72) = v10[0];
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v3 + 56) == 23)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)v9);
    v4 = *(_QWORD *)(a1 + 8);
    *(_OWORD *)(v4 + 56) = *(_OWORD *)v9;
    *(_QWORD *)(v4 + 72) = v10[0];
    v5 = mlir::detail::Parser::parseAttribute(a1, 0);
    if (!v5)
      return 0;
    v6 = v5;
    v9[0] = "expected '>' after fused location metadata";
    v11 = 259;
    if (!mlir::detail::Parser::parseToken(a1, 19, (uint64_t)v9))
      return 0;
  }
  else
  {
    v6 = 0;
  }
  v8[1] = v9;
  v9[0] = v10;
  v9[1] = *(void **)"";
  v8[0] = a1;
  if (mlir::detail::Parser::parseCommaSeparatedList(a1, 2, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseFusedLocation(mlir::LocationAttr &)::$_0>, (uint64_t)v8, (uint64_t)" in fused location", 18))mlir::FusedLoc::get((uint64_t **)v9[0], (mlir::MLIRContext *)LODWORD(v9[1]), v6, ***(mlir::UnknownLoc ****)(a1 + 8));
  if (v9[0] != v10)
    free(v9[0]);
  return 0;
}

uint64_t mlir::detail::Parser::parseNameOrFileLineColLocation(uint64_t a1, uint64_t *a2)
{
  mlir::StringAttr ***v4;
  mlir::StringAttr *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  mlir::Token *v11;
  int v12;
  unint64_t UnsignedIntegerValue;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  mlir::Token *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  std::string::size_type size;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50[4];
  __int16 v51;
  std::string v52;
  __int128 v53;
  uint64_t v54;
  void *v55;
  __int16 v56;
  uint64_t v57;
  void *v58;
  _QWORD *v59;
  void *__p;
  _QWORD *v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v4 = *(mlir::StringAttr ****)(a1 + 8);
  v5 = **v4;
  mlir::Token::getStringValue((mlir::Token *)(v4 + 7), &v52);
  mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)&v53);
  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v6 + 56) = v53;
  *(_QWORD *)(v6 + 72) = v54;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_DWORD *)(v7 + 56);
  if (v8 == 21)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v53);
    v25 = *(_QWORD *)(a1 + 8);
    *(_OWORD *)(v25 + 56) = v53;
    *(_QWORD *)(v25 + 72) = v54;
    v50[0] = 0;
    if (mlir::detail::Parser::parseLocationInstance(a1, v50))
    {
      v56 = 260;
      *(_QWORD *)&v53 = &v52;
      v26 = mlir::StringAttr::get(v5, (mlir::MLIRContext *)&v53);
      *a2 = mlir::NameLoc::get(v26, v50[0]);
      *(_QWORD *)&v53 = "expected ')' after child location of NameLoc";
      v56 = 259;
      if (mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v53))
      {
        v27 = 1;
        if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return v27;
LABEL_71:
        operator delete(v52.__r_.__value_.__l.__data_);
        return v27;
      }
    }
    goto LABEL_22;
  }
  if (v8 != 15)
  {
    v56 = 260;
    *(_QWORD *)&v53 = &v52;
    v28 = mlir::StringAttr::get(v5, (mlir::MLIRContext *)&v53);
    v24 = mlir::NameLoc::get(v28);
    goto LABEL_20;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v53);
  v9 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v9 + 56) = v53;
  *(_QWORD *)(v9 + 72) = v54;
  v10 = *(_QWORD *)(a1 + 8);
  v12 = *(_DWORD *)(v10 + 56);
  v11 = (mlir::Token *)(v10 + 56);
  if (v12 != 10)
  {
    v50[0] = (uint64_t)"expected integer line number in FileLineColLoc";
    v51 = 259;
    mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v50, &v53);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
    if ((_QWORD)v53)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
    if (v62)
    {
      v29 = __p;
      if (__p)
      {
        v30 = v61;
        v31 = __p;
        if (v61 != __p)
        {
          do
            v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
          while (v30 != v29);
          v31 = __p;
        }
        v61 = v29;
        operator delete(v31);
      }
      v32 = v58;
      if (!v58)
        goto LABEL_68;
      v33 = v59;
      v34 = v58;
      if (v59 == v58)
        goto LABEL_67;
      do
      {
        v36 = *--v33;
        v35 = v36;
        *v33 = 0;
        if (v36)
          MEMORY[0x20BD002D4](v35, 0x1000C8077774924);
      }
      while (v33 != v32);
      goto LABEL_66;
    }
    goto LABEL_70;
  }
  UnsignedIntegerValue = mlir::Token::getUnsignedIntegerValue(v11);
  if ((UnsignedIntegerValue & 0xFF00000000) == 0)
  {
    v50[0] = (uint64_t)"expected integer line number in FileLineColLoc";
    v51 = 259;
    mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v50, &v53);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
    if ((_QWORD)v53)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
    if (v62)
    {
      v37 = __p;
      if (__p)
      {
        v38 = v61;
        v39 = __p;
        if (v61 != __p)
        {
          do
            v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
          while (v38 != v37);
          v39 = __p;
        }
        v61 = v37;
        operator delete(v39);
      }
      v32 = v58;
      if (!v58)
        goto LABEL_68;
      v40 = v59;
      v34 = v58;
      if (v59 == v58)
        goto LABEL_67;
      do
      {
        v42 = *--v40;
        v41 = v42;
        *v40 = 0;
        if (v42)
          MEMORY[0x20BD002D4](v41, 0x1000C8077774924);
      }
      while (v40 != v32);
      goto LABEL_66;
    }
LABEL_70:
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v27;
    goto LABEL_71;
  }
  v14 = UnsignedIntegerValue;
  mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)&v53);
  v15 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v15 + 56) = v53;
  *(_QWORD *)(v15 + 72) = v54;
  *(_QWORD *)&v53 = "expected ':' in FileLineColLoc";
  v56 = 259;
  if (!mlir::detail::Parser::parseToken(a1, 15, (uint64_t)&v53))
  {
LABEL_22:
    v27 = 0;
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_71;
    return v27;
  }
  v16 = *(_QWORD *)(a1 + 8);
  v18 = *(_DWORD *)(v16 + 56);
  v17 = (mlir::Token *)(v16 + 56);
  if (v18 != 10)
  {
    v50[0] = (uint64_t)"expected integer column number in FileLineColLoc";
    v51 = 259;
    mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v50, &v53);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
    if ((_QWORD)v53)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
    if (v62)
    {
      v43 = __p;
      if (__p)
      {
        v44 = v61;
        v45 = __p;
        if (v61 != __p)
        {
          do
            v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
          while (v44 != v43);
          v45 = __p;
        }
        v61 = v43;
        operator delete(v45);
      }
      v32 = v58;
      if (!v58)
        goto LABEL_68;
      v46 = v59;
      v34 = v58;
      if (v59 == v58)
      {
LABEL_67:
        v59 = v32;
        operator delete(v34);
LABEL_68:
        if (v55 != &v57)
          free(v55);
        goto LABEL_70;
      }
      do
      {
        v48 = *--v46;
        v47 = v48;
        *v46 = 0;
        if (v48)
          MEMORY[0x20BD002D4](v47, 0x1000C8077774924);
      }
      while (v46 != v32);
LABEL_66:
      v34 = v58;
      goto LABEL_67;
    }
    goto LABEL_70;
  }
  v19 = mlir::Token::getUnsignedIntegerValue(v17);
  if ((v19 & 0xFF00000000) == 0)
  {
    v50[0] = (uint64_t)"expected integer column number in FileLineColLoc";
    v51 = 259;
    mlir::detail::Parser::emitError(a1, (uint64_t)v50, &v53);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v53);
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v27;
    goto LABEL_71;
  }
  v20 = v19;
  mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)&v53);
  v21 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v21 + 56) = v53;
  *(_QWORD *)(v21 + 72) = v54;
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v52;
  else
    v22 = (std::string *)v52.__r_.__value_.__r.__words[0];
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  else
    size = v52.__r_.__value_.__l.__size_;
  v24 = mlir::FileLineColLoc::get(v5, (const char *)v22, size, v14, v20);
LABEL_20:
  *a2 = v24;
  v27 = 1;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_71;
  return v27;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseFusedLocation(mlir::LocationAttr &)::$_0>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v7 = 0;
  if (!mlir::detail::Parser::parseLocationInstance(v2, &v7))
    return 0;
  v3 = a1[1];
  v4 = v7;
  v5 = *(unsigned int *)(v3 + 8);
  if (v5 >= *(_DWORD *)(v3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v5) = v4;
  ++*(_DWORD *)(v3 + 8);
  return 1;
}

uint64_t mlir::detail::Parser::parseCommaSeparatedList(uint64_t a1, int a2, unsigned __int8 (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  switch(a2)
  {
    case 1:
      goto LABEL_3;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_14;
    case 4:
      goto LABEL_18;
    case 5:
      if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) != 21)
        return 1;
LABEL_3:
      v18 = 1283;
      *(_QWORD *)&v15 = "expected '('";
      v16 = a5;
      v17 = a6;
      if (!mlir::detail::Parser::parseToken(a1, 21, (uint64_t)&v15))
        return 0;
      v10 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v10 + 56) == 28)
        goto LABEL_5;
      goto LABEL_9;
    case 6:
      if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) != 22)
        return 1;
LABEL_7:
      v18 = 1283;
      *(_QWORD *)&v15 = "expected '['";
      v16 = a5;
      v17 = a6;
      if (!mlir::detail::Parser::parseToken(a1, 22, (uint64_t)&v15))
        return 0;
      v10 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v10 + 56) != 29)
        goto LABEL_9;
      goto LABEL_5;
    case 7:
      if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) != 23)
        return 1;
LABEL_14:
      v18 = 1283;
      *(_QWORD *)&v15 = "expected '<'";
      v16 = a5;
      v17 = a6;
      if (!mlir::detail::Parser::parseToken(a1, 23, (uint64_t)&v15))
        return 1;
      v10 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v10 + 56) == 19)
      {
LABEL_5:
        mlir::Lexer::lexToken((mlir::Lexer *)(v10 + 8), (uint64_t)&v15);
        v11 = *(_QWORD *)(a1 + 8);
        *(_OWORD *)(v11 + 56) = v15;
        *(_QWORD *)(v11 + 72) = v16;
        return 1;
      }
      else
      {
LABEL_9:
        while (a3(a4))
        {
          v13 = *(_QWORD *)(a1 + 8);
          if (*(_DWORD *)(v13 + 56) != 16)
            __asm { BR              X10 }
          mlir::Lexer::lexToken((mlir::Lexer *)(v13 + 8), (uint64_t)&v15);
          v14 = *(_QWORD *)(a1 + 8);
          *(_OWORD *)(v14 + 56) = v15;
          *(_QWORD *)(v14 + 72) = v16;
        }
        return 0;
      }
    case 8:
      if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) != 20)
        return 1;
LABEL_18:
      v18 = 1283;
      *(_QWORD *)&v15 = "expected '{'";
      v16 = a5;
      v17 = a6;
      if (!mlir::detail::Parser::parseToken(a1, 20, (uint64_t)&v15))
        return 0;
      v10 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v10 + 56) != 27)
        goto LABEL_9;
      goto LABEL_5;
    default:
      goto LABEL_9;
  }
}

uint64_t sub_207211FF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  v7 = 1283;
  v4 = "expected ')'";
  v5 = v2;
  v6 = v1;
  return mlir::detail::Parser::parseToken(v0, 28, (uint64_t)&v4);
}

uint64_t mlir::detail::Parser::parseToken(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  void *__p;
  _QWORD *v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v4 + 56) == a2)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v16);
    v5 = *(_QWORD *)(a1 + 8);
    *(_OWORD *)(v5 + 56) = v16;
    *(_QWORD *)(v5 + 72) = v17;
    return 1;
  }
  else
  {
    mlir::detail::Parser::emitWrongTokenError(a1, a3, &v16);
    v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v16);
    if ((_QWORD)v16)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v16);
    if (v24)
    {
      v7 = __p;
      if (__p)
      {
        v8 = v23;
        v9 = __p;
        if (v23 != __p)
        {
          do
            v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          v9 = __p;
        }
        v23 = v7;
        operator delete(v9);
      }
      v10 = v20;
      if (v20)
      {
        v11 = v21;
        v12 = v20;
        if (v21 != v20)
        {
          do
          {
            v14 = *--v11;
            v13 = v14;
            *v11 = 0;
            if (v14)
              MEMORY[0x20BD002D4](v13, 0x1000C8077774924);
          }
          while (v11 != v10);
          v12 = v20;
        }
        v21 = v10;
        operator delete(v12);
      }
      if (v18 != &v19)
        free(v18);
    }
  }
  return v6;
}

BOOL mlir::detail::Parser::parseCommaSeparatedListUntil(uint64_t a1, int a2, unsigned __int8 (*a3)(uint64_t), uint64_t a4, char a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[4];
  __int16 v25;
  __int128 v26;
  const char *v27;
  void *v28;
  __int16 v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  void *__p;
  _QWORD *v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v6 + 56) == a2)
  {
    if ((a5 & 1) != 0)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v6 + 8), (uint64_t)&v26);
      v7 = *(_QWORD *)(a1 + 8);
      *(_OWORD *)(v7 + 56) = v26;
      *(_QWORD *)(v7 + 72) = v27;
      return 1;
    }
    else
    {
      v24[0] = "expected list element";
      v25 = 259;
      mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v24, &v26);
      v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v26);
      if ((_QWORD)v26)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v26);
      if (v35)
      {
        v14 = __p;
        if (__p)
        {
          v15 = v34;
          v16 = __p;
          if (v34 != __p)
          {
            do
              v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
            while (v15 != v14);
            v16 = __p;
          }
          v34 = v14;
          operator delete(v16);
        }
        v17 = v31;
        if (v31)
        {
          v18 = v32;
          v19 = v31;
          if (v32 != v31)
          {
            do
            {
              v21 = *--v18;
              v20 = v21;
              *v18 = 0;
              if (v21)
                MEMORY[0x20BD002D4](v20, 0x1000C8077774924);
            }
            while (v18 != v17);
            v19 = v31;
          }
          v32 = v17;
          operator delete(v19);
        }
        if (v28 != &v30)
          free(v28);
      }
    }
  }
  else if (a3(a4))
  {
    while (1)
    {
      v12 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v12 + 56) != 16)
        break;
      mlir::Lexer::lexToken((mlir::Lexer *)(v12 + 8), (uint64_t)&v26);
      v13 = *(_QWORD *)(a1 + 8);
      *(_OWORD *)(v13 + 56) = v26;
      *(_QWORD *)(v13 + 72) = v27;
      if (!a3(a4))
        return 0;
    }
    v25 = 1283;
    v24[0] = "expected ',' or '";
    v24[2] = mlir::Token::getTokenSpelling(a2);
    v24[3] = v22;
    *(_QWORD *)&v26 = v24;
    v27 = "'";
    v29 = 770;
    return mlir::detail::Parser::parseToken(a1, a2, (uint64_t)&v26) != 0;
  }
  else
  {
    return 0;
  }
  return v8;
}

void mlir::detail::Parser::emitWrongTokenError(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t OCGSize;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t last_not_of;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v16;
  unint64_t last_of;
  unint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t EncodedSourceLocation;
  __int128 v23;
  __int128 v24;

  OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(_QWORD *)(a1 + 8) + 56));
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (const char *)(OCGSize - (*(_DWORD *)(v7 + 56) == 0));
  v9 = *(_QWORD *)(v7 + 24);
  v10 = (uint64_t)&v8[-v9];
  *(_QWORD *)&v24 = v9;
  *((_QWORD *)&v24 + 1) = &v8[-v9];
  while (1)
  {
    last_not_of = llvm::StringRef::find_last_not_of(&v24, " \t", 2, 0xFFFFFFFFFFFFFFFFLL);
    if ((unint64_t)(last_not_of + 1) < *((_QWORD *)&v24 + 1))
      v12 = last_not_of + 1;
    else
      v12 = *((_QWORD *)&v24 + 1);
    v13 = *((_QWORD *)&v24 + 1) - v10 + v12;
    if (*((_QWORD *)&v24 + 1) < v13)
      v13 = *((_QWORD *)&v24 + 1);
    *((_QWORD *)&v24 + 1) = v13;
    if (!v13)
      break;
    v14 = *(unsigned __int8 *)(v24 + v13 - 1);
    if (v14 != 10 && v14 != 13)
    {
      v20 = (const char *)(v24 + v13);
      v21 = *(_QWORD *)(a1 + 8) + 8;
      goto LABEL_26;
    }
    if (v13 >= v13 - 1)
      v16 = v13 - 1;
    else
      v16 = v13;
    *((_QWORD *)&v24 + 1) = v16;
    v23 = v24;
    last_of = llvm::StringRef::find_last_of(&v23, "\n\r", 2, 0xFFFFFFFFFFFFFFFFLL);
    if (last_of != -1)
    {
      if (*((_QWORD *)&v23 + 1) >= last_of)
        v18 = last_of;
      else
        v18 = *((_QWORD *)&v23 + 1);
      *(_QWORD *)&v23 = v23 + v18;
      *((_QWORD *)&v23 + 1) -= v18;
    }
    v19 = llvm::StringRef::find((uint64_t *)&v23, "//", 2uLL, 0);
    v10 = *((_QWORD *)&v24 + 1);
    if (v19 != -1)
    {
      if (*((_QWORD *)&v24 + 1) >= (unint64_t)(v19 - *((_QWORD *)&v23 + 1) + *((_QWORD *)&v24 + 1)))
        v10 = v19 - *((_QWORD *)&v23 + 1) + *((_QWORD *)&v24 + 1);
      *((_QWORD *)&v24 + 1) = v10;
    }
  }
  v21 = *(_QWORD *)(a1 + 8) + 8;
  v20 = v8;
LABEL_26:
  EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(v21, v20);
  mlir::emitError(EncodedSourceLocation, a2, (uint64_t)a3);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
    mlir::InFlightDiagnostic::abandon(a3);
}

void mlir::detail::Parser::emitError(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t OCGSize;
  const char *v7;
  uint64_t v8;
  uint64_t EncodedSourceLocation;

  OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(_QWORD *)(a1 + 8) + 56));
  v7 = (const char *)OCGSize;
  v8 = *(_QWORD *)(a1 + 8);
  if (!*(_DWORD *)(v8 + 56))
    v7 = (const char *)(OCGSize - 1);
  EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(v8 + 8, v7);
  mlir::emitError(EncodedSourceLocation, a2, (uint64_t)a3);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
    mlir::InFlightDiagnostic::abandon(a3);
}

void mlir::detail::Parser::emitError(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t EncodedSourceLocation;

  EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, a2);
  mlir::emitError(EncodedSourceLocation, a3, (uint64_t)a4);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
    mlir::InFlightDiagnostic::abandon(a4);
}

uint64_t mlir::detail::Parser::parseOptionalInteger(mlir::detail::Parser *this, llvm::APInt *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  const char *OCGSize;
  uint64_t EncodedSourceLocation;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  llvm::APInt *v26;
  const char *v28;
  __int16 v29;
  _QWORD v30[2];
  __int128 v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  void *v35;
  __int16 v36;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  void *__p;
  _QWORD *v41;
  char v42;
  uint64_t v43;

  v4 = 0;
  v43 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)this + 1);
  v6 = *(_DWORD *)(v5 + 56);
  if (v6 > 53)
  {
    if (v6 == 74)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v33);
      v23 = *((_QWORD *)this + 1);
      *(_OWORD *)(v23 + 56) = v33;
      *(_QWORD *)(v23 + 72) = v34;
      v24 = *((unsigned int *)a2 + 2);
      if (v24 > 0x40)
      {
        v4 = 1;
        **(_QWORD **)a2 = 1;
        bzero((void *)(*(_QWORD *)a2 + 8), (((unint64_t)(v24 + 63) >> 3) - 8) & 0xFFFFFFF8);
        goto LABEL_54;
      }
      *(_QWORD *)a2 = (_DWORD)v24 != 0;
    }
    else
    {
      v8 = 0;
      if (v6 != 54)
        return v4 | (v8 << 8);
      mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v33);
      v21 = *((_QWORD *)this + 1);
      *(_OWORD *)(v21 + 56) = v33;
      *(_QWORD *)(v21 + 72) = v34;
      v22 = *((unsigned int *)a2 + 2);
      if (v22 > 0x40)
      {
        **(_QWORD **)a2 = 0;
        bzero((void *)(*(_QWORD *)a2 + 8), (((unint64_t)(v22 + 63) >> 3) - 8) & 0xFFFFFFF8);
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
LABEL_47:
    v4 = 1;
LABEL_54:
    v8 = 1;
    return v4 | (v8 << 8);
  }
  v7 = v6 == 10 || v6 == 24;
  v8 = 0;
  if (v7)
  {
    if (v6 == 24)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v33);
      v9 = *((_QWORD *)this + 1);
      *(_OWORD *)(v9 + 56) = v33;
      *(_QWORD *)(v9 + 72) = v34;
      v5 = *((_QWORD *)this + 1);
    }
    v31 = *(_OWORD *)(v5 + 56);
    v32 = *(_QWORD *)(v5 + 72);
    *(_QWORD *)&v33 = "expected integer value";
    v36 = 259;
    if (!mlir::detail::Parser::parseToken((uint64_t)this, 10, (uint64_t)&v33))
      goto LABEL_53;
    v30[0] = *((_QWORD *)&v31 + 1);
    v30[1] = v32;
    v10 = 10;
    if (v32 >= 2)
    {
      if (*(_BYTE *)(*((_QWORD *)&v31 + 1) + 1) == 120)
        v10 = 0;
      else
        v10 = 10;
    }
    if (llvm::StringRef::getAsInteger((llvm::StringRef *)v30, v10, a2))
    {
      OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v31);
      v28 = "integer value too large";
      v29 = 259;
      EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*((_QWORD *)this + 1) + 8, OCGSize);
      mlir::emitError(EncodedSourceLocation, (uint64_t)&v28, (uint64_t)&v33);
      if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 1)
        mlir::InFlightDiagnostic::abandon(&v33);
      if ((_QWORD)v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      if (v42)
      {
        v13 = __p;
        if (__p)
        {
          v14 = v41;
          v15 = __p;
          if (v41 != __p)
          {
            do
              v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
            while (v14 != v13);
            v15 = __p;
          }
          v41 = v13;
          operator delete(v15);
        }
        v16 = v38;
        if (v38)
        {
          v17 = v39;
          v18 = v38;
          if (v39 != v38)
          {
            do
            {
              v20 = *--v17;
              v19 = v20;
              *v17 = 0;
              if (v20)
                MEMORY[0x20BD002D4](v19, 0x1000C8077774924);
            }
            while (v17 != v16);
            v18 = v38;
          }
          v39 = v16;
          operator delete(v18);
        }
        if (v35 != &v37)
          free(v35);
      }
LABEL_53:
      v4 = 0;
      goto LABEL_54;
    }
    v25 = *((_DWORD *)a2 + 2);
    v26 = (llvm::APInt *)(*(_QWORD *)a2 + 8 * ((v25 - 1) >> 6));
    if (v25 < 0x41)
      v26 = a2;
    if (((*(_QWORD *)v26 >> (v25 - 1)) & 1) != 0)
    {
      llvm::APInt::zext(a2, v25 + 1, (uint64_t)&v33);
      if (*((_DWORD *)a2 + 2) >= 0x41u && *(_QWORD *)a2)
        MEMORY[0x20BD002D4](*(_QWORD *)a2, 0x1000C8000313F17);
      *(_QWORD *)a2 = v33;
      *((_DWORD *)a2 + 2) = DWORD2(v33);
    }
    if (v6 == 24)
      llvm::APInt::negate(a2);
    goto LABEL_47;
  }
  return v4 | (v8 << 8);
}

uint64_t **llvm::APInt::negate(llvm::APInt *this)
{
  unsigned int v2;
  unint64_t v3;

  v2 = *((_DWORD *)this + 2);
  if (v2 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)this);
    return llvm::APInt::operator++((uint64_t **)this);
  }
  else
  {
    if (v2)
      v3 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
    else
      v3 = 0;
    *(_QWORD *)this = v3 & ~*(_QWORD *)this;
    return llvm::APInt::operator++((uint64_t **)this);
  }
}

uint64_t mlir::detail::Parser::parseFloatFromIntegerLiteral(uint64_t a1, uint64_t a2, MirInfoChannelAssignment *this, int a4, llvm::APFloatBase *a5, unsigned int a6)
{
  const char *OCGSize;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t IsGraphInitialization;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t EncodedSourceLocation;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  const llvm::APInt **v30;
  uint64_t v31;
  __int128 v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  llvm::APFloatBase *UInt64IntegerValue;
  char v40;
  uint64_t v41;
  llvm::APFloatBase *v42;
  unint64_t v43;
  const llvm::APInt **v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v53;
  int v54;
  llvm::APFloatBase *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  void *v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  llvm::APFloatBase *v65;
  llvm::APFloatBase *v66;
  llvm::APFloatBase *v67;
  unint64_t v68;
  BOOL v69;
  char *v70;
  const llvm::APInt *v71;
  unsigned int v72;
  __int16 v73;
  const llvm::APInt **v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  llvm::APFloatBase *v78;
  uint64_t v79;
  void *v80;
  _BYTE v81[96];
  void *v82;
  _QWORD *v83;
  void *__p;
  _QWORD *v85;
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize(this);
  v13 = *((_QWORD *)this + 2);
  if (v13 < 2 || (v14 = (unsigned __int8 *)*((_QWORD *)this + 1), v14[1] != 120))
  {
    v71 = (const llvm::APInt *)"unexpected decimal integer literal for a floating point value";
    v73 = 259;
    EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, OCGSize);
    mlir::emitError(EncodedSourceLocation, (uint64_t)&v71, (uint64_t)&v77);
    if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(&v77);
    v26 = mlir::Diagnostic::attachNote((uint64_t *)&v78, 0, 0);
    v27 = v26 + 16;
    v28 = *(_QWORD *)(v26 + 16);
    LODWORD(v74) = 3;
    v75 = "add a trailing dot to make the literal a float";
    v76 = 46;
    v29 = *(unsigned int *)(v26 + 24);
    v30 = (const llvm::APInt **)&v74;
    if (v29 >= *(_DWORD *)(v26 + 28))
    {
      v68 = v29 + 1;
      v69 = v28 + 24 * v29 > (unint64_t)&v74;
      if (v28 <= (unint64_t)&v74 && v69)
      {
        v70 = (char *)&v74 - v28;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v27, (void *)(v26 + 32), v68, 24);
        v28 = *(_QWORD *)(v26 + 16);
        v30 = (const llvm::APInt **)&v70[v28];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v27, (void *)(v26 + 32), v68, 24);
        v28 = *(_QWORD *)(v26 + 16);
        v30 = (const llvm::APInt **)&v74;
      }
    }
    v31 = v28 + 24 * *(unsigned int *)(v26 + 24);
    v32 = *(_OWORD *)v30;
    *(_QWORD *)(v31 + 16) = v30[2];
    *(_OWORD *)v31 = v32;
    ++*(_DWORD *)(v26 + 24);
    IsGraphInitialization = Layer2TDMapper::SourceLayer::IsGraphInitialization((Layer2TDMapper::SourceLayer *)v26);
    if (v77)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
    if (v86)
    {
      v33 = __p;
      if (__p)
      {
        v34 = v85;
        v35 = __p;
        if (v85 != __p)
        {
          do
            v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
          while (v34 != v33);
          v35 = __p;
        }
        v85 = v33;
        operator delete(v35);
      }
      v20 = v82;
      if (!v82)
        goto LABEL_61;
      v36 = v83;
      v22 = v82;
      if (v83 == v82)
        goto LABEL_60;
      do
      {
        v38 = *--v36;
        v37 = v38;
        *v36 = 0;
        if (v38)
          MEMORY[0x20BD002D4](v37, 0x1000C8077774924);
      }
      while (v36 != v20);
      goto LABEL_59;
    }
    return IsGraphInitialization;
  }
  if (a4)
  {
    v71 = (const llvm::APInt *)"hexadecimal float literal should not have a leading minus";
    v73 = 259;
    v15 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, OCGSize);
    mlir::emitError(v15, (uint64_t)&v71, (uint64_t)&v77);
    if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(&v77);
    IsGraphInitialization = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
    if (v77)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
    if (v86)
    {
      v17 = __p;
      if (__p)
      {
        v18 = v85;
        v19 = __p;
        if (v85 != __p)
        {
          do
            v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          v19 = __p;
        }
        v85 = v17;
        operator delete(v19);
      }
      v20 = v82;
      if (!v82)
        goto LABEL_61;
      v21 = v83;
      v22 = v82;
      if (v83 == v82)
      {
LABEL_60:
        v83 = v20;
        operator delete(v22);
LABEL_61:
        if (v80 != v81)
          free(v80);
        return IsGraphInitialization;
      }
      do
      {
        v24 = *--v21;
        v23 = v24;
        *v21 = 0;
        if (v24)
          MEMORY[0x20BD002D4](v23, 0x1000C8077774924);
      }
      while (v21 != v20);
LABEL_59:
      v22 = v82;
      goto LABEL_60;
    }
    return IsGraphInitialization;
  }
  UInt64IntegerValue = (llvm::APFloatBase *)mlir::Token::getUInt64IntegerValue(v14, v13);
  if (v40)
  {
    v41 = (uint64_t)UInt64IntegerValue;
    v42 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(UInt64IntegerValue);
    if (v42 == a5)
    {
      v72 = a6;
      if (a6 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v71, v41, 0);
      }
      else
      {
        v53 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a6;
        if (!a6)
          v53 = 0;
        v71 = (const llvm::APInt *)(v41 & v53);
      }
      v65 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v42);
      if (v65 == a5)
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v78, (uint64_t)a5, (uint64_t)&v71);
      else
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v78, a5, &v71);
      v66 = (llvm::APFloatBase *)(a2 + 8);
      if (*(_BYTE *)(a2 + 32))
      {
        llvm::APFloat::Storage::operator=(v66, (llvm::APFloatBase *)&v78);
      }
      else
      {
        if (v65 == v78)
          llvm::detail::DoubleAPFloat::DoubleAPFloat(v66, &v78);
        else
          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v66, (uint64_t)&v78);
        *(_BYTE *)(a2 + 32) = 1;
      }
      if (v65 == v78)
        std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100]((llvm::APFloatBase *)&v79);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v78);
      if (v72 >= 0x41 && v71)
        MEMORY[0x20BD002D4](v71, 0x1000C8000313F17);
      return 1;
    }
    LODWORD(v75) = a6;
    if (a6 > 0x40)
    {
      v44 = (const llvm::APInt **)&v74;
      llvm::APInt::initSlowCase((llvm::APInt *)&v74, v41, 0);
      v54 = (int)v75;
      if (v75 >= 0x41)
      {
        v42 = (llvm::APFloatBase *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v74);
        if ((v54 - (_DWORD)v42) > 0x40)
          goto LABEL_74;
        v44 = v74;
      }
    }
    else
    {
      v43 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a6;
      if (!a6)
        v43 = 0;
      v74 = (const llvm::APInt **)(v41 & v43);
      v44 = (const llvm::APInt **)&v74;
    }
    if (*v44 == (const llvm::APInt *)v41)
    {
      v55 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v42);
      if (v55 == a5)
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v78, (uint64_t)a5, (uint64_t)&v74);
      else
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v78, a5, (const llvm::APInt **)&v74);
      v67 = (llvm::APFloatBase *)(a2 + 8);
      if (*(_BYTE *)(a2 + 32))
      {
        llvm::APFloat::Storage::operator=(v67, (llvm::APFloatBase *)&v78);
      }
      else
      {
        if (v55 == v78)
          llvm::detail::DoubleAPFloat::DoubleAPFloat(v67, &v78);
        else
          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v67, (uint64_t)&v78);
        *(_BYTE *)(a2 + 32) = 1;
      }
      if (v55 == v78)
        std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100]((llvm::APFloatBase *)&v79);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v78);
      IsGraphInitialization = 1;
LABEL_122:
      if (v75 >= 0x41 && v74)
        MEMORY[0x20BD002D4](v74, 0x1000C8000313F17);
      return IsGraphInitialization;
    }
LABEL_74:
    v71 = (const llvm::APInt *)"hexadecimal float constant out of range for type";
    v73 = 259;
    v56 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, OCGSize);
    mlir::emitError(v56, (uint64_t)&v71, (uint64_t)&v77);
    if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(&v77);
    IsGraphInitialization = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
    if (v77)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
    if (v86)
    {
      v57 = __p;
      if (__p)
      {
        v58 = v85;
        v59 = __p;
        if (v85 != __p)
        {
          do
            v58 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v58 - 1);
          while (v58 != v57);
          v59 = __p;
        }
        v85 = v57;
        operator delete(v59);
      }
      v60 = v82;
      if (v82)
      {
        v61 = v83;
        v62 = v82;
        if (v83 != v82)
        {
          do
          {
            v64 = *--v61;
            v63 = v64;
            *v61 = 0;
            if (v64)
              MEMORY[0x20BD002D4](v63, 0x1000C8077774924);
          }
          while (v61 != v60);
          v62 = v82;
        }
        v83 = v60;
        operator delete(v62);
      }
      if (v80 != v81)
        free(v80);
    }
    goto LABEL_122;
  }
  v71 = (const llvm::APInt *)"hexadecimal float constant out of range for type";
  v73 = 259;
  v45 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, OCGSize);
  mlir::emitError(v45, (uint64_t)&v71, (uint64_t)&v77);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
    mlir::InFlightDiagnostic::abandon(&v77);
  IsGraphInitialization = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
  if (v77)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
  if (v86)
  {
    v46 = __p;
    if (__p)
    {
      v47 = v85;
      v48 = __p;
      if (v85 != __p)
      {
        do
          v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
        while (v47 != v46);
        v48 = __p;
      }
      v85 = v46;
      operator delete(v48);
    }
    v20 = v82;
    if (!v82)
      goto LABEL_61;
    v49 = v83;
    v22 = v82;
    if (v83 == v82)
      goto LABEL_60;
    do
    {
      v51 = *--v49;
      v50 = v51;
      *v49 = 0;
      if (v51)
        MEMORY[0x20BD002D4](v50, 0x1000C8077774924);
    }
    while (v49 != v20);
    goto LABEL_59;
  }
  return IsGraphInitialization;
}

void mlir::detail::Parser::parseResourceHandle(uint64_t a1@<X0>, _QWORD *a2@<X1>, int8x16_t **a3@<X2>, uint64_t a4@<X8>)
{
  const char *OCGSize;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  int8x16_t *v29;
  uint64_t v30;
  __int128 v31;
  int8x16_t *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t EncodedSourceLocation;
  int8x16_t **v42;
  char *v43;
  char *v44;
  __int128 v45;
  const char *v46;
  int8x16_t **v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  const char *v52;
  const void **v53;
  int8x16_t **v54;
  char *v55;
  char *v56;
  __int128 v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  _WORD v71[20];
  __int128 v72;
  uint64_t v73;
  char v74;
  _QWORD *v75;
  int8x16_t *v76;
  const char *v77;
  uint64_t v78;
  __int16 v79;
  __int128 v80;
  uint64_t v81;
  void *v82;
  unsigned int v83;
  unsigned int v84;
  _BYTE v85[96];
  void *v86;
  _QWORD *v87;
  void *__p;
  _QWORD *v89;
  char v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v75 = a2;
  OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(_QWORD *)(a1 + 8) + 56));
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_DWORD *)(v8 + 56);
  if (v9 == 3 || v9 == 12)
  {
LABEL_6:
    *(_OWORD *)a3 = *(_OWORD *)(v8 + 64);
    mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)&v80);
    v11 = *(_QWORD *)(a1 + 8);
    *(_OWORD *)(v11 + 56) = v80;
    *(_QWORD *)(v11 + 72) = v81;
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
    v15 = *(_QWORD *)(v12 + 48);
    v13 = v12 + 48;
    v14 = v15;
    v16 = *(_DWORD *)(v13 + 16);
    if (v16)
    {
      v17 = v16 - 1;
      v18 = ((v75 >> 4) ^ (v75 >> 9)) & (v16 - 1);
      v19 = (uint64_t *)(v14 + 32 * v18);
      v20 = *v19;
      if (v75 == (_QWORD *)*v19)
        goto LABEL_21;
      v21 = 0;
      v22 = 1;
      while (v20 != -4096)
      {
        if (v21)
          v23 = 0;
        else
          v23 = v20 == -8192;
        if (v23)
          v21 = v19;
        v24 = v18 + v22++;
        v18 = v24 & v17;
        v19 = (uint64_t *)(v14 + 32 * v18);
        v20 = *v19;
        if (v75 == (_QWORD *)*v19)
          goto LABEL_21;
      }
      if (v21)
        v26 = v21;
      else
        v26 = v19;
    }
    else
    {
      v26 = 0;
    }
    v19 = llvm::DenseMapBase<llvm::DenseMap<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>,mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>::InsertIntoBucket<mlir::OpAsmDialectInterface const* const&>(v13, v26, (uint64_t *)&v75);
LABEL_21:
    v27 = llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>::try_emplace<>((uint64_t)(v19 + 1), *a3, (const unsigned __int8 *)a3[1]);
    v28 = *v27;
    LODWORD(v29) = *(char *)(*v27 + 31);
    if ((v29 & 0x80000000) != 0)
    {
      v30 = v28 + 8;
      if (!*(_QWORD *)(v28 + 16))
        goto LABEL_25;
    }
    else
    {
      v30 = v28 + 8;
      if (!*(_BYTE *)(*v27 + 31))
      {
LABEL_25:
        (*(void (**)(__int128 *__return_ptr, _QWORD *, int8x16_t *, int8x16_t *))(*v75 + 32))(&v72, v75, *a3, a3[1]);
        if (v74)
        {
          (*(void (**)(__int128 *__return_ptr, _QWORD *, __int128 *))(*v75 + 40))(&v80, v75, &v72);
          if (*(char *)(v28 + 31) < 0)
            operator delete(*(void **)v30);
          v31 = v80;
          *(_QWORD *)(v30 + 16) = v81;
          *(_OWORD *)v30 = v31;
          *(_OWORD *)(v28 + 32) = v72;
          *(_QWORD *)(v28 + 48) = v73;
          LOBYTE(v29) = *(_BYTE *)(v28 + 31);
          goto LABEL_29;
        }
        v71[16] = 257;
        EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, OCGSize);
        mlir::emitError(EncodedSourceLocation, (uint64_t)v71, (uint64_t)&v80);
        if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
          mlir::InFlightDiagnostic::abandon(&v80);
        if (!(_QWORD)v80)
          goto LABEL_61;
        LODWORD(v76) = 3;
        v77 = "unknown 'resource' key '";
        v78 = 24;
        v42 = &v76;
        v43 = (char *)v82;
        if (v83 >= v84)
        {
          v65 = v83 + 1;
          if (v82 <= &v76 && (char *)v82 + 24 * v83 > (char *)&v76)
          {
            v68 = (char *)&v76 - (_BYTE *)v82;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v65, 24);
            v43 = (char *)v82;
            v42 = (int8x16_t **)((char *)v82 + v68);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v65, 24);
            v42 = &v76;
            v43 = (char *)v82;
          }
        }
        v44 = &v43[24 * v83];
        v45 = *(_OWORD *)v42;
        *((_QWORD *)v44 + 2) = v42[2];
        *(_OWORD *)v44 = v45;
        ++v83;
        if (!(_QWORD)v80)
          goto LABEL_61;
        v79 = 261;
        v46 = (const char *)a3[1];
        v76 = *a3;
        v77 = v46;
        mlir::Diagnostic::operator<<((uint64_t)&v80 + 8, (const void ***)&v76);
        if (!(_QWORD)v80)
          goto LABEL_61;
        LODWORD(v76) = 3;
        v77 = "' for dialect '";
        v78 = 15;
        v47 = &v76;
        v48 = (char *)v82;
        if (v83 >= v84)
        {
          v66 = v83 + 1;
          if (v82 <= &v76 && (char *)v82 + 24 * v83 > (char *)&v76)
          {
            v69 = (char *)&v76 - (_BYTE *)v82;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v66, 24);
            v48 = (char *)v82;
            v47 = (int8x16_t **)((char *)v82 + v69);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v66, 24);
            v47 = &v76;
            v48 = (char *)v82;
          }
        }
        v49 = &v48[24 * v83];
        v50 = *(_OWORD *)v47;
        *((_QWORD *)v49 + 2) = v47[2];
        *(_OWORD *)v49 = v50;
        ++v83;
        if (!(_QWORD)v80)
          goto LABEL_61;
        v51 = v75[1];
        v53 = *(const void ***)(v51 + 8);
        v52 = *(const char **)(v51 + 16);
        v79 = 261;
        v76 = (int8x16_t *)v53;
        v77 = v52;
        mlir::Diagnostic::operator<<((uint64_t)&v80 + 8, (const void ***)&v76);
        if ((_QWORD)v80)
        {
          LODWORD(v76) = 3;
          v77 = "'";
          v78 = 1;
          v54 = &v76;
          v55 = (char *)v82;
          if (v83 >= v84)
          {
            v67 = v83 + 1;
            if (v82 <= &v76 && (char *)v82 + 24 * v83 > (char *)&v76)
            {
              v70 = (char *)&v76 - (_BYTE *)v82;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v67, 24);
              v55 = (char *)v82;
              v54 = (int8x16_t **)((char *)v82 + v70);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v67, 24);
              v54 = &v76;
              v55 = (char *)v82;
            }
          }
          v56 = &v55[24 * v83];
          v57 = *(_OWORD *)v54;
          *((_QWORD *)v56 + 2) = v54[2];
          *(_OWORD *)v56 = v57;
          ++v83;
          v58 = v80;
          *(_BYTE *)a4 = 0;
          *(_BYTE *)(a4 + 24) = 0;
          if (v58)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v80);
        }
        else
        {
LABEL_61:
          *(_BYTE *)a4 = 0;
          *(_BYTE *)(a4 + 24) = 0;
        }
        if (v90)
        {
          v59 = __p;
          if (__p)
          {
            v60 = v89;
            v61 = __p;
            if (v89 != __p)
            {
              do
                v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
              while (v60 != v59);
              v61 = __p;
            }
            v89 = v59;
            operator delete(v61);
          }
          v36 = v86;
          if (!v86)
            goto LABEL_76;
          v62 = v87;
          v38 = v86;
          if (v87 == v86)
          {
LABEL_75:
            v87 = v36;
            operator delete(v38);
LABEL_76:
            if (v82 != v85)
              free(v82);
            return;
          }
          do
          {
            v64 = *--v62;
            v63 = v64;
            *v62 = 0;
            if (v64)
              MEMORY[0x20BD002D4](v63, 0x1000C8077774924);
          }
          while (v62 != v36);
LABEL_74:
          v38 = v86;
          goto LABEL_75;
        }
        return;
      }
    }
LABEL_29:
    v32 = *(int8x16_t **)(v28 + 8);
    if ((char)v29 >= 0)
      v32 = (int8x16_t *)v30;
    v29 = (int8x16_t *)v29;
    if ((char)v29 < 0)
      v29 = *(int8x16_t **)(v28 + 16);
    *a3 = v32;
    a3[1] = v29;
    *(_OWORD *)a4 = *(_OWORD *)(v28 + 32);
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(v28 + 48);
    *(_BYTE *)(a4 + 24) = 1;
    return;
  }
  if (mlir::Token::isKeyword((mlir::Token *)(v8 + 56)))
  {
    v8 = *(_QWORD *)(a1 + 8);
    goto LABEL_6;
  }
  v76 = (int8x16_t *)"expected identifier key for 'resource' entry";
  v79 = 259;
  mlir::detail::Parser::emitError(a1, (uint64_t)&v76, &v80);
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 24) = 0;
  if ((_QWORD)v80)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v80);
  if (v90)
  {
    v33 = __p;
    if (__p)
    {
      v34 = v89;
      v35 = __p;
      if (v89 != __p)
      {
        do
          v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
        while (v34 != v33);
        v35 = __p;
      }
      v89 = v33;
      operator delete(v35);
    }
    v36 = v86;
    if (!v86)
      goto LABEL_76;
    v37 = v87;
    v38 = v86;
    if (v87 == v86)
      goto LABEL_75;
    do
    {
      v40 = *--v37;
      v39 = v40;
      *v37 = 0;
      if (v40)
        MEMORY[0x20BD002D4](v39, 0x1000C8077774924);
    }
    while (v37 != v36);
    goto LABEL_74;
  }
}

void mlir::detail::Parser::parseResourceHandle(mlir::detail::Parser *this@<X0>, mlir::Dialect *a2@<X1>, _BYTE *a3@<X8>)
{
  _QWORD *v6;
  const void ***v7;
  char *v8;
  char *v9;
  __int128 v10;
  const void **v11;
  const char *v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  int8x16_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  int64_t v29;
  char v30[32];
  __int16 v31;
  const void **v32;
  const char *v33;
  uint64_t v34;
  __int16 v35;
  int8x16_t *v36;
  uint64_t v37;
  void *v38;
  unsigned int v39;
  unsigned int v40;
  _BYTE v41[96];
  void *v42;
  _QWORD *v43;
  void *__p;
  _QWORD *v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if (mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>((uint64_t)a2)
    && (v6 = (_QWORD *)mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>((uint64_t)a2)) != 0)
  {
    v36 = 0;
    v37 = 0;
    mlir::detail::Parser::parseResourceHandle((uint64_t)this, v6, &v36, (uint64_t)a3);
  }
  else
  {
    v31 = 257;
    mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)v30, &v36);
    if (!v36)
      goto LABEL_11;
    LODWORD(v32) = 3;
    v33 = "dialect '";
    v34 = 9;
    v7 = &v32;
    v8 = (char *)v38;
    if (v39 >= v40)
    {
      v26 = v39 + 1;
      if (v38 <= &v32 && (char *)v38 + 24 * v39 > (char *)&v32)
      {
        v28 = (char *)&v32 - (_BYTE *)v38;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v26, 24);
        v8 = (char *)v38;
        v7 = (const void ***)((char *)v38 + v28);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v26, 24);
        v7 = &v32;
        v8 = (char *)v38;
      }
    }
    v9 = &v8[24 * v39];
    v10 = *(_OWORD *)v7;
    *((_QWORD *)v9 + 2) = v7[2];
    *(_OWORD *)v9 = v10;
    ++v39;
    if (!v36)
      goto LABEL_11;
    v11 = (const void **)*((_QWORD *)a2 + 1);
    v12 = (const char *)*((_QWORD *)a2 + 2);
    v35 = 261;
    v32 = v11;
    v33 = v12;
    mlir::Diagnostic::operator<<((uint64_t)&v37, &v32);
    if (v36)
    {
      LODWORD(v32) = 3;
      v33 = "' does not expect resource handles";
      v34 = 34;
      v13 = &v32;
      v14 = (char *)v38;
      if (v39 >= v40)
      {
        v27 = v39 + 1;
        if (v38 <= &v32 && (char *)v38 + 24 * v39 > (char *)&v32)
        {
          v29 = (char *)&v32 - (_BYTE *)v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v27, 24);
          v14 = (char *)v38;
          v13 = (const void ***)((char *)v38 + v29);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v27, 24);
          v13 = &v32;
          v14 = (char *)v38;
        }
      }
      v15 = &v14[24 * v39];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v39;
      v17 = v36;
      *a3 = 0;
      a3[24] = 0;
      if (v17)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
    }
    else
    {
LABEL_11:
      *a3 = 0;
      a3[24] = 0;
    }
    if (v46)
    {
      v18 = __p;
      if (__p)
      {
        v19 = v45;
        v20 = __p;
        if (v45 != __p)
        {
          do
            v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          v20 = __p;
        }
        v45 = v18;
        operator delete(v20);
      }
      v21 = v42;
      if (v42)
      {
        v22 = v43;
        v23 = v42;
        if (v43 != v42)
        {
          do
          {
            v25 = *--v22;
            v24 = v25;
            *v22 = 0;
            if (v25)
              MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
          }
          while (v22 != v21);
          v23 = v42;
        }
        v43 = v21;
        operator delete(v23);
      }
      if (v38 != v41)
        free(v38);
    }
  }
}

uint64_t mlir::detail::Parser::codeCompleteExpectedTokens(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 136) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 136), a2, a3, 0);
  return 0;
}

uint64_t mlir::detail::Parser::codeCompleteOptionalTokens(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 136) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 136), a2, a3, 1);
  return 0;
}

uint64_t mlir::detail::Parser::codeCompleteAttribute(mlir::detail::Parser *this)
{
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 136) + 56))(*(_QWORD *)(*((_QWORD *)this + 1) + 136), *(_QWORD *)(*((_QWORD *)this + 1) + 80));
  return 0;
}

uint64_t mlir::detail::Parser::codeCompleteType(mlir::detail::Parser *this)
{
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 1) + 136) + 72))(*(_QWORD *)(*((_QWORD *)this + 1) + 136), *(_QWORD *)(*((_QWORD *)this + 1) + 80) + 24);
  return 0;
}

uint64_t mlir::detail::Parser::codeCompleteDialectSymbol(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 136) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                                 + 136));
  return 0;
}

{
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 136) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                                 + 136));
  return 0;
}

void mlir::parseAsmSourceFile(uint64_t **a1, uint64_t a2, uint64_t ***a3, mlir::AsmParserState *a4, mlir::AsmParserState *a5)
{
  uint64_t **v9;
  const char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t ***v13;
  ZinIrHalH13g *v14;
  mlir::Operation *v15;
  unint64_t v16;
  mlir::Region *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[8];
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  char v27;
  uint64_t ***v28;
  uint64_t **v29;
  _QWORD v30[6];
  int v31;
  void *v32;
  uint64_t v33;
  mlir::AsmParserState *v34[4];
  _QWORD v35[6];
  _QWORD v36[4];
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  mlir::Value *v44;
  uint64_t v45;
  int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t Context;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  mlir::Operation *v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v9 = *a3;
  v10 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)**a1 + 16))(**a1);
  v12 = mlir::FileLineColLoc::get((mlir::StringAttr *)v9, v10, v11, 0, 0);
  v21[0] = 0;
  v21[1] = 0;
  v21[2] = 0x1000000000;
  v21[3] = 0;
  v21[4] = 0;
  v21[5] = 0x1000000000;
  v21[6] = 0;
  v21[7] = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v28 = a3;
  v13 = mlir::Lexer::Lexer(&v29, a1, *a3, (uint64_t)a5);
  mlir::Lexer::lexToken((mlir::Lexer *)v13, (uint64_t)v30);
  v30[4] = 0;
  v30[5] = 0;
  v30[3] = v21;
  v31 = 0;
  v32 = v34;
  v33 = 0;
  v34[0] = a4;
  v34[1] = a5;
  v34[2] = (mlir::AsmParserState *)v35;
  v35[0] = "builtin";
  v35[1] = 7;
  v34[3] = (mlir::AsmParserState *)0x300000001;
  LOBYTE(v26) = 0;
  v27 = 0;
  v14 = mlir::ModuleOp::create(v12, &v26);
  v15 = v14;
  v36[0] = *v28;
  v36[1] = &v28;
  v36[2] = &v37;
  v36[3] = 0x200000000;
  v38 = &v40;
  v39 = 0x200000000;
  v41 = &v43;
  v42 = 0x200000000;
  v45 = 0;
  v44 = 0;
  v46 = 0;
  v49 = 0;
  v47 = 0;
  v48 = 0;
  v16 = *((unsigned int *)v14 + 11);
  if ((v16 & 0x7FFFFF) != 0)
    v17 = (mlir::Region *)((((unint64_t)v14 + 16 * ((v16 >> 23) & 1) + ((v16 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                         + 32 * *((unsigned int *)v14 + 10));
  else
    v17 = 0;
  Context = mlir::Region::getContext(v17);
  v51 = 0;
  v53 = 0;
  v52 = 0;
  if (*(mlir::Region **)v17 != v17)
  {
    v18 = *((_QWORD *)v17 + 1);
    if (v18)
      v19 = v18 - 8;
    else
      v19 = 0;
    v20 = *(_QWORD *)(v19 + 40);
    v52 = v19;
    v53 = v20;
  }
  v54 = v15;
}

void sub_207214D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  mlir::detail::SymbolState::~SymbolState((llvm **)va);
}

uint64_t sub_207214D98()
{
  uint64_t v0;

  return v0;
}

llvm::APFloatBase *std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100](llvm::APFloatBase *result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v1 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  if (v1)
  {
    v2 = *(_QWORD *)(v1 - 8);
    if (v2)
    {
      v3 = llvm::APFloatBase::PPCDoubleDouble(result);
      v4 = 32 * v2;
      do
      {
        while (v3 == *(void **)(v1 + v4 - 24))
        {
          std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100](v1 + v4 - 16, 0);
          v4 -= 32;
          if (!v4)
            goto LABEL_9;
        }
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)(v1 + v4 - 24));
        v4 -= 32;
      }
      while (v4);
    }
LABEL_9:
    JUMPOUT(0x20BD002D4);
  }
  return result;
}

uint64_t `anonymous namespace'::OperationParser::parseOperation(_anonymous_namespace_::OperationParser *this)
{
  const char *OCGSize;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  std::string::size_type v10;
  const void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t AttrData;
  std::string::size_type v15;
  void *v16;
  void *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  llvm **v23;
  unsigned __int8 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  std::string::size_type v34;
  uint64_t Values;
  uint64_t v36;
  unint64_t v37;
  char v38;
  llvm **v39;
  std::string *v40;
  std::string::size_type size;
  size_t v42;
  _BYTE *v43;
  void (*v44)(void);
  uint64_t v45;
  std::string *v46;
  char *v47;
  char *v48;
  __int128 v49;
  uint64_t DialectNamespace;
  std::string::size_type v51;
  void *v52;
  const char *v53;
  void *v54;
  std::string *v55;
  char *v56;
  char *v57;
  __int128 v58;
  std::string *v59;
  char *v60;
  char *v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  const char *v65;
  int v66;
  _BYTE *v67;
  uint64_t v68;
  BOOL v69;
  uint64_t EncodedSourceLocation;
  void *v71;
  std::string *v72;
  char *v73;
  char *v74;
  __int128 v75;
  std::string *v76;
  char *v77;
  char *v78;
  __int128 v79;
  int v80;
  _BYTE *v81;
  _BYTE *v82;
  int v83;
  unsigned __int8 v84;
  std::string::size_type v85;
  std::string::size_type v86;
  std::string::size_type v87;
  std::string::size_type v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  void *v94;
  _QWORD *v95;
  _QWORD *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  _BYTE *v104;
  int v106;
  _BYTE *v107;
  _BYTE *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char **v113;
  const char *v114;
  __n128 v115;
  mlir::AsmParserState *v116;
  llvm **v117;
  const char *v118;
  const void **v119;
  const char *v120;
  const void ***v121;
  char *v122;
  char *v123;
  __int128 v124;
  char v125;
  _QWORD *v126;
  _QWORD *v127;
  void *v128;
  _QWORD *v129;
  _QWORD *v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t i;
  _QWORD *v140;
  unint64_t v141;
  uint64_t v142;
  const char *v143;
  void *v144;
  _QWORD *v145;
  _QWORD *v146;
  void *v147;
  _QWORD *v148;
  _QWORD *v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  void **v153;
  char *v154;
  char *v155;
  __int128 v156;
  void **v157;
  char *v158;
  char *v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void **v166;
  uint64_t v167;
  __int128 v168;
  char *v169;
  char *v170;
  void *v171;
  std::string::size_type v172;
  char *v173;
  void *v174;
  std::string::size_type v175;
  uint64_t v176;
  unint64_t v177;
  void **v178;
  uint64_t v179;
  __int128 v180;
  _QWORD *v181;
  _QWORD *v182;
  void *v183;
  _QWORD *v184;
  _QWORD *v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  const char *v189;
  void *v190;
  _QWORD *v191;
  _QWORD *v192;
  void *v193;
  _QWORD *v194;
  _QWORD *v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  void **v199;
  char *v200;
  char *v201;
  __int128 v202;
  void **v203;
  char *v204;
  char *v205;
  __int128 v206;
  _QWORD *v207;
  _QWORD *v208;
  void *v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  llvm **v213;
  char *v214;
  char *v215;
  char *v216;
  uint64_t *v218;
  uint64_t LocRange;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  _QWORD *v225;
  void *v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char **v232;
  char *v233;
  char *v234;
  __int128 v235;
  uint64_t v236;
  char **v237;
  char *v238;
  char *v239;
  __int128 v240;
  uint64_t v241;
  char **v242;
  char *v243;
  char *v244;
  __int128 v245;
  uint64_t v246;
  char **v247;
  char *v248;
  char *v249;
  __int128 v250;
  _QWORD *v251;
  _QWORD *v252;
  void *v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  char *v258;
  int v259;
  uint64_t *v260;
  int v261;
  std::string::size_type v262;
  char *v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _BYTE *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  unint64_t v275;
  unint64_t v276;
  BOOL v277;
  unint64_t v278;
  BOOL v279;
  unint64_t v280;
  unint64_t v281;
  BOOL v282;
  const char *v283;
  void *v284;
  unint64_t v285;
  const char *v286;
  void *v287;
  unint64_t v288;
  unint64_t v289;
  BOOL v290;
  unint64_t v291;
  const char *v292;
  void *v293;
  unint64_t v294;
  void *v295;
  unint64_t v296;
  unint64_t v297;
  BOOL v298;
  unint64_t v299;
  unint64_t v300;
  const char *v301;
  void *v302;
  unint64_t v303;
  unint64_t v304;
  int64_t v305;
  char *v306;
  char *v307;
  int64_t v308;
  int64_t v309;
  int64_t v310;
  int64_t v311;
  int64_t v312;
  int64_t v313;
  int64_t v314;
  int64_t v315;
  int64_t v316;
  int64_t v317;
  int64_t v318;
  int64_t v319;
  int64_t v320;
  const char *v321;
  std::string::size_type v322;
  char *v323;
  uint64_t v324;
  __int128 v325;
  int v326;
  __int128 v327;
  uint64_t v328;
  char *v329;
  char *v330;
  char *v331;
  uint64_t v332;
  char v333;
  void *v334;
  uint64_t v335;
  uint64_t (*v336)(_QWORD *);
  llvm **v337;
  char v338;
  uint64_t v339;
  std::string::size_type v340;
  _anonymous_namespace_::OperationParser *v341;
  uint64_t v342;
  uint64_t v343[2];
  uint64_t NumNeededNEs;
  uint64_t v345[4];
  __int16 v346;
  _BYTE v347[24];
  const void **v348;
  const char *v349;
  uint64_t v350;
  __int16 v351;
  void *v352;
  uint64_t v353;
  _BYTE v354[32];
  std::string v355;
  void *__dst;
  uint64_t v357;
  _BYTE v358[72];
  uint64_t *v359;
  __int128 v360;
  uint64_t v361;
  void *__p[2];
  uint64_t v363;
  char v364;
  uint64_t *v365;
  unsigned int v366;
  const void **v367;
  _QWORD v368[2];
  void *v369;
  uint64_t v370;
  llvm *v371[2];
  unint64_t v372;
  unint64_t v373;
  void *v374;
  std::string::size_type v375;
  uint64_t v376;
  void *v377;
  uint64_t v378;
  _BYTE v379[96];
  __int128 v380;
  uint64_t v381;
  __int128 v382;
  uint64_t v383;
  unsigned __int8 v384;
  uint64_t v385;

  v385 = *MEMORY[0x24BDAC8D0];
  OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)this + 1) + 56));
  v3 = v354;
  v352 = v354;
  v353 = 0x100000000;
  v329 = 0;
  v4 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v4 + 56) == 6)
  {
    v374 = this;
    v375 = (std::string::size_type)&v352;
    v376 = (uint64_t)&v329;
      goto LABEL_341;
    while (1)
    {
      v5 = *((_QWORD *)this + 1);
      if (*(_DWORD *)(v5 + 56) != 16)
        break;
      mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v355);
      *(std::string *)(*((_QWORD *)this + 1) + 56) = v355;
        goto LABEL_341;
    }
    v355.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected '=' after SSA name";
    LOWORD(v357) = 259;
    if (!mlir::detail::Parser::parseToken((uint64_t)this, 18, (uint64_t)&v355))
      goto LABEL_341;
    v4 = *((_QWORD *)this + 1);
  }
  v327 = *(_OWORD *)(v4 + 56);
  v328 = *(_QWORD *)(v4 + 72);
  if ((_DWORD)v327 != 3)
  {
    if (mlir::Token::isKeyword((mlir::Token *)&v327))
    {
      v4 = *((_QWORD *)this + 1);
      goto LABEL_11;
    }
    if ((_DWORD)v327 == 11)
    {
      goto LABEL_333;
    }
    if (!mlir::Token::isCodeCompletionFor((uint64_t)&v327, 11))
    {
      if ((_DWORD)v327 != 2)
      {
        v374 = "expected operation name in quotes";
        LOWORD(v378) = 259;
        mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v374, &v355);
        v68 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v355);
        if (v355.__r_.__value_.__r.__words[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v355);
        if (!v364)
          goto LABEL_342;
        v92 = __p[0];
        if (__p[0])
        {
          v93 = __p[1];
          v94 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              v93 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v93 - 1);
            while (v93 != v92);
            v94 = __p[0];
          }
          __p[1] = v92;
          operator delete(v94);
        }
        v95 = (_QWORD *)v360;
        if ((_QWORD)v360)
        {
          v96 = (_QWORD *)*((_QWORD *)&v360 + 1);
          v97 = (void *)v360;
          if (*((_QWORD *)&v360 + 1) == (_QWORD)v360)
            goto LABEL_390;
          do
          {
            v99 = *--v96;
            v98 = v99;
            *v96 = 0;
            if (v99)
              MEMORY[0x20BD002D4](v98, 0x1000C8077774924);
          }
          while (v96 != v95);
LABEL_389:
          v97 = (void *)v360;
LABEL_390:
          *((_QWORD *)&v360 + 1) = v95;
          operator delete(v97);
        }
LABEL_391:
        if (__dst != v358)
          free(__dst);
        goto LABEL_342;
      }
      v63 = *((_QWORD *)this + 1);
      v64 = *(_QWORD *)(v63 + 24);
      v65 = OCGSize - 1;
      while ((unint64_t)v65 > v64)
      {
        v66 = *v65;
        if (v66 == 10)
          break;
        v67 = memchr(" \t\r", v66, 3uLL);
        v68 = 0;
        --v65;
        if (v67)
          v69 = v67 - " \t\r" == -1;
        else
          v69 = 1;
        if (v69)
          goto LABEL_342;
      }
      (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)(v63 + 136) + 16))(*(_QWORD *)(v63 + 136), &byte_207AF6795, 0);
      v100 = *((_QWORD *)this + 1);
      v101 = *(_QWORD *)(v100 + 144) + 16 * *(unsigned int *)(v100 + 152);
      v102 = *(_QWORD *)(v101 - 8);
      if (v102)
      {
        v103 = *(void **)(v101 - 16);
        v104 = memchr(v103, 46, *(_QWORD *)(v101 - 8));
        if (!v104 || v104 - (_BYTE *)v103 == -1)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(v100 + 136) + 24))(*(_QWORD *)(v100 + 136), v103, v102);
      }
LABEL_341:
      v68 = 0;
      goto LABEL_342;
    }
    v40 = &v355;
    mlir::Token::getStringValue((mlir::Token *)&v327, &v355);
    if ((v355.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v40 = (std::string *)v355.__r_.__value_.__r.__words[0];
    size = HIBYTE(v355.__r_.__value_.__r.__words[2]);
    if ((v355.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v355.__r_.__value_.__l.__size_;
    if (size)
    {
      if (v40->__r_.__value_.__s.__data_[size - 1] != 46
        || (size >= size - 1 ? (v42 = size - 1) : (v42 = size),
            !v42 || (v43 = memchr(v40, 46, v42)) != 0 && v43 - (_BYTE *)v40 != -1))
      {
LABEL_128:
        if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v355.__r_.__value_.__l.__data_);
        goto LABEL_341;
      }
      v44 = *(void (**)(void))(**(_QWORD **)(*((_QWORD *)this + 1) + 136) + 24);
    }
    else
    {
      v44 = *(void (**)(void))(**(_QWORD **)(*((_QWORD *)this + 1) + 136) + 16);
    }
    v44();
    goto LABEL_128;
  }
LABEL_11:
  v6 = v352;
  v7 = v353;
  v8 = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(v4 + 56));
  v9 = *((_QWORD *)this + 1);
  v11 = *(const void **)(v9 + 64);
  v10 = *(_QWORD *)(v9 + 72);
  v343[0] = v12;
  v343[1] = v13;
  if (!(_BYTE)v13)
  {
    v33 = 0;
    goto LABEL_333;
  }
  v355.__r_.__value_.__r.__words[0] = *(_QWORD *)(v12 + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v355);
  v16 = (void *)AttrData;
  v373 = 0;
  v17 = *(void **)(v343[0] + 16);
  v18 = v17 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v17 == &mlir::detail::TypeIDResolver<void,void>::id)
    v19 = 0;
  else
    v19 = LOBYTE(v343[0]);
  v322 = v15;
  if (v18)
  {
    v34 = v15;
    v355.__r_.__value_.__r.__words[0] = *(_QWORD *)(v343[0] + 8);
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v355);
    if (Values)
    {
      (*(void (**)(std::string *__return_ptr, uint64_t, void *, std::string::size_type))(*(_QWORD *)Values
                                                                                                 + 64))(&v355, Values, v16, v34);
      if (v355.__r_.__value_.__s.__data_[16])
      {
        v321 = OCGSize;
        v20 = (uint64_t)v16;
        v37 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>,llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>,void>::Callbacks
            + 2;
        __dst = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>,llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>,void>::Callbacks
              + 2;
        v38 = v373;
        if (v373 >= 8)
        {
          if ((v373 & 4) != 0)
          {
            if ((v373 & 2) != 0)
              v39 = v371;
            else
              v39 = (llvm **)v371[0];
            (*(void (**)(llvm **))((v373 & 0xFFFFFFFFFFFFFFF8) + 16))(v39);
          }
          if ((v38 & 2) == 0)
            llvm::deallocate_buffer(v371[0], v371[1]);
          v37 = (unint64_t)__dst;
        }
        v373 = v37;
        if (v37 >= 8)
        {
          if ((v37 & 2) != 0 && (v37 & 4) != 0)
          {
            (*(void (**)(uint64_t (**)(uint64_t, uint64_t), uint64_t, uint64_t))((v37 & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 8))((uint64_t (**)(uint64_t, uint64_t))v371, (uint64_t)&v355, v36);
          }
          else
          {
            *(_OWORD *)v371 = *(_OWORD *)&v355.__r_.__value_.__l.__data_;
            v372 = v355.__r_.__value_.__r.__words[2];
          }
        }
        v28 = 0;
        v26 = 0;
        goto LABEL_151;
      }
      LOWORD(v334) = 257;
      EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*((_QWORD *)this + 1) + 8, v8);
      mlir::emitError(EncodedSourceLocation, (uint64_t)&v330, (uint64_t)&v374);
      if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 1)
        mlir::InFlightDiagnostic::abandon(&v374);
      v71 = v374;
      if (v374)
      {
        LODWORD(v355.__r_.__value_.__l.__data_) = 3;
        v355.__r_.__value_.__l.__size_ = (std::string::size_type)"custom op '";
        v355.__r_.__value_.__r.__words[2] = 11;
        v72 = &v355;
        v73 = (char *)v377;
        if (v378 >= HIDWORD(v378))
        {
          v292 = OCGSize;
          v293 = v16;
          v294 = v378 + 1;
          if (v377 <= &v355 && (char *)v377 + 24 * v378 > (char *)&v355)
          {
            v314 = (char *)&v355 - (_BYTE *)v377;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v294, 24);
            v73 = (char *)v377;
            v72 = (std::string *)((char *)v377 + v314);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v294, 24);
            v72 = &v355;
            v73 = (char *)v377;
          }
          v34 = v322;
          v16 = v293;
          OCGSize = v292;
        }
        v74 = &v73[24 * v378];
        v75 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
        *((_QWORD *)v74 + 2) = *((_QWORD *)&v72->__r_.__value_.__l + 2);
        *(_OWORD *)v74 = v75;
        LODWORD(v378) = v378 + 1;
        v71 = v374;
        if (v374)
        {
          LOWORD(v357) = 261;
          v355.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
          v355.__r_.__value_.__l.__size_ = v10;
          mlir::Diagnostic::operator<<((uint64_t)&v375, (const void ***)&v355);
          v71 = v374;
          if (v374)
          {
            LODWORD(v355.__r_.__value_.__l.__data_) = 3;
            v355.__r_.__value_.__l.__size_ = (std::string::size_type)"' is unknown";
            v355.__r_.__value_.__r.__words[2] = 12;
            v76 = &v355;
            v77 = (char *)v377;
            if (v378 >= HIDWORD(v378))
            {
              v301 = OCGSize;
              v302 = v16;
              v303 = v378 + 1;
              if (v377 <= &v355 && (char *)v377 + 24 * v378 > (char *)&v355)
              {
                v319 = (char *)&v355 - (_BYTE *)v377;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v303, 24);
                v77 = (char *)v377;
                v76 = (std::string *)((char *)v377 + v319);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v303, 24);
                v76 = &v355;
                v77 = (char *)v377;
              }
              v34 = v322;
              v16 = v302;
              OCGSize = v301;
            }
            v78 = &v77[24 * v378];
            v79 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
            *((_QWORD *)v78 + 2) = *((_QWORD *)&v76->__r_.__value_.__l + 2);
            *(_OWORD *)v78 = v79;
            LODWORD(v378) = v378 + 1;
            v71 = v374;
          }
        }
      }
      v355.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
      v355.__r_.__value_.__s.__data_[8] = 0;
      v364 = 0;
      if (!v384)
      {
LABEL_280:
        v189 = OCGSize;
        mlir::InFlightDiagnostic::abandon(&v374);
        if (v374)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v374);
        if (v384)
        {
          v190 = v16;
          v191 = (_QWORD *)v382;
          if ((_QWORD)v382)
          {
            v192 = (_QWORD *)*((_QWORD *)&v382 + 1);
            v193 = (void *)v382;
            if (*((_QWORD *)&v382 + 1) != (_QWORD)v382)
            {
              do
                v192 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v192 - 1);
              while (v192 != v191);
              v193 = (void *)v382;
            }
            *((_QWORD *)&v382 + 1) = v191;
            operator delete(v193);
          }
          v194 = (_QWORD *)v380;
          if ((_QWORD)v380)
          {
            v195 = (_QWORD *)*((_QWORD *)&v380 + 1);
            v196 = (void *)v380;
            if (*((_QWORD *)&v380 + 1) != (_QWORD)v380)
            {
              do
              {
                v198 = *--v195;
                v197 = v198;
                *v195 = 0;
                if (v198)
                  MEMORY[0x20BD002D4](v197, 0x1000C8077774924);
              }
              while (v195 != v194);
              v196 = (void *)v380;
            }
            *((_QWORD *)&v380 + 1) = v194;
            operator delete(v196);
          }
          v16 = v190;
          if (v377 != v379)
            free(v377);
        }
        OCGSize = v189;
        if (v10 != v34 || v10 && memcmp(v11, v16, v10))
        {
          if (!v355.__r_.__value_.__r.__words[0])
            goto LABEL_309;
          LODWORD(v374) = 3;
          v375 = (std::string::size_type)" (tried '";
          v376 = 9;
          v199 = &v374;
          v200 = (char *)__dst;
          if (v357 >= HIDWORD(v357))
          {
            v295 = v16;
            v296 = v357 + 1;
            if (__dst <= &v374 && (char *)__dst + 24 * v357 > (char *)&v374)
            {
              v315 = (char *)&v374 - (_BYTE *)__dst;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v296, 24);
              v200 = (char *)__dst;
              v199 = (void **)((char *)__dst + v315);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v296, 24);
              v199 = &v374;
              v200 = (char *)__dst;
            }
            v34 = v322;
            v16 = v295;
            OCGSize = v189;
          }
          v201 = &v200[24 * v357];
          v202 = *(_OWORD *)v199;
          *((_QWORD *)v201 + 2) = v199[2];
          *(_OWORD *)v201 = v202;
          LODWORD(v357) = v357 + 1;
          if (!v355.__r_.__value_.__r.__words[0])
            goto LABEL_309;
          LOWORD(v378) = 261;
          v374 = v16;
          v375 = v34;
          mlir::Diagnostic::operator<<((uint64_t)&v355.__r_.__value_.__l.__size_, (const void ***)&v374);
          if (!v355.__r_.__value_.__r.__words[0])
            goto LABEL_309;
          LODWORD(v374) = 3;
          v375 = (std::string::size_type)"' as well)";
          v376 = 10;
          v203 = &v374;
          v204 = (char *)__dst;
          if (v357 >= HIDWORD(v357))
          {
            v304 = v357 + 1;
            if (__dst <= &v374 && (char *)__dst + 24 * v357 > (char *)&v374)
            {
              v320 = (char *)&v374 - (_BYTE *)__dst;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v304, 24);
              v204 = (char *)__dst;
              v203 = (void **)((char *)__dst + v320);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v304, 24);
              v203 = &v374;
              v204 = (char *)__dst;
            }
            OCGSize = v189;
          }
          v205 = &v204[24 * v357];
          v206 = *(_OWORD *)v203;
          *((_QWORD *)v205 + 2) = v203[2];
          *(_OWORD *)v205 = v206;
          LODWORD(v357) = v357 + 1;
        }
        if (v355.__r_.__value_.__r.__words[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v355);
LABEL_309:
        if (!v364)
          goto LABEL_325;
        v207 = __p[0];
        if (__p[0])
        {
          v208 = __p[1];
          v209 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              v208 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v208 - 1);
            while (v208 != v207);
            v209 = __p[0];
          }
          __p[1] = v207;
          operator delete(v209);
        }
        v184 = (_QWORD *)v360;
        if (!(_QWORD)v360)
          goto LABEL_323;
        v210 = (_QWORD *)*((_QWORD *)&v360 + 1);
        v186 = (void *)v360;
        if (*((_QWORD *)&v360 + 1) == (_QWORD)v360)
          goto LABEL_322;
        do
        {
          v212 = *--v210;
          v211 = v212;
          *v210 = 0;
          if (v212)
            MEMORY[0x20BD002D4](v211, 0x1000C8077774924);
        }
        while (v210 != v184);
        goto LABEL_321;
      }
      v355.__r_.__value_.__l.__size_ = v375;
      v80 = v378;
      LODWORD(v355.__r_.__value_.__r.__words[2]) = v376;
      v81 = v358;
      __dst = v358;
      v357 = 0x400000000;
      if (!(_DWORD)v378)
      {
        v83 = 1;
        goto LABEL_276;
      }
      v82 = v379;
      if (v377 != v379)
      {
        __dst = v377;
        v357 = v378;
        v377 = v379;
        HIDWORD(v378) = 0;
        v83 = 1;
LABEL_275:
        LODWORD(v378) = 0;
LABEL_276:
        v34 = v322;
        v360 = v380;
        v361 = v381;
        v380 = 0uLL;
        *(_OWORD *)__p = v382;
        v363 = v383;
        v381 = 0;
        v382 = 0uLL;
        v383 = 0;
        v364 = 1;
        if (v83)
        {
          if (v377 != v379)
            free(v377);
          v384 = 0;
        }
        goto LABEL_280;
      }
      if (v378 < 5)
      {
        v142 = v378;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v378, 24);
        v142 = v378;
        if (!(_DWORD)v378)
        {
LABEL_274:
          LODWORD(v357) = v80;
          v83 = v384;
          goto LABEL_275;
        }
        v82 = v377;
        v81 = __dst;
      }
      memcpy(v81, v82, 24 * v142);
      goto LABEL_274;
    }
    LOWORD(v334) = 257;
    v45 = mlir::Lexer::getEncodedSourceLocation(*((_QWORD *)this + 1) + 8, v8);
    mlir::emitError(v45, (uint64_t)&v330, (uint64_t)&v374);
    if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(&v374);
    if (v374)
    {
      LODWORD(v355.__r_.__value_.__l.__data_) = 3;
      v355.__r_.__value_.__r.__words[2] = 9;
      v46 = &v355;
      v47 = (char *)v377;
      if (v378 >= HIDWORD(v378))
      {
        v283 = OCGSize;
        v284 = v16;
        v285 = v378 + 1;
        if (v377 <= &v355 && (char *)v377 + 24 * v378 > (char *)&v355)
        {
          v310 = (char *)&v355 - (_BYTE *)v377;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v285, 24);
          v47 = (char *)v377;
          v46 = (std::string *)((char *)v377 + v310);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v285, 24);
          v46 = &v355;
          v47 = (char *)v377;
        }
        v34 = v322;
        v16 = v284;
        OCGSize = v283;
      }
      v48 = &v47[24 * v378];
      v49 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      *((_QWORD *)v48 + 2) = *((_QWORD *)&v46->__r_.__value_.__l + 2);
      *(_OWORD *)v48 = v49;
      LODWORD(v378) = v378 + 1;
    }
    DialectNamespace = mlir::OperationName::getDialectNamespace((mlir::OperationName *)v343);
    v52 = v374;
    if (v374)
    {
      v53 = OCGSize;
      v54 = v16;
      LOWORD(v357) = 261;
      v355.__r_.__value_.__r.__words[0] = DialectNamespace;
      v355.__r_.__value_.__l.__size_ = v51;
      mlir::Diagnostic::operator<<((uint64_t)&v375, (const void ***)&v355);
      v52 = v374;
      if (v374)
      {
        LODWORD(v355.__r_.__value_.__l.__data_) = 3;
        v355.__r_.__value_.__l.__size_ = (std::string::size_type)"' not found for custom op '";
        v355.__r_.__value_.__r.__words[2] = 27;
        v55 = &v355;
        v56 = (char *)v377;
        if (v378 >= HIDWORD(v378))
        {
          v291 = v378 + 1;
          if (v377 <= &v355 && (char *)v377 + 24 * v378 > (char *)&v355)
          {
            v313 = (char *)&v355 - (_BYTE *)v377;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v291, 24);
            v56 = (char *)v377;
            v55 = (std::string *)((char *)v377 + v313);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v291, 24);
            v55 = &v355;
            v56 = (char *)v377;
          }
        }
        v16 = v54;
        v57 = &v56[24 * v378];
        v58 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
        *((_QWORD *)v57 + 2) = *((_QWORD *)&v55->__r_.__value_.__l + 2);
        *(_OWORD *)v57 = v58;
        LODWORD(v378) = v378 + 1;
        v52 = v374;
        if (v374
          && (LOWORD(v357) = 261,
              v355.__r_.__value_.__r.__words[0] = (std::string::size_type)v11,
              v355.__r_.__value_.__l.__size_ = v10,
              mlir::Diagnostic::operator<<((uint64_t)&v375, (const void ***)&v355),
              (v52 = v374) != 0))
        {
          LODWORD(v355.__r_.__value_.__l.__data_) = 3;
          v355.__r_.__value_.__l.__size_ = (std::string::size_type)"' ";
          v355.__r_.__value_.__r.__words[2] = 2;
          v59 = &v355;
          v60 = (char *)v377;
          if (v378 >= HIDWORD(v378))
          {
            v300 = v378 + 1;
            if (v377 <= &v355 && (char *)v377 + 24 * v378 > (char *)&v355)
            {
              v318 = (char *)&v355 - (_BYTE *)v377;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v300, 24);
              v60 = (char *)v377;
              v59 = (std::string *)((char *)v377 + v318);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v300, 24);
              v59 = &v355;
              v60 = (char *)v377;
            }
            v34 = v322;
            v16 = v54;
          }
          else
          {
            v34 = v322;
          }
          v61 = &v60[24 * v378];
          v62 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
          *((_QWORD *)v61 + 2) = *((_QWORD *)&v59->__r_.__value_.__l + 2);
          *(_OWORD *)v61 = v62;
          LODWORD(v378) = v378 + 1;
          v52 = v374;
        }
        else
        {
          v34 = v322;
        }
      }
      else
      {
        v34 = v322;
      }
      OCGSize = v53;
    }
    v355.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
    v355.__r_.__value_.__s.__data_[8] = 0;
    v364 = 0;
    if (!v384)
    {
LABEL_223:
      mlir::InFlightDiagnostic::abandon(&v374);
      if (v374)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v374);
      if (v384)
      {
        v143 = OCGSize;
        v144 = v16;
        v145 = (_QWORD *)v382;
        if ((_QWORD)v382)
        {
          v146 = (_QWORD *)*((_QWORD *)&v382 + 1);
          v147 = (void *)v382;
          if (*((_QWORD *)&v382 + 1) != (_QWORD)v382)
          {
            do
              v146 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v146 - 1);
            while (v146 != v145);
            v147 = (void *)v382;
          }
          *((_QWORD *)&v382 + 1) = v145;
          operator delete(v147);
        }
        v148 = (_QWORD *)v380;
        if ((_QWORD)v380)
        {
          v149 = (_QWORD *)*((_QWORD *)&v380 + 1);
          v150 = (void *)v380;
          if (*((_QWORD *)&v380 + 1) != (_QWORD)v380)
          {
            do
            {
              v152 = *--v149;
              v151 = v152;
              *v149 = 0;
              if (v152)
                MEMORY[0x20BD002D4](v151, 0x1000C8077774924);
            }
            while (v149 != v148);
            v150 = (void *)v380;
          }
          *((_QWORD *)&v380 + 1) = v148;
          operator delete(v150);
        }
        v16 = v144;
        OCGSize = v143;
        if (v377 != v379)
          free(v377);
      }
      if ((v10 != v34 || v10 && memcmp(v11, v16, v10)) && v355.__r_.__value_.__r.__words[0])
      {
        LODWORD(v374) = 3;
        v375 = (std::string::size_type)" (tried '";
        v376 = 9;
        v153 = &v374;
        v154 = (char *)__dst;
        if (v357 >= HIDWORD(v357))
        {
          v286 = OCGSize;
          v287 = v16;
          v288 = v357 + 1;
          if (__dst <= &v374 && (char *)__dst + 24 * v357 > (char *)&v374)
          {
            v311 = (char *)&v374 - (_BYTE *)__dst;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v288, 24);
            v154 = (char *)__dst;
            v153 = (void **)((char *)__dst + v311);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v288, 24);
            v153 = &v374;
            v154 = (char *)__dst;
          }
          v34 = v322;
          v16 = v287;
          OCGSize = v286;
        }
        v155 = &v154[24 * v357];
        v156 = *(_OWORD *)v153;
        *((_QWORD *)v155 + 2) = v153[2];
        *(_OWORD *)v155 = v156;
        LODWORD(v357) = v357 + 1;
        if (v355.__r_.__value_.__r.__words[0])
        {
          LOWORD(v378) = 261;
          v374 = v16;
          v375 = v34;
          mlir::Diagnostic::operator<<((uint64_t)&v355.__r_.__value_.__l.__size_, (const void ***)&v374);
          if (v355.__r_.__value_.__r.__words[0])
          {
            LODWORD(v374) = 3;
            v375 = (std::string::size_type)"' as well)";
            v376 = 10;
            v157 = &v374;
            v158 = (char *)__dst;
            if (v357 >= HIDWORD(v357))
            {
              v299 = v357 + 1;
              if (__dst <= &v374 && (char *)__dst + 24 * v357 > (char *)&v374)
              {
                v317 = (char *)&v374 - (_BYTE *)__dst;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v299, 24);
                v158 = (char *)__dst;
                v157 = (void **)((char *)__dst + v317);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v299, 24);
                v157 = &v374;
                v158 = (char *)__dst;
              }
            }
            v159 = &v158[24 * v357];
            v160 = *(_OWORD *)v157;
            *((_QWORD *)v159 + 2) = v157[2];
            *(_OWORD *)v159 = v160;
            LODWORD(v357) = v357 + 1;
          }
        }
      }
      v161 = mlir::Diagnostic::attachNote((uint64_t *)&v355.__r_.__value_.__l.__size_, 0, 0);
      v162 = v161;
      v164 = v161 + 16;
      v163 = *(_QWORD *)(v161 + 16);
      LODWORD(v374) = 3;
      v375 = (std::string::size_type)"Registered dialects: ";
      v376 = 21;
      v165 = *(unsigned int *)(v161 + 24);
      v166 = &v374;
      if (v165 >= *(_DWORD *)(v161 + 28))
      {
        v276 = v165 + 1;
        v277 = v163 + 24 * v165 > (unint64_t)&v374;
        if (v163 <= (unint64_t)&v374 && v277)
        {
          v306 = (char *)&v374 - v163;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v161 + 16, (void *)(v161 + 32), v276, 24);
          v163 = *(_QWORD *)(v162 + 16);
          v166 = (void **)&v306[v163];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v161 + 16, (void *)(v161 + 32), v276, 24);
          v163 = *(_QWORD *)(v162 + 16);
          v166 = &v374;
        }
      }
      v167 = v163 + 24 * *(unsigned int *)(v162 + 24);
      v168 = *(_OWORD *)v166;
      *(_QWORD *)(v167 + 16) = v166[2];
      *(_OWORD *)v167 = v168;
      ++*(_DWORD *)(v162 + 24);
      mlir::MLIRContext::getAvailableDialects(***((mlir::MLIRContext ****)this + 1), &v330);
      v169 = v330;
      v170 = v331;
      if (v330 != v331)
      {
        v171 = *(void **)v330;
        v172 = *((_QWORD *)v330 + 1);
        v173 = v330 + 16;
        LOWORD(v378) = 261;
        v374 = v171;
        v375 = v172;
        mlir::Diagnostic::operator<<(v162, (const void ***)&v374);
        while (v173 != v170)
        {
          LOWORD(v378) = 261;
          v374 = ", ";
          v375 = 2;
          mlir::Diagnostic::operator<<(v162, (const void ***)&v374);
          v174 = *(void **)v173;
          v175 = *((_QWORD *)v173 + 1);
          v173 += 16;
          LOWORD(v378) = 261;
          v374 = v174;
          v375 = v175;
          mlir::Diagnostic::operator<<(v162, (const void ***)&v374);
        }
        v169 = v330;
      }
      v3 = v354;
      if (v169)
      {
        v331 = v169;
        operator delete(v169);
      }
      LODWORD(v374) = 3;
      v375 = (std::string::size_type)" ; for more info on dialect registration see https://mlir.llvm.org/getting_started/"
                                     "Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
      v376 = 149;
      v176 = *(unsigned int *)(v162 + 24);
      v177 = *(_QWORD *)(v162 + 16);
      v178 = &v374;
      if (v176 >= *(_DWORD *)(v162 + 28))
      {
        v278 = v176 + 1;
        v279 = v177 + 24 * v176 > (unint64_t)&v374;
        if (v177 <= (unint64_t)&v374 && v279)
        {
          v307 = (char *)&v374 - v177;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v164, (void *)(v162 + 32), v278, 24);
          v177 = *(_QWORD *)(v162 + 16);
          v178 = (void **)&v307[v177];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v164, (void *)(v162 + 32), v278, 24);
          v177 = *(_QWORD *)(v162 + 16);
          v178 = &v374;
        }
      }
      v179 = v177 + 24 * *(unsigned int *)(v162 + 24);
      v180 = *(_OWORD *)v178;
      *(_QWORD *)(v179 + 16) = v178[2];
      *(_OWORD *)v179 = v180;
      ++*(_DWORD *)(v162 + 24);
      if (v355.__r_.__value_.__r.__words[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v355);
      if (!v364)
      {
LABEL_325:
        v33 = 0;
        v141 = v373;
        if (v373 < 8)
          goto LABEL_333;
        goto LABEL_326;
      }
      v181 = __p[0];
      if (__p[0])
      {
        v182 = __p[1];
        v183 = __p[0];
        if (__p[1] != __p[0])
        {
          do
            v182 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v182 - 1);
          while (v182 != v181);
          v183 = __p[0];
        }
        __p[1] = v181;
        operator delete(v183);
      }
      v184 = (_QWORD *)v360;
      if (!(_QWORD)v360)
      {
LABEL_323:
        if (__dst != v358)
          free(__dst);
        goto LABEL_325;
      }
      v185 = (_QWORD *)*((_QWORD *)&v360 + 1);
      v186 = (void *)v360;
      if (*((_QWORD *)&v360 + 1) == (_QWORD)v360)
      {
LABEL_322:
        *((_QWORD *)&v360 + 1) = v184;
        operator delete(v186);
        goto LABEL_323;
      }
      do
      {
        v188 = *--v185;
        v187 = v188;
        *v185 = 0;
        if (v188)
          MEMORY[0x20BD002D4](v187, 0x1000C8077774924);
      }
      while (v185 != v184);
LABEL_321:
      v186 = (void *)v360;
      goto LABEL_322;
    }
    v355.__r_.__value_.__l.__size_ = v375;
    v106 = v378;
    LODWORD(v355.__r_.__value_.__r.__words[2]) = v376;
    v107 = v358;
    __dst = v358;
    v357 = 0x400000000;
    if (!(_DWORD)v378)
    {
      v109 = 1;
      goto LABEL_219;
    }
    v108 = v379;
    if (v377 != v379)
    {
      __dst = v377;
      v357 = v378;
      v377 = v379;
      HIDWORD(v378) = 0;
      v109 = 1;
LABEL_218:
      LODWORD(v378) = 0;
LABEL_219:
      v34 = v322;
      v360 = v380;
      v361 = v381;
      v380 = 0uLL;
      *(_OWORD *)__p = v382;
      v363 = v383;
      v381 = 0;
      v382 = 0uLL;
      v383 = 0;
      v364 = 1;
      if (v109)
      {
        if (v377 != v379)
          free(v377);
        v384 = 0;
      }
      goto LABEL_223;
    }
    if (v378 < 5)
    {
      v110 = v378;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v378, 24);
      v110 = v378;
      if (!(_DWORD)v378)
      {
LABEL_217:
        LODWORD(v357) = v106;
        v109 = v384;
        goto LABEL_218;
      }
      v108 = v377;
      v107 = __dst;
    }
    memcpy(v107, v108, 24 * v110);
    goto LABEL_217;
  }
  v321 = OCGSize;
  v20 = AttrData;
  v21 = v19 | v343[0] & 0xFFFFFFFFFFFFFF00;
  (*(void (**)(std::string *__return_ptr, unint64_t))(*(_QWORD *)v21 + 40))(&v355, v21);
  v22 = v373;
  if (v373 >= 8)
  {
    if ((v373 & 4) != 0)
    {
      if ((v373 & 2) != 0)
        v23 = v371;
      else
        v23 = (llvm **)v371[0];
      (*(void (**)(llvm **))((v373 & 0xFFFFFFFFFFFFFFF8) + 16))(v23);
    }
    if ((v22 & 2) == 0)
      llvm::deallocate_buffer(v371[0], v371[1]);
  }
  v373 = (unint64_t)__dst;
  if ((unint64_t)__dst >= 8)
  {
    if ((__dst & 2) != 0 && (__dst & 4) != 0)
    {
      (*(void (**)(llvm **, std::string *))(((unint64_t)__dst & 0xFFFFFFFFFFFFFFF8) + 8))(v371, &v355);
      if ((v84 & 1) != 0)
        goto LABEL_29;
      goto LABEL_101;
    }
    *(_OWORD *)v371 = *(_OWORD *)&v355.__r_.__value_.__l.__data_;
    v372 = v355.__r_.__value_.__r.__words[2];
  }
  if ((v24 & 1) != 0)
    goto LABEL_29;
LABEL_101:
  {
    v355.__r_.__value_.__r.__words[0] = (std::string::size_type)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::O"
                                                                "pTrait::IsIsolatedFromAbove<Empty>]";
    v355.__r_.__value_.__l.__size_ = 91;
    v85 = llvm::StringRef::find((uint64_t *)&v355, "DesiredTypeName = ", 0x12uLL, 0);
    if (v355.__r_.__value_.__l.__size_ >= v85)
      v86 = v85;
    else
      v86 = v355.__r_.__value_.__l.__size_;
    v87 = v355.__r_.__value_.__r.__words[0] + v86;
    v88 = v355.__r_.__value_.__l.__size_ - v86;
    if (v355.__r_.__value_.__l.__size_ - v86 >= 0x12)
      v89 = 18;
    else
      v89 = v355.__r_.__value_.__l.__size_ - v86;
    v90 = v88 - v89;
    if (v90 >= v90 - 1)
      v91 = v90 - 1;
    else
      v91 = v90;
    mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v87 + v89, v91);
  }
LABEL_29:
  v25 = v21 + 32;
  v26 = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v21 + 32))(v21, mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id);
  v27 = mlir::detail::InterfaceMap::lookup<mlir::OpAsmOpInterface>(v25);
  v28 = v27;
  if (v27)
  {
    v29 = (*(uint64_t (**)(void))(v27 + 24))();
    if (v30)
    {
      v31 = (char *)(*(uint64_t (**)(uint64_t))(v28 + 24))(v29);
      v28 = v32;
      goto LABEL_152;
    }
    v28 = 0;
  }
LABEL_151:
  v31 = &byte_207AF6795;
LABEL_152:
  v111 = *((_QWORD *)this + 1);
  v112 = *(unsigned int *)(v111 + 152);
  if (v112 >= *(_DWORD *)(v111 + 156))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v111 + 144, (void *)(v111 + 160), v112 + 1, 16);
    LODWORD(v112) = *(_DWORD *)(v111 + 152);
  }
  v113 = (char **)(*(_QWORD *)(v111 + 144) + 16 * v112);
  *v113 = v31;
  v113[1] = (char *)v28;
  ++*(_DWORD *)(v111 + 152);
  v355.__r_.__value_.__r.__words[0] = *(_QWORD *)(v343[0] + 8);
  v114 = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v355);
  llvm::PrettyStackTraceFormat::PrettyStackTraceFormat((llvm::PrettyStackTraceFormat *)v368, "MLIR Parser: custom op parser '%s'", v114);
  v342 = mlir::Lexer::getEncodedSourceLocation(*((_QWORD *)this + 1) + 8, v8);
  v115.n128_f64[0] = mlir::OperationState::OperationState(&v355, v342, v343[0]);
  v116 = *(mlir::AsmParserState **)(*((_QWORD *)this + 1) + 128);
  if (v116)
    mlir::AsmParserState::startOperationDefinition(v116, (const mlir::OperationName *)&v355.__r_.__value_.__r.__words[1]);
  v331 = (char *)v8;
  v332 = (uint64_t)this;
  v333 = 0;
  v330 = (char *)&off_24C028FA0;
  v334 = v6;
  v335 = v7;
  v336 = llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>::callback_fn<llvm::unique_function<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>>;
  v337 = v371;
  v338 = v26;
  v339 = v20;
  v340 = v322;
  v341 = this;
  if ((v373 & 2) != 0)
    v117 = v371;
  else
    v117 = (llvm **)v371[0];
  if (!(*(unsigned __int8 (**)(llvm **, char **, std::string *, __n128))(v373 & 0xFFFFFFFFFFFFFFF8))(v117, &v330, &v355, v115))
  {
    v33 = 0;
    OCGSize = v321;
    goto LABEL_194;
  }
  mlir::NamedAttrList::findDuplicate(&v359, v347);
  OCGSize = v321;
  if (!v347[16])
  {
    if (v333)
      goto LABEL_193;
    goto LABEL_188;
  }
  v118 = (const char *)(*((uint64_t (**)(uint64_t))v330 + 2))((uint64_t)&v330);
  v345[0] = (uint64_t)"attribute '";
  v346 = 259;
  (*((void (**)(uint64_t@<X0>, const char *@<X1>, uint64_t *@<X2>, _QWORD *@<X8>))v330 + 3))((uint64_t)&v330, v118, v345, &v374);
  NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)v347);
  v119 = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&NumNeededNEs);
  if (v374)
  {
    v351 = 261;
    v348 = v119;
    v349 = v120;
    mlir::Diagnostic::operator<<((uint64_t)&v375, &v348);
    if (v374)
    {
      LODWORD(v348) = 3;
      v349 = "' occurs more than once in the attribute list";
      v350 = 45;
      v121 = &v348;
      v122 = (char *)v377;
      if (v378 >= HIDWORD(v378))
      {
        v280 = v378 + 1;
        if (v377 <= &v348 && (char *)v377 + 24 * v378 > (char *)&v348)
        {
          v308 = (char *)&v348 - (_BYTE *)v377;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v280, 24);
          v122 = (char *)v377;
          v121 = (const void ***)((char *)v377 + v308);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v280, 24);
          v121 = &v348;
          v122 = (char *)v377;
        }
      }
      v123 = &v122[24 * v378];
      v124 = *(_OWORD *)v121;
      *((_QWORD *)v123 + 2) = v121[2];
      *(_OWORD *)v123 = v124;
      LODWORD(v378) = v378 + 1;
    }
  }
  v125 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v374);
  if (v374)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v374);
  if (v384)
  {
    v126 = (_QWORD *)v382;
    if ((_QWORD)v382)
    {
      v127 = (_QWORD *)*((_QWORD *)&v382 + 1);
      v128 = (void *)v382;
      if (*((_QWORD *)&v382 + 1) != (_QWORD)v382)
      {
        do
          v127 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v127 - 1);
        while (v127 != v126);
        v128 = (void *)v382;
      }
      *((_QWORD *)&v382 + 1) = v126;
      operator delete(v128);
    }
    v129 = (_QWORD *)v380;
    if ((_QWORD)v380)
    {
      v130 = (_QWORD *)*((_QWORD *)&v380 + 1);
      v131 = (void *)v380;
      if (*((_QWORD *)&v380 + 1) != (_QWORD)v380)
      {
        do
        {
          v133 = *--v130;
          v132 = v133;
          *v130 = 0;
          if (v133)
            MEMORY[0x20BD002D4](v132, 0x1000C8077774924);
        }
        while (v130 != v129);
        v131 = (void *)v380;
      }
      *((_QWORD *)&v380 + 1) = v129;
      operator delete(v131);
    }
    if (v377 != v379)
      free(v377);
  }
  v33 = 0;
  if (v125 && !v333)
  {
LABEL_188:
    v134 = (uint64_t)v367;
    v348 = v367;
    v367 = 0;
    v33 = (uint64_t)mlir::OpBuilder::create((_anonymous_namespace_::OperationParser *)((char *)this + 384), (const mlir::OperationState *)&v355);
    v345[0] = v33;
    {
      if (v134)
      {
        v374 = &v342;
        v375 = (std::string::size_type)&v348;
        v376 = (uint64_t)v345;
        else
          v33 = 0;
      }
      goto LABEL_194;
    }
LABEL_193:
    v33 = 0;
  }
LABEL_194:
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v330);
  v374 = &v376;
  v375 = 0x400000000;
  v135 = v366;
  if (v366 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v374, &v376, v366, 8);
    v135 = v366;
  }
  if (v135)
  {
    v136 = v365;
    v137 = &v365[v135];
    do
    {
      v138 = *v136;
      if (*v136)
      {
        for (i = *(_QWORD *)(v138 + 8); i != v138; i = *(_QWORD *)(i + 8))
        {
          if (i)
            v140 = (_QWORD *)(i - 8);
          else
            v140 = 0;
          mlir::Block::dropAllDefinedValueUses(v140);
        }
      }
      ++v136;
    }
    while (v136 != v137);
  }
  if (v374 != &v376)
    free(v374);
  mlir::OperationState::~OperationState((mlir::OperationState *)&v355);
  v368[0] = &off_24C02DD60;
  if (v369 != &v370)
    free(v369);
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v368);
  --*(_DWORD *)(*((_QWORD *)this + 1) + 152);
  v141 = v373;
  if (v373 >= 8)
  {
LABEL_326:
    if ((v141 & 4) != 0)
    {
      if ((v141 & 2) != 0)
        v213 = v371;
      else
        v213 = (llvm **)v371[0];
      (*(void (**)(llvm **))((v141 & 0xFFFFFFFFFFFFFFF8) + 16))(v213);
    }
    if ((v141 & 2) == 0)
      llvm::deallocate_buffer(v371[0], v371[1]);
  }
LABEL_333:
  if (!v33)
    goto LABEL_341;
  if (!(_DWORD)v353)
  {
    v218 = *(uint64_t **)(*((_QWORD *)this + 1) + 128);
    if (v218)
    {
      LocRange = mlir::Token::getLocRange((mlir::Token *)&v327);
      v221 = v220;
      v222 = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)this + 1) + 56));
      mlir::AsmParserState::finalizeOperationDefinition(v218, v33, LocRange, v221, v222, 0, 0);
    }
    goto LABEL_347;
  }
  v214 = (char *)*(unsigned int *)(v33 + 36);
  if (!(_DWORD)v214)
  {
    v374 = "cannot name an operation with no results";
    LOWORD(v378) = 259;
    v223 = mlir::Lexer::getEncodedSourceLocation(*((_QWORD *)this + 1) + 8, OCGSize);
    mlir::emitError(v223, (uint64_t)&v374, (uint64_t)&v355);
    if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(&v355);
    v68 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v355);
    if (v355.__r_.__value_.__r.__words[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v355);
    if (!v364)
      goto LABEL_342;
    v224 = __p[0];
    if (__p[0])
    {
      v225 = __p[1];
      v226 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v225 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v225 - 1);
        while (v225 != v224);
        v226 = __p[0];
      }
      __p[1] = v224;
      operator delete(v226);
    }
    v95 = (_QWORD *)v360;
    if ((_QWORD)v360)
    {
      v227 = (_QWORD *)*((_QWORD *)&v360 + 1);
      v97 = (void *)v360;
      if (*((_QWORD *)&v360 + 1) == (_QWORD)v360)
        goto LABEL_390;
      do
      {
        v229 = *--v227;
        v228 = v229;
        *v227 = 0;
        if (v229)
          MEMORY[0x20BD002D4](v228, 0x1000C8077774924);
      }
      while (v227 != v95);
      goto LABEL_389;
    }
    goto LABEL_391;
  }
  if (v329 != v214)
  {
    v374 = "operation defines ";
    LOWORD(v378) = 259;
    v230 = mlir::Lexer::getEncodedSourceLocation(*((_QWORD *)this + 1) + 8, OCGSize);
    mlir::emitError(v230, (uint64_t)&v374, (uint64_t)&v355);
    if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(&v355);
    if (v355.__r_.__value_.__r.__words[0])
    {
      v231 = (char *)*(unsigned int *)(v33 + 36);
      LODWORD(v330) = 5;
      v331 = v231;
      v232 = &v330;
      v233 = (char *)__dst;
      if (v357 >= HIDWORD(v357))
      {
        v275 = v357 + 1;
        if (__dst <= &v330 && (char *)__dst + 24 * v357 > (char *)&v330)
        {
          v305 = (char *)&v330 - (_BYTE *)__dst;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v275, 24);
          v233 = (char *)__dst;
          v232 = (char **)((char *)__dst + v305);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v275, 24);
          v232 = &v330;
          v233 = (char *)__dst;
        }
      }
      v234 = &v233[24 * v357];
      v235 = *(_OWORD *)v232;
      *((_QWORD *)v234 + 2) = v232[2];
      *(_OWORD *)v234 = v235;
      v236 = (v357 + 1);
      LODWORD(v357) = v357 + 1;
      if (v355.__r_.__value_.__r.__words[0])
      {
        LODWORD(v330) = 3;
        v331 = " results but was provided ";
        v332 = 26;
        v237 = &v330;
        v238 = (char *)__dst;
        if (v236 >= HIDWORD(v357))
        {
          v281 = v236 + 1;
          v282 = (char *)__dst + 24 * v236 > (char *)&v330;
          if (__dst <= &v330 && v282)
          {
            v309 = (char *)&v330 - (_BYTE *)__dst;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v281, 24);
            v238 = (char *)__dst;
            v237 = (char **)((char *)__dst + v309);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v281, 24);
            v237 = &v330;
            v238 = (char *)__dst;
          }
        }
        v239 = &v238[24 * v357];
        v240 = *(_OWORD *)v237;
        *((_QWORD *)v239 + 2) = v237[2];
        *(_OWORD *)v239 = v240;
        v241 = (v357 + 1);
        LODWORD(v357) = v357 + 1;
        if (v355.__r_.__value_.__r.__words[0])
        {
          LODWORD(v330) = 5;
          v331 = v329;
          v242 = &v330;
          v243 = (char *)__dst;
          if (v241 >= HIDWORD(v357))
          {
            v289 = v241 + 1;
            v290 = (char *)__dst + 24 * v241 > (char *)&v330;
            if (__dst <= &v330 && v290)
            {
              v312 = (char *)&v330 - (_BYTE *)__dst;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v289, 24);
              v243 = (char *)__dst;
              v242 = (char **)((char *)__dst + v312);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v289, 24);
              v242 = &v330;
              v243 = (char *)__dst;
            }
          }
          v244 = &v243[24 * v357];
          v245 = *(_OWORD *)v242;
          *((_QWORD *)v244 + 2) = v242[2];
          *(_OWORD *)v244 = v245;
          v246 = (v357 + 1);
          LODWORD(v357) = v357 + 1;
          if (v355.__r_.__value_.__r.__words[0])
          {
            LODWORD(v330) = 3;
            v331 = " to bind";
            v332 = 8;
            v247 = &v330;
            v248 = (char *)__dst;
            if (v246 >= HIDWORD(v357))
            {
              v297 = v246 + 1;
              v298 = (char *)__dst + 24 * v246 > (char *)&v330;
              if (__dst <= &v330 && v298)
              {
                v316 = (char *)&v330 - (_BYTE *)__dst;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v297, 24);
                v248 = (char *)__dst;
                v247 = (char **)((char *)__dst + v316);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v297, 24);
                v247 = &v330;
                v248 = (char *)__dst;
              }
            }
            v249 = &v248[24 * v357];
            v250 = *(_OWORD *)v247;
            *((_QWORD *)v249 + 2) = v247[2];
            *(_OWORD *)v249 = v250;
            LODWORD(v357) = v357 + 1;
          }
        }
      }
    }
    v68 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v355);
    if (v355.__r_.__value_.__r.__words[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v355);
    if (!v364)
      goto LABEL_342;
    v251 = __p[0];
    if (__p[0])
    {
      v252 = __p[1];
      v253 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v252 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v252 - 1);
        while (v252 != v251);
        v253 = __p[0];
      }
      __p[1] = v251;
      operator delete(v253);
    }
    v95 = (_QWORD *)v360;
    if ((_QWORD)v360)
    {
      v254 = (_QWORD *)*((_QWORD *)&v360 + 1);
      v97 = (void *)v360;
      if (*((_QWORD *)&v360 + 1) == (_QWORD)v360)
        goto LABEL_390;
      do
      {
        v256 = *--v254;
        v255 = v256;
        *v254 = 0;
        if (v256)
          MEMORY[0x20BD002D4](v255, 0x1000C8077774924);
      }
      while (v254 != v95);
      goto LABEL_389;
    }
    goto LABEL_391;
  }
  if (!*(_QWORD *)(*((_QWORD *)this + 1) + 128))
  {
    v257 = (char *)v352;
    v258 = (char *)v352 + 32 * v353;
    goto LABEL_405;
  }
  LODWORD(v374) = 0;
  v355.__r_.__value_.__r.__words[0] = (std::string::size_type)&v355.__r_.__value_.__r.__words[2];
  v355.__r_.__value_.__l.__size_ = 0x300000000;
  if (v353 <= 3)
  {
    v215 = (char *)v352;
    v216 = (char *)v352 + 32 * v353;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v355, &v355.__r_.__value_.__r.__words[2], v353, 16);
    if (!(_DWORD)v353)
      goto LABEL_401;
    v215 = (char *)v352;
    v216 = (char *)v352 + 32 * v353;
  }
  v259 = 0;
  v260 = (uint64_t *)(v215 + 24);
  do
  {
    v261 = v355.__r_.__value_.__r.__words[1];
    if (LODWORD(v355.__r_.__value_.__r.__words[1]) >= HIDWORD(v355.__r_.__value_.__r.__words[1]))
    {
      llvm::SmallVectorTemplateBase<std::pair<unsigned int,llvm::SMLoc>,true>::growAndEmplaceBack<unsigned int &,llvm::SMLoc&>((uint64_t)&v355, (unsigned int *)&v374, v260);
    }
    else
    {
      v262 = v355.__r_.__value_.__r.__words[0] + 16 * LODWORD(v355.__r_.__value_.__r.__words[1]);
      *(_DWORD *)v262 = v259;
      *(_QWORD *)(v262 + 8) = *v260;
      LODWORD(v355.__r_.__value_.__r.__words[1]) = v261 + 1;
    }
    v259 = (_DWORD)v374 + *((_DWORD *)v260 - 2);
    LODWORD(v374) = v259;
    v263 = (char *)(v260 + 1);
    v260 += 4;
  }
  while (v263 != v216);
LABEL_401:
  v264 = *(uint64_t **)(*((_QWORD *)this + 1) + 128);
  v265 = mlir::Token::getLocRange((mlir::Token *)&v327);
  v267 = v266;
  v268 = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)this + 1) + 56));
  mlir::AsmParserState::finalizeOperationDefinition(v264, v33, v265, v267, v268, (int *)v355.__r_.__value_.__l.__data_, LODWORD(v355.__r_.__value_.__r.__words[1]));
  if ((std::string::size_type *)v355.__r_.__value_.__l.__data_ != &v355.__r_.__value_.__r.__words[2])
    free(v355.__r_.__value_.__l.__data_);
  if (!(_DWORD)v353)
  {
LABEL_347:
    v68 = 1;
    goto LABEL_342;
  }
  v257 = (char *)v352;
  v258 = (char *)v352 + 32 * v353;
LABEL_405:
  v323 = v258;
  v269 = 0;
  while (1)
  {
    v270 = v3;
    v271 = *((unsigned int *)v257 + 4);
    if ((_DWORD)v271)
      break;
    v273 = v269;
LABEL_415:
    v257 += 32;
    v68 = 1;
    v269 = v273;
    v3 = v270;
    if (v257 == v323)
      goto LABEL_342;
  }
  v272 = 0;
  while (1)
  {
    v324 = *((_QWORD *)v257 + 3);
    v325 = *(_OWORD *)v257;
    v326 = v272;
    v273 = (v269 + 1);
    v274 = (uint64_t *)(v269 >= 6
                     ? v33 - 96 - 24 * (v269 - 5)
                     : v33 - 16 * v273);
      break;
    ++v272;
    LODWORD(v269) = v273;
    if (v271 == v272)
      goto LABEL_415;
  }
  v68 = 0;
  v3 = v270;
LABEL_342:
  if (v352 != v3)
    free(v352);
  return v68;
}

void `anonymous namespace'::OperationParser::pushSSANameScope(_anonymous_namespace_::OperationParser *this)
{
  unint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  llvm **v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  char *v11;
  llvm *v12[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = (unint64_t *)((char *)this + 208);
  v2 = *((_QWORD *)this + 26);
  v12[0] = 0;
  v12[1] = 0;
  LODWORD(v13) = 0;
  v4 = *((unsigned int *)this + 54);
  v5 = v12;
  if (v4 >= *((_DWORD *)this + 55))
  {
    v9 = v4 + 1;
    v10 = v2 + 24 * v4 > (unint64_t)v12;
    if (v2 <= (unint64_t)v12 && v10)
    {
      v11 = (char *)v12 - v2;
      v2 = *v3;
      v5 = (llvm **)&v11[*v3];
    }
    else
    {
      v2 = *v3;
      v5 = v12;
    }
  }
  v6 = v2 + 24 * *((unsigned int *)this + 54);
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = *v5;
  *v5 = 0;
  *(_DWORD *)(v6 + 8) = *((_DWORD *)v5 + 2);
  *((_DWORD *)v5 + 2) = 0;
  v7 = *(_DWORD *)(v6 + 12);
  *(_DWORD *)(v6 + 12) = *((_DWORD *)v5 + 3);
  *((_DWORD *)v5 + 3) = v7;
  v8 = *(_DWORD *)(v6 + 16);
  *(_DWORD *)(v6 + 16) = *((_DWORD *)v5 + 4);
  *((_DWORD *)v5 + 4) = v8;
  ++*((_DWORD *)this + 54);
  llvm::deallocate_buffer(v12[0], (void *)(32 * v13));
}

void `anonymous namespace'::OperationParser::IsolatedSSANameScope::~IsolatedSSANameScope(_anonymous_namespace_::OperationParser::IsolatedSSANameScope *this)
{
  void **v2;
  unsigned int v3;
  void **v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  llvm *v8;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  _QWORD *v14;
  uint64_t v15;

  v2 = (void **)*((_QWORD *)this + 3);
  v3 = *((_DWORD *)this + 8);
  if (v3)
  {
    v4 = &v2[3 * v3];
    do
    {
      v5 = v4;
      v4 -= 3;
      if (*((_DWORD *)v5 - 3))
      {
        v6 = *((unsigned int *)v5 - 4);
        if ((_DWORD)v6)
        {
          v7 = 0;
          do
          {
            v8 = *(llvm **)((char *)*v4 + v7);
            if (v8 != (llvm *)-8 && v8 != 0)
              llvm::deallocate_buffer(v8, (void *)(*(_QWORD *)v8 + 9));
            v7 += 8;
          }
          while (8 * v6 != v7);
        }
      }
      free(*v4);
    }
    while (v4 != v2);
    v2 = (void **)*((_QWORD *)this + 3);
  }
  if (v2 != (void **)((char *)this + 40))
    free(v2);
  if (*((_DWORD *)this + 3))
  {
    v10 = *((unsigned int *)this + 2);
    if ((_DWORD)v10)
    {
      v11 = 0;
      do
      {
        v12 = *(llvm **)(*(_QWORD *)this + v11);
        if (v12 != (llvm *)-8 && v12 != 0)
        {
          v15 = *(_QWORD *)v12;
          v14 = (_QWORD *)*((_QWORD *)v12 + 1);
          if (v14 != (_QWORD *)((char *)v12 + 24))
            free(v14);
          llvm::deallocate_buffer(v12, (void *)(v15 + 41));
        }
        v11 += 8;
      }
      while (8 * v10 != v11);
    }
  }
  free(*(void **)this);
}

void llvm::SmallVectorTemplateBase<llvm::DenseMap<llvm::StringRef,`anonymous namespace'::OperationParser::BlockDefinition,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,`anonymous namespace'::OperationParser::BlockDefinition>>,false>::grow(uint64_t a1, unint64_t a2)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  int v7;
  char *v8;
  _QWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;

  v14 = 0;
  v3 = (char *)(a1 + 16);
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 24, &v14);
  v5 = v4;
  v6 = *(char **)a1;
  v7 = *(_DWORD *)(a1 + 8);
  if (v7)
  {
    v8 = &v6[24 * v7];
    v9 = v4;
    do
    {
      *v9 = 0;
      v9[1] = 0;
      *((_DWORD *)v9 + 4) = 0;
      *v9 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      *((_DWORD *)v9 + 2) = *((_DWORD *)v6 + 2);
      *((_DWORD *)v6 + 2) = 0;
      v10 = *((_DWORD *)v9 + 3);
      *((_DWORD *)v9 + 3) = *((_DWORD *)v6 + 3);
      *((_DWORD *)v6 + 3) = v10;
      v11 = *((_DWORD *)v9 + 4);
      *((_DWORD *)v9 + 4) = *((_DWORD *)v6 + 4);
      *((_DWORD *)v6 + 4) = v11;
      v6 += 24;
      v9 += 3;
    }
    while (v6 != v8);
    v6 = *(char **)a1;
    v12 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v12)
      llvm::deallocate_buffer(*(llvm **)&v6[24 * v12 - 24], (void *)(32 * *(unsigned int *)&v6[24 * v12 - 8]));
  }
  v13 = v14;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

void llvm::SmallVectorTemplateBase<llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>,false>::grow(uint64_t a1, unint64_t a2)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  int v7;
  char *v8;
  _QWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;

  v14 = 0;
  v3 = (char *)(a1 + 16);
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 24, &v14);
  v5 = v4;
  v6 = *(char **)a1;
  v7 = *(_DWORD *)(a1 + 8);
  if (v7)
  {
    v8 = &v6[24 * v7];
    v9 = v4;
    do
    {
      *v9 = 0;
      v9[1] = 0;
      *((_DWORD *)v9 + 4) = 0;
      *v9 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      *((_DWORD *)v9 + 2) = *((_DWORD *)v6 + 2);
      *((_DWORD *)v6 + 2) = 0;
      v10 = *((_DWORD *)v9 + 3);
      *((_DWORD *)v9 + 3) = *((_DWORD *)v6 + 3);
      *((_DWORD *)v6 + 3) = v10;
      v11 = *((_DWORD *)v9 + 4);
      *((_DWORD *)v9 + 4) = *((_DWORD *)v6 + 4);
      *((_DWORD *)v6 + 4) = v11;
      v6 += 24;
      v9 += 3;
    }
    while (v6 != v8);
    v6 = *(char **)a1;
    v12 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v12)
      llvm::deallocate_buffer(*(llvm **)&v6[24 * v12 - 24], (void *)(16 * *(unsigned int *)&v6[24 * v12 - 8]));
  }
  v13 = v14;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

void llvm::SmallVectorTemplateBase<`anonymous namespace'::OperationParser::IsolatedSSANameScope,false>::grow(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  int v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  int v14;
  unint64_t v15;

  v15 = 0;
  v3 = (char *)(a1 + 16);
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 88, &v15);
  v5 = *(char **)a1;
  v6 = *(_DWORD *)(a1 + 8);
  if (v6)
  {
    v7 = 0;
    v8 = &v5[88 * v6];
    do
    {
      v9 = &v5[v7];
      v10 = &v4[v7];
      *(_QWORD *)v10 = *(_QWORD *)&v5[v7];
      *(_OWORD *)(v10 + 8) = *(_OWORD *)&v5[v7 + 8];
      *(_QWORD *)v9 = 0;
      *((_QWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 4) = 0;
      *((_QWORD *)v10 + 3) = &v4[v7 + 40];
      *(_QWORD *)&v4[v7 + 32] = 0x200000000;
      if (*(_DWORD *)&v5[v7 + 32])
        llvm::SmallVectorImpl<llvm::StringSet<llvm::MallocAllocator>>::operator=((uint64_t)&v4[v7 + 24], (uint64_t)(v9 + 24));
      v7 += 88;
    }
    while (v9 + 88 != v8);
    v5 = *(char **)a1;
    v11 = *(_DWORD *)(a1 + 8);
    if (v11)
    {
      v12 = 88 * v11;
      v13 = v5 - 88;
      do
      {
        v12 -= 88;
      }
      while (v12);
      v5 = *(char **)a1;
    }
  }
  v14 = v15;
  if (v5 != v3)
    free(v5);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v14;
}

uint64_t llvm::SmallVectorImpl<llvm::StringSet<llvm::MallocAllocator>>::operator=(uint64_t a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  uint64_t v6;
  void **v7;
  void **v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  void **v14;
  void **v15;
  void *v16;
  unsigned int v17;
  void *v18;
  llvm **v19;
  uint64_t v20;
  llvm **v21;
  llvm *v22;
  void **v24;
  unsigned int *v25;
  void **v26;
  void *v27;
  unsigned int v28;
  void *v29;
  llvm **v30;
  uint64_t v31;
  llvm **v32;
  llvm *v33;
  int v35;
  void **v36;
  uint64_t v37;
  void **i;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  llvm *v42;
  unsigned int v44;
  void **v45;
  void **v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  llvm *v50;
  void **v52;
  unsigned int *v53;
  void **v54;
  unsigned int v55;
  void **v56;
  void **v57;
  uint64_t v58;
  uint64_t v59;
  llvm *v60;
  unint64_t v63;

  if (a1 != a2)
  {
    v4 = *(void ***)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      llvm::SmallVectorImpl<llvm::StringSet<llvm::MallocAllocator>>::assignRemote(a1, a2);
      return a1;
    }
    v5 = *(unsigned int *)(a2 + 8);
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      v14 = *(void ***)a1;
      if ((_DWORD)v5)
      {
        v15 = &v4[3 * v5];
        do
        {
          v16 = *v4;
          v17 = *((_DWORD *)v4 + 4);
          v18 = v4[1];
          *v4 = 0;
          v4[1] = 0;
          *((_DWORD *)v4 + 4) = 0;
          v19 = (llvm **)*v14;
          *v14 = v16;
          v20 = *((unsigned int *)v14 + 2);
          LODWORD(v16) = *((_DWORD *)v14 + 3);
          v14[1] = v18;
          *((_DWORD *)v14 + 4) = v17;
          if ((_DWORD)v16 && (_DWORD)v20)
          {
            v21 = v19;
            do
            {
              v22 = *v21;
              if (*v21 != (llvm *)-8 && v22 != 0)
                llvm::deallocate_buffer(v22, (void *)(*(_QWORD *)v22 + 9));
              ++v21;
              --v20;
            }
            while (v20);
          }
          free(v19);
          v4 += 3;
          v14 += 3;
        }
        while (v4 != v15);
        v24 = v14;
        v14 = *(void ***)a1;
        LODWORD(v6) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        v24 = *(void ***)a1;
      }
      for (i = &v14[3 * v6]; i != v24; free(*i))
      {
        v39 = i;
        i -= 3;
        if (*((_DWORD *)v39 - 3))
        {
          v40 = *((unsigned int *)v39 - 4);
          if ((_DWORD)v40)
          {
            v41 = 0;
            do
            {
              v42 = *(llvm **)((char *)*i + v41);
              if (v42 != (llvm *)-8 && v42 != 0)
                llvm::deallocate_buffer(v42, (void *)(*(_QWORD *)v42 + 9));
              v41 += 8;
            }
            while (8 * v40 != v41);
          }
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
      v44 = *(_DWORD *)(a2 + 8);
      if (v44)
      {
        v45 = *(void ***)a2;
        v46 = (void **)(*(_QWORD *)a2 + 24 * v44);
        do
        {
          v47 = v46;
          v46 -= 3;
          if (*((_DWORD *)v47 - 3))
          {
            v48 = *((unsigned int *)v47 - 4);
            if ((_DWORD)v48)
            {
              v49 = 0;
              do
              {
                v50 = *(llvm **)((char *)*v46 + v49);
                if (v50 != (llvm *)-8 && v50 != 0)
                  llvm::deallocate_buffer(v50, (void *)(*(_QWORD *)v50 + 9));
                v49 += 8;
              }
              while (8 * v48 != v49);
            }
          }
          free(*v46);
        }
        while (v46 != v45);
      }
      goto LABEL_90;
    }
    if (*(_DWORD *)(a1 + 12) >= v5)
    {
      v25 = *(unsigned int **)a1;
      if ((_DWORD)v6)
      {
        v26 = &v4[3 * v6];
        do
        {
          v27 = *v4;
          v28 = *((_DWORD *)v4 + 4);
          v29 = v4[1];
          *v4 = 0;
          v4[1] = 0;
          *((_DWORD *)v4 + 4) = 0;
          v30 = *(llvm ***)v25;
          *(_QWORD *)v25 = v27;
          v31 = v25[2];
          LODWORD(v27) = v25[3];
          *((_QWORD *)v25 + 1) = v29;
          v25[4] = v28;
          if ((_DWORD)v27 && (_DWORD)v31)
          {
            v32 = v30;
            do
            {
              v33 = *v32;
              if (*v32 != (llvm *)-8 && v33 != 0)
                llvm::deallocate_buffer(v33, (void *)(*(_QWORD *)v33 + 9));
              ++v32;
              --v31;
            }
            while (v31);
          }
          free(v30);
          v4 += 3;
          v25 += 6;
        }
        while (v4 != v26);
        v25 = *(unsigned int **)a1;
        v36 = *(void ***)a2;
        v37 = *(unsigned int *)(a2 + 8);
        if (v6 == v37)
          goto LABEL_78;
      }
      else
      {
        v6 = 0;
        v36 = *(void ***)a2;
        LODWORD(v37) = *(_DWORD *)(a2 + 8);
        if (!(_DWORD)v37)
          goto LABEL_78;
      }
    }
    else
    {
      if ((_DWORD)v6)
      {
        v7 = *(void ***)a1;
        v8 = (void **)(*(_QWORD *)a1 + 24 * v6);
        do
        {
          v9 = v8;
          v8 -= 3;
          if (*((_DWORD *)v9 - 3))
          {
            v10 = *((unsigned int *)v9 - 4);
            if ((_DWORD)v10)
            {
              v11 = 0;
              do
              {
                v12 = *(llvm **)((char *)*v8 + v11);
                if (v12 != (llvm *)-8 && v12 != 0)
                  llvm::deallocate_buffer(v12, (void *)(*(_QWORD *)v12 + 9));
                v11 += 8;
              }
              while (8 * v10 != v11);
            }
          }
          free(*v8);
        }
        while (v8 != v7);
      }
      *(_DWORD *)(a1 + 8) = 0;
      v63 = 0;
      v25 = (unsigned int *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 24, &v63);
      llvm::SmallVectorTemplateBase<llvm::StringSet<llvm::MallocAllocator>,false>::moveElementsForGrow(a1, (uint64_t)v25);
      v35 = v63;
      if (*(_QWORD *)a1 != a1 + 16)
        free(*(void **)a1);
      v6 = 0;
      *(_QWORD *)a1 = v25;
      *(_DWORD *)(a1 + 12) = v35;
      v36 = *(void ***)a2;
      LODWORD(v37) = *(_DWORD *)(a2 + 8);
      if (!(_DWORD)v37)
        goto LABEL_78;
    }
    v52 = &v36[3 * v37];
    v53 = &v25[6 * v6];
    v54 = &v36[3 * v6];
    do
    {
      *(_QWORD *)v53 = *v54;
      *(_OWORD *)(v53 + 2) = *(_OWORD *)(v54 + 1);
      *v54 = 0;
      v54[1] = 0;
      *((_DWORD *)v54 + 4) = 0;
      v54 += 3;
      v53 += 6;
    }
    while (v54 != v52);
    v36 = *(void ***)a2;
LABEL_78:
    *(_DWORD *)(a1 + 8) = v5;
    v55 = *(_DWORD *)(a2 + 8);
    if (v55)
    {
      v56 = &v36[3 * v55];
      do
      {
        v57 = v56;
        v56 -= 3;
        if (*((_DWORD *)v57 - 3))
        {
          v58 = *((unsigned int *)v57 - 4);
          if ((_DWORD)v58)
          {
            v59 = 0;
            do
            {
              v60 = *(llvm **)((char *)*v56 + v59);
              if (v60 != (llvm *)-8 && v60 != 0)
                llvm::deallocate_buffer(v60, (void *)(*(_QWORD *)v60 + 9));
              v59 += 8;
            }
            while (8 * v58 != v59);
          }
        }
        free(*v56);
      }
      while (v56 != v36);
    }
LABEL_90:
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

double llvm::SmallVectorImpl<llvm::StringSet<llvm::MallocAllocator>>::assignRemote(uint64_t a1, uint64_t a2)
{
  void **v4;
  unsigned int v5;
  void **v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  llvm *v10;
  double result;

  v4 = *(void ***)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = &v4[3 * v5];
    do
    {
      v7 = v6;
      v6 -= 3;
      if (*((_DWORD *)v7 - 3))
      {
        v8 = *((unsigned int *)v7 - 4);
        if ((_DWORD)v8)
        {
          v9 = 0;
          do
          {
            v10 = *(llvm **)((char *)*v6 + v9);
            if (v10 != (llvm *)-8 && v10 != 0)
              llvm::deallocate_buffer(v10, (void *)(*(_QWORD *)v10 + 9));
            v9 += 8;
          }
          while (8 * v8 != v9);
        }
      }
      free(*v6);
    }
    while (v6 != v4);
    v4 = *(void ***)a1;
  }
  if (v4 != (void **)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

void llvm::SmallVectorTemplateBase<llvm::StringSet<llvm::MallocAllocator>,false>::moveElementsForGrow(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  void **v3;
  uint64_t v4;
  unsigned int v5;
  void **v6;
  void **v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  llvm *v11;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(void ***)a1;
    v4 = *(_QWORD *)a1 + 24 * v2;
    do
    {
      *(_QWORD *)a2 = *v3;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(v3 + 1);
      *v3 = 0;
      v3[1] = 0;
      *((_DWORD *)v3 + 4) = 0;
      v3 += 3;
      a2 += 24;
    }
    while (v3 != (void **)v4);
    v5 = *(_DWORD *)(a1 + 8);
    if (v5)
    {
      v6 = *(void ***)a1;
      v7 = (void **)(*(_QWORD *)a1 + 24 * v5);
      do
      {
        v8 = v7;
        v7 -= 3;
        if (*((_DWORD *)v8 - 3))
        {
          v9 = *((unsigned int *)v8 - 4);
          if ((_DWORD)v9)
          {
            v10 = 0;
            do
            {
              v11 = *(llvm **)((char *)*v7 + v10);
              if (v11 != (llvm *)-8 && v11 != 0)
                llvm::deallocate_buffer(v11, (void *)(*(_QWORD *)v11 + 9));
              v10 += 8;
            }
            while (8 * v9 != v10);
          }
        }
        free(*v7);
      }
      while (v7 != v6);
    }
  }
}

char *llvm::SmallVectorTemplateBase<llvm::StringSet<llvm::MallocAllocator>,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v10;
  void *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  unint64_t v17;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v8 = *(_QWORD *)a1 + 24 * v4;
    if (*(_QWORD *)a1 <= a2 && v8 > a2)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - *(_QWORD *)a1) >> 3);
      v17 = 0;
      v14 = a1 + 16;
      v15 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 24, &v17);
      llvm::SmallVectorTemplateBase<llvm::StringSet<llvm::MallocAllocator>,false>::moveElementsForGrow(a1, (uint64_t)v15);
      v16 = v17;
      if (*(_QWORD *)a1 != v14)
        free(*(void **)a1);
      *(_QWORD *)a1 = v15;
      *(_DWORD *)(a1 + 12) = v16;
      return &v15[24 * v13];
    }
    else
    {
      v17 = 0;
      v10 = a1 + 16;
      v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 24, &v17);
      llvm::SmallVectorTemplateBase<llvm::StringSet<llvm::MallocAllocator>,false>::moveElementsForGrow(a1, (uint64_t)v11);
      v12 = v17;
      if (*(_QWORD *)a1 != v10)
        free(*(void **)a1);
      *(_QWORD *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v12;
    }
  }
  return (char *)v3;
}

uint64_t `anonymous namespace'::OperationParser::parseGenericOperation(_anonymous_namespace_::OperationParser *this)
{
  const char *OCGSize;
  uint64_t EncodedSourceLocation;
  std::string::size_type size;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::string *v25;
  unint64_t v26;
  char *v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  std::string *v32;
  std::string::size_type v33;
  mlir::AsmParserState *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t i;
  _QWORD *v41;
  uint64_t __s2;
  _BYTE v43[24];
  _BYTE v44[24];
  _BYTE v45[17];
  _BYTE v46[24];
  std::string v47;
  uint64_t v48;
  _QWORD v49[24];
  __int128 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  void *v59;
  uint64_t v60;
  void *v61;
  _QWORD *v62;
  void *__p;
  _QWORD *v64;
  char v65;
  _QWORD v66[3];
  uint64_t *v67;
  uint64_t v68;
  void *v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v72;
  char v73;
  char *v74;
  unint64_t p_s2;
  _QWORD v76[2];
  __int16 v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)this + 1) + 56));
  EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*((_QWORD *)this + 1) + 8, OCGSize);
  v48 = EncodedSourceLocation;
  mlir::Token::getStringValue((mlir::Token *)(*((_QWORD *)this + 1) + 56), &v47);
  size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v47.__r_.__value_.__l.__size_;
  if (!size)
  {
    *(_QWORD *)&v50 = "empty operation name is invalid";
    v52 = 259;
    mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v50, v66);
    if (v66[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v66);
    if (v73)
    {
      v13 = v71;
      if (v71)
      {
        v14 = v72;
        v15 = v71;
        if (v72 != v71)
        {
          do
            v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          v15 = v71;
        }
        v72 = v13;
        operator delete(v15);
      }
      v16 = v69;
      if (v69)
      {
        v17 = v70;
        v18 = v69;
        if (v70 != v69)
        {
          do
          {
            v20 = *--v17;
            v19 = v20;
            *v17 = 0;
            if (v20)
              MEMORY[0x20BD002D4](v19, 0x1000C8077774924);
          }
          while (v17 != v16);
          v18 = v69;
        }
        v70 = v16;
        operator delete(v18);
      }
      v29 = v67;
      if (v67 != &v68)
        goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (std::string::find(&v47, 0, 0) == -1)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)this + 1) + 8), (uint64_t)&v50);
    v21 = *((_QWORD *)this + 1);
    *(_OWORD *)(v21 + 56) = v50;
    *(_QWORD *)(v21 + 72) = v51;
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v47;
    else
      v22 = (std::string *)v47.__r_.__value_.__r.__words[0];
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    else
      v23 = v47.__r_.__value_.__l.__size_;
    mlir::OperationState::OperationState(&v50, EncodedSourceLocation, (uint64_t)v22, v23);
    if (*(_UNKNOWN **)(*((_QWORD *)&v50 + 1) + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      v24 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      v25 = &v47;
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        v24 = v47.__r_.__value_.__l.__size_;
        v25 = (std::string *)v47.__r_.__value_.__r.__words[0];
      }
      v74 = (char *)v25;
      p_s2 = v24;
      LOBYTE(__s2) = 46;
      v26 = llvm::StringRef::find((uint64_t *)&v74, (char *)&__s2, 1uLL, 0);
      if (v26 == -1)
      {
        v27 = v74;
        v28 = p_s2;
      }
      else
      {
        v27 = v74;
        if (v26 >= p_s2)
          v28 = p_s2;
        else
          v28 = v26;
      }
      if (mlir::MLIRContext::getLoadedDialect(***((uint64_t ****)this + 1), (uint64_t)v27, v28)
        || mlir::MLIRContext::getOrLoadDialect(***((_QWORD ***)this + 1), v27, v28))
      {
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = &v47;
        else
          v32 = (std::string *)v47.__r_.__value_.__r.__words[0];
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
        else
          v33 = v47.__r_.__value_.__l.__size_;
        mlir::OperationName::OperationName(&v74, v32, v33, ***((_QWORD ***)this + 1));
        *((_QWORD *)&v50 + 1) = v74;
      }
      else if ((mlir::MLIRContext::allowsUnregisteredDialects(***((mlir::MLIRContext ****)this + 1)) & 1) == 0)
      {
        v74 = "operation being parsed with an unregistered dialect. If this is intended, please use -allow-unregistered-d"
              "ialect with the MLIR tool used";
        v77 = 259;
        mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v74, v49);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v49);
        goto LABEL_80;
      }
    }
    v34 = *(mlir::AsmParserState **)(*((_QWORD *)this + 1) + 128);
    if (v34)
      mlir::AsmParserState::startOperationDefinition(v34, (const mlir::OperationName *)((char *)&v50 + 8));
    v46[0] = 0;
    v46[16] = 0;
    v45[0] = 0;
    v45[16] = 0;
    v44[0] = 0;
    v44[16] = 0;
    v43[0] = 0;
    v43[16] = 0;
    {
      v35 = v56;
      __s2 = v56;
      v56 = 0;
      if (__s2
        || v57
        || *(_UNKNOWN **)(*((_QWORD *)&v50 + 1) + 16) == &mlir::detail::TypeIDResolver<void,void>::id
        || (v74 = (char *)&v48,
            p_s2 = (unint64_t)&v47,
      {
        v30 = (uint64_t)mlir::OpBuilder::create((_anonymous_namespace_::OperationParser *)((char *)this + 384), (const mlir::OperationState *)&v50);
        {
          if (!v35
            || (v74 = (char *)&v48,
                p_s2 = (unint64_t)&__s2,
                v76[0] = &v47,
          {
LABEL_81:
            v74 = (char *)v76;
            p_s2 = 0x400000000;
            v36 = v55;
            if (v55 >= 5)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, v55, 8);
              v36 = v55;
            }
            if (v36)
            {
              v37 = v54;
              v38 = &v54[v36];
              do
              {
                v39 = *v37;
                if (*v37)
                {
                  for (i = *(_QWORD *)(v39 + 8); i != v39; i = *(_QWORD *)(i + 8))
                  {
                    if (i)
                      v41 = (_QWORD *)(i - 8);
                    else
                      v41 = 0;
                    mlir::Block::dropAllDefinedValueUses(v41);
                  }
                }
                ++v37;
              }
              while (v37 != v38);
            }
            if (v74 != (char *)v76)
              free(v74);
            mlir::OperationState::~OperationState((mlir::OperationState *)&v50);
            if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_51;
            return v30;
          }
        }
      }
    }
LABEL_80:
    v30 = 0;
    goto LABEL_81;
  }
  *(_QWORD *)&v50 = "null character not allowed in operation name";
  v52 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v50, v58);
  if (v58[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v58);
  if (v65)
  {
    v5 = __p;
    if (__p)
    {
      v6 = v64;
      v7 = __p;
      if (v64 != __p)
      {
        do
          v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
        while (v6 != v5);
        v7 = __p;
      }
      v64 = v5;
      operator delete(v7);
    }
    v8 = v61;
    if (v61)
    {
      v9 = v62;
      v10 = v61;
      if (v62 != v61)
      {
        do
        {
          v12 = *--v9;
          v11 = v12;
          *v9 = 0;
          if (v12)
            MEMORY[0x20BD002D4](v11, 0x1000C8077774924);
        }
        while (v9 != v8);
        v10 = v61;
      }
      v62 = v8;
      operator delete(v10);
    }
    v29 = v59;
    if (v59 != &v60)
LABEL_49:
      free(v29);
  }
LABEL_50:
  v30 = 0;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
LABEL_51:
    operator delete(v47.__r_.__value_.__l.__data_);
  return v30;
}

uint64_t `anonymous namespace'::OperationParser::addDefinition(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unint64_t v12;
  unint64_t v14;
  const char *v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t IsGraphInitialization;
  const char *v19;
  uint64_t EncodedSourceLocation;
  uint64_t v21;
  uint64_t v22;
  Layer2TDMapper::SourceLayer *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  __int128 v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  mlir::Operation *DefiningOp;
  uint64_t v53;
  unint64_t v54;
  BOOL v55;
  char *v56;
  unint64_t v57;
  unint64_t v58[4];
  __int16 v59;
  unint64_t v60;
  uint64_t v61[3];
  _QWORD *v62;
  uint64_t v63[2];
  void *v64;
  uint64_t v65;
  void *v66;
  _QWORD *v67;
  void *__p;
  _QWORD *v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v6 = a2 + 8;
  v8 = v7;
  v9 = *(_DWORD *)(v7 + 8);
  v11 = (unsigned int *)(a2 + 24);
  v10 = *(_DWORD *)(a2 + 24);
  v12 = v10 + 1;
  if (v9 > v10 || v9 == (_DWORD)v12)
  {
    v14 = *(_QWORD *)(*(_QWORD *)v7 + 16 * *(unsigned int *)(a2 + 24));
    v60 = v14;
    if (!v14)
      goto LABEL_7;
  }
  else
  {
    if (v9 <= v12)
    {
      if (*(_DWORD *)(v7 + 12) < v12)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v12, 16);
        v9 = *(_DWORD *)(v8 + 8);
      }
      if (v9 != (_DWORD)v12)
        bzero((void *)(*(_QWORD *)v8 + 16 * v9), 16 * (v12 - v9));
    }
    *(_DWORD *)(v8 + 8) = v12;
    v14 = *(_QWORD *)(*(_QWORD *)v8 + 16 * *v11);
    v60 = v14;
    if (!v14)
      goto LABEL_7;
  }
  v58[0] = v14;
  v62 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 336), v58, &v62) & 1) != 0)
  {
    if ((*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8) != (a3[1] & 0xFFFFFFFFFFFFFFF8))
    {
      v19 = *(const char **)a2;
      v59 = 257;
      EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, v19);
      mlir::emitError(EncodedSourceLocation, (uint64_t)v58, (uint64_t)&v62);
      if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
        mlir::InFlightDiagnostic::abandon(&v62);
      v61[0] = a3[1] & 0xFFFFFFFFFFFFFFF8;
      if (v62)
        mlir::Diagnostic::append<char const(&)[26],llvm::StringRef &,char const(&)[2],unsigned int &,char const(&)[12],mlir::Type>((uint64_t)v63, "definition of SSA value '", v6, "#", (unsigned int *)(a2 + 24), "' has type ", v61);
      v21 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, *(const char **)(*(_QWORD *)v8 + 16 * *v11 + 8));
      v22 = mlir::Diagnostic::attachNote(v63, v21, 1);
      v57 = *(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8;
      v23 = (Layer2TDMapper::SourceLayer *)mlir::Diagnostic::append<char const(&)[5],mlir::Type>(v22, "previously used here with type ", (uint64_t *)&v57);
      IsGraphInitialization = Layer2TDMapper::SourceLayer::IsGraphInitialization(v23);
      if (v62)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v62);
      if (v70)
      {
        v24 = __p;
        if (__p)
        {
          v25 = v69;
          v26 = __p;
          if (v69 != __p)
          {
            do
              v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
            while (v25 != v24);
            v26 = __p;
          }
          v69 = v24;
          operator delete(v26);
        }
        v27 = v66;
        if (!v66)
          goto LABEL_62;
        v28 = v67;
        v29 = v66;
        if (v67 == v66)
        {
LABEL_61:
          v67 = v27;
          operator delete(v29);
LABEL_62:
          if (v64 != &v65)
            free(v64);
          return IsGraphInitialization;
        }
        do
        {
          v34 = *--v28;
          v33 = v34;
          *v28 = 0;
          if (v34)
            MEMORY[0x20BD002D4](v33, 0x1000C8077774924);
        }
        while (v28 != v27);
LABEL_60:
        v29 = v66;
        goto LABEL_61;
      }
      return IsGraphInitialization;
    }
    while (1)
    {
      v30 = *(uint64_t **)v14;
      if (!*(_QWORD *)v14)
        break;
      v31 = (uint64_t *)v30[1];
      if (v31)
      {
        *v31 = *v30;
        if (*v30)
          *(_QWORD *)(*v30 + 8) = v30[1];
      }
      v30[3] = (uint64_t)a3;
      v30[1] = (uint64_t)a3;
      v32 = *a3;
      *v30 = *a3;
      if (v32)
        *(_QWORD *)(v32 + 8) = v30;
      *a3 = (uint64_t)v30;
    }
    DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v60);
    mlir::Operation::destroy(DefiningOp);
    v62 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 336), &v60, &v62))
    {
      *v62 = -8192;
      *(int32x2_t *)(a1 + 344) = vadd_s32(*(int32x2_t *)(a1 + 344), (int32x2_t)0x1FFFFFFFFLL);
    }
    v53 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 128);
    if (v53)
      mlir::AsmParserState::refineDefinition(v53, v60, (unint64_t)a3);
LABEL_7:
    v15 = *(const char **)a2;
    v16 = (uint64_t **)(*(_QWORD *)v8 + 16 * *(unsigned int *)(a2 + 24));
    *v16 = a3;
    v16[1] = (uint64_t *)v15;
    v17 = *(_QWORD *)(a1 + 16) + 88 * *(unsigned int *)(a1 + 24);
    llvm::StringMap<std::nullopt_t,llvm::MallocAllocator>::try_emplace<>(*(_QWORD *)(v17 - 64) + 24 * *(unsigned int *)(v17 - 56) - 24, *(int8x16_t **)(a2 + 8), *(const unsigned __int8 **)(a2 + 16));
    return 1;
  }
  v35 = *(const char **)a2;
  v59 = 257;
  v36 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, v35);
  mlir::emitError(v36, (uint64_t)v58, (uint64_t)&v62);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
    mlir::InFlightDiagnostic::abandon(&v62);
  if (v62)
    mlir::Diagnostic::append<char const(&)[28],llvm::StringRef &,char const(&)[2]>((uint64_t)v63, "redefinition of SSA value '", v6, "'");
  v37 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, *(const char **)(*(_QWORD *)v8 + 16 * *v11 + 8));
  v38 = mlir::Diagnostic::attachNote(v63, v37, 1);
  v39 = v38 + 16;
  v40 = *(_QWORD *)(v38 + 16);
  LODWORD(v61[0]) = 3;
  v61[1] = (uint64_t)"previously defined here";
  v61[2] = 23;
  v41 = *(unsigned int *)(v38 + 24);
  v42 = v61;
  if (v41 >= *(_DWORD *)(v38 + 28))
  {
    v54 = v41 + 1;
    v55 = v40 + 24 * v41 > (unint64_t)v61;
    if (v40 <= (unint64_t)v61 && v55)
    {
      v56 = (char *)v61 - v40;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v39, (void *)(v38 + 32), v54, 24);
      v40 = *(_QWORD *)(v38 + 16);
      v42 = (uint64_t *)&v56[v40];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v39, (void *)(v38 + 32), v54, 24);
      v40 = *(_QWORD *)(v38 + 16);
      v42 = v61;
    }
  }
  v43 = v40 + 24 * *(unsigned int *)(v38 + 24);
  v44 = *(_OWORD *)v42;
  *(_QWORD *)(v43 + 16) = v42[2];
  *(_OWORD *)v43 = v44;
  ++*(_DWORD *)(v38 + 24);
  IsGraphInitialization = Layer2TDMapper::SourceLayer::IsGraphInitialization((Layer2TDMapper::SourceLayer *)v38);
  if (v62)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v62);
  if (v70)
  {
    v45 = __p;
    if (__p)
    {
      v46 = v69;
      v47 = __p;
      if (v69 != __p)
      {
        do
          v46 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v46 - 1);
        while (v46 != v45);
        v47 = __p;
      }
      v69 = v45;
      operator delete(v47);
    }
    v27 = v66;
    if (!v66)
      goto LABEL_62;
    v48 = v67;
    v29 = v66;
    if (v67 == v66)
      goto LABEL_61;
    do
    {
      v50 = *--v48;
      v49 = v50;
      *v48 = 0;
      if (v50)
        MEMORY[0x20BD002D4](v49, 0x1000C8077774924);
    }
    while (v48 != v27);
    goto LABEL_60;
  }
  return IsGraphInitialization;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::OperationParser::parseOperation(void)::$_0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t UInt64IntegerValue;
  char v8;
  BOOL v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *OCGSize;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  char *v38;
  _OWORD *v39;
  __int128 v40;
  char *v41;
  _QWORD v42[4];
  __int16 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  void *v48;
  __int16 v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;
  void *__p;
  _QWORD *v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v44 = *(_OWORD *)(v3 + 56);
  v45 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)&v46 = "expected valid ssa identifier";
  v49 = 259;
  if (!mlir::detail::Parser::parseToken(v2, 6, (uint64_t)&v46))
    return 0;
  v4 = *(_QWORD *)(v2 + 8);
  if (*(_DWORD *)(v4 + 56) != 15)
  {
    v33 = 1;
    goto LABEL_25;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v46);
  v5 = *(_QWORD *)(v2 + 8);
  *(_OWORD *)(v5 + 56) = v46;
  *(_QWORD *)(v5 + 72) = v47;
  v6 = *(_QWORD *)(v2 + 8);
  if (*(_DWORD *)(v6 + 56) == 10)
  {
    UInt64IntegerValue = mlir::Token::getUInt64IntegerValue(*(unsigned __int8 **)(v6 + 64), *(_QWORD *)(v6 + 72));
    if (v8)
      v9 = UInt64IntegerValue == 0;
    else
      v9 = 1;
    if (!v9)
    {
      v33 = UInt64IntegerValue;
      mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v2 + 8) + 8), (uint64_t)&v46);
      v34 = *(_QWORD *)(v2 + 8);
      *(_OWORD *)(v34 + 56) = v46;
      *(_QWORD *)(v34 + 72) = v47;
LABEL_25:
      v19 = *(_QWORD *)(a1 + 8);
      v21 = *((_QWORD *)&v44 + 1);
      v20 = v45;
      OCGSize = (void *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v44);
      v23 = *(unsigned int *)(v19 + 8);
      if (v23 >= *(_DWORD *)(v19 + 12))
      {
        *(_QWORD *)&v46 = v21;
        *((_QWORD *)&v46 + 1) = v20;
        LODWORD(v47) = v33;
        v48 = OCGSize;
        v35 = v23 + 1;
        v36 = *(_QWORD *)v19 + 32 * v23 > (unint64_t)&v46;
        if (*(_QWORD *)v19 <= (unint64_t)&v46 && v36)
        {
          v41 = (char *)&v46 - *(_QWORD *)v19;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v19, (void *)(v19 + 16), v35, 32);
          v37 = *(_QWORD *)v19;
          v38 = &v41[*(_QWORD *)v19];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v19, (void *)(v19 + 16), v35, 32);
          v37 = *(_QWORD *)v19;
          v38 = (char *)&v46;
        }
        v39 = (_OWORD *)(v37 + 32 * *(unsigned int *)(v19 + 8));
        v40 = *((_OWORD *)v38 + 1);
        *v39 = *(_OWORD *)v38;
        v39[1] = v40;
        v25 = *(_DWORD *)(v19 + 8) + 1;
      }
      else
      {
        v24 = *(_QWORD *)v19 + 32 * v23;
        *(_QWORD *)v24 = v21;
        *(_QWORD *)(v24 + 8) = v20;
        *(_DWORD *)(v24 + 16) = v33;
        *(_QWORD *)(v24 + 24) = OCGSize;
        v25 = v23 + 1;
      }
      *(_DWORD *)(v19 + 8) = v25;
      **(_QWORD **)(a1 + 16) += v33;
      return 1;
    }
    v42[0] = "expected named operation to have at least 1 result";
    v43 = 259;
    mlir::detail::Parser::emitError(v2, (uint64_t)v42, &v46);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v46);
    if ((_QWORD)v46)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v46);
    if (v55)
    {
      v11 = __p;
      if (__p)
      {
        v12 = v54;
        v13 = __p;
        if (v54 != __p)
        {
          do
            v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          v13 = __p;
        }
        v54 = v11;
        operator delete(v13);
      }
      v14 = v51;
      if (!v51)
        goto LABEL_45;
      v15 = v52;
      v16 = v51;
      if (v52 == v51)
      {
LABEL_44:
        v52 = v14;
        operator delete(v16);
LABEL_45:
        if (v48 != &v50)
          free(v48);
        return v10;
      }
      do
      {
        v18 = *--v15;
        v17 = v18;
        *v15 = 0;
        if (v18)
          MEMORY[0x20BD002D4](v17, 0x1000C8077774924);
      }
      while (v15 != v14);
LABEL_43:
      v16 = v51;
      goto LABEL_44;
    }
  }
  else
  {
    v42[0] = "expected integer number of results";
    v43 = 259;
    mlir::detail::Parser::emitWrongTokenError(v2, (uint64_t)v42, &v46);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v46);
    if ((_QWORD)v46)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v46);
    if (v55)
    {
      v27 = __p;
      if (__p)
      {
        v28 = v54;
        v29 = __p;
        if (v54 != __p)
        {
          do
            v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          v29 = __p;
        }
        v54 = v27;
        operator delete(v29);
      }
      v14 = v51;
      if (!v51)
        goto LABEL_45;
      v30 = v52;
      v16 = v51;
      if (v52 == v51)
        goto LABEL_44;
      do
      {
        v32 = *--v30;
        v31 = v32;
        *v30 = 0;
        if (v32)
          MEMORY[0x20BD002D4](v31, 0x1000C8077774924);
      }
      while (v30 != v14);
      goto LABEL_43;
    }
  }
  return v10;
}

unint64_t `anonymous namespace'::OperationParser::parseCustomOperationName(_anonymous_namespace_::OperationParser *this)
{
  _QWORD *v2;
  int8x16_t *v3;
  const unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  size_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  std::string::size_type size;
  std::string *v26;
  _QWORD v28[4];
  __int16 v29;
  std::string v30;
  std::string v31;
  __int128 __s2;
  char *v33;
  unint64_t v34;
  __int16 v35;
  char *v36;
  unint64_t v37;
  _QWORD v38[3];
  void *v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  void *__p;
  _QWORD *v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (int8x16_t *)v2[8];
  v4 = (const unsigned __int8 *)v2[9];
  v36 = (char *)v3;
  v37 = (unint64_t)v4;
  if (v4)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 1), (uint64_t)&__s2);
    v5 = *((_QWORD *)this + 1);
    *(_OWORD *)(v5 + 56) = __s2;
    *(_QWORD *)(v5 + 72) = v33;
    v6 = mlir::RegisteredOperationName::lookup(v3, v4, ***((uint64_t ****)this + 1));
    if (v7)
    {
      LOBYTE(v8) = v6;
      v9 = v6 & 0xFFFFFFFFFFFFFF00;
      return v9 & 0xFFFFFFFFFFFFFF00 | v8;
    }
    LOBYTE(__s2) = 46;
    v18 = llvm::StringRef::find((uint64_t *)&v36, (char *)&__s2, 1uLL, 0);
    if (v18 == -1)
    {
      v20 = v36;
      v19 = v37;
      v8 = v37;
      v21 = *((_QWORD *)this + 1);
      if (*(_DWORD *)(v21 + 56) != 2)
        goto LABEL_37;
    }
    else
    {
      v20 = v36;
      v19 = v37;
      if (v18 >= v37)
        v8 = v37;
      else
        v8 = v18;
      memset(&v31, 0, sizeof(v31));
      if (v37 > v18 + 1)
      {
LABEL_40:
        mlir::MLIRContext::getOrLoadDialect(***((_QWORD ***)this + 1), v20, v8);
        mlir::OperationName::OperationName(&__s2, v36, v37, ***((_QWORD ***)this + 1));
        LOBYTE(v8) = __s2;
        v9 = __s2 & 0xFFFFFFFFFFFFFF00;
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31.__r_.__value_.__l.__data_);
        return v9 & 0xFFFFFFFFFFFFFF00 | v8;
      }
      v21 = *((_QWORD *)this + 1);
      if (*(_DWORD *)(v21 + 56) != 2)
      {
LABEL_37:
        v23 = *(_QWORD *)(v21 + 144) + 16 * *(unsigned int *)(v21 + 152);
        v24 = *(char **)(v23 - 16);
        v8 = *(_QWORD *)(v23 - 8);
        v29 = 773;
        v28[0] = v24;
        v28[1] = v8;
        v28[2] = ".";
        *(_QWORD *)&__s2 = v28;
        v33 = v20;
        v34 = v19;
        v35 = 1282;
        llvm::Twine::str((llvm::Twine *)&__s2, &v30);
        v31 = v30;
        size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
        v26 = &v31;
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          size = v30.__r_.__value_.__l.__size_;
          v26 = (std::string *)v30.__r_.__value_.__r.__words[0];
        }
        v36 = (char *)v26;
        v37 = size;
        v20 = v24;
        goto LABEL_40;
      }
    }
    if (v20[v19 - 1] != 46)
      goto LABEL_37;
    if (v8)
    {
      v22 = memchr(v20, 46, v8);
      if (!v22 || v22 - v20 == -1)
        (*(void (**)(_QWORD, char *, size_t))(**(_QWORD **)(v21 + 136) + 24))(*(_QWORD *)(v21 + 136), v20, v8);
      v9 = 0;
      LOBYTE(v8) = 0;
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    *(_QWORD *)&__s2 = "empty operation name is invalid";
    v35 = 259;
    mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&__s2, v38);
    if (v38[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
    if (v45)
    {
      v10 = __p;
      if (__p)
      {
        v11 = v44;
        v12 = __p;
        if (v44 != __p)
        {
          do
            v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
          while (v11 != v10);
          v12 = __p;
        }
        v44 = v10;
        operator delete(v12);
      }
      v13 = v41;
      if (v41)
      {
        v14 = v42;
        v15 = v41;
        if (v42 != v41)
        {
          do
          {
            v17 = *--v14;
            v16 = v17;
            *v14 = 0;
            if (v17)
              MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
          }
          while (v14 != v13);
          v15 = v41;
        }
        v42 = v13;
        operator delete(v15);
      }
      if (v39 != &v40)
        free(v39);
    }
    LOBYTE(v8) = 0;
    v9 = 0;
  }
  return v9 & 0xFFFFFFFFFFFFFF00 | v8;
}

uint64_t `anonymous namespace'::OperationParser::parseTrailingLocationSpecifier(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int16 v14;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 + 56) != 59)
    return 1;
  mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v12);
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v5 + 56) = v12;
  *(_QWORD *)(v5 + 72) = v13;
  *(_QWORD *)&v12 = "expected '(' in location";
  v14 = 259;
  if (mlir::detail::Parser::parseToken(a1, 21, (uint64_t)&v12))
  {
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 56);
    v11 = 0;
    if (v6 == 5)
    {
        return 0;
    }
    else if (!mlir::detail::Parser::parseLocationInstance((mlir::UnknownLoc ****)a1, &v11))
    {
      return 0;
    }
    *(_QWORD *)&v12 = "expected ')' in location";
    v14 = 259;
    if (mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v12))
    {
      v7 = (a2 >> 2) & 1;
      if ((a2 & 0xFFFFFFFFFFFFFFF8) == 0)
        LODWORD(v7) = 1;
      v8 = (_DWORD)v7 == 0;
      v9 = 24;
      if (!v8)
        v9 = 32;
      *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + v9) = v11;
      return 1;
    }
  }
  return 0;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::OpAsmOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v23 = 72;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[336];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallImpl<llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))a1)(*(_QWORD *)(a1 + 8));
}

uint64_t llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>::callback_fn<llvm::unique_function<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[3];
  if ((v1 & 2) == 0)
    a1 = (_QWORD *)*a1;
  return (*(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFF8))(a1);
}

void `anonymous namespace'::CustomOpAsmParser::~CustomOpAsmParser(_anonymous_namespace_::CustomOpAsmParser *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::getNameLoc(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void `anonymous namespace'::CustomOpAsmParser::emitError(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t EncodedSourceLocation;
  _QWORD v12[4];
  __int16 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v13 = 1283;
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v12[0] = "custom op '";
  v12[2] = v5;
  v12[3] = v6;
  *(_QWORD *)&v14 = v12;
  *(_QWORD *)&v15 = "' ";
  LOWORD(v16) = 770;
  v7 = *((unsigned __int8 *)a3 + 32);
  if (v7 == 1)
  {
    v17 = v14;
    v18 = v15;
    v19 = v16;
  }
  else if (*((_BYTE *)a3 + 32))
  {
    v8 = (uint64_t *)*a3;
    v9 = a3[1];
    if (*((_BYTE *)a3 + 33) != 1)
    {
      LOBYTE(v7) = 2;
      v8 = a3;
    }
    *(_QWORD *)&v17 = &v14;
    *(_QWORD *)&v18 = v8;
    *((_QWORD *)&v18 + 1) = v9;
    LOBYTE(v19) = 2;
    BYTE1(v19) = v7;
  }
  else
  {
    LOWORD(v19) = 256;
  }
  *(_BYTE *)(a1 + 24) = 1;
  v10 = *(_QWORD *)(a1 + 16);
  EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v10 + 8) + 8, a2);
  mlir::emitError(EncodedSourceLocation, (uint64_t)&v17, (uint64_t)a4);
  if (*(_DWORD *)(*(_QWORD *)(v10 + 8) + 56) == 1)
    mlir::InFlightDiagnostic::abandon(a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::getBuilder(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::getCurrentLocation(uint64_t a1)
{
  return MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 56));
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::getEncodedSourceLoc(uint64_t a1, const char *a2)
{
  return mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 8, a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseArrow(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '->'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 13, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalArrow(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 13)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 13;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseLBrace(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '{'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 20, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalLBrace(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 20)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 20;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseRBrace(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '}'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 27, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalRBrace(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 27)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 27;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseColon(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected ':'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 15, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalColon(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 15)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 15;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseComma(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected ','";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 16, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalComma(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 16)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseEqual(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '='";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 18, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalEqual(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 18)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 18;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseLess(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '<'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 23, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalLess(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 23)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 23;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseGreater(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '>'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 19, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalGreater(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 19)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 19;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseQuestion(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '?'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 26, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalQuestion(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 26)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 26;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parsePlus(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '+'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 25, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalPlus(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 25)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 25;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseStar(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '*'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 30, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalStar(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 30)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 30;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseVerticalBar(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '|'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 31, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalVerticalBar(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 31)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 31;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalString(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  std::string v7;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 8);
  if (*(_DWORD *)(v4 + 56) != 11)
    return 0;
  if (a2)
  {
    mlir::Token::getStringValue((mlir::Token *)(v4 + 56), &v7);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v7;
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(_QWORD *)(v3 + 8);
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v7);
  *(std::string *)(*(_QWORD *)(v3 + 8) + 56) = v7;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseBase64Bytes(_QWORD *a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t first_not_of;
  unint64_t v8;
  unint64_t v9;
  uint64_t last_not_of;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  int8x16_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  std::string v36;
  _QWORD *v37;
  __int128 v38;
  _QWORD v39[4];
  __int16 v40;
  __int128 v41;
  uint64_t v42;
  void *v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD *v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
  v5 = a1[2];
  v6 = *(_QWORD *)(v5 + 8);
  if (*(_DWORD *)(v6 + 56) == 11)
  {
    if (a2)
    {
      v38 = *(_OWORD *)(v6 + 64);
      first_not_of = llvm::StringRef::find_first_not_of(&v38, "\"  \t\n\v\f\r", 8, 0);
      if (first_not_of >= *((_QWORD *)&v38 + 1))
        v8 = *((_QWORD *)&v38 + 1);
      else
        v8 = first_not_of;
      v9 = *((_QWORD *)&v38 + 1) - v8;
      *(_QWORD *)&v41 = v38 + v8;
      *((_QWORD *)&v41 + 1) = *((_QWORD *)&v38 + 1) - v8;
      last_not_of = llvm::StringRef::find_last_not_of(&v41, "\" \t\n\v\f\r", 7, 0xFFFFFFFFFFFFFFFFLL);
      if ((unint64_t)(last_not_of + 1) < *((_QWORD *)&v41 + 1))
        v11 = last_not_of + 1;
      else
        v11 = *((_QWORD *)&v41 + 1);
      v12 = *((_QWORD *)&v41 + 1) - v9 + v11;
      if (*((_QWORD *)&v41 + 1) >= v12)
        v13 = v12;
      else
        v13 = *((_QWORD *)&v41 + 1);
      llvm::decodeBase64(v41, v13, a2, (uint64_t *)&v37);
      if (v37)
      {
        v35 = v37;
        v37 = 0;
        llvm::toString(&v35, &v36, v14, v15);
        v40 = 260;
        v39[0] = &v36;
        (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t, _QWORD *))(*a1 + 24))(&v41, a1, v4, v39);
        v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
        if ((_QWORD)v41)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
        if (v49)
        {
          v17 = __p;
          if (__p)
          {
            v18 = v48;
            v19 = __p;
            if (v48 != __p)
            {
              do
                v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
              while (v18 != v17);
              v19 = __p;
            }
            v48 = v17;
            operator delete(v19);
          }
          v20 = v45;
          if (v45)
          {
            v21 = v46;
            v22 = v45;
            if (v46 != v45)
            {
              do
              {
                v24 = *--v21;
                v23 = v24;
                *v21 = 0;
                if (v24)
                  MEMORY[0x20BD002D4](v23, 0x1000C8077774924);
              }
              while (v21 != v20);
              v22 = v45;
            }
            v46 = v20;
            operator delete(v22);
          }
          if (v43 != v44)
            free(v43);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        if (v35)
          (*(void (**)(_QWORD *))(*v35 + 8))(v35);
        if (v37)
          (*(void (**)(_QWORD *))(*v37 + 8))(v37);
        return v16;
      }
      v5 = a1[2];
      v6 = *(_QWORD *)(v5 + 8);
    }
    mlir::Lexer::lexToken((mlir::Lexer *)(v6 + 8), (uint64_t)&v41);
    v33 = *(_QWORD *)(v5 + 8);
    *(_OWORD *)(v33 + 56) = v41;
    *(_QWORD *)(v33 + 72) = v42;
    return 1;
  }
  v39[0] = "expected string";
  v40 = 259;
  (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t, _QWORD *))(*a1 + 24))(&v41, a1, v4, v39);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if ((_QWORD)v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v49)
  {
    v25 = __p;
    if (__p)
    {
      v26 = v48;
      v27 = __p;
      if (v48 != __p)
      {
        do
          v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        v27 = __p;
      }
      v48 = v25;
      operator delete(v27);
    }
    v28 = v45;
    if (v45)
    {
      v29 = v46;
      v30 = v45;
      if (v46 != v45)
      {
        do
        {
          v32 = *--v29;
          v31 = v32;
          *v29 = 0;
          if (v32)
            MEMORY[0x20BD002D4](v31, 0x1000C8077774924);
        }
        while (v29 != v28);
        v30 = v45;
      }
      v46 = v28;
      operator delete(v30);
    }
    if (v43 != v44)
      free(v43);
  }
  return v16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseLParen(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '('";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 21, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalLParen(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 21)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 21;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseRParen(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected ')'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 28, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalRParen(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 28)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 28;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseLSquare(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '['";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 22, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalLSquare(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 22)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 22;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseRSquare(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected ']'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 29, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalRSquare(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 29)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 29;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseEllipsis(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '...'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 17, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalEllipsis(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 17)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 17;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseFloat(_QWORD *a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  llvm::APFloatBase *OCGSize;
  llvm::APFloatBase *v9;
  uint64_t FloatingPointValue;
  char v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  llvm::APFloatBase *v19;
  llvm::APFloatBase *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  __int128 v39;
  uint64_t v40;
  __int16 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  void *v46;
  char v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  void *__p;
  _QWORD *v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v4 = a1[2];
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_DWORD *)(v5 + 56);
  if (v6 == 24)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v44);
    v7 = *(_QWORD *)(v4 + 8);
    *(_OWORD *)(v7 + 56) = v44;
    *(_QWORD *)(v7 + 72) = v45;
    v5 = *(_QWORD *)(a1[2] + 8);
  }
  v42 = *(_OWORD *)(v5 + 56);
  v43 = *(_QWORD *)(v5 + 72);
  OCGSize = (llvm::APFloatBase *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v42);
  if ((_DWORD)v42 == 10)
  {
    v17 = v6 == 24;
    LOBYTE(v44) = 0;
    v47 = 0;
    v18 = a1[2];
    v19 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(OCGSize);
    v20 = (llvm::APFloatBase *)mlir::detail::Parser::parseFloatFromIntegerLiteral(v18, (uint64_t)&v44, (MirInfoChannelAssignment *)&v42, v17, v19, 0x40u);
    if ((_BYTE)v20)
    {
      v21 = a1[2];
      mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v21 + 8) + 8), (uint64_t)&v39);
      v22 = *(_QWORD *)(v21 + 8);
      *(_OWORD *)(v22 + 56) = v39;
      *(_QWORD *)(v22 + 72) = v40;
      *a2 = llvm::APFloat::convertToDouble((llvm::APFloat *)&v44);
      v16 = 1;
      if (!v47)
        return v16;
    }
    else
    {
      v16 = 0;
      if (!v47)
        return v16;
    }
    v37 = (void *)*((_QWORD *)&v44 + 1);
    if (llvm::APFloatBase::PPCDoubleDouble(v20) == v37)
      std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100]((llvm::APFloatBase *)&v45);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v44 + 8));
  }
  else
  {
    v9 = OCGSize;
    if ((_DWORD)v42 == 9)
    {
      FloatingPointValue = mlir::Token::getFloatingPointValue((mlir::Token *)&v42);
      if (v11)
      {
        v12 = *(double *)&FloatingPointValue;
        v13 = a1[2];
        mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v13 + 8) + 8), (uint64_t)&v44);
        v14 = *(_QWORD *)(v13 + 8);
        *(_OWORD *)(v14 + 56) = v44;
        *(_QWORD *)(v14 + 72) = v45;
        v15 = -v12;
        if (v6 != 24)
          v15 = v12;
        *a2 = v15;
        return 1;
      }
      *(_QWORD *)&v39 = "floating point value too large";
      v41 = 259;
      (*(void (**)(__int128 *__return_ptr, _QWORD *, llvm::APFloatBase *, __int128 *))(*a1 + 24))(&v44, a1, v9, &v39);
      v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
      if ((_QWORD)v44)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
      if (v53)
      {
        v31 = __p;
        if (__p)
        {
          v32 = v52;
          v33 = __p;
          if (v52 != __p)
          {
            do
              v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
            while (v32 != v31);
            v33 = __p;
          }
          v52 = v31;
          operator delete(v33);
        }
        v26 = v49;
        if (!v49)
          goto LABEL_45;
        v34 = v50;
        v28 = v49;
        if (v50 == v49)
        {
LABEL_44:
          v50 = v26;
          operator delete(v28);
LABEL_45:
          if (v46 != &v48)
            free(v46);
          return v16;
        }
        do
        {
          v36 = *--v34;
          v35 = v36;
          *v34 = 0;
          if (v36)
            MEMORY[0x20BD002D4](v35, 0x1000C8077774924);
        }
        while (v34 != v26);
LABEL_43:
        v28 = v49;
        goto LABEL_44;
      }
    }
    else
    {
      *(_QWORD *)&v39 = "expected floating point literal";
      v41 = 259;
      (*(void (**)(__int128 *__return_ptr, _QWORD *, llvm::APFloatBase *, __int128 *))(*a1 + 24))(&v44, a1, OCGSize, &v39);
      v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
      if ((_QWORD)v44)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
      if (v53)
      {
        v23 = __p;
        if (__p)
        {
          v24 = v52;
          v25 = __p;
          if (v52 != __p)
          {
            do
              v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
            while (v24 != v23);
            v25 = __p;
          }
          v52 = v23;
          operator delete(v25);
        }
        v26 = v49;
        if (!v49)
          goto LABEL_45;
        v27 = v50;
        v28 = v49;
        if (v50 == v49)
          goto LABEL_44;
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        goto LABEL_43;
      }
    }
  }
  return v16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalInteger(uint64_t a1, llvm::APInt *a2)
{
  return mlir::detail::Parser::parseOptionalInteger(*(mlir::detail::Parser **)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseCommaSeparatedList(uint64_t a1, int a2, unsigned __int8 (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return mlir::detail::Parser::parseCommaSeparatedList(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseKeyword(_QWORD *a1, const void **a2, const char *a3, const void ***a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  const void ***v12;
  char *v13;
  char *v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  const char *v26;
  __int16 v27;
  _QWORD v28[2];
  const void **v29;
  const char *v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  _BYTE v34[16];
  void *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE v38[96];
  void *v39;
  _QWORD *v40;
  void *__p;
  _QWORD *v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v28[0] = a2;
  v28[1] = a3;
  v4 = *(_QWORD *)(a1[2] + 8);
  if (*(_DWORD *)(v4 + 56) == 2)
  {
    (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(v4 + 136) + 48))(*(_QWORD *)(v4 + 136), v28, 1, 0);
    return 0;
  }
  else
  {
    v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
    if ((*(unsigned __int8 (**)(_QWORD *, const void **, const char *))(*a1 + 376))(a1, a2, a3))
    {
      return 1;
    }
    else
    {
      v26 = "expected '";
      v27 = 259;
      (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, const char **))(*a1 + 24))(&v33, a1, v10, &v26);
      if (v33)
      {
        v32 = 261;
        v29 = a2;
        v30 = a3;
        mlir::Diagnostic::operator<<((uint64_t)v34, &v29);
        if (v33)
        {
          LODWORD(v29) = 3;
          v30 = "'";
          v31 = 1;
          v12 = &v29;
          v13 = (char *)v35;
          if (v36 >= v37)
          {
            v24 = v36 + 1;
            if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
            {
              v25 = (char *)&v29 - (_BYTE *)v35;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v24, 24);
              v13 = (char *)v35;
              v12 = (const void ***)((char *)v35 + v25);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v24, 24);
              v12 = &v29;
              v13 = (char *)v35;
            }
          }
          v14 = &v13[24 * v36];
          v15 = *(_OWORD *)v12;
          *((_QWORD *)v14 + 2) = v12[2];
          *(_OWORD *)v14 = v15;
          ++v36;
          if (v33)
            mlir::Diagnostic::operator<<((uint64_t)v34, a4);
        }
      }
      v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      if (v43)
      {
        v16 = __p;
        if (__p)
        {
          v17 = v42;
          v18 = __p;
          if (v42 != __p)
          {
            do
              v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
            while (v17 != v16);
            v18 = __p;
          }
          v42 = v16;
          operator delete(v18);
        }
        v19 = v39;
        if (v39)
        {
          v20 = v40;
          v21 = v39;
          if (v40 != v39)
          {
            do
            {
              v23 = *--v20;
              v22 = v23;
              *v20 = 0;
              if (v23)
                MEMORY[0x20BD002D4](v22, 0x1000C8077774924);
            }
            while (v20 != v19);
            v21 = v39;
          }
          v40 = v19;
          operator delete(v21);
        }
        if (v35 != v38)
          free(v35);
      }
    }
  }
  return v5;
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalKeyword(uint64_t a1, void *__s2, size_t __n)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BOOL8 result;
  uint64_t v11;
  _QWORD v12[2];
  __int128 v13;
  uint64_t v14;

  v12[0] = __s2;
  v12[1] = __n;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(_DWORD *)(v7 + 56);
  if (v8 == 12 || v8 == 3)
  {
LABEL_9:
    if (*(_QWORD *)(v7 + 72) != __n || __n && memcmp(*(const void **)(v7 + 64), __s2, __n))
      return 0;
    mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v13);
    v11 = *(_QWORD *)(v6 + 8);
    *(_OWORD *)(v11 + 56) = v13;
    *(_QWORD *)(v11 + 72) = v14;
    return 1;
  }
  if (v8 == 2)
  {
    (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(v7 + 136) + 48))(*(_QWORD *)(v7 + 136), v12, 1, 1);
    return 0;
  }
  result = mlir::Token::isKeyword((mlir::Token *)(v7 + 56));
  if (result)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(v6 + 8);
    goto LABEL_9;
  }
  return result;
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalKeyword(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  int v5;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v5 = *(_DWORD *)(v4 + 56);
  if (v5 != 3 && v5 != 12)
  {
    result = mlir::Token::isKeyword((mlir::Token *)(v4 + 56));
    if (!result)
      return result;
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  }
  *a2 = *(_OWORD *)(v4 + 64);
  v8 = *(_QWORD *)(a1 + 16);
  mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v8 + 8) + 8), (uint64_t)&v10);
  v9 = *(_QWORD *)(v8 + 8);
  *(_OWORD *)(v9 + 56) = v10;
  *(_QWORD *)(v9 + 72) = v11;
  return 1;
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalKeyword(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  _BOOL8 result;
  const void *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v9 = *(_DWORD *)(v8 + 56);
  if (v9 == 12 || v9 == 3)
    goto LABEL_9;
  if (v9 == 2)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v8 + 136) + 48))(*(_QWORD *)(v8 + 136), a3, a4, 1);
    return 0;
  }
  result = mlir::Token::isKeyword((mlir::Token *)(v8 + 56));
  if (result)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
LABEL_9:
    v12 = *(const void **)(v8 + 64);
    v13 = *(_QWORD *)(v8 + 72);
    if (a4)
    {
      if (v13)
      {
        v14 = 16 * a4;
        v15 = a3;
        while (*(_QWORD *)(v15 + 8) != v13 || memcmp(*(const void **)v15, v12, v13))
        {
          v15 += 16;
          v14 -= 16;
          if (!v14)
            goto LABEL_20;
        }
      }
      else
      {
        v16 = 16 * a4;
        v15 = a3;
        while (*(_QWORD *)(v15 + 8))
        {
          v15 += 16;
          v16 -= 16;
          if (!v16)
          {
LABEL_20:
            v15 = a3 + 16 * a4;
            break;
          }
        }
      }
    }
    else
    {
      v15 = a3;
    }
    if (a4 == (v15 - a3) >> 4)
    {
      return 0;
    }
    else
    {
      *a2 = v12;
      a2[1] = v13;
      v17 = *(_QWORD *)(a1 + 16);
      mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v17 + 8) + 8), (uint64_t)&v19);
      v18 = *(_QWORD *)(v17 + 8);
      *(_OWORD *)(v18 + 56) = v19;
      *(_QWORD *)(v18 + 72) = v20;
      return 1;
    }
  }
  return result;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalKeywordOrString(uint64_t a1, uint64_t a2)
{
  void *v4;
  size_t v5;
  __int128 *p_dst;
  size_t v8;
  size_t v9;
  __int128 __dst;
  unint64_t v11;
  void *__src;
  size_t __len;

  __src = 0;
  __len = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(_QWORD *)a1 + 384))(a1, &__src))
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 248))(a1, a2);
  v4 = __src;
  if (!__src)
  {
    __dst = 0uLL;
    v11 = 0;
    if (*(char *)(a2 + 23) < 0)
      goto LABEL_15;
    goto LABEL_16;
  }
  v5 = __len;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v8 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v8 = __len | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v11 = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v11) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_13:
    memmove(p_dst, v4, v5);
  *((_BYTE *)p_dst + v5) = 0;
  if (*(char *)(a2 + 23) < 0)
LABEL_15:
    operator delete(*(void **)a2);
LABEL_16:
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v11;
  return 1;
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseAttribute(uint64_t a1, llvm::APFloatBase **a2, _QWORD *a3)
{
  llvm::APFloatBase *v4;

  v4 = mlir::detail::Parser::parseAttribute(*(mlir::StringAttr *****)(a1 + 16), a3);
  *a2 = v4;
  return v4 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseCustomAttributeWithFallback(uint64_t a1, llvm::APFloatBase **a2, _QWORD *a3, uint64_t (*a4)(uint64_t, llvm::APFloatBase **), uint64_t a5)
{
  uint64_t v6;
  llvm::APFloatBase *v7;

  v6 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(*(_QWORD *)(v6 + 8) + 56) != 5)
    return a4(a5, a2);
  v7 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)v6, a3);
  *a2 = v7;
  return v7 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalAttribute(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return mlir::detail::Parser::parseOptionalAttribute(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalAttribute(uint64_t a1, llvm::APFloatBase **a2, _QWORD *a3)
{
  return mlir::detail::Parser::parseOptionalAttribute(*(_QWORD *)(a1 + 16), a2, a3);
}

{
  return mlir::detail::Parser::parseOptionalAttribute(*(_QWORD *)(a1 + 16), a2, a3);
}

{
  return mlir::detail::Parser::parseOptionalAttribute(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalAttrDict(uint64_t a1, mlir::NamedAttrList *a2)
{
  mlir::detail::Parser *v2;

  v2 = *(mlir::detail::Parser **)(a1 + 16);
  if (*(_DWORD *)(*((_QWORD *)v2 + 1) + 56) == 20)
    return mlir::detail::Parser::parseAttributeDict(v2, a2);
  else
    return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalAttrDictWithKeyword(mlir::detail::Parser **a1, mlir::NamedAttrList *a2)
{
  if ((*((unsigned __int8 (**)(mlir::detail::Parser **, const char *, uint64_t))*a1 + 47))(a1, "attributes", 10))
  {
    return mlir::detail::Parser::parseAttributeDict(a1[2], a2);
  }
  else
  {
    return 1;
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseAffineMap(uint64_t a1, mlir::AffineMap *a2)
{
  return mlir::detail::Parser::parseAffineMapReference(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseAffineExpr(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  return mlir::detail::Parser::parseAffineExprReference(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseIntegerSet(uint64_t a1, mlir::IntegerSet *a2)
{
  return mlir::detail::Parser::parseIntegerSetReference(*(mlir::detail::Parser **)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalSymbolName(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  mlir::StringAttr **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string __p;
  __int128 v13;
  uint64_t v14;
  __int16 v15;
  __int128 v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1[2] + 8);
  v16 = *(_OWORD *)(v2 + 56);
  v17 = *(_QWORD *)(v2 + 72);
  if ((_DWORD)v16 != 4)
    return 0;
  v5 = (mlir::StringAttr **)(*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  mlir::Token::getSymbolReference((mlir::Token *)&v16, &__p);
  v15 = 260;
  *(_QWORD *)&v13 = &__p;
  *a2 = mlir::Builder::getStringAttr(v5, (mlir::MLIRContext *)&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = a1[2];
  mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v6 + 8) + 8), (uint64_t)&v13);
  v7 = *(_QWORD *)(v6 + 8);
  *(_OWORD *)(v7 + 56) = v13;
  *(_QWORD *)(v7 + 72) = v14;
  v8 = *(_QWORD *)(*(_QWORD *)(a1[2] + 8) + 128);
  if (v8)
  {
    v9 = mlir::SymbolRefAttr::get(*a2);
    *(_QWORD *)&v13 = mlir::Token::getLocRange((mlir::Token *)&v16);
    *((_QWORD *)&v13 + 1) = v10;
    mlir::AsmParserState::addUses(v8, v9, (char *)&v13, 1);
  }
  return 1;
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseType(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = mlir::detail::Parser::parseType(*(mlir::detail::Parser **)(a1 + 16));
  *a2 = v3;
  return v3 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseCustomTypeWithFallback(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  mlir::detail::Parser *v5;
  uint64_t v6;

  v5 = *(mlir::detail::Parser **)(a1 + 16);
  if (*(_DWORD *)(*((_QWORD *)v5 + 1) + 56) != 8)
    return a3(a4, a2);
  v6 = mlir::detail::Parser::parseType(v5);
  *a2 = v6;
  return v6 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalType(uint64_t a1, mlir::Type *a2)
{
  return mlir::detail::Parser::parseOptionalType(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseArrowTypeList(mlir::detail::Parser **a1, uint64_t a2)
{
  return (*((unsigned __int8 (**)(mlir::detail::Parser **))*a1 + 7))(a1)
      && mlir::detail::Parser::parseFunctionResultTypes(a1[2], a2) != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalArrowTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 8);
  if (*(_DWORD *)(v3 + 56) != 13)
    return 1;
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
  v6 = *(_QWORD *)(v2 + 8);
  *(_OWORD *)(v6 + 56) = v8;
  *(_QWORD *)(v6 + 72) = v9;
  return mlir::detail::Parser::parseFunctionResultTypes(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseColonType(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v7;
  __int16 v8;

  v4 = *(_QWORD *)(a1 + 16);
  v7 = "expected ':'";
  v8 = 259;
  if (!mlir::detail::Parser::parseToken(v4, 15, (uint64_t)&v7))
    return 0;
  v5 = mlir::detail::Parser::parseType(*(mlir::detail::Parser **)(a1 + 16));
  *a2 = v5;
  return v5 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseColonTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const char *v6;
  __int16 v7;

  v4 = *(_QWORD *)(a1 + 16);
  v6 = "expected ':'";
  v7 = 259;
  if (mlir::detail::Parser::parseToken(v4, 15, (uint64_t)&v6))
    return mlir::detail::Parser::parseTypeListNoParens(*(_QWORD *)(a1 + 16), a2);
  else
    return 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalColonTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 8);
  if (*(_DWORD *)(v3 + 56) != 15)
    return 1;
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
  v6 = *(_QWORD *)(v2 + 8);
  *(_OWORD *)(v6 + 56) = v8;
  *(_QWORD *)(v6 + 72) = v9;
  return mlir::detail::Parser::parseTypeListNoParens(*(_QWORD *)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseDimensionList(uint64_t a1, uint64_t a2, char a3, int a4)
{
  return mlir::detail::Parser::parseDimensionListRanked(*(mlir::detail::Parser **)(a1 + 16), a2, a3, a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseXInDimensionList(uint64_t a1)
{
  return mlir::detail::Parser::parseXInDimensionList(*(mlir::detail::Parser **)(a1 + 16));
}

void mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseResourceHandle(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  const void ***v8;
  char *v9;
  char *v10;
  __int128 v11;
  const void **v12;
  const char *v13;
  const void ***v14;
  char *v15;
  char *v16;
  __int128 v17;
  int8x16_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  char v31[32];
  __int16 v32;
  const void **v33;
  const char *v34;
  uint64_t v35;
  __int16 v36;
  int8x16_t *v37;
  uint64_t v38;
  void *v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE v42[96];
  void *v43;
  _QWORD *v44;
  void *__p;
  _QWORD *v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(a2)
    && (v6 = (_QWORD *)mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(a2)) != 0)
  {
    v37 = 0;
    v38 = 0;
    mlir::detail::Parser::parseResourceHandle(*(_QWORD *)(a1 + 16), v6, &v37, (uint64_t)a3);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
    v32 = 257;
    mlir::detail::Parser::emitError(v7, (uint64_t)v31, &v37);
    if (!v37)
      goto LABEL_11;
    LODWORD(v33) = 3;
    v34 = "dialect '";
    v35 = 9;
    v8 = &v33;
    v9 = (char *)v39;
    if (v40 >= v41)
    {
      v27 = v40 + 1;
      if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
      {
        v29 = (char *)&v33 - (_BYTE *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
        v9 = (char *)v39;
        v8 = (const void ***)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
        v8 = &v33;
        v9 = (char *)v39;
      }
    }
    v10 = &v9[24 * v40];
    v11 = *(_OWORD *)v8;
    *((_QWORD *)v10 + 2) = v8[2];
    *(_OWORD *)v10 = v11;
    ++v40;
    if (!v37)
      goto LABEL_11;
    v12 = *(const void ***)(a2 + 8);
    v13 = *(const char **)(a2 + 16);
    v36 = 261;
    v33 = v12;
    v34 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    if (v37)
    {
      LODWORD(v33) = 3;
      v34 = "' does not expect resource handles";
      v35 = 34;
      v14 = &v33;
      v15 = (char *)v39;
      if (v40 >= v41)
      {
        v28 = v40 + 1;
        if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
        {
          v30 = (char *)&v33 - (_BYTE *)v39;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
          v15 = (char *)v39;
          v14 = (const void ***)((char *)v39 + v30);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
          v14 = &v33;
          v15 = (char *)v39;
        }
      }
      v16 = &v15[24 * v40];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = v14[2];
      *(_OWORD *)v16 = v17;
      ++v40;
      v18 = v37;
      *a3 = 0;
      a3[24] = 0;
      if (v18)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
    }
    else
    {
LABEL_11:
      *a3 = 0;
      a3[24] = 0;
    }
    if (v47)
    {
      v19 = __p;
      if (__p)
      {
        v20 = v46;
        v21 = __p;
        if (v46 != __p)
        {
          do
            v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          v21 = __p;
        }
        v46 = v19;
        operator delete(v21);
      }
      v22 = v43;
      if (v43)
      {
        v23 = v44;
        v24 = v43;
        if (v44 != v43)
        {
          do
          {
            v26 = *--v23;
            v25 = v26;
            *v23 = 0;
            if (v26)
              MEMORY[0x20BD002D4](v25, 0x1000C8077774924);
          }
          while (v23 != v22);
          v24 = v43;
        }
        v44 = v22;
        operator delete(v24);
      }
      if (v39 != v42)
        free(v39);
    }
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::pushCyclicParsing(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[16];
  unsigned __int8 v9;

  v7 = a2;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>((int64x2_t *)(v2 + 88), &v7, (uint64_t)v8);
  v3 = v9;
  if (v9)
  {
    v4 = v7;
    v5 = *(unsigned int *)(v2 + 120);
    if (v5 >= *(_DWORD *)(v2 + 124))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 112, (void *)(v2 + 128), v5 + 1, 8);
      LODWORD(v5) = *(_DWORD *)(v2 + 120);
    }
    *(_QWORD *)(*(_QWORD *)(v2 + 112) + 8 * v5) = v4;
    ++*(_DWORD *)(v2 + 120);
  }
  return v3;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::popCyclicParsing(uint64_t result)
{
  int32x2_t *v1;
  __int32 v2;
  int32x2_t v3;
  uint64_t v4;
  uint64_t v5;
  __int32 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;

  v1 = *(int32x2_t **)(*(_QWORD *)(result + 16) + 8);
  v2 = v1[13].i32[0];
  if (v2)
  {
    v3 = v1[11];
    v4 = v1[15].u32[0];
    v5 = *(_QWORD *)(*(_QWORD *)&v1[14] + 8 * v4 - 8);
    v6 = v2 - 1;
    LODWORD(v7) = ((v5 >> 4) ^ (v5 >> 9)) & (v2 - 1);
    v8 = (uint64_t *)(*(_QWORD *)&v3 + 8 * v7);
    v9 = *v8;
    if (v5 == *v8)
    {
LABEL_3:
      *v8 = -8192;
      v1[12] = vadd_s32(v1[12], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v10 = 1;
      while (v9 != -4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & v6;
        v9 = *(_QWORD *)(*(_QWORD *)&v3 + 8 * v7);
        if (v5 == v9)
        {
          v8 = (uint64_t *)(*(_QWORD *)&v3 + 8 * v7);
          goto LABEL_3;
        }
      }
    }
    v1[15].i32[0] = v4 - 1;
  }
  else
  {
    --v1[15].i32[0];
  }
  return result;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseKeywordOrCompletion(mlir::AsmParser *a1, llvm::StringRef *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
  if (*(_DWORD *)(v2 + 56) != 2 || *(_QWORD *)(v2 + 72))
    return mlir::AsmParser::parseKeyword(a1, a2);
  *(_QWORD *)a2 = &byte_207AF6795;
  *((_QWORD *)a2 + 1) = 0;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::codeCompleteExpectedTokens(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
  if (*(_DWORD *)(v3 + 56) == 2 && !*(_QWORD *)(v3 + 72))
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v3 + 136) + 48))(*(_QWORD *)(v3 + 136), a2, a3, 0);
  return result;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseOptionalLocationSpecifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(_QWORD *)(v2 + 8);
  if (*(_DWORD *)(v3 + 56) != 59)
    return 1;
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v12);
  v6 = *(_QWORD *)(v2 + 8);
  *(_OWORD *)(v6 + 56) = v12;
  *(_QWORD *)(v6 + 72) = v13;
  v15 = 0;
  v7 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)&v12 = "expected '(' in location";
  v14 = 259;
  if (mlir::detail::Parser::parseToken(v7, 21, (uint64_t)&v12))
  {
    v8 = *(_QWORD *)(a1 + 88);
    if (*(_DWORD *)(*(_QWORD *)(v8 + 8) + 56) == 5)
    {
        return 0;
    }
    else if (!mlir::detail::Parser::parseLocationInstance((mlir::UnknownLoc ****)v8, &v15))
    {
      return 0;
    }
    v9 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)&v12 = "expected ')' in location";
    v14 = 259;
    if (mlir::detail::Parser::parseToken(v9, 28, (uint64_t)&v12))
    {
      v10 = v15;
      if (!*(_BYTE *)(a2 + 8))
        *(_BYTE *)(a2 + 8) = 1;
      *(_QWORD *)a2 = v10;
      return 1;
    }
  }
  return 0;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::getResultName@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v3 = *(_QWORD *)(this + 40);
  if (v3)
  {
    v4 = (_DWORD *)(*(_QWORD *)(this + 32) + 16);
    v5 = 32 * v3;
    while (1)
    {
      v6 = a2 - *v4;
      if (a2 < *v4)
        break;
      v4 += 8;
      a2 = v6;
      v5 -= 32;
      if (!v5)
        goto LABEL_5;
    }
    v9 = v4 - 4;
    v7 = *((_QWORD *)v4 - 2);
    v8 = *((_QWORD *)v9 + 1);
    if (v8)
      ++v7;
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = v8 - (v8 != 0);
    *(_DWORD *)(a3 + 16) = a2;
  }
  else
  {
LABEL_5:
    *(_QWORD *)a3 = &byte_207AF6795;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = -1;
  }
  return this;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::getNumResults(_anonymous_namespace_::CustomOpAsmParser *this)
{
  uint64_t v1;
  int32x2_t *v2;
  unint64_t v3;
  uint64_t result;
  int32x2_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int32x2_t *v9;
  int64x2_t v10;
  int64x2_t v11;
  uint32x2_t v12;
  int32x2_t v13;
  int32x2_t v14;
  int32x2_t *v15;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v2 = (int32x2_t *)*((_QWORD *)this + 4);
  v3 = (v1 - 1) & 0x7FFFFFFFFFFFFFFLL;
  if (v3 >= 4)
  {
    v6 = v3 + 1;
    v7 = v6 & 3;
    if ((v6 & 3) == 0)
      v7 = 4;
    v8 = v6 - v7;
    v5 = &v2[4 * v8];
    v9 = v2 + 10;
    v10 = 0uLL;
    v11 = 0uLL;
    do
    {
      v12 = (uint32x2_t)vzip1_s32(v9[-8], v9[-4]);
      v13 = v9[4];
      v14 = *v9;
      v9 += 16;
      v10 = (int64x2_t)vaddw_u32((uint64x2_t)v10, v12);
      v11 = (int64x2_t)vaddw_u32((uint64x2_t)v11, (uint32x2_t)vzip1_s32(v14, v13));
      v8 -= 4;
    }
    while (v8);
    result = vaddvq_s64(vaddq_s64(v11, v10));
  }
  else
  {
    result = 0;
    v5 = v2;
  }
  v15 = &v2[4 * v1];
  do
  {
    result += v5[2].u32[0];
    v5 += 4;
  }
  while (v5 != v15);
  return result;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseGenericOperation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t LocRange;
  uint64_t v9;
  uint64_t v10;
  uint64_t OCGSize;
  _OWORD *v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_OWORD *)(v4 + 56);
  v16 = *(_QWORD *)(v4 + 72);
  v14 = *(_OWORD *)(v3 + 400);
  v15 = v5;
  *(_QWORD *)(v3 + 400) = a2;
  *(_QWORD *)(v3 + 408) = a3;
  if (v6)
  {
    v7 = *(uint64_t **)(*(_QWORD *)(v3 + 8) + 128);
    if (v7)
    {
      LocRange = mlir::Token::getLocRange((mlir::Token *)&v15);
      v10 = v9;
      OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(_QWORD *)(v3 + 8) + 56));
      mlir::AsmParserState::finalizeOperationDefinition(v7, v6, LocRange, v10, OCGSize, 0, 0);
    }
  }
  v12 = (_OWORD *)(v3 + 400);
  if ((_QWORD)v14)
  {
    *v12 = v14;
  }
  else
  {
    *(_QWORD *)v12 = 0;
    *(_QWORD *)(v3 + 408) = 0;
  }
  return v6;
}

unint64_t `anonymous namespace'::CustomOpAsmParser::parseCustomOperationName(_anonymous_namespace_::OperationParser **this)
{
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseGenericOperationAfterOpName(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v10 = *(_QWORD *)(a1 + 88);
  v18 = *a3;
  v19 = *((_QWORD *)a3 + 2);
  v16 = *a4;
  v17 = *((_QWORD *)a4 + 2);
  v14 = *a5;
  v15 = *((_QWORD *)a5 + 2);
  v13 = *((_QWORD *)a6 + 2);
  v12 = *a6;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseOperand(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  __int128 v8;
  int v9;

  v7 = 0;
  v8 = 0uLL;
    return 0;
  v4 = v7;
  *(_OWORD *)(a2 + 8) = v8;
  v5 = v9;
  *(_QWORD *)a2 = v4;
  *(_DWORD *)(a2 + 24) = v5;
  return 1;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseOptionalOperand(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  v6 = *(_QWORD *)(a1[11] + 8);
  v8 = *(_DWORD *)(v6 + 56);
  v7 = v6 + 56;
  if (v8 == 6 || mlir::Token::isCodeCompletionFor(v7, 6))
    return (*(unsigned __int8 (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 672))(a1, a2, a3) | 0x100u;
  else
    return 0;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseOperandList(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  uint64_t v9;
  uint64_t OCGSize;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  int64_t v47;
  int64_t v48;
  _QWORD v49[3];
  _QWORD v50[4];
  __int16 v51;
  char v52;
  __int128 v53;
  uint64_t v54;
  _QWORD v55[3];
  void *v56;
  unsigned int v57;
  unsigned int v58;
  _BYTE v59[96];
  void *v60;
  _QWORD *v61;
  void *__p;
  _QWORD *v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v52 = a4;
  if ((_DWORD)a3
    || (v9 = *(_QWORD *)(a1[11] + 8), v53 = *(_OWORD *)(v9 + 56), v54 = *(_QWORD *)(v9 + 72), (_DWORD)v53 == 6)
    || mlir::Token::isCodeCompletionFor((uint64_t)&v53, 6))
  {
    v49[0] = a1;
    v49[1] = a2;
    v49[2] = &v52;
    OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(_QWORD *)(a1[11] + 8) + 56));
    if (a5 != -1 && *(_DWORD *)(a2 + 8) != (uint64_t)a5)
    {
      v50[0] = "expected ";
      v51 = 259;
      (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t, _QWORD *))(*a1 + 24))(v55, a1, OCGSize, v50);
      if (v55[0])
      {
        LODWORD(v53) = 2;
        *((_QWORD *)&v53 + 1) = a5;
        v11 = (char *)&v53;
        v12 = (char *)v56;
        if (v57 >= v58)
        {
          v44 = v57 + 1;
          if (v56 <= &v53 && (char *)v56 + 24 * v57 > (char *)&v53)
          {
            v47 = (char *)&v53 - (_BYTE *)v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v44, 24);
            v12 = (char *)v56;
            v11 = (char *)v56 + v47;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v44, 24);
            v11 = (char *)&v53;
            v12 = (char *)v56;
          }
        }
        v13 = &v12[24 * v57];
        v14 = *(_OWORD *)v11;
        *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
        *(_OWORD *)v13 = v14;
        v15 = ++v57;
        if (v55[0])
        {
          LODWORD(v53) = 3;
          *((_QWORD *)&v53 + 1) = " operands";
          v54 = 9;
          v16 = (char *)&v53;
          v17 = (char *)v56;
          if (v15 >= v58)
          {
            v45 = v15 + 1;
            v46 = (char *)v56 + 24 * v15 > (char *)&v53;
            if (v56 <= &v53 && v46)
            {
              v48 = (char *)&v53 - (_BYTE *)v56;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
              v17 = (char *)v56;
              v16 = (char *)v56 + v48;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
              v16 = (char *)&v53;
              v17 = (char *)v56;
            }
          }
          v18 = &v17[24 * v57];
          v19 = *(_OWORD *)v16;
          *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
          *(_OWORD *)v18 = v19;
          ++v57;
        }
      }
      v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
      if (v55[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
      if (v64)
      {
        v21 = __p;
        if (__p)
        {
          v22 = v63;
          v23 = __p;
          if (v63 != __p)
          {
            do
              v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
            while (v22 != v21);
            v23 = __p;
          }
          v63 = v21;
          operator delete(v23);
        }
        v24 = v60;
        if (!v60)
          goto LABEL_61;
        v25 = v61;
        v26 = v60;
        if (v61 == v60)
        {
LABEL_60:
          v61 = v24;
          operator delete(v26);
LABEL_61:
          if (v56 != v59)
            free(v56);
          return v20;
        }
        do
        {
          v28 = *--v25;
          v27 = v28;
          *v25 = 0;
          if (v28)
            MEMORY[0x20BD002D4](v27, 0x1000C8077774924);
        }
        while (v25 != v24);
LABEL_59:
        v26 = v60;
        goto LABEL_60;
      }
      return v20;
    }
    return 1;
  }
  if ((a5 + 1) <= 1)
    return 1;
  if ((v53 - 21) > 1)
  {
    v37 = a1[11];
    v50[0] = "expected operand";
    v51 = 259;
    mlir::detail::Parser::emitWrongTokenError(v37, (uint64_t)v50, v55);
    v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    if (v55[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    if (v64)
    {
      v38 = __p;
      if (__p)
      {
        v39 = v63;
        v40 = __p;
        if (v63 != __p)
        {
          do
            v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
          while (v39 != v38);
          v40 = __p;
        }
        v63 = v38;
        operator delete(v40);
      }
      v24 = v60;
      if (!v60)
        goto LABEL_61;
      v41 = v61;
      v26 = v60;
      if (v61 == v60)
        goto LABEL_60;
      do
      {
        v43 = *--v41;
        v42 = v43;
        *v41 = 0;
        if (v43)
          MEMORY[0x20BD002D4](v42, 0x1000C8077774924);
      }
      while (v41 != v24);
      goto LABEL_59;
    }
  }
  else
  {
    v30 = a1[11];
    v50[0] = "unexpected delimiter";
    v51 = 259;
    mlir::detail::Parser::emitError(v30, (uint64_t)v50, v55);
    v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    if (v55[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    if (v64)
    {
      v31 = __p;
      if (__p)
      {
        v32 = v63;
        v33 = __p;
        if (v63 != __p)
        {
          do
            v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
          while (v32 != v31);
          v33 = __p;
        }
        v63 = v31;
        operator delete(v33);
      }
      v24 = v60;
      if (!v60)
        goto LABEL_61;
      v34 = v61;
      v26 = v60;
      if (v61 == v60)
        goto LABEL_60;
      do
      {
        v36 = *--v34;
        v35 = v36;
        *v34 = 0;
        if (v36)
          MEMORY[0x20BD002D4](v35, 0x1000C8077774924);
      }
      while (v34 != v24);
      goto LABEL_59;
    }
  }
  return v20;
}

unint64_t `anonymous namespace'::CustomOpAsmParser::resolveOperand(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __int128 v6;
  unint64_t result;
  unint64_t v8;
  uint64_t v9;
  _OWORD v10[2];

  v5 = *(_QWORD *)(a1 + 88);
  v6 = a2[1];
  v10[0] = *a2;
  v10[1] = v6;
  if (result)
  {
    v8 = result;
    v9 = *(unsigned int *)(a4 + 8);
    if (v9 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v9) = v8;
    ++*(_DWORD *)(a4 + 8);
    return 1;
  }
  return result;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseAffineMapOfSSAIds(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v13;
  uint64_t NamedAttr;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v27;
  _QWORD v28[3];
  void *__src;
  uint64_t v30;
  _BYTE v31[32];
  void *v32;
  uint64_t v33;
  _QWORD v34[9];

  v34[8] = *MEMORY[0x24BDAC8D0];
  v32 = v34;
  v33 = 0x200000000;
  v28[2] = &v32;
  __src = v31;
  v30 = 0x100000000;
  v28[0] = a1;
  v28[1] = &__src;
  v27 = 0;
  {
    if (v27)
    {
      v13 = mlir::AffineMapAttr::get(v27);
      *a3 = v13;
      NamedAttr = mlir::Builder::getNamedAttr(*(mlir::StringAttr ***)(a1 + 88), a4, a5, v13);
      mlir::NamedAttrList::push_back(a6, NamedAttr, v15);
    }
    v16 = v32;
    v17 = v33;
    *(_DWORD *)(a2 + 8) = 0;
    if (v17 <= *(_DWORD *)(a2 + 12))
    {
      if (!(_DWORD)v17)
      {
        v21 = 0;
LABEL_11:
        v22 = (v21 + v17);
        *(_DWORD *)(a2 + 8) = v22;
        v23 = __src;
        v24 = v30;
        v25 = v30 + v22;
        if (v25 > *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v25, 32);
          LODWORD(v22) = *(_DWORD *)(a2 + 8);
        }
        if ((_DWORD)v24)
        {
          memcpy((void *)(*(_QWORD *)a2 + 32 * v22), v23, 32 * v24);
          LODWORD(v22) = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(a2 + 8) = v22 + v24;
        v19 = 1;
        v20 = __src;
        if (__src != v31)
          goto LABEL_16;
        goto LABEL_17;
      }
      v18 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v17, 32);
      v18 = *(unsigned int *)(a2 + 8);
    }
    memcpy((void *)(*(_QWORD *)a2 + 32 * v18), v16, 32 * v17);
    v21 = *(_DWORD *)(a2 + 8);
    goto LABEL_11;
  }
  v19 = 0;
  v20 = __src;
  if (__src != v31)
LABEL_16:
    free(v20);
LABEL_17:
  if (v32 != v34)
    free(v32);
  return v19;
}

BOOL `anonymous namespace'::CustomOpAsmParser::parseAffineExprOfSSAIds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD v5[3];

  v5[0] = a1;
  v5[1] = a3;
  v5[2] = a2;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseArgument(mlir::AsmParser *a1, uint64_t a2, int a3, int a4)
{
  mlir::MLIRContext *Context;
  uint64_t v9;
  void *v10;
  void *v12[2];
  _QWORD v13[10];

  v13[9] = *MEMORY[0x24BDAC8D0];
  v12[0] = v13;
  v12[1] = (void *)0x400000000;
  v13[8] = 4;
  if ((*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t, _QWORD))(*(_QWORD *)a1 + 672))(a1, a2, 0)
    && (!a3 || (*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t))(*(_QWORD *)a1 + 544))(a1, a2 + 32))
    && (!a4 || (*(unsigned __int8 (**)(mlir::AsmParser *, void **))(*(_QWORD *)a1 + 456))(a1, v12))
    && (*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t))(*(_QWORD *)a1 + 624))(a1, a2 + 48))
  {
    Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
    *(_QWORD *)(a2 + 40) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v12, Context);
    v9 = 1;
    v10 = v12[0];
    if (v12[0] == v13)
      return v9;
    goto LABEL_10;
  }
  v9 = 0;
  v10 = v12[0];
  if (v12[0] != v13)
LABEL_10:
    free(v10);
  return v9;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseOptionalArgument(_QWORD *a1)
{
  if (*(_DWORD *)(*(_QWORD *)(a1[11] + 8) + 56) == 6)
    return (*(unsigned __int8 (**)(_QWORD *))(*a1 + 720))(a1) | 0x100u;
  else
    return 0;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseArgumentList(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  _QWORD v6[4];
  char v7;
  char v8;

  v8 = a4;
  v7 = a5;
  if (!(_DWORD)a3 && *(_DWORD *)(*(_QWORD *)(a1[11] + 8) + 56) != 6)
    return 1;
  v6[0] = a1;
  v6[1] = a2;
  v6[2] = &v8;
  v6[3] = &v7;
}

BOOL `anonymous namespace'::CustomOpAsmParser::parseRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseOptionalRegion(_QWORD *a1)
{
  if (*(_DWORD *)(*(_QWORD *)(a1[11] + 8) + 56) == 20)
    return (*(unsigned __int8 (**)(_QWORD *))(*a1 + 744))(a1) | 0x100u;
  else
    return 0;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseOptionalRegion(_QWORD *a1, mlir::Region **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Region *v10;
  mlir::Region *v11;
  int v12;

  if (*(_DWORD *)(*(_QWORD *)(a1[11] + 8) + 56) != 20)
    return 0;
  v10 = (mlir::Region *)operator new();
  *(_QWORD *)v10 = v10;
  *((_QWORD *)v10 + 1) = v10;
  *((_QWORD *)v10 + 2) = 0;
  if ((*(unsigned __int8 (**)(_QWORD *, mlir::Region *, uint64_t, uint64_t, uint64_t))(*a1 + 744))(a1, v10, a3, a4, a5))
  {
    v11 = *a2;
    *a2 = v10;
    v12 = 1;
    v10 = v11;
    if (!v11)
      return 257;
  }
  else
  {
    v12 = 0;
  }
  mlir::Region::~Region(v10);
  MEMORY[0x20BD002F8]();
  return v12 | 0x100u;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseSuccessor(_anonymous_namespace_::OperationParser **this, mlir::Block **a2)
{
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseOptionalSuccessor(_anonymous_namespace_::CustomOpAsmParser *this, mlir::Block **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v6 = *(_DWORD *)(v4 + 56);
  v5 = v4 + 56;
  if (v6 == 7 || mlir::Token::isCodeCompletionFor(v5, 7))
    return (*(unsigned __int8 (**)(_anonymous_namespace_::CustomOpAsmParser *, mlir::Block **))(*(_QWORD *)this + 768))(this, a2) | 0x100u;
  else
    return 0;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseSuccessorAndUseList(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  void *v14;
  int *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  int *v21;
  char *v22;
  char *v23;
  __int128 v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  int64_t v36;
  int64_t v37;
  unint64_t v38;
  const char *v39;
  __int16 v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  void *v45[2];
  unsigned int v46;
  unsigned int v47;
  _BYTE v48[96];
  void *v49;
  _QWORD *v50;
  void *__p;
  _QWORD *v52;
  char v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[32];
  _QWORD *v57;
  uint64_t v58;
  _QWORD v59[17];

  v59[16] = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned __int8 (**)(_QWORD *))(*a1 + 768))(a1))
    return 0;
  if (!(*(unsigned __int8 (**)(_QWORD *))(*a1 + 272))(a1))
    return 1;
  v5 = a1[11];
  v57 = v59;
  v58 = 0x400000000;
  {
    v13 = 0;
    v14 = v57;
    if (v57 == v59)
      return v13 && (*(unsigned __int8 (**)(_QWORD *))(*a1 + 280))(a1);
    goto LABEL_23;
  }
  if (!(_DWORD)v58)
  {
    v13 = 1;
    v14 = v57;
    if (v57 == v59)
      return v13 && (*(unsigned __int8 (**)(_QWORD *))(*a1 + 280))(a1);
    goto LABEL_23;
  }
  v54 = v56;
  v55 = 0x400000000;
  *(_QWORD *)&v44 = "expected ':' in operand list";
  LOWORD(v46) = 259;
  if (!mlir::detail::Parser::parseToken(v5, 15, (uint64_t)&v44)
    || !mlir::detail::Parser::parseTypeListNoParens(v5, (uint64_t)&v54))
  {
    goto LABEL_19;
  }
  v6 = v58;
  if ((_DWORD)v58 == (_DWORD)v55)
  {
    if (*(_DWORD *)(a3 + 12) < v58)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v58, 8);
      v6 = v58;
    }
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = 32 * v6;
      while (1)
      {
        v10 = *(_OWORD *)&v57[v8 / 8 + 2];
        v44 = *(_OWORD *)&v57[v8 / 8];
        *(_OWORD *)v45 = v10;
        if (!v11)
          break;
        v12 = *(unsigned int *)(a3 + 8);
        if (v12 >= *(unsigned int *)(a3 + 12))
        {
          v38 = v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v12 + 1, 8);
          v11 = v38;
          v12 = *(unsigned int *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
        ++*(_DWORD *)(a3 + 8);
        v8 += 32;
        v7 += 8;
        if (v9 == v8)
          goto LABEL_49;
      }
LABEL_19:
      v13 = 0;
      goto LABEL_20;
    }
LABEL_49:
    v13 = 1;
  }
  else
  {
    v39 = "expected ";
    v40 = 259;
    mlir::detail::Parser::emitError(v5, (uint64_t)&v39, &v44);
    if ((_QWORD)v44)
    {
      v41 = 5;
      v42 = v58;
      v16 = &v41;
      v17 = (char *)v45[1];
      if (v46 >= v47)
      {
        v33 = v46 + 1;
        if (v45[1] <= &v41 && (char *)v45[1] + 24 * v46 > (char *)&v41)
        {
          v36 = (char *)&v41 - (char *)v45[1];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45[1], v48, v33, 24);
          v17 = (char *)v45[1];
          v16 = (int *)((char *)v45[1] + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45[1], v48, v33, 24);
          v16 = &v41;
          v17 = (char *)v45[1];
        }
      }
      v18 = &v17[24 * v46];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
      *(_OWORD *)v18 = v19;
      v20 = ++v46;
      if ((_QWORD)v44)
      {
        v41 = 3;
        v42 = (unint64_t)" types to match operand list";
        v43 = 28;
        v21 = &v41;
        v22 = (char *)v45[1];
        if (v20 >= v47)
        {
          v34 = v20 + 1;
          v35 = (char *)v45[1] + 24 * v20 > (char *)&v41;
          if (v45[1] <= &v41 && v35)
          {
            v37 = (char *)&v41 - (char *)v45[1];
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45[1], v48, v34, 24);
            v22 = (char *)v45[1];
            v21 = (int *)((char *)v45[1] + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45[1], v48, v34, 24);
            v21 = &v41;
            v22 = (char *)v45[1];
          }
        }
        v23 = &v22[24 * v46];
        v24 = *(_OWORD *)v21;
        *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
        *(_OWORD *)v23 = v24;
        ++v46;
      }
    }
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
    if ((_QWORD)v44)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
    if (v53)
    {
      v25 = __p;
      if (__p)
      {
        v26 = v52;
        v27 = __p;
        if (v52 != __p)
        {
          do
            v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
          while (v26 != v25);
          v27 = __p;
        }
        v52 = v25;
        operator delete(v27);
      }
      v28 = v49;
      if (v49)
      {
        v29 = v50;
        v30 = v49;
        if (v50 != v49)
        {
          do
          {
            v32 = *--v29;
            v31 = v32;
            *v29 = 0;
            if (v32)
              MEMORY[0x20BD002D4](v31, 0x1000C8077774924);
          }
          while (v29 != v28);
          v30 = v49;
        }
        v50 = v28;
        operator delete(v30);
      }
      if (v45[1] != v48)
        free(v45[1]);
    }
  }
LABEL_20:
  if (v54 != v56)
    free(v54);
  v14 = v57;
  if (v57 != v59)
LABEL_23:
    free(v14);
  return v13 && (*(unsigned __int8 (**)(_QWORD *))(*a1 + 280))(a1);
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseOptionalAssignmentList(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  BOOL v8;
  _QWORD v10[3];

  if ((*(unsigned __int8 (**)(_QWORD *))(*a1 + 272))(a1))
  {
    v10[0] = a1;
    v10[1] = a2;
    v10[2] = a3;
    v6 = a1[11];
    v7 = 1;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  return v8 | (v7 << 8);
}

uint64_t `anonymous namespace'::OperationParser::parseLocationAlias(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t *v7;
  const unsigned __int8 *v8;
  _BYTE *v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t LocRange;
  uint64_t v14;
  uint64_t v15;
  int Key;
  mlir::MLIRContext *v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  int *v24;
  char *v25;
  char *v26;
  __int128 v27;
  int *v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int *v33;
  char *v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  const char *OCGSize;
  uint64_t EncodedSourceLocation;
  const void ***v60;
  char *v61;
  char *v62;
  __int128 v63;
  const void ***v64;
  char *v65;
  char *v66;
  __int128 v67;
  _QWORD *v68;
  _QWORD *v69;
  void *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  __int128 v75;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  BOOL v82;
  int64_t v83;
  int64_t v84;
  int64_t v85;
  int64_t v86;
  int64_t v87;
  int v88;
  const char *v89;
  uint64_t v90;
  __int16 v91;
  __int128 v92;
  uint64_t v93;
  int8x16_t *v94;
  const char *v95;
  uint64_t v96;
  __int16 v97;
  __int128 v98;
  uint64_t v99;
  void *v100;
  unsigned int v101;
  unsigned int v102;
  _BYTE v103[96];
  void *v104;
  _QWORD *v105;
  void *__p;
  _QWORD *v107;
  char v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  v92 = *(_OWORD *)(v4 + 56);
  v93 = *(_QWORD *)(v4 + 72);
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v98);
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v5 + 56) = v98;
  *(_QWORD *)(v5 + 72) = v99;
  v6 = v93 != 0;
  if (v93)
    v7 = (int8x16_t *)(*((_QWORD *)&v92 + 1) + 1);
  else
    v7 = (int8x16_t *)*((_QWORD *)&v92 + 1);
  v8 = (const unsigned __int8 *)(v93 - v6);
  if (v93 != v6)
  {
    v9 = memchr(v7, 46, v93 - v6);
    if (v9 && v9 - (_BYTE *)v7 != -1)
    {
      OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v92);
      v91 = 257;
      EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, OCGSize);
      mlir::emitError(EncodedSourceLocation, (uint64_t)&v88, (uint64_t)&v98);
      if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
        mlir::InFlightDiagnostic::abandon(&v98);
      if ((_QWORD)v98)
      {
        LODWORD(v94) = 3;
        v95 = "expected location, but found dialect attribute: '#";
        v96 = 50;
        v60 = (const void ***)&v94;
        v61 = (char *)v100;
        if (v101 >= v102)
        {
          v77 = v101 + 1;
          if (v100 <= &v94 && (char *)v100 + 24 * v101 > (char *)&v94)
          {
            v83 = (char *)&v94 - (_BYTE *)v100;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v77, 24);
            v61 = (char *)v100;
            v60 = (const void ***)((char *)v100 + v83);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v77, 24);
            v60 = (const void ***)&v94;
            v61 = (char *)v100;
          }
        }
        v62 = &v61[24 * v101];
        v63 = *(_OWORD *)v60;
        *((_QWORD *)v62 + 2) = v60[2];
        *(_OWORD *)v62 = v63;
        ++v101;
        if ((_QWORD)v98)
        {
          v97 = 261;
          v94 = v7;
          v95 = (const char *)v8;
          mlir::Diagnostic::operator<<((uint64_t)&v98 + 8, (const void ***)&v94);
          if ((_QWORD)v98)
          {
            LODWORD(v94) = 3;
            v95 = "'";
            v96 = 1;
            v64 = (const void ***)&v94;
            v65 = (char *)v100;
            if (v101 >= v102)
            {
              v78 = v101 + 1;
              if (v100 <= &v94 && (char *)v100 + 24 * v101 > (char *)&v94)
              {
                v84 = (char *)&v94 - (_BYTE *)v100;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v78, 24);
                v65 = (char *)v100;
                v64 = (const void ***)((char *)v100 + v84);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v78, 24);
                v64 = (const void ***)&v94;
                v65 = (char *)v100;
              }
            }
            v66 = &v65[24 * v101];
            v67 = *(_OWORD *)v64;
            *((_QWORD *)v66 + 2) = v64[2];
            *(_OWORD *)v66 = v67;
            ++v101;
          }
        }
      }
      v37 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v98);
      if ((_QWORD)v98)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v98);
      if (v108)
      {
        v68 = __p;
        if (__p)
        {
          v69 = v107;
          v70 = __p;
          if (v107 != __p)
          {
            do
              v69 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v69 - 1);
            while (v69 != v68);
            v70 = __p;
          }
          v107 = v68;
          operator delete(v70);
        }
        v41 = v104;
        if (!v104)
          goto LABEL_86;
        v71 = v105;
        v43 = v104;
        if (v105 == v104)
        {
LABEL_85:
          v105 = v41;
          operator delete(v43);
LABEL_86:
          if (v100 != v103)
            free(v100);
          return v37;
        }
        do
        {
          v73 = *--v71;
          v72 = v73;
          *v71 = 0;
          if (v73)
            MEMORY[0x20BD002D4](v72, 0x1000C8077774924);
        }
        while (v71 != v41);
LABEL_84:
        v43 = v104;
        goto LABEL_85;
      }
      return v37;
    }
  }
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(uint64_t **)(v11 + 128);
  if (v12)
  {
    LocRange = mlir::Token::getLocRange((mlir::Token *)&v92);
    mlir::AsmParserState::addAttrAliasUses(v12, v7, v8, LocRange, v14);
    v11 = *(_QWORD *)(a1 + 8);
  }
  v15 = *(_QWORD *)(v11 + 80);
  Key = llvm::StringMapImpl::FindKey((uint64_t *)v15, v7, v8);
  if (Key == -1
    || Key == (unint64_t)*(unsigned int *)(v15 + 8)
    || (v18 = *(_QWORD *)(*(_QWORD *)v15 + 8 * Key), (v19 = *(_QWORD *)(v18 + 8)) == 0))
  {
    v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 368) - *(_QWORD *)(a1 + 360)) >> 3);
    v45 = mlir::UnknownLoc::get(***(mlir::UnknownLoc ****)(a1 + 8), v17);
    v46 = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v92);
    v47 = v46;
    v49 = *(uint64_t **)(a1 + 368);
    v48 = *(_QWORD *)(a1 + 376);
    if ((unint64_t)v49 >= v48)
    {
      v53 = *(_QWORD **)(a1 + 360);
      v54 = 0xAAAAAAAAAAAAAAABLL * (v49 - v53) + 1;
      if (v54 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (_QWORD)v53) >> 3);
      if (2 * v55 > v54)
        v54 = 2 * v55;
      if (v55 >= 0x555555555555555)
        v56 = 0xAAAAAAAAAAAAAAALL;
      else
        v56 = v54;
      if (v56)
      {
        if (v56 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v57 = (char *)operator new(24 * v56);
      }
      else
      {
        v57 = 0;
      }
      v74 = (uint64_t *)&v57[8 * (v49 - v53)];
      *v74 = v47;
      v74[1] = (uint64_t)v7;
      v74[2] = (uint64_t)v8;
      v50 = v74 + 3;
      if (v49 != v53)
      {
        do
        {
          v75 = *(_OWORD *)(v49 - 3);
          *(v74 - 1) = *(v49 - 1);
          *(_OWORD *)(v74 - 3) = v75;
          v74 -= 3;
          v49 -= 3;
        }
        while (v49 != v53);
        v49 = *(uint64_t **)(a1 + 360);
      }
      *(_QWORD *)(a1 + 360) = v74;
      *(_QWORD *)(a1 + 368) = v50;
      *(_QWORD *)(a1 + 376) = &v57[24 * v56];
      if (v49)
        operator delete(v49);
    }
    else
    {
      *v49 = v46;
      v49[1] = (uint64_t)v7;
      v50 = v49 + 3;
      v49[2] = (uint64_t)v8;
    }
    *(_QWORD *)(a1 + 368) = v50;
    return 1;
  }
  v20 = mlir::LocationAttr::classof(*(_QWORD *)(v18 + 8));
  if (v20)
    v21 = v19;
  else
    v21 = 0;
  *a2 = v21;
  if (v20)
    return 1;
  v22 = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v92);
  v97 = 257;
  v23 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, v22);
  mlir::emitError(v23, (uint64_t)&v94, (uint64_t)&v98);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
    mlir::InFlightDiagnostic::abandon(&v98);
  if ((_QWORD)v98)
  {
    v88 = 3;
    v89 = "expected location, but found '";
    v90 = 30;
    v24 = &v88;
    v25 = (char *)v100;
    if (v101 >= v102)
    {
      v79 = v101 + 1;
      if (v100 <= &v88 && (char *)v100 + 24 * v101 > (char *)&v88)
      {
        v85 = (char *)&v88 - (_BYTE *)v100;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v79, 24);
        v25 = (char *)v100;
        v24 = (int *)((char *)v100 + v85);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v79, 24);
        v24 = &v88;
        v25 = (char *)v100;
      }
    }
    v26 = &v25[24 * v101];
    v27 = *(_OWORD *)v24;
    *((_QWORD *)v26 + 2) = *((_QWORD *)v24 + 2);
    *(_OWORD *)v26 = v27;
    ++v101;
    if ((_QWORD)v98)
    {
      v28 = &v88;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v88, v19);
      v29 = (char *)v100;
      if (v101 >= v102)
      {
        v80 = v101 + 1;
        if (v100 <= &v88 && (char *)v100 + 24 * v101 > (char *)&v88)
        {
          v86 = (char *)&v88 - (_BYTE *)v100;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v80, 24);
          v29 = (char *)v100;
          v28 = (int *)((char *)v100 + v86);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v80, 24);
          v28 = &v88;
          v29 = (char *)v100;
        }
      }
      v30 = &v29[24 * v101];
      v31 = *(_OWORD *)v28;
      *((_QWORD *)v30 + 2) = *((_QWORD *)v28 + 2);
      *(_OWORD *)v30 = v31;
      v32 = ++v101;
      if ((_QWORD)v98)
      {
        v88 = 3;
        v89 = "'";
        v90 = 1;
        v33 = &v88;
        v34 = (char *)v100;
        if (v32 >= v102)
        {
          v81 = v32 + 1;
          v82 = (char *)v100 + 24 * v32 > (char *)&v88;
          if (v100 <= &v88 && v82)
          {
            v87 = (char *)&v88 - (_BYTE *)v100;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v81, 24);
            v34 = (char *)v100;
            v33 = (int *)((char *)v100 + v87);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v81, 24);
            v33 = &v88;
            v34 = (char *)v100;
          }
        }
        v35 = &v34[24 * v101];
        v36 = *(_OWORD *)v33;
        *((_QWORD *)v35 + 2) = *((_QWORD *)v33 + 2);
        *(_OWORD *)v35 = v36;
        ++v101;
      }
    }
  }
  v37 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v98);
  if ((_QWORD)v98)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v98);
  if (v108)
  {
    v38 = __p;
    if (__p)
    {
      v39 = v107;
      v40 = __p;
      if (v107 != __p)
      {
        do
          v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
        while (v39 != v38);
        v40 = __p;
      }
      v107 = v38;
      operator delete(v40);
    }
    v41 = v104;
    if (!v104)
      goto LABEL_86;
    v42 = v105;
    v43 = v104;
    if (v105 == v104)
      goto LABEL_85;
    do
    {
      v52 = *--v42;
      v51 = v52;
      *v42 = 0;
      if (v52)
        MEMORY[0x20BD002D4](v51, 0x1000C8077774924);
    }
    while (v42 != v41);
    goto LABEL_84;
  }
  return v37;
}

uint64_t `anonymous namespace'::OperationParser::parseGenericOperationAfterOpName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::APFloatBase *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  const void *v40;
  uint64_t v41;
  uint64_t EncodedSourceLocation;
  const void *Results;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t Inputs;
  const char *v50;
  const char *v51;
  const char *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  __int128 v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  const char *OCGSize;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  void *v65;
  _QWORD *v66;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  char *v71;
  char v72;
  const char *v73;
  int *v74;
  char *v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  int *v79;
  char *v80;
  char *v81;
  __int128 v82;
  int *v83;
  char *v84;
  char *v85;
  __int128 v86;
  uint64_t v87;
  int *v88;
  char *v89;
  char *v90;
  __int128 v91;
  _QWORD *v92;
  _QWORD *v93;
  void *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  BOOL v100;
  unint64_t v101;
  unint64_t v102;
  BOOL v103;
  int64_t v104;
  int64_t v105;
  int64_t v106;
  int64_t v107;
  _OWORD v108[2];
  uint64_t v109;
  uint64_t v110;
  int v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114[2];
  uint64_t v115[2];
  __int128 v116;
  uint64_t v117;
  void *v118;
  unsigned int v119;
  unsigned int v120;
  _BYTE v121[96];
  void *v122;
  _QWORD *v123;
  void *__p;
  _QWORD *v125;
  char v126;
  void *v127;
  uint64_t v128;
  _BYTE v129[16];
  __int16 v130;
  void *v131;
  uint64_t v132;
  _QWORD v133[34];

  v133[32] = *MEMORY[0x24BDAC8D0];
  v109 = a9;
  v110 = a10;
  v131 = v133;
  v132 = 0x800000000;
  if (!*(_BYTE *)(a3 + 16))
  {
    *(_QWORD *)&v116 = "expected '(' to start operand list";
    LOWORD(v119) = 259;
    if (!mlir::detail::Parser::parseToken(a1, 21, (uint64_t)&v116))
      goto LABEL_83;
      goto LABEL_83;
    v127 = "expected ')' to end operand list";
    v130 = 259;
    if (!mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v127))
      goto LABEL_83;
    v18 = v132;
    if (*(_BYTE *)(a3 + 16))
    {
      *(_QWORD *)a3 = v131;
      *(_QWORD *)(a3 + 8) = v18;
    }
    else
    {
      *(_QWORD *)a3 = v131;
      *(_QWORD *)(a3 + 8) = v18;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  if (*(_BYTE *)(a4 + 16))
  {
    mlir::BlockRange::BlockRange(v114, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
    mlir::OperationState::addSuccessors((unsigned int *)a2, v114[0], v114[1]);
  }
  else if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 22)
  {
    if ((mlir::OperationName::mightHaveTrait<mlir::OpTrait::IsTerminator>((void ***)(a2 + 8)) & 1) == 0)
    {
      v127 = "successors in non-terminator";
      v130 = 259;
      mlir::detail::Parser::emitError(a1, (uint64_t)&v127, &v116);
      v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
      if ((_QWORD)v116)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
      if (!v126)
        goto LABEL_84;
      v21 = __p;
      if (__p)
      {
        v22 = v125;
        v23 = __p;
        if (v125 != __p)
        {
          do
            v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
          while (v22 != v21);
          v23 = __p;
        }
        v125 = v21;
        operator delete(v23);
      }
      v24 = v122;
      if (v122)
      {
        v25 = v123;
        v26 = v122;
        if (v123 == v122)
          goto LABEL_118;
        do
        {
          v28 = *--v25;
          v27 = v28;
          *v25 = 0;
          if (v28)
            MEMORY[0x20BD002D4](v27, 0x1000C8077774924);
        }
        while (v25 != v24);
LABEL_117:
        v26 = v122;
LABEL_118:
        v123 = v24;
        operator delete(v26);
      }
LABEL_119:
      if (v118 != v121)
        free(v118);
      goto LABEL_84;
    }
    v127 = v129;
    v128 = 0x200000000;
    *(_QWORD *)&v116 = "expected '['";
    LOWORD(v119) = 259;
    if (mlir::detail::Parser::parseToken(a1, 22, (uint64_t)&v116)
      && (*(_QWORD *)&v116 = a1,
          *((_QWORD *)&v116 + 1) = &v127,
    {
      mlir::BlockRange::BlockRange(v115, (uint64_t)v127, v128);
      mlir::OperationState::addSuccessors((unsigned int *)a2, v115[0], v115[1]);
      v19 = 0;
    }
    else
    {
      v19 = 1;
    }
    if (v127 != v129)
      free(v127);
    if ((v19 & 1) != 0)
      goto LABEL_83;
  }
  if (a8)
  {
    *(_QWORD *)(a2 + 248) = a7;
  }
  else
  {
    v29 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v29 + 56) == 23)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v29 + 8), (uint64_t)&v116);
      v30 = *(_QWORD *)(a1 + 8);
      *(_OWORD *)(v30 + 56) = v116;
      *(_QWORD *)(v30 + 72) = v117;
      v31 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)a1, 0);
      *(_QWORD *)(a2 + 248) = v31;
      if (!v31)
        goto LABEL_83;
      *(_QWORD *)&v116 = "expected '>' to close properties";
      LOWORD(v119) = 259;
      if (!mlir::detail::Parser::parseToken(a1, 19, (uint64_t)&v116))
        goto LABEL_83;
    }
  }
  if (*(_BYTE *)(a5 + 16))
  {
    mlir::OperationState::addRegions((char *)a2, *(_QWORD *)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    v32 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v32 + 56) == 21)
    {
      while (1)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v32 + 8), (uint64_t)&v116);
        v33 = *(_QWORD *)(a1 + 8);
        *(_OWORD *)(v33 + 56) = v116;
        *(_QWORD *)(v33 + 72) = v117;
        v34 = (_QWORD *)operator new();
        v35 = mlir::Region::Region(v34, *(mlir::Operation **)(a1 + 416));
        *(_QWORD *)&v116 = v35;
        v36 = *(unsigned int *)(a2 + 232);
        if (v36 >= *(unsigned int *)(a2 + 236))
        {
          llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::growAndEmplaceBack<mlir::Region*>(a2 + 224, &v116);
          v37 = *(_QWORD *)(a2 + 224);
          v38 = *(unsigned int *)(a2 + 232);
        }
        else
        {
          v37 = *(_QWORD *)(a2 + 224);
          *(_QWORD *)(v37 + 8 * v36) = v35;
          v38 = v36 + 1;
          *(_DWORD *)(a2 + 232) = v38;
        }
        v32 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v32 + 56) != 16)
        {
          *(_QWORD *)&v116 = "expected ')' to end region list";
          LOWORD(v119) = 259;
          if (!mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v116))
            goto LABEL_83;
          break;
        }
      }
    }
  }
  if (*(_BYTE *)(a6 + 16))
  {
    v40 = *(const void **)a6;
    v39 = *(_QWORD *)(a6 + 8);
    *(_QWORD *)(a2 + 192) = 0;
    v41 = *(unsigned int *)(a2 + 120);
    if (v39 + v41 > (unint64_t)*(unsigned int *)(a2 + 124))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), v39 + v41, 16);
      LODWORD(v41) = *(_DWORD *)(a2 + 120);
    }
    if (v39)
    {
      memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v41), v40, 16 * v39);
      LODWORD(v41) = *(_DWORD *)(a2 + 120);
    }
    *(_DWORD *)(a2 + 120) = v41 + v39;
  }
  else if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 20
         && !mlir::detail::Parser::parseAttributeDict((mlir::detail::Parser *)a1, (mlir::NamedAttrList *)(a2 + 112)))
  {
    goto LABEL_83;
  }
  if ((_BYTE)v110)
  {
    EncodedSourceLocation = *(_QWORD *)a2;
    goto LABEL_57;
  }
  *(_QWORD *)&v116 = "expected ':' followed by operation type";
  LOWORD(v119) = 259;
  if (!mlir::detail::Parser::parseToken(a1, 15, (uint64_t)&v116)
    || (OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(_QWORD *)(a1 + 8)
                                                                                                + 56)),
        EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, OCGSize),
        (v62 = mlir::detail::Parser::parseType((mlir::detail::Parser *)a1)) == 0))
  {
LABEL_83:
    v20 = 0;
    goto LABEL_84;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)v62 + 136) != &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
  {
    v127 = "expected function type";
    v130 = 259;
    mlir::emitError(EncodedSourceLocation, (uint64_t)&v127, (uint64_t)&v116);
    v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
    if ((_QWORD)v116)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
    if (!v126)
      goto LABEL_84;
    v63 = __p;
    if (__p)
    {
      v64 = v125;
      v65 = __p;
      if (v125 != __p)
      {
        do
          v64 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v64 - 1);
        while (v64 != v63);
        v65 = __p;
      }
      v125 = v63;
      operator delete(v65);
    }
    v24 = v122;
    if (v122)
    {
      v66 = v123;
      v26 = v122;
      if (v123 == v122)
        goto LABEL_118;
      do
      {
        v69 = *--v66;
        v68 = v69;
        *v66 = 0;
        if (v69)
          MEMORY[0x20BD002D4](v68, 0x1000C8077774924);
      }
      while (v66 != v24);
      goto LABEL_117;
    }
    goto LABEL_119;
  }
  LOBYTE(v110) = 1;
  v109 = v62;
LABEL_57:
  Results = (const void *)mlir::FunctionType::getResults((mlir::FunctionType *)&v109);
  v45 = v44;
  v46 = 8 * v44;
  v47 = *(unsigned int *)(a2 + 72);
  v48 = v47 + ((8 * v44) >> 3);
  if (v48 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v48, 8);
    LODWORD(v47) = *(_DWORD *)(a2 + 72);
  }
  if (v45)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v47), Results, v46);
    LODWORD(v47) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v47 + (v46 >> 3);
  Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&v109);
  v51 = v50;
  v52 = *(const char **)(a3 + 8);
  if (v50 != v52)
  {
    v70 = v52 == (const char *)1;
    v71 = "s";
    if (v70)
      v71 = "";
    v72 = *v71;
    v127 = "expected ";
    v130 = 259;
    mlir::emitError(EncodedSourceLocation, (uint64_t)&v127, (uint64_t)&v116);
    if ((_QWORD)v116)
    {
      v73 = *(const char **)(a3 + 8);
      v111 = 5;
      v112 = v73;
      v74 = &v111;
      v75 = (char *)v118;
      if (v119 >= v120)
      {
        v98 = v119 + 1;
        if (v118 <= &v111 && (char *)v118 + 24 * v119 > (char *)&v111)
        {
          v104 = (char *)&v111 - (_BYTE *)v118;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v98, 24);
          v75 = (char *)v118;
          v74 = (int *)((char *)v118 + v104);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v98, 24);
          v74 = &v111;
          v75 = (char *)v118;
        }
      }
      v76 = &v75[24 * v119];
      v77 = *(_OWORD *)v74;
      *((_QWORD *)v76 + 2) = *((_QWORD *)v74 + 2);
      *(_OWORD *)v76 = v77;
      v78 = ++v119;
      if ((_QWORD)v116)
      {
        v111 = 3;
        v112 = " operand type";
        v113 = 13;
        v79 = &v111;
        v80 = (char *)v118;
        if (v78 >= v120)
        {
          v99 = v78 + 1;
          v100 = (char *)v118 + 24 * v78 > (char *)&v111;
          if (v118 <= &v111 && v100)
          {
            v105 = (char *)&v111 - (_BYTE *)v118;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v99, 24);
            v80 = (char *)v118;
            v79 = (int *)((char *)v118 + v105);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v99, 24);
            v79 = &v111;
            v80 = (char *)v118;
          }
        }
        v81 = &v80[24 * v119];
        v82 = *(_OWORD *)v79;
        *((_QWORD *)v81 + 2) = *((_QWORD *)v79 + 2);
        *(_OWORD *)v81 = v82;
        ++v119;
        if ((_QWORD)v116)
        {
          mlir::Diagnostic::operator<<((uint64_t)&v116 + 8, v72);
          if ((_QWORD)v116)
          {
            v111 = 3;
            v112 = " but had ";
            v113 = 9;
            v83 = &v111;
            v84 = (char *)v118;
            if (v119 >= v120)
            {
              v101 = v119 + 1;
              if (v118 <= &v111 && (char *)v118 + 24 * v119 > (char *)&v111)
              {
                v106 = (char *)&v111 - (_BYTE *)v118;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v101, 24);
                v84 = (char *)v118;
                v83 = (int *)((char *)v118 + v106);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v101, 24);
                v83 = &v111;
                v84 = (char *)v118;
              }
            }
            v85 = &v84[24 * v119];
            v86 = *(_OWORD *)v83;
            *((_QWORD *)v85 + 2) = *((_QWORD *)v83 + 2);
            *(_OWORD *)v85 = v86;
            v87 = ++v119;
            if ((_QWORD)v116)
            {
              v111 = 5;
              v112 = v51;
              v88 = &v111;
              v89 = (char *)v118;
              if (v87 >= v120)
              {
                v102 = v87 + 1;
                v103 = (char *)v118 + 24 * v87 > (char *)&v111;
                if (v118 <= &v111 && v103)
                {
                  v107 = (char *)&v111 - (_BYTE *)v118;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v102, 24);
                  v89 = (char *)v118;
                  v88 = (int *)((char *)v118 + v107);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v102, 24);
                  v88 = &v111;
                  v89 = (char *)v118;
                }
              }
              v90 = &v89[24 * v119];
              v91 = *(_OWORD *)v88;
              *((_QWORD *)v90 + 2) = *((_QWORD *)v88 + 2);
              *(_OWORD *)v90 = v91;
              ++v119;
            }
          }
        }
      }
    }
    v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
    if ((_QWORD)v116)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
    if (!v126)
      goto LABEL_84;
    v92 = __p;
    if (__p)
    {
      v93 = v125;
      v94 = __p;
      if (v125 != __p)
      {
        do
          v93 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v93 - 1);
        while (v93 != v92);
        v94 = __p;
      }
      v125 = v92;
      operator delete(v94);
    }
    v24 = v122;
    if (v122)
    {
      v95 = v123;
      v26 = v122;
      if (v123 == v122)
        goto LABEL_118;
      do
      {
        v97 = *--v95;
        v96 = v97;
        *v95 = 0;
        if (v97)
          MEMORY[0x20BD002D4](v96, 0x1000C8077774924);
      }
      while (v95 != v24);
      goto LABEL_117;
    }
    goto LABEL_119;
  }
  if ((_DWORD)v50)
  {
    v53 = (uint64_t *)Inputs;
    v54 = 0;
    v55 = 32 * v50;
    do
    {
      v56 = (_OWORD *)(*(_QWORD *)a3 + v54);
      v57 = v56[1];
      v108[0] = *v56;
      v108[1] = v57;
      v59 = *(unsigned int *)(a2 + 24);
      if (v59 >= *(unsigned int *)(a2 + 28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v59 + 1, 8);
        v59 = *(unsigned int *)(a2 + 24);
      }
      *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v59) = v58;
      v60 = *(_DWORD *)(a2 + 24) + 1;
      *(_DWORD *)(a2 + 24) = v60;
      if (!*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v60 - 8))
        goto LABEL_83;
      v54 += 32;
      ++v53;
    }
    while (v55 != v54);
  }
  v20 = 1;
LABEL_84:
  if (v131 != v133)
    free(v131);
  return v20;
}

uint64_t `anonymous namespace'::OperationParser::parseOptionalSSAUseList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  _OWORD *v17;
  __int128 v18;
  unint64_t v19;
  BOOL v20;
  char *v21;
  unint64_t v23;
  BOOL v24;
  char *v25;
  __int128 v26;
  uint64_t v27;

  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(_DWORD *)(v4 + 56);
  v5 = v4 + 56;
  if (v6 != 6 && !mlir::Token::isCodeCompletionFor(v5, 6))
    return 1;
  v26 = 0uLL;
  v27 = 0;
  {
    v7 = *(unsigned int *)(a2 + 8);
    v8 = *(_QWORD *)a2;
    v9 = (char *)&v26;
    if (v7 >= *(_DWORD *)(a2 + 12))
    {
      v23 = v7 + 1;
      v24 = v8 + 32 * v7 > (unint64_t)&v26;
      if (v8 <= (unint64_t)&v26 && v24)
      {
        v25 = (char *)&v26 - v8;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v23, 32);
        v8 = *(_QWORD *)a2;
        v9 = &v25[*(_QWORD *)a2];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v23, 32);
        v8 = *(_QWORD *)a2;
        v9 = (char *)&v26;
      }
    }
    v10 = (_OWORD *)(v8 + 32 * *(unsigned int *)(a2 + 8));
    v11 = *((_OWORD *)v9 + 1);
    *v10 = *(_OWORD *)v9;
    v10[1] = v11;
    ++*(_DWORD *)(a2 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v12 + 56) == 16)
    {
      while (1)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v12 + 8), (uint64_t)&v26);
        v13 = *(_QWORD *)(a1 + 8);
        *(_OWORD *)(v13 + 56) = v26;
        *(_QWORD *)(v13 + 72) = v27;
        v26 = 0uLL;
        v27 = 0;
          return 0;
        v14 = *(unsigned int *)(a2 + 8);
        v15 = *(_QWORD *)a2;
        if (v14 >= *(_DWORD *)(a2 + 12))
        {
          v19 = v14 + 1;
          v20 = v15 + 32 * v14 > (unint64_t)&v26;
          if (v15 <= (unint64_t)&v26 && v20)
          {
            v21 = (char *)&v26 - v15;
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v19, 32);
            v15 = *(_QWORD *)a2;
            v16 = &v21[*(_QWORD *)a2];
            goto LABEL_9;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v19, 32);
          v15 = *(_QWORD *)a2;
        }
        v16 = (char *)&v26;
LABEL_9:
        v17 = (_OWORD *)(v15 + 32 * *(unsigned int *)(a2 + 8));
        v18 = *((_OWORD *)v16 + 1);
        *v17 = *(_OWORD *)v16;
        v17[1] = v18;
        ++*(_DWORD *)(a2 + 8);
        v12 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v12 + 56) != 16)
          return 1;
      }
    }
    return 1;
  }
  return 0;
}

uint64_t mlir::OperationName::mightHaveTrait<mlir::OpTrait::IsTerminator>(void ***a1)
{
  unsigned __int8 v1;
  void **v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  const char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void ***v12;
  const char *v13;
  unint64_t v14;

  if ((v1 & 1) == 0)
  {
    v12 = a1;
    a1 = v12;
    if (v4)
    {
      v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      v14 = 84;
      v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5)
        v6 = v5;
      else
        v6 = v14;
      v7 = &v13[v6];
      v8 = v14 - v6;
      if (v14 - v6 >= 0x12)
        v9 = 18;
      else
        v9 = v14 - v6;
      v10 = v8 - v9;
      if (v10 >= v10 - 1)
        v11 = v10 - 1;
      else
        v11 = v10;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      a1 = v12;
    }
  }
  v2 = *a1;
  if (v2[2] == &mlir::detail::TypeIDResolver<void,void>::id)
    return 1;
  else
    return (*((uint64_t (**)(void **, uint64_t))*v2 + 4))(v2, mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id);
}

uint64_t `anonymous namespace'::OperationParser::parseRegion(_anonymous_namespace_::OperationParser *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  mlir::AsmParserState *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  mlir::Block *v14[2];
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)a1 + 1);
  v12 = *(_OWORD *)(v6 + 56);
  v13 = *(_QWORD *)(v6 + 72);
  v14[0] = (mlir::Block *)"expected '{' to begin a region";
  v16 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 20, (uint64_t)v14))
    return 0;
  v7 = *(mlir::AsmParserState **)(*((_QWORD *)a1 + 1) + 128);
  if (v7)
    mlir::AsmParserState::startRegionDefinition(v7);
  if (a4 || (v8 = *((_QWORD *)a1 + 1), *(_DWORD *)(v8 + 56) != 27))
  {
    MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v12);
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v8 + 8), (uint64_t)v14);
  v10 = *((_QWORD *)a1 + 1);
  *(_OWORD *)(v10 + 56) = *(_OWORD *)v14;
  *(_QWORD *)(v10 + 72) = v15;
  v11 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 128);
  if (v11)
    mlir::AsmParserState::finalizeRegionDefinition(v11);
  return 1;
}

unint64_t `anonymous namespace'::OperationParser::resolveSSAUse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  const char *v11;
  uint64_t EncodedSourceLocation;
  mlir::OpResult *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  const void ***v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  unint64_t *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  unint64_t v52;
  BOOL v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];
  void *v60;
  uint64_t v61;
  void *v62;
  _QWORD *v63;
  void *v64;
  _QWORD *v65;
  char v66;
  unint64_t v67[4];
  __int16 v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  __int16 v73;
  _QWORD v74[12];
  void *v75;
  _QWORD *v76;
  void *__p;
  _QWORD *v78;
  char v79;
  const void **v80;
  mlir::OpResult *v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84[3];

  v84[2] = *MEMORY[0x24BDAC8D0];
  v55 = a3;
  v7 = v6;
  v8 = *(unsigned int *)(a2 + 24);
  v9 = *(_DWORD *)(v6 + 8);
  if (v9 <= v8)
  {
    v30 = (v8 + 1);
    if (v9 != (_DWORD)v30)
    {
      if (v9 <= v30)
      {
        if (*(_DWORD *)(v6 + 12) < v30)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v6 + 16), v30, 16);
          v9 = *(_DWORD *)(v7 + 8);
        }
        if (v9 != (_DWORD)v30)
          bzero((void *)(*(_QWORD *)v7 + 16 * v9), 16 * (v30 - v9));
      }
      *(_DWORD *)(v7 + 8) = v30;
    }
  }
  else
  {
    v10 = *(_QWORD *)(*(_QWORD *)v6 + 16 * v8);
    if (v10)
    {
      if (a3 != (*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        v11 = *(const char **)a2;
        v67[0] = (unint64_t)"use of value '";
        v68 = 259;
        EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, v11);
        mlir::emitError(EncodedSourceLocation, (uint64_t)v67, (uint64_t)&v69);
        if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
          mlir::InFlightDiagnostic::abandon(&v69);
        v84[0] = *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (v69)
        {
          v83 = 261;
          v13 = *(mlir::OpResult **)(a2 + 16);
          v80 = *(const void ***)(a2 + 8);
          v81 = v13;
          mlir::Diagnostic::operator<<((uint64_t)&v70, &v80);
          mlir::Diagnostic::append<char const(&)[43],mlir::Type &,char const(&)[5],mlir::Type>((uint64_t)&v70, "' expects different type than prior uses: ", &v55, " vs ", v84);
        }
        v14 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, *(const char **)(*(_QWORD *)v7 + 16 * *(unsigned int *)(a2 + 24) + 8));
        v15 = mlir::Diagnostic::attachNote(&v70, v14, 1);
        v16 = v15 + 16;
        v17 = *(_QWORD *)(v15 + 16);
        LODWORD(v80) = 3;
        v81 = (mlir::OpResult *)"prior use here";
        v82 = 14;
        v18 = *(unsigned int *)(v15 + 24);
        v19 = &v80;
        if (v18 >= *(_DWORD *)(v15 + 28))
        {
          v52 = v18 + 1;
          v53 = v17 + 24 * v18 > (unint64_t)&v80;
          if (v17 <= (unint64_t)&v80 && v53)
          {
            v54 = (char *)&v80 - v17;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v16, (void *)(v15 + 32), v52, 24);
            v17 = *(_QWORD *)(v15 + 16);
            v19 = (const void ***)&v54[v17];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v16, (void *)(v15 + 32), v52, 24);
            v17 = *(_QWORD *)(v15 + 16);
            v19 = &v80;
          }
        }
        v20 = v17 + 24 * *(unsigned int *)(v15 + 24);
        v21 = *(_OWORD *)v19;
        *(_QWORD *)(v20 + 16) = v19[2];
        *(_OWORD *)v20 = v21;
        ++*(_DWORD *)(v15 + 24);
        if (v69)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v69);
        if (!v79)
          return 0;
        v22 = __p;
        if (__p)
        {
          v23 = v78;
          v24 = __p;
          if (v78 != __p)
          {
            do
              v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
            while (v23 != v22);
            v24 = __p;
          }
          v78 = v22;
          operator delete(v24);
        }
        v25 = v75;
        if (v75)
        {
          v26 = v76;
          v27 = v75;
          if (v76 != v75)
          {
            do
            {
              v29 = *--v26;
              v28 = v29;
              *v26 = 0;
              if (v29)
                MEMORY[0x20BD002D4](v28, 0x1000C8077774924);
            }
            while (v26 != v25);
            v27 = v75;
          }
          v76 = v25;
          operator delete(v27);
        }
        v50 = v72;
        if (v72 == v74)
          return 0;
        goto LABEL_58;
      }
      goto LABEL_37;
    }
  }
  if (**(_QWORD **)v7)
  {
    v80 = **(const void ****)v7;
    v69 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 336), (unint64_t *)&v80, &v69) & 1) == 0)
    {
      v40 = *(const char **)a2;
      v69 = "reference to invalid result number";
      v73 = 259;
      v41 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, v40);
      mlir::emitError(v41, (uint64_t)&v69, (uint64_t)v59);
      if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
        mlir::InFlightDiagnostic::abandon(v59);
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      if (!v66)
        return 0;
      v42 = v64;
      if (v64)
      {
        v43 = v65;
        v44 = v64;
        if (v65 != v64)
        {
          do
            v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
          while (v43 != v42);
          v44 = v64;
        }
        v65 = v42;
        operator delete(v44);
      }
      v45 = v62;
      if (v62)
      {
        v46 = v63;
        v47 = v62;
        if (v63 != v62)
        {
          do
          {
            v49 = *--v46;
            v48 = v49;
            *v46 = 0;
            if (v49)
              MEMORY[0x20BD002D4](v48, 0x1000C8077774924);
          }
          while (v46 != v45);
          v47 = v62;
        }
        v63 = v45;
        operator delete(v47);
      }
      v50 = v60;
      if (v60 == &v61)
        return 0;
LABEL_58:
      free(v50);
      return 0;
    }
  }
  v31 = *(const char **)a2;
  v58 = a3;
  mlir::OperationName::OperationName(&v57, "builtin.unrealized_conversion_cast", 34, ***(_QWORD ***)(a1 + 8));
  v32 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, v31);
  v33 = v57;
  mlir::ValueRange::ValueRange((unint64_t *)&v80, (uint64_t)&v58, 1uLL);
  mlir::ValueRange::ValueRange(v67, 0, 0);
  v69 = &v71;
  v70 = 0x400000000;
  v74[5] = 4;
  mlir::BlockRange::BlockRange(v84, 0, 0);
  v34 = mlir::Operation::create(v32, v33, (uint64_t)v80, v81, v67[0], v67[1], (mlir::NamedAttrList *)&v69, 0, v84[0], v84[1], 0);
  if (v69 != &v71)
    free(v69);
  v10 = v34 - 16;
  v56 = v10;
  v69 = 0;
  v35 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 336), &v56, &v69);
  v36 = v69;
  if ((v35 & 1) == 0)
  {
    v36 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::InsertIntoBucketImpl<mlir::Value>(a1 + 336, (uint64_t)&v56, &v56, v69);
    *v36 = v56;
    v36[1] = 0;
  }
  v36[1] = v31;
  v37 = *(const char **)a2;
  v38 = (unint64_t *)(*(_QWORD *)v7 + 16 * *(unsigned int *)(a2 + 24));
  *v38 = v10;
  v38[1] = (unint64_t)v37;
LABEL_37:
  v39 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 128);
  if (v39)
    mlir::AsmParserState::addUses(v39, v10, (_BYTE **)a2, 1);
  return v10;
}

uint64_t `anonymous namespace'::OperationParser::parseSSAUse(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  mlir::detail::OpResultImpl *v17;
  int v18;
  uint64_t v19;
  unsigned __int8 v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  mlir::detail::OpResultImpl *v24;
  int v25;
  unsigned int v26;
  _DWORD *v27;
  llvm::raw_ostream *v28;
  llvm::raw_ostream *v29;
  _WORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  void *v35;
  uint64_t *v36;
  BOOL v37;
  int v38;
  unint64_t v39;
  uint64_t v42;
  mlir::Token *v43;
  int v44;
  unint64_t HashIdentifierNumber;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  void *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  mlir::detail::OpResultImpl *v63;
  uint64_t v64;
  void *v65[2];
  uint64_t v66;
  __int16 v67;
  void *__p[2];
  void *v69;
  unint64_t v70;
  __int128 v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  int v77;
  void **v78;
  void *v79;
  _QWORD *v80;
  void *v81;
  _QWORD *v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v4 + 56) == 2)
  {
    v65[0] = 0;
    v65[1] = 0;
    v66 = 0;
    DWORD2(v71) = 0;
    v75 = 0;
    v76 = 0;
    v77 = 1;
    v73 = 0;
    v74 = 0;
    v72 = 0;
    *(_QWORD *)&v71 = &unk_24C02DC40;
    v78 = v65;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v71, 0, 0, 0);
    v5 = *(_DWORD *)(a1 + 24);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 16);
      v64 = v6 + 88 * v5;
      while (1)
      {
        v7 = *(uint64_t ***)v6;
        v8 = *(unsigned int *)(v6 + 8);
        if ((_DWORD)v8)
          break;
        v9 = *(uint64_t ***)v6;
        v14 = &v7[v8];
        if (v7 != v14)
          goto LABEL_18;
LABEL_4:
        v6 += 88;
        if (v6 == v64)
          goto LABEL_61;
      }
      v9 = *(uint64_t ***)v6;
      if (*v7)
        v10 = *v7 + 1 == 0;
      else
        v10 = 1;
      if (v10)
      {
        do
        {
          v12 = v9[1];
          ++v9;
          v11 = v12;
          if (v12)
            v13 = v11 + 1 == 0;
          else
            v13 = 1;
        }
        while (v13);
      }
      v14 = &v7[v8];
      if (v9 == v14)
        goto LABEL_4;
LABEL_18:
      v15 = *v9;
      while (!*((_DWORD *)v15 + 4))
      {
        do
        {
LABEL_46:
          v36 = v9[1];
          ++v9;
          v15 = v36;
          if (v36)
            v37 = v15 + 1 == 0;
          else
            v37 = 1;
        }
        while (v37);
        if (v9 == v14)
          goto LABEL_4;
      }
      v16 = *(_QWORD *)v15[1];
      if ((~*(_DWORD *)(v16 + 8) & 7) != 0)
        v17 = *(mlir::detail::OpResultImpl **)v15[1];
      else
        v17 = 0;
      if (v17)
      {
        v18 = *(_DWORD *)(a1 + 352);
        if (v18)
        {
          v19 = *(_QWORD *)(a1 + 336);
          if ((v20 & 1) == 0)
          {
            v63 = v17;
            v17 = v63;
            if (v38)
            {
              v39 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v39 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v39;
              v17 = v63;
            }
          }
          v21 = 0x9DDFEA08EB382D69
              * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v17) ^ ((unint64_t)v17 >> 32));
          v22 = 0x9DDFEA08EB382D69 * (((unint64_t)v17 >> 32) ^ (v21 >> 47) ^ v21);
          v23 = (-348639895 * ((v22 >> 47) ^ v22)) & (v18 - 1);
          v24 = *(mlir::detail::OpResultImpl **)(v19 + 16 * v23);
          if (v24 == v17)
            goto LABEL_40;
          v25 = 1;
          while (v24 != (mlir::detail::OpResultImpl *)-4096)
          {
            v26 = v23 + v25++;
            v23 = v26 & (v18 - 1);
            v24 = *(mlir::detail::OpResultImpl **)(v19 + 16 * v23);
            if (v24 == v17)
              goto LABEL_40;
          }
        }
        v70 = *(_QWORD *)(mlir::detail::OpResultImpl::getOwner(v17) + 48);
        mlir::OperationName::print((mlir::OperationName *)&v70, (llvm::raw_ostream *)&v71);
        if ((char *)v73 - v74 > (char *)1)
        {
          *(_WORD *)v74 = 8250;
          v74 += 2;
          goto LABEL_40;
        }
        v29 = (llvm::raw_ostream *)&v71;
        goto LABEL_37;
      }
      v27 = (_DWORD *)v74;
      if ((char *)v73 - v74 > (char *)4)
      {
        *(_BYTE *)(v74 + 4) = 35;
        *v27 = 543650401;
        v74 += 5;
        v29 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v71, *(unsigned int *)(v16 + 24));
        v30 = (_WORD *)*((_QWORD *)v29 + 4);
        if (*((_QWORD *)v29 + 3) - (_QWORD)v30 > 1uLL)
        {
LABEL_38:
          *v30 = 8250;
          *((_QWORD *)v29 + 4) += 2;
          goto LABEL_40;
        }
      }
      else
      {
        v28 = llvm::raw_ostream::write((llvm::raw_ostream *)&v71, "arg #", 5uLL);
        v29 = llvm::raw_ostream::operator<<(v28, *(unsigned int *)(v16 + 24));
        v30 = (_WORD *)*((_QWORD *)v29 + 4);
        if (*((_QWORD *)v29 + 3) - (_QWORD)v30 > 1uLL)
          goto LABEL_38;
      }
LABEL_37:
      llvm::raw_ostream::write(v29, ": ", 2uLL);
LABEL_40:
      v70 = *(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::Type::print((llvm::raw_ostream *)&v70, (llvm::raw_ostream *)&v71);
      if (*((_DWORD *)v15 + 4) >= 2u)
      {
        v31 = (_DWORD *)v74;
        if ((char *)v73 - v74 > (char *)4)
        {
          *(_BYTE *)(v74 + 4) = 46;
          *v31 = 774774828;
          v74 += 5;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v71, ", ...", 5uLL);
        }
      }
      v32 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 136);
      v33 = *v15;
      v34 = v78;
      v35 = v78[2];
      *(_OWORD *)__p = *(_OWORD *)v78;
      v69 = v35;
      v78[1] = 0;
      v34[2] = 0;
      *v34 = 0;
      (*(void (**)(uint64_t, uint64_t *, uint64_t, void **))(*(_QWORD *)v32 + 32))(v32, v15 + 5, v33, __p);
      if (SHIBYTE(v69) < 0)
        operator delete(__p[0]);
      goto LABEL_46;
    }
LABEL_61:
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v71);
    if (SHIBYTE(v66) < 0)
      operator delete(v65[0]);
    return 0;
  }
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v4 + 64);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(_QWORD *)(a1 + 8) + 56));
  *(_QWORD *)&v71 = "expected SSA operand";
  LOWORD(v74) = 259;
  if (!mlir::detail::Parser::parseToken(a1, 6, (uint64_t)&v71))
    return 0;
  v42 = *(_QWORD *)(a1 + 8);
  v44 = *(_DWORD *)(v42 + 56);
  v43 = (mlir::Token *)(v42 + 56);
  if (v44 != 5)
    return 1;
  if ((a3 & 1) != 0)
  {
    HashIdentifierNumber = mlir::Token::getHashIdentifierNumber(v43);
    if ((HashIdentifierNumber & 0xFF00000000) != 0)
    {
      *(_DWORD *)(a2 + 24) = HashIdentifierNumber;
      mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)&v71);
      v46 = *(_QWORD *)(a1 + 8);
      *(_OWORD *)(v46 + 56) = v71;
      *(_QWORD *)(v46 + 72) = v72;
      return 1;
    }
    v65[0] = "invalid SSA value result number";
    v67 = 259;
    mlir::detail::Parser::emitError(a1, (uint64_t)v65, &v71);
    v47 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v71);
    if ((_QWORD)v71)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v71);
    if (v83)
    {
      v57 = v81;
      if (v81)
      {
        v58 = v82;
        v59 = v81;
        if (v82 != v81)
        {
          do
            v58 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v58 - 1);
          while (v58 != v57);
          v59 = v81;
        }
        v82 = v57;
        operator delete(v59);
      }
      v52 = v79;
      if (!v79)
        goto LABEL_96;
      v60 = v80;
      v54 = v79;
      if (v80 == v79)
      {
LABEL_95:
        v80 = v52;
        operator delete(v54);
LABEL_96:
        if (v73 != &v75)
          free(v73);
        return v47;
      }
      do
      {
        v62 = *--v60;
        v61 = v62;
        *v60 = 0;
        if (v62)
          MEMORY[0x20BD002D4](v61, 0x1000C8077774924);
      }
      while (v60 != v52);
LABEL_94:
      v54 = v79;
      goto LABEL_95;
    }
  }
  else
  {
    v65[0] = "result number not allowed in argument list";
    v67 = 259;
    mlir::detail::Parser::emitError(a1, (uint64_t)v65, &v71);
    v47 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v71);
    if ((_QWORD)v71)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v71);
    if (v83)
    {
      v49 = v81;
      if (v81)
      {
        v50 = v82;
        v51 = v81;
        if (v82 != v81)
        {
          do
            v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
          while (v50 != v49);
          v51 = v81;
        }
        v82 = v49;
        operator delete(v51);
      }
      v52 = v79;
      if (!v79)
        goto LABEL_96;
      v53 = v80;
      v54 = v79;
      if (v80 == v79)
        goto LABEL_95;
      do
      {
        v56 = *--v53;
        v55 = v56;
        *v53 = 0;
        if (v56)
          MEMORY[0x20BD002D4](v55, 0x1000C8077774924);
      }
      while (v53 != v52);
      goto LABEL_94;
    }
  }
  return v47;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(uint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v7 = &unk_254519000;
    if ((v6 & 1) == 0)
    {
      v24 = a3;
      v22 = a2;
      v25 = *a1;
      v23 = *((_DWORD *)a1 + 4);
      v26 = *a2;
      v7 = &unk_254519000;
      v4 = v25;
      v5 = v26;
      v3 = v23;
      a2 = v22;
      a3 = v24;
      if (v20)
      {
        v21 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v21 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v21;
        v7 = (_QWORD *)&unk_254519000;
        v4 = v25;
        v5 = v26;
        v3 = v23;
        a2 = v22;
        a3 = v24;
      }
    }
    v8 = (v7[373] + 8 * v5) ^ HIDWORD(v5);
    v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v8) >> 47) ^ (0x9DDFEA08EB382D69 * v8));
    v10 = -348639895 * ((v9 >> 47) ^ v9);
    v11 = v3 - 1;
    v12 = v10 & (v3 - 1);
    v13 = (_QWORD *)(v4 + 16 * v12);
    v14 = *v13;
    if (*a2 == *v13)
    {
      result = 1;
LABEL_5:
      *a3 = v13;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v14 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == -8192;
        if (v18)
          v16 = v13;
        v19 = v12 + v17++;
        v12 = v19 & v11;
        v13 = (_QWORD *)(v4 + 16 * (v19 & v11));
        v14 = *v13;
        if (*a2 == *v13)
          goto LABEL_5;
      }
      result = 0;
      if (v16)
        v13 = v16;
      *a3 = v13;
    }
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::OperationParser::parseSuccessors(llvm::SmallVectorImpl<mlir::Block *> &)::$_0>(uint64_t a1)
{
  _anonymous_namespace_::OperationParser *v2;
  uint64_t v3;
  uint64_t v4;
  mlir::Block *v5;
  uint64_t v6;
  mlir::Block *v8;

  v2 = *(_anonymous_namespace_::OperationParser **)a1;
  v8 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = v8;
  v6 = *(unsigned int *)(v4 + 8);
  if (v6 >= *(_DWORD *)(v4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v4 + 16), v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(v4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v4 + 8 * v6) = v5;
  ++*(_DWORD *)(v4 + 8);
  return v3;
}

uint64_t `anonymous namespace'::OperationParser::parseSuccessor(_anonymous_namespace_::OperationParser *this, mlir::Block **a2)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t OCGSize;
  uint64_t *BlockInfoByName;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  __int16 v55;
  __int128 v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  void *__p;
  _QWORD *v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = *((_DWORD *)v3 + 14);
  if (v4 == 7)
  {
    v12 = v3[8];
    v13 = v3[9];
    OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(v3 + 7));
    *(_QWORD *)&v56 = OCGSize;
    v16 = *BlockInfoByName;
    if (!*BlockInfoByName)
    {
      v16 = operator new();
      *(_OWORD *)v16 = 0u;
      *(_OWORD *)(v16 + 16) = 0u;
      *(_QWORD *)(v16 + 32) = v16 + 32;
      *(_QWORD *)(v16 + 40) = v16 + 32;
      *(_QWORD *)(v16 + 56) = 0;
      *(_QWORD *)(v16 + 64) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *BlockInfoByName = v16;
      BlockInfoByName[1] = OCGSize;
      v17 = *((_QWORD *)this + 34) + 24 * *((unsigned int *)this + 70);
      v18 = *(_QWORD *)(v17 - 24);
      v19 = *(_DWORD *)(v17 - 8);
      if (!v19)
        goto LABEL_65;
      v20 = (v19 - 1) & ((v16 >> 4) ^ (v16 >> 9));
      v21 = (uint64_t *)(v18 + 16 * v20);
      v22 = *v21;
      if (*v21 != v16)
      {
        v23 = 0;
        v24 = 1;
        while (v22 != -4096)
        {
          if (v23)
            v25 = 0;
          else
            v25 = v22 == -8192;
          if (v25)
            v23 = v21;
          v26 = v20 + v24++;
          v20 = v26 & (v19 - 1);
          v21 = (uint64_t *)(v18 + 16 * v20);
          v22 = *v21;
          if (*v21 == v16)
            goto LABEL_47;
        }
        if (v23)
          v42 = v23;
        else
          v42 = v21;
        v43 = *(_DWORD *)(v17 - 16);
        if (4 * v43 + 4 < 3 * v19)
        {
          if (v19 + ~v43 - *(_DWORD *)(v17 - 12) > v19 >> 3)
          {
            v36 = *v42;
            ++*(_DWORD *)(v17 - 16);
            if (v36 == -4096)
            {
LABEL_46:
              *v42 = v16;
              v42[1] = OCGSize;
              v16 = *BlockInfoByName;
              goto LABEL_47;
            }
LABEL_45:
            --*(_DWORD *)(v17 - 12);
            goto LABEL_46;
          }
          v53 = v16;
LABEL_67:
          llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v17 - 24, v19);
          v44 = *(_QWORD *)(v17 - 24);
          v45 = *(_DWORD *)(v17 - 8) - 1;
          v46 = v45 & ((v53 >> 4) ^ (v53 >> 9));
          v42 = (uint64_t *)(v44 + 16 * v46);
          v47 = *v42;
          v16 = v53;
          if (*v42 == v53)
          {
LABEL_68:
            ++*(_DWORD *)(v17 - 16);
            if (v53 == -4096)
              goto LABEL_46;
          }
          else
          {
            v48 = 0;
            v49 = 1;
            while (v47 != -4096)
            {
              if (v48)
                v50 = 0;
              else
                v50 = v47 == -8192;
              if (v50)
                v48 = v42;
              v51 = v46 + v49++;
              v46 = v51 & v45;
              v42 = (uint64_t *)(v44 + 16 * (v51 & v45));
              v47 = *v42;
              if (*v42 == v53)
                goto LABEL_68;
            }
            if (v48)
              v42 = v48;
            v52 = *v42;
            ++*(_DWORD *)(v17 - 16);
            if (v52 == -4096)
              goto LABEL_46;
          }
          goto LABEL_45;
        }
LABEL_65:
        v53 = v16;
        v19 *= 2;
        goto LABEL_67;
      }
    }
LABEL_47:
    v37 = *(uint64_t **)(*((_QWORD *)this + 1) + 128);
    if (v37)
    {
      mlir::AsmParserState::addUses(v37, v16, (_BYTE **)&v56, 1);
      v16 = *BlockInfoByName;
    }
    *a2 = (mlir::Block *)v16;
    mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)this + 1) + 8), (uint64_t)&v56);
    v38 = *((_QWORD *)this + 1);
    *(_OWORD *)(v38 + 56) = v56;
    *(_QWORD *)(v38 + 72) = v57;
    return 1;
  }
  if (v4 == 2)
  {
    v5 = v3[9];
    if (!v5 || v5 == 1 && *(_BYTE *)v3[8] == 94)
    {
      v6 = *((_QWORD *)this + 26) + 24 * *((unsigned int *)this + 54);
      if (*(_DWORD *)(v6 - 16))
      {
        v7 = *(uint64_t **)(v6 - 24);
        v8 = *(unsigned int *)(v6 - 8);
        if ((_DWORD)v8)
        {
          v9 = 32 * v8;
          for (i = v7; (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; i += 4)
          {
            v9 -= 32;
            if (!v9)
              return 0;
          }
        }
        else
        {
          i = v7;
        }
        v39 = &v7[4 * v8];
        if (i != v39)
        {
          v40 = *i;
          while (1)
          {
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 1) + 136) + 40))(*(_QWORD *)(*((_QWORD *)this + 1) + 136), v40, i[1]);
            i += 4;
            if (i == v39)
              break;
            while (1)
            {
              v40 = *i;
              if ((unint64_t)*i < 0xFFFFFFFFFFFFFFFELL)
                break;
              i += 4;
              if (i == v39)
                return 0;
            }
            v27 = 0;
            if (i == v39)
              return v27;
          }
        }
      }
    }
    return 0;
  }
  else
  {
    v54 = "expected block name";
    v55 = 259;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v54, &v56);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v56);
    if ((_QWORD)v56)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v56);
    if (v64)
    {
      v28 = __p;
      if (__p)
      {
        v29 = v63;
        v30 = __p;
        if (v63 != __p)
        {
          do
            v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          v30 = __p;
        }
        v63 = v28;
        operator delete(v30);
      }
      v31 = v60;
      if (v60)
      {
        v32 = v61;
        v33 = v60;
        if (v61 != v60)
        {
          do
          {
            v35 = *--v32;
            v34 = v35;
            *v32 = 0;
            if (v35)
              MEMORY[0x20BD002D4](v34, 0x1000C8077774924);
          }
          while (v32 != v31);
          v33 = v60;
        }
        v61 = v31;
        operator delete(v33);
      }
      if (v58 != &v59)
        free(v58);
    }
  }
  return v27;
}

uint64_t `anonymous namespace'::OperationParser::getBlockInfoByName(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  llvm *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  _OWORD *buffer;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  _OWORD *v22;
  void *v23;
  uint64_t v24;
  llvm *v25;
  _OWORD *v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;

  *(_QWORD *)&v32 = a3;
  *((_QWORD *)&v32 + 1) = a4;
  v4 = a1 + 24 * a2;
  v33 = 0;
  v6 = v33;
  if ((v5 & 1) == 0)
  {
    v34 = v33;
    v7 = *(_DWORD *)(v4 - 16);
    v8 = *(unsigned int *)(v4 - 8);
    if (4 * v7 + 4 >= (3 * v8))
    {
      v9 = 2 * v8;
    }
    else
    {
      v9 = *(_DWORD *)(v4 - 8);
      if ((int)v8 + ~v7 - *(_DWORD *)(v4 - 12) > v8 >> 3)
      {
        *(_DWORD *)(v4 - 16) = v7 + 1;
        if (*(_QWORD *)v6 == -1)
        {
LABEL_6:
          *(_OWORD *)v6 = v32;
          *(_QWORD *)(v6 + 16) = 0;
          *(_QWORD *)(v6 + 24) = 0;
          return v6 + 16;
        }
LABEL_5:
        --*(_DWORD *)(v4 - 12);
        goto LABEL_6;
      }
    }
    v11 = *(llvm **)(v4 - 24);
    v12 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
    v13 = v12 | (v12 >> 2) | ((v12 | (v12 >> 2)) >> 4);
    v14 = ((v13 | (v13 >> 8)) >> 16) | v13 | (v13 >> 8);
    if ((v14 + 1) > 0x40)
      v15 = v14 + 1;
    else
      v15 = 64;
    *(_DWORD *)(v4 - 8) = v15;
    buffer = llvm::allocate_buffer(32 * v15, (std::align_val_t)8uLL);
    *(_QWORD *)(v4 - 24) = buffer;
    if (v11)
    {
      *(_QWORD *)(v4 - 16) = 0;
      v17 = *(unsigned int *)(v4 - 8);
      if ((_DWORD)v17)
      {
        v18 = buffer;
        if (((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
          goto LABEL_18;
        v19 = ((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
        v18 = &buffer[2 * (v19 & 0xFFFFFFFFFFFFFFELL)];
        v20 = buffer + 2;
        v21 = v19 & 0xFFFFFFFFFFFFFFELL;
        do
        {
          *(v20 - 2) = xmmword_207A9BBE0;
          *v20 = xmmword_207A9BBE0;
          v20 += 4;
          v21 -= 2;
        }
        while (v21);
        if (v19 != (v19 & 0xFFFFFFFFFFFFFFELL))
        {
LABEL_18:
          v22 = &buffer[2 * v17];
          do
          {
            *v18 = xmmword_207A9BBE0;
            v18 += 2;
          }
          while (v18 != v22);
        }
      }
      v23 = (void *)(32 * v8);
      if ((_DWORD)v8)
      {
        v24 = 32 * v8;
        v25 = v11;
        do
        {
          if (*(_QWORD *)v25 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v35 = 0;
            v26 = v35;
            *v35 = *(_OWORD *)v25;
            v26[1] = *((_OWORD *)v25 + 1);
            ++*(_DWORD *)(v4 - 16);
          }
          v25 = (llvm *)((char *)v25 + 32);
          v24 -= 32;
        }
        while (v24);
      }
      llvm::deallocate_buffer(v11, v23);
    }
    *(_QWORD *)(v4 - 16) = 0;
    v27 = *(unsigned int *)(v4 - 8);
    if ((_DWORD)v27)
    {
      v28 = buffer;
      if (((v27 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
        goto LABEL_36;
      v29 = ((v27 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      v28 = &buffer[2 * (v29 & 0xFFFFFFFFFFFFFFELL)];
      v30 = buffer + 2;
      v31 = v29 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v30 - 2) = xmmword_207A9BBE0;
        *v30 = xmmword_207A9BBE0;
        v30 += 4;
        v31 -= 2;
      }
      while (v31);
      if (v29 != (v29 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_36:
        do
        {
          *v28 = xmmword_207A9BBE0;
          v28 += 2;
        }
        while (v28 != &buffer[2 * v27]);
      }
    }
    v6 = v34;
    ++*(_DWORD *)(v4 - 16);
    if (*(_QWORD *)v6 == -1)
      goto LABEL_6;
    goto LABEL_5;
  }
  return v6 + 16;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,`anonymous namespace'::OperationParser::BlockDefinition,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,`anonymous namespace'::OperationParser::BlockDefinition>>,llvm::StringRef,`anonymous namespace'::OperationParser::BlockDefinition,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,`anonymous namespace'::OperationParser::BlockDefinition>>::LookupBucketFor<llvm::StringRef>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int HashValue;
  unsigned int v9;
  void *v10;
  size_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  const void *v16;
  BOOL v17;
  int v18;
  uint64_t result;
  int v20;
  uint64_t v21;
  const void *v22;
  BOOL v23;
  int v24;
  int v25;
  uint64_t v26;
  const void *v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  int v37;
  uint64_t v38;
  const void *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  BOOL v45;
  int v46;
  void *__s1;

  if (!a2)
  {
    v15 = 0;
    result = 0;
    goto LABEL_80;
  }
  HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(_QWORD **)a3, *(_QWORD *)(a3 + 8));
  v9 = a2 - 1;
  v10 = *(void **)a3;
  v11 = *(_QWORD *)(a3 + 8);
  if (!v11)
  {
    if (v10 == (void *)-2)
    {
      v12 = 0;
      v20 = 1;
      v21 = HashValue & v9;
      v15 = (_QWORD *)(a1 + 32 * v21);
      v22 = (const void *)*v15;
      if (*v15 == -1)
        goto LABEL_21;
LABEL_19:
      if (v22 != (const void *)-2 && v15[1])
      {
LABEL_21:
        while (v22 != (const void *)-1)
        {
          if (v12)
            v23 = 0;
          else
            v23 = v22 == (const void *)-2;
          if (v23)
            v12 = v15;
          v24 = v20 + v21;
          ++v20;
          v21 = v24 & v9;
          v15 = (_QWORD *)(a1 + 32 * v21);
          v22 = (const void *)*v15;
          if (*v15 != -1)
            goto LABEL_19;
        }
        goto LABEL_76;
      }
    }
    else
    {
      if (v10 != (void *)-1)
      {
        v12 = 0;
        v40 = 1;
        v41 = HashValue & v9;
        v15 = (_QWORD *)(a1 + 32 * v41);
        v42 = *v15;
        if (*v15 <= 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_74;
        while (v42 != -1)
        {
          if (v12)
            v45 = 0;
          else
            v45 = v42 == -2;
          if (v45)
            v12 = v15;
          v46 = v40 + v41;
          ++v40;
          v41 = v46 & v9;
          v15 = (_QWORD *)(a1 + 32 * v41);
          v42 = *v15;
          if (*v15 <= 0xFFFFFFFFFFFFFFFDLL)
          {
LABEL_74:
            if (!v15[1])
              goto LABEL_79;
          }
        }
        goto LABEL_76;
      }
      v12 = 0;
      v32 = 1;
      v33 = HashValue & v9;
      v15 = (_QWORD *)(a1 + 32 * v33);
      v34 = *v15;
      if (*v15 == -2)
        goto LABEL_46;
LABEL_44:
      if (v34 != -1 && v15[1])
      {
LABEL_46:
        while (v34 != -1)
        {
          if (v12)
            v35 = 0;
          else
            v35 = v34 == -2;
          if (v35)
            v12 = v15;
          v36 = v32 + v33;
          ++v32;
          v33 = v36 & v9;
          v15 = (_QWORD *)(a1 + 32 * v33);
          v34 = *v15;
          if (*v15 != -2)
            goto LABEL_44;
        }
        goto LABEL_76;
      }
    }
    goto LABEL_79;
  }
  if (v10 != (void *)-2)
  {
    if (v10 != (void *)-1)
    {
      __s1 = v10;
      v12 = 0;
      v37 = 1;
      v38 = HashValue & v9;
      v15 = (_QWORD *)(a1 + 32 * v38);
      v39 = (const void *)*v15;
      if (*v15 <= 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_64;
      while (v39 != (const void *)-1)
      {
        if (v12)
          v43 = 0;
        else
          v43 = v39 == (const void *)-2;
        if (v43)
          v12 = v15;
        v44 = v37 + v38;
        ++v37;
        v38 = v44 & v9;
        v15 = (_QWORD *)(a1 + 32 * v38);
        v39 = (const void *)*v15;
        if (*v15 <= 0xFFFFFFFFFFFFFFFDLL)
        {
LABEL_64:
          if (v11 == v15[1] && !memcmp(__s1, v39, v11))
            goto LABEL_79;
        }
      }
      goto LABEL_76;
    }
    v12 = 0;
    v25 = 1;
    v26 = HashValue & v9;
    v15 = (_QWORD *)(a1 + 32 * v26);
    v27 = (const void *)*v15;
    if (*v15 == -2)
      goto LABEL_34;
LABEL_31:
    if (v27 != (const void *)-1)
    {
      if (v11 != v15[1] || (v28 = v25, v29 = memcmp((const void *)0xFFFFFFFFFFFFFFFFLL, v27, v11), v25 = v28, v29))
      {
LABEL_34:
        while (v27 != (const void *)-1)
        {
          if (v12)
            v30 = 0;
          else
            v30 = v27 == (const void *)-2;
          if (v30)
            v12 = v15;
          v31 = v25 + v26;
          ++v25;
          v26 = v31 & v9;
          v15 = (_QWORD *)(a1 + 32 * v26);
          v27 = (const void *)*v15;
          if (*v15 != -2)
            goto LABEL_31;
        }
        goto LABEL_76;
      }
    }
LABEL_79:
    result = 1;
    goto LABEL_80;
  }
  v12 = 0;
  v13 = 1;
  v14 = HashValue & v9;
  v15 = (_QWORD *)(a1 + 32 * v14);
  v16 = (const void *)*v15;
  if (*v15 == -1)
    goto LABEL_8;
LABEL_5:
  if (v16 == (const void *)-2 || v11 == v15[1] && !memcmp((const void *)0xFFFFFFFFFFFFFFFELL, v16, v11))
    goto LABEL_79;
LABEL_8:
  while (v16 != (const void *)-1)
  {
    if (v12)
      v17 = 0;
    else
      v17 = v16 == (const void *)-2;
    if (v17)
      v12 = v15;
    v18 = v13 + v14;
    ++v13;
    v14 = v18 & v9;
    v15 = (_QWORD *)(a1 + 32 * v14);
    v16 = (const void *)*v15;
    if (*v15 != -1)
      goto LABEL_5;
  }
LABEL_76:
  result = 0;
  if (v12)
    v15 = v12;
LABEL_80:
  *a4 = v15;
  return result;
}

_QWORD *llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  llvm *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_39;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = result + 2;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_39:
        do
        {
          *v10 = -4096;
          v10 += 2;
        }
        while (v10 != &result[2 * v11]);
      }
    }
    if ((_DWORD)v3)
    {
      v15 = 0;
      v16 = v11 - 1;
      v17 = v4;
      do
      {
        v24 = *(_QWORD *)v17;
        if ((*(_QWORD *)v17 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = ((v24 >> 4) ^ (v24 >> 9)) & v16;
          v23 = (_QWORD *)(*(_QWORD *)a1 + 16 * v25);
          v26 = *v23;
          if (v24 != *v23)
          {
            v27 = 0;
            v28 = 1;
            while (v26 != -4096)
            {
              if (v27)
                v29 = 0;
              else
                v29 = v26 == -8192;
              if (v29)
                v27 = v23;
              v30 = v25 + v28++;
              v25 = v30 & v16;
              v23 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v30 & v16));
              v26 = *v23;
              if (v24 == *v23)
                goto LABEL_23;
            }
            if (v27)
              v23 = v27;
          }
LABEL_23:
          *v23 = v24;
          v23[1] = *((_QWORD *)v17 + 1);
          *(_DWORD *)(a1 + 8) = ++v15;
        }
        v17 = (llvm *)((char *)v17 + 16);
      }
      while (v17 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    if (((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_18;
    v19 = ((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
    v20 = result + 2;
    v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v20 - 2) = -4096;
      *v20 = -4096;
      v20 += 4;
      v21 -= 2;
    }
    while (v21);
    if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      v22 = &result[2 * v18];
      do
      {
        *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v22);
    }
  }
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::growAndEmplaceBack<mlir::Region*>(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  mlir::Region *v23;
  int v24;
  unsigned int v25;
  unint64_t v27;

  v27 = 0;
  v4 = (char *)(a1 + 16);
  v5 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 8, &v27);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = 8 * v6;
  *(_QWORD *)&v5[8 * v6] = *a2;
  v8 = *(char **)a1;
  v9 = *(char **)a1;
  if (!(_DWORD)v6)
    goto LABEL_19;
  v10 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v10 < 0xB)
  {
    v11 = v5;
LABEL_12:
    v20 = &v8[v7];
    do
    {
      v21 = *(_QWORD *)v9;
      *(_QWORD *)v9 = 0;
      v9 += 8;
      *(_QWORD *)v11 = v21;
      v11 += 8;
    }
    while (v9 != v20);
    goto LABEL_14;
  }
  v12 = v8 >= &v5[v7] || v5 >= &v8[v7];
  v11 = v5;
  if (!v12)
    goto LABEL_12;
  v13 = v10 + 1;
  v14 = 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
  v11 = &v5[v14];
  v9 = &v8[v14];
  v15 = (__int128 *)(v8 + 16);
  v16 = v5 + 16;
  v17 = v13 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v18 = *(v15 - 1);
    v19 = *v15;
    *(v15 - 1) = 0uLL;
    *v15 = 0uLL;
    *(v16 - 1) = v18;
    *v16 = v19;
    v15 += 2;
    v16 += 2;
    v17 -= 4;
  }
  while (v17);
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_12;
LABEL_14:
  v22 = *(_QWORD *)a1 - 8;
  do
  {
    v23 = *(mlir::Region **)(v22 + v7);
    *(_QWORD *)(v22 + v7) = 0;
    if (v23)
    {
      mlir::Region::~Region(v23);
      MEMORY[0x20BD002F8]();
    }
    v7 -= 8;
  }
  while (v7);
  v9 = *(char **)a1;
LABEL_19:
  v24 = v27;
  if (v9 != v4)
    free(v9);
  *(_QWORD *)a1 = v5;
  v25 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v25;
  *(_DWORD *)(a1 + 12) = v24;
  return (uint64_t)&v5[8 * v25 - 8];
}

uint64_t `anonymous namespace'::OperationParser::parseBlock(_anonymous_namespace_::OperationParser *this, mlir::Block **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *OCGSize;
  uint64_t v7;
  const void **v8;
  uint64_t v9;
  uint64_t *BlockInfoByName;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  mlir::Block *v21;
  uint64_t *v22;
  char *v23;
  int v24;
  uint64_t v26;
  int v27;
  int v30;
  int v31;
  uint64_t EncodedSourceLocation;
  const void ***v33;
  char *v34;
  char *v35;
  __int128 v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int64_t v46;
  _QWORD v47[4];
  __int16 v48;
  const void **v49;
  const char *v50;
  uint64_t v51;
  __int16 v52;
  BOOL v53;
  const char *v54;
  _QWORD v55[2];
  void *v56;
  unsigned int v57;
  unsigned int v58;
  _BYTE v59[96];
  void *v60;
  _QWORD *v61;
  void *__p;
  _QWORD *v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t)*a2;
  v5 = *((_QWORD *)this + 1);
  if (*a2 && *(_DWORD *)(v5 + 56) != 7)
  {
    *((_QWORD *)this + 50) = v4;
    *((_QWORD *)this + 51) = v4 + 32;
    while (1)
    {
      v27 = *(_DWORD *)(*((_QWORD *)this + 1) + 56);
      if (v27 == 7 || v27 == 27)
        break;
        return 0;
    }
    return 1;
  }
  OCGSize = (char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(v5 + 56));
  v7 = *((_QWORD *)this + 1);
  v8 = *(const void ***)(v7 + 64);
  v9 = *(_QWORD *)(v7 + 72);
  v54 = "expected block name";
  LOWORD(v57) = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 7, (uint64_t)&v54))
    return 0;
  v11 = BlockInfoByName;
  BlockInfoByName[1] = (uint64_t)OCGSize;
  v12 = *BlockInfoByName;
  if (!*BlockInfoByName)
  {
    v20 = (uint64_t)*a2;
    if (*a2)
    {
      v21 = 0;
      *BlockInfoByName = v20;
      v22 = *(uint64_t **)(*((_QWORD *)this + 1) + 128);
      if (!v22)
        goto LABEL_9;
    }
    else
    {
      v20 = operator new();
      *(_OWORD *)v20 = 0u;
      *(_OWORD *)(v20 + 16) = 0u;
      *(_QWORD *)(v20 + 32) = v20 + 32;
      *(_QWORD *)(v20 + 40) = v20 + 32;
      *(_QWORD *)(v20 + 56) = 0;
      *(_QWORD *)(v20 + 64) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      v21 = (mlir::Block *)v20;
      *v11 = v20;
      v22 = *(uint64_t **)(*((_QWORD *)this + 1) + 128);
      if (!v22)
      {
LABEL_9:
        *a2 = (mlir::Block *)v20;
        if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) != 21
          || (v49 = (const void **)v20,
              v53 = ((*(_QWORD *)(v20 + 56) - *(_QWORD *)(v20 + 48)) & 0x7FFFFFFF8) != 0,
              LODWORD(v47[0]) = 0,
              v54 = (const char *)this,
              v55[0] = &v53,
              v55[1] = v47,
              v56 = &v49,
        {
          v54 = "expected ':' after block name";
          LOWORD(v57) = 259;
          if (mlir::detail::Parser::parseToken((uint64_t)this, 15, (uint64_t)&v54))
          {
            v23 = (char *)*a2 + 32;
            *((_QWORD *)this + 50) = *a2;
            *((_QWORD *)this + 51) = v23;
            do
            {
              v24 = *(_DWORD *)(*((_QWORD *)this + 1) + 56);
              if (v24 == 7 || v24 == 27)
                return 1;
            }
          }
        }
        if (v21)
        {
          mlir::Block::dropAllDefinedValueUses(v21);
          mlir::Block::~Block(v21);
          MEMORY[0x20BD002F8]();
          return 0;
        }
        return 0;
      }
    }
LABEL_8:
    mlir::AsmParserState::addDefinition(v22, v20, OCGSize);
    v20 = *v11;
    goto LABEL_9;
  }
  v13 = *((_QWORD *)this + 34) + 24 * *((unsigned int *)this + 70);
  v14 = *(_DWORD *)(v13 - 8);
  if (v14)
  {
    v15 = *(_QWORD *)(v13 - 24);
    v16 = v14 - 1;
    LODWORD(v17) = (v14 - 1) & ((v12 >> 4) ^ (v12 >> 9));
    v18 = (uint64_t *)(v15 + 16 * v17);
    v19 = *v18;
    if (*v18 == v12)
    {
LABEL_7:
      *v18 = -8192;
      *(int32x2_t *)(v13 - 16) = vadd_s32(*(int32x2_t *)(v13 - 16), (int32x2_t)0x1FFFFFFFFLL);
      v20 = *BlockInfoByName;
      v21 = (mlir::Block *)*BlockInfoByName;
      v22 = *(uint64_t **)(*((_QWORD *)this + 1) + 128);
      if (!v22)
        goto LABEL_9;
      goto LABEL_8;
    }
    v30 = 1;
    while (v19 != -4096)
    {
      v31 = v17 + v30++;
      v17 = v31 & v16;
      v19 = *(_QWORD *)(v15 + 16 * v17);
      if (v19 == v12)
      {
        v18 = (uint64_t *)(v15 + 16 * v17);
        goto LABEL_7;
      }
    }
  }
  v47[0] = "redefinition of block '";
  v48 = 259;
  EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*((_QWORD *)this + 1) + 8, OCGSize);
  mlir::emitError(EncodedSourceLocation, (uint64_t)v47, (uint64_t)&v54);
  if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 1)
    mlir::InFlightDiagnostic::abandon(&v54);
  if (v54)
  {
    v52 = 261;
    v49 = v8;
    v50 = (const char *)v9;
    mlir::Diagnostic::operator<<((uint64_t)v55, &v49);
    if (v54)
    {
      LODWORD(v49) = 3;
      v50 = "'";
      v51 = 1;
      v33 = &v49;
      v34 = (char *)v56;
      if (v57 >= v58)
      {
        v45 = v57 + 1;
        if (v56 <= &v49 && (char *)v56 + 24 * v57 > (char *)&v49)
        {
          v46 = (char *)&v49 - (_BYTE *)v56;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
          v34 = (char *)v56;
          v33 = (const void ***)((char *)v56 + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
          v33 = &v49;
          v34 = (char *)v56;
        }
      }
      v35 = &v34[24 * v57];
      v36 = *(_OWORD *)v33;
      *((_QWORD *)v35 + 2) = v33[2];
      *(_OWORD *)v35 = v36;
      ++v57;
    }
  }
  v26 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v54);
  if (v54)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v54);
  if (v64)
  {
    v37 = __p;
    if (__p)
    {
      v38 = v63;
      v39 = __p;
      if (v63 != __p)
      {
        do
          v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
        while (v38 != v37);
        v39 = __p;
      }
      v63 = v37;
      operator delete(v39);
    }
    v40 = v60;
    if (v60)
    {
      v41 = v61;
      v42 = v60;
      if (v61 != v60)
      {
        do
        {
          v44 = *--v41;
          v43 = v44;
          *v41 = 0;
          if (v44)
            MEMORY[0x20BD002D4](v43, 0x1000C8077774924);
        }
        while (v41 != v40);
        v42 = v60;
      }
      v61 = v40;
      operator delete(v42);
    }
    if (v56 != v59)
      free(v56);
  }
  return v26;
}

void `anonymous namespace'::OperationParser::popSSANameScope(_anonymous_namespace_::OperationParser *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 34) + 24 * *((unsigned int *)this + 70);
  *(_QWORD *)(v1 - 24) = 0;
  *(_QWORD *)(v1 - 16) = 0;
  *(_DWORD *)(v1 - 8) = 0;
  LODWORD(v1) = *((_DWORD *)this + 70) - 1;
  *((_DWORD *)this + 70) = v1;
  v2 = *((_QWORD *)this + 34) + 24 * v1;
  llvm::deallocate_buffer(*(llvm **)v2, (void *)(16 * *(unsigned int *)(v2 + 16)));
}

uint64_t sub_2072219B4()
{
  uint64_t v0;

  return v0;
}

uint64_t llvm::StringMap<llvm::SmallVector<`anonymous namespace'::OperationParser::ValueDefinition,1u>,llvm::MallocAllocator>::operator[](uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *buffer;
  const unsigned __int8 **v12;
  char *v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v7 = *(_QWORD *)a1;
  v8 = v6;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v6);
  if (v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v9)
  {
    return v9 + 8;
  }
  buffer = llvm::allocate_buffer((size_t)(a3 + 41), (std::align_val_t)8uLL);
  v12 = (const unsigned __int8 **)buffer;
  v13 = (char *)(buffer + 5);
  if (a3)
    memcpy(buffer + 5, a2, (size_t)a3);
  a3[(_QWORD)v13] = 0;
  *v12 = a3;
  v12[1] = (const unsigned __int8 *)(v12 + 3);
  v12[2] = (const unsigned __int8 *)0x100000000;
  *(_QWORD *)(v7 + 8 * v8) = v12;
  ++*(_DWORD *)(a1 + 12);
  v14 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  v9 = *v14;
  if (*v14)
    v15 = v9 == -8;
  else
    v15 = 1;
  if (v15)
  {
    do
    {
      v16 = v14[1];
      ++v14;
      v9 = v16;
      if (v16)
        v17 = v9 == -8;
      else
        v17 = 1;
    }
    while (v17);
  }
  return v9 + 8;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::OperationParser::parseOptionalBlockArgList(mlir::Block *)::$_0>(uint64_t a1)
{
  mlir::detail::Parser *v1;
  _BYTE *v2;
  _DWORD *v3;
  _QWORD **v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t EncodedSourceLocation;
  uint64_t v21;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  void *v31;
  _QWORD v32[4];
  __int16 v33;
  const char *v34;
  __int128 v35;
  void *v36;
  __int16 v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  void *__p;
  _QWORD *v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v1 = *(mlir::detail::Parser **)a1;
  v2 = *(_BYTE **)(a1 + 8);
  v3 = *(_DWORD **)(a1 + 16);
  v4 = *(_QWORD ***)(a1 + 24);
  v29 = 0;
  v30 = 0uLL;
    return 0;
  v34 = "expected ':' and type for SSA operand";
  v37 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)v1, 15, (uint64_t)&v34))
    return 0;
  v5 = mlir::detail::Parser::parseType(v1);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = v29;
  if (!*v2)
  {
    EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*((_QWORD *)v1 + 1) + 8, v29);
    v10 = (uint64_t)mlir::Block::addArgument(*v4, v6, EncodedSourceLocation);
LABEL_22:
    {
      v21 = *(_QWORD *)(*((_QWORD *)v1 + 1) + 128);
      if (v21)
        mlir::AsmParserState::addDefinition(v21, v10, v7);
      v34 = v7;
      v35 = v30;
      v36 = v31;
    }
    return 0;
  }
  v8 = *v3;
  v9 = (*v4)[6];
  if (v8 < ((unint64_t)((*v4)[7] - v9) >> 3))
  {
    *v3 = v8 + 1;
    v10 = *(_QWORD *)(v9 + 8 * v8);
    if ((*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8) != v5)
    {
      v32[0] = "argument and block argument type mismatch";
      v33 = 259;
      mlir::detail::Parser::emitError((uint64_t)v1, (uint64_t)v32, &v34);
      v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v34);
      if (v34)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v34);
      if (v43)
      {
        v12 = __p;
        if (__p)
        {
          v13 = v42;
          v14 = __p;
          if (v42 != __p)
          {
            do
              v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            v14 = __p;
          }
          v42 = v12;
          operator delete(v14);
        }
        v15 = v39;
        if (!v39)
          goto LABEL_44;
        v16 = v40;
        v17 = v39;
        if (v40 == v39)
        {
LABEL_43:
          v40 = v15;
          operator delete(v17);
LABEL_44:
          if (v36 != &v38)
            free(v36);
          return v11;
        }
        do
        {
          v19 = *--v16;
          v18 = v19;
          *v16 = 0;
          if (v19)
            MEMORY[0x20BD002D4](v18, 0x1000C8077774924);
        }
        while (v16 != v15);
LABEL_42:
        v17 = v39;
        goto LABEL_43;
      }
      return v11;
    }
    goto LABEL_22;
  }
  v32[0] = "too many arguments specified in argument list";
  v33 = 259;
  mlir::detail::Parser::emitError((uint64_t)v1, (uint64_t)v32, &v34);
  v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v34);
  if (v34)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v34);
  if (v43)
  {
    v23 = __p;
    if (__p)
    {
      v24 = v42;
      v25 = __p;
      if (v42 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p;
      }
      v42 = v23;
      operator delete(v25);
    }
    v15 = v39;
    if (!v39)
      goto LABEL_44;
    v26 = v40;
    v17 = v39;
    if (v40 == v39)
      goto LABEL_43;
    do
    {
      v28 = *--v26;
      v27 = v28;
      *v26 = 0;
      if (v28)
        MEMORY[0x20BD002D4](v27, 0x1000C8077774924);
    }
    while (v26 != v15);
    goto LABEL_42;
  }
  return v11;
}

uint64_t llvm::array_pod_sort_comparator<std::pair<char const*,mlir::Block *>>(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  unint64_t v4;

  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  if (*a2 < *a1)
    return 1;
  v3 = a1[1];
  v4 = a2[1];
  if (v3 < v4)
    return 0xFFFFFFFFLL;
  return v4 < v3;
}

uint64_t mlir::Diagnostic::append<char const(&)[43],mlir::Type &,char const(&)[5],mlir::Type>(uint64_t a1, char *__s, uint64_t *a3, char *a4, uint64_t *a5)
{
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v18;
  BOOL v19;
  char *v20;
  int v21;
  char *v22;
  size_t v23;

  v10 = strlen(__s);
  v11 = a1 + 16;
  v12 = *(_QWORD *)(a1 + 16);
  v21 = 3;
  v22 = __s;
  v23 = v10;
  v13 = *(unsigned int *)(a1 + 24);
  v14 = &v21;
  if (v13 >= *(_DWORD *)(a1 + 28))
  {
    v18 = v13 + 1;
    v19 = v12 + 24 * v13 > (unint64_t)&v21;
    if (v12 <= (unint64_t)&v21 && v19)
    {
      v20 = (char *)&v21 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v18, 24);
      v12 = *(_QWORD *)(a1 + 16);
      v14 = (int *)&v20[v12];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v18, 24);
      v12 = *(_QWORD *)(a1 + 16);
      v14 = &v21;
    }
  }
  v15 = v12 + 24 * *(unsigned int *)(a1 + 24);
  v16 = *(_OWORD *)v14;
  *(_QWORD *)(v15 + 16) = *((_QWORD *)v14 + 2);
  *(_OWORD *)v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<mlir::Type &,char const(&)[5],mlir::Type>(a1, a3, a4, a5);
}

uint64_t mlir::Diagnostic::append<mlir::Type &,char const(&)[5],mlir::Type>(uint64_t a1, uint64_t *a2, char *a3, uint64_t *a4)
{
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v14;
  BOOL v15;
  _BYTE *v16;
  _BYTE v17[24];

  v7 = v17;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v17, *a2);
  v8 = a1 + 16;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(unsigned int *)(a1 + 24);
  if (v10 >= *(_DWORD *)(a1 + 28))
  {
    v14 = v10 + 1;
    v15 = v9 + 24 * v10 > (unint64_t)v17;
    if (v9 <= (unint64_t)v17 && v15)
    {
      v16 = &v17[-v9];
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 32), v14, 24);
      v9 = *(_QWORD *)(a1 + 16);
      v7 = &v16[v9];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 32), v14, 24);
      v9 = *(_QWORD *)(a1 + 16);
      v7 = v17;
    }
  }
  v11 = v9 + 24 * *(unsigned int *)(a1 + 24);
  v12 = *(_OWORD *)v7;
  *(_QWORD *)(v11 + 16) = *((_QWORD *)v7 + 2);
  *(_OWORD *)v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[5],mlir::Type>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<char const(&)[5],mlir::Type>(uint64_t a1, char *__s, uint64_t *a3)
{
  size_t v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  BOOL v22;
  char *v23;
  char *v24;
  int v25;
  char *v26;
  size_t v27;

  v6 = strlen(__s);
  v7 = *(_QWORD *)(a1 + 16);
  v25 = 3;
  v26 = __s;
  v27 = v6;
  v8 = *(unsigned int *)(a1 + 24);
  v9 = &v25;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    v19 = v8 + 1;
    v20 = v7 + 24 * v8 > (unint64_t)&v25;
    if (v7 <= (unint64_t)&v25 && v20)
    {
      v23 = (char *)&v25 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      v7 = *(_QWORD *)(a1 + 16);
      v9 = (int *)&v23[v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      v7 = *(_QWORD *)(a1 + 16);
      v9 = &v25;
    }
  }
  v10 = v7 + 24 * *(unsigned int *)(a1 + 24);
  v11 = *(_OWORD *)v9;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
  *(_OWORD *)v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  v12 = *a3;
  v13 = &v25;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v25, v12);
  v14 = *(unsigned int *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 16);
  if (v14 >= *(_DWORD *)(a1 + 28))
  {
    v21 = v14 + 1;
    v22 = v15 + 24 * v14 > (unint64_t)&v25;
    if (v15 <= (unint64_t)&v25 && v22)
    {
      v24 = (char *)&v25 - v15;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v21, 24);
      v15 = *(_QWORD *)(a1 + 16);
      v13 = (int *)&v24[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v21, 24);
      v15 = *(_QWORD *)(a1 + 16);
      v13 = &v25;
    }
  }
  v16 = v15 + 24 * *(unsigned int *)(a1 + 24);
  v17 = *(_OWORD *)v13;
  *(_QWORD *)(v16 + 16) = *((_QWORD *)v13 + 2);
  *(_OWORD *)v16 = v17;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t *v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = result + 2;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[2 * v11];
        do
        {
          *v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    v16 = (void *)(16 * v3);
    if ((_DWORD)v3)
    {
      v17 = 16 * v3;
      v18 = (unint64_t *)v4;
      do
      {
        if ((*v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, v18, &v25);
          v19 = v25;
          *v25 = *v18;
          v19[1] = v18[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v18 += 2;
        v17 -= 16;
      }
      while (v17);
    }
    llvm::deallocate_buffer(v4, v16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v20)
  {
    if (((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_23;
    v21 = ((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v21 & 0x1FFFFFFFFFFFFFFELL)];
    v22 = result + 2;
    v23 = v21 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v22 - 2) = -4096;
      *v22 = -4096;
      v22 += 4;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_23:
      v24 = &result[2 * v20];
      do
      {
        *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v24);
    }
  }
  return result;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::CustomOpAsmParser::parseOperandList(llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::AsmParser::Delimiter,BOOL,int)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  unsigned int v7;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _OWORD v14[2];

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    memset(v14, 0, sizeof(v14));
    v9 = v4 + 1;
    v10 = *(_QWORD *)v3 + 32 * v4 > (unint64_t)v14;
    if (*(_QWORD *)v3 <= (unint64_t)v14 && v10)
    {
      v13 = (char *)v14 - *(_QWORD *)v3;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v9, 32);
      v11 = *(_QWORD *)v3;
      v12 = &v13[*(_QWORD *)v3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v9, 32);
      v11 = *(_QWORD *)v3;
      v12 = (char *)v14;
    }
    v5 = (_OWORD *)(v11 + 32 * *(unsigned int *)(v3 + 8));
    v6 = *(_OWORD *)v12;
    v5[1] = *((_OWORD *)v12 + 1);
  }
  else
  {
    v5 = (_OWORD *)(*(_QWORD *)v3 + 32 * v4);
    v6 = 0uLL;
    v5[1] = 0u;
  }
  *v5 = v6;
  v7 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 672))(v2, *(_QWORD *)v3 + 32 * v7 - 32, *(unsigned __int8 *)a1[2]);
}

uint64_t llvm::function_ref<mlir::ParseResult ()(BOOL)>::callback_fn<`anonymous namespace'::CustomOpAsmParser::parseAffineMapOfSSAIds(llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::Attribute &,llvm::StringRef,mlir::NamedAttrList &,mlir::AsmParser::Delimiter)::{lambda(BOOL)#1}>(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  char *v10;
  _OWORD *v11;
  __int128 v12;
  unint64_t v13;
  BOOL v14;
  char *v15;
  _QWORD v16[4];

  v4 = *a1;
  memset(v16, 0, 24);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v4 + 672))(v4, v16, 1))
    return 0;
  if (a2)
    v5 = a1[1];
  else
    v5 = a1[2];
  v8 = (_DWORD *)(v5 + 8);
  v7 = *(unsigned int *)(v5 + 8);
  v9 = *(_QWORD *)v5;
  v10 = (char *)v16;
  if (v7 >= *(_DWORD *)(v5 + 12))
  {
    v13 = v7 + 1;
    v14 = v9 + 32 * v7 > (unint64_t)v16;
    if (v9 <= (unint64_t)v16 && v14)
    {
      v15 = (char *)v16 - v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v13, 32);
      v9 = *(_QWORD *)v5;
      v10 = &v15[*(_QWORD *)v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v13, 32);
      v9 = *(_QWORD *)v5;
      v10 = (char *)v16;
    }
  }
  v11 = (_OWORD *)(v9 + 32 * *v8);
  v12 = *((_OWORD *)v10 + 1);
  *v11 = *(_OWORD *)v10;
  v11[1] = v12;
  ++*v8;
  return 1;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(BOOL)>::callback_fn<`anonymous namespace'::CustomOpAsmParser::parseAffineExprOfSSAIds(llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::AffineExpr &)::{lambda(BOOL)#1}>(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  char *v10;
  _OWORD *v11;
  __int128 v12;
  unint64_t v13;
  BOOL v14;
  char *v15;
  _QWORD v16[4];

  v4 = *a1;
  memset(v16, 0, 24);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v4 + 672))(v4, v16, 1))
    return 0;
  if (a2)
    v5 = a1[1];
  else
    v5 = a1[2];
  v8 = (_DWORD *)(v5 + 8);
  v7 = *(unsigned int *)(v5 + 8);
  v9 = *(_QWORD *)v5;
  v10 = (char *)v16;
  if (v7 >= *(_DWORD *)(v5 + 12))
  {
    v13 = v7 + 1;
    v14 = v9 + 32 * v7 > (unint64_t)v16;
    if (v9 <= (unint64_t)v16 && v14)
    {
      v15 = (char *)v16 - v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v13, 32);
      v9 = *(_QWORD *)v5;
      v10 = &v15[*(_QWORD *)v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v13, 32);
      v9 = *(_QWORD *)v5;
      v10 = (char *)v16;
    }
  }
  v11 = (_OWORD *)(v9 + 32 * *v8);
  v12 = *((_OWORD *)v10 + 1);
  *v11 = *(_OWORD *)v10;
  v11[1] = v12;
  ++*v8;
  return 1;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::CustomOpAsmParser::parseArgumentList(llvm::SmallVectorImpl<mlir::OpAsmParser::Argument> &,mlir::AsmParser::Delimiter,BOOL,BOOL)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  unsigned int v6;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  char *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  _OWORD v17[4];

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    memset(v17, 0, sizeof(v17));
    v8 = v4 + 1;
    v9 = *(_QWORD *)v3 + (v4 << 6) > (unint64_t)v17;
    if (*(_QWORD *)v3 <= (unint64_t)v17 && v9)
    {
      v16 = (char *)v17 - *(_QWORD *)v3;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v8, 64);
      v10 = *(_QWORD *)v3;
      v11 = &v16[*(_QWORD *)v3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v8, 64);
      v10 = *(_QWORD *)v3;
      v11 = (char *)v17;
    }
    v12 = (_OWORD *)(v10 + ((unint64_t)*(unsigned int *)(v3 + 8) << 6));
    v13 = *(_OWORD *)v11;
    v14 = *((_OWORD *)v11 + 1);
    v15 = *((_OWORD *)v11 + 3);
    v12[2] = *((_OWORD *)v11 + 2);
    v12[3] = v15;
    *v12 = v13;
    v12[1] = v14;
  }
  else
  {
    v5 = (_OWORD *)(*(_QWORD *)v3 + (v4 << 6));
    v5[2] = 0u;
    v5[3] = 0u;
    *v5 = 0u;
    v5[1] = 0u;
  }
  v6 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v6;
  return (*(uint64_t (**)(uint64_t, unint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 720))(v2, *(_QWORD *)v3 + ((unint64_t)v6 << 6) - 64, *(unsigned __int8 *)a1[2], *(unsigned __int8 *)a1[3]);
}

BOOL llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::CustomOpAsmParser::parseOptionalAssignmentList(llvm::SmallVectorImpl<mlir::OpAsmParser::Argument> &,llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  unsigned int v11;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v13 = v4 + 1;
    v14 = *(_QWORD *)v3 + (v4 << 6) > (unint64_t)&v27;
    if (*(_QWORD *)v3 <= (unint64_t)&v27 && v14)
    {
      v25 = (char *)&v27 - *(_QWORD *)v3;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v13, 64);
      v15 = *(_QWORD *)v3;
      v16 = &v25[*(_QWORD *)v3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v13, 64);
      v15 = *(_QWORD *)v3;
      v16 = (char *)&v27;
    }
    v17 = (_OWORD *)(v15 + ((unint64_t)*(unsigned int *)(v3 + 8) << 6));
    v18 = *(_OWORD *)v16;
    v19 = *((_OWORD *)v16 + 1);
    v20 = *((_OWORD *)v16 + 3);
    v17[2] = *((_OWORD *)v16 + 2);
    v17[3] = v20;
    *v17 = v18;
    v17[1] = v19;
  }
  else
  {
    v5 = (_OWORD *)(*(_QWORD *)v3 + (v4 << 6));
    v5[2] = 0u;
    v5[3] = 0u;
    *v5 = 0u;
    v5[1] = 0u;
  }
  v6 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v6;
  if (!(*(unsigned __int8 (**)(uint64_t, unint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 720))(v2, *(_QWORD *)v3 + ((unint64_t)v6 << 6) - 64, 0, 0)|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2))
  {
    return 0;
  }
  v7 = a1[2];
  v8 = *(unsigned int *)(v7 + 8);
  if (v8 >= *(_DWORD *)(v7 + 12))
  {
    v27 = 0u;
    v28 = 0u;
    v21 = v8 + 1;
    v22 = *(_QWORD *)v7 + 32 * v8 > (unint64_t)&v27;
    if (*(_QWORD *)v7 <= (unint64_t)&v27 && v22)
    {
      v26 = (char *)&v27 - *(_QWORD *)v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v21, 32);
      v23 = *(_QWORD *)v7;
      v24 = &v26[*(_QWORD *)v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v21, 32);
      v23 = *(_QWORD *)v7;
      v24 = (char *)&v27;
    }
    v9 = (_OWORD *)(v23 + 32 * *(unsigned int *)(v7 + 8));
    v10 = *(_OWORD *)v24;
    v9[1] = *((_OWORD *)v24 + 1);
  }
  else
  {
    v9 = (_OWORD *)(*(_QWORD *)v7 + 32 * v8);
    v10 = 0uLL;
    v9[1] = 0u;
  }
  *v9 = v10;
  v11 = *(_DWORD *)(v7 + 8) + 1;
  *(_DWORD *)(v7 + 8) = v11;
  return (*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 672))(v2, *(_QWORD *)v7 + 32 * v11 - 32, 1) != 0;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<`anonymous namespace'::OperationParser::parseCustomOperation(llvm::ArrayRef<std::tuple<llvm::StringRef,unsigned int,llvm::SMLoc>>)::$_2>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const void ***v5;
  char *v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  const void ***v10;
  char *v11;
  char *v12;
  __int128 v13;
  const void **AttrData;
  const char *v15;
  uint64_t v16;
  const void ***v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  void *v22;
  _BYTE *v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  const char *v42;
  __int16 v43;
  const void **v44;
  const char *v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  void *v51;
  unsigned int v52;
  unsigned int v53;
  _BYTE v54[96];
  void *v55[2];
  uint64_t v56;
  void *__p[2];
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v4 = **a1;
  v42 = "invalid properties ";
  v43 = 259;
  mlir::emitError(v4, (uint64_t)&v42, (uint64_t)&v48);
  if (v48)
  {
    v5 = &v44;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, *a1[1]);
    v6 = (char *)v51;
    if (v52 >= v53)
    {
      v35 = v52 + 1;
      if (v51 <= &v44 && (char *)v51 + 24 * v52 > (char *)&v44)
      {
        v39 = (char *)&v44 - (_BYTE *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        v6 = (char *)v51;
        v5 = (const void ***)((char *)v51 + v39);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        v5 = &v44;
        v6 = (char *)v51;
      }
    }
    v7 = &v6[24 * v52];
    v8 = *(_OWORD *)v5;
    *((_QWORD *)v7 + 2) = v5[2];
    *(_OWORD *)v7 = v8;
    v9 = ++v52;
    if (v48)
    {
      LODWORD(v44) = 3;
      v45 = " for op ";
      v46 = 8;
      v10 = &v44;
      v11 = (char *)v51;
      if (v9 >= v53)
      {
        v36 = v9 + 1;
        v37 = (char *)v51 + 24 * v9 > (char *)&v44;
        if (v51 <= &v44 && v37)
        {
          v40 = (char *)&v44 - (_BYTE *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          v11 = (char *)v51;
          v10 = (const void ***)((char *)v51 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          v10 = &v44;
          v11 = (char *)v51;
        }
      }
      v12 = &v11[24 * v52];
      v13 = *(_OWORD *)v10;
      *((_QWORD *)v12 + 2) = v10[2];
      *(_OWORD *)v12 = v13;
      ++v52;
    }
  }
  v44 = *(const void ***)(*(_QWORD *)(*a1[2] + 48) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v44);
  v16 = v48;
  if (v48)
  {
    v47 = 261;
    v44 = AttrData;
    v45 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v49, &v44);
    v16 = v48;
    if (v48)
    {
      LODWORD(v44) = 3;
      v45 = ": ";
      v46 = 2;
      v17 = &v44;
      v18 = (char *)v51;
      if (v52 >= v53)
      {
        v38 = v52 + 1;
        if (v51 <= &v44 && (char *)v51 + 24 * v52 > (char *)&v44)
        {
          v41 = (char *)&v44 - (_BYTE *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
          v18 = (char *)v51;
          v17 = (const void ***)((char *)v51 + v41);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
          v17 = &v44;
          v18 = (char *)v51;
        }
      }
      v19 = &v18[24 * v52];
      v20 = *(_OWORD *)v17;
      *((_QWORD *)v19 + 2) = v17[2];
      *(_OWORD *)v19 = v20;
      ++v52;
      v16 = v48;
    }
  }
  *(_QWORD *)a2 = v16;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v59)
  {
    *(_QWORD *)(a2 + 8) = v49;
    v21 = v52;
    *(_DWORD *)(a2 + 16) = v50;
    v22 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v21 || &v48 == (uint64_t *)a2)
    {
      v25 = 1;
      goto LABEL_23;
    }
    v23 = v54;
    if (v51 != v54)
    {
      *(_QWORD *)(a2 + 24) = v51;
      v24 = v53;
      *(_DWORD *)(a2 + 32) = v21;
      *(_DWORD *)(a2 + 36) = v24;
      v51 = v54;
      v53 = 0;
      v25 = 1;
LABEL_22:
      v52 = 0;
LABEL_23:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v55;
      *(_QWORD *)(a2 + 152) = v56;
      v55[0] = 0;
      v55[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v58;
      v56 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v58 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v25)
      {
        if (v51 != v54)
          free(v51);
        v59 = 0;
      }
      goto LABEL_27;
    }
    if (v21 < 5)
    {
      v26 = v21;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v21, 24);
      v26 = v52;
      if (!v52)
      {
LABEL_21:
        *(_DWORD *)(a2 + 32) = v21;
        v25 = v59;
        goto LABEL_22;
      }
      v23 = v51;
      v22 = *(void **)(a2 + 24);
    }
    memcpy(v22, v23, 24 * v26);
    goto LABEL_21;
  }
LABEL_27:
  mlir::InFlightDiagnostic::abandon(&v48);
  if (v48)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v48);
  if (v59)
  {
    v27 = __p[0];
    if (__p[0])
    {
      v28 = __p[1];
      v29 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        v29 = __p[0];
      }
      __p[1] = v27;
      operator delete(v29);
    }
    v30 = v55[0];
    if (v55[0])
    {
      v31 = v55[1];
      v32 = v55[0];
      if (v55[1] != v55[0])
      {
        do
        {
          v34 = *--v31;
          v33 = v34;
          *v31 = 0;
          if (v34)
            MEMORY[0x20BD002D4](v33, 0x1000C8077774924);
        }
        while (v31 != v30);
        v32 = v55[0];
      }
      v55[1] = v30;
      operator delete(v32);
    }
    if (v51 != v54)
      free(v51);
  }
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<`anonymous namespace'::OperationParser::parseGenericOperation(void)::$_0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const void ***v5;
  char *v6;
  char *v7;
  __int128 v8;
  const void **v9;
  const void ***v10;
  char *v11;
  char *v12;
  __int128 v13;
  unint64_t v14;
  void *v15;
  _BYTE *v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  const void **v33;
  const char *v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void *v40;
  unsigned int v41;
  unsigned int v42;
  _BYTE v43[96];
  __int128 v44;
  uint64_t v45;
  __int128 __p;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  mlir::emitError(**(_QWORD **)a1, (uint64_t)&v37);
  v4 = v37;
  if (v37)
  {
    LODWORD(v33) = 3;
    v34 = "'";
    v35 = 1;
    v5 = &v33;
    v6 = (char *)v40;
    if (v41 >= v42)
    {
      v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        v31 = (char *)&v33 - (_BYTE *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        v6 = (char *)v40;
        v5 = (const void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        v5 = &v33;
        v6 = (char *)v40;
      }
    }
    v7 = &v6[24 * v41];
    v8 = *(_OWORD *)v5;
    *((_QWORD *)v7 + 2) = v5[2];
    *(_OWORD *)v7 = v8;
    ++v41;
    v4 = v37;
    if (v37)
    {
      v9 = *(const void ***)(a1 + 8);
      v36 = 260;
      v33 = v9;
      mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
      v4 = v37;
      if (v37)
      {
        LODWORD(v33) = 3;
        v34 = "' op ";
        v35 = 5;
        v10 = &v33;
        v11 = (char *)v40;
        if (v41 >= v42)
        {
          v30 = v41 + 1;
          if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
          {
            v32 = (char *)&v33 - (_BYTE *)v40;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
            v11 = (char *)v40;
            v10 = (const void ***)((char *)v40 + v32);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
            v10 = &v33;
            v11 = (char *)v40;
          }
        }
        v12 = &v11[24 * v41];
        v13 = *(_OWORD *)v10;
        *((_QWORD *)v12 + 2) = v10[2];
        *(_OWORD *)v12 = v13;
        ++v41;
        v4 = v37;
      }
    }
  }
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v48)
  {
    *(_QWORD *)(a2 + 8) = v38;
    v14 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    v15 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v14 || &v37 == (uint64_t *)a2)
    {
      v18 = 1;
      goto LABEL_20;
    }
    v16 = v43;
    if (v40 != v43)
    {
      *(_QWORD *)(a2 + 24) = v40;
      v17 = v42;
      *(_DWORD *)(a2 + 32) = v14;
      *(_DWORD *)(a2 + 36) = v17;
      v40 = v43;
      v42 = 0;
      v18 = 1;
LABEL_19:
      v41 = 0;
LABEL_20:
      v20 = v47;
      *(_QWORD *)(a2 + 152) = v45;
      *(_OWORD *)(a2 + 136) = v44;
      v44 = 0uLL;
      *(_OWORD *)(a2 + 160) = __p;
      *(_QWORD *)(a2 + 176) = v20;
      v45 = 0;
      __p = 0uLL;
      v47 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v18)
      {
        if (v40 != v43)
          free(v40);
        v48 = 0;
      }
      goto LABEL_24;
    }
    if (v14 < 5)
    {
      v19 = v14;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v14, 24);
      v19 = v41;
      if (!v41)
      {
LABEL_18:
        *(_DWORD *)(a2 + 32) = v14;
        v18 = v48;
        goto LABEL_19;
      }
      v16 = v40;
      v15 = *(void **)(a2 + 24);
    }
    memcpy(v15, v16, 24 * v19);
    goto LABEL_18;
  }
LABEL_24:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  if (v48)
  {
    v21 = (_QWORD *)__p;
    if ((_QWORD)__p)
    {
      v22 = (_QWORD *)*((_QWORD *)&__p + 1);
      v23 = (void *)__p;
      if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
      {
        do
          v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        v23 = (void *)__p;
      }
      *((_QWORD *)&__p + 1) = v21;
      operator delete(v23);
    }
    v24 = (_QWORD *)v44;
    if ((_QWORD)v44)
    {
      v25 = (_QWORD *)*((_QWORD *)&v44 + 1);
      v26 = (void *)v44;
      if (*((_QWORD *)&v44 + 1) != (_QWORD)v44)
      {
        do
        {
          v28 = *--v25;
          v27 = v28;
          *v25 = 0;
          if (v28)
            MEMORY[0x20BD002D4](v27, 0x1000C8077774924);
        }
        while (v25 != v24);
        v26 = (void *)v44;
      }
      *((_QWORD *)&v44 + 1) = v24;
      operator delete(v26);
    }
    if (v40 != v43)
      free(v40);
  }
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<`anonymous namespace'::OperationParser::parseGenericOperation(void)::$_1>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  const void ***v11;
  char *v12;
  char *v13;
  __int128 v14;
  const void **v15;
  const void ***v16;
  char *v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  void *v21;
  _BYTE *v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  int64_t v38;
  int64_t v39;
  int64_t v40;
  const char *v41;
  __int16 v42;
  const void **v43;
  const char *v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void *v50;
  unsigned int v51;
  unsigned int v52;
  _BYTE v53[96];
  void *v54[2];
  uint64_t v55;
  void *__p[2];
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v4 = **(_QWORD **)a1;
  v41 = "invalid properties ";
  v42 = 259;
  mlir::emitError(v4, (uint64_t)&v41, (uint64_t)&v47);
  v5 = v47;
  if (v47)
  {
    v6 = &v43;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v43, **(_QWORD **)(a1 + 8));
    v7 = (char *)v50;
    if (v51 >= v52)
    {
      v34 = v51 + 1;
      if (v50 <= &v43 && (char *)v50 + 24 * v51 > (char *)&v43)
      {
        v38 = (char *)&v43 - (_BYTE *)v50;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v34, 24);
        v7 = (char *)v50;
        v6 = (const void ***)((char *)v50 + v38);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v34, 24);
        v6 = &v43;
        v7 = (char *)v50;
      }
    }
    v8 = &v7[24 * v51];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    v10 = ++v51;
    v5 = v47;
    if (v47)
    {
      LODWORD(v43) = 3;
      v44 = " for op ";
      v45 = 8;
      v11 = &v43;
      v12 = (char *)v50;
      if (v10 >= v52)
      {
        v35 = v10 + 1;
        v36 = (char *)v50 + 24 * v10 > (char *)&v43;
        if (v50 <= &v43 && v36)
        {
          v39 = (char *)&v43 - (_BYTE *)v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v35, 24);
          v12 = (char *)v50;
          v11 = (const void ***)((char *)v50 + v39);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v35, 24);
          v11 = &v43;
          v12 = (char *)v50;
        }
      }
      v13 = &v12[24 * v51];
      v14 = *(_OWORD *)v11;
      *((_QWORD *)v13 + 2) = v11[2];
      *(_OWORD *)v13 = v14;
      ++v51;
      v5 = v47;
      if (v47)
      {
        v15 = *(const void ***)(a1 + 16);
        v46 = 260;
        v43 = v15;
        mlir::Diagnostic::operator<<((uint64_t)&v48, &v43);
        v5 = v47;
        if (v47)
        {
          LODWORD(v43) = 3;
          v44 = ": ";
          v45 = 2;
          v16 = &v43;
          v17 = (char *)v50;
          if (v51 >= v52)
          {
            v37 = v51 + 1;
            if (v50 <= &v43 && (char *)v50 + 24 * v51 > (char *)&v43)
            {
              v40 = (char *)&v43 - (_BYTE *)v50;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
              v17 = (char *)v50;
              v16 = (const void ***)((char *)v50 + v40);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
              v16 = &v43;
              v17 = (char *)v50;
            }
          }
          v18 = &v17[24 * v51];
          v19 = *(_OWORD *)v16;
          *((_QWORD *)v18 + 2) = v16[2];
          *(_OWORD *)v18 = v19;
          ++v51;
          v5 = v47;
        }
      }
    }
  }
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v58)
  {
    *(_QWORD *)(a2 + 8) = v48;
    v20 = v51;
    *(_DWORD *)(a2 + 16) = v49;
    v21 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v20 || &v47 == (uint64_t *)a2)
    {
      v24 = 1;
      goto LABEL_22;
    }
    v22 = v53;
    if (v50 != v53)
    {
      *(_QWORD *)(a2 + 24) = v50;
      v23 = v52;
      *(_DWORD *)(a2 + 32) = v20;
      *(_DWORD *)(a2 + 36) = v23;
      v50 = v53;
      v52 = 0;
      v24 = 1;
LABEL_21:
      v51 = 0;
LABEL_22:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v54;
      *(_QWORD *)(a2 + 152) = v55;
      v54[0] = 0;
      v54[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v57;
      v55 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v57 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v24)
      {
        if (v50 != v53)
          free(v50);
        v58 = 0;
      }
      goto LABEL_26;
    }
    if (v20 < 5)
    {
      v25 = v20;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v20, 24);
      v25 = v51;
      if (!v51)
      {
LABEL_20:
        *(_DWORD *)(a2 + 32) = v20;
        v24 = v58;
        goto LABEL_21;
      }
      v22 = v50;
      v21 = *(void **)(a2 + 24);
    }
    memcpy(v21, v22, 24 * v25);
    goto LABEL_20;
  }
LABEL_26:
  mlir::InFlightDiagnostic::abandon(&v47);
  if (v47)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v47);
  if (v58)
  {
    v26 = __p[0];
    if (__p[0])
    {
      v27 = __p[1];
      v28 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        v28 = __p[0];
      }
      __p[1] = v26;
      operator delete(v28);
    }
    v29 = v54[0];
    if (v54[0])
    {
      v30 = v54[1];
      v31 = v54[0];
      if (v54[1] != v54[0])
      {
        do
        {
          v33 = *--v30;
          v32 = v33;
          *v30 = 0;
          if (v33)
            MEMORY[0x20BD002D4](v32, 0x1000C8077774924);
        }
        while (v30 != v29);
        v31 = v54[0];
      }
      v54[1] = v29;
      operator delete(v31);
    }
    if (v50 != v53)
      free(v50);
  }
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<unsigned int,llvm::SMLoc>,true>::growAndEmplaceBack<unsigned int &,llvm::SMLoc&>(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *a2;
  v5 = *a3;
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  *v7 = v4;
  v7[1] = v5;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(_QWORD *)a1 + 16 * v7 - 16;
}

uint64_t mlir::Diagnostic::append<char const(&)[28],llvm::StringRef &,char const(&)[2]>(uint64_t a1, char *__s, uint64_t a3, const char *a4)
{
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v16;
  BOOL v17;
  char *v18;
  int v19;
  char *v20;
  size_t v21;

  v8 = strlen(__s);
  v9 = a1 + 16;
  v10 = *(_QWORD *)(a1 + 16);
  v19 = 3;
  v20 = __s;
  v21 = v8;
  v11 = *(unsigned int *)(a1 + 24);
  v12 = &v19;
  if (v11 >= *(_DWORD *)(a1 + 28))
  {
    v16 = v11 + 1;
    v17 = v10 + 24 * v11 > (unint64_t)&v19;
    if (v10 <= (unint64_t)&v19 && v17)
    {
      v18 = (char *)&v19 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      v10 = *(_QWORD *)(a1 + 16);
      v12 = (int *)&v18[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      v10 = *(_QWORD *)(a1 + 16);
      v12 = &v19;
    }
  }
  v13 = v10 + 24 * *(unsigned int *)(a1 + 24);
  v14 = *(_OWORD *)v12;
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v12 + 2);
  *(_OWORD *)v13 = v14;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<llvm::StringRef &,char const(&)[2]>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<llvm::StringRef &,char const(&)[2]>(uint64_t a1, uint64_t a2, const char *a3)
{
  const char *v5;
  size_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const void ***v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v14;
  BOOL v15;
  char *v16;
  const void **v17;
  const char *v18;
  size_t v19;
  __int16 v20;

  v20 = 261;
  v5 = *(const char **)(a2 + 8);
  v17 = *(const void ***)a2;
  v18 = v5;
  mlir::Diagnostic::operator<<(a1, &v17);
  v6 = strlen(a3);
  v7 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  LODWORD(v17) = 3;
  v18 = a3;
  v19 = v6;
  v9 = *(unsigned int *)(a1 + 24);
  v10 = &v17;
  if (v9 >= *(_DWORD *)(a1 + 28))
  {
    v14 = v9 + 1;
    v15 = v8 + 24 * v9 > (unint64_t)&v17;
    if (v8 <= (unint64_t)&v17 && v15)
    {
      v16 = (char *)&v17 - v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v14, 24);
      v8 = *(_QWORD *)(a1 + 16);
      v10 = (const void ***)&v16[v8];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v14, 24);
      v8 = *(_QWORD *)(a1 + 16);
      v10 = &v17;
    }
  }
  v11 = v8 + 24 * *(unsigned int *)(a1 + 24);
  v12 = *(_OWORD *)v10;
  *(_QWORD *)(v11 + 16) = v10[2];
  *(_OWORD *)v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t mlir::Diagnostic::append<char const(&)[26],llvm::StringRef &,char const(&)[2],unsigned int &,char const(&)[12],mlir::Type>(uint64_t a1, char *__s, uint64_t a3, char *a4, unsigned int *a5, char *a6, uint64_t *a7)
{
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const void ***v18;
  uint64_t v19;
  __int128 v20;
  char *v21;
  unint64_t v23;
  BOOL v24;
  char *v25;
  const void **v26;
  char *v27;
  size_t v28;
  __int16 v29;

  v14 = strlen(__s);
  v15 = a1 + 16;
  v16 = *(_QWORD *)(a1 + 16);
  LODWORD(v26) = 3;
  v27 = __s;
  v28 = v14;
  v17 = *(unsigned int *)(a1 + 24);
  v18 = &v26;
  if (v17 >= *(_DWORD *)(a1 + 28))
  {
    v23 = v17 + 1;
    v24 = v16 + 24 * v17 > (unint64_t)&v26;
    if (v16 <= (unint64_t)&v26 && v24)
    {
      v25 = (char *)&v26 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(a1 + 32), v23, 24);
      v16 = *(_QWORD *)(a1 + 16);
      v18 = (const void ***)&v25[v16];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(a1 + 32), v23, 24);
      v16 = *(_QWORD *)(a1 + 16);
      v18 = &v26;
    }
  }
  v19 = v16 + 24 * *(unsigned int *)(a1 + 24);
  v20 = *(_OWORD *)v18;
  *(_QWORD *)(v19 + 16) = v18[2];
  *(_OWORD *)v19 = v20;
  ++*(_DWORD *)(a1 + 24);
  v29 = 261;
  v21 = *(char **)(a3 + 8);
  v26 = *(const void ***)a3;
  v27 = v21;
  mlir::Diagnostic::operator<<(a1, &v26);
  return mlir::Diagnostic::append<char const(&)[2],unsigned int &,char const(&)[12],mlir::Type>(a1, a4, a5, a6, a7);
}

uint64_t mlir::Diagnostic::append<char const(&)[2],unsigned int &,char const(&)[12],mlir::Type>(uint64_t a1, char *__s, unsigned int *a3, char *a4, uint64_t *a5)
{
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  BOOL v27;
  char *v28;
  char *v29;
  int v30;
  char *v31;
  size_t v32;

  v10 = strlen(__s);
  v11 = *(_QWORD *)(a1 + 16);
  v30 = 3;
  v31 = __s;
  v32 = v10;
  v12 = *(unsigned int *)(a1 + 24);
  v13 = &v30;
  if (v12 >= *(_DWORD *)(a1 + 28))
  {
    v24 = v12 + 1;
    v25 = v11 + 24 * v12 > (unint64_t)&v30;
    if (v11 <= (unint64_t)&v30 && v25)
    {
      v28 = (char *)&v30 - v11;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      v11 = *(_QWORD *)(a1 + 16);
      v13 = (int *)&v28[v11];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      v11 = *(_QWORD *)(a1 + 16);
      v13 = &v30;
    }
  }
  v14 = v11 + 24 * *(unsigned int *)(a1 + 24);
  v15 = *(_OWORD *)v13;
  *(_QWORD *)(v14 + 16) = *((_QWORD *)v13 + 2);
  *(_OWORD *)v14 = v15;
  v16 = *(_DWORD *)(a1 + 28);
  v17 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + 24) = v17;
  v18 = (char *)*a3;
  v30 = 5;
  v31 = v18;
  v19 = *(_QWORD *)(a1 + 16);
  v20 = &v30;
  if (v17 >= v16)
  {
    v26 = v17 + 1;
    v27 = v19 + 24 * v17 > (unint64_t)&v30;
    if (v19 <= (unint64_t)&v30 && v27)
    {
      v29 = (char *)&v30 - v19;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      v19 = *(_QWORD *)(a1 + 16);
      v20 = (int *)&v29[v19];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      v19 = *(_QWORD *)(a1 + 16);
      v20 = &v30;
    }
  }
  v21 = v19 + 24 * *(unsigned int *)(a1 + 24);
  v22 = *(_OWORD *)v20;
  *(_QWORD *)(v21 + 16) = *((_QWORD *)v20 + 2);
  *(_OWORD *)v21 = v22;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[5],mlir::Type>(a1, a4, a5);
}

uint64_t *llvm::StringMap<std::nullopt_t,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *buffer;
  void *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 9), (std::align_val_t)8uLL);
    v10 = buffer + 1;
    if (a3)
LABEL_4:
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        v15 = v7[1];
        ++v7;
        v8 = v15;
      }
      return v7;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 9), (std::align_val_t)8uLL);
    v10 = buffer + 1;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v10] = 0;
  *buffer = a3;
  *v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7)
    v11 = *v7 == -8;
  else
    v11 = 1;
  if (v11)
  {
    do
    {
      v13 = v7[1];
      ++v7;
      v12 = v13;
      if (v13)
        v14 = v12 == -8;
      else
        v14 = 1;
    }
    while (v14);
  }
  return v7;
}

uint64_t llvm::array_pod_sort_comparator<char const*>(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<`anonymous namespace'::OperationParser::finalize(void)::$_1>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  int Key;
  uint64_t v11;
  uint64_t v12;
  uint64_t EncodedSourceLocation;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  char *v29;
  char *v30;
  __int128 v31;
  int *v32;
  char *v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  int *v37;
  char *v38;
  char *v39;
  __int128 v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  int *v66;
  char *v67;
  __int128 v68;
  char v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  _QWORD *v73;
  _QWORD *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  int *v80;
  char *v81;
  __int128 v82;
  int *v83;
  char *v84;
  char *v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  int *v89;
  char *v90;
  __int128 v91;
  _QWORD *v92;
  _QWORD *v93;
  void *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  BOOL v102;
  int64_t v103;
  int64_t v104;
  int64_t v105;
  int64_t v106;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  BOOL v112;
  int64_t v113;
  int64_t v114;
  int64_t v115;
  int64_t v116;
  unint64_t v117;
  unint64_t v118;
  _BYTE v119[32];
  __int16 v120;
  uint64_t v121;
  int v122;
  const char *v123;
  uint64_t v124;
  _QWORD v125[3];
  void *v126;
  unsigned int v127;
  unsigned int v128;
  _BYTE v129[96];
  void *v130;
  _QWORD *v131;
  void *__p;
  _QWORD *v133;
  char v134;
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = **a1;
  v6 = *(_QWORD *)(a2 + 24);
  if (*(_UNKNOWN **)(*(_QWORD *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id)
    v6 = 0;
  v121 = v6;
  if (!v6 || *(_QWORD *)v4[1] != mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v121))
    goto LABEL_57;
  v7 = *(_QWORD *)(v5 + 360) + 24 * mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v121);
  v8 = *(const char **)v7;
  v9 = v4[2];
  Key = llvm::StringMapImpl::FindKey((uint64_t *)v9, *(int8x16_t **)(v7 + 8), *(const unsigned __int8 **)(v7 + 16));
  if (Key == -1
    || Key == (unint64_t)*(unsigned int *)(v9 + 8)
    || (v11 = *(_QWORD *)(*(_QWORD *)v9 + 8 * Key), (v12 = *(_QWORD *)(v11 + 8)) == 0))
  {
    v120 = 257;
    EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v5 + 8) + 8, v8);
    mlir::emitError(EncodedSourceLocation, (uint64_t)v119, (uint64_t)v125);
    if (*(_DWORD *)(*(_QWORD *)(v5 + 8) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(v125);
    if (v125[0])
    {
      v122 = 3;
      v123 = "operation location alias was never defined";
      v124 = 42;
      v14 = &v122;
      v15 = (char *)v126;
      if (v127 >= v128)
      {
        v108 = v127 + 1;
        if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
        {
          v113 = (char *)&v122 - (_BYTE *)v126;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v108, 24);
          v15 = (char *)v126;
          v14 = (int *)((char *)v126 + v113);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v108, 24);
          v14 = &v122;
          v15 = (char *)v126;
        }
      }
      v16 = &v15[24 * v127];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      ++v127;
    }
    v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v125);
    if (v125[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v125);
    if (v134)
    {
      v19 = __p;
      if (__p)
      {
        v20 = v133;
        v21 = __p;
        if (v133 != __p)
        {
          do
            v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          v21 = __p;
        }
        v133 = v19;
        operator delete(v21);
      }
      v22 = v130;
      if (!v130)
        goto LABEL_54;
      v23 = v131;
      v24 = v130;
      if (v131 == v130)
        goto LABEL_53;
      do
      {
        v26 = *--v23;
        v25 = v26;
        *v23 = 0;
        if (v26)
          MEMORY[0x20BD002D4](v25, 0x1000C8077774924);
      }
      while (v23 != v22);
      goto LABEL_52;
    }
  }
  else
  {
    if (mlir::LocationAttr::classof(*(_QWORD *)(v11 + 8)))
    {
      *(_QWORD *)(a2 + 24) = v12;
      goto LABEL_57;
    }
    v120 = 257;
    v27 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v5 + 8) + 8, v8);
    mlir::emitError(v27, (uint64_t)v119, (uint64_t)v125);
    if (*(_DWORD *)(*(_QWORD *)(v5 + 8) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(v125);
    if (v125[0])
    {
      v122 = 3;
      v123 = "expected location, but found '";
      v124 = 30;
      v28 = &v122;
      v29 = (char *)v126;
      if (v127 >= v128)
      {
        v109 = v127 + 1;
        if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
        {
          v114 = (char *)&v122 - (_BYTE *)v126;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v109, 24);
          v29 = (char *)v126;
          v28 = (int *)((char *)v126 + v114);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v109, 24);
          v28 = &v122;
          v29 = (char *)v126;
        }
      }
      v30 = &v29[24 * v127];
      v31 = *(_OWORD *)v28;
      *((_QWORD *)v30 + 2) = *((_QWORD *)v28 + 2);
      *(_OWORD *)v30 = v31;
      ++v127;
      if (v125[0])
      {
        v32 = &v122;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v122, v12);
        v33 = (char *)v126;
        if (v127 >= v128)
        {
          v110 = v127 + 1;
          if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
          {
            v115 = (char *)&v122 - (_BYTE *)v126;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v110, 24);
            v33 = (char *)v126;
            v32 = (int *)((char *)v126 + v115);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v110, 24);
            v32 = &v122;
            v33 = (char *)v126;
          }
        }
        v34 = &v33[24 * v127];
        v35 = *(_OWORD *)v32;
        *((_QWORD *)v34 + 2) = *((_QWORD *)v32 + 2);
        *(_OWORD *)v34 = v35;
        v36 = ++v127;
        if (v125[0])
        {
          v122 = 3;
          v123 = "'";
          v124 = 1;
          v37 = &v122;
          v38 = (char *)v126;
          if (v36 >= v128)
          {
            v111 = v36 + 1;
            v112 = (char *)v126 + 24 * v36 > (char *)&v122;
            if (v126 <= &v122 && v112)
            {
              v116 = (char *)&v122 - (_BYTE *)v126;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v111, 24);
              v38 = (char *)v126;
              v37 = (int *)((char *)v126 + v116);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v111, 24);
              v37 = &v122;
              v38 = (char *)v126;
            }
          }
          v39 = &v38[24 * v127];
          v40 = *(_OWORD *)v37;
          *((_QWORD *)v39 + 2) = *((_QWORD *)v37 + 2);
          *(_OWORD *)v39 = v40;
          ++v127;
        }
      }
    }
    v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v125);
    if (v125[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v125);
    if (v134)
    {
      v41 = __p;
      if (__p)
      {
        v42 = v133;
        v43 = __p;
        if (v133 != __p)
        {
          do
            v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
          while (v42 != v41);
          v43 = __p;
        }
        v133 = v41;
        operator delete(v43);
      }
      v22 = v130;
      if (!v130)
        goto LABEL_54;
      v44 = v131;
      v24 = v130;
      if (v131 == v130)
      {
LABEL_53:
        v131 = v22;
        operator delete(v24);
LABEL_54:
        if (v126 != v129)
          free(v126);
        goto LABEL_56;
      }
      do
      {
        v46 = *--v44;
        v45 = v46;
        *v44 = 0;
        if (v46)
          MEMORY[0x20BD002D4](v45, 0x1000C8077774924);
      }
      while (v44 != v22);
LABEL_52:
      v24 = v130;
      goto LABEL_53;
    }
  }
LABEL_56:
  if (!v18)
    return 0;
LABEL_57:
  v47 = *(unsigned int *)(a2 + 44);
  v48 = v47 & 0x7FFFFF;
  if ((v47 & 0x7FFFFF) != 0)
  {
    v49 = ((a2 + 16 * ((v47 >> 23) & 1) + ((v47 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a2 + 40);
    v117 = v49 + 24 * v48;
    while (1)
    {
      v50 = *(_QWORD *)(v49 + 8);
      if (v50 != v49)
        break;
LABEL_142:
      v49 += 24;
      if (v49 == v117)
        return 1;
    }
    v118 = v49;
    while (1)
    {
      v51 = v50 - 8;
      if (!v50)
        v51 = 0;
      v52 = *(uint64_t **)(v51 + 48);
      v53 = *(uint64_t **)(v51 + 56);
      if (v53 != v52)
        break;
LABEL_61:
      v50 = *(_QWORD *)(v50 + 8);
      v49 = v118;
      if (v50 == v118)
        goto LABEL_142;
    }
    while (1)
    {
      v54 = *v52;
      v55 = *a1;
      v56 = **a1;
      v57 = *(_QWORD *)(*v52 + 32);
      if (*(_UNKNOWN **)(*(_QWORD *)v57 + 136) != &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id)
        v57 = 0;
      v121 = v57;
      if (v57 && *(_QWORD *)v55[1] == mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v121))
      {
        v58 = *(_QWORD *)(v56 + 360) + 24 * mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v121);
        v59 = *(const char **)v58;
        v60 = v55[2];
        v61 = llvm::StringMapImpl::FindKey((uint64_t *)v60, *(int8x16_t **)(v58 + 8), *(const unsigned __int8 **)(v58 + 16));
        if (v61 == -1
          || v61 == (unint64_t)*(unsigned int *)(v60 + 8)
          || (v62 = *(_QWORD *)(*(_QWORD *)v60 + 8 * v61), (v63 = *(_QWORD *)(v62 + 8)) == 0))
        {
          v120 = 257;
          v64 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v56 + 8) + 8, v59);
          mlir::emitError(v64, (uint64_t)v119, (uint64_t)v125);
          if (*(_DWORD *)(*(_QWORD *)(v56 + 8) + 56) == 1)
            mlir::InFlightDiagnostic::abandon(v125);
          if (v125[0])
          {
            v122 = 3;
            v123 = "operation location alias was never defined";
            v124 = 42;
            v65 = (char *)v126;
            if (v127 >= v128)
            {
              v98 = v127 + 1;
              if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
              {
                v103 = (char *)&v122 - (_BYTE *)v126;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v98, 24);
                v65 = (char *)v126;
                v66 = (int *)((char *)v126 + v103);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v98, 24);
                v66 = &v122;
                v65 = (char *)v126;
              }
            }
            else
            {
              v66 = &v122;
            }
            v67 = &v65[24 * v127];
            v68 = *(_OWORD *)v66;
            *((_QWORD *)v67 + 2) = *((_QWORD *)v66 + 2);
            *(_OWORD *)v67 = v68;
            ++v127;
          }
          v69 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v125);
          if (v125[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v125);
          if (v134)
          {
            v70 = __p;
            if (__p)
            {
              v71 = v133;
              v72 = __p;
              if (v133 != __p)
              {
                do
                  v71 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v71 - 1);
                while (v71 != v70);
                v72 = __p;
              }
              v133 = v70;
              operator delete(v72);
            }
            v73 = v130;
            if (v130)
            {
              v74 = v131;
              v75 = v130;
              if (v131 == v130)
                goto LABEL_123;
              do
              {
                v77 = *--v74;
                v76 = v77;
                *v74 = 0;
                if (v77)
                  MEMORY[0x20BD002D4](v76, 0x1000C8077774924);
              }
              while (v74 != v73);
LABEL_122:
              v75 = v130;
              goto LABEL_123;
            }
LABEL_124:
            if (v126 != v129)
              free(v126);
          }
LABEL_66:
          if (!v69)
            return 0;
          goto LABEL_67;
        }
        if (!mlir::LocationAttr::classof(*(_QWORD *)(v62 + 8)))
        {
          v120 = 257;
          v78 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v56 + 8) + 8, v59);
          mlir::emitError(v78, (uint64_t)v119, (uint64_t)v125);
          if (*(_DWORD *)(*(_QWORD *)(v56 + 8) + 56) == 1)
            mlir::InFlightDiagnostic::abandon(v125);
          if (v125[0])
          {
            v122 = 3;
            v123 = "expected location, but found '";
            v124 = 30;
            v79 = (char *)v126;
            if (v127 >= v128)
            {
              v99 = v127 + 1;
              if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
              {
                v104 = (char *)&v122 - (_BYTE *)v126;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v99, 24);
                v79 = (char *)v126;
                v80 = (int *)((char *)v126 + v104);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v99, 24);
                v80 = &v122;
                v79 = (char *)v126;
              }
            }
            else
            {
              v80 = &v122;
            }
            v81 = &v79[24 * v127];
            v82 = *(_OWORD *)v80;
            *((_QWORD *)v81 + 2) = *((_QWORD *)v80 + 2);
            *(_OWORD *)v81 = v82;
            ++v127;
            if (v125[0])
            {
              v83 = &v122;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v122, v63);
              v84 = (char *)v126;
              if (v127 >= v128)
              {
                v100 = v127 + 1;
                if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
                {
                  v105 = (char *)&v122 - (_BYTE *)v126;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v100, 24);
                  v84 = (char *)v126;
                  v83 = (int *)((char *)v126 + v105);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v100, 24);
                  v83 = &v122;
                  v84 = (char *)v126;
                }
              }
              v85 = &v84[24 * v127];
              v86 = *(_OWORD *)v83;
              *((_QWORD *)v85 + 2) = *((_QWORD *)v83 + 2);
              *(_OWORD *)v85 = v86;
              v87 = ++v127;
              if (v125[0])
              {
                v122 = 3;
                v123 = "'";
                v124 = 1;
                v88 = (char *)v126;
                if (v87 >= v128)
                {
                  v101 = v87 + 1;
                  v102 = (char *)v126 + 24 * v87 > (char *)&v122;
                  if (v126 <= &v122 && v102)
                  {
                    v106 = (char *)&v122 - (_BYTE *)v126;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v101, 24);
                    v88 = (char *)v126;
                    v89 = (int *)((char *)v126 + v106);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v101, 24);
                    v89 = &v122;
                    v88 = (char *)v126;
                  }
                }
                else
                {
                  v89 = &v122;
                }
                v90 = &v88[24 * v127];
                v91 = *(_OWORD *)v89;
                *((_QWORD *)v90 + 2) = *((_QWORD *)v89 + 2);
                *(_OWORD *)v90 = v91;
                ++v127;
              }
            }
          }
          v69 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v125);
          if (v125[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v125);
          if (v134)
          {
            v92 = __p;
            if (__p)
            {
              v93 = v133;
              v94 = __p;
              if (v133 != __p)
              {
                do
                  v93 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v93 - 1);
                while (v93 != v92);
                v94 = __p;
              }
              v133 = v92;
              operator delete(v94);
            }
            v73 = v130;
            if (v130)
            {
              v95 = v131;
              v75 = v130;
              if (v131 != v130)
              {
                do
                {
                  v97 = *--v95;
                  v96 = v97;
                  *v95 = 0;
                  if (v97)
                    MEMORY[0x20BD002D4](v96, 0x1000C8077774924);
                }
                while (v95 != v73);
                goto LABEL_122;
              }
LABEL_123:
              v131 = v73;
              operator delete(v75);
            }
            goto LABEL_124;
          }
          goto LABEL_66;
        }
        *(_QWORD *)(v54 + 32) = v63;
      }
LABEL_67:
      if (++v52 == v53)
        goto LABEL_61;
    }
  }
  return 1;
}

uint64_t *llvm::StringMap<mlir::Attribute,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *buffer;
  void *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v10 = buffer + 2;
    if (a3)
LABEL_4:
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        v15 = v7[1];
        ++v7;
        v8 = v15;
      }
      return v7;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v10 = buffer + 2;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v10] = 0;
  *buffer = a3;
  buffer[1] = 0;
  *v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7)
    v11 = *v7 == -8;
  else
    v11 = 1;
  if (v11)
  {
    do
    {
      v13 = v7[1];
      ++v7;
      v12 = v13;
      if (v13)
        v14 = v12 == -8;
      else
        v14 = 1;
    }
    while (v14);
  }
  return v7;
}

uint64_t *llvm::StringMap<mlir::Type,llvm::MallocAllocator>::try_emplace<mlir::Type&>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *buffer;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 2;
    if (a3)
LABEL_4:
      memcpy(v12, a2, (size_t)a3);
  }
  else
  {
    if (v10)
    {
      while (!v10 || v10 == -8)
      {
        v18 = v9[1];
        ++v9;
        v10 = v18;
      }
      return v9;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 2;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v12] = 0;
  v13 = *a4;
  *buffer = a3;
  buffer[1] = v13;
  *v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9)
    v14 = *v9 == -8;
  else
    v14 = 1;
  if (v14)
  {
    do
    {
      v16 = v9[1];
      ++v9;
      v15 = v16;
      if (v16)
        v17 = v15 == -8;
      else
        v17 = 1;
    }
    while (v17);
  }
  return v9;
}

BOOL llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::TopLevelOperationParser::parseFileMetadataDictionary(void)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  const char *OCGSize;
  _QWORD *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  void *v11;
  uint64_t EncodedSourceLocation;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[4];
  __int16 v33;
  _QWORD v34[4];
  __int16 v35;
  __int128 v36;
  uint64_t v37;
  void *v38;
  __int16 v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  void *__p;
  _QWORD *v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(_QWORD *)(*a1 + 8) + 56));
  v3 = *(_QWORD **)(v1 + 8);
  v4 = *((_DWORD *)v3 + 14);
  if (v4 == 3 || v4 == 12)
  {
LABEL_6:
    v6 = v3[8];
    v7 = v3[9];
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 1), (uint64_t)&v36);
    v8 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v8 + 56) = v36;
    *(_QWORD *)(v8 + 72) = v37;
    *(_QWORD *)&v36 = "expected ':'";
    v39 = 259;
    if (mlir::detail::Parser::parseToken(v1, 15, (uint64_t)&v36))
    {
      if (v7 == 18)
      {
        if (*(_QWORD *)v6 != 0x6C616E7265747865
          || *(_QWORD *)(v6 + 8) != 0x6372756F7365725FLL
          || *(_WORD *)(v6 + 16) != 29541)
        {
LABEL_27:
          v33 = 1283;
          v32[0] = "unknown key '";
          v32[2] = v6;
          v32[3] = v7;
          v34[0] = v32;
          v34[2] = "' in file metadata dictionary";
          v35 = 770;
          EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v1 + 8) + 8, OCGSize);
          mlir::emitError(EncodedSourceLocation, (uint64_t)v34, (uint64_t)&v36);
          if (*(_DWORD *)(*(_QWORD *)(v1 + 8) + 56) == 1)
            mlir::InFlightDiagnostic::abandon(&v36);
          v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v36);
          if ((_QWORD)v36)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
          if (v45)
          {
            v17 = __p;
            if (__p)
            {
              v18 = v44;
              v19 = __p;
              if (v44 != __p)
              {
                do
                  v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
                while (v18 != v17);
                v19 = __p;
              }
              v44 = v17;
              operator delete(v19);
            }
            v20 = v41;
            if (!v41)
              goto LABEL_59;
            v21 = v42;
            v22 = v41;
            if (v42 == v41)
            {
LABEL_58:
              v42 = v20;
              operator delete(v22);
LABEL_59:
              if (v38 != &v40)
                free(v38);
              return v16;
            }
            do
            {
              v24 = *--v21;
              v23 = v24;
              *v21 = 0;
              if (v24)
                MEMORY[0x20BD002D4](v23, 0x1000C8077774924);
            }
            while (v21 != v20);
LABEL_57:
            v22 = v41;
            goto LABEL_58;
          }
          return v16;
        }
        v32[0] = v1;
      }
      else
      {
        if (v7 != 17)
          goto LABEL_27;
        v9 = *(_QWORD *)v6 == 0x5F7463656C616964 && *(_QWORD *)(v6 + 8) == 0x656372756F736572;
        if (!v9 || *(_BYTE *)(v6 + 16) != 115)
          goto LABEL_27;
        v32[0] = v1;
      }
      v34[0] = v11;
      v34[1] = v32;
      *(_QWORD *)&v36 = "expected '{'";
      v39 = 259;
      if (mlir::detail::Parser::parseToken(v1, 20, (uint64_t)&v36))
      {
        *(_QWORD *)&v36 = v1;
        *((_QWORD *)&v36 + 1) = v34;
      }
    }
    return 0;
  }
  if (mlir::Token::isKeyword((mlir::Token *)(v3 + 7)))
  {
    v3 = *(_QWORD **)(v1 + 8);
    goto LABEL_6;
  }
  v34[0] = "expected identifier key in file metadata dictionary";
  v35 = 259;
  mlir::detail::Parser::emitError(v1, (uint64_t)v34, &v36);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v36);
  if ((_QWORD)v36)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  if (v45)
  {
    v25 = __p;
    if (__p)
    {
      v26 = v44;
      v27 = __p;
      if (v44 != __p)
      {
        do
          v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        v27 = __p;
      }
      v44 = v25;
      operator delete(v27);
    }
    v20 = v41;
    if (!v41)
      goto LABEL_59;
    v28 = v42;
    v22 = v41;
    if (v42 == v41)
      goto LABEL_58;
    do
    {
      v30 = *--v28;
      v29 = v30;
      *v28 = 0;
      if (v30)
        MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
    }
    while (v28 != v20);
    goto LABEL_57;
  }
  return v16;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::TopLevelOperationParser::parseResourceFileMetadata(llvm::function_ref<mlir::ParseResult ()(llvm::StringRef,llvm::SMLoc)>)::$_0>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t OCGSize;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];
  __int16 v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  __int16 v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  void *__p;
  _QWORD *v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(_QWORD *)(*a1 + 8) + 56));
  v4 = *(_QWORD **)(v2 + 8);
  v5 = *((_DWORD *)v4 + 14);
  if (v5 == 3 || v5 == 12)
  {
LABEL_6:
    v7 = v4[8];
    v8 = v4[9];
    mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 1), (uint64_t)&v23);
    v9 = *(_QWORD *)(v2 + 8);
    *(_OWORD *)(v9 + 56) = v23;
    *(_QWORD *)(v9 + 72) = v24;
    *(_QWORD *)&v23 = "expected ':'";
    v26 = 259;
    if (mlir::detail::Parser::parseToken(v2, 15, (uint64_t)&v23)
      && (v21[0] = "expected '{'", v22 = 259, mlir::detail::Parser::parseToken(v2, 20, (uint64_t)v21)))
    {
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))a1[1])(*(_QWORD *)(a1[1] + 8), v7, v8, OCGSize);
    }
    else
    {
      return 0;
    }
  }
  if (mlir::Token::isKeyword((mlir::Token *)(v4 + 7)))
  {
    v4 = *(_QWORD **)(v2 + 8);
    goto LABEL_6;
  }
  v21[0] = "expected identifier key for 'resource' entry";
  v22 = 259;
  mlir::detail::Parser::emitError(v2, (uint64_t)v21, &v23);
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v23);
  if ((_QWORD)v23)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v23);
  if (v32)
  {
    v13 = __p;
    if (__p)
    {
      v14 = v31;
      v15 = __p;
      if (v31 != __p)
      {
        do
          v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        v15 = __p;
      }
      v31 = v13;
      operator delete(v15);
    }
    v16 = v28;
    if (v28)
    {
      v17 = v29;
      v18 = v28;
      if (v29 != v28)
      {
        do
        {
          v20 = *--v17;
          v19 = v20;
          *v17 = 0;
          if (v20)
            MEMORY[0x20BD002D4](v19, 0x1000C8077774924);
        }
        while (v17 != v16);
        v18 = v28;
      }
      v29 = v16;
      operator delete(v18);
    }
    if (v25 != &v27)
      free(v25);
  }
  return v10;
}

BOOL llvm::function_ref<mlir::ParseResult ()(llvm::StringRef,llvm::SMLoc)>::callback_fn<`anonymous namespace'::TopLevelOperationParser::parseDialectResourceFileMetadata(void)::$_0>(uint64_t *a1, void *a2, size_t a3, const char *a4)
{
  uint64_t v7;
  uint64_t **(*Dialect)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t EncodedSourceLocation;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  const void ***v20;
  char *v21;
  char *v22;
  __int128 v23;
  const void **v24;
  const char *v25;
  const void ***v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  int64_t v40;
  uint64_t v41;
  _QWORD v42[4];
  __int16 v43;
  const void **v44;
  const char *v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t *v49;
  void *v50;
  unsigned int v51;
  unsigned int v52;
  _BYTE v53[96];
  void *v54;
  _QWORD *v55;
  void *__p;
  _QWORD *v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  Dialect = mlir::MLIRContext::getOrLoadDialect(***(_QWORD ***)(*a1 + 8), a2, a3);
  if (Dialect)
  {
    v9 = (uint64_t)Dialect;
    if (mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>((uint64_t)Dialect))
    {
      v41 = mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(v9);
      if (v41)
      {
        v48 = v7;
        v49 = &v41;
      }
    }
    else
    {
      v41 = 0;
    }
    v43 = 257;
    mlir::detail::Parser::emitError(v7, (uint64_t)v42, &v48);
    if (v48)
    {
      LODWORD(v44) = 3;
      v45 = "unexpected 'resource' section for dialect '";
      v46 = 43;
      v20 = &v44;
      v21 = (char *)v50;
      if (v51 >= v52)
      {
        v37 = v51 + 1;
        if (v50 <= &v44 && (char *)v50 + 24 * v51 > (char *)&v44)
        {
          v39 = (char *)&v44 - (_BYTE *)v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
          v21 = (char *)v50;
          v20 = (const void ***)((char *)v50 + v39);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
          v20 = &v44;
          v21 = (char *)v50;
        }
      }
      v22 = &v21[24 * v51];
      v23 = *(_OWORD *)v20;
      *((_QWORD *)v22 + 2) = v20[2];
      *(_OWORD *)v22 = v23;
      ++v51;
      if (v48)
      {
        v24 = *(const void ***)(v9 + 8);
        v25 = *(const char **)(v9 + 16);
        v47 = 261;
        v44 = v24;
        v45 = v25;
        mlir::Diagnostic::operator<<((uint64_t)&v49, &v44);
        if (v48)
        {
          LODWORD(v44) = 3;
          v45 = "'";
          v46 = 1;
          v26 = &v44;
          v27 = (char *)v50;
          if (v51 >= v52)
          {
            v38 = v51 + 1;
            if (v50 <= &v44 && (char *)v50 + 24 * v51 > (char *)&v44)
            {
              v40 = (char *)&v44 - (_BYTE *)v50;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v38, 24);
              v27 = (char *)v50;
              v26 = (const void ***)((char *)v50 + v40);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v38, 24);
              v26 = &v44;
              v27 = (char *)v50;
            }
          }
          v28 = &v27[24 * v51];
          v29 = *(_OWORD *)v26;
          *((_QWORD *)v28 + 2) = v26[2];
          *(_OWORD *)v28 = v29;
          ++v51;
        }
      }
    }
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v48);
    if (v48)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v48);
    if (v58)
    {
      v30 = __p;
      if (__p)
      {
        v31 = v57;
        v32 = __p;
        if (v57 != __p)
        {
          do
            v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
          while (v31 != v30);
          v32 = __p;
        }
        v57 = v30;
        operator delete(v32);
      }
      v15 = v54;
      if (!v54)
        goto LABEL_44;
      v33 = v55;
      v17 = v54;
      if (v55 == v54)
      {
LABEL_43:
        v55 = v15;
        operator delete(v17);
LABEL_44:
        if (v50 != v53)
          free(v50);
        return v10;
      }
      do
      {
        v35 = *--v33;
        v34 = v35;
        *v33 = 0;
        if (v35)
          MEMORY[0x20BD002D4](v34, 0x1000C8077774924);
      }
      while (v33 != v15);
LABEL_42:
      v17 = v54;
      goto LABEL_43;
    }
  }
  else
  {
    v43 = 1283;
    v42[0] = "dialect '";
    v42[2] = a2;
    v42[3] = a3;
    v44 = (const void **)v42;
    v46 = (uint64_t)"' is unknown";
    v47 = 770;
    EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v7 + 8) + 8, a4);
    mlir::emitError(EncodedSourceLocation, (uint64_t)&v44, (uint64_t)&v48);
    if (*(_DWORD *)(*(_QWORD *)(v7 + 8) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(&v48);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v48);
    if (v48)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v48);
    if (v58)
    {
      v12 = __p;
      if (__p)
      {
        v13 = v57;
        v14 = __p;
        if (v57 != __p)
        {
          do
            v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          v14 = __p;
        }
        v57 = v12;
        operator delete(v14);
      }
      v15 = v54;
      if (!v54)
        goto LABEL_44;
      v16 = v55;
      v17 = v54;
      if (v55 == v54)
        goto LABEL_43;
      do
      {
        v19 = *--v16;
        v18 = v19;
        *v16 = 0;
        if (v19)
          MEMORY[0x20BD002D4](v18, 0x1000C8077774924);
      }
      while (v16 != v15);
      goto LABEL_42;
    }
  }
  return v10;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::TopLevelOperationParser::parseDialectResourceFileMetadata(void)::$_0::operator() const(llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t OCGSize;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  __int128 v16;

  v2 = *a1;
  OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(_QWORD *)(*a1 + 8) + 56));
  v16 = 0uLL;
  mlir::detail::Parser::parseResourceHandle(v2, *(_QWORD **)a1[1], (int8x16_t **)&v16, (uint64_t)&v13);
  if (!v15)
    return 0;
  *(_QWORD *)v8 = "expected ':'";
  LOWORD(v10) = 259;
  if (!mlir::detail::Parser::parseToken(v2, 15, (uint64_t)v8))
    return 0;
  v4 = *(_QWORD *)(v2 + 8);
  v13 = *(_OWORD *)(v4 + 56);
  v14 = *(_QWORD *)(v4 + 72);
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)v8);
  v5 = *(_QWORD *)(v2 + 8);
  *(_OWORD *)(v5 + 56) = *(_OWORD *)v8;
  *(_QWORD *)(v5 + 72) = *(_QWORD *)&v8[16];
  *(_QWORD *)v8 = &off_24C0299A0;
  *(_OWORD *)&v8[8] = v16;
  v9 = OCGSize;
  v10 = v13;
  v11 = v14;
  v12 = v2;
  v6 = (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)a1[1] + 48))(*(_QWORD *)a1[1], v8);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v8);
  return v6;
}

void `anonymous namespace'::ParsedResourceEntry::~ParsedResourceEntry(_anonymous_namespace_::ParsedResourceEntry *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

{
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::ParsedResourceEntry::getKey(_anonymous_namespace_::ParsedResourceEntry *this)
{
  return *((_QWORD *)this + 1);
}

{
  return *((_QWORD *)this + 1);
}

void `anonymous namespace'::ParsedResourceEntry::emitError(_anonymous_namespace_::ParsedResourceEntry *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  const char *v4;
  uint64_t EncodedSourceLocation;
  _BYTE v6[32];
  __int16 v7;

  v3 = *((_QWORD *)this + 7);
  v4 = (const char *)*((_QWORD *)this + 3);
  v7 = 257;
  EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v3 + 8) + 8, v4);
  mlir::emitError(EncodedSourceLocation, (uint64_t)v6, (uint64_t)a2);
  if (*(_DWORD *)(*(_QWORD *)(v3 + 8) + 56) == 1)
    mlir::InFlightDiagnostic::abandon(a2);
}

uint64_t `anonymous namespace'::ParsedResourceEntry::getKind(_anonymous_namespace_::ParsedResourceEntry *this)
{
  int v2;
  uint64_t result;
  unsigned __int16 *v4;
  unsigned int v5;
  int v6;

  v2 = *((_DWORD *)this + 8);
  result = 1;
  if (v2 != 54 && v2 != 74)
  {
    if (*((_QWORD *)this + 6) >= 3uLL)
    {
      v4 = (unsigned __int16 *)*((_QWORD *)this + 5);
      v5 = bswap32(*v4) >> 16;
      if (v5 == 8752)
      {
        v6 = *((unsigned __int8 *)v4 + 2) - 120;
      }
      else if (v5 >> 4 < 0x223)
      {
        v6 = -1;
      }
      else
      {
        v6 = 1;
      }
      return 2 * (v6 != 0);
    }
    else
    {
      return 2;
    }
  }
  return result;
}

{
  return *((unsigned int *)this + 6);
}

uint64_t `anonymous namespace'::ParsedResourceEntry::parseAsBool(_anonymous_namespace_::ParsedResourceEntry *this)
{
  MirInfoChannelAssignment *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v8;
  const char *OCGSize;
  uint64_t v10;
  uint64_t v11;
  uint64_t EncodedSourceLocation;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[4];
  __int16 v24;
  _QWORD v25[3];
  void *v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  void *__p;
  _QWORD *v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)this + 8);
  v2 = (_anonymous_namespace_::ParsedResourceEntry *)((char *)this + 32);
  v3 = v4;
  if (v4 == 54)
  {
    v5 = 0;
    goto LABEL_5;
  }
  if (v3 == 74)
  {
    v5 = 1;
LABEL_5:
    v6 = 1;
    return v5 | (v6 << 8);
  }
  v8 = *((_QWORD *)this + 7);
  OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize(v2);
  v22 = 1283;
  v10 = *((_QWORD *)this + 1);
  v11 = *((_QWORD *)this + 2);
  v21[0] = "expected 'true' or 'false' value for key '";
  v21[2] = v10;
  v21[3] = v11;
  v23[0] = v21;
  v23[2] = "'";
  v24 = 770;
  EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v8 + 8) + 8, OCGSize);
  mlir::emitError(EncodedSourceLocation, (uint64_t)v23, (uint64_t)v25);
  if (*(_DWORD *)(*(_QWORD *)(v8 + 8) + 56) == 1)
    mlir::InFlightDiagnostic::abandon(v25);
  if (v25[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v25);
  if (v32)
  {
    v13 = __p;
    if (__p)
    {
      v14 = v31;
      v15 = __p;
      if (v31 != __p)
      {
        do
          v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        v15 = __p;
      }
      v31 = v13;
      operator delete(v15);
    }
    v16 = v28;
    if (v28)
    {
      v17 = v29;
      v18 = v28;
      if (v29 != v28)
      {
        do
        {
          v20 = *--v17;
          v19 = v20;
          *v17 = 0;
          if (v20)
            MEMORY[0x20BD002D4](v19, 0x1000C8077774924);
        }
        while (v17 != v16);
        v18 = v28;
      }
      v29 = v16;
      operator delete(v18);
    }
    if (v26 != &v27)
      free(v26);
  }
  v5 = 0;
  v6 = 0;
  return v5 | (v6 << 8);
}

{
  char v2;
  int v3;
  unsigned __int8 v4;
  const void ***v5;
  char *v6;
  char *v7;
  __int128 v8;
  char *v9;
  const char *v10;
  const void ***v11;
  char *v12;
  char *v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  const void **v28;
  const char *v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unsigned int v35;
  unsigned int v36;
  _BYTE v37[96];
  void *v38;
  _QWORD *v39;
  void *__p;
  _QWORD *v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 6) == 1)
  {
    LOBYTE(v32) = 0;
    v3 = v2 != 0;
    v4 = v32;
    if (!v2)
      v4 = 0;
  }
  else
  {
    mlir::emitError(*(_QWORD *)(*((_QWORD *)this + 4) + 24), (uint64_t)&v32);
    if (v32)
    {
      LODWORD(v28) = 3;
      v29 = "expected a BOOL resource entry, but found a ";
      v30 = 44;
      v5 = &v28;
      v6 = (char *)v34;
      if (v35 >= v36)
      {
        v24 = v35 + 1;
        if (v34 <= &v28 && (char *)v34 + 24 * v35 > (char *)&v28)
        {
          v26 = (char *)&v28 - (_BYTE *)v34;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v24, 24);
          v6 = (char *)v34;
          v5 = (const void ***)((char *)v34 + v26);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v24, 24);
          v5 = &v28;
          v6 = (char *)v34;
        }
      }
      v7 = &v6[24 * v35];
      v8 = *(_OWORD *)v5;
      *((_QWORD *)v7 + 2) = v5[2];
      *(_OWORD *)v7 = v8;
      ++v35;
    }
    v9 = mlir::toString(*((_DWORD *)this + 6));
    if (v32)
    {
      v31 = 261;
      v28 = (const void **)v9;
      v29 = v10;
      mlir::Diagnostic::operator<<((uint64_t)&v33, &v28);
      if (v32)
      {
        LODWORD(v28) = 3;
        v29 = " entry instead";
        v30 = 14;
        v11 = &v28;
        v12 = (char *)v34;
        if (v35 >= v36)
        {
          v25 = v35 + 1;
          if (v34 <= &v28 && (char *)v34 + 24 * v35 > (char *)&v28)
          {
            v27 = (char *)&v28 - (_BYTE *)v34;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v25, 24);
            v12 = (char *)v34;
            v11 = (const void ***)((char *)v34 + v27);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v25, 24);
            v11 = &v28;
            v12 = (char *)v34;
          }
        }
        v13 = &v12[24 * v35];
        v14 = *(_OWORD *)v11;
        *((_QWORD *)v13 + 2) = v11[2];
        *(_OWORD *)v13 = v14;
        ++v35;
        if (v32)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v32);
      }
    }
    if (v42)
    {
      v15 = __p;
      if (__p)
      {
        v16 = v41;
        v17 = __p;
        if (v41 != __p)
        {
          do
            v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          v17 = __p;
        }
        v41 = v15;
        operator delete(v17);
      }
      v18 = v38;
      if (v38)
      {
        v19 = v39;
        v20 = v38;
        if (v39 != v38)
        {
          do
          {
            v22 = *--v19;
            v21 = v22;
            *v19 = 0;
            if (v22)
              MEMORY[0x20BD002D4](v21, 0x1000C8077774924);
          }
          while (v19 != v18);
          v20 = v38;
        }
        v39 = v18;
        operator delete(v20);
      }
      if (v34 != v37)
        free(v34);
    }
    v4 = 0;
    v3 = 0;
  }
  return v4 | (v3 << 8);
}

void `anonymous namespace'::ParsedResourceEntry::parseAsString(_anonymous_namespace_::ParsedResourceEntry *this@<X0>, std::string *a2@<X8>)
{
  mlir::Token *v4;
  int v5;
  uint64_t v6;
  const char *OCGSize;
  uint64_t v8;
  uint64_t v9;
  uint64_t EncodedSourceLocation;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;
  std::string v23;
  void *v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *__p;
  _QWORD *v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v5 = *((_DWORD *)this + 8);
  v4 = (_anonymous_namespace_::ParsedResourceEntry *)((char *)this + 32);
  if (v5 == 11)
  {
    mlir::Token::getStringValue(v4, &v23);
    *a2 = v23;
    a2[1].__r_.__value_.__s.__data_[0] = 1;
  }
  else
  {
    v6 = *((_QWORD *)this + 7);
    OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize(v4);
    v20 = 1283;
    v8 = *((_QWORD *)this + 1);
    v9 = *((_QWORD *)this + 2);
    v19[0] = "expected string value for key '";
    v19[2] = v8;
    v19[3] = v9;
    v21[0] = v19;
    v21[2] = "'";
    v22 = 770;
    EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v6 + 8) + 8, OCGSize);
    mlir::emitError(EncodedSourceLocation, (uint64_t)v21, (uint64_t)&v23);
    if (*(_DWORD *)(*(_QWORD *)(v6 + 8) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(&v23);
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    if (v23.__r_.__value_.__r.__words[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v23);
    if (v30)
    {
      v11 = __p;
      if (__p)
      {
        v12 = v29;
        v13 = __p;
        if (v29 != __p)
        {
          do
            v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          v13 = __p;
        }
        v29 = v11;
        operator delete(v13);
      }
      v14 = v26;
      if (v26)
      {
        v15 = v27;
        v16 = v26;
        if (v27 != v26)
        {
          do
          {
            v18 = *--v15;
            v17 = v18;
            *v15 = 0;
            if (v18)
              MEMORY[0x20BD002D4](v17, 0x1000C8077774924);
          }
          while (v15 != v14);
          v16 = v26;
        }
        v27 = v14;
        operator delete(v16);
      }
      if (v24 != &v25)
        free(v24);
    }
  }
}

void `anonymous namespace'::ParsedResourceEntry::parseAsBlob(mlir::Token *this@<X0>, void (*a2)(void **__return_ptr, uint64_t, size_t, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  MirInfoChannelAssignment *v6;
  int8x8_t data_low;
  uint64_t v10;
  const char *OCGSize;
  const char *v12;
  uint64_t v13;
  uint64_t EncodedSourceLocation;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  std::string::size_type size;
  size_t v47;
  std::string *v48;
  const void *v49;
  unint64_t v50;
  _OWORD *v51;
  _QWORD v52[4];
  __int16 v53;
  _QWORD v54[2];
  const char *v55;
  uint64_t v56;
  __int16 v57;
  _QWORD v58[2];
  const char *v59;
  __int16 v60;
  std::string v61;
  char v62;
  void *__dst[2];
  uint64_t v64;
  __int128 v65;
  _QWORD v66[2];
  char v67;
  void *v68;
  _QWORD *v69;
  void *__p;
  _QWORD *v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v6 = (mlir::Token *)((char *)this + 32);
  if (*((_DWORD *)this + 8) != 11)
  {
    v61.__r_.__value_.__s.__data_[0] = 0;
    v62 = 0;
LABEL_8:
    v10 = *((_QWORD *)this + 7);
    OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize(v6);
    v57 = 1283;
    v12 = (const char *)*((_QWORD *)this + 1);
    v13 = *((_QWORD *)this + 2);
    v54[0] = "expected hex string blob for key '";
    v55 = v12;
    v56 = v13;
    v58[0] = v54;
    v59 = "'";
    v60 = 770;
    EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v10 + 8) + 8, OCGSize);
    mlir::emitError(EncodedSourceLocation, (uint64_t)v58, (uint64_t)__dst);
    if (*(_DWORD *)(*(_QWORD *)(v10 + 8) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(__dst);
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 64) = 0;
    if (__dst[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
    if (v72)
    {
      v15 = __p;
      if (__p)
      {
        v16 = v71;
        v17 = __p;
        if (v71 != __p)
        {
          do
            v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          v17 = __p;
        }
        v71 = v15;
        operator delete(v17);
      }
      v18 = v68;
      if (!v68)
        goto LABEL_61;
      v19 = v69;
      v20 = v68;
      if (v69 == v68)
        goto LABEL_60;
      do
      {
        v22 = *--v19;
        v21 = v22;
        *v19 = 0;
        if (v22)
          MEMORY[0x20BD002D4](v21, 0x1000C8077774924);
      }
      while (v19 != v18);
      goto LABEL_59;
    }
    goto LABEL_63;
  }
  mlir::Token::getHexStringValue((mlir::Token *)((char *)this + 32), &v61);
  if (!v62)
    goto LABEL_8;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v61.__r_.__value_.__l.__size_ >= 4)
    {
      data_low = (int8x8_t)*(unsigned int *)v61.__r_.__value_.__l.__data_;
      if (!data_low.i32[0])
        goto LABEL_67;
LABEL_42:
      v34 = (uint8x8_t)vcnt_s8(data_low);
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.i32[0] < 2u)
        goto LABEL_67;
      v35 = *((_QWORD *)this + 7);
      v36 = (const char *)MirInfoChannelAssignment::GetOCGSize(v6);
      v53 = 1283;
      v37 = *((_QWORD *)this + 1);
      v38 = *((_QWORD *)this + 2);
      v52[0] = "expected hex string blob for key '";
      v52[2] = v37;
      v52[3] = v38;
      v54[0] = v52;
      v55 = "' to encode alignment in first 4 bytes, but got non-power-of-2 value: ";
      v57 = 770;
      v58[0] = v54;
      v59 = (const char *)data_low;
      v60 = 2306;
      v39 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v35 + 8) + 8, v36);
      mlir::emitError(v39, (uint64_t)v58, (uint64_t)__dst);
      if (*(_DWORD *)(*(_QWORD *)(v35 + 8) + 56) == 1)
        mlir::InFlightDiagnostic::abandon(__dst);
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 64) = 0;
      if (__dst[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
      if (v72)
      {
        v40 = __p;
        if (__p)
        {
          v41 = v71;
          v42 = __p;
          if (v71 != __p)
          {
            do
              v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
            while (v41 != v40);
            v42 = __p;
          }
          v71 = v40;
          operator delete(v42);
        }
        v18 = v68;
        if (!v68)
          goto LABEL_61;
        v43 = v69;
        v20 = v68;
        if (v69 == v68)
        {
LABEL_60:
          v69 = v18;
          operator delete(v20);
LABEL_61:
          if ((_QWORD *)v65 != v66)
            free((void *)v65);
          goto LABEL_63;
        }
        do
        {
          v45 = *--v43;
          v44 = v45;
          *v43 = 0;
          if (v45)
            MEMORY[0x20BD002D4](v44, 0x1000C8077774924);
        }
        while (v43 != v18);
LABEL_59:
        v20 = v68;
        goto LABEL_60;
      }
      goto LABEL_63;
    }
LABEL_25:
    v23 = *((_QWORD *)this + 7);
    v24 = (const char *)MirInfoChannelAssignment::GetOCGSize(v6);
    v57 = 1283;
    v25 = (const char *)*((_QWORD *)this + 1);
    v26 = *((_QWORD *)this + 2);
    v54[0] = "expected hex string blob for key '";
    v55 = v25;
    v56 = v26;
    v58[0] = v54;
    v59 = "' to encode alignment in first 4 bytes";
    v60 = 770;
    v27 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v23 + 8) + 8, v24);
    mlir::emitError(v27, (uint64_t)v58, (uint64_t)__dst);
    if (*(_DWORD *)(*(_QWORD *)(v23 + 8) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(__dst);
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 64) = 0;
    if (__dst[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
    if (v72)
    {
      v28 = __p;
      if (__p)
      {
        v29 = v71;
        v30 = __p;
        if (v71 != __p)
        {
          do
            v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          v30 = __p;
        }
        v71 = v28;
        operator delete(v30);
      }
      v18 = v68;
      if (!v68)
        goto LABEL_61;
      v31 = v69;
      v20 = v68;
      if (v69 == v68)
        goto LABEL_60;
      do
      {
        v33 = *--v31;
        v32 = v33;
        *v31 = 0;
        if (v33)
          MEMORY[0x20BD002D4](v32, 0x1000C8077774924);
      }
      while (v31 != v18);
      goto LABEL_59;
    }
LABEL_63:
    if (!v62)
      return;
    goto LABEL_64;
  }
  if (HIBYTE(v61.__r_.__value_.__r.__words[2]) <= 3u)
    goto LABEL_25;
  data_low = (int8x8_t)LODWORD(v61.__r_.__value_.__l.__data_);
  if (LODWORD(v61.__r_.__value_.__l.__data_))
    goto LABEL_42;
LABEL_67:
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
  else
    size = v61.__r_.__value_.__l.__size_;
  v47 = size - 4;
  if (size <= 4)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 56) = 0;
    *(_BYTE *)(a4 + 64) = 1;
    if (!v62)
      return;
    goto LABEL_64;
  }
  v48 = &v61;
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v48 = (std::string *)v61.__r_.__value_.__r.__words[0];
  v49 = (char *)v48->__r_.__value_.__r.__words + 4;
  a2(__dst, a3, v47, *(_QWORD *)&data_low);
  memcpy(__dst[0], v49, v47);
  *(_OWORD *)a4 = *(_OWORD *)__dst;
  v50 = v66[1];
  *(_QWORD *)(a4 + 16) = v64;
  *(_QWORD *)(a4 + 48) = v50;
  if (v50 >= 8)
  {
    v51 = (_OWORD *)(a4 + 24);
    if ((v50 & 2) != 0 && (v50 & 4) != 0)
    {
      (*(void (**)(_OWORD *, __int128 *))((v50 & 0xFFFFFFFFFFFFFFF8) + 8))(v51, &v65);
    }
    else
    {
      *v51 = v65;
      *(_QWORD *)(a4 + 40) = v66[0];
    }
  }
  *(_BYTE *)(a4 + 56) = v67;
  *(_BYTE *)(a4 + 64) = 1;
  if (v62)
  {
LABEL_64:
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
  }
}

BOOL llvm::function_ref<mlir::ParseResult ()(llvm::StringRef,llvm::SMLoc)>::callback_fn<`anonymous namespace'::TopLevelOperationParser::parseExternalResourceFileMetadata(void)::$_0>(uint64_t a1, const void *a2, size_t a3, const char *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t EncodedSourceLocation;
  const void ***v11;
  char *v12;
  char *v13;
  __int128 v14;
  const void ***v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  _QWORD *ParserFor;
  const void **v33;
  const char *v34;
  uint64_t v35;
  __int16 v36;
  const void *v37;
  size_t v38[2];
  void *v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE v42[96];
  void *v43;
  _QWORD *v44;
  void *__p;
  _QWORD *v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD **)a1;
  v8 = **(_QWORD **)(*(_QWORD *)a1 + 8);
  v37 = a2;
  v38[0] = a3;
  v33 = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(v8 + 16), (uint64_t)&v37, &v33)|| v33 == (const void **)(*(_QWORD *)(v8 + 16) + 24 * *(unsigned int *)(v8 + 32)))
  {
    v9 = *(_QWORD *)(v8 + 40);
    if (v9)
    {
      ParserFor = mlir::FallbackAsmResourceMap::getParserFor(v9, v37, v38[0]);
      goto LABEL_31;
    }
    ParserFor = 0;
  }
  else
  {
    ParserFor = v33[2];
    if (ParserFor)
      goto LABEL_31;
  }
  EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(v7[1] + 8, a4);
  mlir::emitWarning(EncodedSourceLocation, (uint64_t)&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    v34 = "ignoring unknown external resources for '";
    v35 = 41;
    v11 = &v33;
    v12 = (char *)v39;
    if (v40 >= v41)
    {
      v28 = v40 + 1;
      if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
      {
        v30 = (char *)&v33 - (_BYTE *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
        v12 = (char *)v39;
        v11 = (const void ***)((char *)v39 + v30);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
        v11 = &v33;
        v12 = (char *)v39;
      }
    }
    v13 = &v12[24 * v40];
    v14 = *(_OWORD *)v11;
    *((_QWORD *)v13 + 2) = v11[2];
    *(_OWORD *)v13 = v14;
    ++v40;
    if (v37)
    {
      v36 = 261;
      v33 = (const void **)a2;
      v34 = (const char *)a3;
      mlir::Diagnostic::operator<<((uint64_t)v38, &v33);
      if (v37)
      {
        LODWORD(v33) = 3;
        v34 = "'";
        v35 = 1;
        v15 = &v33;
        v16 = (char *)v39;
        if (v40 >= v41)
        {
          v29 = v40 + 1;
          if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
          {
            v31 = (char *)&v33 - (_BYTE *)v39;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v29, 24);
            v16 = (char *)v39;
            v15 = (const void ***)((char *)v39 + v31);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v29, 24);
            v15 = &v33;
            v16 = (char *)v39;
          }
        }
        v17 = &v16[24 * v40];
        v18 = *(_OWORD *)v15;
        *((_QWORD *)v17 + 2) = v15[2];
        *(_OWORD *)v17 = v18;
        ++v40;
        if (v37)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
      }
    }
  }
  if (v47)
  {
    v19 = __p;
    if (__p)
    {
      v20 = v46;
      v21 = __p;
      if (v46 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v46 = v19;
      operator delete(v21);
    }
    v22 = v43;
    if (v43)
    {
      v23 = v44;
      v24 = v43;
      if (v44 != v43)
      {
        do
        {
          v26 = *--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            MEMORY[0x20BD002D4](v25, 0x1000C8077774924);
        }
        while (v23 != v22);
        v24 = v43;
      }
      v44 = v22;
      operator delete(v24);
    }
    if (v39 != v42)
      free(v39);
  }
LABEL_31:
  v37 = v7;
  v38[0] = (size_t)&ParserFor;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  unsigned int v8;
  void *v9;
  size_t v10;
  _QWORD *v11;
  int v12;
  int v13;
  _QWORD *v14;
  const void *v15;
  BOOL v16;
  int v17;
  uint64_t result;
  int v19;
  int v20;
  const void *v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  const void *v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  const void *v38;
  BOOL v39;
  int v40;
  void *__s1;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v14 = 0;
    result = 0;
    goto LABEL_70;
  }
  v6 = *a1;
  HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(_QWORD **)a2, *(_QWORD *)(a2 + 8));
  v8 = v4 - 1;
  v9 = *(void **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  if (!v10)
  {
    if (v9 == (void *)-2)
    {
      v11 = 0;
      v19 = 1;
      v20 = HashValue & v8;
      v14 = (_QWORD *)(v6 + 24 * (HashValue & v8));
      v21 = (const void *)*v14;
      if (*v14 == -1)
        goto LABEL_21;
LABEL_19:
      if (v21 != (const void *)-2 && v14[1])
      {
LABEL_21:
        while (v21 != (const void *)-1)
        {
          if (v11)
            v22 = 0;
          else
            v22 = v21 == (const void *)-2;
          if (v22)
            v11 = v14;
          v23 = v19 + v20;
          ++v19;
          v20 = v23 & v8;
          v14 = (_QWORD *)(v6 + 24 * (v23 & v8));
          v21 = (const void *)*v14;
          if (*v14 != -1)
            goto LABEL_19;
        }
        goto LABEL_66;
      }
    }
    else
    {
      v11 = 0;
      v31 = 1;
      v32 = HashValue & v8;
      v14 = (_QWORD *)(v6 + 24 * (HashValue & v8));
      v33 = *v14;
      if (*v14 == -2)
        goto LABEL_47;
LABEL_43:
      if (v33 == -1)
      {
        if (v9 != (void *)-1)
        {
LABEL_47:
          while (v33 != -1)
          {
            if (v11)
              v34 = 0;
            else
              v34 = v33 == -2;
            if (v34)
              v11 = v14;
            v35 = v31 + v32;
            ++v31;
            v32 = v35 & v8;
            v14 = (_QWORD *)(v6 + 24 * (v35 & v8));
            v33 = *v14;
            if (*v14 != -2)
              goto LABEL_43;
          }
          goto LABEL_66;
        }
      }
      else if (v14[1])
      {
        goto LABEL_47;
      }
    }
    goto LABEL_69;
  }
  if (v9 != (void *)-2)
  {
    if (v9 != (void *)-1)
    {
      __s1 = v9;
      v11 = 0;
      v36 = 1;
      v37 = HashValue & v8;
      v14 = (_QWORD *)(v6 + 24 * (HashValue & v8));
      v38 = (const void *)*v14;
      if (*v14 <= 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_63;
      while (v38 != (const void *)-1)
      {
        if (v11)
          v39 = 0;
        else
          v39 = v38 == (const void *)-2;
        if (v39)
          v11 = v14;
        v40 = v36 + v37;
        ++v36;
        v37 = v40 & v8;
        v14 = (_QWORD *)(v6 + 24 * (v40 & v8));
        v38 = (const void *)*v14;
        if (*v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
LABEL_63:
          if (v10 == v14[1] && !memcmp(__s1, v38, v10))
            goto LABEL_69;
        }
      }
      goto LABEL_66;
    }
    v11 = 0;
    v24 = 1;
    v25 = HashValue & v8;
    v14 = (_QWORD *)(v6 + 24 * (HashValue & v8));
    v26 = (const void *)*v14;
    if (*v14 == -2)
      goto LABEL_34;
LABEL_31:
    if (v26 != (const void *)-1)
    {
      if (v10 != v14[1] || (v27 = v24, v28 = memcmp((const void *)0xFFFFFFFFFFFFFFFFLL, v26, v10), v24 = v27, v28))
      {
LABEL_34:
        while (v26 != (const void *)-1)
        {
          if (v11)
            v29 = 0;
          else
            v29 = v26 == (const void *)-2;
          if (v29)
            v11 = v14;
          v30 = v24 + v25;
          ++v24;
          v25 = v30 & v8;
          v14 = (_QWORD *)(v6 + 24 * (v30 & v8));
          v26 = (const void *)*v14;
          if (*v14 != -2)
            goto LABEL_31;
        }
        goto LABEL_66;
      }
    }
LABEL_69:
    result = 1;
    goto LABEL_70;
  }
  v11 = 0;
  v12 = 1;
  v13 = HashValue & v8;
  v14 = (_QWORD *)(v6 + 24 * (HashValue & v8));
  v15 = (const void *)*v14;
  if (*v14 == -1)
    goto LABEL_8;
LABEL_5:
  if (v15 == (const void *)-2 || v10 == v14[1] && !memcmp((const void *)0xFFFFFFFFFFFFFFFELL, v15, v10))
    goto LABEL_69;
LABEL_8:
  while (v15 != (const void *)-1)
  {
    if (v11)
      v16 = 0;
    else
      v16 = v15 == (const void *)-2;
    if (v16)
      v11 = v14;
    v17 = v12 + v13;
    ++v12;
    v13 = v17 & v8;
    v14 = (_QWORD *)(v6 + 24 * (v17 & v8));
    v15 = (const void *)*v14;
    if (*v14 != -1)
      goto LABEL_5;
  }
LABEL_66:
  result = 0;
  if (v11)
    v14 = v11;
LABEL_70:
  *a3 = v14;
  return result;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::TopLevelOperationParser::parseExternalResourceFileMetadata(void)::$_0::operator() const(llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2;
  void *OCGSize;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  __int16 v26;
  __int128 v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  void *__p;
  _QWORD *v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  OCGSize = (void *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(_QWORD *)(*a1 + 8) + 56));
  v4 = *(_QWORD **)(v2 + 8);
  v5 = *((_DWORD *)v4 + 14);
  if (v5 == 3 || v5 == 12)
    goto LABEL_6;
  if (mlir::Token::isKeyword((mlir::Token *)(v4 + 7)))
  {
    v4 = *(_QWORD **)(v2 + 8);
LABEL_6:
    v7 = v4[8];
    v8 = v4[9];
    mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 1), (uint64_t)&v27);
    v9 = *(_QWORD *)(v2 + 8);
    *(_OWORD *)(v9 + 56) = v27;
    *(_QWORD *)(v9 + 72) = v28;
    *(_QWORD *)&v27 = "expected ':'";
    LOWORD(v30) = 259;
    if (!mlir::detail::Parser::parseToken(v2, 15, (uint64_t)&v27))
      return 0;
    v10 = *(_QWORD *)(v2 + 8);
    v24 = *(_OWORD *)(v10 + 56);
    v25 = *(_QWORD *)(v10 + 72);
    mlir::Lexer::lexToken((mlir::Lexer *)(v10 + 8), (uint64_t)&v27);
    v11 = *(_QWORD *)(v2 + 8);
    *(_OWORD *)(v11 + 56) = v27;
    *(_QWORD *)(v11 + 72) = v28;
    v12 = *(_QWORD *)a1[1];
    if (!v12)
      return 1;
    v30 = v24;
    *(_QWORD *)&v27 = &off_24C0299A0;
    *((_QWORD *)&v27 + 1) = v7;
    v28 = v8;
    v29 = OCGSize;
    v31 = v25;
    v32 = v2;
    v13 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v12 + 16))(v12, &v27);
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v27);
    return v13;
  }
  *(_QWORD *)&v24 = "expected identifier key for 'external_resources' entry";
  v26 = 259;
  mlir::detail::Parser::emitError(v2, (uint64_t)&v24, &v27);
  v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v27);
  if ((_QWORD)v27)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v27);
  if (v37)
  {
    v15 = __p;
    if (__p)
    {
      v16 = v36;
      v17 = __p;
      if (v36 != __p)
      {
        do
          v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        v17 = __p;
      }
      v36 = v15;
      operator delete(v17);
    }
    v18 = v33;
    if (v33)
    {
      v19 = v34;
      v20 = v33;
      if (v34 != v33)
      {
        do
        {
          v22 = *--v19;
          v21 = v22;
          *v19 = 0;
          if (v22)
            MEMORY[0x20BD002D4](v21, 0x1000C8077774924);
        }
        while (v19 != v18);
        v20 = v33;
      }
      v34 = v18;
      operator delete(v20);
    }
    if (v29 != (char *)&v30 + 8)
      free(v29);
  }
  return v13;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>,mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>::InsertIntoBucket<mlir::OpAsmDialectInterface const* const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  int v16;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>::grow(a1, v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = (uint64_t *)(*(_QWORD *)a1 + 32 * v11);
  v12 = *a2;
  if (*a3 != *a2)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a2;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a2 = (uint64_t *)(*(_QWORD *)a1 + 32 * v11);
      v12 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v13)
      a2 = v13;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0x3800000000;
  return a2;
}

_QWORD *llvm::DenseMap<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  llvm *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  int v30;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      v10 = &result[4 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      v13 = result + 4;
      v14 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -4096;
        *v13 = -4096;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[4 * v11];
        do
        {
          *v10 = -4096;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    if ((_DWORD)v3)
    {
      v16 = v4;
      do
      {
        v23 = *(_QWORD *)v16;
        if ((*(_QWORD *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v24 = *(_DWORD *)(a1 + 16) - 1;
          v25 = v24 & ((v23 >> 4) ^ (v23 >> 9));
          v22 = *(_QWORD *)a1 + 32 * v25;
          v26 = *(_QWORD *)v22;
          if (v23 != *(_QWORD *)v22)
          {
            v27 = 0;
            v28 = 1;
            while (v26 != -4096)
            {
              if (v27)
                v29 = 0;
              else
                v29 = v26 == -8192;
              if (v29)
                v27 = v22;
              v30 = v25 + v28++;
              v25 = v30 & v24;
              v22 = *(_QWORD *)a1 + 32 * v25;
              v26 = *(_QWORD *)v22;
              if (v23 == *(_QWORD *)v22)
                goto LABEL_24;
            }
            if (v27)
              v22 = v27;
          }
LABEL_24:
          *(_QWORD *)v22 = v23;
          *(_QWORD *)(v22 + 8) = *((_QWORD *)v16 + 1);
          *(_OWORD *)(v22 + 16) = *((_OWORD *)v16 + 1);
          *((_QWORD *)v16 + 1) = 0;
          *((_QWORD *)v16 + 2) = 0;
          *((_DWORD *)v16 + 6) = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        v16 = (llvm *)((char *)v16 + 32);
      }
      while (v16 != (llvm *)((char *)v4 + 32 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    if (((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
      goto LABEL_19;
    v18 = ((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    v10 = &result[4 * (v18 & 0xFFFFFFFFFFFFFFELL)];
    v19 = result + 4;
    v20 = v18 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 4) = -4096;
      *v19 = -4096;
      v19 += 8;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_19:
      v21 = &result[4 * v17];
      do
      {
        *v10 = -4096;
        v10 += 4;
      }
      while (v10 != v21);
    }
  }
  return result;
}

uint64_t *llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *buffer;
  void *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 57), (std::align_val_t)8uLL);
    v10 = buffer + 56;
    if (a3)
LABEL_4:
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        v15 = v7[1];
        ++v7;
        v8 = v15;
      }
      return v7;
    }
    buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 57), (std::align_val_t)8uLL);
    v10 = buffer + 56;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v10] = 0;
  *(_QWORD *)buffer = a3;
  *(_OWORD *)(buffer + 40) = 0u;
  *(_OWORD *)(buffer + 8) = 0u;
  *(_OWORD *)(buffer + 24) = 0u;
  *((_QWORD *)buffer + 5) = &mlir::detail::TypeIDResolver<void,void>::id;
  *v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7)
    v11 = *v7 == -8;
  else
    v11 = 1;
  if (v11)
  {
    do
    {
      v13 = v7[1];
      ++v7;
      v12 = v13;
      if (v13)
        v14 = v12 == -8;
      else
        v14 = 1;
    }
    while (v14);
  }
  return v7;
}

uint64_t mlir::Token::getEndLoc(mlir::Token *this)
{
  return *((_QWORD *)this + 1) + *((_QWORD *)this + 2);
}

uint64_t mlir::Token::getLocRange(mlir::Token *this)
{
  return *((_QWORD *)this + 1);
}

unint64_t mlir::Token::getUnsignedIntegerValue(mlir::Token *this)
{
  unint64_t v1;
  unsigned __int8 *v2;
  unsigned int v3;
  unsigned __int8 *v4;
  unint64_t v6;

  v1 = *((_QWORD *)this + 2);
  if (v1 <= 1)
  {
    v4 = (unsigned __int8 *)*((_QWORD *)this + 1);
    v6 = 0;
    if ((llvm::getAsUnsignedInteger(v4, v1, 0xAu, &v6) & 1) != 0)
      return 0;
  }
  else
  {
    v2 = (unsigned __int8 *)*((_QWORD *)this + 1);
    if (v2[1] == 120)
      v3 = 0;
    else
      v3 = 10;
    v6 = 0;
    if ((llvm::getAsUnsignedInteger(v2, v1, v3, &v6) & 1) != 0)
      return 0;
  }
  if (!HIDWORD(v6))
    return v6 | 0x100000000;
  return 0;
}

unint64_t mlir::Token::getUInt64IntegerValue(unsigned __int8 *a1, unint64_t a2)
{
  unsigned int v2;
  unint64_t v4;

  v2 = 10;
  if (a2 >= 2)
  {
    if (a1[1] == 120)
      v2 = 0;
    else
      v2 = 10;
  }
  v4 = 0;
  if (llvm::getAsUnsignedInteger(a1, a2, v2, &v4))
    return 0;
  else
    return v4;
}

uint64_t mlir::Token::getFloatingPointValue(mlir::Token *this)
{
  double v2;

  v2 = 0.0;
  if (llvm::StringRef::getAsDouble((mlir::Token *)((char *)this + 8), &v2, 1))
    return 0;
  else
    return *(_QWORD *)&v2;
}

unint64_t mlir::Token::getIntTypeBitwidth(mlir::Token *this)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;

  v1 = (_BYTE *)*((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v3 = 1;
  if (*v1 != 105)
    v3 = 2;
  if (v2 < v3)
    v3 = *((_QWORD *)this + 2);
  v5 = 0;
  if ((llvm::getAsUnsignedInteger(&v1[v3], v2 - v3, 0xAu, &v5) & 1) != 0 || HIDWORD(v5))
    return 0;
  else
    return v5 | 0x100000000;
}

uint64_t mlir::Token::getIntTypeSignedness(mlir::Token *this)
{
  int v1;

  v1 = **((unsigned __int8 **)this + 1);
  if (v1 == 105)
    return 0;
  if (v1 == 115)
    return 257;
  return 256;
}

void mlir::Token::getStringValue(mlir::Token *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  std::string::size_type v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 2);
  if (v3)
    v4 = *((_QWORD *)this + 1) + 1;
  else
    v4 = *((_QWORD *)this + 1);
  v5 = v3 - (v3 != 0);
  if (*(_DWORD *)this != 2)
  {
    if (v5 >= v5 - 1)
      --v5;
    if (*(_DWORD *)this == 4)
    {
      if (v5)
        ++v4;
      v5 -= v5 != 0;
    }
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a2, v5);
  if ((_DWORD)v5)
  {
    v6 = 0;
    do
    {
      v8 = *(unsigned __int8 *)(v4 + v6);
      if (v8 == 92)
      {
        v7 = v6 + 2;
        v9 = *(char *)(v4 + v6 + 1);
        if (v9 <= 109)
        {
          LOBYTE(v8) = *(_BYTE *)(v4 + v6 + 1);
          if (v9 == 34 || v9 == 92)
            goto LABEL_14;
LABEL_23:
          v10 = *(unsigned __int8 *)(v4 + v7);
          v7 = v6 + 3;
          LOWORD(v8) = llvm::hexDigitValue(char)::LUT[v10] | (16
                                                            * llvm::hexDigitValue(char)::LUT[*(unsigned __int8 *)(v4 + v6 + 1)]);
          goto LABEL_14;
        }
        if (v9 == 116)
        {
          LOBYTE(v8) = 9;
          goto LABEL_14;
        }
        if (v9 != 110)
          goto LABEL_23;
        LOBYTE(v8) = 10;
      }
      else
      {
        v7 = v6 + 1;
      }
LABEL_14:
      std::string::push_back(a2, v8);
      v6 = v7;
    }
    while (v7 != (_DWORD)v5);
  }
}

void mlir::Token::getHexStringValue(mlir::Token *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v15;
  std::string v16;

  v4 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v5 = v3 != 0;
  v6 = v3 - v5;
  if (v6 >= v6 - 1)
    --v6;
  memset(&v16, 0, sizeof(v16));
  if (v6 < 2 || *(_WORD *)(v4 + v5) != 30768 || (v7 = v6 - 2, (((_DWORD)v6 - 2) & 1) != 0))
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else if (v6 < 3
         || ((std::string::resize(&v16, (v6 - 1) >> 1, 0),
              (v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
           ? (v8 = &v16)
           : (v8 = (std::string *)v16.__r_.__value_.__r.__words[0]),
             v7 < 2))
  {
LABEL_18:
    *a2 = v16;
    a2[1].__r_.__value_.__s.__data_[0] = 1;
  }
  else
  {
    v9 = -(uint64_t)(v7 >> 1);
    v10 = (unsigned __int8 *)(v5 + 2 + v4 + 1);
    while (1)
    {
      v11 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[*(v10 - 1)];
      v12 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[*v10];
      if (v11 == 0xFFFF || v12 == 0xFFFF)
        break;
      v10 += 2;
      v8->__r_.__value_.__s.__data_[0] = v12 | (16 * v11);
      v8 = (std::string *)((char *)v8 + 1);
      if (__CFADD__(v9++, 1))
        goto LABEL_18;
    }
    v15 = SHIBYTE(v16.__r_.__value_.__r.__words[2]);
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    if (v15 < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void mlir::Token::getSymbolReference(mlir::Token *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;

  v3 = *((_QWORD *)this + 2);
  v4 = v3 != 0;
  if (v3)
    v5 = (_BYTE *)(*((_QWORD *)this + 1) + 1);
  else
    v5 = (_BYTE *)*((_QWORD *)this + 1);
  if (*v5 == 34)
  {
    mlir::Token::getStringValue(this, a2);
    return;
  }
  v6 = v3 - v4;
  if ((unint64_t)(v3 - v4) >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v6 >= 0x17)
  {
    v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v7 = v6 | 7;
    v8 = v7 + 1;
    v9 = (std::string *)operator new(v7 + 1);
    a2->__r_.__value_.__l.__size_ = v6;
    a2->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v6;
    if (v3 == v4)
    {
      a2->__r_.__value_.__s.__data_[v6] = 0;
      return;
    }
  }
  memmove(a2, v5, v6);
  a2->__r_.__value_.__s.__data_[v6] = 0;
}

unint64_t mlir::Token::getHashIdentifierNumber(mlir::Token *this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unint64_t v4;

  v1 = *((_QWORD *)this + 2);
  if (v1)
    v2 = (unsigned __int8 *)(*((_QWORD *)this + 1) + 1);
  else
    v2 = (unsigned __int8 *)*((_QWORD *)this + 1);
  v4 = 0;
  if ((llvm::getAsUnsignedInteger(v2, v1 - (v1 != 0), 0xAu, &v4) & 1) != 0 || HIDWORD(v4))
    return 0;
  else
    return v4 | 0x100000000;
}

char *mlir::Token::getTokenSpelling(int a1)
{
  return off_24C060C98[a1 - 13];
}

BOOL mlir::Token::isKeyword(mlir::Token *this)
{
  return (*(_DWORD *)this - 34) < 0x2D;
}

BOOL mlir::Token::isCodeCompletionFor(uint64_t a1, int a2)
{
  char v2;

  if (*(_DWORD *)a1 == 2
    && *(_QWORD *)(a1 + 16)
    && (v2 = a2 - 5, (a2 - 5) <= 6)
    && ((0x4Fu >> v2) & 1) != 0)
  {
    return **(_BYTE **)(a1 + 8) == ((0x222222215E2523uLL >> (8 * v2)) & 0x7F);
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::detail::Parser::parseOptionalType(mlir::detail::Parser *this, mlir::Type *a2)
{
  int v2;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t result;

  v2 = 0;
  v4 = 0;
  switch(*(_DWORD *)(*((_QWORD *)this + 1) + 56))
  {
    case 8:
    case 0xC:
    case 0x26:
    case 0x28:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x3A:
    case 0x3D:
    case 0x40:
    case 0x47:
    case 0x48:
    case 0x4B:
    case 0x4E:
      v5 = mlir::detail::Parser::parseNonFunctionType(this);
      goto LABEL_3;
    case 9:
    case 0xA:
    case 0xB:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x27:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3B:
    case 0x3C:
    case 0x3E:
    case 0x3F:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x49:
    case 0x4A:
    case 0x4C:
    case 0x4D:
      goto LABEL_4;
    case 0x15:
      v5 = mlir::detail::Parser::parseFunctionType(this);
LABEL_3:
      *(_QWORD *)a2 = v5;
      v4 = v5 != 0;
      v2 = 1;
LABEL_4:
      result = v4 | (v2 << 8);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t mlir::detail::Parser::parseType(mlir::detail::Parser *this)
{
  if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 21)
    return mlir::detail::Parser::parseFunctionType(this);
  else
    return mlir::detail::Parser::parseNonFunctionType(this);
}

uint64_t mlir::detail::Parser::parseFunctionType(mlir::detail::Parser *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t FunctionType;
  void *v5;
  uint64_t v7;
  const char *v8;
  __int16 v9;
  unint64_t v10[2];
  unint64_t v11[2];
  void *v12;
  uint64_t v13;
  _BYTE v14[32];
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = *(_QWORD *)"";
  v12 = v14;
  v13 = *(_QWORD *)"";
  if (!mlir::detail::Parser::parseTypeListParens((uint64_t)this, (uint64_t)&v15)
    || (v8 = "expected '->' in function type",
        v9 = 259,
        !mlir::detail::Parser::parseToken((uint64_t)this, 13, (uint64_t)&v8)))
  {
LABEL_12:
    FunctionType = 0;
    v5 = v12;
    if (v12 == v14)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 21)
  {
    if (!mlir::detail::Parser::parseTypeListParens((uint64_t)this, (uint64_t)&v12))
      goto LABEL_12;
  }
  else
  {
    v2 = mlir::detail::Parser::parseNonFunctionType(this);
    if (!v2)
      goto LABEL_12;
    v3 = v13;
    if (v13 >= HIDWORD(v13))
    {
      v7 = v2;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v12, v14, v13 + 1, 8);
      v2 = v7;
      v3 = v13;
    }
    *((_QWORD *)v12 + v3) = v2;
    LODWORD(v13) = v13 + 1;
  }
  mlir::ValueRange::ValueRange(v11, (uint64_t)v15, v16);
  mlir::ValueRange::ValueRange(v10, (uint64_t)v12, v13);
  FunctionType = mlir::Builder::getFunctionType((mlir::MLIRContext **)this, v11[0], v11[1], v10[0], v10[1]);
  v5 = v12;
  if (v12 != v14)
LABEL_13:
    free(v5);
LABEL_14:
  if (v15 != v17)
    free(v15);
  return FunctionType;
}

uint64_t mlir::detail::Parser::parseNonFunctionType(mlir::detail::Parser *this)
{
  uint64_t v2;
  mlir::Token *v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t IntTypeBitwidth;
  unsigned int v14;
  const char *OCGSize;
  uint64_t v16;
  uint64_t v17;
  mlir::MLIRContext *v18;
  uint64_t v19;
  mlir::MLIRContext *v20;
  uint64_t v21;
  mlir::MLIRContext *v22;
  uint64_t v23;
  mlir::MLIRContext *v24;
  uint64_t v25;
  mlir::MLIRContext *v26;
  uint64_t v27;
  mlir::MLIRContext *v28;
  uint64_t v29;
  uint64_t v30;
  mlir::MLIRContext *v31;
  uint64_t v32;
  mlir::MLIRContext *v33;
  uint64_t v34;
  mlir::MLIRContext *v35;
  uint64_t v36;
  mlir::MLIRContext *v37;
  uint64_t v38;
  mlir::MLIRContext *v39;
  uint64_t v40;
  mlir::MLIRContext *v41;
  uint64_t v42;
  mlir::MLIRContext *v43;
  __int16 IntTypeSignedness;
  int v45;
  unsigned int v46;
  uint64_t v47;
  const char *v48;
  __int16 v49;
  __int128 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[3];
  uint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 1);
  v3 = (mlir::Token *)(v2 + 56);
  switch(*(_DWORD *)(v2 + 56))
  {
    case 2:
      if (mlir::Token::isCodeCompletionFor((uint64_t)v3, 8))
        goto LABEL_3;
      result = mlir::detail::Parser::codeCompleteType(this);
      break;
    case 8:
LABEL_3:
      result = mlir::detail::Parser::parseExtendedType(this);
      break;
    case 0xC:
      IntTypeBitwidth = mlir::Token::getIntTypeBitwidth(v3);
      if ((IntTypeBitwidth & 0xFF00000000) == 0)
      {
        *(_QWORD *)&v50 = "invalid integer width";
        v52 = 259;
        mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v50, &v53);
        if (v53)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v54);
        goto LABEL_55;
      }
      v14 = IntTypeBitwidth;
      if (BYTE3(IntTypeBitwidth))
      {
        OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)this + 1)
                                                                                                + 56));
        v48 = "integer bitwidth is limited to ";
        v49 = 259;
        mlir::detail::Parser::emitError((uint64_t)this, OCGSize, (uint64_t)&v48, &v50);
        v16 = mlir::InFlightDiagnostic::operator<<<unsigned int const&>((uint64_t)&v50, &mlir::IntegerType::kMaxWidth);
        mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v16, " bits");
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v50);
        goto LABEL_55;
      }
      IntTypeSignedness = mlir::Token::getIntTypeSignedness((mlir::Token *)(*((_QWORD *)this + 1) + 56));
      if ((_BYTE)IntTypeSignedness)
        v45 = 1;
      else
        v45 = 2;
      if ((IntTypeSignedness & 0xFF00) != 0)
        v46 = v45;
      else
        v46 = 0;
      mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)this + 1) + 8), (uint64_t)&v50);
      v47 = *((_QWORD *)this + 1);
      *(_OWORD *)(v47 + 56) = v50;
      *(_QWORD *)(v47 + 72) = v51;
      result = mlir::IntegerType::get(***((_QWORD ***)this + 1), v14, v46);
      break;
    case 0x26:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      v17 = *((_QWORD *)this + 1);
      *(_OWORD *)(v17 + 56) = v50;
      *(_QWORD *)(v17 + 72) = v51;
      result = mlir::Builder::getBF16Type((mlir::BFloat16Type **)this, v18);
      break;
    case 0x28:
      result = mlir::detail::Parser::parseComplexType(this);
      break;
    case 0x2C:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      v19 = *((_QWORD *)this + 1);
      *(_OWORD *)(v19 + 56) = v50;
      *(_QWORD *)(v19 + 72) = v51;
      result = mlir::Builder::getF16Type((mlir::Float16Type **)this, v20);
      break;
    case 0x2D:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      v21 = *((_QWORD *)this + 1);
      *(_OWORD *)(v21 + 56) = v50;
      *(_QWORD *)(v21 + 72) = v51;
      result = mlir::Builder::getF32Type((mlir::Float32Type **)this, v22);
      break;
    case 0x2E:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      v23 = *((_QWORD *)this + 1);
      *(_OWORD *)(v23 + 56) = v50;
      *(_QWORD *)(v23 + 72) = v51;
      result = mlir::Builder::getF64Type((mlir::Float64Type **)this, v24);
      break;
    case 0x2F:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      v25 = *((_QWORD *)this + 1);
      *(_OWORD *)(v25 + 56) = v50;
      *(_QWORD *)(v25 + 72) = v51;
      result = mlir::Builder::getF80Type((mlir::Float80Type **)this, v26);
      break;
    case 0x30:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      v27 = *((_QWORD *)this + 1);
      *(_OWORD *)(v27 + 56) = v50;
      *(_QWORD *)(v27 + 72) = v51;
      result = mlir::Builder::getFloat8E5M2Type((mlir::Float8E5M2Type **)this, v28);
      break;
    case 0x31:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      v29 = *((_QWORD *)this + 1);
      *(_OWORD *)(v29 + 56) = v50;
      *(_QWORD *)(v29 + 72) = v51;
      result = mlir::Builder::getFloat8E4M3FNType((ZinIrHazardNode **)this);
      break;
    case 0x32:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      v30 = *((_QWORD *)this + 1);
      *(_OWORD *)(v30 + 56) = v50;
      *(_QWORD *)(v30 + 72) = v51;
      result = mlir::Builder::getFloat8E5M2FNUZType((mlir::Float8E5M2FNUZType **)this, v31);
      break;
    case 0x33:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      v32 = *((_QWORD *)this + 1);
      *(_OWORD *)(v32 + 56) = v50;
      *(_QWORD *)(v32 + 72) = v51;
      result = mlir::Builder::getFloat8E4M3FNUZType((mlir::Float8E4M3FNUZType **)this, v33);
      break;
    case 0x34:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      v34 = *((_QWORD *)this + 1);
      *(_OWORD *)(v34 + 56) = v50;
      *(_QWORD *)(v34 + 72) = v51;
      result = mlir::Builder::getFloat8E4M3B11FNUZType((mlir::Float8E4M3B11FNUZType **)this, v35);
      break;
    case 0x35:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      v36 = *((_QWORD *)this + 1);
      *(_OWORD *)(v36 + 56) = v50;
      *(_QWORD *)(v36 + 72) = v51;
      result = mlir::Builder::getF128Type((mlir::Float128Type **)this, v37);
      break;
    case 0x3A:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      v38 = *((_QWORD *)this + 1);
      *(_OWORD *)(v38 + 56) = v50;
      *(_QWORD *)(v38 + 72) = v51;
      result = mlir::Builder::getIndexType((mlir::IndexType **)this, v39);
      break;
    case 0x3D:
      result = mlir::detail::Parser::parseMemRefType(this);
      break;
    case 0x40:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      v40 = *((_QWORD *)this + 1);
      *(_OWORD *)(v40 + 56) = v50;
      *(_QWORD *)(v40 + 72) = v51;
      result = mlir::Builder::getNoneType((mlir::NoneType **)this, v41);
      break;
    case 0x47:
      result = mlir::detail::Parser::parseTensorType(this);
      break;
    case 0x48:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      v42 = *((_QWORD *)this + 1);
      *(_OWORD *)(v42 + 56) = v50;
      *(_QWORD *)(v42 + 72) = v51;
      result = mlir::Builder::getTF32Type((mlir::FloatTF32Type **)this, v43);
      break;
    case 0x4B:
      result = mlir::detail::Parser::parseTupleType(this);
      break;
    case 0x4E:
      result = mlir::detail::Parser::parseVectorType(this);
      break;
    default:
      *(_QWORD *)&v50 = "expected non-function type";
      v52 = 259;
      mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v50, v55);
      if (v55[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
      if (v62)
      {
        v5 = v60;
        if (v60)
        {
          v6 = v61;
          v7 = v60;
          if (v61 != v60)
          {
            do
              v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
            while (v6 != v5);
            v7 = v60;
          }
          v61 = v5;
          operator delete(v7);
        }
        v8 = v58;
        if (v58)
        {
          v9 = v59;
          v10 = v58;
          if (v59 != v58)
          {
            do
            {
              v12 = *--v9;
              v11 = v12;
              *v9 = 0;
              if (v12)
                MEMORY[0x20BD002D4](v11, 0x1000C8077774924);
            }
            while (v9 != v8);
            v10 = v58;
          }
          v59 = v8;
          operator delete(v10);
        }
        if (v56 != &v57)
          free(v56);
      }
LABEL_55:
      result = 0;
      break;
  }
  return result;
}

uint64_t mlir::detail::Parser::parseFunctionResultTypes(mlir::detail::Parser *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(*((_QWORD *)a1 + 1) + 56) == 21)
    return mlir::detail::Parser::parseTypeListParens((uint64_t)a1, a2);
  result = mlir::detail::Parser::parseNonFunctionType(a1);
  if (result)
  {
    v4 = result;
    v5 = *(unsigned int *)(a2 + 8);
    if (v5 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v5 + 1, 8);
      LODWORD(v5) = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = v4;
    ++*(_DWORD *)(a2 + 8);
    return 1;
  }
  return result;
}

BOOL mlir::detail::Parser::parseTypeListParens(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  __int16 v9;

  *(_QWORD *)&v7 = "expected '('";
  v9 = 259;
  if (!mlir::detail::Parser::parseToken(a1, 21, (uint64_t)&v7))
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v4 + 56) == 28)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v7);
    v5 = *(_QWORD *)(a1 + 8);
    *(_OWORD *)(v5 + 56) = v7;
    *(_QWORD *)(v5 + 72) = v8;
    return 1;
  }
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = a2;
  if (!mlir::detail::Parser::parseCommaSeparatedList(a1, 0, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseTypeListNoParens(llvm::SmallVectorImpl<mlir::Type> &)::$_0>, (uint64_t)&v7, 0, 0))return 0;
  *(_QWORD *)&v7 = "expected ')'";
  v9 = 259;
  return mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v7) != 0;
}

uint64_t mlir::detail::Parser::parseTypeListNoParens(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a1;
  v3[1] = a2;
  return mlir::detail::Parser::parseCommaSeparatedList(a1, 0, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseTypeListNoParens(llvm::SmallVectorImpl<mlir::Type> &)::$_0>, (uint64_t)v3, 0, 0);
}

uint64_t mlir::detail::Parser::parseComplexType(mlir::detail::Parser *this)
{
  uint64_t v2;
  const char *OCGSize;
  uint64_t v4;
  void *v5;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int16 v29;
  _QWORD v30[3];
  void *v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  void *__p;
  _QWORD *v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)this + 1) + 8), (uint64_t)&v27);
  v2 = *((_QWORD *)this + 1);
  *(_OWORD *)(v2 + 56) = v27;
  *(_QWORD *)(v2 + 72) = v28;
  *(_QWORD *)&v27 = "expected '<' in complex type";
  v29 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)&v27))
    return 0;
  OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)this + 1) + 56));
  if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 21)
  {
    v4 = mlir::detail::Parser::parseFunctionType(this);
    if (!v4)
      return 0;
  }
  else
  {
    v4 = mlir::detail::Parser::parseNonFunctionType(this);
    if (!v4)
      return 0;
  }
  *(_QWORD *)&v27 = "expected '>' in complex type";
  v29 = 259;
  if (mlir::detail::Parser::parseToken((uint64_t)this, 19, (uint64_t)&v27))
  {
    v5 = *(void **)(*(_QWORD *)v4 + 136);
    if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      return mlir::ComplexType::get(v4);
    }
    *(_QWORD *)&v27 = "invalid element type for complex";
    v29 = 259;
    mlir::detail::Parser::emitError((uint64_t)this, OCGSize, (uint64_t)&v27, v30);
    if (v30[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
    if (v37)
    {
      v19 = __p;
      if (__p)
      {
        v20 = v36;
        v21 = __p;
        if (v36 != __p)
        {
          do
            v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          v21 = __p;
        }
        v36 = v19;
        operator delete(v21);
      }
      v22 = v33;
      if (v33)
      {
        v23 = v34;
        v24 = v33;
        if (v34 != v33)
        {
          do
          {
            v26 = *--v23;
            v25 = v26;
            *v23 = 0;
            if (v26)
              MEMORY[0x20BD002D4](v25, 0x1000C8077774924);
          }
          while (v23 != v22);
          v24 = v33;
        }
        v34 = v22;
        operator delete(v24);
      }
      if (v31 != &v32)
        free(v31);
    }
  }
  return 0;
}

uint64_t mlir::detail::Parser::parseMemRefType(mlir::detail::Parser *this)
{
  uint64_t OCGSize;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t Checked;
  void *v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 *v31;
  __int16 v32;
  char v33;
  uint64_t v34;
  _QWORD v35[3];
  void *v36;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  void *__p;
  _QWORD *v41;
  char v42;
  __int128 v43;
  _QWORD v44[2];
  __int16 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)this + 1) + 56));
  mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)this + 1) + 8), (uint64_t)&v43);
  v3 = *((_QWORD *)this + 1);
  *(_OWORD *)(v3 + 56) = v43;
  *(_QWORD *)(v3 + 72) = v44[0];
  *(_QWORD *)&v43 = "expected '<' in memref type";
  v45 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)&v43))
    return 0;
  *(_QWORD *)&v43 = v44;
  *((_QWORD *)&v43 + 1) = *(_QWORD *)"";
  v4 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v4 + 56) == 30)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v30);
    v5 = *((_QWORD *)this + 1);
    *(_OWORD *)(v5 + 56) = v30;
    *(_QWORD *)(v5 + 72) = v31;
    v33 = 1;
    if (!mlir::detail::Parser::parseXInDimensionList(this))
      goto LABEL_55;
    v6 = *((_QWORD *)this + 1);
  }
  else
  {
    v33 = 0;
    LOBYTE(v26[0]) = 1;
    *(_QWORD *)&v30 = this;
    *((_QWORD *)&v30 + 1) = v26;
    v31 = &v43;
    while (1)
    {
      v6 = *((_QWORD *)this + 1);
      if ((*(_DWORD *)(v6 + 56) | 0x10) != 0x1A)
        break;
      if (!mlir::detail::Parser::parseDimensionListRanked(llvm::SmallVectorImpl<long long> &,BOOL,BOOL)::$_0::operator()((uint64_t)&v30)
        || !mlir::detail::Parser::parseXInDimensionList(this))
      {
        goto LABEL_55;
      }
    }
  }
  v7 = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(v6 + 56));
  if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 21)
  {
    v8 = mlir::detail::Parser::parseFunctionType(this);
    if (!v8)
      goto LABEL_55;
  }
  else
  {
    v8 = mlir::detail::Parser::parseNonFunctionType(this);
    if (!v8)
      goto LABEL_55;
  }
  *(_QWORD *)&v30 = v8;
  if (mlir::Type::isIntOrIndexOrFloat((mlir::Type *)&v30)
    || ((v10 = *(void **)(*(_QWORD *)v30 + 136), v10 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      ? (v11 = v10 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      : (v11 = 1),
        !v11 ? (v12 = v10 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) : (v12 = 1),
        !v12 ? (v13 = v10 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id) : (v13 = 1),
        v13 || mlir::detail::InterfaceMap::lookup<mlir::MemRefElementTypeInterface>(*(_QWORD *)v30 + 8)))
  {
    v28 = 0;
    v29 = 0;
    v26[0] = this;
    v26[1] = &v28;
    v26[2] = &v27;
    v26[3] = &v33;
    v27 = 0;
    v14 = *((_QWORD *)this + 1);
    if (*(_DWORD *)(v14 + 56) == 19)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v14 + 8), (uint64_t)&v30);
      v15 = *((_QWORD *)this + 1);
      *(_OWORD *)(v15 + 56) = v30;
      *(_QWORD *)(v15 + 72) = v31;
    }
    else
    {
      *(_QWORD *)&v30 = "expected ',' or '>' in memref type";
      v32 = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)this, 16, (uint64_t)&v30)
        || !mlir::detail::Parser::parseCommaSeparatedListUntil((uint64_t)this, 19, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseMemRefType(void)::$_0>, (uint64_t)v26, 0))
      {
        goto LABEL_55;
      }
    }
    if (v33)
    {
      v34 = OCGSize;
      *(_QWORD *)&v30 = this;
      *((_QWORD *)&v30 + 1) = &v34;
      Checked = mlir::UnrankedMemRefType::getChecked((void (*)(_QWORD *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::UnrankedMemRefType mlir::detail::Parser::getChecked<mlir::UnrankedMemRefType,mlir::Type &,mlir::Attribute &>(llvm::SMLoc,mlir::Type &,mlir::Attribute &)::{lambda(void)#1}>, (uint64_t)&v30, v8, v27);
      v16 = (void *)v43;
      if ((_QWORD *)v43 == v44)
        return Checked;
    }
    else
    {
      v34 = OCGSize;
      *(_QWORD *)&v30 = this;
      *((_QWORD *)&v30 + 1) = &v34;
      Checked = mlir::MemRefType::getChecked((void (*)(_QWORD *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::MemRefType mlir::detail::Parser::getChecked<mlir::MemRefType,llvm::SmallVector<long long,4u> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &>(llvm::SMLoc,llvm::SmallVector<long long,4u> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &)::{lambda(void)#1}>, (uint64_t)&v30, v43, (mlir::AffineMap *)DWORD2(v43), v8, v28, v29, v27);
      v16 = (void *)v43;
      if ((_QWORD *)v43 == v44)
        return Checked;
    }
    goto LABEL_56;
  }
  *(_QWORD *)&v30 = "invalid memref element type";
  v32 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, v7, (uint64_t)&v30, v35);
  if (v35[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v35);
  if (v42)
  {
    v17 = __p;
    if (__p)
    {
      v18 = v41;
      v19 = __p;
      if (v41 != __p)
      {
        do
          v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        v19 = __p;
      }
      v41 = v17;
      operator delete(v19);
    }
    v20 = v38;
    if (v38)
    {
      v21 = v39;
      v22 = v38;
      if (v39 != v38)
      {
        do
        {
          v24 = *--v21;
          v23 = v24;
          *v21 = 0;
          if (v24)
            MEMORY[0x20BD002D4](v23, 0x1000C8077774924);
        }
        while (v21 != v20);
        v22 = v38;
      }
      v39 = v20;
      operator delete(v22);
    }
    if (v36 != &v37)
      free(v36);
  }
LABEL_55:
  Checked = 0;
  v16 = (void *)v43;
  if ((_QWORD *)v43 != v44)
LABEL_56:
    free(v16);
  return Checked;
}

uint64_t mlir::detail::Parser::parseXInDimensionList(mlir::detail::Parser *this)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v15;
  __int16 v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD *v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v2 + 56) == 3 && (v3 = *(_BYTE **)(v2 + 64), *v3 == 120))
  {
    if (*(_QWORD *)(v2 + 72) != 1)
      *(_QWORD *)(v2 + 40) = v3 + 1;
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v17);
    v4 = *((_QWORD *)this + 1);
    *(_OWORD *)(v4 + 56) = v17;
    *(_QWORD *)(v4 + 72) = v18;
    return 1;
  }
  else
  {
    v15 = "expected 'x' in dimension list";
    v16 = 259;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v15, &v17);
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v17);
    if ((_QWORD)v17)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v17);
    if (v25)
    {
      v6 = __p;
      if (__p)
      {
        v7 = v24;
        v8 = __p;
        if (v24 != __p)
        {
          do
            v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
          while (v7 != v6);
          v8 = __p;
        }
        v24 = v6;
        operator delete(v8);
      }
      v9 = v21;
      if (v21)
      {
        v10 = v22;
        v11 = v21;
        if (v22 != v21)
        {
          do
          {
            v13 = *--v10;
            v12 = v13;
            *v10 = 0;
            if (v13)
              MEMORY[0x20BD002D4](v12, 0x1000C8077774924);
          }
          while (v10 != v9);
          v11 = v21;
        }
        v22 = v9;
        operator delete(v11);
      }
      if (v19 != &v20)
        free(v19);
    }
  }
  return v5;
}

uint64_t mlir::detail::Parser::parseDimensionListRanked(mlir::detail::Parser *a1, uint64_t a2, char a3, int a4)
{
  uint64_t v5;
  _QWORD v7[3];
  char v8;

  v8 = a3;
  v7[0] = a1;
  v7[1] = &v8;
  v7[2] = a2;
  if (a4)
  {
    while ((*(_DWORD *)(*((_QWORD *)a1 + 1) + 56) | 0x10) == 0x1A)
    {
      if (!mlir::detail::Parser::parseDimensionListRanked(llvm::SmallVectorImpl<long long> &,BOOL,BOOL)::$_0::operator()((uint64_t)v7)
        || !mlir::detail::Parser::parseXInDimensionList(a1))
      {
        return 0;
      }
    }
    return 1;
  }
  if ((*(_DWORD *)(*((_QWORD *)a1 + 1) + 56) | 0x10) != 0x1A)
    return 1;
  do
  {
    if (!mlir::detail::Parser::parseDimensionListRanked(llvm::SmallVectorImpl<long long> &,BOOL,BOOL)::$_0::operator()((uint64_t)v7))
      break;
    v5 = *((_QWORD *)a1 + 1);
    if (*(_DWORD *)(v5 + 56) != 3 || **(_BYTE **)(v5 + 64) != 120)
      return 1;
  }
  while (mlir::detail::Parser::parseXInDimensionList(a1));
  return 0;
}

uint64_t mlir::detail::Parser::parseTensorType(mlir::detail::Parser *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const char *OCGSize;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  __int128 *v27;
  __int16 v28;
  mlir::detail::Parser *v29;
  _QWORD *v30;
  _QWORD v31[24];
  _QWORD v32[3];
  void *v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  void *__p;
  _QWORD *v38;
  char v39;
  __int128 v40;
  _QWORD v41[2];
  __int16 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)this + 1) + 8), (uint64_t)&v40);
  v2 = *((_QWORD *)this + 1);
  *(_OWORD *)(v2 + 56) = v40;
  *(_QWORD *)(v2 + 72) = v41[0];
  *(_QWORD *)&v40 = "expected '<' in tensor type";
  v42 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)&v40))
    return 0;
  *(_QWORD *)&v40 = v41;
  *((_QWORD *)&v40 + 1) = *(_QWORD *)"";
  v3 = *((_QWORD *)this + 1);
  v4 = *(_DWORD *)(v3 + 56);
  if (v4 == 30)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v26);
    v5 = *((_QWORD *)this + 1);
    *(_OWORD *)(v5 + 56) = v26;
    *(_QWORD *)(v5 + 72) = v27;
    if (!mlir::detail::Parser::parseXInDimensionList(this))
      goto LABEL_51;
    v6 = *((_QWORD *)this + 1);
  }
  else
  {
    LOBYTE(v30) = 1;
    *(_QWORD *)&v26 = this;
    *((_QWORD *)&v26 + 1) = &v30;
    v27 = &v40;
    while (1)
    {
      v6 = *((_QWORD *)this + 1);
      if ((*(_DWORD *)(v6 + 56) | 0x10) != 0x1A)
        break;
      if (!mlir::detail::Parser::parseDimensionListRanked(llvm::SmallVectorImpl<long long> &,BOOL,BOOL)::$_0::operator()((uint64_t)&v26)
        || !mlir::detail::Parser::parseXInDimensionList(this))
      {
        goto LABEL_51;
      }
    }
  }
  OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(v6 + 56));
  if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 21)
  {
    v8 = (uint64_t *)mlir::detail::Parser::parseFunctionType(this);
    v30 = 0;
    v9 = *((_QWORD *)this + 1);
    if (*(_DWORD *)(v9 + 56) != 16)
      goto LABEL_16;
  }
  else
  {
    v8 = (uint64_t *)mlir::detail::Parser::parseNonFunctionType(this);
    v30 = 0;
    v9 = *((_QWORD *)this + 1);
    if (*(_DWORD *)(v9 + 56) != 16)
      goto LABEL_16;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v9 + 8), (uint64_t)&v26);
  v11 = *((_QWORD *)this + 1);
  *(_OWORD *)(v11 + 56) = v26;
  *(_QWORD *)(v11 + 72) = v27;
  v12 = mlir::detail::Parser::parseOptionalAttribute((uint64_t)this, &v30, 0);
  if (v12 < 0x100u
    || (_BYTE)v12
    && ((v14 = v30) == 0
      ? (_QWORD *)(v15 = 0)
      : (v15 = mlir::detail::InterfaceMap::lookup<mlir::VerifiableTensorEncoding>(*v30 + 8)) == 0
      ? (v14 = 0)
      : (_QWORD *)(v15 = mlir::detail::InterfaceMap::lookup<mlir::VerifiableTensorEncoding>(*v14 + 8)),
        (*(_QWORD *)&v26 = v14, *((_QWORD *)&v26 + 1) = v15, !v14)
     || (v29 = this,
         mlir::VerifiableTensorEncoding::verifyEncoding((uint64_t)&v26, v40, DWORD2(v40), (uint64_t)v8, (uint64_t)llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseTensorType(void)::$_0>, (uint64_t)&v29))))
  {
LABEL_16:
    if (v8)
    {
      *(_QWORD *)&v26 = "expected '>' in tensor type";
      v28 = 259;
      if (mlir::detail::Parser::parseToken((uint64_t)this, 19, (uint64_t)&v26))
      {
        if (mlir::TensorType::isValidElementType(v8))
        {
          if (v4 == 30)
          {
            if (v30)
            {
              *(_QWORD *)&v26 = "cannot apply encoding to unranked tensor";
              v28 = 259;
              mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v26, v31);
              mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v31);
              v10 = 0;
              v13 = (void *)v40;
              if ((_QWORD *)v40 == v41)
                return v10;
              goto LABEL_52;
            }
            v24 = mlir::UnrankedTensorType::get((uint64_t)v8);
          }
          else
          {
            v24 = mlir::RankedTensorType::get(v40, DWORD2(v40), (uint64_t)v8, (uint64_t)v30);
          }
          v10 = v24;
          v13 = (void *)v40;
          if ((_QWORD *)v40 == v41)
            return v10;
LABEL_52:
          free(v13);
          return v10;
        }
        *(_QWORD *)&v26 = "invalid tensor element type";
        v28 = 259;
        mlir::detail::Parser::emitError((uint64_t)this, OCGSize, (uint64_t)&v26, v32);
        if (v32[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
        if (v39)
        {
          v16 = __p;
          if (__p)
          {
            v17 = v38;
            v18 = __p;
            if (v38 != __p)
            {
              do
                v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
              while (v17 != v16);
              v18 = __p;
            }
            v38 = v16;
            operator delete(v18);
          }
          v19 = v35;
          if (v35)
          {
            v20 = v36;
            v21 = v35;
            if (v36 != v35)
            {
              do
              {
                v23 = *--v20;
                v22 = v23;
                *v20 = 0;
                if (v23)
                  MEMORY[0x20BD002D4](v22, 0x1000C8077774924);
              }
              while (v20 != v19);
              v21 = v35;
            }
            v36 = v19;
            operator delete(v21);
          }
          if (v33 != &v34)
          {
            free(v33);
            v10 = 0;
            v13 = (void *)v40;
            if ((_QWORD *)v40 == v41)
              return v10;
            goto LABEL_52;
          }
        }
      }
    }
  }
LABEL_51:
  v10 = 0;
  v13 = (void *)v40;
  if ((_QWORD *)v40 != v41)
    goto LABEL_52;
  return v10;
}

uint64_t mlir::detail::Parser::parseTupleType(mlir::detail::Parser *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  mlir::MLIRContext *v5;
  uint64_t v6;
  mlir::MLIRContext *v7;
  void *v8;
  _QWORD v10[4];
  __int16 v11;
  unint64_t v12[2];
  void *v13[2];
  _QWORD v14[2];
  __int16 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)this + 1) + 8), (uint64_t)v13);
  v2 = *((_QWORD *)this + 1);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)v13;
  *(_QWORD *)(v2 + 72) = v14[0];
  v13[0] = "expected '<' in tuple type";
  v15 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)v13))
    return 0;
  v3 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v3 + 56) != 19)
  {
    v13[0] = v14;
    v13[1] = *(void **)"";
    v10[0] = this;
    v10[1] = v13;
    if (mlir::detail::Parser::parseCommaSeparatedList((uint64_t)this, 0, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseTypeListNoParens(llvm::SmallVectorImpl<mlir::Type> &)::$_0>, (uint64_t)v10, 0, 0)&& (v10[0] = "expected '>' in tuple type", v11 = 259, mlir::detail::Parser::parseToken((uint64_t)this, 19, (uint64_t)v10)))
    {
      v7 = (mlir::MLIRContext *)***((_QWORD ***)this + 1);
      mlir::ValueRange::ValueRange(v12, (uint64_t)v13[0], LODWORD(v13[1]));
      v6 = mlir::TupleType::get(v7, v12[0], v12[1]);
      v8 = v13[0];
      if (v13[0] == v14)
        return v6;
    }
    else
    {
      v6 = 0;
      v8 = v13[0];
      if (v13[0] == v14)
        return v6;
    }
    free(v8);
    return v6;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)v13);
  v4 = *((_QWORD *)this + 1);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)v13;
  *(_QWORD *)(v4 + 72) = v14[0];
  return mlir::TupleType::get(***((mlir::TupleType ****)this + 1), v5);
}

uint64_t mlir::detail::Parser::parseVectorType(mlir::detail::Parser *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v22;
  const char *OCGSize;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[4];
  __int16 v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  _QWORD v38[24];
  _QWORD v39[3];
  void *v40;
  uint64_t v41;
  void *v42;
  _QWORD *v43;
  void *__p;
  _QWORD *v45;
  char v46;
  __int128 v47;
  _QWORD v48[2];
  __int16 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)this + 1) + 8), (uint64_t)&v47);
  v2 = *((_QWORD *)this + 1);
  *(_OWORD *)(v2 + 56) = v47;
  *(_QWORD *)(v2 + 72) = v48[0];
  *(_QWORD *)&v47 = "expected '<' in vector type";
  v49 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)&v47))
    return 0;
  *(_QWORD *)&v47 = v48;
  *((_QWORD *)&v47 + 1) = *(_QWORD *)"";
  v35 = &v37;
  v36 = xmmword_207A80460;
  if (!mlir::detail::Parser::parseVectorDimensionList(this, (uint64_t)&v47, &v35))
  {
LABEL_74:
    v7 = 0;
    v22 = v35;
    if (v35 == &v37)
      goto LABEL_76;
    goto LABEL_75;
  }
  if (DWORD2(v47))
  {
    v3 = (uint64_t *)v47;
    v4 = 8 * DWORD2(v47);
    while (*v3 > 0)
    {
      ++v3;
      v4 -= 8;
      if (!v4)
        goto LABEL_7;
    }
    OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)this + 1)
                                                                                            + 56));
    v33[0] = "vector types must have positive constant sizes";
    v34 = 259;
    mlir::detail::Parser::emitError((uint64_t)this, OCGSize, (uint64_t)v33, v39);
    if (v39[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v39);
    if (v46)
    {
      v24 = __p;
      if (__p)
      {
        v25 = v45;
        v26 = __p;
        if (v45 != __p)
        {
          do
            v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
          while (v25 != v24);
          v26 = __p;
        }
        v45 = v24;
        operator delete(v26);
      }
      v27 = v42;
      if (v42)
      {
        v28 = v43;
        v29 = v42;
        if (v43 != v42)
        {
          do
          {
            v31 = *--v28;
            v30 = v31;
            *v28 = 0;
            if (v31)
              MEMORY[0x20BD002D4](v30, 0x1000C8077774924);
          }
          while (v28 != v27);
          v29 = v42;
        }
        v43 = v27;
        operator delete(v29);
      }
      if (v40 != &v41)
        free(v40);
    }
    goto LABEL_74;
  }
LABEL_7:
  v5 = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((_QWORD *)this + 1) + 56));
  if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 21)
  {
    v6 = mlir::detail::Parser::parseFunctionType(this);
    if (!v6)
      goto LABEL_74;
  }
  else
  {
    v6 = mlir::detail::Parser::parseNonFunctionType(this);
    if (!v6)
      goto LABEL_74;
  }
  v33[0] = "expected '>' in vector type";
  v34 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 19, (uint64_t)v33))
    goto LABEL_74;
  v8 = *(void **)(*(_QWORD *)v6 + 136);
  if (v8 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    v7 = mlir::VectorType::get(v47, DWORD2(v47), v6, v35, v36);
    v22 = v35;
    if (v35 == &v37)
      goto LABEL_76;
LABEL_75:
    free(v22);
    goto LABEL_76;
  }
  v33[0] = "vector elements must be int/index/float type";
  v34 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, v5, (uint64_t)v33, v38);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v38);
  v7 = 0;
  v22 = v35;
  if (v35 != &v37)
    goto LABEL_75;
LABEL_76:
  if ((_QWORD *)v47 != v48)
    free((void *)v47);
  return v7;
}

uint64_t mlir::InFlightDiagnostic::operator<<<unsigned int const&>(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v11;
  BOOL v12;
  char *v13;
  int v14;
  uint64_t v15;

  if (*(_QWORD *)a1)
  {
    v3 = a1 + 24;
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *a2;
    v14 = 5;
    v15 = v5;
    v6 = *(unsigned int *)(a1 + 32);
    v7 = &v14;
    if (v6 >= *(_DWORD *)(a1 + 36))
    {
      v11 = v6 + 1;
      v12 = v4 + 24 * v6 > (unint64_t)&v14;
      if (v4 <= (unint64_t)&v14 && v12)
      {
        v13 = (char *)&v14 - v4;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        v4 = *(_QWORD *)(a1 + 24);
        v7 = (int *)&v13[v4];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        v4 = *(_QWORD *)(a1 + 24);
        v7 = &v14;
      }
    }
    v8 = v4 + 24 * *(unsigned int *)(a1 + 32);
    v9 = *(_OWORD *)v7;
    *(_QWORD *)(v8 + 16) = *((_QWORD *)v7 + 2);
    *(_OWORD *)v8 = v9;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

uint64_t mlir::detail::Parser::parseVectorDimensionList(mlir::detail::Parser *a1, uint64_t a2, _QWORD *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v27;
  __int16 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  void *__p;
  _QWORD *v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v6 = (void *)(a2 + 16);
  v7 = a3 + 3;
  while (1)
  {
    v8 = *((_QWORD *)a1 + 1);
    v9 = *(_DWORD *)(v8 + 56);
    if (v9 == 22)
    {
      v29 = 0;
      mlir::Lexer::lexToken((mlir::Lexer *)(v8 + 8), (uint64_t)&v30);
      v11 = *((_QWORD *)a1 + 1);
      *(_OWORD *)(v11 + 56) = v30;
      *(_QWORD *)(v11 + 72) = v31;
      v10 = 1;
      if (!mlir::detail::Parser::parseIntegerInDimensionList(a1, (unint64_t *)&v29))
        return 0;
    }
    else
    {
      if (v9 != 10)
        return 1;
      v10 = 0;
      v29 = 0;
      if (!mlir::detail::Parser::parseIntegerInDimensionList(a1, (unint64_t *)&v29))
        return 0;
    }
    v12 = v29;
    v13 = *(unsigned int *)(a2 + 8);
    if (v13 >= *(unsigned int *)(a2 + 12))
      break;
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v13) = v29;
    ++*(_DWORD *)(a2 + 8);
    if (v10)
      goto LABEL_9;
LABEL_11:
    v16 = a3[1];
    if ((unint64_t)(v16 + 1) > a3[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, v7, v16 + 1, 1);
      v16 = a3[1];
    }
    *(_BYTE *)(*a3 + v16) = v10;
    ++a3[1];
    if (!mlir::detail::Parser::parseXInDimensionList(a1))
      return 0;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v6, v13 + 1, 8);
  *(_QWORD *)(*(_QWORD *)a2 + 8 * (*(_DWORD *)(a2 + 8))++) = v12;
  if (!v10)
    goto LABEL_11;
LABEL_9:
  v14 = *((_QWORD *)a1 + 1);
  if (*(_DWORD *)(v14 + 56) == 29)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v14 + 8), (uint64_t)&v30);
    v15 = *((_QWORD *)a1 + 1);
    *(_OWORD *)(v15 + 56) = v30;
    *(_QWORD *)(v15 + 72) = v31;
    goto LABEL_11;
  }
  v27 = "missing ']' closing scalable dimension";
  v28 = 259;
  mlir::detail::Parser::emitWrongTokenError((uint64_t)a1, (uint64_t)&v27, &v30);
  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v30);
  if ((_QWORD)v30)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v30);
  if (v38)
  {
    v18 = __p;
    if (__p)
    {
      v19 = v37;
      v20 = __p;
      if (v37 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v37 = v18;
      operator delete(v20);
    }
    v21 = v34;
    if (v34)
    {
      v22 = v35;
      v23 = v34;
      if (v35 != v34)
      {
        do
        {
          v25 = *--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
        }
        while (v22 != v21);
        v23 = v34;
      }
      v35 = v21;
      operator delete(v23);
    }
    if (v32 != &v33)
      free(v32);
  }
  return v17;
}

uint64_t mlir::detail::Parser::parseIntegerInDimensionList(mlir::detail::Parser *this, unint64_t *a2)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  mlir::Lexer *v8;
  unint64_t UInt64IntegerValue;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  __int128 v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  void *__p;
  _QWORD *v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  v5 = (unsigned __int8 *)v4[8];
  v6 = v4[9];
  if (v6 >= 2)
  {
    v7 = v5 + 1;
    if (v5[1] == 120)
    {
      *a2 = 0;
      v8 = (mlir::Lexer *)(v4 + 1);
      v4[5] = v7;
LABEL_7:
      mlir::Lexer::lexToken(v8, (uint64_t)&v24);
      v11 = *((_QWORD *)this + 1);
      *(_OWORD *)(v11 + 56) = v24;
      *(_QWORD *)(v11 + 72) = v25;
      return 1;
    }
  }
  UInt64IntegerValue = mlir::Token::getUInt64IntegerValue(v5, v6);
  if (v10 && (UInt64IntegerValue & 0x8000000000000000) == 0)
  {
    *a2 = UInt64IntegerValue;
    v8 = (mlir::Lexer *)(*((_QWORD *)this + 1) + 8);
    goto LABEL_7;
  }
  v22 = "invalid dimension";
  v23 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v22, &v24);
  v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v24);
  if ((_QWORD)v24)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v24);
  if (v32)
  {
    v14 = __p;
    if (__p)
    {
      v15 = v31;
      v16 = __p;
      if (v31 != __p)
      {
        do
          v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        v16 = __p;
      }
      v31 = v14;
      operator delete(v16);
    }
    v17 = v28;
    if (v28)
    {
      v18 = v29;
      v19 = v28;
      if (v29 != v28)
      {
        do
        {
          v21 = *--v18;
          v20 = v21;
          *v18 = 0;
          if (v21)
            MEMORY[0x20BD002D4](v20, 0x1000C8077774924);
        }
        while (v18 != v17);
        v19 = v28;
      }
      v29 = v17;
      operator delete(v19);
    }
    if (v26 != &v27)
      free(v26);
  }
  return v12;
}

uint64_t mlir::detail::Parser::parseDimensionListRanked(llvm::SmallVectorImpl<long long> &,BOOL,BOOL)::$_0::operator()(uint64_t a1)
{
  mlir::detail::Parser *v2;
  uint64_t OCGSize;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v21;
  __int16 v22;
  uint64_t v23[2];
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  void *__p;
  _QWORD *v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v2 = *(mlir::detail::Parser **)a1;
  OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 56));
  v4 = *((_QWORD *)v2 + 1);
  if (*(_DWORD *)(v4 + 56) != 26)
  {
    v23[0] = 0;
    if (!mlir::detail::Parser::parseIntegerInDimensionList(v2, (unint64_t *)v23))
      return 0;
    v7 = *(_QWORD *)(a1 + 16);
    v9 = v23[0];
    v10 = *(unsigned int *)(v7 + 8);
    if (v10 >= *(_DWORD *)(v7 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(v7 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v7 + 8 * v10) = v9;
    goto LABEL_10;
  }
  v5 = (const char *)OCGSize;
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)v23);
  v6 = *((_QWORD *)v2 + 1);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)v23;
  *(_QWORD *)(v6 + 72) = v24;
  if (**(_BYTE **)(a1 + 8))
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(unsigned int *)(v7 + 8);
    if (v8 >= *(_DWORD *)(v7 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 16), (void *)(v7 + 16), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(v7 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = 0x8000000000000000;
LABEL_10:
    ++*(_DWORD *)(v7 + 8);
    return 1;
  }
  v21 = "expected static shape";
  v22 = 259;
  mlir::detail::Parser::emitError((uint64_t)v2, v5, (uint64_t)&v21, v23);
  v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
  if (v23[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  if (v31)
  {
    v12 = __p;
    if (__p)
    {
      v13 = v30;
      v14 = __p;
      if (v30 != __p)
      {
        do
          v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        v14 = __p;
      }
      v30 = v12;
      operator delete(v14);
    }
    v15 = v27;
    if (v27)
    {
      v16 = v28;
      v17 = v27;
      if (v28 != v27)
      {
        do
        {
          v19 = *--v16;
          v18 = v19;
          *v16 = 0;
          if (v19)
            MEMORY[0x20BD002D4](v18, 0x1000C8077774924);
        }
        while (v16 != v15);
        v17 = v27;
      }
      v28 = v15;
      operator delete(v17);
    }
    if (v25 != &v26)
      free(v25);
  }
  return v11;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::MemRefElementTypeInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefElementTypeInterface]";
      v23 = 82;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::MemRefElementTypeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[384];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefLayoutAttrInterface]";
      v23 = 81;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::MemRefLayoutAttrInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[386];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::VerifiableTensorEncoding>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VerifiableTensorEncoding]";
      v23 = 80;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::VerifiableTensorEncoding,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[388];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

BOOL llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseTypeListNoParens(llvm::SmallVectorImpl<mlir::Type> &)::$_0>(uint64_t a1)
{
  mlir::detail::Parser *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(mlir::detail::Parser **)a1;
  if (*(_DWORD *)(*((_QWORD *)v2 + 1) + 56) == 21)
    v3 = mlir::detail::Parser::parseFunctionType(v2);
  else
    v3 = mlir::detail::Parser::parseNonFunctionType(v2);
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  return v4 != 0;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseMemRefType(void)::$_0>(uint64_t a1)
{
  mlir::StringAttr ****v2;
  llvm::APFloatBase *v3;
  llvm::APFloatBase *v4;
  uint64_t v5;
  llvm::APFloatBase **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::APFloatBase **v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[4];
  __int16 v31;
  _QWORD v32[3];
  void *v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  void *__p;
  _QWORD *v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v2 = *(mlir::StringAttr *****)a1;
  v3 = mlir::detail::Parser::parseAttribute(*(mlir::StringAttr *****)a1, 0);
  if (!v3)
    return 0;
  v4 = v3;
  if (mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*(_QWORD *)v3 + 8))
  {
    v5 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*(_QWORD *)v4 + 8);
    v6 = *(llvm::APFloatBase ***)(a1 + 8);
    *v6 = v4;
    v6[1] = (llvm::APFloatBase *)v5;
    if (**(_BYTE **)(a1 + 24))
    {
      v30[0] = "cannot have affine map for unranked memref type";
      v31 = 259;
      mlir::detail::Parser::emitError((uint64_t)v2, (uint64_t)v30, v32);
      v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
      if (v32[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
      if (v39)
      {
        v8 = __p;
        if (__p)
        {
          v9 = v38;
          v10 = __p;
          if (v38 != __p)
          {
            do
              v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
            while (v9 != v8);
            v10 = __p;
          }
          v38 = v8;
          operator delete(v10);
        }
        v11 = v35;
        if (!v35)
          goto LABEL_51;
        v12 = v36;
        v13 = v35;
        if (v36 == v35)
        {
LABEL_50:
          v36 = v11;
          operator delete(v13);
LABEL_51:
          if (v33 != &v34)
            free(v33);
          return v7;
        }
        do
        {
          v15 = *--v12;
          v14 = v15;
          *v12 = 0;
          if (v15)
            MEMORY[0x20BD002D4](v14, 0x1000C8077774924);
        }
        while (v12 != v11);
LABEL_49:
        v13 = v35;
        goto LABEL_50;
      }
    }
    else
    {
      if (!**(_QWORD **)(a1 + 16))
        return 1;
      v30[0] = "expected memory space to be last in memref type";
      v31 = 259;
      mlir::detail::Parser::emitError((uint64_t)v2, (uint64_t)v30, v32);
      v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
      if (v32[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
      if (v39)
      {
        v23 = __p;
        if (__p)
        {
          v24 = v38;
          v25 = __p;
          if (v38 != __p)
          {
            do
              v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
            while (v24 != v23);
            v25 = __p;
          }
          v38 = v23;
          operator delete(v25);
        }
        v11 = v35;
        if (!v35)
          goto LABEL_51;
        v26 = v36;
        v13 = v35;
        if (v36 == v35)
          goto LABEL_50;
        do
        {
          v28 = *--v26;
          v27 = v28;
          *v26 = 0;
          if (v28)
            MEMORY[0x20BD002D4](v27, 0x1000C8077774924);
        }
        while (v26 != v11);
        goto LABEL_49;
      }
    }
  }
  else
  {
    v16 = *(llvm::APFloatBase ***)(a1 + 16);
    if (!*v16)
    {
      *v16 = v4;
      return 1;
    }
    v30[0] = "multiple memory spaces specified in memref type";
    v31 = 259;
    mlir::detail::Parser::emitError((uint64_t)v2, (uint64_t)v30, v32);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
    if (v32[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
    if (v39)
    {
      v17 = __p;
      if (__p)
      {
        v18 = v38;
        v19 = __p;
        if (v38 != __p)
        {
          do
            v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          v19 = __p;
        }
        v38 = v17;
        operator delete(v19);
      }
      v11 = v35;
      if (!v35)
        goto LABEL_51;
      v20 = v36;
      v13 = v35;
      if (v36 == v35)
        goto LABEL_50;
      do
      {
        v22 = *--v20;
        v21 = v22;
        *v20 = 0;
        if (v22)
          MEMORY[0x20BD002D4](v21, 0x1000C8077774924);
      }
      while (v20 != v11);
      goto LABEL_49;
    }
  }
  return v7;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::UnrankedMemRefType mlir::detail::Parser::getChecked<mlir::UnrankedMemRefType,mlir::Type &,mlir::Attribute &>(llvm::SMLoc,mlir::Type &,mlir::Attribute &)::{lambda(void)#1}>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  const char *v3;
  _BYTE v4[32];
  __int16 v5;

  v2 = *(_QWORD *)a1;
  v3 = **(const char ***)(a1 + 8);
  v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::MemRefType mlir::detail::Parser::getChecked<mlir::MemRefType,llvm::SmallVector<long long,4u> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &>(llvm::SMLoc,llvm::SmallVector<long long,4u> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &)::{lambda(void)#1}>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  const char *v3;
  _BYTE v4[32];
  __int16 v5;

  v2 = *(_QWORD *)a1;
  v3 = **(const char ***)(a1 + 8);
  v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseTensorType(void)::$_0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _BYTE v3[32];
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::detail::Parser::emitError(v2, (uint64_t)v3, a2);
}

uint64_t mlir::BytecodeReader::Impl::read(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  _BYTE *v11;
  void *v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  char *v33;
  int v34;
  _BYTE *v35;
  void *v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  _QWORD *v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  std::recursive_mutex **DiagEngine;
  unint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t *v60;
  char *v61;
  int v62;
  uint64_t v63;
  __int128 v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  BOOL v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  char *v73;
  int v74;
  _BYTE *v75;
  void *v76;
  int v77;
  char *v78;
  int v79;
  _BYTE *v80;
  void *v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  void *v86;
  _QWORD *v87;
  _QWORD *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  void *v94;
  _QWORD *v95;
  _QWORD *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  void *v103;
  _QWORD *v104;
  _QWORD *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  void *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  char *v116;
  uint64_t *v117;
  char *v118;
  char *v119;
  __int128 v120;
  int v121;
  _BYTE *v122;
  _BYTE *v123;
  int v124;
  char *v125;
  uint64_t *v126;
  char *v127;
  char *v128;
  __int128 v129;
  int v130;
  _BYTE *v131;
  _BYTE *v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  void *v138;
  _QWORD *v139;
  _QWORD *v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  _QWORD *v145;
  _QWORD *v146;
  void *v147;
  _QWORD *v148;
  _QWORD *v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  void *v155;
  _QWORD *v156;
  _QWORD *v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  void *v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v168;
  unint64_t v169;
  int64_t v170;
  int64_t v171;
  int v172;
  uint64_t v173;
  __int128 v174;
  void *v175;
  __int128 v176;
  void *v177;
  unint64_t v178[2];
  mlir::MLIRContext *v179;
  mlir::MLIRContext *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  unint64_t v190;
  void *__src;
  uint64_t v192;
  char v193;
  uint64_t v194;
  unint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  __int128 v203;
  void *v204[3];
  void *__p[2];
  uint64_t v206;
  unsigned __int8 v207;
  uint64_t v208;
  uint64_t v209;
  unsigned __int8 v210;
  uint64_t v211;
  const char *v212;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  _BYTE v216[96];
  __int128 v217;
  void *v218;
  __int128 v219;
  uint64_t v220;
  char v221;
  char *v222;
  const char *v223;
  int v224;
  void *__dst;
  uint64_t v226;
  _BYTE v227[96];
  __int128 v228;
  void *v229;
  __int128 v230;
  uint64_t v231;
  unsigned __int8 v232;
  uint64_t v233;

  v233 = *MEMORY[0x24BDAC8D0];
  v6 = a1[147];
  v7 = a1[148];
  v8 = a1[1];
  v181 = v6;
  v182 = v7;
  v183 = v6;
  v184 = v8;
  a1[9] = a3;
  a1[10] = a4;
  v211 = 4;
  if (v7 > 3)
  {
    v183 = v6 + 4;
    goto LABEL_58;
  }
  *(_QWORD *)&v186 = v7;
  mlir::emitError(v8, (uint64_t)&v189);
  v9 = (char *)v189;
  if ((_QWORD)v189)
  {
    mlir::Diagnostic::append<char const(&)[20],unsigned long &,char const(&)[18],unsigned long,char const(&)[8]>((uint64_t)&v189 + 8, "attempting to skip ", (char **)&v211, " bytes when only ", (char **)&v186, " remain");
    v9 = (char *)v189;
  }
  v222 = v9;
  LOBYTE(v223) = 0;
  v232 = 0;
  if (v207)
  {
    v223 = (const char *)*((_QWORD *)&v189 + 1);
    v10 = v192;
    v224 = v190;
    v11 = v227;
    __dst = v227;
    v226 = 0x400000000;
    if (!(_DWORD)v192)
    {
      v13 = 1;
      goto LABEL_17;
    }
    v12 = __src;
    if (__src != &v193)
    {
      __dst = __src;
      v226 = v192;
      __src = &v193;
      HIDWORD(v192) = 0;
      v13 = 1;
LABEL_16:
      LODWORD(v192) = 0;
LABEL_17:
      v228 = *(_OWORD *)v204;
      memset(v204, 0, sizeof(v204));
      v230 = *(_OWORD *)__p;
      v229 = v204[2];
      v231 = v206;
      __p[0] = 0;
      __p[1] = 0;
      v206 = 0;
      v232 = 1;
      if (v13)
      {
        if (__src != &v193)
          free(__src);
        v207 = 0;
      }
      goto LABEL_21;
    }
    if (v192 < 5)
    {
      v14 = v192;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v227, v192, 24);
      v14 = v192;
      if (!(_DWORD)v192)
      {
LABEL_15:
        LODWORD(v226) = v10;
        v13 = v207;
        goto LABEL_16;
      }
      v12 = __src;
      v11 = __dst;
    }
    memcpy(v11, v12, 24 * v14);
    goto LABEL_15;
  }
LABEL_21:
  mlir::InFlightDiagnostic::abandon(&v189);
  if ((_QWORD)v189)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v189);
  if (v207)
  {
    v15 = __p[0];
    if (__p[0])
    {
      v16 = __p[1];
      v17 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        v17 = __p[0];
      }
      __p[1] = v15;
      operator delete(v17);
    }
    v18 = v204[0];
    if (v204[0])
    {
      v19 = v204[1];
      v20 = v204[0];
      if (v204[1] != v204[0])
      {
        do
        {
          v22 = *--v19;
          v21 = v22;
          *v19 = 0;
          if (v22)
            MEMORY[0x20BD002D4](v21, 0x1000C8077774924);
        }
        while (v19 != v18);
        v20 = v204[0];
      }
      v204[1] = v18;
      operator delete(v20);
    }
    if (__src != &v193)
      free(__src);
  }
  v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v222);
  if (v222)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v222);
  if (v232)
  {
    v24 = (_QWORD *)v230;
    if ((_QWORD)v230)
    {
      v25 = (_QWORD *)*((_QWORD *)&v230 + 1);
      v26 = (void *)v230;
      if (*((_QWORD *)&v230 + 1) != (_QWORD)v230)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = (void *)v230;
      }
      *((_QWORD *)&v230 + 1) = v24;
      operator delete(v26);
    }
    v27 = (_QWORD *)v228;
    if ((_QWORD)v228)
    {
      v28 = (_QWORD *)*((_QWORD *)&v228 + 1);
      v29 = (void *)v228;
      if (*((_QWORD *)&v228 + 1) != (_QWORD)v228)
      {
        do
        {
          v31 = *--v28;
          v30 = v31;
          *v28 = 0;
          if (v31)
            MEMORY[0x20BD002D4](v30, 0x1000C8077774924);
        }
        while (v28 != v27);
        v29 = (void *)v228;
      }
      *((_QWORD *)&v228 + 1) = v27;
      operator delete(v29);
    }
    if (__dst != v227)
      free(__dst);
  }
  if (!v23)
    goto LABEL_152;
LABEL_58:
  v32 = (int *)(a1 + 31);
  {
LABEL_152:
    v71 = 0;
    goto LABEL_384;
  }
  v211 = 6;
  if (*(_QWORD *)v32 < 7uLL)
  {
    if (*(_QWORD *)v32 <= 1uLL)
      *((_BYTE *)a1 + 16) = 0;
    goto LABEL_117;
  }
  mlir::emitError(v184, (uint64_t)&v189);
  v33 = (char *)v189;
  if ((_QWORD)v189)
  {
    mlir::Diagnostic::append<char const(&)[18],unsigned long long &,char const(&)[36],unsigned long long &>((uint64_t)&v189 + 8, "bytecode version ", (char **)a1 + 31, " is newer than the current version ", (char **)&v211);
    v33 = (char *)v189;
  }
  v222 = v33;
  LOBYTE(v223) = 0;
  v232 = 0;
  if (v207)
  {
    v223 = (const char *)*((_QWORD *)&v189 + 1);
    v34 = v192;
    v224 = v190;
    v35 = v227;
    __dst = v227;
    v226 = 0x400000000;
    if (!(_DWORD)v192)
    {
      v37 = 1;
      goto LABEL_76;
    }
    v36 = __src;
    if (__src != &v193)
    {
      __dst = __src;
      v226 = v192;
      __src = &v193;
      HIDWORD(v192) = 0;
      v37 = 1;
LABEL_75:
      LODWORD(v192) = 0;
LABEL_76:
      v228 = *(_OWORD *)v204;
      memset(v204, 0, sizeof(v204));
      v230 = *(_OWORD *)__p;
      v229 = v204[2];
      v231 = v206;
      __p[0] = 0;
      __p[1] = 0;
      v206 = 0;
      v232 = 1;
      if (v37)
      {
        if (__src != &v193)
          free(__src);
        v207 = 0;
      }
      goto LABEL_80;
    }
    if (v192 < 5)
    {
      v38 = v192;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v227, v192, 24);
      v38 = v192;
      if (!(_DWORD)v192)
      {
LABEL_74:
        LODWORD(v226) = v34;
        v37 = v207;
        goto LABEL_75;
      }
      v36 = __src;
      v35 = __dst;
    }
    memcpy(v35, v36, 24 * v38);
    goto LABEL_74;
  }
LABEL_80:
  mlir::InFlightDiagnostic::abandon(&v189);
  if ((_QWORD)v189)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v189);
  if (v207)
  {
    v39 = __p[0];
    if (__p[0])
    {
      v40 = __p[1];
      v41 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
        while (v40 != v39);
        v41 = __p[0];
      }
      __p[1] = v39;
      operator delete(v41);
    }
    v42 = v204[0];
    if (v204[0])
    {
      v43 = v204[1];
      v44 = v204[0];
      if (v204[1] != v204[0])
      {
        do
        {
          v46 = *--v43;
          v45 = v46;
          *v43 = 0;
          if (v46)
            MEMORY[0x20BD002D4](v45, 0x1000C8077774924);
        }
        while (v43 != v42);
        v44 = v204[0];
      }
      v204[1] = v42;
      operator delete(v44);
    }
    if (__src != &v193)
      free(__src);
  }
  v47 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v222);
  if (v222)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v222);
  if (v232)
  {
    v48 = (_QWORD *)v230;
    if ((_QWORD)v230)
    {
      v49 = (_QWORD *)*((_QWORD *)&v230 + 1);
      v50 = (void *)v230;
      if (*((_QWORD *)&v230 + 1) != (_QWORD)v230)
      {
        do
          v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
        while (v49 != v48);
        v50 = (void *)v230;
      }
      *((_QWORD *)&v230 + 1) = v48;
      operator delete(v50);
    }
    v51 = (_QWORD *)v228;
    if ((_QWORD)v228)
    {
      v52 = (_QWORD *)*((_QWORD *)&v228 + 1);
      v53 = (void *)v228;
      if (*((_QWORD *)&v228 + 1) != (_QWORD)v228)
      {
        do
        {
          v55 = *--v52;
          v54 = v55;
          *v52 = 0;
          if (v55)
            MEMORY[0x20BD002D4](v54, 0x1000C8077774924);
        }
        while (v52 != v51);
        v53 = (void *)v228;
      }
      *((_QWORD *)&v228 + 1) = v51;
      operator delete(v53);
    }
    if (__dst != v227)
      free(__dst);
  }
  if (!v47)
    goto LABEL_152;
LABEL_117:
  v180 = *(mlir::MLIRContext **)*a1;
  DiagEngine = (std::recursive_mutex **)mlir::MLIRContext::getDiagEngine(v180);
  *(_QWORD *)&v189 = a1;
  __src = (char *)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Diagnostic &>::CallbacksHolder<mlir::BytecodeReader::Impl::read(mlir::Block *,llvm::function_ref<BOOL ()(mlir::Operation *)>)::$_1,mlir::BytecodeReader::Impl::read(mlir::Block *,llvm::function_ref<BOOL ()(mlir::Operation *)>)::$_1,void>::Callbacks
        + 2;
  v179 = (mlir::MLIRContext *)mlir::DiagnosticEngine::registerHandler(DiagEngine, &v189);
  v59 = (char)__src;
  if ((unint64_t)__src >= 8)
  {
    if ((__src & 4) != 0)
    {
      if ((__src & 2) != 0)
        v60 = (uint64_t *)&v189;
      else
        v60 = (uint64_t *)v189;
      (*(void (**)(uint64_t *, unint64_t, uint64_t))(((unint64_t)__src & 0xFFFFFFFFFFFFFFF8)
                                                                   + 16))(v60, v57, v58);
    }
    if ((v59 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v189, *((void **)&v189 + 1));
  }
  LOBYTE(v189) = 0;
  LOBYTE(v190) = 0;
  LOBYTE(__src) = 0;
  v193 = 0;
  LOBYTE(v194) = 0;
  v196 = 0;
  LOBYTE(v197) = 0;
  v199 = 0;
  LOBYTE(v200) = 0;
  v202 = 0;
  LOBYTE(v203) = 0;
  LOBYTE(v204[0]) = 0;
  LOBYTE(v204[1]) = 0;
  LOBYTE(__p[0]) = 0;
  LOBYTE(__p[1]) = 0;
  v207 = 0;
  LOBYTE(v208) = 0;
  v210 = 0;
  if (v183 != v181 + v182)
  {
    while (1)
    {
      LOBYTE(v185) = 0;
      v178[0] = 0;
      v178[1] = 0;
      v61 = (char *)&v189 + 24 * v185;
      if (v61[16])
        break;
      *(_OWORD *)v61 = *(_OWORD *)v178;
      v61[16] = 1;
      if (v183 == v181 + v182)
      {
        if (!(_BYTE)v190)
          goto LABEL_153;
        if (!v193)
        {
          v72 = 1;
          goto LABEL_154;
        }
        if (!v196)
        {
          v72 = 2;
          goto LABEL_154;
        }
        if (!v199)
        {
          v72 = 3;
          goto LABEL_154;
        }
        if (!v202)
        {
          v72 = 4;
          goto LABEL_154;
        }
        v62 = v210;
        if (!v210 && *v32 > 4)
        {
          v72 = 8;
          goto LABEL_154;
        }
        v63 = a1[1];
        v64 = v189;
        v186 = v189;
        v187 = v189;
        v188 = v63;
        v178[0] = 0;
        v172 = v62;
        v65 = v178[0];
        v66 = *((unsigned int *)a1 + 136);
        if (v178[0] != v66)
        {
          if (v178[0] >= v66)
          {
            if (v178[0] > *((unsigned int *)a1 + 137))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 67), a1 + 69, v178[0], 16);
              v66 = *((unsigned int *)a1 + 136);
            }
            if (v65 != v66)
              bzero((void *)(a1[67] + 16 * v66), 16 * (v65 - v66));
          }
          LODWORD(v66) = v65;
          *((_DWORD *)a1 + 136) = v65;
          v65 = v65;
        }
        v173 = *((_QWORD *)&v64 + 1);
        if ((_DWORD)v66)
        {
          v67 = 16 * v65;
          v68 = *((_QWORD *)&v64 + 1);
          while (1)
          {
            v185 = 0;
            v69 = v68 >= v185;
            v68 -= v185;
            if (!v69)
              break;
            v70 = v185 - 1;
            *(_QWORD *)(*((_QWORD *)&v64 + 1) + v67 - 16) = v64 + v68;
            *(_QWORD *)(*((_QWORD *)&v64 + 1) + v67 - 8) = v70;
            v67 -= 16;
            if (!v67)
              goto LABEL_265;
          }
          mlir::emitError(v188, (uint64_t)&v222);
          v125 = v222;
          if (v222)
          {
            LODWORD(v211) = 3;
            v212 = "string size exceeds the available data size";
            v213 = 43;
            v126 = &v211;
            v127 = (char *)__dst;
            if (v226 >= HIDWORD(v226))
            {
              v169 = v226 + 1;
              if (__dst <= &v211 && (char *)__dst + 24 * v226 > (char *)&v211)
              {
                v171 = (char *)&v211 - (_BYTE *)__dst;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v227, v169, 24);
                v127 = (char *)__dst;
                v126 = (uint64_t *)((char *)__dst + v171);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v227, v169, 24);
                v126 = &v211;
                v127 = (char *)__dst;
              }
            }
            v128 = &v127[24 * v226];
            v129 = *(_OWORD *)v126;
            *((_QWORD *)v128 + 2) = v126[2];
            *(_OWORD *)v128 = v129;
            LODWORD(v226) = v226 + 1;
            v125 = v222;
          }
          v211 = (uint64_t)v125;
          LOBYTE(v212) = 0;
          v221 = 0;
          if (v232)
          {
            v212 = v223;
            v130 = v226;
            LODWORD(v213) = v224;
            v131 = v216;
            v214 = v216;
            v215 = 0x400000000;
            if ((_DWORD)v226)
            {
              v132 = v227;
              if (__dst != v227)
              {
                v214 = __dst;
                v215 = v226;
                __dst = v227;
                HIDWORD(v226) = 0;
                v133 = 1;
                goto LABEL_333;
              }
              if (v226 < 5)
              {
                v135 = v226;
LABEL_331:
                memcpy(v131, v132, 24 * v135);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v216, v226, 24);
                v135 = v226;
                if ((_DWORD)v226)
                {
                  v132 = __dst;
                  v131 = v214;
                  goto LABEL_331;
                }
              }
              LODWORD(v215) = v130;
              v133 = v232;
LABEL_333:
              LODWORD(v226) = 0;
            }
            else
            {
              v133 = 1;
            }
            v217 = v228;
            v228 = 0uLL;
            v219 = v230;
            v218 = v229;
            v220 = v231;
            v229 = 0;
            v230 = 0uLL;
            v231 = 0;
            v221 = 1;
            if (v133)
            {
              if (__dst != v227)
                free(__dst);
              v232 = 0;
            }
          }
          mlir::InFlightDiagnostic::abandon(&v222);
          if (v222)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v222);
          if (v232)
          {
            v153 = (_QWORD *)v230;
            if ((_QWORD)v230)
            {
              v154 = (_QWORD *)*((_QWORD *)&v230 + 1);
              v155 = (void *)v230;
              if (*((_QWORD *)&v230 + 1) != (_QWORD)v230)
              {
                do
                  v154 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v154 - 1);
                while (v154 != v153);
                v155 = (void *)v230;
              }
              *((_QWORD *)&v230 + 1) = v153;
              operator delete(v155);
            }
            v156 = (_QWORD *)v228;
            if ((_QWORD)v228)
            {
              v157 = (_QWORD *)*((_QWORD *)&v228 + 1);
              v158 = (void *)v228;
              if (*((_QWORD *)&v228 + 1) != (_QWORD)v228)
              {
                do
                {
                  v160 = *--v157;
                  v159 = v160;
                  *v157 = 0;
                  if (v160)
                    MEMORY[0x20BD002D4](v159, 0x1000C8077774924);
                }
                while (v157 != v156);
                v158 = (void *)v228;
              }
              *((_QWORD *)&v228 + 1) = v156;
              operator delete(v158);
            }
            if (__dst != v227)
              free(__dst);
          }
          v144 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v211);
          if (v211)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v211);
          if (!v221)
            goto LABEL_374;
          v161 = (_QWORD *)v219;
          if ((_QWORD)v219)
          {
            v162 = (_QWORD *)*((_QWORD *)&v219 + 1);
            v163 = (void *)v219;
            if (*((_QWORD *)&v219 + 1) != (_QWORD)v219)
            {
              do
                v162 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v162 - 1);
              while (v162 != v161);
              v163 = (void *)v219;
            }
            *((_QWORD *)&v219 + 1) = v161;
            operator delete(v163);
          }
          v148 = (_QWORD *)v217;
          if (!(_QWORD)v217)
            goto LABEL_372;
          v164 = (_QWORD *)*((_QWORD *)&v217 + 1);
          v150 = (void *)v217;
          if (*((_QWORD *)&v217 + 1) == (_QWORD)v217)
            goto LABEL_371;
          do
          {
            v166 = *--v164;
            v165 = v166;
            *v164 = 0;
            if (v166)
              MEMORY[0x20BD002D4](v165, 0x1000C8077774924);
          }
          while (v164 != v148);
          goto LABEL_370;
        }
        v68 = *((_QWORD *)&v64 + 1);
LABEL_265:
        if (v173 - ((_QWORD)v186 + *((_QWORD *)&v186 + 1)) + v187 == v68)
        {
          v115 = v172;
LABEL_376:
          if (!v115
          {
            if (mlir::BytecodeReader::Impl::parseDialectSection((uint64_t)a1, (uint64_t)__src, v192))
            {
              v176 = v203;
              v177 = v204[0];
              v174 = *(_OWORD *)&v204[1];
              v175 = __p[0];
              if (mlir::BytecodeReader::Impl::parseResourceSection(a1, (uint64_t)&v181, &v176, &v174))
              {
                {
                  v71 = mlir::BytecodeReader::Impl::parseIRSection((uint64_t)a1, v200, v201, a2);
                  goto LABEL_383;
                }
              }
            }
          }
          goto LABEL_382;
        }
        mlir::emitError(v188, (uint64_t)&v222);
        v116 = v222;
        if (v222)
        {
          LODWORD(v211) = 3;
          v212 = "unexpected trailing data between the offsets for strings and their data";
          v213 = 71;
          v117 = &v211;
          v118 = (char *)__dst;
          if (v226 >= HIDWORD(v226))
          {
            v168 = v226 + 1;
            if (__dst <= &v211 && (char *)__dst + 24 * v226 > (char *)&v211)
            {
              v170 = (char *)&v211 - (_BYTE *)__dst;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v227, v168, 24);
              v118 = (char *)__dst;
              v117 = (uint64_t *)((char *)__dst + v170);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v227, v168, 24);
              v117 = &v211;
              v118 = (char *)__dst;
            }
          }
          v119 = &v118[24 * v226];
          v120 = *(_OWORD *)v117;
          *((_QWORD *)v119 + 2) = v117[2];
          *(_OWORD *)v119 = v120;
          LODWORD(v226) = v226 + 1;
          v116 = v222;
        }
        v211 = (uint64_t)v116;
        LOBYTE(v212) = 0;
        v221 = 0;
        if (v232)
        {
          v212 = v223;
          v121 = v226;
          LODWORD(v213) = v224;
          v122 = v216;
          v214 = v216;
          v215 = 0x400000000;
          if ((_DWORD)v226)
          {
            v123 = v227;
            if (__dst != v227)
            {
              v214 = __dst;
              v215 = v226;
              __dst = v227;
              HIDWORD(v226) = 0;
              v124 = 1;
              goto LABEL_293;
            }
            if (v226 < 5)
            {
              v134 = v226;
LABEL_291:
              memcpy(v122, v123, 24 * v134);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v216, v226, 24);
              v134 = v226;
              if ((_DWORD)v226)
              {
                v123 = __dst;
                v122 = v214;
                goto LABEL_291;
              }
            }
            LODWORD(v215) = v121;
            v124 = v232;
LABEL_293:
            LODWORD(v226) = 0;
          }
          else
          {
            v124 = 1;
          }
          v217 = v228;
          v228 = 0uLL;
          v219 = v230;
          v218 = v229;
          v220 = v231;
          v229 = 0;
          v230 = 0uLL;
          v231 = 0;
          v221 = 1;
          if (v124)
          {
            if (__dst != v227)
              free(__dst);
            v232 = 0;
          }
        }
        mlir::InFlightDiagnostic::abandon(&v222);
        if (v222)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v222);
        if (v232)
        {
          v136 = (_QWORD *)v230;
          if ((_QWORD)v230)
          {
            v137 = (_QWORD *)*((_QWORD *)&v230 + 1);
            v138 = (void *)v230;
            if (*((_QWORD *)&v230 + 1) != (_QWORD)v230)
            {
              do
                v137 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v137 - 1);
              while (v137 != v136);
              v138 = (void *)v230;
            }
            *((_QWORD *)&v230 + 1) = v136;
            operator delete(v138);
          }
          v139 = (_QWORD *)v228;
          if ((_QWORD)v228)
          {
            v140 = (_QWORD *)*((_QWORD *)&v228 + 1);
            v141 = (void *)v228;
            if (*((_QWORD *)&v228 + 1) != (_QWORD)v228)
            {
              do
              {
                v143 = *--v140;
                v142 = v143;
                *v140 = 0;
                if (v143)
                  MEMORY[0x20BD002D4](v142, 0x1000C8077774924);
              }
              while (v140 != v139);
              v141 = (void *)v228;
            }
            *((_QWORD *)&v228 + 1) = v139;
            operator delete(v141);
          }
          if (__dst != v227)
            free(__dst);
        }
        v144 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v211);
        if (v211)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v211);
        if (v221)
        {
          v145 = (_QWORD *)v219;
          if ((_QWORD)v219)
          {
            v146 = (_QWORD *)*((_QWORD *)&v219 + 1);
            v147 = (void *)v219;
            if (*((_QWORD *)&v219 + 1) != (_QWORD)v219)
            {
              do
                v146 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v146 - 1);
              while (v146 != v145);
              v147 = (void *)v219;
            }
            *((_QWORD *)&v219 + 1) = v145;
            operator delete(v147);
          }
          v148 = (_QWORD *)v217;
          if ((_QWORD)v217)
          {
            v149 = (_QWORD *)*((_QWORD *)&v217 + 1);
            v150 = (void *)v217;
            if (*((_QWORD *)&v217 + 1) != (_QWORD)v217)
            {
              do
              {
                v152 = *--v149;
                v151 = v152;
                *v149 = 0;
                if (v152)
                  MEMORY[0x20BD002D4](v151, 0x1000C8077774924);
              }
              while (v149 != v148);
LABEL_370:
              v150 = (void *)v217;
            }
LABEL_371:
            *((_QWORD *)&v217 + 1) = v148;
            operator delete(v150);
          }
LABEL_372:
          if (v214 != v216)
            free(v214);
        }
LABEL_374:
        if (v144)
        {
          v115 = v210;
          goto LABEL_376;
        }
LABEL_382:
        v71 = 0;
        goto LABEL_383;
      }
    }
    toString((uint64_t)&v186, v185);
    mlir::emitError(v184, (uint64_t)&v222);
    v78 = v222;
    if (v222)
    {
      mlir::Diagnostic::append<char const(&)[30],std::string>((uint64_t)&v223, "duplicate top-level section: ", (const void **)&v186);
      v78 = v222;
    }
    v211 = (uint64_t)v78;
    LOBYTE(v212) = 0;
    v221 = 0;
    if (!v232)
    {
LABEL_225:
      mlir::InFlightDiagnostic::abandon(&v222);
      if (v222)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v222);
      if (v232)
      {
        v101 = (_QWORD *)v230;
        if ((_QWORD)v230)
        {
          v102 = (_QWORD *)*((_QWORD *)&v230 + 1);
          v103 = (void *)v230;
          if (*((_QWORD *)&v230 + 1) != (_QWORD)v230)
          {
            do
              v102 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v102 - 1);
            while (v102 != v101);
            v103 = (void *)v230;
          }
          *((_QWORD *)&v230 + 1) = v101;
          operator delete(v103);
        }
        v104 = (_QWORD *)v228;
        if ((_QWORD)v228)
        {
          v105 = (_QWORD *)*((_QWORD *)&v228 + 1);
          v106 = (void *)v228;
          if (*((_QWORD *)&v228 + 1) != (_QWORD)v228)
          {
            do
            {
              v108 = *--v105;
              v107 = v108;
              *v105 = 0;
              if (v108)
                MEMORY[0x20BD002D4](v107, 0x1000C8077774924);
            }
            while (v105 != v104);
            v106 = (void *)v228;
          }
          *((_QWORD *)&v228 + 1) = v104;
          operator delete(v106);
        }
        if (__dst != v227)
          free(__dst);
      }
      v71 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v211);
      if (v211)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v211);
      if (v221)
      {
        v109 = (_QWORD *)v219;
        if ((_QWORD)v219)
        {
          v110 = (_QWORD *)*((_QWORD *)&v219 + 1);
          v111 = (void *)v219;
          if (*((_QWORD *)&v219 + 1) != (_QWORD)v219)
          {
            do
              v110 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v110 - 1);
            while (v110 != v109);
            v111 = (void *)v219;
          }
          *((_QWORD *)&v219 + 1) = v109;
          operator delete(v111);
        }
        v95 = (_QWORD *)v217;
        if (!(_QWORD)v217)
          goto LABEL_259;
        v112 = (_QWORD *)*((_QWORD *)&v217 + 1);
        v97 = (void *)v217;
        if (*((_QWORD *)&v217 + 1) == (_QWORD)v217)
          goto LABEL_258;
        do
        {
          v114 = *--v112;
          v113 = v114;
          *v112 = 0;
          if (v114)
            MEMORY[0x20BD002D4](v113, 0x1000C8077774924);
        }
        while (v112 != v95);
        goto LABEL_257;
      }
      goto LABEL_261;
    }
    v212 = v223;
    v79 = v226;
    LODWORD(v213) = v224;
    v80 = v216;
    v214 = v216;
    v215 = 0x400000000;
    if (!(_DWORD)v226)
    {
      v82 = 1;
      goto LABEL_221;
    }
    v81 = __dst;
    if (__dst != v227)
    {
      v214 = __dst;
      v215 = v226;
      __dst = v227;
      HIDWORD(v226) = 0;
      v82 = 1;
LABEL_220:
      LODWORD(v226) = 0;
LABEL_221:
      v217 = v228;
      v228 = 0uLL;
      v219 = v230;
      v218 = v229;
      v220 = v231;
      v229 = 0;
      v230 = 0uLL;
      v231 = 0;
      v221 = 1;
      if (v82)
      {
        if (__dst != v227)
          free(__dst);
        v232 = 0;
      }
      goto LABEL_225;
    }
    if (v226 < 5)
    {
      v100 = v226;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v216, v226, 24);
      v100 = v226;
      if (!(_DWORD)v226)
      {
LABEL_219:
        LODWORD(v215) = v79;
        v82 = v232;
        goto LABEL_220;
      }
      v81 = __dst;
      v80 = v214;
    }
    memcpy(v80, v81, 24 * v100);
    goto LABEL_219;
  }
LABEL_153:
  v72 = 0;
LABEL_154:
  toString((uint64_t)&v186, v72);
  mlir::emitError(v184, (uint64_t)&v222);
  v73 = v222;
  if (v222)
  {
    mlir::Diagnostic::append<char const(&)[30],std::string>((uint64_t)&v223, "missing data for top-level section: ", (const void **)&v186);
    v73 = v222;
  }
  v211 = (uint64_t)v73;
  LOBYTE(v212) = 0;
  v221 = 0;
  if (v232)
  {
    v212 = v223;
    v74 = v226;
    LODWORD(v213) = v224;
    v75 = v216;
    v214 = v216;
    v215 = 0x400000000;
    if (!(_DWORD)v226)
    {
      v77 = 1;
      goto LABEL_176;
    }
    v76 = __dst;
    if (__dst != v227)
    {
      v214 = __dst;
      v215 = v226;
      __dst = v227;
      HIDWORD(v226) = 0;
      v77 = 1;
LABEL_175:
      LODWORD(v226) = 0;
LABEL_176:
      v217 = v228;
      v228 = 0uLL;
      v219 = v230;
      v218 = v229;
      v220 = v231;
      v229 = 0;
      v230 = 0uLL;
      v231 = 0;
      v221 = 1;
      if (v77)
      {
        if (__dst != v227)
          free(__dst);
        v232 = 0;
      }
      goto LABEL_180;
    }
    if (v226 < 5)
    {
      v83 = v226;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v216, v226, 24);
      v83 = v226;
      if (!(_DWORD)v226)
      {
LABEL_174:
        LODWORD(v215) = v74;
        v77 = v232;
        goto LABEL_175;
      }
      v76 = __dst;
      v75 = v214;
    }
    memcpy(v75, v76, 24 * v83);
    goto LABEL_174;
  }
LABEL_180:
  mlir::InFlightDiagnostic::abandon(&v222);
  if (v222)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v222);
  if (v232)
  {
    v84 = (_QWORD *)v230;
    if ((_QWORD)v230)
    {
      v85 = (_QWORD *)*((_QWORD *)&v230 + 1);
      v86 = (void *)v230;
      if (*((_QWORD *)&v230 + 1) != (_QWORD)v230)
      {
        do
          v85 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v85 - 1);
        while (v85 != v84);
        v86 = (void *)v230;
      }
      *((_QWORD *)&v230 + 1) = v84;
      operator delete(v86);
    }
    v87 = (_QWORD *)v228;
    if ((_QWORD)v228)
    {
      v88 = (_QWORD *)*((_QWORD *)&v228 + 1);
      v89 = (void *)v228;
      if (*((_QWORD *)&v228 + 1) != (_QWORD)v228)
      {
        do
        {
          v91 = *--v88;
          v90 = v91;
          *v88 = 0;
          if (v91)
            MEMORY[0x20BD002D4](v90, 0x1000C8077774924);
        }
        while (v88 != v87);
        v89 = (void *)v228;
      }
      *((_QWORD *)&v228 + 1) = v87;
      operator delete(v89);
    }
    if (__dst != v227)
      free(__dst);
  }
  v71 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v211);
  if (v211)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v211);
  if (v221)
  {
    v92 = (_QWORD *)v219;
    if ((_QWORD)v219)
    {
      v93 = (_QWORD *)*((_QWORD *)&v219 + 1);
      v94 = (void *)v219;
      if (*((_QWORD *)&v219 + 1) != (_QWORD)v219)
      {
        do
          v93 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v93 - 1);
        while (v93 != v92);
        v94 = (void *)v219;
      }
      *((_QWORD *)&v219 + 1) = v92;
      operator delete(v94);
    }
    v95 = (_QWORD *)v217;
    if (!(_QWORD)v217)
      goto LABEL_259;
    v96 = (_QWORD *)*((_QWORD *)&v217 + 1);
    v97 = (void *)v217;
    if (*((_QWORD *)&v217 + 1) == (_QWORD)v217)
    {
LABEL_258:
      *((_QWORD *)&v217 + 1) = v95;
      operator delete(v97);
LABEL_259:
      if (v214 != v216)
        free(v214);
      goto LABEL_261;
    }
    do
    {
      v99 = *--v96;
      v98 = v99;
      *v96 = 0;
      if (v99)
        MEMORY[0x20BD002D4](v98, 0x1000C8077774924);
    }
    while (v96 != v95);
LABEL_257:
    v97 = (void *)v217;
    goto LABEL_258;
  }
LABEL_261:
  if (SHIBYTE(v187) < 0)
    operator delete((void *)v186);
LABEL_383:
  mlir::ScopedDiagnosticHandler::~ScopedDiagnosticHandler(&v179);
LABEL_384:
  a1[9] = 0;
  return v71;
}

uint64_t `anonymous namespace'::EncodingReader::parseNullTerminatedString(_anonymous_namespace_::EncodingReader *this, llvm::StringRef *a2)
{
  void *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  int v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  void *__dst;
  uint64_t v40;
  _BYTE v41[33];
  void *v42[2];
  uint64_t v43;
  void *v44[2];
  uint64_t v45;
  char v46;
  _QWORD v47[2];
  int v48;
  void *v49;
  uint64_t v50;
  _BYTE v51[96];
  __int128 v52;
  uint64_t v53;
  __int128 __p;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v4 = (void *)*((_QWORD *)this + 2);
  v5 = memchr(v4, 0, *(_QWORD *)this + *((_QWORD *)this + 1) - (_QWORD)v4);
  if (v5)
  {
    *(_QWORD *)a2 = v4;
    *((_QWORD *)a2 + 1) = v5 - (_BYTE *)v4;
    *((_QWORD *)this + 2) = v5 + 1;
    return 1;
  }
  mlir::emitError(*((_QWORD *)this + 3), (uint64_t)v47);
  v8 = v47[0];
  if (v47[0])
  {
    LODWORD(v36) = 3;
    v37 = "malformed null-terminated string, no null character found";
    v38 = 57;
    v9 = (char *)&v36;
    v10 = (char *)v49;
    if (v50 >= HIDWORD(v50))
    {
      v34 = v50 + 1;
      if (v49 <= &v36 && (char *)v49 + 24 * v50 > (char *)&v36)
      {
        v35 = (char *)&v36 - (_BYTE *)v49;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v34, 24);
        v10 = (char *)v49;
        v9 = (char *)v49 + v35;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v34, 24);
        v9 = (char *)&v36;
        v10 = (char *)v49;
      }
    }
    v11 = &v10[24 * v50];
    v12 = *(_OWORD *)v9;
    *((_QWORD *)v11 + 2) = *((_QWORD *)v9 + 2);
    *(_OWORD *)v11 = v12;
    LODWORD(v50) = v50 + 1;
    v8 = v47[0];
  }
  v36 = v8;
  LOBYTE(v37) = 0;
  v46 = 0;
  if (v56)
  {
    v37 = (const char *)v47[1];
    v13 = v50;
    LODWORD(v38) = v48;
    v14 = v41;
    __dst = v41;
    v40 = *(_QWORD *)"";
    if (!(_DWORD)v50)
    {
      v16 = 1;
      goto LABEL_19;
    }
    v15 = v51;
    if (v49 != v51)
    {
      __dst = v49;
      v40 = v50;
      v49 = v51;
      HIDWORD(v50) = 0;
      v16 = 1;
LABEL_18:
      LODWORD(v50) = 0;
LABEL_19:
      *(_OWORD *)v42 = v52;
      v43 = v53;
      v52 = 0uLL;
      *(_OWORD *)v44 = __p;
      v45 = v55;
      v53 = 0;
      __p = 0uLL;
      v55 = 0;
      v46 = 1;
      if (v16)
      {
        if (v49 != v51)
          free(v49);
        v56 = 0;
      }
      goto LABEL_23;
    }
    if (v50 < 5)
    {
      v17 = v50;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v41, v50, 24);
      v17 = v50;
      if (!(_DWORD)v50)
      {
LABEL_17:
        LODWORD(v40) = v13;
        v16 = v56;
        goto LABEL_18;
      }
      v15 = v49;
      v14 = __dst;
    }
    memcpy(v14, v15, 24 * v17);
    goto LABEL_17;
  }
LABEL_23:
  mlir::InFlightDiagnostic::abandon(v47);
  if (v47[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
  if (v56)
  {
    v18 = (_QWORD *)__p;
    if ((_QWORD)__p)
    {
      v19 = (_QWORD *)*((_QWORD *)&__p + 1);
      v20 = (void *)__p;
      if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = (void *)__p;
      }
      *((_QWORD *)&__p + 1) = v18;
      operator delete(v20);
    }
    v21 = (_QWORD *)v52;
    if ((_QWORD)v52)
    {
      v22 = (_QWORD *)*((_QWORD *)&v52 + 1);
      v23 = (void *)v52;
      if (*((_QWORD *)&v52 + 1) != (_QWORD)v52)
      {
        do
        {
          v25 = *--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
        }
        while (v22 != v21);
        v23 = (void *)v52;
      }
      *((_QWORD *)&v52 + 1) = v21;
      operator delete(v23);
    }
    if (v49 != v51)
      free(v49);
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v36);
  if (v36)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  if (v46)
  {
    v26 = v44[0];
    if (v44[0])
    {
      v27 = v44[1];
      v28 = v44[0];
      if (v44[1] != v44[0])
      {
        do
          v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        v28 = v44[0];
      }
      v44[1] = v26;
      operator delete(v28);
    }
    v29 = v42[0];
    if (v42[0])
    {
      v30 = v42[1];
      v31 = v42[0];
      if (v42[1] != v42[0])
      {
        do
        {
          v33 = *--v30;
          v32 = v33;
          *v30 = 0;
          if (v33)
            MEMORY[0x20BD002D4](v32, 0x1000C8077774924);
        }
        while (v30 != v29);
        v31 = v42[0];
      }
      v42[1] = v29;
      operator delete(v31);
    }
    if (__dst != v41)
      free(__dst);
  }
  return v6;
}

uint64_t `anonymous namespace'::EncodingReader::parseSection(_anonymous_namespace_::EncodingReader *a1, _BYTE *a2, _QWORD *a3)
{
  char v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  const void *v11;
  int v12;
  int8x8_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  void *__dst;
  uint64_t v40;
  _BYTE v41[96];
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  unsigned int v47[2];
  uint64_t v48;
  int v49;
  _BYTE *v50;
  uint64_t v51;
  _BYTE v52[96];
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v35 = 0;
  {
    v34 = 0;
    {
      v6 = v35;
      v7 = v35 & 0x7F;
      *a2 = v35 & 0x7F;
      if (v7 >= 9)
      {
        v33 = v7;
        mlir::emitError(*((_QWORD *)a1 + 3), (uint64_t)v47);
        v8 = *(_QWORD *)v47;
        if (*(_QWORD *)v47)
        {
          mlir::Diagnostic::append<char const(&)[21],unsigned int>((uint64_t)&v48, "invalid section ID: ", &v33);
          v8 = *(_QWORD *)v47;
        }
        v36 = v8;
        LOBYTE(v37) = 0;
        v46 = 0;
        if (!v57)
          goto LABEL_28;
        v37 = v48;
        v9 = v51;
        v38 = v49;
        v10 = v41;
        __dst = v41;
        v40 = *(_QWORD *)"";
        if (!(_DWORD)v51)
        {
          v12 = 1;
          goto LABEL_24;
        }
        v11 = v50;
        if (v50 != v52)
        {
          __dst = v50;
          v40 = v51;
          v50 = v52;
          HIDWORD(v51) = 0;
          v12 = 1;
LABEL_23:
          LODWORD(v51) = 0;
LABEL_24:
          v42 = v53;
          v43 = v54;
          v53 = 0uLL;
          v44 = v55;
          v45 = v56;
          v54 = 0;
          v55 = 0uLL;
          v56 = 0;
          v46 = 1;
          if (v12)
          {
            if (v50 != v52)
              free(v50);
            v57 = 0;
          }
LABEL_28:
          mlir::InFlightDiagnostic::abandon(v47);
          if (*(_QWORD *)v47)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
          if (v57)
          {
            v17 = (_QWORD *)v55;
            if ((_QWORD)v55)
            {
              v18 = (_QWORD *)*((_QWORD *)&v55 + 1);
              v19 = (void *)v55;
              if (*((_QWORD *)&v55 + 1) != (_QWORD)v55)
              {
                do
                  v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
                while (v18 != v17);
                v19 = (void *)v55;
              }
              *((_QWORD *)&v55 + 1) = v17;
              operator delete(v19);
            }
            v20 = (_QWORD *)v53;
            if ((_QWORD)v53)
            {
              v21 = (_QWORD *)*((_QWORD *)&v53 + 1);
              v22 = (void *)v53;
              if (*((_QWORD *)&v53 + 1) != (_QWORD)v53)
              {
                do
                {
                  v24 = *--v21;
                  v23 = v24;
                  *v21 = 0;
                  if (v24)
                    MEMORY[0x20BD002D4](v23, 0x1000C8077774924);
                }
                while (v21 != v20);
                v22 = (void *)v53;
              }
              *((_QWORD *)&v53 + 1) = v20;
              operator delete(v22);
            }
            if (v50 != v52)
              free(v50);
          }
          v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v36);
          if (v36)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
          if (v46)
          {
            v25 = (_QWORD *)v44;
            if ((_QWORD)v44)
            {
              v26 = (_QWORD *)*((_QWORD *)&v44 + 1);
              v27 = (void *)v44;
              if (*((_QWORD *)&v44 + 1) != (_QWORD)v44)
              {
                do
                  v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
                while (v26 != v25);
                v27 = (void *)v44;
              }
              *((_QWORD *)&v44 + 1) = v25;
              operator delete(v27);
            }
            v28 = (_QWORD *)v42;
            if ((_QWORD)v42)
            {
              v29 = (_QWORD *)*((_QWORD *)&v42 + 1);
              v30 = (void *)v42;
              if (*((_QWORD *)&v42 + 1) != (_QWORD)v42)
              {
                do
                {
                  v32 = *--v29;
                  v31 = v32;
                  *v29 = 0;
                  if (v32)
                    MEMORY[0x20BD002D4](v31, 0x1000C8077774924);
                }
                while (v29 != v28);
                v30 = (void *)v42;
              }
              *((_QWORD *)&v42 + 1) = v28;
              operator delete(v30);
            }
            if (__dst != v41)
              free(__dst);
          }
          return v15;
        }
        if (v51 < 5)
        {
          v16 = v51;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v41, v51, 24);
          v16 = v51;
          if (!(_DWORD)v51)
          {
LABEL_22:
            LODWORD(v40) = v9;
            v12 = v57;
            goto LABEL_23;
          }
          v11 = v50;
          v10 = __dst;
        }
        memcpy(v10, v11, 24 * v16);
        goto LABEL_22;
      }
      if ((v6 & 0x80) == 0)
      *(_QWORD *)v47 = 0;
      {
      }
    }
  }
  return 0;
}

void toString(uint64_t a1, unsigned int a2)
{
  _QWORD v2[4];
  __int16 v3;
  _QWORD v4[4];
  __int16 v5;

  switch(a2)
  {
    case 0u:
      *(_BYTE *)(a1 + 23) = 10;
      strcpy((char *)a1, "String (0)");
      break;
    case 1u:
      *(_BYTE *)(a1 + 23) = 11;
      strcpy((char *)a1, "Dialect (1)");
      break;
    case 2u:
      *(_BYTE *)(a1 + 23) = 12;
      strcpy((char *)a1, "AttrType (2)");
      break;
    case 3u:
      *(_BYTE *)(a1 + 23) = 18;
      strcpy((char *)a1, "AttrTypeOffset (3)");
      break;
    case 4u:
      *(_BYTE *)(a1 + 23) = 6;
      strcpy((char *)a1, "IR (4)");
      break;
    case 5u:
      *(_BYTE *)(a1 + 23) = 12;
      strcpy((char *)a1, "Resource (5)");
      break;
    case 6u:
      *(_BYTE *)(a1 + 23) = 18;
      strcpy((char *)a1, "ResourceOffset (6)");
      break;
    case 7u:
      *(_BYTE *)(a1 + 23) = 19;
      strcpy((char *)a1, "DialectVersions (7)");
      break;
    case 8u:
      *(_BYTE *)(a1 + 23) = 14;
      strcpy((char *)a1, "Properties (8)");
      break;
    default:
      v2[0] = "Unknown (";
      v2[2] = a2;
      v3 = 2307;
      v4[0] = v2;
      v4[2] = ")";
      v5 = 770;
      llvm::Twine::str((llvm::Twine *)v4, (std::string *)a1);
      break;
  }
}

uint64_t `anonymous namespace'::PropertiesSectionReader::initialize(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39[3];
  _QWORD v40[3];
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD *v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return 1;
  v35 = a3;
  v36 = a4;
  v37 = a3;
  v38 = a2;
  v34 = 0;
  {
    return 0;
  }
  v6 = *a1;
  v7 = a1[1];
  v30 = v6;
  v31 = v7;
  v32 = v6;
  v33 = a2;
  v8 = v34;
  if (v34 > *((unsigned int *)a1 + 7))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 2), a1 + 4, v34, 8);
    goto LABEL_7;
  }
  if (v34)
  {
    while (1)
    {
LABEL_7:
      v9 = a1[1];
      v10 = v30;
      v11 = v31;
      v12 = v32;
      v13 = *((unsigned int *)a1 + 6);
      if (v13 >= *((unsigned int *)a1 + 7))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 2), a1 + 4, v13 + 1, 8);
        v13 = *((unsigned int *)a1 + 6);
      }
      *(_QWORD *)(a1[2] + 8 * v13) = v9 - (v10 + v11) + v12;
      ++*((_DWORD *)a1 + 6);
      v39[0] = 0;
      {
        return 0;
      }
      if (!--v8)
      {
        if (v32 == v30 + v31)
          return 1;
        goto LABEL_15;
      }
    }
  }
  if (v6 == v6 + v7)
    return 1;
LABEL_15:
  mlir::emitError(v33, (uint64_t)v40);
  if (v40[0])
  {
    LODWORD(v39[0]) = 3;
    v39[1] = (unint64_t)"Broken properties section: didn't exhaust the offsets table";
    v39[2] = 59;
    v15 = v39;
    v16 = (char *)v41;
    if (v42 >= v43)
    {
      v28 = v42 + 1;
      if (v41 <= v39 && (char *)v41 + 24 * v42 > (char *)v39)
      {
        v29 = (char *)v39 - (_BYTE *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
        v16 = (char *)v41;
        v15 = (unint64_t *)((char *)v41 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
        v15 = v39;
        v16 = (char *)v41;
      }
    }
    v17 = &v16[24 * v42];
    v18 = *(_OWORD *)v15;
    *((_QWORD *)v17 + 2) = v15[2];
    *(_OWORD *)v17 = v18;
    ++v42;
  }
  v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  if (v49)
  {
    v19 = __p;
    if (__p)
    {
      v20 = v48;
      v21 = __p;
      if (v48 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v48 = v19;
      operator delete(v21);
    }
    v22 = v45;
    if (v45)
    {
      v23 = v46;
      v24 = v45;
      if (v46 != v45)
      {
        do
        {
          v26 = *--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            MEMORY[0x20BD002D4](v25, 0x1000C8077774924);
        }
        while (v23 != v22);
        v24 = v45;
      }
      v46 = v22;
      operator delete(v24);
    }
    if (v41 != v44)
      free(v41);
  }
  return v14;
}

uint64_t mlir::BytecodeReader::Impl::parseDialectSection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char **v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 *v23;
  _OWORD *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  const unsigned __int8 *v40;
  int8x16_t *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char **v47;
  _QWORD *buffer;
  const unsigned __int8 **v49;
  char *v50;
  uint64_t *v51;
  BOOL v52;
  uint64_t v53;
  BOOL v54;
  uint64_t *v55;
  uint64_t result;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  __int16 v61;
  __int16 v62;
  char v63;
  __int128 v64;
  __int16 v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  BOOL v69;
  uint64_t v70;
  unint64_t *v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  void *v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94[2];
  __int128 v95;
  unint64_t v96;
  char v97;
  uint64_t v98;
  __int128 v99;
  __int16 v100;
  _QWORD v101[3];
  void *v102;
  uint64_t v103;
  void *v104;
  _QWORD *v105;
  void *__p;
  _QWORD *v107;
  char v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  v88 = a2;
  v89 = a3;
  v90 = a2;
  v91 = v4;
  v87 = 0;
  v5 = (char **)(a1 + 272);
  v6 = v87;
  v7 = *(unsigned int *)(a1 + 280);
  if (v87 != v7)
  {
    if (v87 < v7)
    {
      v8 = 8 * v7;
      v9 = 8 * v87 - v8;
      v10 = (uint64_t *)&(*v5)[v8 - 8];
      do
      {
        v11 = *v10;
        *v10 = 0;
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 56);
          *(_QWORD *)(v11 + 56) = 0;
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
          MEMORY[0x20BD002F8](v11, 0x1072C4009F0BF78);
        }
        --v10;
        v9 += 8;
      }
      while (v9);
      goto LABEL_34;
    }
    if (v87 <= *(unsigned int *)(a1 + 284))
    {
      v13 = *v5;
      v20 = v87 - v7;
      if (v87 == v7)
        goto LABEL_34;
      goto LABEL_33;
    }
    v96 = 0;
    v13 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 272, (void *)(a1 + 288), v87, 8, &v96);
    v14 = *(char **)(a1 + 272);
    v15 = *(unsigned int *)(a1 + 280);
    if (!(_DWORD)v15)
    {
LABEL_30:
      v33 = v96;
      if (v14 != (char *)(a1 + 288))
        free(v14);
      *(_QWORD *)(a1 + 272) = v13;
      *(_DWORD *)(a1 + 284) = v33;
      v7 = *(unsigned int *)(a1 + 280);
      v20 = v6 - v7;
      if (v6 == v7)
        goto LABEL_34;
LABEL_33:
      bzero(&v13[8 * v7], 8 * v20);
LABEL_34:
      *(_DWORD *)(a1 + 280) = v6;
      goto LABEL_35;
    }
    v16 = (v15 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v17 = 8 * v15;
    if (v16 >= 0xB)
    {
      if (v14 >= &v13[v17] || (v18 = v13, v19 = *(char **)(a1 + 272), v13 >= &v14[v17]))
      {
        v21 = v16 + 1;
        v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
        v18 = &v13[v22];
        v19 = &v14[v22];
        v23 = (__int128 *)(v14 + 16);
        v24 = v13 + 16;
        v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v26 = *(v23 - 1);
          v27 = *v23;
          *(v23 - 1) = 0uLL;
          *v23 = 0uLL;
          *(v24 - 1) = v26;
          *v24 = v27;
          v23 += 2;
          v24 += 2;
          v25 -= 4;
        }
        while (v25);
        if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_23:
          v30 = (uint64_t)(*v5 - 8);
          do
          {
            v31 = *(_QWORD *)(v30 + v17);
            *(_QWORD *)(v30 + v17) = 0;
            if (v31)
            {
              v32 = *(_QWORD *)(v31 + 56);
              *(_QWORD *)(v31 + 56) = 0;
              if (v32)
                (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
              MEMORY[0x20BD002F8](v31, 0x1072C4009F0BF78);
            }
            v17 -= 8;
          }
          while (v17);
          v14 = *v5;
          goto LABEL_30;
        }
      }
    }
    else
    {
      v18 = v13;
      v19 = *(char **)(a1 + 272);
    }
    v28 = &v14[8 * v15];
    do
    {
      v29 = *(_QWORD *)v19;
      *(_QWORD *)v19 = 0;
      v19 += 8;
      *(_QWORD *)v18 = v29;
      v18 += 8;
    }
    while (v19 != v28);
    goto LABEL_23;
  }
LABEL_35:
  if (v6)
  {
    v34 = 0;
    v85 = v6;
    v86 = (uint64_t *)(a1 + 336);
    while (1)
    {
      v35 = (_OWORD *)operator new();
      *v35 = 0u;
      v35[1] = 0u;
      v35[2] = 0u;
      v35[3] = 0u;
      v36 = *(_QWORD *)&(*v5)[8 * v34];
      *(_QWORD *)&(*v5)[8 * v34] = v35;
      if (v36)
      {
        v37 = *(_QWORD *)(v36 + 56);
        *(_QWORD *)(v36 + 56) = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        MEMORY[0x20BD002F8](v36, 0x1072C4009F0BF78);
      }
      if (*(_QWORD *)(a1 + 248))
        break;
      v46 = *(_QWORD *)&(*v5)[8 * v34];
      v96 = 0;
      {
        return 0;
      }
LABEL_38:
      if (++v34 == v6)
        goto LABEL_68;
    }
    *(_QWORD *)&v95 = 0;
    v38 = v95;
    *(_QWORD *)&v95 = (unint64_t)v95 >> 1;
    if (!resolveEntry<llvm::SmallVector<llvm::StringRef,3u>,llvm::StringRef>(v91, *(_QWORD *)(a1 + 536), *(_DWORD *)(a1 + 544), (char *)v95, (_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 8 * v34) + 24), (uint64_t)"string", 6))return 0;
    if ((v38 & 1) != 0)
    {
      LOBYTE(v94[0]) = 0;
      if (LOBYTE(v94[0]) != 7)
      {
        v76 = *(_QWORD *)(a1 + 8);
        v96 = (unint64_t)"expected dialect version section";
        WORD4(v99) = 259;
        mlir::emitError(v76, (uint64_t)&v96, (uint64_t)v101);
        if (v101[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v101);
        if (v108)
        {
          v77 = __p;
          if (__p)
          {
            v78 = v107;
            v79 = __p;
            if (v107 != __p)
            {
              do
                v78 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v78 - 1);
              while (v78 != v77);
              v79 = __p;
            }
            v107 = v77;
            operator delete(v79);
          }
          v80 = v104;
          if (v104)
          {
            v81 = v105;
            v82 = v104;
            if (v105 != v104)
            {
              do
              {
                v84 = *--v81;
                v83 = v84;
                *v81 = 0;
                if (v84)
                  MEMORY[0x20BD002D4](v83, 0x1000C8077774924);
              }
              while (v81 != v80);
              v82 = v104;
            }
            v105 = v80;
            operator delete(v82);
          }
          if (v102 != &v103)
            free(v102);
        }
        return 0;
      }
    }
    v39 = *(_QWORD *)&(*v5)[8 * v34];
    v41 = *(int8x16_t **)(v39 + 24);
    v40 = *(const unsigned __int8 **)(v39 + 32);
    v42 = llvm::StringMapImpl::LookupBucketFor(v86, v41, v40);
    v43 = *v86;
    v44 = v42;
    v45 = *(_QWORD *)(*v86 + 8 * v42);
    if (v45 == -8)
    {
      --*(_DWORD *)(a1 + 352);
    }
    else if (v45)
    {
LABEL_37:
      *(_QWORD *)(v45 + 8) = v39;
      goto LABEL_38;
    }
    v47 = v5;
    buffer = llvm::allocate_buffer((size_t)(v40 + 17), (std::align_val_t)8uLL);
    v49 = (const unsigned __int8 **)buffer;
    v50 = (char *)(buffer + 2);
    if (v40)
      memcpy(buffer + 2, v41, (size_t)v40);
    v40[(_QWORD)v50] = 0;
    *v49 = v40;
    v49[1] = 0;
    *(_QWORD *)(v43 + 8 * v44) = v49;
    ++*(_DWORD *)(a1 + 348);
    v51 = (uint64_t *)(*(_QWORD *)(a1 + 336)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)v86, v44));
    v5 = v47;
    v6 = v85;
    v45 = *v51;
    if (*v51)
      v52 = v45 == -8;
    else
      v52 = 1;
    if (v52)
    {
      do
      {
        v53 = v51[1];
        ++v51;
        v45 = v53;
        if (v53)
          v54 = v45 == -8;
        else
          v54 = 1;
      }
      while (v54);
    }
    goto LABEL_37;
  }
LABEL_68:
  if (*(_QWORD *)(a1 + 248) >= 4uLL)
  {
    v96 = 0;
    if (v96 > *(unsigned int *)(a1 + 372))
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 360, (void *)(a1 + 376), v96, 48);
  }
  if (v90 == v88 + v89)
    return 1;
  v55 = (uint64_t *)(a1 + 360);
  while (1)
  {
    v57 = *(unsigned int *)(a1 + 280);
    v94[0] = *(_QWORD *)(a1 + 272);
    v94[1] = v57;
    v93 = 0;
    v92 = 0;
    v58 = v92;
    if (v92)
    {
      v59 = v93;
      do
      {
        while (1)
        {
          v60 = *v59;
          v95 = 0uLL;
          if (*(_QWORD *)(a1 + 248) > 4uLL)
          {
            v96 = 0;
            v63 = v96;
            if (!resolveEntry<llvm::SmallVector<llvm::StringRef,3u>,llvm::StringRef>(v91, *(_QWORD *)(a1 + 536), *(_DWORD *)(a1 + 544), (char *)(v96 >> 1), &v95, (uint64_t)"string", 6))return 0;
            v61 = v63 & 1;
            v62 = 1;
          }
          else
          {
            v96 = 0;
            {
              return 0;
            }
            v61 = 0;
            v62 = 0;
          }
          v64 = v95;
          v65 = v61 | (v62 << 8);
          v66 = *(unsigned int *)(a1 + 368);
          if (v66 >= *(_DWORD *)(a1 + 372))
            break;
          v67 = *(_QWORD *)(a1 + 360) + 48 * v66;
          *(_BYTE *)v67 = 0;
          *(_BYTE *)(v67 + 8) = 0;
          *(_QWORD *)(v67 + 16) = v60;
          *(_OWORD *)(v67 + 24) = v64;
          *(_WORD *)(v67 + 40) = v65;
          ++*(_DWORD *)(a1 + 368);
          if (!--v58)
            goto LABEL_74;
        }
        LOBYTE(v96) = 0;
        v97 = 0;
        v98 = v60;
        v99 = v95;
        v100 = v65;
        v68 = v66 + 1;
        v69 = *v55 + 48 * (unint64_t)v66 > (unint64_t)&v96;
        if (*v55 <= (unint64_t)&v96 && v69)
        {
          v75 = (char *)&v96 - *v55;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 360, (void *)(a1 + 376), v68, 48);
          v70 = *v55;
          v71 = (unint64_t *)&v75[*v55];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 360, (void *)(a1 + 376), v68, 48);
          v70 = *v55;
          v71 = &v96;
        }
        v72 = (_OWORD *)(v70 + 48 * *(unsigned int *)(a1 + 368));
        v73 = *(_OWORD *)v71;
        v74 = *((_OWORD *)v71 + 2);
        v72[1] = *((_OWORD *)v71 + 1);
        v72[2] = v74;
        *v72 = v73;
        ++*(_DWORD *)(a1 + 368);
        --v58;
      }
      while (v58);
    }
LABEL_74:
    result = 1;
    if (v90 == v88 + v89)
      return result;
  }
}

uint64_t mlir::BytecodeReader::Impl::parseResourceSection(uint64_t *a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  __int128 v20;
  _QWORD *ParserFor;
  int v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int Key;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int v48;
  char v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int64_t v60;
  int64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  void *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t Context;
  mlir::MLIRContext *v70;
  const char *v71;
  uint64_t **v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  __int128 v87;
  char *v88;
  char *v89;
  char *v90;
  __int128 v91;
  char *v92;
  char *v93;
  char *v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  __int128 v102;
  char v103;
  _QWORD *v104;
  _QWORD *v105;
  void *v106;
  _QWORD *v107;
  const char *v108;
  _QWORD *v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  int v119;
  unint64_t v120;
  BOOL v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  int64_t v126;
  int64_t v127;
  int64_t v128;
  char v129;
  char v130;
  _QWORD *v131;
  _QWORD *v132;
  void *v133;
  _QWORD *v134;
  _QWORD *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  __int128 v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  __int128 v149;
  _QWORD *v150;
  _QWORD *v151;
  void *v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  __int128 v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  __int128 v166;
  _QWORD *v167;
  _QWORD *v168;
  void *v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  int64_t v178;
  int64_t v179;
  int64_t v180;
  int64_t v181;
  void *v182;
  mlir::MLIRContext *v183;
  unint64_t *v184;
  uint64_t *v185;
  uint64_t v186;
  _QWORD v187[7];
  __int128 v188;
  unint64_t v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196[2];
  uint64_t v197;
  unint64_t v198;
  __int128 v199;
  uint64_t v200;
  int v201;
  __int128 *v202;
  uint64_t *v203;
  uint64_t v204;
  __int128 v205;
  unint64_t v206;
  int v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212[2];
  uint64_t v213;
  void *v214;
  unsigned int v215;
  unsigned int v216;
  _BYTE v217[96];
  void *v218;
  _QWORD *v219;
  void *__p;
  _QWORD *v221;
  char v222;
  uint64_t v223;

  v223 = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a3 + 16) != 0) == (*((_BYTE *)a4 + 16) != 0))
  {
    if (*((_BYTE *)a3 + 16))
    {
      v187[0] = &off_24C028780;
      v187[1] = a1 + 11;
      v187[2] = a1 + 67;
      v187[3] = a1 + 53;
      v187[4] = a1 + 42;
      v187[5] = a2;
      v187[6] = a1 + 31;
      v16 = *a1;
      v15 = a1[1];
      v17 = a1[34];
      v186 = a1[151];
      v196[1] = *((unsigned int *)a1 + 70);
      v197 = v15;
      v196[0] = v17;
      v193 = *a3;
      v194 = v193;
      v195 = v15;
      v190 = *a4;
      v191 = v190;
      v192 = v15;
      v189 = 0;
      v184 = (unint64_t *)(a1 + 53);
      if (v189)
      {
        v18 = 0;
        v19 = (uint64_t *)(v16 + 16);
        do
        {
          v188 = 0uLL;
          v212[0] = 0;
          {
            return 0;
          }
          v20 = v188;
          *(_OWORD *)v212 = v188;
          *(_QWORD *)&v199 = 0;
          if (!llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(v19, (uint64_t)v212, &v199)|| (_QWORD)v199 == *(_QWORD *)(v16 + 16) + 24 * *(unsigned int *)(v16 + 32))
          {
            v23 = *(_QWORD *)(v16 + 40);
            if (v23)
            {
              ParserFor = mlir::FallbackAsmResourceMap::getParserFor(v23, (const void *)v212[0], v212[1]);
              v22 = 0;
              goto LABEL_55;
            }
          }
          else
          {
            ParserFor = *(_QWORD **)(v199 + 16);
            if (ParserFor)
            {
              v22 = 0;
              goto LABEL_55;
            }
          }
          mlir::emitWarning(v197, (uint64_t)v212);
          if (v212[0])
          {
            LODWORD(v199) = 3;
            *((_QWORD *)&v199 + 1) = "ignoring unknown external resources for '";
            v200 = 41;
            v24 = (char *)v214;
            if (v215 >= v216)
            {
              v58 = v215 + 1;
              if (v214 <= &v199 && (char *)v214 + 24 * v215 > (char *)&v199)
              {
                v60 = (char *)&v199 - (_BYTE *)v214;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v58, 24);
                v24 = (char *)v214;
                v25 = (char *)v214 + v60;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v58, 24);
                v25 = (char *)&v199;
                v24 = (char *)v214;
              }
            }
            else
            {
              v25 = (char *)&v199;
            }
            v26 = &v24[24 * v215];
            v27 = *(_OWORD *)v25;
            *((_QWORD *)v26 + 2) = *((_QWORD *)v25 + 2);
            *(_OWORD *)v26 = v27;
            ++v215;
            if (v212[0])
            {
              LOWORD(v202) = 261;
              v199 = v20;
              mlir::Diagnostic::operator<<((uint64_t)&v212[1], (const void ***)&v199);
              if (v212[0])
              {
                LODWORD(v199) = 3;
                *((_QWORD *)&v199 + 1) = "'";
                v200 = 1;
                v28 = (char *)v214;
                if (v215 >= v216)
                {
                  v59 = v215 + 1;
                  if (v214 <= &v199 && (char *)v214 + 24 * v215 > (char *)&v199)
                  {
                    v61 = (char *)&v199 - (_BYTE *)v214;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v59, 24);
                    v28 = (char *)v214;
                    v29 = (char *)v214 + v61;
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v59, 24);
                    v29 = (char *)&v199;
                    v28 = (char *)v214;
                  }
                }
                else
                {
                  v29 = (char *)&v199;
                }
                v30 = &v28[24 * v215];
                v31 = *(_OWORD *)v29;
                *((_QWORD *)v30 + 2) = *((_QWORD *)v29 + 2);
                *(_OWORD *)v30 = v31;
                ++v215;
                if (v212[0])
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v212);
              }
            }
          }
          if (v222)
          {
            v32 = __p;
            if (__p)
            {
              v33 = v221;
              v34 = __p;
              if (v221 != __p)
              {
                do
                  v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
                while (v33 != v32);
                v34 = __p;
              }
              v221 = v32;
              operator delete(v34);
            }
            v35 = v218;
            if (v218)
            {
              v36 = v219;
              v37 = v218;
              if (v219 != v218)
              {
                do
                {
                  v39 = *--v36;
                  v38 = v39;
                  *v36 = 0;
                  if (v39)
                    MEMORY[0x20BD002D4](v38, 0x1000C8077774924);
                }
                while (v36 != v35);
                v37 = v218;
              }
              v219 = v35;
              operator delete(v37);
            }
            if (v214 != v217)
              free(v214);
          }
          ParserFor = 0;
          v22 = 1;
LABEL_55:
          v40 = v197;
          v206 = 0;
          v41 = v206;
          if (v206)
          {
            do
            {
              v208 = 0uLL;
              v207 = 0;
              v198 = 0;
              v205 = 0uLL;
              v212[0] = 0;
              {
                return 0;
              }
              if (!v22)
              {
                v209 = v205;
                v210 = v205;
                v211 = v40;
                Key = llvm::StringMapImpl::FindKey(a1 + 61, (int8x16_t *)v208, *((const unsigned __int8 **)&v208 + 1));
                if (Key == -1 || Key == (unint64_t)*((unsigned int *)a1 + 124))
                {
                  v43 = 0;
                  v44 = &byte_207AF6795;
                }
                else
                {
                  v45 = *(_QWORD *)(a1[61] + 8 * Key);
                  v47 = *(char **)(v45 + 8);
                  v46 = v45 + 8;
                  v44 = v47;
                  v48 = *(char *)(v46 + 23);
                  if (v48 >= 0)
                    v44 = (char *)v46;
                  v43 = *(_QWORD *)(v46 + 8);
                  if (v48 >= 0)
                    v43 = v48;
                }
                *(_QWORD *)&v208 = v44;
                *((_QWORD *)&v208 + 1) = v43;
                *(_QWORD *)&v199 = &off_24C0299F0;
                *((_QWORD *)&v199 + 1) = v44;
                v200 = v43;
                v201 = v207;
                v202 = &v209;
                v203 = a1 + 67;
                v204 = v186;
                if (!(*(unsigned __int8 (**)(_QWORD *, __int128 *))(*ParserFor + 16))(ParserFor, &v199))
                {
LABEL_223:
                  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v199);
                  return 0;
                }
                if (v210 != (_QWORD)v209 + *((_QWORD *)&v209 + 1))
                {
                  v49 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v212);
                  if (v212[0])
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v212);
                  if (v222)
                  {
                    v50 = __p;
                    if (__p)
                    {
                      v51 = v221;
                      v52 = __p;
                      if (v221 != __p)
                      {
                        do
                          v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
                        while (v51 != v50);
                        v52 = __p;
                      }
                      v221 = v50;
                      operator delete(v52);
                    }
                    v53 = v218;
                    if (v218)
                    {
                      v54 = v219;
                      v55 = v218;
                      if (v219 != v218)
                      {
                        do
                        {
                          v57 = *--v54;
                          v56 = v57;
                          *v54 = 0;
                          if (v57)
                            MEMORY[0x20BD002D4](v56, 0x1000C8077774924);
                        }
                        while (v54 != v53);
                        v55 = v218;
                      }
                      v219 = v53;
                      operator delete(v55);
                    }
                    if (v214 != v217)
                      free(v214);
                  }
                  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v199);
                  if (v49)
                    break;
                  return 0;
                }
                ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v199);
              }
            }
            while (--v41);
          }
          ++v18;
          v19 = (uint64_t *)(v16 + 16);
        }
        while (v18 < v189);
      }
      Context = mlir::Attribute::getContext((mlir::Attribute *)&v197);
      if (v191 != (_QWORD)v190 + *((_QWORD *)&v190 + 1))
      {
        v70 = (mlir::MLIRContext *)Context;
        v185 = a1 + 61;
        v182 = a1 + 55;
        v71 = "'";
        v183 = (mlir::MLIRContext *)Context;
        while (1)
        {
          v198 = 0;
          v72 = (uint64_t **)v198;
            return 0;
          v73 = **v72;
          if (!v73)
          {
            mlir::emitError(v195, (uint64_t)v212);
            if (v212[0])
            {
              LODWORD(v199) = 3;
              *((_QWORD *)&v199 + 1) = "dialect '";
              v200 = 9;
              v156 = (char *)&v199;
              v157 = (char *)v214;
              if (v215 >= v216)
              {
                v175 = v215 + 1;
                if (v214 <= &v199 && (char *)v214 + 24 * v215 > (char *)&v199)
                {
                  v179 = (char *)&v199 - (_BYTE *)v214;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v175, 24);
                  v157 = (char *)v214;
                  v156 = (char *)v214 + v179;
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v175, 24);
                  v156 = (char *)&v199;
                  v157 = (char *)v214;
                }
              }
              v158 = &v157[24 * v215];
              v159 = *(_OWORD *)v156;
              *((_QWORD *)v158 + 2) = *((_QWORD *)v156 + 2);
              *(_OWORD *)v158 = v159;
              ++v215;
              if (v212[0])
              {
                v160 = *v72;
                LOWORD(v202) = 261;
                v162 = v160[3];
                v161 = v160[4];
                *(_QWORD *)&v199 = v162;
                *((_QWORD *)&v199 + 1) = v161;
                mlir::Diagnostic::operator<<((uint64_t)&v212[1], (const void ***)&v199);
                if (v212[0])
                {
                  LODWORD(v199) = 3;
                  *((_QWORD *)&v199 + 1) = "' is unknown";
                  v200 = 12;
                  v163 = (char *)&v199;
                  v164 = (char *)v214;
                  if (v215 >= v216)
                  {
                    v177 = v215 + 1;
                    if (v214 <= &v199 && (char *)v214 + 24 * v215 > (char *)&v199)
                    {
                      v181 = (char *)&v199 - (_BYTE *)v214;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v177, 24);
                      v164 = (char *)v214;
                      v163 = (char *)v214 + v181;
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v177, 24);
                      v163 = (char *)&v199;
                      v164 = (char *)v214;
                    }
                  }
                  v165 = &v164[24 * v215];
                  v166 = *(_OWORD *)v163;
                  *((_QWORD *)v165 + 2) = *((_QWORD *)v163 + 2);
                  *(_OWORD *)v165 = v166;
                  ++v215;
                }
              }
            }
            v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v212);
            if (v212[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v212);
            if (!v222)
              return v6;
            v167 = __p;
            if (__p)
            {
              v168 = v221;
              v169 = __p;
              if (v221 != __p)
              {
                do
                  v168 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v168 - 1);
                while (v168 != v167);
                v169 = __p;
              }
              v221 = v167;
              operator delete(v169);
            }
            v10 = v218;
            if (!v218)
              goto LABEL_267;
            v170 = v219;
            v12 = v218;
            if (v219 == v218)
              goto LABEL_266;
            do
            {
              v172 = *--v170;
              v171 = v172;
              *v170 = 0;
              if (v172)
                MEMORY[0x20BD002D4](v171, 0x1000C8077774924);
            }
            while (v170 != v10);
            goto LABEL_265;
          }
          if (!mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(**v72)
            || (v74 = mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(v73)) == 0)
          {
            mlir::emitError(v195, (uint64_t)v212);
            if (v212[0])
            {
              LODWORD(v199) = 3;
              *((_QWORD *)&v199 + 1) = "unexpected resources for dialect '";
              v200 = 34;
              v139 = (char *)&v199;
              v140 = (char *)v214;
              if (v215 >= v216)
              {
                v174 = v215 + 1;
                if (v214 <= &v199 && (char *)v214 + 24 * v215 > (char *)&v199)
                {
                  v178 = (char *)&v199 - (_BYTE *)v214;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v174, 24);
                  v140 = (char *)v214;
                  v139 = (char *)v214 + v178;
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v174, 24);
                  v139 = (char *)&v199;
                  v140 = (char *)v214;
                }
              }
              v141 = &v140[24 * v215];
              v142 = *(_OWORD *)v139;
              *((_QWORD *)v141 + 2) = *((_QWORD *)v139 + 2);
              *(_OWORD *)v141 = v142;
              ++v215;
              if (v212[0])
              {
                v143 = *v72;
                LOWORD(v202) = 261;
                v145 = v143[3];
                v144 = v143[4];
                *(_QWORD *)&v199 = v145;
                *((_QWORD *)&v199 + 1) = v144;
                mlir::Diagnostic::operator<<((uint64_t)&v212[1], (const void ***)&v199);
                if (v212[0])
                {
                  LODWORD(v199) = 3;
                  *((_QWORD *)&v199 + 1) = v71;
                  v200 = 1;
                  v146 = (char *)&v199;
                  v147 = (char *)v214;
                  if (v215 >= v216)
                  {
                    v176 = v215 + 1;
                    if (v214 <= &v199 && (char *)v214 + 24 * v215 > (char *)&v199)
                    {
                      v180 = (char *)&v199 - (_BYTE *)v214;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v176, 24);
                      v147 = (char *)v214;
                      v146 = (char *)v214 + v180;
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v176, 24);
                      v146 = (char *)&v199;
                      v147 = (char *)v214;
                    }
                  }
                  v148 = &v147[24 * v215];
                  v149 = *(_OWORD *)v146;
                  *((_QWORD *)v148 + 2) = *((_QWORD *)v146 + 2);
                  *(_OWORD *)v148 = v149;
                  ++v215;
                }
              }
            }
            v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v212);
            if (v212[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v212);
            if (!v222)
              return v6;
            v150 = __p;
            if (__p)
            {
              v151 = v221;
              v152 = __p;
              if (v221 != __p)
              {
                do
                  v151 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v151 - 1);
                while (v151 != v150);
                v152 = __p;
              }
              v221 = v150;
              operator delete(v152);
            }
            v10 = v218;
            if (!v218)
              goto LABEL_267;
            v153 = v219;
            v12 = v218;
            if (v219 == v218)
              goto LABEL_266;
            do
            {
              v155 = *--v153;
              v154 = v155;
              *v153 = 0;
              if (v155)
                MEMORY[0x20BD002D4](v154, 0x1000C8077774924);
            }
            while (v153 != v10);
            goto LABEL_265;
          }
          v75 = v74;
          v76 = v197;
          *(_QWORD *)&v188 = 0;
          v77 = v188;
          if ((_QWORD)v188)
          {
            v78 = 0;
            do
            {
              v208 = 0uLL;
              v207 = 0;
              v206 = 0;
              v205 = 0uLL;
              v212[0] = 0;
              {
                return 0;
              }
              v79 = v208;
              (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v75 + 32))(&v209, v75, v208, *((_QWORD *)&v208 + 1));
              if ((_BYTE)v211)
              {
                (*(void (**)(unint64_t *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v75 + 40))(v212, v75, &v209);
                v80 = llvm::StringMap<std::string,llvm::MallocAllocator>::try_emplace<>((uint64_t)v185, (int8x16_t *)v79, *((const unsigned __int8 **)&v79 + 1));
                v81 = *v80 + 8;
                if (*(char *)(*v80 + 31) < 0)
                  operator delete(*(void **)v81);
                v82 = *(_OWORD *)v212;
                *(_QWORD *)(v81 + 16) = v213;
                *(_OWORD *)v81 = v82;
                v83 = *((unsigned int *)a1 + 108);
                v84 = a1[53];
                if (v83 >= *((_DWORD *)a1 + 109))
                {
                  v120 = v83 + 1;
                  v121 = v84 + 24 * v83 > (unint64_t)&v209;
                  if (v84 <= (unint64_t)&v209 && v121)
                  {
                    v125 = (char *)&v209 - v84;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v184, v182, v120, 24);
                    v84 = *v184;
                    v85 = &v125[*v184];
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v184, v182, v120, 24);
                    v84 = *v184;
                    v85 = (char *)&v209;
                  }
                }
                else
                {
                  v85 = (char *)&v209;
                }
                v86 = v84 + 24 * *((unsigned int *)a1 + 108);
                v87 = *(_OWORD *)v85;
                *(_QWORD *)(v86 + 16) = *((_QWORD *)v85 + 2);
                *(_OWORD *)v86 = v87;
                ++*((_DWORD *)a1 + 108);
              }
              else
              {
                mlir::emitError(v195, (uint64_t)v212);
                if (v212[0])
                {
                  LODWORD(v199) = 3;
                  *((_QWORD *)&v199 + 1) = "unknown 'resource' key '";
                  v200 = 24;
                  v88 = (char *)v214;
                  if (v215 >= v216)
                  {
                    v122 = v215 + 1;
                    if (v214 <= &v199 && (char *)v214 + 24 * v215 > (char *)&v199)
                    {
                      v126 = (char *)&v199 - (_BYTE *)v214;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v122, 24);
                      v88 = (char *)v214;
                      v89 = (char *)v214 + v126;
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v122, 24);
                      v89 = (char *)&v199;
                      v88 = (char *)v214;
                    }
                  }
                  else
                  {
                    v89 = (char *)&v199;
                  }
                  v90 = &v88[24 * v215];
                  v91 = *(_OWORD *)v89;
                  *((_QWORD *)v90 + 2) = *((_QWORD *)v89 + 2);
                  *(_OWORD *)v90 = v91;
                  ++v215;
                  if (v212[0])
                  {
                    LOWORD(v202) = 261;
                    v199 = v79;
                    mlir::Diagnostic::operator<<((uint64_t)&v212[1], (const void ***)&v199);
                    if (v212[0])
                    {
                      LODWORD(v199) = 3;
                      *((_QWORD *)&v199 + 1) = "' for dialect '";
                      v200 = 15;
                      v92 = (char *)v214;
                      if (v215 >= v216)
                      {
                        v123 = v215 + 1;
                        if (v214 <= &v199 && (char *)v214 + 24 * v215 > (char *)&v199)
                        {
                          v127 = (char *)&v199 - (_BYTE *)v214;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v123, 24);
                          v92 = (char *)v214;
                          v93 = (char *)v214 + v127;
                        }
                        else
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v123, 24);
                          v93 = (char *)&v199;
                          v92 = (char *)v214;
                        }
                      }
                      else
                      {
                        v93 = (char *)&v199;
                      }
                      v94 = &v92[24 * v215];
                      v95 = *(_OWORD *)v93;
                      *((_QWORD *)v94 + 2) = *((_QWORD *)v93 + 2);
                      *(_OWORD *)v94 = v95;
                      ++v215;
                      if (v212[0])
                      {
                        v96 = *(_QWORD *)v198;
                        LOWORD(v202) = 261;
                        v98 = *(_QWORD *)(v96 + 24);
                        v97 = *(_QWORD *)(v96 + 32);
                        *(_QWORD *)&v199 = v98;
                        *((_QWORD *)&v199 + 1) = v97;
                        mlir::Diagnostic::operator<<((uint64_t)&v212[1], (const void ***)&v199);
                        if (v212[0])
                        {
                          LODWORD(v199) = 3;
                          *((_QWORD *)&v199 + 1) = v71;
                          v200 = 1;
                          v99 = (char *)v214;
                          if (v215 >= v216)
                          {
                            v124 = v215 + 1;
                            if (v214 <= &v199 && (char *)v214 + 24 * v215 > (char *)&v199)
                            {
                              v128 = (char *)&v199 - (_BYTE *)v214;
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v124, 24);
                              v99 = (char *)v214;
                              v100 = (char *)v214 + v128;
                            }
                            else
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v124, 24);
                              v100 = (char *)&v199;
                              v99 = (char *)v214;
                            }
                          }
                          else
                          {
                            v100 = (char *)&v199;
                          }
                          v101 = &v99[24 * v215];
                          v102 = *(_OWORD *)v100;
                          *((_QWORD *)v101 + 2) = *((_QWORD *)v100 + 2);
                          *(_OWORD *)v101 = v102;
                          ++v215;
                        }
                      }
                    }
                  }
                }
                v103 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v212);
                if (v212[0])
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v212);
                if (v222)
                {
                  v104 = __p;
                  if (__p)
                  {
                    v105 = v221;
                    v106 = __p;
                    if (v221 != __p)
                    {
                      do
                        v105 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v105 - 1);
                      while (v105 != v104);
                      v106 = __p;
                    }
                    v221 = v104;
                    operator delete(v106);
                  }
                  v107 = v218;
                  if (v218)
                  {
                    v108 = v71;
                    v109 = v219;
                    v110 = v218;
                    if (v219 != v218)
                    {
                      do
                      {
                        v112 = *--v109;
                        v111 = v112;
                        *v109 = 0;
                        if (v112)
                          MEMORY[0x20BD002D4](v111, 0x1000C8077774924);
                      }
                      while (v109 != v107);
                      v110 = v218;
                    }
                    v219 = v107;
                    operator delete(v110);
                    v71 = v108;
                  }
                  if (v214 != v217)
                    free(v214);
                }
                if (!v103)
                  return 0;
              }
              if (*((_QWORD *)&v205 + 1))
              {
                v209 = v205;
                v210 = v205;
                v211 = v76;
                v113 = llvm::StringMapImpl::FindKey(v185, (int8x16_t *)v208, *((const unsigned __int8 **)&v208 + 1));
                if (v113 == -1 || v113 == (unint64_t)*((unsigned int *)a1 + 124))
                {
                  v114 = 0;
                  v115 = &byte_207AF6795;
                }
                else
                {
                  v116 = *(_QWORD *)(*v185 + 8 * v113);
                  v118 = *(char **)(v116 + 8);
                  v117 = v116 + 8;
                  v115 = v118;
                  v119 = *(char *)(v117 + 23);
                  if (v119 >= 0)
                    v115 = (char *)v117;
                  v114 = *(_QWORD *)(v117 + 8);
                  if (v119 >= 0)
                    v114 = v119;
                }
                *(_QWORD *)&v208 = v115;
                *((_QWORD *)&v208 + 1) = v114;
                *(_QWORD *)&v199 = &off_24C0299F0;
                *((_QWORD *)&v199 + 1) = v115;
                v200 = v114;
                v201 = v207;
                v202 = &v209;
                v203 = a1 + 67;
                v204 = v186;
                if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)v75 + 48))(v75, &v199))
                  goto LABEL_223;
                if (v210 != (_QWORD)v209 + *((_QWORD *)&v209 + 1))
                {
                  v129 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v212);
                  v130 = v129;
                  if (v212[0])
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v212);
                  v70 = v183;
                  if (v222)
                  {
                    v131 = __p;
                    if (__p)
                    {
                      v132 = v221;
                      v133 = __p;
                      if (v221 != __p)
                      {
                        do
                          v132 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v132 - 1);
                        while (v132 != v131);
                        v133 = __p;
                      }
                      v221 = v131;
                      operator delete(v133);
                    }
                    v134 = v218;
                    if (v218)
                    {
                      v135 = v219;
                      v136 = v218;
                      if (v219 != v218)
                      {
                        do
                        {
                          v138 = *--v135;
                          v137 = v138;
                          *v135 = 0;
                          if (v138)
                            MEMORY[0x20BD002D4](v137, 0x1000C8077774924);
                        }
                        while (v135 != v134);
                        v136 = v218;
                      }
                      v219 = v134;
                      operator delete(v136);
                    }
                    if (v214 != v217)
                      free(v214);
                  }
                  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v199);
                  if (v130)
                    goto LABEL_200;
                  return 0;
                }
                ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v199);
              }
            }
            while (++v78 != v77);
          }
          v70 = v183;
LABEL_200:
          v6 = 1;
          if (v191 == (_QWORD)v190 + *((_QWORD *)&v190 + 1))
            return v6;
        }
      }
    }
    return 1;
  }
  if (*((_BYTE *)a4 + 16))
  {
    v5 = a1[1];
    *(_QWORD *)&v199 = "unexpected resource offset section when resource section is not present";
    LOWORD(v202) = 259;
    mlir::emitError(v5, (uint64_t)&v199, (uint64_t)v212);
    v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v212);
    if (v212[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v212);
    if (v222)
    {
      v7 = __p;
      if (__p)
      {
        v8 = v221;
        v9 = __p;
        if (v221 != __p)
        {
          do
            v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          v9 = __p;
        }
        v221 = v7;
        operator delete(v9);
      }
      v10 = v218;
      if (!v218)
        goto LABEL_267;
      v11 = v219;
      v12 = v218;
      if (v219 == v218)
      {
LABEL_266:
        v219 = v10;
        operator delete(v12);
LABEL_267:
        if (v214 != v217)
          free(v214);
        return v6;
      }
      do
      {
        v14 = *--v11;
        v13 = v14;
        *v11 = 0;
        if (v14)
          MEMORY[0x20BD002D4](v13, 0x1000C8077774924);
      }
      while (v11 != v10);
LABEL_265:
      v12 = v218;
      goto LABEL_266;
    }
  }
  else
  {
    v62 = a1[1];
    *(_QWORD *)&v199 = "expected resource offset section when resource section is present";
    LOWORD(v202) = 259;
    mlir::emitError(v62, (uint64_t)&v199, (uint64_t)v212);
    v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v212);
    if (v212[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v212);
    if (v222)
    {
      v63 = __p;
      if (__p)
      {
        v64 = v221;
        v65 = __p;
        if (v221 != __p)
        {
          do
            v64 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v64 - 1);
          while (v64 != v63);
          v65 = __p;
        }
        v221 = v63;
        operator delete(v65);
      }
      v10 = v218;
      if (!v218)
        goto LABEL_267;
      v66 = v219;
      v12 = v218;
      if (v219 == v218)
        goto LABEL_266;
      do
      {
        v68 = *--v66;
        v67 = v68;
        *v66 = 0;
        if (v68)
          MEMORY[0x20BD002D4](v67, 0x1000C8077774924);
      }
      while (v66 != v10);
      goto LABEL_265;
    }
  }
  return v6;
}

uint64_t `anonymous namespace'::AttrTypeReader::initialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  _QWORD *v51;
  _QWORD *v52;
  void *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  _QWORD *v65;
  _QWORD *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _QWORD v90[3];
  void *v91;
  _BYTE v92[96];
  void *v93;
  _QWORD *v94;
  void *__p;
  _QWORD *v96;
  char v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  v12 = *(_QWORD *)(a1 + 136);
  v81 = a6;
  v82 = a7;
  v83 = a6;
  v84 = v12;
  v80 = 0;
  v79 = 0;
  v77 = (uint64_t *)(a1 + 24);
  v13 = v80;
  v14 = *(unsigned int *)(a1 + 32);
  if (v80 != v14)
  {
    if (v80 >= v14)
    {
      if (v80 > *(unsigned int *)(a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v77, (void *)(a1 + 40), v80, 40);
        v14 = *(unsigned int *)(a1 + 32);
      }
      if (v13 != v14)
        bzero((void *)(*v77 + 40 * v14), 40 * ((40 * (v13 - v14) - 40) / 0x28) + 40);
    }
    *(_DWORD *)(a1 + 32) = v13;
    LODWORD(v14) = v13;
  }
  v78 = (uint64_t *)(a1 + 80);
  v15 = v79;
  v16 = *(unsigned int *)(a1 + 88);
  v17 = (uint64_t *)(a1 + 24);
  if (v79 != v16)
  {
    if (v79 >= v16)
    {
      if (v79 > *(unsigned int *)(a1 + 92))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v78, (void *)(a1 + 96), v79, 40);
        v16 = *(unsigned int *)(a1 + 88);
      }
      if (v15 != v16)
        bzero((void *)(*v78 + 40 * v16), 40 * ((40 * (v15 - v16) - 40) / 0x28) + 40);
    }
    *(_DWORD *)(a1 + 88) = v15;
    LODWORD(v14) = *(_DWORD *)(a1 + 32);
    LODWORD(v16) = v15;
  }
  if ((_DWORD)v14)
  {
    v70 = a1;
    v18 = 0;
    v19 = 0;
    v71 = v14;
    v72 = a2;
    v74 = a3;
    while (1)
    {
      v87 = a2;
      v88 = a3;
      v86 = 0;
      v85 = 0;
      v20 = v85;
      if (v85)
      {
        v21 = 0;
        v22 = v86;
        do
        {
          v24 = *v22;
          v25 = *v17;
          v89 = 0;
          v26 = v89;
          *(_BYTE *)(v25 + 40 * v19 + 16) = v89 & 1;
          v27 = v26 >> 1;
          v89 = v26 >> 1;
          v28 = (v26 >> 1) + v18;
          if (v28 <= a5)
          {
            v23 = (_QWORD *)(v25 + 40 * v19);
            v23[3] = a4 + v18;
            v23[4] = v27;
            v23[1] = v24;
            v18 = v28;
          }
          else
          {
            v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v90);
            if (v90[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v90);
            if (v97)
            {
              v30 = __p;
              if (__p)
              {
                v31 = v96;
                v32 = __p;
                if (v96 != __p)
                {
                  do
                    v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
                  while (v31 != v30);
                  v32 = __p;
                }
                v96 = v30;
                operator delete(v32);
              }
              v33 = v93;
              if (v93)
              {
                v34 = a4;
                v35 = a5;
                v36 = v94;
                v37 = v93;
                if (v94 != v93)
                {
                  do
                  {
                    v39 = *--v36;
                    v38 = v39;
                    *v36 = 0;
                    if (v39)
                      MEMORY[0x20BD002D4](v38, 0x1000C8077774924);
                  }
                  while (v36 != v33);
                  v37 = v93;
                }
                v94 = v33;
                operator delete(v37);
                a5 = v35;
                a4 = v34;
                v17 = v77;
              }
              if (v91 != v92)
                free(v91);
            }
            if (!v29)
              return 0;
          }
          ++v19;
        }
        while (++v21 != v20);
      }
      a2 = v72;
      a3 = v74;
      if (v19 == v71)
      {
        LODWORD(v16) = *(_DWORD *)(v70 + 88);
        if ((_DWORD)v16)
          goto LABEL_49;
        goto LABEL_81;
      }
    }
  }
  v18 = 0;
  if ((_DWORD)v16)
  {
LABEL_49:
    v40 = 0;
    v76 = v16;
    v73 = a2;
    v75 = a3;
    do
    {
      v87 = a2;
      v88 = a3;
      v86 = 0;
      v85 = 0;
      v41 = v85;
      if (v85)
      {
        v42 = 0;
        v43 = v86;
        do
        {
          v45 = *v43;
          v46 = *v78;
          v89 = 0;
          v47 = v89;
          *(_BYTE *)(v46 + 40 * v40 + 16) = v89 & 1;
          v48 = v47 >> 1;
          v89 = v47 >> 1;
          v49 = (v47 >> 1) + v18;
          if (v49 <= a5)
          {
            v44 = (_QWORD *)(v46 + 40 * v40);
            v44[3] = a4 + v18;
            v44[4] = v48;
            v44[1] = v45;
            v18 = v49;
          }
          else
          {
            v50 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v90);
            if (v90[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v90);
            if (v97)
            {
              v51 = __p;
              if (__p)
              {
                v52 = v96;
                v53 = __p;
                if (v96 != __p)
                {
                  do
                    v52 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v52 - 1);
                  while (v52 != v51);
                  v53 = __p;
                }
                v96 = v51;
                operator delete(v53);
              }
              v54 = v93;
              if (v93)
              {
                v55 = a4;
                v56 = v94;
                v57 = v93;
                if (v94 != v93)
                {
                  do
                  {
                    v59 = *--v56;
                    v58 = v59;
                    *v56 = 0;
                    if (v59)
                      MEMORY[0x20BD002D4](v58, 0x1000C8077774924);
                  }
                  while (v56 != v54);
                  v57 = v93;
                }
                v94 = v54;
                operator delete(v57);
                a4 = v55;
              }
              if (v91 != v92)
                free(v91);
            }
            if (!v50)
              return 0;
          }
          ++v40;
        }
        while (++v42 != v41);
      }
      a3 = v75;
      a2 = v73;
    }
    while (v40 != v76);
  }
LABEL_81:
  if (v83 == v81 + v82)
    return 1;
  v60 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v90);
  if (v90[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v90);
  if (v97)
  {
    v62 = __p;
    if (__p)
    {
      v63 = v96;
      v64 = __p;
      if (v96 != __p)
      {
        do
          v63 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v63 - 1);
        while (v63 != v62);
        v64 = __p;
      }
      v96 = v62;
      operator delete(v64);
    }
    v65 = v93;
    if (v93)
    {
      v66 = v94;
      v67 = v93;
      if (v94 != v93)
      {
        do
        {
          v69 = *--v66;
          v68 = v69;
          *v66 = 0;
          if (v69)
            MEMORY[0x20BD002D4](v68, 0x1000C8077774924);
        }
        while (v66 != v65);
        v67 = v93;
      }
      v94 = v65;
      operator delete(v67);
    }
    if (v91 != v92)
      free(v91);
  }
  return v60;
}

uint64_t mlir::BytecodeReader::Impl::parseIRSection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int *v7;
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  int v47;
  _BYTE *v48;
  _BYTE *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  void *v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  void *v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v77;
  int64_t v78;
  __int128 v79;
  char v80;
  void *v81;
  _QWORD *v82;
  char *v83;
  _QWORD v84[3];
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  void *__dst;
  uint64_t v90;
  _BYTE v91[33];
  void *v92[2];
  uint64_t v93;
  void *v94[2];
  uint64_t v95;
  char v96;
  uint64_t v97;
  const char *v98;
  int v99;
  void *v100;
  uint64_t v101;
  _BYTE v102[96];
  __int128 v103;
  uint64_t v104;
  __int128 __p;
  uint64_t v106;
  unsigned __int8 v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 8);
  v84[0] = a2;
  v84[1] = a3;
  v84[2] = a2;
  v85 = v6;
  LOBYTE(v79) = 0;
  v80 = 0;
  v7 = (unsigned int *)mlir::ModuleOp::create(v6, &v79);
  v8 = (char *)operator new(0x80uLL);
  v9 = v8;
  v10 = v8 + 128;
  v11 = v7[11];
  v12 = v11 & 0x7FFFFF;
  if ((v11 & 0x7FFFFF) != 0)
  {
    v13 = (((unint64_t)&v7[4 * ((v11 >> 23) & 1) + 17] + ((v11 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
        + 32 * v7[10];
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  *(_QWORD *)v8 = v13;
  *((_QWORD *)v8 + 1) = v13 + 24 * v12;
  *((_QWORD *)v8 + 2) = v84;
  *((_QWORD *)v8 + 3) = 0;
  *((_DWORD *)v8 + 8) = 0;
  v14 = v8 + 56;
  *((_QWORD *)v8 + 5) = v8 + 56;
  v15 = (uint64_t)(v8 + 40);
  *((_QWORD *)v9 + 6) = 0x600000000;
  *((_QWORD *)v9 + 13) = 0;
  *((_QWORD *)v9 + 14) = 0;
  v9[120] = 1;
  v82 = v10;
  v83 = v10;
  v81 = v9;
  v16 = *(_QWORD *)((((unint64_t)&v7[4 * ((v11 >> 23) & 1) + 17]
                    + ((v11 >> 21) & 0x7F8)
                    + 3) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * v7[10]
                  + 8);
  if (v16)
    v17 = v16 - 8;
  else
    v17 = 0;
  v18 = *((unsigned int *)v9 + 12);
  if (v18 >= *((_DWORD *)v9 + 13))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v15, v14, v18 + 1, 8);
    LODWORD(v18) = *((_DWORD *)v9 + 12);
  }
  *(_QWORD *)(*((_QWORD *)v9 + 5) + 8 * v18) = v17;
  ++*((_DWORD *)v9 + 12);
  *(v82 - 3) = *(_QWORD *)(*(v82 - 16) + 8);
  if (mlir::BytecodeReader::Impl::parseBlockHeader(a1, (_anonymous_namespace_::EncodingReader *)v84, (uint64_t)(v82 - 16)))
  {
    v19 = *(_QWORD *)(a1 + 688);
    if (v19 >= *(_QWORD *)(a1 + 696))
    {
      v20 = std::vector<mlir::BytecodeReader::Impl::ValueScope>::__emplace_back_slow_path<>((void **)(a1 + 680));
    }
    else
    {
      *(_OWORD *)(v19 + 16) = 0u;
      *(_OWORD *)(v19 + 32) = 0u;
      *(_QWORD *)(v19 + 48) = 0;
      *(_OWORD *)v19 = 0u;
      *(_QWORD *)(v19 + 24) = v19 + 40;
      *(_DWORD *)(v19 + 36) = 4;
      v20 = (char *)(v19 + 56);
    }
    *(_QWORD *)(a1 + 688) = v20;
    v22 = v82;
    v23 = (*((_QWORD *)v20 - 6) - *((_QWORD *)v20 - 7)) >> 3;
    v24 = *((unsigned int *)v20 - 6);
    if (v24 >= *((_DWORD *)v20 - 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v20 - 32), v20 - 16, v24 + 1, 4);
      LODWORD(v24) = *((_DWORD *)v20 - 6);
    }
    *(_DWORD *)(*((_QWORD *)v20 - 4) + 4 * v24) = v23;
    ++*((_DWORD *)v20 - 6);
    v25 = *((_QWORD *)v20 - 7);
    v26 = (*((_QWORD *)v20 - 6) - v25) >> 3;
    v27 = *((unsigned int *)v22 - 24);
    if (v26 >= v26 + v27)
    {
      if (v26 > v26 + v27)
        *((_QWORD *)v20 - 6) = v25 + 8 * (v26 + v27);
    }
    else
    {
      std::vector<mlir::Value>::__append((void **)v20 - 7, v27);
    }
    while (v81 != v82)
    {
      if (!mlir::BytecodeReader::Impl::parseRegions((unsigned int *)a1, &v81, (uint64_t)(v82 - 16)))
        goto LABEL_22;
    }
    if (*(_QWORD *)(a1 + 760) != a1 + 760)
    {
      v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v97);
      if (v97)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v97);
      if (!v107)
        goto LABEL_112;
      v28 = (_QWORD *)__p;
      if ((_QWORD)__p)
      {
        v29 = (_QWORD *)*((_QWORD *)&__p + 1);
        v30 = (void *)__p;
        if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
        {
          do
            v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          v30 = (void *)__p;
        }
        *((_QWORD *)&__p + 1) = v28;
        operator delete(v30);
      }
      v31 = (_QWORD *)v103;
      if ((_QWORD)v103)
      {
        v32 = (_QWORD *)*((_QWORD *)&v103 + 1);
        v33 = (void *)v103;
        if (*((_QWORD *)&v103 + 1) != (_QWORD)v103)
        {
          do
          {
            v35 = *--v32;
            v34 = v35;
            *v32 = 0;
            if (v35)
              MEMORY[0x20BD002D4](v34, 0x1000C8077774924);
          }
          while (v32 != v31);
          v33 = (void *)v103;
        }
        *((_QWORD *)&v103 + 1) = v31;
        operator delete(v33);
      }
      v53 = v100;
      if (v100 == v102)
        goto LABEL_112;
      goto LABEL_111;
    }
    LODWORD(v86) = 0;
    v97 = a1;
    v98 = (const char *)&v86;
    mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)v7, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::BytecodeReader::Impl::processUseLists(mlir::Operation *)::$_0>, (uint64_t)&v97, 0);
    v97 = a1;
    v36 = mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)v7, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Block *)>::callback_fn<mlir::BytecodeReader::Impl::processUseLists(mlir::Operation *)::$_1>, (uint64_t)&v97, 1);
    v97 = a1;
    v37 = mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)v7, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::BytecodeReader::Impl::processUseLists(mlir::Operation *)::$_2>, (uint64_t)&v97, 1);
    if (v36 && v37)
    {
      v38 = *(unsigned int *)(a1 + 280);
      if (!(_DWORD)v38)
      {
LABEL_54:
        if (*(_BYTE *)(*(_QWORD *)a1 + 8))
          mlir::verify((mlir *)v7, (mlir::Operation *)1);
        v51 = *(_QWORD *)((((unint64_t)&v7[4 * (((unint64_t)v7[11] >> 23) & 1) + 17]
                          + (((unint64_t)v7[11] >> 21) & 0x7F8)
                          + 3) & 0xFFFFFFFFFFFFFFF8)
                        + 32 * v7[10]
                        + 8);
        if (v51)
          v52 = v51 - 8;
        else
          v52 = 0;
        llvm::iplist_impl<llvm::simple_ilist<mlir::Operation>,llvm::ilist_traits<mlir::Operation>>::splice(a4 + 32, (uint64_t *)(a4 + 32), v52 + 32, *(uint64_t **)(v52 + 40), (uint64_t *)(v52 + 32));
        v21 = 1;
        goto LABEL_113;
      }
      v39 = *(_QWORD *)(a1 + 272);
      v40 = 8 * v38;
      while (1)
      {
        if (*(_QWORD *)(*(_QWORD *)v39 + 56))
        {
          v41 = *(_QWORD *)(*(_QWORD *)v39 + 16);
          if (v41)
          {
            if (!(*(unsigned __int8 (**)(uint64_t, unsigned int *))(*(_QWORD *)v41 + 64))(v41, v7))
              break;
          }
        }
        v39 += 8;
        v40 -= 8;
        if (!v40)
          goto LABEL_54;
      }
LABEL_22:
      v21 = 0;
      goto LABEL_112;
    }
    mlir::emitError(v85, (uint64_t)&v97);
    v42 = v97;
    if (v97)
    {
      LODWORD(v86) = 3;
      v87 = "parsed use-list orders were invalid and could not be applied";
      v88 = 60;
      v43 = (char *)&v86;
      v44 = (char *)v100;
      if (v101 >= HIDWORD(v101))
      {
        v77 = v101 + 1;
        if (v100 <= &v86 && (char *)v100 + 24 * v101 > (char *)&v86)
        {
          v78 = (char *)&v86 - (_BYTE *)v100;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v102, v77, 24);
          v44 = (char *)v100;
          v43 = (char *)v100 + v78;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v102, v77, 24);
          v43 = (char *)&v86;
          v44 = (char *)v100;
        }
      }
      v45 = &v44[24 * v101];
      v46 = *(_OWORD *)v43;
      *((_QWORD *)v45 + 2) = *((_QWORD *)v43 + 2);
      *(_OWORD *)v45 = v46;
      LODWORD(v101) = v101 + 1;
      v42 = v97;
    }
    v86 = v42;
    LOBYTE(v87) = 0;
    v96 = 0;
    if (!v107)
    {
LABEL_76:
      mlir::InFlightDiagnostic::abandon(&v97);
      if (v97)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v97);
      if (v107)
      {
        v55 = (_QWORD *)__p;
        if ((_QWORD)__p)
        {
          v56 = (_QWORD *)*((_QWORD *)&__p + 1);
          v57 = (void *)__p;
          if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
          {
            do
              v56 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v56 - 1);
            while (v56 != v55);
            v57 = (void *)__p;
          }
          *((_QWORD *)&__p + 1) = v55;
          operator delete(v57);
        }
        v58 = (_QWORD *)v103;
        if ((_QWORD)v103)
        {
          v59 = (_QWORD *)*((_QWORD *)&v103 + 1);
          v60 = (void *)v103;
          if (*((_QWORD *)&v103 + 1) != (_QWORD)v103)
          {
            do
            {
              v62 = *--v59;
              v61 = v62;
              *v59 = 0;
              if (v62)
                MEMORY[0x20BD002D4](v61, 0x1000C8077774924);
            }
            while (v59 != v58);
            v60 = (void *)v103;
          }
          *((_QWORD *)&v103 + 1) = v58;
          operator delete(v60);
        }
        if (v100 != v102)
          free(v100);
      }
      v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v86);
      if (v86)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v86);
      if (!v96)
        goto LABEL_112;
      v63 = v94[0];
      if (v94[0])
      {
        v64 = v94[1];
        v65 = v94[0];
        if (v94[1] != v94[0])
        {
          do
            v64 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v64 - 1);
          while (v64 != v63);
          v65 = v94[0];
        }
        v94[1] = v63;
        operator delete(v65);
      }
      v66 = v92[0];
      if (v92[0])
      {
        v67 = v92[1];
        v68 = v92[0];
        if (v92[1] != v92[0])
        {
          do
          {
            v70 = *--v67;
            v69 = v70;
            *v67 = 0;
            if (v70)
              MEMORY[0x20BD002D4](v69, 0x1000C8077774924);
          }
          while (v67 != v66);
          v68 = v92[0];
        }
        v92[1] = v66;
        operator delete(v68);
      }
      v53 = __dst;
      if (__dst == v91)
      {
LABEL_112:
        if (!v7)
          goto LABEL_114;
        goto LABEL_113;
      }
LABEL_111:
      free(v53);
      goto LABEL_112;
    }
    v87 = v98;
    v47 = v101;
    LODWORD(v88) = v99;
    v48 = v91;
    __dst = v91;
    v90 = 0x400000000;
    if (!(_DWORD)v101)
    {
      v50 = 1;
      goto LABEL_72;
    }
    v49 = v102;
    if (v100 != v102)
    {
      __dst = v100;
      v90 = v101;
      v100 = v102;
      HIDWORD(v101) = 0;
      v50 = 1;
LABEL_71:
      LODWORD(v101) = 0;
LABEL_72:
      *(_OWORD *)v92 = v103;
      v93 = v104;
      v103 = 0uLL;
      *(_OWORD *)v94 = __p;
      v95 = v106;
      v104 = 0;
      __p = 0uLL;
      v106 = 0;
      v96 = 1;
      if (v50)
      {
        if (v100 != v102)
          free(v100);
        v107 = 0;
      }
      goto LABEL_76;
    }
    if (v101 < 5)
    {
      v54 = v101;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v91, v101, 24);
      v54 = v101;
      if (!(_DWORD)v101)
      {
LABEL_70:
        LODWORD(v90) = v47;
        v50 = v107;
        goto LABEL_71;
      }
      v49 = v100;
      v48 = __dst;
    }
    memcpy(v48, v49, 24 * v54);
    goto LABEL_70;
  }
  v21 = 0;
LABEL_113:
  mlir::Operation::erase((mlir::Operation *)v7);
LABEL_114:
  v71 = v81;
  if (v81)
  {
    v72 = v82;
    v73 = v81;
    if (v82 != v81)
    {
      do
      {
        v74 = (_QWORD *)*(v72 - 11);
        if (v72 - 9 != v74)
          free(v74);
        v75 = *(v72 - 13);
        *(v72 - 13) = 0;
        if (v75)
          MEMORY[0x20BD002F8](v75, 0x1070C401CF53446);
        v72 -= 16;
      }
      while (v72 != v71);
      v73 = v81;
    }
    v82 = v71;
    operator delete(v73);
  }
  return v21;
}

uint64_t `anonymous namespace'::EncodingReader::parseVarInt(_anonymous_namespace_::EncodingReader *this, unint64_t *a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 __dst[24];
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  void *__p;
  _QWORD *v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned __int8 *)*((_QWORD *)this + 2);
  if (v4 == (unsigned __int8 *)(*(_QWORD *)this + *((_QWORD *)this + 1)))
  {
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__dst);
    if (*(_QWORD *)__dst)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
    if (v24)
    {
      v9 = __p;
      if (__p)
      {
        v10 = v23;
        v11 = __p;
        if (v23 != __p)
        {
          do
            v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
          while (v10 != v9);
          v11 = __p;
        }
        v23 = v9;
        operator delete(v11);
      }
      v12 = v20;
      if (v20)
      {
        v13 = v21;
        v14 = v20;
        if (v21 != v20)
        {
          do
          {
            v16 = *--v13;
            v15 = v16;
            *v13 = 0;
            if (v16)
              MEMORY[0x20BD002D4](v15, 0x1000C8077774924);
          }
          while (v13 != v12);
          v14 = v20;
        }
        v21 = v12;
        operator delete(v14);
      }
      if (v18 != &v19)
        free(v18);
    }
    if (!v8)
      return 0;
    v5 = *a2;
    if ((*a2 & 1) != 0)
      goto LABEL_3;
LABEL_26:
    if (v5)
    {
      v6 = *(_QWORD *)__dst;
      goto LABEL_4;
    }
    return 0;
  }
  *((_QWORD *)this + 2) = v4 + 1;
  v5 = *v4;
  *a2 = v5;
  if ((v5 & 1) == 0)
    goto LABEL_26;
LABEL_3:
  v6 = v5 >> 1;
LABEL_4:
  *a2 = v6;
  return 1;
}

uint64_t mlir::BytecodeReader::Impl::sortUseListOrder(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  char *v45;
  unint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  _QWORD *v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  _QWORD *v57;
  unint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  _BYTE *v64;
  unsigned int v65;
  uint64_t v66;
  char *v67;
  char *v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  int v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  const double *v77;
  int32x4_t *v78;
  const double *v79;
  unsigned __int128 v80;
  const double *v81;
  unsigned __int128 v82;
  const double *v83;
  const double *v84;
  unsigned __int128 v85;
  unsigned __int128 v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  unint64_t v90;
  int32x4_t v91;
  int32x4_t *v92;
  int32x4_t v93;
  int32x4_t v94;
  uint64_t v95;
  _DWORD *v96;
  unint64_t v97;
  _DWORD *v98;
  int v100;
  unsigned int v101;
  llvm *v102;
  uint64_t v103;
  unsigned int v104;
  _QWORD *v105;
  void *v106[2];
  uint64_t v107;
  void *v108;
  unint64_t v109;
  _BYTE v110[16];
  void *__dst;
  uint64_t v112;
  _BYTE v113[16];
  char v114;
  void *v115;
  uint64_t v116;
  char v117[8];
  char *v118;
  void **v119;
  char v120;
  char *v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  uint64_t v125;

  v125 = *MEMORY[0x24BDAC8D0];
  v105 = a2;
  v3 = (_QWORD *)*a2;
  if (!*a2 || !*v3)
    return 1;
  v5 = *(_DWORD *)(a1 + 528);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 512);
    v7 = v5 - 1;
    v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
    v9 = *(_QWORD **)(v6 + 48 * v8);
    if (v9 == a2)
    {
      v10 = 1;
    }
    else
    {
      v100 = 1;
      do
      {
        v10 = v9 != (_QWORD *)-4096;
        if (v9 == (_QWORD *)-4096)
          break;
        v101 = v8 + v100++;
        v8 = v101 & v7;
        v9 = *(_QWORD **)(v6 + 48 * v8);
        v10 = 1;
      }
      while (v9 != a2);
    }
  }
  else
  {
    v10 = 0;
  }
  v12 = *(_QWORD *)(a1 + 704);
  v13 = *(unsigned int *)(a1 + 720);
  if (!(_DWORD)v13)
  {
LABEL_14:
    v16 = (uint64_t *)(v12 + 16 * v13);
    goto LABEL_15;
  }
  v14 = v3[2];
  LODWORD(v15) = ((v14 >> 4) ^ (v14 >> 9)) & (v13 - 1);
  v16 = (uint64_t *)(v12 + 16 * v15);
  v17 = *v16;
  if (*v16 != v14)
  {
    v18 = 1;
    while (v17 != -4096)
    {
      v19 = v15 + v18++;
      v15 = v19 & (v13 - 1);
      v17 = *(_QWORD *)(v12 + 16 * v15);
      if (v17 == v14)
      {
        v16 = (uint64_t *)(v12 + 16 * v15);
        goto LABEL_15;
      }
    }
    goto LABEL_14;
  }
LABEL_15:
  v20 = *((unsigned int *)v16 + 2);
  v21 = mlir::OpOperand::getOperandNumber((unint64_t)v3) | (unint64_t)(v20 << 32);
  v121 = (char *)&v123;
  v123 = 0;
  v124 = v21;
  v122 = 0x300000001;
  v22 = *(_QWORD **)*a2;
  if (!v22)
  {
    if (!v10)
      goto LABEL_93;
LABEL_38:
    v48 = *(_QWORD *)(a1 + 512);
    v49 = *(_DWORD *)(a1 + 528);
    if (v49)
    {
      v50 = ((v105 >> 4) ^ (v105 >> 9)) & (v49 - 1);
      v51 = v48 + 48 * v50;
      v52 = *(_QWORD **)v51;
      if (*(_QWORD **)v51 == v105)
        goto LABEL_45;
      v53 = 1;
      while (v52 != (_QWORD *)-4096)
      {
        v54 = v50 + v53++;
        v50 = v54 & (v49 - 1);
        v51 = v48 + 48 * v50;
        v52 = *(_QWORD **)v51;
        if (*(_QWORD **)v51 == v105)
          goto LABEL_45;
      }
    }
    v51 = v48 + 48 * v49;
LABEL_45:
    __dst = v113;
    v112 = *(_QWORD *)"";
    v55 = *(unsigned int *)(v51 + 16);
    if (&__dst == (void **)(v51 + 8) || (_DWORD)v55 == 0)
    {
      LODWORD(v55) = 0;
      v114 = *(_BYTE *)(v51 + 40);
      v108 = v110;
      v109 = *(_QWORD *)"";
      v57 = (_QWORD *)*v105;
      if (!*v105)
        goto LABEL_64;
      goto LABEL_51;
    }
    v64 = v113;
    v65 = *(_DWORD *)(v51 + 16);
    if (v55 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v113, *(unsigned int *)(v51 + 16), 4);
      v65 = *(_DWORD *)(v51 + 16);
      if (!v65)
        goto LABEL_62;
      v64 = __dst;
    }
    memcpy(v64, *(const void **)(v51 + 8), 4 * v65);
LABEL_62:
    LODWORD(v112) = v55;
    v114 = *(_BYTE *)(v51 + 40);
    v108 = v110;
    v109 = *(_QWORD *)"";
    if (__dst == v113)
    {
      v89 = v55;
      if (v55 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v110, v55, 4), (v89 = v112) != 0))
      {
        memcpy(v108, __dst, 4 * v89);
      }
      LODWORD(v109) = v55;
      LODWORD(v112) = 0;
      v57 = (_QWORD *)*v105;
      if (!*v105)
      {
LABEL_64:
        v58 = 0;
        if (!v114)
          goto LABEL_65;
        goto LABEL_54;
      }
    }
    else
    {
      v108 = __dst;
      v109 = __PAIR64__(HIDWORD(v112), v55);
      __dst = v113;
      v112 = 0;
      v57 = (_QWORD *)*v105;
      if (!*v105)
        goto LABEL_64;
    }
LABEL_51:
    v58 = 0;
    do
    {
      ++v58;
      v57 = (_QWORD *)*v57;
    }
    while (v57);
    if (!v114)
    {
LABEL_65:
      v102 = 0;
      v103 = 0;
      v104 = 0;
      if ((_DWORD)v55)
      {
LABEL_66:
        v66 = 0;
        v67 = (char *)v108;
        v68 = (char *)v108 + 4 * v55;
        while (1)
        {
          if (v104)
          {
            v69 = *(_DWORD *)v67;
            v70 = (37 * *(_DWORD *)v67) & (v104 - 1);
            v71 = *((_DWORD *)v102 + v70);
            if (*(_DWORD *)v67 == v71)
            {
              if (v70 != v104)
                goto LABEL_115;
              goto LABEL_68;
            }
            v72 = 1;
            do
            {
              if (v71 == -1)
                goto LABEL_67;
              v73 = v70 + v72++;
              v70 = v73 & (v104 - 1);
              v71 = *((_DWORD *)v102 + v70);
            }
            while (v69 != v71);
            if (v70 != v104)
              goto LABEL_115;
          }
LABEL_67:
          v69 = *(_DWORD *)v67;
LABEL_68:
          v66 += v69;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::try_emplace<llvm::detail::DenseSetEmpty&>((char *)&v102, v67, (uint64_t)&v115);
          v67 += 4;
          if (v67 == v68)
          {
            if (v58 == v109)
              goto LABEL_111;
            goto LABEL_115;
          }
        }
      }
LABEL_110:
      v66 = 0;
      if (!v58)
      {
LABEL_111:
        if (v66 == ((v58 - 1) * v58) >> 1)
        {
          v115 = v121;
          v116 = (uint64_t)&v108;
          v117[0] = 1;
          v118 = &v121[16 * v122];
          v119 = &v108;
          v120 = 1;
          llvm::SmallVector<unsigned int,4u>::SmallVector<llvm::mapped_iterator<std::pair<unsigned int,unsigned long long> *,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_1,unsigned int>>(v106, (unsigned int **)&v115);
          llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v108, (uint64_t)v106);
          if (v106[0] != &v107)
            free(v106[0]);
          mlir::Value::shuffleUseList(&v105, (unsigned int *)v108, v109);
        }
      }
LABEL_115:
      llvm::deallocate_buffer(v102, (void *)(4 * v104));
    }
LABEL_54:
    if ((v55 & 1) != 0)
    {
      v11 = 0;
      if (v108 != v110)
        free(v108);
      if (__dst != v113)
        free(__dst);
      goto LABEL_120;
    }
    llvm::SmallVector<unsigned int,4u>::SmallVector(&v115, v58);
    v59 = v115;
    v60 = v116;
    if ((_DWORD)v116)
    {
      v61 = (v116 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v61 < 7)
      {
        LODWORD(v62) = 0;
        v63 = v115;
LABEL_102:
        v96 = &v59[v60];
        do
        {
          *v63++ = v62;
          LODWORD(v62) = v62 + 1;
        }
        while (v63 != v96);
        goto LABEL_104;
      }
      v90 = v61 + 1;
      v62 = (v61 + 1) & 0x7FFFFFFFFFFFFFF8;
      v63 = (char *)v115 + 4 * v62;
      v91 = (int32x4_t)xmmword_207A8E9A0;
      v92 = (int32x4_t *)((char *)v115 + 16);
      v93.i64[0] = 0x400000004;
      v93.i64[1] = 0x400000004;
      v94.i64[0] = 0x800000008;
      v94.i64[1] = 0x800000008;
      v95 = v62;
      do
      {
        v92[-1] = v91;
        *v92 = vaddq_s32(v91, v93);
        v91 = vaddq_s32(v91, v94);
        v92 += 2;
        v95 -= 8;
      }
      while (v95);
      if (v90 != v62)
        goto LABEL_102;
    }
LABEL_104:
    if ((_DWORD)v109)
    {
      v97 = 0;
      v98 = v108;
      do
      {
        v59[v98[v97]] = v98[v97 + 1];
        v97 += 2;
      }
      while (v97 < v109);
    }
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v108, (uint64_t)&v115);
    if (v115 != v117)
      free(v115);
    LODWORD(v55) = v109;
    v102 = 0;
    v103 = 0;
    v104 = 0;
    if ((_DWORD)v109)
      goto LABEL_66;
    goto LABEL_110;
  }
  v23 = 1;
  v24 = 1;
  do
  {
    v25 = *(_QWORD *)(a1 + 704);
    v26 = *(unsigned int *)(a1 + 720);
    if ((_DWORD)v26)
    {
      v27 = v22[2];
      LODWORD(v28) = ((v27 >> 4) ^ (v27 >> 9)) & (v26 - 1);
      v29 = (uint64_t *)(v25 + 16 * v28);
      v30 = *v29;
      if (*v29 == v27)
        goto LABEL_24;
      v31 = 1;
      while (v30 != -4096)
      {
        v32 = v28 + v31++;
        v28 = v32 & (v26 - 1);
        v30 = *(_QWORD *)(v25 + 16 * v28);
        if (v30 == v27)
        {
          v29 = (uint64_t *)(v25 + 16 * v28);
          goto LABEL_24;
        }
      }
    }
    v29 = (uint64_t *)(v25 + 16 * v26);
LABEL_24:
    v33 = *((unsigned int *)v29 + 2);
    v34 = mlir::OpOperand::getOperandNumber((unint64_t)v22) | (unint64_t)(v33 << 32);
    v35 = v21 > v34;
    v36 = v122;
    if (v122 >= (unint64_t)HIDWORD(v122))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, &v123, v122 + 1, 16);
      v36 = v122;
    }
    v23 &= v35;
    v37 = &v121[16 * v36];
    *(_QWORD *)v37 = v24;
    *((_QWORD *)v37 + 1) = v34;
    v38 = (v122 + 1);
    LODWORD(v122) = v122 + 1;
    ++v24;
    v22 = (_QWORD *)*v22;
    v21 = v34;
  }
  while (v22);
  if (((v10 | v23 ^ 1) & 1) == 0)
    goto LABEL_93;
  if ((v23 & 1) == 0)
  {
    v39 = 126 - 2 * __clz(v38);
    if ((_DWORD)v38)
      v40 = v39;
    else
      v40 = 0;
    std::__introsort<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *,false>((int *)v121, (int *)&v121[16 * v38], v40, 1);
  }
  if (v10)
    goto LABEL_38;
  v41 = (unsigned int *)v121;
  v42 = v122;
  v115 = v117;
  v116 = 0xC00000000;
  if (v122 >= 0xD)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v117, v122, 4);
    v43 = v116;
    v44 = (unsigned int *)v115;
    v45 = (char *)v115 + 4 * v116;
    v46 = (v42 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v46 < 0x18)
      goto LABEL_36;
LABEL_83:
    if (v45 >= (char *)&v41[4 * v46 + 2] || (v47 = v41, v41 >= &v44[v43 + 1 + v46]))
    {
      v74 = v46 + 1;
      v75 = (v46 + 1) & 7;
      if (!v75)
        v75 = 8;
      v76 = v74 - v75;
      v45 += 4 * v76;
      v47 = &v41[4 * v76];
      v77 = (const double *)(v41 + 16);
      v78 = (int32x4_t *)&v44[v43 + 4];
      do
      {
        v79 = v77 - 8;
        v80 = (unsigned __int128)vld2q_f64(v79);
        v81 = v77 - 4;
        v82 = (unsigned __int128)vld2q_f64(v81);
        v83 = v77 + 16;
        v85 = (unsigned __int128)vld2q_f64(v77);
        v84 = v77 + 4;
        v86 = (unsigned __int128)vld2q_f64(v84);
        v78[-1] = vuzp1q_s32((int32x4_t)v80, (int32x4_t)v82);
        *v78 = vuzp1q_s32((int32x4_t)v85, (int32x4_t)v86);
        v78 += 2;
        v77 = v83;
        v76 -= 8;
      }
      while (v76);
    }
    goto LABEL_89;
  }
  if ((_DWORD)v122)
  {
    v43 = 0;
    v44 = (unsigned int *)v117;
    v45 = v117;
    v46 = (v122 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v46 >= 0x18)
      goto LABEL_83;
LABEL_36:
    v47 = v41;
    do
    {
LABEL_89:
      v87 = *(_QWORD *)v47;
      v47 += 4;
      *(_DWORD *)v45 = v87;
      v45 += 4;
    }
    while (v47 != &v41[4 * v42]);
    v88 = v116;
  }
  else
  {
    v88 = 0;
    v44 = (unsigned int *)v117;
  }
  LODWORD(v116) = v88 + v42;
  mlir::Value::shuffleUseList(&v105, v44, (v88 + v42));
  if (v115 != v117)
    free(v115);
LABEL_93:
  v11 = 1;
LABEL_120:
  if (v121 != (char *)&v123)
    free(v121);
  return v11;
}

