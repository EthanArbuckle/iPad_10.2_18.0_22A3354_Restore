void sub_206DF16B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  ZinLinearPattern::AtomItemDesc *v58;

  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&a37);
  if (a14 < 0)
    operator delete(__p);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&a44);
  if (a21 < 0)
    operator delete(a16);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&a51);
  if (a27 < 0)
    operator delete(a22);
  while (v58 != (ZinLinearPattern::AtomItemDesc *)&a58)
  {
    v58 = (ZinLinearPattern::AtomItemDesc *)((char *)v58 - 96);
    ZinLinearPattern::AtomItemDesc::~AtomItemDesc(v58);
  }
  _Unwind_Resume(a1);
}

void sub_206DF1868()
{
  JUMPOUT(0x206DF1828);
}

void sub_206DF1878()
{
  JUMPOUT(0x206DF1860);
}

double ZinNEPatterns::UConv::SharedClone@<D0>(ZinNEPatterns::UConv *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<ZinNEPatterns::UConv,std::allocator<ZinNEPatterns::UConv>,ZinNEPatterns::UConv const&,void>((uint64_t *)this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

_QWORD *ZinNEPatterns::UConv::Fuse(uint64_t a1, uint64_t a2, ZinActivationLayer *a3)
{
  ZinNEPatterns *SingleMatch;
  ZinStochasticRoundLayer *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21[2];
  char v22;
  std::string __p;
  char *v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;

  std::string::basic_string[abi:ne180100]<0>(&v26, "main");
  SingleMatch = (ZinNEPatterns *)ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&v26);
  if (SHIBYTE(v28) < 0)
    operator delete(v26);
  v26 = 0;
  v27 = 0;
  v28 = 0;
  std::string::basic_string[abi:ne180100]<0>(v21, "goc");
  ZinPattern::GetMatch(a1, (unsigned __int8 *)v21, &__p);
  ZinPatternUtils::ToGOC((uint64_t **)&__p, (uint64_t **)&v24);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22 < 0)
    operator delete(v21[0]);
  std::vector<ZinGOCLayer const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinGOCLayer const**>,std::__wrap_iter<ZinGOCLayer const**>>((uint64_t)&v26, v27, v24, v25, (v25 - v24) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "activation");
  v7 = (ZinStochasticRoundLayer *)ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8 = ZinMergeGOCSequence(a2, (uint64_t)a3, (uint64_t)&v26);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  ZinNEPatterns::CreateNEConvLayerName(SingleMatch, (ZinIrOpLayer *)v8, 0, v7, a3, &__p);
  v10 = (_QWORD *)operator new();
  v11 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 40))(v9, 0, 0);
  v12 = v11[1];
  v19 = *v11;
  v20 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  ZinNEConvLayer::ZinNEConvLayer(v10, &v19, (__int128 *)&__p, 0, 0, 0, (uint64_t)SingleMatch, 0, (uint64_t)v8, (uint64_t)v7, 0, 0, 0);
  v15 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v26)
  {
    v27 = (uint64_t)v26;
    operator delete(v26);
  }
  return v10;
}

void sub_206DF1AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  void *v28;
  void *v29;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  MEMORY[0x20BD002F8](v25, 0x10B3C4001E18234);
  if (a25 < 0)
    operator delete(__p);
  v28 = *(void **)(v26 - 96);
  if (v28)
  {
    *(_QWORD *)(v26 - 88) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(v26 - 72);
  if (v29)
  {
    *(_QWORD *)(v26 - 64) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void sub_206DF1B84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  if (a22 < 0)
    JUMPOUT(0x206DF1B68);
  JUMPOUT(0x206DF1B6CLL);
}

void sub_206DF1BB0()
{
  JUMPOUT(0x206DF1B6CLL);
}

void sub_206DF1BB8()
{
  uint64_t v0;

  if (*(char *)(v0 - 49) < 0)
    JUMPOUT(0x206DF1B78);
  JUMPOUT(0x206DF1B7CLL);
}

uint64_t ZinNEPatterns::KernelRasterizer::Analyze()
{
  return 1;
}

double ZinNEPatterns::KernelRasterizer::SharedClone@<D0>(ZinNEPatterns::KernelRasterizer *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<ZinNEPatterns::KernelRasterizer,std::allocator<ZinNEPatterns::KernelRasterizer>,ZinNEPatterns::KernelRasterizer const&,void>((uint64_t *)this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

uint64_t ZinNEPatterns::KernelRasterizer::Fuse(uint64_t a1)
{
  uint64_t SingleMatch;
  size_t v3;
  void **v4;
  const void *v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  char v18;

  std::string::basic_string[abi:ne180100]<0>(__p, "main");
  SingleMatch = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  if (v18 < 0)
    operator delete(__p[0]);
  if (*(char *)(SingleMatch + 47) >= 0)
    v3 = *(unsigned __int8 *)(SingleMatch + 47);
  else
    v3 = *(_QWORD *)(SingleMatch + 32);
  v4 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v3 + 5);
  if (v18 < 0)
    v4 = (void **)__p[0];
  if (v3)
  {
    if (*(char *)(SingleMatch + 47) >= 0)
      v5 = (const void *)(SingleMatch + 24);
    else
      v5 = *(const void **)(SingleMatch + 24);
    memmove(v4, v5, v3);
  }
  strcpy((char *)v4 + v3, "_nekr");
  v6 = operator new();
  v7 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)SingleMatch + 40))(SingleMatch, 0, 0);
  v8 = (std::__shared_weak_count *)v7[1];
  v15 = *v7;
  v16 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  ZinNEKernelRasterizerLayer::ZinNEKernelRasterizerLayer(v6, &v15, __p, SingleMatch);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v18 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_206DF1D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v16, 0x10B3C4000074909);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinNEPatterns::CrossCorrelation::Analyze(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t SingleMatch;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  BOOL HasDimension;
  void *__p[2];
  char v10;

  std::string::basic_string[abi:ne180100]<0>(__p, "main");
  SingleMatch = ZinPattern::GetSingleMatch(a3, (unsigned __int8 *)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast");
  v5 = ZinPattern::GetSingleMatch(a3, (unsigned __int8 *)__p);
  v6 = v5;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (!v6)
      return 1;
  }
  else if (!v5)
  {
    return 1;
  }
  if (ZinIrBroadcastInfo::HasDimension(*(_QWORD *)(v6 + 64), 4))
    return 0;
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)SingleMatch + 88))(SingleMatch) < 2)
    return 1;
  HasDimension = ZinIrBroadcastInfo::HasDimension(*(_QWORD *)(v6 + 64), 0);
  result = 0;
  if (!HasDimension)
    return 1;
  return result;
}

void sub_206DF1EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double ZinNEPatterns::CrossCorrelation::SharedClone@<D0>(ZinNEPatterns::CrossCorrelation *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<ZinNEPatterns::CrossCorrelation,std::allocator<ZinNEPatterns::CrossCorrelation>,ZinNEPatterns::CrossCorrelation const&,void>((uint64_t *)this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

ZinPatternUtils *ZinNEPatterns::CrossCorrelation::Fuse(ZinANELayer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t SingleMatch;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  ZinElementWiseLayer *v13;
  ZinNEPatterns::Conv *v14;
  ZinPatternUtils *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  const char *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::string v42;
  void *v43[2];
  int64_t v44;
  std::string v45;
  std::string v46;
  std::string __p;
  __int128 v48;
  std::string::size_type v49;
  uint64_t *v50[2];
  char v51;

  std::string::basic_string[abi:ne180100]<0>(v50, "texture");
  SingleMatch = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)v50);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "broadcast");
  v7 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)v50);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "relu");
  v8 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)v50);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "main");
  v9 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)v50);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "round");
  v10 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)v50);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(&__p, "goc");
  ZinPattern::GetMatch((uint64_t)a1, (unsigned __int8 *)&__p, &v48);
  ZinPatternUtils::ToGOC((uint64_t **)&v48, v50);
  if ((_QWORD)v48)
  {
    *((_QWORD *)&v48 + 1) = v48;
    operator delete((void *)v48);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v48, "activation");
  v11 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v48);
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  std::string::basic_string[abi:ne180100]<0>(&v48, "ew_abs");
  v12 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v48);
  v14 = (ZinNEPatterns::Conv *)v12;
  if (SHIBYTE(v49) < 0)
  {
    operator delete((void *)v48);
    if (!v14)
      goto LABEL_24;
  }
  else if (!v12)
  {
    goto LABEL_24;
  }
  if (v11)
  {
    v15 = 0;
    goto LABEL_56;
  }
  v11 = ZinNEPatterns::Conv::ToActivation(v14, v13);
LABEL_24:
  v16 = ZinMergeGOCSequence(a2, a3, (uint64_t)v50);
  v17 = (*(uint64_t (**)(ZinANELayer *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(&v45, a3, 1);
  v18 = *(char *)(v9 + 47);
  if (v18 >= 0)
    v19 = (const std::string::value_type *)(v9 + 24);
  else
    v19 = *(const std::string::value_type **)(v9 + 24);
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(v9 + 47);
  else
    v20 = *(_QWORD *)(v9 + 32);
  v21 = std::string::insert(&v45, 0, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v46, "_", 1uLL);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v42, "necc_fuse");
  v25 = std::string::append(&v42, "_xfm", 4uLL);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v44 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)v43 = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (v44 >= 0)
    v27 = v43;
  else
    v27 = (void **)v43[0];
  if (v44 >= 0)
    v28 = HIBYTE(v44);
  else
    v28 = (std::string::size_type)v43[1];
  v29 = std::string::append(&__p, (const std::string::value_type *)v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v49 = v29->__r_.__value_.__r.__words[2];
  v48 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v44) < 0)
    operator delete(v43[0]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  v15 = (ZinPatternUtils *)operator new();
  v31 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v17 + 40))(v17, 0, 0);
  v32 = v31[1];
  v40 = *v31;
  v41 = (std::__shared_weak_count *)v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  ZinNECrossCorrelationLayer::ZinNECrossCorrelationLayer(v15, &v40, &v48, SingleMatch, v7, v8, v9, v10, (uint64_t)v16, v11, 0);
  v36 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  ZinPatternUtils::AssignDmaLayers(v15, a1, (const ZinPattern *)"dma_conv_input", 0, "dma_conv_output", v35);
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
LABEL_56:
  if (v50[0])
  {
    v50[1] = v50[0];
    operator delete(v50[0]);
  }
  return v15;
}

void sub_206DF239C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;
  void *v46;

  v46 = *(void **)(v44 - 112);
  if (v46)
  {
    *(_QWORD *)(v44 - 104) = v46;
    operator delete(v46);
  }
  _Unwind_Resume(exception_object);
}

void ZinNEPatterns::CrossCorrelation::GetInputEdges(ZinNEPatterns::CrossCorrelation *this@<X0>, void **a2@<X8>)
{
  uint64_t FirstMatch;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;

  if (*((_DWORD *)this + 16))
    FirstMatch = (*(uint64_t (**)(ZinNEPatterns::CrossCorrelation *))(*(_QWORD *)this + 56))(this);
  else
    FirstMatch = ZinPattern::GetFirstMatch(this);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (FirstMatch)
  {
    ZinPattern::GetMatchList(this, &v27);
    v5 = v27;
    v23 = v28;
    if (v27 != v28)
    {
      v6 = 0;
      do
      {
        v7 = *v5;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v24, *(const void **)(v7 + 88), *(_QWORD *)(v7 + 96), (uint64_t)(*(_QWORD *)(v7 + 96) - *(_QWORD *)(v7 + 88)) >> 3);
        v8 = v24;
        v9 = v25;
        if (v24 != v25)
        {
          do
          {
            v10 = *v8;
            if (*v8 != v6)
            {
              v12 = a2[1];
              v11 = (unint64_t)a2[2];
              if ((unint64_t)v12 >= v11)
              {
                v14 = ((char *)v12 - (_BYTE *)*a2) >> 4;
                v15 = v14 + 1;
                if ((unint64_t)(v14 + 1) >> 60)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v16 = v11 - (_QWORD)*a2;
                if (v16 >> 3 > v15)
                  v15 = v16 >> 3;
                if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
                  v17 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v17 = v15;
                if (v17)
                  v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)(a2 + 2), v17);
                else
                  v18 = 0;
                v19 = &v18[16 * v14];
                *(_QWORD *)v19 = v10;
                *((_QWORD *)v19 + 1) = v7;
                v21 = (char *)*a2;
                v20 = (char *)a2[1];
                v22 = v19;
                if (v20 != *a2)
                {
                  do
                  {
                    *((_OWORD *)v22 - 1) = *((_OWORD *)v20 - 1);
                    v22 -= 16;
                    v20 -= 16;
                  }
                  while (v20 != v21);
                  v20 = (char *)*a2;
                }
                v13 = v19 + 16;
                *a2 = v22;
                a2[1] = v19 + 16;
                a2[2] = &v18[16 * v17];
                if (v20)
                  operator delete(v20);
              }
              else
              {
                *v12 = v10;
                v12[1] = v7;
                v13 = v12 + 2;
              }
              a2[1] = v13;
            }
            ++v8;
          }
          while (v8 != v9);
          v8 = v24;
        }
        if (v8)
        {
          v25 = v8;
          operator delete(v8);
        }
        ++v5;
        v6 = v7;
      }
      while (v5 != v23);
      v5 = v27;
    }
    if (v5)
    {
      v28 = v5;
      operator delete(v5);
    }
  }
}

void sub_206DF26C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  uint64_t v15;
  void *v17;

  v17 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

BOOL ZinNEPatterns::MatMul::Analyze(uint64_t a1, ZinDeQuantLayer **a2, uint64_t a3)
{
  uint64_t SingleMatch;
  _BOOL8 IsFusableAsGOC;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  ZinDeQuantLayer *v11;
  ZinDeQuantLayer *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  ZinNEAtoms::ConvAtom *v33;
  uint64_t v34;
  int v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  uint64_t *v44;
  uint64_t *v45;
  unint64_t v46;

  std::string::basic_string[abi:ne180100]<0>(&v44, "main");
  SingleMatch = ZinPattern::GetSingleMatch(a3, (unsigned __int8 *)&v44);
  IsFusableAsGOC = SingleMatch;
  if (SHIBYTE(v46) < 0)
  {
    operator delete(v44);
    if (!IsFusableAsGOC)
      return IsFusableAsGOC;
  }
  else if (!SingleMatch)
  {
    return IsFusableAsGOC;
  }
  std::string::basic_string[abi:ne180100]<0>(&v44, "broadcast");
  v8 = ZinPattern::GetSingleMatch(a3, (unsigned __int8 *)&v44);
  v9 = v8;
  if (SHIBYTE(v46) < 0)
  {
    operator delete(v44);
    if (!v9)
      goto LABEL_12;
  }
  else if (!v8)
  {
    goto LABEL_12;
  }
  if (ZinIrBroadcastInfo::HasDimension(*(_QWORD *)(v9 + 64), 4))
    return 0;
  IsFusableAsGOC = 0;
  if (ZinIrBroadcastInfo::HasDimension(*(_QWORD *)(v9 + 64), 0))
    return IsFusableAsGOC;
  if (ZinIrBroadcastInfo::HasDimension(*(_QWORD *)(v9 + 64), 3))
    return 0;
LABEL_12:
  std::string::basic_string[abi:ne180100]<0>(&v44, "ew_abs");
  if (ZinPattern::GetSingleMatch(a3, (unsigned __int8 *)&v44))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "activation");
    v10 = ZinPattern::GetSingleMatch(a3, (unsigned __int8 *)__p) != 0;
    if (v43 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v10 = 0;
  }
  if (SHIBYTE(v46) < 0)
  {
    operator delete(v44);
    if (v10)
      return 0;
  }
  else if (v10)
  {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v44, "dequant1");
  v11 = (ZinDeQuantLayer *)ZinPattern::GetSingleMatch(a3, (unsigned __int8 *)&v44);
  if (SHIBYTE(v46) < 0)
    operator delete(v44);
  std::string::basic_string[abi:ne180100]<0>(&v44, "dequant2");
  v12 = (ZinDeQuantLayer *)ZinPattern::GetSingleMatch(a3, (unsigned __int8 *)&v44);
  if ((SHIBYTE(v46) & 0x80000000) == 0)
  {
    if (!v11)
      goto LABEL_27;
LABEL_26:
    if ((ZinDeQuantLayer::IsPerCout(v11) & 1) == 0)
      goto LABEL_27;
    return 0;
  }
  operator delete(v44);
  if (v11)
    goto LABEL_26;
LABEL_27:
  if (v12 && (ZinDeQuantLayer::IsPerCout(v12) & 1) != 0)
    return 0;
  if (!v11)
  {
    v13 = 0;
    if (v12)
      goto LABEL_31;
LABEL_33:
    v14 = 0;
    goto LABEL_34;
  }
  v13 = ZinDeQuantLayer::HasZeroPoint(v11);
  if (!v12)
    goto LABEL_33;
LABEL_31:
  v14 = ZinDeQuantLayer::HasZeroPoint(v12);
LABEL_34:
  if (((v13 | v14) & 1) != 0)
    return 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  if (v11)
  {
    v16 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v46, 1uLL);
    v18 = &v16[v17];
    *v16 = (uint64_t)v11;
    v19 = v16 + 1;
    v21 = v44;
    v20 = v45;
    if (v45 != v44)
    {
      do
      {
        v22 = *--v20;
        *--v16 = v22;
      }
      while (v20 != v21);
      v20 = v44;
    }
    v44 = v16;
    v45 = v19;
    v46 = (unint64_t)v18;
    if (v20)
      operator delete(v20);
    v45 = v19;
  }
  else
  {
    v19 = 0;
  }
  if (v12)
  {
    if ((unint64_t)v19 >= v46)
    {
      v24 = v19 - v44;
      if ((unint64_t)(v24 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v25 = (uint64_t)(v46 - (_QWORD)v44) >> 2;
      if (v25 <= v24 + 1)
        v25 = v24 + 1;
      if (v46 - (unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v46, v26);
      else
        v27 = 0;
      v28 = (uint64_t *)&v27[8 * v24];
      v29 = &v27[8 * v26];
      *v28 = (uint64_t)v12;
      v23 = v28 + 1;
      v31 = v44;
      v30 = v45;
      if (v45 != v44)
      {
        do
        {
          v32 = *--v30;
          *--v28 = v32;
        }
        while (v30 != v31);
        v30 = v44;
      }
      v44 = v28;
      v45 = v23;
      v46 = (unint64_t)v29;
      if (v30)
        operator delete(v30);
    }
    else
    {
      *v19 = (uint64_t)v12;
      v23 = v19 + 1;
    }
    v45 = v23;
  }
  std::string::basic_string[abi:ne180100]<0>(v38, "goc");
  ZinPattern::GetMatch(a3, (unsigned __int8 *)v38, v40);
  ZinPatternUtils::ToGOC((uint64_t **)v40, (uint64_t **)__p);
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
  if (v39 < 0)
    operator delete(v38[0]);
  std::string::basic_string[abi:ne180100]<0>(v40, "main");
  v33 = (ZinNEAtoms::ConvAtom *)ZinPattern::GetSingleMatch(a3, (unsigned __int8 *)v40);
  std::string::basic_string[abi:ne180100]<0>(v38, "texture");
  v34 = ZinPattern::GetSingleMatch(a3, (unsigned __int8 *)v38);
  std::string::basic_string[abi:ne180100]<0>(v36, "prescale");
  v35 = ZinPattern::GetSingleMatch(a3, (unsigned __int8 *)v36);
  IsFusableAsGOC = ZinNEAtoms::DeQuantAtom::IsFusableAsGOC(&v44, a1, v33, (const ZinIrHalParameters *)__p, v34, v35, *a2, 88);
  if (v37 < 0)
    operator delete(v36[0]);
  if (v39 < 0)
    operator delete(v38[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  return IsFusableAsGOC;
}

void sub_206DF2B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v35;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a28)
    operator delete(a28);
  v35 = *(void **)(v33 - 72);
  if (v35)
  {
    *(_QWORD *)(v33 - 64) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

double ZinNEPatterns::MatMul::SharedClone@<D0>(ZinNEPatterns::MatMul *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<ZinNEPatterns::MatMul,std::allocator<ZinNEPatterns::MatMul>,ZinNEPatterns::MatMul const&,void>(this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

ZinPatternUtils *ZinNEPatterns::MatMul::Fuse(ZinBondedInfo *a1, ZinIrOpLayerGraph *a2, ZinObjectNameFactory *a3)
{
  const ZinIrOpLayer *SingleMatch;
  uint64_t v7;
  ZinIrOpLayer *v8;
  uint64_t v9;
  uint64_t v10;
  ZinNEPatterns::Conv *v11;
  uint64_t v12;
  ZinIrOpLayer *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  ZinElementWiseLayer *v40;
  uint64_t v41;
  uint64_t *v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  void **v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  uint64_t IndexOfMatchedIncomingLayer;
  ZinPatternUtils *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  uint64_t *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  const char *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  std::string v75;
  void *__p[2];
  int64_t v77;
  std::string v78;
  std::string v79;
  ZinIrOpLayer *v80;
  uint64_t v81;
  __int128 v82;
  std::string::size_type v83;
  char *v84;
  char *v85;
  unint64_t v86;
  uint64_t *v87;
  char *v88;
  char v89;

  std::string::basic_string[abi:ne180100]<0>(&v87, "texture");
  SingleMatch = (const ZinIrOpLayer *)ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v87);
  if (v89 < 0)
    operator delete(v87);
  std::string::basic_string[abi:ne180100]<0>(&v87, "broadcast");
  v7 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v87);
  if (v89 < 0)
    operator delete(v87);
  std::string::basic_string[abi:ne180100]<0>(&v87, "relu");
  v69 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v87);
  v70 = v7;
  if (v89 < 0)
    operator delete(v87);
  std::string::basic_string[abi:ne180100]<0>(&v87, "main");
  v8 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v87);
  if (v89 < 0)
    operator delete(v87);
  std::string::basic_string[abi:ne180100]<0>(&v82, "goc");
  ZinPattern::GetMatch((uint64_t)a1, (unsigned __int8 *)&v82, &v84);
  ZinPatternUtils::ToGOC((uint64_t **)&v84, &v87);
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (SHIBYTE(v83) < 0)
    operator delete((void *)v82);
  std::string::basic_string[abi:ne180100]<0>(&v84, "round");
  v9 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v84);
  if (SHIBYTE(v86) < 0)
    operator delete(v84);
  std::string::basic_string[abi:ne180100]<0>(&v84, "activation");
  v10 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v84);
  if (SHIBYTE(v86) < 0)
    operator delete(v84);
  v81 = v10;
  std::string::basic_string[abi:ne180100]<0>(&v84, "ew_abs");
  v11 = (ZinNEPatterns::Conv *)ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v84);
  if (SHIBYTE(v86) < 0)
    operator delete(v84);
  std::string::basic_string[abi:ne180100]<0>(&v84, "transpose");
  v12 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v84);
  if (SHIBYTE(v86) < 0)
    operator delete(v84);
  v80 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v84, "quant");
  v13 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v84);
  if (SHIBYTE(v86) < 0)
    operator delete(v84);
  v80 = v13;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v82, "dequant1");
  v14 = (_QWORD *)ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v82);
  v15 = ZinPatternUtils::ConvertDequantToGOC(v14, 0);
  v16 = v15;
  if (SHIBYTE(v83) < 0)
  {
    operator delete((void *)v82);
    if (!v16)
      goto LABEL_44;
LABEL_27:
    v17 = v85;
    if ((unint64_t)v85 >= v86)
    {
      v19 = (v85 - v84) >> 3;
      if ((unint64_t)(v19 + 1) >> 61)
        goto LABEL_108;
      v20 = (uint64_t)(v86 - (_QWORD)v84) >> 2;
      if (v20 <= v19 + 1)
        v20 = v19 + 1;
      if (v86 - (unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      if (v21)
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v86, v21);
      else
        v22 = 0;
      v23 = (uint64_t *)&v22[8 * v19];
      v24 = &v22[8 * v21];
      *v23 = v16;
      v18 = (char *)(v23 + 1);
      v26 = v84;
      v25 = v85;
      if (v85 != v84)
      {
        do
        {
          v27 = *((_QWORD *)v25 - 1);
          v25 -= 8;
          *--v23 = v27;
        }
        while (v25 != v26);
        v25 = v84;
      }
      v84 = (char *)v23;
      v85 = v18;
      v86 = (unint64_t)v24;
      if (v25)
        operator delete(v25);
    }
    else
    {
      *(_QWORD *)v85 = v16;
      v18 = v17 + 8;
    }
    v85 = v18;
    goto LABEL_44;
  }
  if (v15)
    goto LABEL_27;
LABEL_44:
  std::string::basic_string[abi:ne180100]<0>(&v82, "dequant2");
  v28 = (_QWORD *)ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v82);
  v29 = ZinPatternUtils::ConvertDequantToGOC(v28, 0);
  if (SHIBYTE(v83) < 0)
    operator delete((void *)v82);
  v30 = (uint64_t)v85;
  if (v29)
  {
    if ((unint64_t)v85 < v86)
    {
      *(_QWORD *)v85 = v29;
      v30 += 8;
LABEL_63:
      v85 = (char *)v30;
      goto LABEL_64;
    }
    v31 = (v85 - v84) >> 3;
    if (!((unint64_t)(v31 + 1) >> 61))
    {
      v32 = (uint64_t)(v86 - (_QWORD)v84) >> 2;
      if (v32 <= v31 + 1)
        v32 = v31 + 1;
      if (v86 - (unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
        v33 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v33 = v32;
      if (v33)
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v86, v33);
      else
        v34 = 0;
      v35 = (uint64_t *)&v34[8 * v31];
      v36 = &v34[8 * v33];
      *v35 = v29;
      v30 = (uint64_t)(v35 + 1);
      v38 = v84;
      v37 = v85;
      if (v85 != v84)
      {
        do
        {
          v39 = *((_QWORD *)v37 - 1);
          v37 -= 8;
          *--v35 = v39;
        }
        while (v37 != v38);
        v37 = v84;
      }
      v84 = (char *)v35;
      v85 = (char *)v30;
      v86 = (unint64_t)v36;
      if (v37)
        operator delete(v37);
      goto LABEL_63;
    }
LABEL_108:
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
LABEL_64:
  std::vector<ZinGOCLayer const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinGOCLayer const**>,std::__wrap_iter<ZinGOCLayer const**>>((uint64_t)&v84, v30, (char *)v87, v88, (v88 - (char *)v87) >> 3);
  if (v11)
    v81 = ZinNEPatterns::Conv::ToActivation(v11, v40);
  v41 = (*(uint64_t (**)(ZinBondedInfo *))(*(_QWORD *)a1 + 56))(a1);
  if (v80)
    ZinNEPatterns::FuseQuant(&v80, a1, 88, a3, (void **)&v84, &v81);
  v42 = ZinMergeGOCSequence((uint64_t)a2, (uint64_t)a3, (uint64_t)&v84);
  (*(void (**)(std::string *__return_ptr, ZinObjectNameFactory *, uint64_t))(*(_QWORD *)a3 + 16))(&v78, a3, 1);
  v43 = std::string::append(&v78, "_", 1uLL);
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v75, "ne_matmul_fuse");
  v45 = std::string::append(&v75, "_xfm", 4uLL);
  v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v77 = v45->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  if (v77 >= 0)
    v47 = __p;
  else
    v47 = (void **)__p[0];
  if (v77 >= 0)
    v48 = HIBYTE(v77);
  else
    v48 = (std::string::size_type)__p[1];
  v49 = std::string::append(&v79, (const std::string::value_type *)v47, v48);
  v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  v83 = v49->__r_.__value_.__r.__words[2];
  v82 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v77) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v78.__r_.__value_.__l.__data_);
    if (SingleMatch)
      goto LABEL_82;
  }
  else if (SingleMatch)
  {
LABEL_82:
    IndexOfMatchedIncomingLayer = ZinIrOpLayerGraph::GetIndexOfMatchedIncomingLayer(a2, v8, SingleMatch);
    goto LABEL_85;
  }
  IndexOfMatchedIncomingLayer = 0;
LABEL_85:
  v52 = (ZinPatternUtils *)operator new();
  v53 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v41 + 40))(v41, 0, 0);
  v54 = v53[1];
  v73 = *v53;
  v74 = (std::__shared_weak_count *)v54;
  if (v54)
  {
    v55 = (unint64_t *)(v54 + 8);
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  ZinNEMatMulLayer::ZinNEMatMulLayer(v52, &v73, &v82, (uint64_t)SingleMatch, v70, v69, (uint64_t)v8, v9, (uint64_t)v42, v81, v12, (uint64_t)v80, IndexOfMatchedIncomingLayer);
  v57 = v74;
  if (v74)
  {
    p_shared_owners = (unint64_t *)&v74->__shared_owners_;
    do
      v59 = __ldaxr(p_shared_owners);
    while (__stlxr(v59 - 1, p_shared_owners));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v41 + 40))(v41, 0, 0);
  v61 = (std::__shared_weak_count *)v60[1];
  v71 = *v60;
  v72 = v61;
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  (*(void (**)(ZinPatternUtils *, uint64_t *))(*(_QWORD *)v52 + 24))(v52, &v71);
  v65 = v72;
  if (v72)
  {
    v66 = (unint64_t *)&v72->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  ZinPatternUtils::AssignDmaLayers(v52, a1, (const ZinPattern *)"dma_conv_input", 0, "dma_conv_output", v64);
  if (SHIBYTE(v83) < 0)
    operator delete((void *)v82);
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v87)
  {
    v88 = (char *)v87;
    operator delete(v87);
  }
  return v52;
}

void sub_206DF3410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;
  void *v45;
  void *v46;

  if (*(char *)(v43 - 137) < 0)
    operator delete(*(void **)(v43 - 160));
  v45 = *(void **)(v43 - 136);
  if (v45)
  {
    *(_QWORD *)(v43 - 128) = v45;
    operator delete(v45);
  }
  v46 = *(void **)(v43 - 112);
  if (v46)
  {
    *(_QWORD *)(v43 - 104) = v46;
    operator delete(v46);
  }
  _Unwind_Resume(exception_object);
}

double ZinNEPatterns::Pool::SharedClone@<D0>(ZinNEPatterns::Pool *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<ZinNEPatterns::Pool,std::allocator<ZinNEPatterns::Pool>,ZinNEPatterns::Pool const&,void>((uint64_t *)this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

ZinPatternUtils *ZinNEPatterns::Pool::Fuse(ZinBondedInfo *a1, uint64_t a2, ZinObjectNameFactory *a3)
{
  uint64_t *SingleMatch;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  ZinNEPatterns::Conv *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  ZinElementWiseLayer *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  ZinIrOpLayer *v31;
  uint64_t *v32;
  uint64_t FirstMatch;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  ZinIrOpLayer *v40;
  int v41;
  ZinPatternUtils *v42;
  ZinIrTensor::MirInfo *v43;
  unint64_t *v44;
  unint64_t v45;
  const char *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  ZinIrTensor *v57;
  ZinIrTensor *v58;
  std::__shared_weak_count *v59;
  ZinIrTensor::MirInfo *v60;
  ZinIrOpLayer *v61[2];
  std::__shared_weak_count *v62;
  uint64_t v63;
  void *__p[2];
  char v65;
  uint64_t *v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  char *v70;
  char v71;

  std::string::basic_string[abi:ne180100]<0>(&v69, "dequant");
  SingleMatch = (uint64_t *)ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v69);
  if (v71 < 0)
    operator delete(v69);
  std::string::basic_string[abi:ne180100]<0>(&v69, "texture");
  v7 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v69);
  if (v71 < 0)
    operator delete(v69);
  std::string::basic_string[abi:ne180100]<0>(&v69, "broadcast");
  v8 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v69);
  if (v71 < 0)
    operator delete(v69);
  std::string::basic_string[abi:ne180100]<0>(&v69, "relu");
  v9 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v69);
  v56 = v7;
  if (v71 < 0)
    operator delete(v69);
  std::string::basic_string[abi:ne180100]<0>(&v69, "main");
  v10 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v69);
  if (v71 < 0)
    operator delete(v69);
  std::string::basic_string[abi:ne180100]<0>(__p, "goc");
  ZinPattern::GetMatch((uint64_t)a1, (unsigned __int8 *)__p, &v66);
  ZinPatternUtils::ToGOC(&v66, &v69);
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if (v65 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(&v66, "activation");
  v11 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v66);
  if (SHIBYTE(v68) < 0)
    operator delete(v66);
  v63 = v11;
  std::string::basic_string[abi:ne180100]<0>(&v66, "ew_abs");
  v12 = (ZinNEPatterns::Conv *)ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v66);
  if (SHIBYTE(v68) < 0)
    operator delete(v66);
  v66 = 0;
  v67 = 0;
  v68 = 0;
  if (SingleMatch)
  {
    v13 = ZinPatternUtils::ConvertDequantToGOC(SingleMatch, 0);
    v14 = v13;
    v15 = v67;
    if ((unint64_t)v67 >= v68)
    {
      v16 = v67 - v66;
      if ((unint64_t)(v16 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v17 = (uint64_t)(v68 - (_QWORD)v66) >> 2;
      if (v17 <= v16 + 1)
        v17 = v16 + 1;
      if (v68 - (unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v68, v18);
      else
        v19 = 0;
      v20 = (uint64_t *)&v19[8 * v16];
      v21 = &v19[8 * v18];
      *v20 = v14;
      SingleMatch = v20 + 1;
      v23 = v66;
      v22 = v67;
      if (v67 != v66)
      {
        do
        {
          v24 = *--v22;
          *--v20 = v24;
        }
        while (v22 != v23);
        v22 = v66;
      }
      v66 = v20;
      v67 = SingleMatch;
      v68 = (unint64_t)v21;
      if (v22)
        operator delete(v22);
    }
    else
    {
      *v67 = v13;
      SingleMatch = v15 + 1;
    }
    v67 = SingleMatch;
  }
  std::vector<ZinGOCLayer const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinGOCLayer const**>,std::__wrap_iter<ZinGOCLayer const**>>((uint64_t)&v66, (uint64_t)SingleMatch, (char *)v69, v70, (v70 - (char *)v69) >> 3);
  if (v12)
    v63 = ZinNEPatterns::Conv::ToActivation(v12, v25);
  v26 = (*(uint64_t (**)(ZinBondedInfo *))(*(_QWORD *)a1 + 56))(a1);
  v27 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v26 + 40))(v26, 0, 0);
  v28 = *(std::__shared_weak_count **)(v27 + 8);
  v57 = *(ZinIrTensor **)v27;
  v61[1] = *(ZinIrOpLayer **)v27;
  v62 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
  v61[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "quant");
  v31 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)__p);
  if (v65 < 0)
    operator delete(__p[0]);
  v61[0] = v31;
  if (v31)
    ZinNEPatterns::FuseQuant(v61, a1, 89, a3, (void **)&v66, &v63);
  v32 = ZinMergeGOCSequence(a2, (uint64_t)a3, (uint64_t)&v66);
  FirstMatch = ZinPattern::GetFirstMatch(a1);
  v55 = v9;
  v34 = *(_QWORD **)(FirstMatch + 88);
  if (*(_QWORD **)(FirstMatch + 96) == v34)
    ZinAssertImpl("There should be at least one input to NEPool pattern.");
  v54 = (uint64_t)v32;
  v35 = v8;
  v36 = (uint64_t)a3;
  v37 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v34 + 32))(*v34, 0, 0);
  v38 = *(_QWORD *)(v10 + 16);
  v39 = v63;
  v40 = v61[0];
  v41 = *((_DWORD *)v57 + 22);
  ZinIrTensor::CopyTensorMirInfo(v57, &v60);
  v42 = (ZinPatternUtils *)ZinBuilder::CreateNEPool(v38, v36, v37 + 48, v56, v35, v55, v10, v54, v39, 0, (uint64_t)v40, v41, &v60);
  v43 = v60;
  v60 = 0;
  if (v43)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v60, v43);
  v58 = v57;
  v59 = v28;
  if (v28)
  {
    v44 = (unint64_t *)&v28->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  (*(void (**)(ZinPatternUtils *, ZinIrTensor **))(*(_QWORD *)v42 + 24))(v42, &v58);
  v47 = v59;
  if (v59)
  {
    v48 = (unint64_t *)&v59->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  ZinPatternUtils::AssignDmaLayers(v42, a1, (const ZinPattern *)"dma_conv_input", 0, "dma_conv_output", v46);
  v50 = v62;
  if (v62)
  {
    v51 = (unint64_t *)&v62->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if (v69)
  {
    v70 = (char *)v69;
    operator delete(v69);
  }
  return v42;
}

void sub_206DF3B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  void *v34;
  void *v35;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  v34 = *(void **)(v32 - 136);
  if (v34)
  {
    *(_QWORD *)(v32 - 128) = v34;
    operator delete(v34);
  }
  v35 = *(void **)(v32 - 112);
  if (v35)
  {
    *(_QWORD *)(v32 - 104) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

BOOL ZinNEPatterns::ElementWise::AnalyzeEW(int a1, int a2, ZinPattern *this)
{
  _QWORD *SingleMatch;
  _QWORD *v5;
  uint64_t v6;
  char *i;
  _BOOL8 v10;
  int v11;
  void *v14[2];
  char v15;
  void *v16[2];
  char v17;
  void *__p;
  uint64_t *v19;
  char v20;
  void *v21;
  char *v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;

  if (!ZinPattern::MatchCount(this))
    return 0;
  std::string::basic_string[abi:ne180100]<0>(&v21, "relu");
  ZinPattern::GetMatch((uint64_t)this, (unsigned __int8 *)&v21, &v24);
  if (v23 < 0)
    operator delete(v21);
  std::string::basic_string[abi:ne180100]<0>(&__p, "prescale");
  ZinPattern::GetMatch((uint64_t)this, (unsigned __int8 *)&__p, &v21);
  if (v20 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(v14, "dequant");
  ZinPattern::GetMatch((uint64_t)this, (unsigned __int8 *)v14, v16);
  ZinPatternUtils::ToDequant((uint64_t **)v16, (char **)&__p);
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  if (v15 < 0)
    operator delete(v14[0]);
  std::vector<ZinIrOpLayer *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinTransposeLayer **>,std::__wrap_iter<ZinTransposeLayer **>>((uint64_t)&v21, v22, (uint64_t *)__p, v19, ((char *)v19 - (_BYTE *)__p) >> 3);
  std::string::basic_string[abi:ne180100]<0>(v16, "main");
  SingleMatch = (_QWORD *)ZinPattern::GetSingleMatch((uint64_t)this, (unsigned __int8 *)v16);
  if (v17 < 0)
    operator delete(v16[0]);
  v5 = v24;
  if (v24 == v25)
    goto LABEL_22;
  v6 = 0;
  do
  {
    if (!*v5++)
      ++v6;
  }
  while (v5 != v25);
  if (!v6 || v6 == (uint64_t)(SingleMatch[12] - SingleMatch[11]) >> 3)
  {
LABEL_22:
    for (i = (char *)v21; ; i += 8)
    {
      if (i == v22)
      {
        v10 = 1;
        goto LABEL_34;
      }
      if (*(_QWORD *)i)
        break;
    }
    v11 = *(_DWORD *)(SingleMatch[8] + 12);
    v10 = v11 == 4 || v11 == 1;
  }
  else
  {
    v10 = 0;
  }
LABEL_34:
  if (__p)
  {
    v19 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v21)
  {
    v22 = (char *)v21;
    operator delete(v21);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  return v10;
}

void sub_206DF3E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;
  void *v30;

  if (a21 < 0)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  v29 = *(void **)(v27 - 64);
  if (v29)
  {
    *(_QWORD *)(v27 - 56) = v29;
    operator delete(v29);
  }
  v30 = *(void **)(v27 - 40);
  if (v30)
  {
    *(_QWORD *)(v27 - 32) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void sub_206DF3EB4()
{
  uint64_t v0;

  if (*(char *)(v0 - 41) < 0)
    JUMPOUT(0x206DF3EA8);
  JUMPOUT(0x206DF3EACLL);
}

double ZinNEPatterns::ElementWise::SharedClone@<D0>(ZinNEPatterns::ElementWise *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<ZinNEPatterns::ElementWise,std::allocator<ZinNEPatterns::ElementWise>,ZinNEPatterns::ElementWise const&,void>(this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

ZinPatternUtils *ZinNEPatterns::ElementWise::Fuse(ZinBondedInfo *a1, uint64_t a2, ZinObjectNameFactory *a3)
{
  uint64_t SingleMatch;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  ZinElementWiseLayer *v10;
  ZinNEPatterns::Conv *v11;
  ZinPatternUtils *v12;
  ZinIrOpLayer *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float SingularVal;
  ZinIrVector *v20;
  ZinDeQuantLayer *v21;
  uint64_t *v22;
  float *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  void **v43;
  std::string::size_type v44;
  std::string *v45;
  __int128 v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  uint64_t *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  const char *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  std::string v67;
  void *v68[2];
  int64_t v69;
  std::string v70;
  std::string v71;
  std::string v72;
  ZinIrOpLayer *v73;
  uint64_t v74;
  __int128 __p;
  std::string::size_type v76;
  uint64_t *v77;
  float *v78;
  float *v79;
  void *v80;
  void *v81;
  char v82;
  uint64_t *v83;
  uint64_t *v84;
  char v85;
  uint64_t *v86;
  uint64_t *v87;
  char *v88[5];

  std::string::basic_string[abi:ne180100]<0>(&v83, "dequant");
  ZinPattern::GetMatch((uint64_t)a1, (unsigned __int8 *)&v83, &v86);
  ZinPatternUtils::ToDequant(&v86, v88);
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v85 < 0)
    operator delete(v83);
  std::string::basic_string[abi:ne180100]<0>(&v80, "relu");
  ZinPattern::GetMatch((uint64_t)a1, (unsigned __int8 *)&v80, &v83);
  ZinPatternUtils::ToActivation(&v83, (char **)&v86);
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  if (v82 < 0)
    operator delete(v80);
  std::string::basic_string[abi:ne180100]<0>(&v77, "prescale");
  ZinPattern::GetMatch((uint64_t)a1, (unsigned __int8 *)&v77, &v80);
  ZinPatternUtils::ToGOC((uint64_t **)&v80, &v83);
  if (v80)
  {
    v81 = v80;
    operator delete(v80);
  }
  if (SHIBYTE(v79) < 0)
    operator delete(v77);
  std::string::basic_string[abi:ne180100]<0>(&v80, "main");
  SingleMatch = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v80);
  if (v82 < 0)
    operator delete(v80);
  std::string::basic_string[abi:ne180100]<0>(&v80, "round");
  v7 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v80);
  if (v82 < 0)
    operator delete(v80);
  std::string::basic_string[abi:ne180100]<0>(&__p, "goc");
  ZinPattern::GetMatch((uint64_t)a1, (unsigned __int8 *)&__p, &v77);
  ZinPatternUtils::ToGOC(&v77, (uint64_t **)&v80);
  if (v77)
  {
    v78 = (float *)v77;
    operator delete(v77);
  }
  if (SHIBYTE(v76) < 0)
    operator delete((void *)__p);
  std::string::basic_string[abi:ne180100]<0>(&v77, "activation");
  v8 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v77);
  if (SHIBYTE(v79) < 0)
    operator delete(v77);
  v74 = v8;
  std::string::basic_string[abi:ne180100]<0>(&v77, "ew_abs");
  v9 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v77);
  v11 = (ZinNEPatterns::Conv *)v9;
  if (SHIBYTE(v79) < 0)
  {
    operator delete(v77);
    if (!v11)
      goto LABEL_30;
  }
  else if (!v9)
  {
    goto LABEL_30;
  }
  if (v8)
  {
    v12 = 0;
    goto LABEL_103;
  }
  v74 = ZinNEPatterns::Conv::ToActivation(v11, v10);
LABEL_30:
  v73 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v77, "quant");
  v13 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v77);
  if (SHIBYTE(v79) < 0)
    operator delete(v77);
  v73 = v13;
  if (v13)
    ZinNEPatterns::FuseQuant(&v73, a1, 90, a3, &v80, &v74);
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v14 = *(_QWORD *)(SingleMatch + 96) - *(_QWORD *)(SingleMatch + 88);
  if (v14)
  {
    v15 = 0;
    v16 = v14 >> 3;
    if (v16 <= 1)
      v17 = 1;
    else
      v17 = v16;
    do
    {
      v18 = v83[v15];
      SingularVal = 1.0;
      if (v18)
      {
        v20 = *(ZinIrVector **)(*(_QWORD *)(v18 + 136) + 568);
        if (v20)
          SingularVal = ZinIrVector::GetSingularVal(v20);
      }
      v21 = *(ZinDeQuantLayer **)&v88[0][8 * v15];
      if (v21 && ZinDeQuantLayer::HasScale(*(ZinDeQuantLayer **)&v88[0][8 * v15]))
        SingularVal = SingularVal * ZinDeQuantLayer::GetScalarScale(v21);
      v22 = (uint64_t *)v78;
      if (v78 >= v79)
      {
        v24 = v77;
        v25 = ((char *)v78 - (char *)v77) >> 2;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v27 = (char *)v79 - (char *)v77;
        if (((char *)v79 - (char *)v77) >> 1 > v26)
          v26 = v27 >> 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
          v28 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v79, v28);
          v24 = v77;
          v22 = (uint64_t *)v78;
        }
        else
        {
          v29 = 0;
        }
        v30 = (uint64_t *)&v29[4 * v25];
        *(float *)v30 = SingularVal;
        v23 = (float *)v30 + 1;
        while (v22 != v24)
        {
          v31 = *((_DWORD *)v22 - 1);
          v22 = (uint64_t *)((char *)v22 - 4);
          *((_DWORD *)v30 - 1) = v31;
          v30 = (uint64_t *)((char *)v30 - 4);
        }
        v77 = v30;
        v78 = v23;
        v79 = (float *)&v29[4 * v28];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *v78 = SingularVal;
        v23 = (float *)v22 + 1;
      }
      v78 = v23;
      ++v15;
    }
    while (v15 != v17);
  }
  v32 = ZinMergeGOCSequence(a2, (uint64_t)a3, (uint64_t)&v80);
  v33 = (*(uint64_t (**)(ZinBondedInfo *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(std::string *__return_ptr, ZinObjectNameFactory *, uint64_t))(*(_QWORD *)a3 + 16))(&v70, a3, 1);
  v34 = *(char *)(SingleMatch + 47);
  if (v34 >= 0)
    v35 = (const std::string::value_type *)(SingleMatch + 24);
  else
    v35 = *(const std::string::value_type **)(SingleMatch + 24);
  if (v34 >= 0)
    v36 = *(unsigned __int8 *)(SingleMatch + 47);
  else
    v36 = *(_QWORD *)(SingleMatch + 32);
  v37 = std::string::insert(&v70, 0, v35, v36);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v71.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v39 = std::string::append(&v71, "_", 1uLL);
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v72.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v67, "ew_ne_seq");
  v41 = std::string::append(&v67, "_xfm", 4uLL);
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v69 = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)v68 = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  if (v69 >= 0)
    v43 = v68;
  else
    v43 = (void **)v68[0];
  if (v69 >= 0)
    v44 = HIBYTE(v69);
  else
    v44 = (std::string::size_type)v68[1];
  v45 = std::string::append(&v72, (const std::string::value_type *)v43, v44);
  v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v76 = v45->__r_.__value_.__r.__words[2];
  __p = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v69) < 0)
    operator delete(v68[0]);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  v12 = (ZinPatternUtils *)operator new();
  v47 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v33 + 40))(v33, 0, 0);
  v48 = v47[1];
  v65 = *v47;
  v66 = (std::__shared_weak_count *)v48;
  if (v48)
  {
    v49 = (unint64_t *)(v48 + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  ZinNEElementWiseLayer::ZinNEElementWiseLayer(v12, &v65, &__p, *v86, (uint64_t)&v77, SingleMatch, v7, (uint64_t)v32, v74, 0, (uint64_t)v73);
  v51 = v66;
  if (v66)
  {
    p_shared_owners = (unint64_t *)&v66->__shared_owners_;
    do
      v53 = __ldaxr(p_shared_owners);
    while (__stlxr(v53 - 1, p_shared_owners));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v33 + 40))(v33, 0, 0);
  v55 = (std::__shared_weak_count *)v54[1];
  v63 = *v54;
  v64 = v55;
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  (*(void (**)(ZinPatternUtils *, uint64_t *))(*(_QWORD *)v12 + 24))(v12, &v63);
  v59 = v64;
  if (v64)
  {
    v60 = (unint64_t *)&v64->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  ZinPatternUtils::AssignDmaLayers(v12, a1, (const ZinPattern *)"dma_conv_input", 0, "dma_conv_output", v58);
  if (SHIBYTE(v76) < 0)
    operator delete((void *)__p);
  if (v77)
  {
    v78 = (float *)v77;
    operator delete(v77);
  }
LABEL_103:
  if (v80)
  {
    v81 = v80;
    operator delete(v80);
  }
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }
  return v12;
}

void sub_206DF4644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;
  void *v59;
  void *v60;
  void *v61;
  void *v62;

  v59 = *(void **)(v57 - 208);
  if (v59)
  {
    *(_QWORD *)(v57 - 200) = v59;
    operator delete(v59);
  }
  v60 = *(void **)(v57 - 184);
  if (v60)
  {
    *(_QWORD *)(v57 - 176) = v60;
    operator delete(v60);
  }
  v61 = *(void **)(v57 - 160);
  if (v61)
  {
    *(_QWORD *)(v57 - 152) = v61;
    operator delete(v61);
  }
  v62 = *(void **)(v57 - 136);
  if (v62)
  {
    *(_QWORD *)(v57 - 128) = v62;
    operator delete(v62);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *ZinNEPatterns::DualSourceElementWise::DualSourceElementWise(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  std::string *v22;
  std::string *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void *v39[2];
  char v40;
  int v41;
  void *v42[2];
  char v43;
  char *v44;
  uint64_t v45;
  char *v46;
  void *v47[2];
  char v48;
  char *v49;
  uint64_t v50;
  char *v51;
  void *v52[2];
  char v53;
  void *v54[2];
  char v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  char **v59;
  char v60;
  _BYTE v61[24];
  _BYTE *v62;
  std::string __p;
  _QWORD v64[3];
  _QWORD *v65;
  std::string v66;
  _QWORD v67[3];
  _QWORD *v68;
  std::string v69[2];
  std::string v70[2];
  _QWORD *v71;
  uint64_t v72;
  std::string v73;
  _BYTE v74[24];
  _BYTE *v75;
  _BYTE v76[40];
  uint64_t v77;
  std::string v78;
  _QWORD v79[3];
  _QWORD *v80;
  std::string v81;
  _BYTE v82[24];
  _BYTE *v83;
  _BYTE v84[40];
  uint64_t v85;
  std::string v86;
  _QWORD v87[3];
  _QWORD *v88;
  std::string v89;
  _BYTE v90[24];
  _BYTE *v91;
  _BYTE v92[40];
  uint64_t v93;
  std::string __s;
  _QWORD v95[3];
  _QWORD *v96;
  std::string v97;
  _BYTE v98[24];
  _BYTE *v99;
  _BYTE v100[40];
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108[4];
  _BYTE v109[24];
  _BYTE *v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v54, "broadcast1");
  ZinCommonAtoms::BroadcastAtom::BroadcastAtom(&__s, v54, a3);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v97, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v97 = __s;
  v8 = (uint64_t)v96;
  if (!v96)
    goto LABEL_7;
  if (v96 != v95)
  {
    v8 = (*(uint64_t (**)(void))(*v96 + 16))();
LABEL_7:
    v99 = (_BYTE *)v8;
    goto LABEL_9;
  }
  v99 = v98;
  (*(void (**)(_QWORD *))(v95[0] + 24))(v95);
LABEL_9:
  LODWORD(v69[0].__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v100, (int *)v69, 1);
  v103 = 0;
  v104 = 0;
  v102 = 0;
  v69[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
  v69[0].__r_.__value_.__s.__data_[8] = 0;
  v102 = (char *)operator new(0x60uLL);
  v103 = (uint64_t)v102;
  v104 = v102 + 96;
  v103 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem const>,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>((uint64_t)&v104, (uint64_t)&v97, (uint64_t)&v101, (uint64_t)v102);
  std::string::basic_string[abi:ne180100]<0>(v52, "broadcast2");
  ZinCommonAtoms::BroadcastAtom::BroadcastAtom(&v86, v52, a3);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v89, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
  else
    v89 = v86;
  v9 = (uint64_t)v88;
  if (!v88)
    goto LABEL_15;
  if (v88 != v87)
  {
    v9 = (*(uint64_t (**)(void))(*v88 + 16))();
LABEL_15:
    v91 = (_BYTE *)v9;
    goto LABEL_17;
  }
  v91 = v90;
  (*(void (**)(_QWORD *))(v87[0] + 24))(v87);
LABEL_17:
  LODWORD(v69[0].__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v92, (int *)v69, 1);
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v69[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
  v69[0].__r_.__value_.__s.__data_[8] = 0;
  v105 = (char *)operator new(0x60uLL);
  v106 = (uint64_t)v105;
  v107 = v105 + 96;
  v106 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem const>,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>((uint64_t)&v107, (uint64_t)&v89, (uint64_t)&v93, (uint64_t)v105);
  v57 = 0;
  v58 = 0;
  v56 = 0;
  v69[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
  v69[0].__r_.__value_.__s.__data_[8] = 0;
  v56 = operator new(0x30uLL);
  v57 = v56;
  v58 = v56 + 6;
  v57 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinLinearPattern::AtomItem const>>,std::vector<ZinLinearPattern::AtomItem const> const*,std::vector<ZinLinearPattern::AtomItem const> const*,std::vector<ZinLinearPattern::AtomItem const>*>((uint64_t)&v58, (uint64_t *)&v102, v108, v56);
  v108[0] = (uint64_t)&v56;
  v108[1] = a4;
  std::string::basic_string[abi:ne180100]<0>(v47, "main");
  ZinNEAtoms::ElementWiseAtom::ElementWiseAtom(&v78, v47, a3);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v81, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  else
    v81 = v78;
  v10 = v79;
  v11 = (uint64_t)v80;
  if (!v80)
    goto LABEL_23;
  if (v80 != v79)
  {
    v11 = (*(uint64_t (**)(void))(*v80 + 16))();
LABEL_23:
    v83 = (_BYTE *)v11;
    goto LABEL_25;
  }
  v83 = v82;
  (*(void (**)(_QWORD *))(v79[0] + 24))(v79);
LABEL_25:
  LODWORD(v69[0].__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v84, (int *)v69, 1);
  v50 = 0;
  v51 = 0;
  v49 = 0;
  v69[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
  v69[0].__r_.__value_.__s.__data_[8] = 0;
  v49 = (char *)operator new(0x60uLL);
  v50 = (uint64_t)v49;
  v51 = v49 + 96;
  v50 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem const>,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>((uint64_t)&v51, (uint64_t)&v81, (uint64_t)&v85, (uint64_t)v49);
  v108[2] = (uint64_t)&v49;
  std::string::basic_string[abi:ne180100]<0>(v42, "goc");
  ZinNEAtoms::EWGOCAtom::EWGOCAtom(&v66, v42, a3);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(v69, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  else
    v69[0] = v66;
  v12 = v67;
  v13 = (uint64_t)v68;
  if (!v68)
    goto LABEL_31;
  if (v68 != v67)
  {
    v13 = (*(uint64_t (**)(void))(*v68 + 16))();
LABEL_31:
    v71 = (_QWORD *)v13;
    goto LABEL_33;
  }
  v71 = (_QWORD *)v70;
  (*(void (**)(_QWORD *))(v67[0] + 24))(v67);
LABEL_33:
  v41 = 2;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v72, &v41, 1);
  std::string::basic_string[abi:ne180100]<0>(v39, "activation");
  ZinNEAtoms::ActivationAtom::ActivationAtom(&__p, v39, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v73, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v73 = __p;
  v14 = v64;
  v15 = (uint64_t)v65;
  if (!v65)
    goto LABEL_39;
  if (v65 != v64)
  {
    v15 = (*(uint64_t (**)(void))(*v65 + 16))();
LABEL_39:
    v75 = (_BYTE *)v15;
    goto LABEL_41;
  }
  v75 = v74;
  (*(void (**)(_QWORD *))(v64[0] + 24))(v64);
LABEL_41:
  LODWORD(v59) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v76, (int *)&v59, 1);
  v45 = 0;
  v46 = 0;
  v44 = 0;
  v59 = &v44;
  v60 = 0;
  v44 = (char *)operator new(0xC0uLL);
  v45 = (uint64_t)v44;
  v46 = v44 + 192;
  v45 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem const>,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>((uint64_t)&v46, (uint64_t)v69, (uint64_t)&v77, (uint64_t)v44);
  v16 = v109;
  v108[3] = (uint64_t)&v44;
  v110 = 0;
  v62 = 0;
  ZinManyToOnePattern::ZinManyToOnePattern(a1, (uint64_t)v108, a2, 0, (uint64_t)v61, 0);
  v17 = v62;
  v18 = v87;
  if (v62 == v61)
  {
    v19 = 4;
    v17 = v61;
  }
  else
  {
    if (!v62)
      goto LABEL_46;
    v19 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v19))();
LABEL_46:
  if (v110 == v109)
  {
    v20 = 4;
    goto LABEL_50;
  }
  if (v110)
  {
    v20 = 5;
    v16 = v110;
LABEL_50:
    (*(void (**)(_QWORD *))(*v16 + 8 * v20))(v16);
  }
  v59 = &v44;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
  for (i = 0; i != 0x1FFFFFFFFFFFFFE8; i -= 12)
  {
    v22 = &v69[i / 3];
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v76[i * 8]);
    v23 = *(std::string **)&v76[i * 8 - 8];
    if (&v74[i * 8] == (_BYTE *)v23)
    {
      v23 = v22 + 5;
      v24 = 4;
    }
    else
    {
      if (!v23)
        goto LABEL_57;
      v24 = 5;
    }
    (*(void (**)(void))(v23->__r_.__value_.__r.__words[0] + 8 * v24))();
LABEL_57:
    if (SHIBYTE(v73.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(v22[4].__r_.__value_.__l.__data_);
  }
  if (v65 == v64)
  {
    v25 = 4;
LABEL_64:
    (*(void (**)(_QWORD *))(*v14 + 8 * v25))(v14);
  }
  else if (v65)
  {
    v25 = 5;
    v14 = v65;
    goto LABEL_64;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v40 < 0)
    operator delete(v39[0]);
  if (v68 == v67)
  {
    v26 = 4;
LABEL_73:
    (*(void (**)(_QWORD *))(*v12 + 8 * v26))(v12);
  }
  else if (v68)
  {
    v26 = 5;
    v12 = v68;
    goto LABEL_73;
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (v43 < 0)
    operator delete(v42[0]);
  v69[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)v69);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v84);
  v27 = v83;
  if (v83 == v82)
  {
    v29 = 4;
    v27 = v82;
    v28 = v95;
LABEL_82:
    (*(void (**)(void))(*v27 + 8 * v29))();
  }
  else
  {
    v28 = v95;
    if (v83)
    {
      v29 = 5;
      goto LABEL_82;
    }
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (v80 == v79)
  {
    v30 = 4;
LABEL_89:
    (*(void (**)(_QWORD *))(*v10 + 8 * v30))(v10);
  }
  else if (v80)
  {
    v30 = 5;
    v10 = v80;
    goto LABEL_89;
  }
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (v48 < 0)
    operator delete(v47[0]);
  v69[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
  std::vector<std::vector<ZinLinearPattern::AtomItemDesc const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v69);
  for (j = 3; j != -3; j -= 3)
  {
    v69[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&(&v102)[j];
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)v69);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v92);
  v32 = v91;
  if (v91 == v90)
  {
    v33 = 4;
    v32 = v90;
LABEL_100:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }
  else if (v91)
  {
    v33 = 5;
    goto LABEL_100;
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (v88 == v87)
  {
    v34 = 4;
LABEL_107:
    (*(void (**)(_QWORD *))(*v18 + 8 * v34))(v18);
  }
  else if (v88)
  {
    v34 = 5;
    v18 = v88;
    goto LABEL_107;
  }
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  if (v53 < 0)
    operator delete(v52[0]);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v100);
  v35 = v99;
  if (v99 == v98)
  {
    v36 = 4;
    v35 = v98;
LABEL_116:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  else if (v99)
  {
    v36 = 5;
    goto LABEL_116;
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  if (v96 == v95)
  {
    v37 = 4;
LABEL_123:
    (*(void (**)(_QWORD *))(*v28 + 8 * v37))(v28);
  }
  else if (v96)
  {
    v37 = 5;
    v28 = v96;
    goto LABEL_123;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (v55 < 0)
    operator delete(v54[0]);
  *a1 = &off_24C02B490;
  return a1;
}

void sub_206DF521C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  void *a72;
  ZinLinearPattern::AtomItemDesc *v72;
  uint64_t v73;
  uint64_t i;

  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&a60);
  if (a19 < 0)
    operator delete(__p);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&a67);
  if (a26 < 0)
    operator delete(a21);
  while (v72 != (ZinLinearPattern::AtomItemDesc *)&a72)
  {
    v72 = (ZinLinearPattern::AtomItemDesc *)((char *)v72 - 96);
    ZinLinearPattern::AtomItemDesc::~AtomItemDesc(v72);
  }
  a72 = &a36;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  ZinLinearPattern::AtomItemDesc::~AtomItemDesc((ZinLinearPattern::AtomItemDesc *)&STACK[0x290]);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0x258]);
  if (a35 < 0)
    operator delete(a30);
  a72 = &a51;
  std::vector<std::vector<ZinLinearPattern::AtomItemDesc const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  for (i = 24; i != -24; i -= 24)
  {
    a72 = (void *)(v73 - 216 + i);
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  }
  ZinLinearPattern::AtomItemDesc::~AtomItemDesc((ZinLinearPattern::AtomItemDesc *)&STACK[0x330]);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0x2F8]);
  if (a44 < 0)
    operator delete(a39);
  ZinLinearPattern::AtomItemDesc::~AtomItemDesc((ZinLinearPattern::AtomItemDesc *)&STACK[0x3D0]);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0x398]);
  if (a50 < 0)
    operator delete(a45);
  _Unwind_Resume(a1);
}

void sub_206DF55A8()
{
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0x3D0]);
  JUMPOUT(0x206DF55B4);
}

void sub_206DF55C0()
{
  JUMPOUT(0x206DF5564);
}

void sub_206DF55D0()
{
  JUMPOUT(0x206DF55A0);
}

double ZinNEPatterns::DualSourceElementWise::SharedClone@<D0>(ZinNEPatterns::DualSourceElementWise *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<ZinNEPatterns::DualSourceElementWise,std::allocator<ZinNEPatterns::DualSourceElementWise>,ZinNEPatterns::DualSourceElementWise const&,void>(this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

uint64_t ZinNEPatterns::DualSourceElementWise::Fuse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t SingleMatch;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t NEDualSourceElementWiseLayer;
  void *v32;
  std::string v33;
  void *__p[2];
  int64_t v35;
  std::string v36;
  std::string v37;
  std::string v38;

  std::string::basic_string[abi:ne180100]<0>(&v38, "broadcast1");
  SingleMatch = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&v38);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v38, "broadcast2");
  v6 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&v38);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v38, "main");
  v7 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&v38);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v38, "goc");
  v8 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&v38);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v38, "activation");
  v9 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&v38);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(&v36, a3, 1);
  v11 = *(char *)(v7 + 47);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)(v7 + 24);
  else
    v12 = *(const std::string::value_type **)(v7 + 24);
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(v7 + 47);
  else
    v13 = *(_QWORD *)(v7 + 32);
  v14 = std::string::insert(&v36, 0, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v37, "_", 1uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v33, "ew_ne_dual_src");
  v18 = std::string::append(&v33, "_xfm", 4uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v35 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (v35 >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if (v35 >= 0)
    v21 = HIBYTE(v35);
  else
    v21 = (std::string::size_type)__p[1];
  v22 = std::string::append(&v38, (const std::string::value_type *)v20, v21);
  v32 = (void *)v22->__r_.__value_.__r.__words[0];
  v23 = SHIBYTE(v22->__r_.__value_.__r.__words[2]);
  v22->__r_.__value_.__r.__words[0] = 0;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v35) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v24 = v8;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  v25 = v6;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  v26 = SingleMatch;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  v27 = *(_QWORD *)(v7 + 16);
  v28 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
  v29 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
  NEDualSourceElementWiseLayer = ZinBuilder::CreateNEDualSourceElementWiseLayer(v27, a3, (__int128 *)(v28 + 48), *(_DWORD *)(v29 + 88), v26, v25, v7, v24, v9);
  if (v23 < 0)
    operator delete(v32);
  return NEDualSourceElementWiseLayer;
}

void sub_206DF5930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  if (a35 < 0)
    operator delete(a30);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void ZinNEPatterns::Bypass::Fuse(ZinIrOpLayerGraph const*,ZinObjectNameFactory &,std::vector<ZinIrOpLayer *> &)const::$_0::operator()(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  std::string v10;
  void *__p[2];
  int64_t v12;
  std::string v13;
  std::string v14;

  (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 16))(&v13, *a1, 1);
  v3 = std::string::append(&v13, "_", 1uLL);
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v10, "fuse_bypass");
  v5 = std::string::append(&v10, "_xfm", 4uLL);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v12 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (v12 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if (v12 >= 0)
    v8 = HIBYTE(v12);
  else
    v8 = (std::string::size_type)__p[1];
  v9 = std::string::append(&v14, (const std::string::value_type *)v7, v8);
  *a2 = *v9;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_206DF5B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v27 - 25) < 0)
    operator delete(*(void **)(v27 - 48));
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

double ZinNEPatterns::RCAS::SharedClone@<D0>(ZinNEPatterns::RCAS *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<ZinNEPatterns::RCAS,std::allocator<ZinNEPatterns::RCAS>,ZinNEPatterns::RCAS const&,void>((uint64_t *)this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

ZinPatternUtils *ZinNEPatterns::RCAS::Fuse(ZinANELayer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t SingleMatch;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  void **v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  ZinPatternUtils *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  const char *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::string v37;
  void *v38[2];
  int64_t v39;
  std::string v40;
  std::string v41;
  std::string __p;
  __int128 v43;
  std::string::size_type v44;
  uint64_t *v45[2];
  char v46;

  std::string::basic_string[abi:ne180100]<0>(v45, "main");
  SingleMatch = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)v45);
  if (v46 < 0)
    operator delete(v45[0]);
  std::string::basic_string[abi:ne180100]<0>(&__p, "goc");
  ZinPattern::GetMatch((uint64_t)a1, (unsigned __int8 *)&__p, &v43);
  ZinPatternUtils::ToGOC((uint64_t **)&v43, v45);
  if ((_QWORD)v43)
  {
    *((_QWORD *)&v43 + 1) = v43;
    operator delete((void *)v43);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v43, "activation");
  v7 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v43);
  if (SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  std::string::basic_string[abi:ne180100]<0>(&v43, "texture");
  v8 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v43);
  if (SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  std::string::basic_string[abi:ne180100]<0>(&v43, "relu");
  v9 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v43);
  if (SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  v10 = ZinMergeGOCSequence(a2, a3, (uint64_t)v45);
  v11 = (*(uint64_t (**)(ZinANELayer *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(&v40, a3, 1);
  v12 = *(char *)(SingleMatch + 47);
  if (v12 >= 0)
    v13 = (const std::string::value_type *)(SingleMatch + 24);
  else
    v13 = *(const std::string::value_type **)(SingleMatch + 24);
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(SingleMatch + 47);
  else
    v14 = *(_QWORD *)(SingleMatch + 32);
  v15 = std::string::insert(&v40, 0, v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v41, "_", 1uLL);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v37, "nercas_fuse");
  v19 = std::string::append(&v37, "_xfm", 4uLL);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v39 = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)v38 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (v39 >= 0)
    v21 = v38;
  else
    v21 = (void **)v38[0];
  if (v39 >= 0)
    v22 = HIBYTE(v39);
  else
    v22 = (std::string::size_type)v38[1];
  v23 = std::string::append(&__p, (const std::string::value_type *)v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v44 = v23->__r_.__value_.__r.__words[2];
  v43 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  v25 = (ZinPatternUtils *)operator new();
  v26 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 40))(v11, 0, 0);
  v27 = v26[1];
  v35 = *v26;
  v36 = (std::__shared_weak_count *)v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  ZinNERCASLayer::ZinNERCASLayer(v25, &v35, &v43, v8, v9, SingleMatch, (uint64_t)v10, v7, 0);
  v31 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  ZinPatternUtils::AssignDmaLayers(v25, a1, (const ZinPattern *)"dma_conv_input", 0, "dma_conv_output", v30);
  if (SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (v45[0])
  {
    v45[1] = v45[0];
    operator delete(v45[0]);
  }
  return v25;
}

void sub_206DF5F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  uint64_t v43;
  void *v45;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x20BD002F8](v42, 0x10B3C4000074909);
  if (*(char *)(v43 - 105) < 0)
    operator delete(*(void **)(v43 - 128));
  v45 = *(void **)(v43 - 104);
  if (v45)
  {
    *(_QWORD *)(v43 - 96) = v45;
    operator delete(v45);
  }
  _Unwind_Resume(a1);
}

_QWORD *ZinNEPatterns::NEConv::NEConv(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t i;
  std::string *v13;
  std::string *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  void *__p[2];
  char v21;
  int v22;
  void *v23[2];
  char v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;
  __int128 **v28;
  char v29;
  _BYTE v30[24];
  _BYTE *v31;
  std::string v32;
  _QWORD v33[3];
  _QWORD *v34;
  std::string v35;
  _QWORD v36[3];
  _QWORD *v37;
  std::string v38[2];
  std::string v39[2];
  _QWORD *v40;
  uint64_t v41;
  std::string v42;
  _BYTE v43[24];
  _BYTE *v44;
  _BYTE v45[40];
  _QWORD v46[2];

  v46[1] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v23, "neconv");
  ZinNEAtoms::NEConvAtom::NEConvAtom(&v35, v23, a3);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(v38, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
  else
    v38[0] = v35;
  v6 = v36;
  v7 = (uint64_t)v37;
  if (!v37)
    goto LABEL_7;
  if (v37 != v36)
  {
    v7 = (*(uint64_t (**)(_QWORD *))(*v37 + 16))(v37);
LABEL_7:
    v40 = (_QWORD *)v7;
    goto LABEL_9;
  }
  v40 = (_QWORD *)v39;
  (*(void (**)(_QWORD *))(v36[0] + 24))(v36);
LABEL_9:
  v22 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v41, &v22, 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "negoc");
  ZinNEAtoms::NEGOCAtom::NEGOCAtom(&v32, __p, a3);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v42, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
  else
    v42 = v32;
  v8 = v33;
  v9 = (uint64_t)v34;
  if (!v34)
    goto LABEL_15;
  if (v34 != v33)
  {
    v9 = (*(uint64_t (**)(_QWORD *))(*v34 + 16))(v34);
LABEL_15:
    v44 = (_BYTE *)v9;
    goto LABEL_17;
  }
  v44 = v43;
  (*(void (**)(_QWORD *))(v33[0] + 24))(v33);
LABEL_17:
  v19 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v45, &v19, 1);
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = &v25;
  v29 = 0;
  v25 = (__int128 *)operator new(0xC0uLL);
  v26 = v25;
  v27 = v25 + 12;
  v26 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem const>,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>((uint64_t)&v27, (uint64_t)v38, (uint64_t)v46, (uint64_t)v25);
  v31 = 0;
  ZinLinearPattern::ZinLinearPattern((uint64_t)a1, &v25, a2, 0, (uint64_t)v30, 0);
  v10 = v31;
  if (v31 == v30)
  {
    v11 = 4;
    v10 = v30;
    goto LABEL_21;
  }
  if (v31)
  {
    v11 = 5;
LABEL_21:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v28 = &v25;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  for (i = 0; i != 0x1FFFFFFFFFFFFFE8; i -= 12)
  {
    v13 = &v38[i / 3];
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v45[i * 8]);
    v14 = *(std::string **)&v45[i * 8 - 8];
    if (&v43[i * 8] == (_BYTE *)v14)
    {
      v14 = v13 + 5;
      v15 = 4;
    }
    else
    {
      if (!v14)
        goto LABEL_28;
      v15 = 5;
    }
    (*(void (**)(void))(v14->__r_.__value_.__r.__words[0] + 8 * v15))();
LABEL_28:
    if (SHIBYTE(v42.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(v13[4].__r_.__value_.__l.__data_);
  }
  if (v34 == v33)
  {
    v16 = 4;
LABEL_35:
    (*(void (**)(_QWORD *))(*v8 + 8 * v16))(v8);
  }
  else if (v34)
  {
    v16 = 5;
    v8 = v34;
    goto LABEL_35;
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (v21 < 0)
    operator delete(__p[0]);
  if (v37 == v36)
  {
    v17 = 4;
LABEL_44:
    (*(void (**)(_QWORD *))(*v6 + 8 * v17))(v6);
  }
  else if (v37)
  {
    v17 = 5;
    v6 = v37;
    goto LABEL_44;
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (v24 < 0)
    operator delete(v23[0]);
  *a1 = &off_24C02B6F8;
  return a1;
}

void sub_206DF6430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  ZinLinearPattern::AtomItemDesc *v47;

  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&a33);
  if (a16 < 0)
    operator delete(__p);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&a40);
  if (a23 < 0)
    operator delete(a18);
  while (v47 != (ZinLinearPattern::AtomItemDesc *)&a47)
  {
    v47 = (ZinLinearPattern::AtomItemDesc *)((char *)v47 - 96);
    ZinLinearPattern::AtomItemDesc::~AtomItemDesc(v47);
  }
  _Unwind_Resume(a1);
}

void sub_206DF658C()
{
  JUMPOUT(0x206DF654CLL);
}

void sub_206DF659C()
{
  JUMPOUT(0x206DF6584);
}

double ZinNEPatterns::NEConv::SharedClone@<D0>(ZinNEPatterns::NEConv *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<ZinNEPatterns::NEConv,std::allocator<ZinNEPatterns::NEConv>,ZinNEPatterns::NEConv const&,void>((uint64_t *)this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

ZinPatternUtils *ZinNEPatterns::NEConv::Fuse(ZinANELayer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *SingleMatch;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  ZinPatternUtils *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  const char *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::string v27;
  void *__p[2];
  int64_t v29;
  std::string v30;
  std::string v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  std::string::size_type v35;

  std::string::basic_string[abi:ne180100]<0>(&v34, "neconv");
  SingleMatch = (uint64_t *)ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v34);
  if (SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  std::string::basic_string[abi:ne180100]<0>(&v34, "negoc");
  v6 = (_QWORD *)ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v34);
  if (SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  v7 = v6[48];
  v8 = v6[49];
  v9 = (ZinPatternUtils *)operator new();
  v10 = (uint64_t *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v6 + 40))(v6, 0, 0);
  v11 = v10[1];
  v32 = *v10;
  v33 = (std::__shared_weak_count *)v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(&v30, a3, 1);
  v14 = std::string::append(&v30, "_", 1uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v27, "post_engine_fuse_neconv");
  v16 = std::string::append(&v27, "_xfm", 4uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v29 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (v29 >= 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if (v29 >= 0)
    v19 = HIBYTE(v29);
  else
    v19 = (std::string::size_type)__p[1];
  v20 = std::string::append(&v31, (const std::string::value_type *)v18, v19);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v35 = v20->__r_.__value_.__r.__words[2];
  v34 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  ZinNEConvLayer::ZinNEConvLayer(v9, &v32, &v34, SingleMatch[25], SingleMatch[46], SingleMatch[47], SingleMatch[54], 0, v7, v8, 0, 0, 0);
  if (SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  v23 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  ZinPatternUtils::AssignDmaLayers(v9, a1, (const ZinPattern *)"dma_conv_input", 0, "dma_conv_output", v22);
  return v9;
}

void sub_206DF6870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  if (*(char *)(v38 - 73) < 0)
    operator delete(*(void **)(v38 - 96));
  if (a25 < 0)
    operator delete(__p);
  if (a19 < 0)
    operator delete(a14);
  if (a37 < 0)
    operator delete(a32);
  if (a31 < 0)
    operator delete(a26);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v38 - 112);
  MEMORY[0x20BD002F8](v37, 0x10B3C4001E18234);
  _Unwind_Resume(a1);
}

void sub_206DF6914()
{
  JUMPOUT(0x206DF68F4);
}

void sub_206DF691C()
{
  uint64_t v0;

  if (*(char *)(v0 - 73) < 0)
    operator delete(*(void **)(v0 - 96));
  JUMPOUT(0x206DF690CLL);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinLinearPattern::AtomItem const>>,std::vector<ZinLinearPattern::AtomItem const> const*,std::vector<ZinLinearPattern::AtomItem const> const*,std::vector<ZinLinearPattern::AtomItem const>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t *v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<ZinLinearPattern::AtomItem const>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 5));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinLinearPattern::AtomItem const>>,std::vector<ZinLinearPattern::AtomItem const>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_206DF69E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinLinearPattern::AtomItem const>>,std::vector<ZinLinearPattern::AtomItem const>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinLinearPattern::AtomItem const>>,std::vector<ZinLinearPattern::AtomItem const>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinLinearPattern::AtomItemDesc const>>,std::vector<ZinLinearPattern::AtomItemDesc const>*>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinNEPatterns::Conv,std::allocator<ZinNEPatterns::Conv>,ZinNEPatterns::Conv const&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<ZinNEPatterns::Conv>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::Conv const&,std::allocator<ZinNEPatterns::Conv>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206DF6A6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinNEPatterns::Conv>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::Conv const&,std::allocator<ZinNEPatterns::Conv>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C2C0;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinNEPatterns::Conv,ZinNEPatterns::Conv const&,ZinNEPatterns::Conv*>((ZinPattern *)(a1 + 3), a2);
  return a1;
}

void sub_206DF6AB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinNEPatterns::Conv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C2C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinNEPatterns::Conv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C2C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

ZinPattern *std::construct_at[abi:ne180100]<ZinNEPatterns::Conv,ZinNEPatterns::Conv const&,ZinNEPatterns::Conv*>(ZinPattern *a1, uint64_t *a2)
{
  _QWORD *v4;

  ZinPattern::ZinPattern(a1, (const ZinPattern *)a2);
  *v4 = &off_24C01BCC8;
  v4[24] = 0;
  v4[25] = 0;
  v4[23] = 0;
  std::vector<ZinLinearPattern::AtomItem const>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>(v4 + 23, a2[23], a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 5));
  *(_QWORD *)a1 = &off_24C02B4E8;
  return a1;
}

void sub_206DF6B7C(_Unwind_Exception *a1)
{
  ZinPattern *v1;

  ZinPattern::~ZinPattern(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinNEPatterns::UConv,std::allocator<ZinNEPatterns::UConv>,ZinNEPatterns::UConv const&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<ZinNEPatterns::UConv>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::UConv const&,std::allocator<ZinNEPatterns::UConv>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206DF6BD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinNEPatterns::UConv>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::UConv const&,std::allocator<ZinNEPatterns::UConv>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C368;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinNEPatterns::UConv,ZinNEPatterns::UConv const&,ZinNEPatterns::UConv*>((ZinPattern *)(a1 + 3), a2);
  return a1;
}

void sub_206DF6C20(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinNEPatterns::UConv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinNEPatterns::UConv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinNEPatterns::UConv>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

ZinPattern *std::construct_at[abi:ne180100]<ZinNEPatterns::UConv,ZinNEPatterns::UConv const&,ZinNEPatterns::UConv*>(ZinPattern *a1, uint64_t *a2)
{
  _QWORD *v4;

  ZinPattern::ZinPattern(a1, (const ZinPattern *)a2);
  *v4 = &off_24C01BCC8;
  v4[24] = 0;
  v4[25] = 0;
  v4[23] = 0;
  std::vector<ZinLinearPattern::AtomItem const>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>(v4 + 23, a2[23], a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 5));
  *(_QWORD *)a1 = &off_24C02B5F0;
  return a1;
}

void sub_206DF6CF4(_Unwind_Exception *a1)
{
  ZinPattern *v1;

  ZinPattern::~ZinPattern(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinNEPatterns::KernelRasterizer,std::allocator<ZinNEPatterns::KernelRasterizer>,ZinNEPatterns::KernelRasterizer const&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<ZinNEPatterns::KernelRasterizer>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::KernelRasterizer const&,std::allocator<ZinNEPatterns::KernelRasterizer>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206DF6D4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinNEPatterns::KernelRasterizer>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::KernelRasterizer const&,std::allocator<ZinNEPatterns::KernelRasterizer>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C250;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinNEPatterns::KernelRasterizer,ZinNEPatterns::KernelRasterizer const&,ZinNEPatterns::KernelRasterizer*>((ZinPattern *)(a1 + 3), a2);
  return a1;
}

void sub_206DF6D98(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinNEPatterns::KernelRasterizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C250;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinNEPatterns::KernelRasterizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C250;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinNEPatterns::KernelRasterizer>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

ZinPattern *std::construct_at[abi:ne180100]<ZinNEPatterns::KernelRasterizer,ZinNEPatterns::KernelRasterizer const&,ZinNEPatterns::KernelRasterizer*>(ZinPattern *a1, uint64_t *a2)
{
  _QWORD *v4;

  ZinPattern::ZinPattern(a1, (const ZinPattern *)a2);
  *v4 = &off_24C01BCC8;
  v4[24] = 0;
  v4[25] = 0;
  v4[23] = 0;
  std::vector<ZinLinearPattern::AtomItem const>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>(v4 + 23, a2[23], a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 5));
  *(_QWORD *)a1 = &off_24C02B438;
  return a1;
}

void sub_206DF6E6C(_Unwind_Exception *a1)
{
  ZinPattern *v1;

  ZinPattern::~ZinPattern(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinNEPatterns::CrossCorrelation,std::allocator<ZinNEPatterns::CrossCorrelation>,ZinNEPatterns::CrossCorrelation const&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<ZinNEPatterns::CrossCorrelation>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::CrossCorrelation const&,std::allocator<ZinNEPatterns::CrossCorrelation>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206DF6EC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinNEPatterns::CrossCorrelation>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::CrossCorrelation const&,std::allocator<ZinNEPatterns::CrossCorrelation>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C218;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinNEPatterns::CrossCorrelation,ZinNEPatterns::CrossCorrelation const&,ZinNEPatterns::CrossCorrelation*>((ZinPattern *)(a1 + 3), a2);
  return a1;
}

void sub_206DF6F10(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinNEPatterns::CrossCorrelation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinNEPatterns::CrossCorrelation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C218;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinNEPatterns::CrossCorrelation>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

ZinPattern *std::construct_at[abi:ne180100]<ZinNEPatterns::CrossCorrelation,ZinNEPatterns::CrossCorrelation const&,ZinNEPatterns::CrossCorrelation*>(ZinPattern *a1, uint64_t *a2)
{
  _QWORD *v4;

  ZinPattern::ZinPattern(a1, (const ZinPattern *)a2);
  *v4 = &off_24C01BCC8;
  v4[24] = 0;
  v4[25] = 0;
  v4[23] = 0;
  std::vector<ZinLinearPattern::AtomItem const>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>(v4 + 23, a2[23], a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 5));
  *(_QWORD *)a1 = &off_24C02B3E0;
  return a1;
}

void sub_206DF6FE4(_Unwind_Exception *a1)
{
  ZinPattern *v1;

  ZinPattern::~ZinPattern(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinNEPatterns::MatMul,std::allocator<ZinNEPatterns::MatMul>,ZinNEPatterns::MatMul const&,void>@<X0>(const ZinManyToOnePattern *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x2B0uLL);
  result = std::__shared_ptr_emplace<ZinNEPatterns::MatMul>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::MatMul const&,std::allocator<ZinNEPatterns::MatMul>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206DF703C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinNEPatterns::MatMul>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::MatMul const&,std::allocator<ZinNEPatterns::MatMul>,0>(_QWORD *a1, const ZinManyToOnePattern *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C3D8;
  a1[1] = 0;
  ZinManyToOnePattern::ZinManyToOnePattern((ZinManyToOnePattern *)(a1 + 3), a2);
  a1[3] = &off_24C02B6A0;
  return a1;
}

void sub_206DF7094(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinNEPatterns::MatMul>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C3D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinNEPatterns::MatMul>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C3D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinNEPatterns::MatMul>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinNEPatterns::Pool,std::allocator<ZinNEPatterns::Pool>,ZinNEPatterns::Pool const&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<ZinNEPatterns::Pool>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::Pool const&,std::allocator<ZinNEPatterns::Pool>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206DF7144(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinNEPatterns::Pool>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::Pool const&,std::allocator<ZinNEPatterns::Pool>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C2F8;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinNEPatterns::Pool,ZinNEPatterns::Pool const&,ZinNEPatterns::Pool*>((ZinPattern *)(a1 + 3), a2);
  return a1;
}

void sub_206DF7190(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinNEPatterns::Pool>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C2F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinNEPatterns::Pool>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C2F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinNEPatterns::Pool>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

ZinPattern *std::construct_at[abi:ne180100]<ZinNEPatterns::Pool,ZinNEPatterns::Pool const&,ZinNEPatterns::Pool*>(ZinPattern *a1, uint64_t *a2)
{
  _QWORD *v4;

  ZinPattern::ZinPattern(a1, (const ZinPattern *)a2);
  *v4 = &off_24C01BCC8;
  v4[24] = 0;
  v4[25] = 0;
  v4[23] = 0;
  std::vector<ZinLinearPattern::AtomItem const>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>(v4 + 23, a2[23], a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 5));
  *(_QWORD *)a1 = &off_24C02B540;
  return a1;
}

void sub_206DF7264(_Unwind_Exception *a1)
{
  ZinPattern *v1;

  ZinPattern::~ZinPattern(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinNEPatterns::ElementWise,std::allocator<ZinNEPatterns::ElementWise>,ZinNEPatterns::ElementWise const&,void>@<X0>(const ZinVariableToOnePattern *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x2C0uLL);
  result = std::__shared_ptr_emplace<ZinNEPatterns::ElementWise>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::ElementWise const&,std::allocator<ZinNEPatterns::ElementWise>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206DF72BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinNEPatterns::ElementWise>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::ElementWise const&,std::allocator<ZinNEPatterns::ElementWise>,0>(_QWORD *a1, const ZinVariableToOnePattern *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C1E0;
  a1[1] = 0;
  ZinVariableToOnePattern::ZinVariableToOnePattern((ZinVariableToOnePattern *)(a1 + 3), a2);
  a1[3] = &off_24C02B388;
  return a1;
}

void sub_206DF7314(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinNEPatterns::ElementWise>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C1E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinNEPatterns::ElementWise>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C1E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinNEPatterns::ElementWise>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinNEPatterns::DualSourceElementWise,std::allocator<ZinNEPatterns::DualSourceElementWise>,ZinNEPatterns::DualSourceElementWise const&,void>@<X0>(const ZinManyToOnePattern *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x2B0uLL);
  result = std::__shared_ptr_emplace<ZinNEPatterns::DualSourceElementWise>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::DualSourceElementWise const&,std::allocator<ZinNEPatterns::DualSourceElementWise>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206DF73C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinNEPatterns::DualSourceElementWise>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::DualSourceElementWise const&,std::allocator<ZinNEPatterns::DualSourceElementWise>,0>(_QWORD *a1, const ZinManyToOnePattern *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C288;
  a1[1] = 0;
  ZinManyToOnePattern::ZinManyToOnePattern((ZinManyToOnePattern *)(a1 + 3), a2);
  a1[3] = &off_24C02B490;
  return a1;
}

void sub_206DF741C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinNEPatterns::DualSourceElementWise>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C288;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinNEPatterns::DualSourceElementWise>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C288;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinNEPatterns::DualSourceElementWise>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinNEPatterns::Bypass,std::allocator<ZinNEPatterns::Bypass>,ZinNEPatterns::Bypass const&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<ZinNEPatterns::Bypass>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::Bypass const&,std::allocator<ZinNEPatterns::Bypass>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206DF74CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinNEPatterns::Bypass>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::Bypass const&,std::allocator<ZinNEPatterns::Bypass>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C3A0;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinNEPatterns::Bypass,ZinNEPatterns::Bypass const&,ZinNEPatterns::Bypass*>((ZinPattern *)(a1 + 3), a2);
  return a1;
}

void sub_206DF7518(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinNEPatterns::Bypass>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C3A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinNEPatterns::Bypass>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C3A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

ZinPattern *std::construct_at[abi:ne180100]<ZinNEPatterns::Bypass,ZinNEPatterns::Bypass const&,ZinNEPatterns::Bypass*>(ZinPattern *a1, uint64_t *a2)
{
  _QWORD *v4;

  ZinPattern::ZinPattern(a1, (const ZinPattern *)a2);
  *v4 = &off_24C01BCC8;
  v4[24] = 0;
  v4[25] = 0;
  v4[23] = 0;
  std::vector<ZinLinearPattern::AtomItem const>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>(v4 + 23, a2[23], a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 5));
  *(_QWORD *)a1 = &off_24C02B648;
  return a1;
}

void sub_206DF75DC(_Unwind_Exception *a1)
{
  ZinPattern *v1;

  ZinPattern::~ZinPattern(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinNEPatterns::RCAS::RCAS(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEPatterns::RCAS::RCAS(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEPatterns::RCAS::RCAS(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEPatterns::RCAS::RCAS(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C055B98;
  return result;
}

void std::__function::__func<ZinNEPatterns::RCAS::RCAS(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEPatterns::RCAS::RCAS(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C055B98;
}

BOOL std::__function::__func<ZinNEPatterns::RCAS::RCAS(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEPatterns::RCAS::RCAS(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, ZinPattern **a4)
{
  return ZinPattern::MatchCount(*a4) != 0;
}

uint64_t std::__function::__func<ZinNEPatterns::RCAS::RCAS(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEPatterns::RCAS::RCAS(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEPatterns::RCAS::RCAS(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEPatterns::RCAS::RCAS(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinNEPatterns::RCAS,std::allocator<ZinNEPatterns::RCAS>,ZinNEPatterns::RCAS const&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<ZinNEPatterns::RCAS>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::RCAS const&,std::allocator<ZinNEPatterns::RCAS>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206DF76F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinNEPatterns::RCAS>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::RCAS const&,std::allocator<ZinNEPatterns::RCAS>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C330;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinNEPatterns::RCAS,ZinNEPatterns::RCAS const&,ZinNEPatterns::RCAS*>((ZinPattern *)(a1 + 3), a2);
  return a1;
}

void sub_206DF773C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinNEPatterns::RCAS>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C330;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinNEPatterns::RCAS>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C330;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinNEPatterns::RCAS>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

ZinPattern *std::construct_at[abi:ne180100]<ZinNEPatterns::RCAS,ZinNEPatterns::RCAS const&,ZinNEPatterns::RCAS*>(ZinPattern *a1, uint64_t *a2)
{
  _QWORD *v4;

  ZinPattern::ZinPattern(a1, (const ZinPattern *)a2);
  *v4 = &off_24C01BCC8;
  v4[24] = 0;
  v4[25] = 0;
  v4[23] = 0;
  std::vector<ZinLinearPattern::AtomItem const>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>(v4 + 23, a2[23], a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 5));
  *(_QWORD *)a1 = &off_24C02B598;
  return a1;
}

void sub_206DF7810(_Unwind_Exception *a1)
{
  ZinPattern *v1;

  ZinPattern::~ZinPattern(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinNEPatterns::NEConv,std::allocator<ZinNEPatterns::NEConv>,ZinNEPatterns::NEConv const&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<ZinNEPatterns::NEConv>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::NEConv const&,std::allocator<ZinNEPatterns::NEConv>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206DF7868(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinNEPatterns::NEConv>::__shared_ptr_emplace[abi:ne180100]<ZinNEPatterns::NEConv const&,std::allocator<ZinNEPatterns::NEConv>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C410;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinNEPatterns::NEConv,ZinNEPatterns::NEConv const&,ZinNEPatterns::NEConv*>((ZinPattern *)(a1 + 3), a2);
  return a1;
}

void sub_206DF78B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinNEPatterns::NEConv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinNEPatterns::NEConv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C410;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinNEPatterns::NEConv>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

ZinPattern *std::construct_at[abi:ne180100]<ZinNEPatterns::NEConv,ZinNEPatterns::NEConv const&,ZinNEPatterns::NEConv*>(ZinPattern *a1, uint64_t *a2)
{
  _QWORD *v4;

  ZinPattern::ZinPattern(a1, (const ZinPattern *)a2);
  *v4 = &off_24C01BCC8;
  v4[24] = 0;
  v4[25] = 0;
  v4[23] = 0;
  std::vector<ZinLinearPattern::AtomItem const>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>(v4 + 23, a2[23], a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 5));
  *(_QWORD *)a1 = &off_24C02B6F8;
  return a1;
}

void sub_206DF7988(_Unwind_Exception *a1)
{
  ZinPattern *v1;

  ZinPattern::~ZinPattern(v1);
  _Unwind_Resume(a1);
}

void ZinFurthestPointSamplingWithRadiusCompositeLayer::ZinFurthestPointSamplingWithRadiusCompositeLayer(ZinFurthestPointSamplingWithRadiusCompositeLayer *this, size_t *a2, ZinRadiusSearchLayer *a3)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  size_t v11;
  std::string *v12;
  char *v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  ZinIrKernel *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  ZinIrKernel *v26;
  std::string v27;
  void *v28[2];
  int64_t v29;
  std::string v30;
  void *__p[2];
  std::string::size_type v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  _QWORD *v35;

  v6 = (_QWORD *)operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)v6, 21);
  *v6 = &unk_24C027098;
  v35 = v6;
  v7 = (uint64_t *)(*(uint64_t (**)(size_t *, _QWORD, _QWORD))(*a2 + 40))(a2, 0, 0);
  v8 = v7[1];
  v33 = *v7;
  v34 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if (*((char *)a2 + 47) >= 0)
    v11 = *((unsigned __int8 *)a2 + 47);
  else
    v11 = a2[4];
  v12 = &v30;
  std::string::basic_string[abi:ne180100]((uint64_t)&v30, v11 + 1);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v12 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if (v11)
  {
    if (*((char *)a2 + 47) >= 0)
      v13 = (char *)(a2 + 3);
    else
      v13 = (char *)a2[3];
    memmove(v12, v13, v11);
  }
  *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v27, "comp_radius");
  v14 = std::string::append(&v27, "_xfm", 4uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)v28 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v29 >= 0)
    v16 = v28;
  else
    v16 = (void **)v28[0];
  if (v29 >= 0)
    v17 = HIBYTE(v29);
  else
    v17 = (std::string::size_type)v28[1];
  v18 = std::string::append(&v30, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v32 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v26 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)this, (uint64_t *)&v35, &v33, (__int128 *)__p, &v26);
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    ZinIrKernel::~ZinIrKernel(v20);
    MEMORY[0x20BD002F8](v21);
  }
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v29) < 0)
    operator delete(v28[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  v22 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (uint64_t)v35;
  v35 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  *(_QWORD *)this = &off_24C026B28;
  *((_QWORD *)this + 24) = a2;
  *((_QWORD *)this + 25) = a3;
}

void sub_206DF7C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v35;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)&a9, 0);
  if (a33 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v33 - 72);
  v35 = *(_QWORD *)(v33 - 56);
  *(_QWORD *)(v33 - 56) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  _Unwind_Resume(a1);
}

ZinIrOpLayer *ZinFurthestPointSamplingWithRadiusCompositeLayer::Lower(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  ZinIrOpLayer *v5;
  ZinIrOpLayer *result;
  char v7;
  uint64_t **v8;
  char v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[2];
  int v27;
  _OWORD v28[2];
  int v29;
  ZinIrOpLayer *v30;

  std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1 + 192) + 192), (uint64_t *)(a3 + 8));
  v5 = **(ZinIrOpLayer ***)(a1 + 88);
  v30 = 0;
  result = ZinFurthestPointSamplingLayer::DecomposeFPSSequence(*(ZinFurthestPointSamplingLayer **)(a1 + 192), a2, v5, *(ZinRadiusSearchLayer **)(a1 + 200), &v30);
  if (result)
  {
    memset(v28, 0, sizeof(v28));
    v29 = 1065353216;
    v7 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)a1, result, v28);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v28);
    if ((v7 & 1) != 0)
    {
      ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)a1, 0);
      v8 = *(uint64_t ***)(a1 + 200);
      memset(v26, 0, sizeof(v26));
      v27 = 1065353216;
      v9 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, v8, v30, v26);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v26);
      if ((v9 & 1) != 0)
      {
        ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, *(ZinIrOpLayer **)(a1 + 200), 0);
        return 0;
      }
      v18 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v18)
        std::__function::__func<ZinMirLayerFusion::Commit(void)::$_0,std::allocator<ZinMirLayerFusion::Commit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      v10 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v10)
        std::__function::__func<ZinMirLayerFusion::Commit(void)::$_0,std::allocator<ZinMirLayerFusion::Commit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    return (ZinIrOpLayer *)3;
  }
  return result;
}

void sub_206DF7DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinFurthestPointSamplingWithRadiusCompositeLayer::Clone()
{
  return 0;
}

void ZinFurthestPointSamplingWithRadiusCompositeLayer::~ZinFurthestPointSamplingWithRadiusCompositeLayer(ZinFurthestPointSamplingWithRadiusCompositeLayer *this)
{
  ZinIrOpLayer::~ZinIrOpLayer(this);
  JUMPOUT(0x20BD002F8);
}

void std::__function::__func<ZinFurthestPointSamplingWithRadiusCompositeLayer::MakeFurthestPointSamplingWithRadiusCompositeLayer(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0,std::allocator<ZinFurthestPointSamplingWithRadiusCompositeLayer::MakeFurthestPointSamplingWithRadiusCompositeLayer(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinFurthestPointSamplingWithRadiusCompositeLayer::MakeFurthestPointSamplingWithRadiusCompositeLayer(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0,std::allocator<ZinFurthestPointSamplingWithRadiusCompositeLayer::MakeFurthestPointSamplingWithRadiusCompositeLayer(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C059920;
  return result;
}

void std::__function::__func<ZinFurthestPointSamplingWithRadiusCompositeLayer::MakeFurthestPointSamplingWithRadiusCompositeLayer(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0,std::allocator<ZinFurthestPointSamplingWithRadiusCompositeLayer::MakeFurthestPointSamplingWithRadiusCompositeLayer(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C059920;
}

uint64_t std::__function::__func<ZinFurthestPointSamplingWithRadiusCompositeLayer::MakeFurthestPointSamplingWithRadiusCompositeLayer(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0,std::allocator<ZinFurthestPointSamplingWithRadiusCompositeLayer::MakeFurthestPointSamplingWithRadiusCompositeLayer(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) == 53) | 0x100u;
}

uint64_t std::__function::__func<ZinFurthestPointSamplingWithRadiusCompositeLayer::MakeFurthestPointSamplingWithRadiusCompositeLayer(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0,std::allocator<ZinFurthestPointSamplingWithRadiusCompositeLayer::MakeFurthestPointSamplingWithRadiusCompositeLayer(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinFurthestPointSamplingWithRadiusCompositeLayer::MakeFurthestPointSamplingWithRadiusCompositeLayer(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0,std::allocator<ZinFurthestPointSamplingWithRadiusCompositeLayer::MakeFurthestPointSamplingWithRadiusCompositeLayer(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void ZinConvCompositeLayer::ZinConvCompositeLayer(ZinConvCompositeLayer *this, const ZinDeQuantLayer *a2, const ZinConvLayer *a3, const ZinGOCLayer *a4, const ZinActivationLayer *a5)
{
  uint64_t v10;
  const ZinConvLayer *v11;
  const ZinActivationLayer *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  size_t v17;
  std::string *v18;
  char *v19;
  std::string *v20;
  __int128 v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  ZinIrKernel *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  ZinIrKernel *v32;
  std::string v33;
  void *v34[2];
  int64_t v35;
  std::string v36;
  void *__p[2];
  std::string::size_type v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;

  v10 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v10, 24);
  v41 = v10;
  if (a4)
    v11 = a4;
  else
    v11 = a3;
  if (a5)
    v12 = a5;
  else
    v12 = v11;
  v13 = (uint64_t *)(*(uint64_t (**)(const ZinActivationLayer *, _QWORD, _QWORD))(*(_QWORD *)v12 + 40))(v12, 0, 0);
  v14 = v13[1];
  v39 = *v13;
  v40 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (*((char *)a3 + 47) >= 0)
    v17 = *((unsigned __int8 *)a3 + 47);
  else
    v17 = *((_QWORD *)a3 + 4);
  v18 = &v36;
  std::string::basic_string[abi:ne180100]((uint64_t)&v36, v17 + 1);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = (std::string *)v36.__r_.__value_.__r.__words[0];
  if (v17)
  {
    if (*((char *)a3 + 47) >= 0)
      v19 = (char *)a3 + 24;
    else
      v19 = (char *)*((_QWORD *)a3 + 3);
    memmove(v18, v19, v17);
  }
  *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v33, "comp_conv");
  v20 = std::string::append(&v33, "_xfm", 4uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v35 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)v34 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (v35 >= 0)
    v22 = v34;
  else
    v22 = (void **)v34[0];
  if (v35 >= 0)
    v23 = HIBYTE(v35);
  else
    v23 = (std::string::size_type)v34[1];
  v24 = std::string::append(&v36, (const std::string::value_type *)v22, v23);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v38 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v32 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)this, &v41, &v39, (__int128 *)__p, &v32);
  v26 = v32;
  v32 = 0;
  if (v26)
  {
    ZinIrKernel::~ZinIrKernel(v26);
    MEMORY[0x20BD002F8](v27);
  }
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v35) < 0)
    operator delete(v34[0]);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  v28 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v41;
  v41 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  *(_QWORD *)this = &off_24C020300;
  *((_QWORD *)this + 24) = a2;
  *((_QWORD *)this + 25) = a3;
  *((_QWORD *)this + 26) = a4;
  *((_QWORD *)this + 27) = a5;
}

void sub_206DF817C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v35;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)&a9, 0);
  if (a33 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v33 - 88);
  v35 = *(_QWORD *)(v33 - 72);
  *(_QWORD *)(v33 - 72) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  _Unwind_Resume(a1);
}

uint64_t ZinConvCompositeLayer::Lower(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  const ZinIrHalParameters *v7;

  if (ZinConvLayer::IsDilated(*(ZinConvLayer **)(a1 + 200)))
    return ZinMirDilatedConv::LowerDilatedConvolution(a2, *a3, (uint64_t *)a1);
  if (!ZinConvLayer::HasLargeKernelStrides(*(ZinConvLayer **)(a1 + 200)))
    return 3;
  if (*(_BYTE *)((*a3)[1] + 492))
    ZinAssertImpl("Dynamic Shape does not support conv with input or output stride larger than 2");
  return HandleLargeKernelStrides((ZinConvLargeStrides *)a1, a2, (ZinIrOpLayerGraph *)**a3, v7);
}

uint64_t ZinConvCompositeLayer::MatchGOC(uint64_t *a1)
{
  _QWORD *v2;
  __int16 v3;
  unsigned __int8 v4;
  int v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  __int16 v20;
  void *__p;
  void *v22;
  char v23;
  void *v24[2];
  char v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;

  v2 = (_QWORD *)a1[1];
  if (*(_DWORD *)(v2[8] + 8) == 2 && !(*(unsigned int (**)(_QWORD *))(*v2 + 120))(v2))
  {
    v7 = a1[1];
    v8 = (_QWORD *)a1[3];
    std::string::basic_string[abi:ne180100]<0>(v24, "goc");
    ZinPattern::State::GetMatch(v8, (unsigned __int8 *)v24, &__p);
    ZinPatternUtils::ToGOC((uint64_t **)&__p, &v26);
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
    if (v25 < 0)
      operator delete(v24[0]);
    v9 = v27;
    if ((unint64_t)v27 >= v28)
    {
      v11 = v27 - v26;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v12 = (uint64_t)(v28 - (_QWORD)v26) >> 2;
      if (v12 <= v11 + 1)
        v12 = v11 + 1;
      if (v28 - (unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v28, v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v11];
      v16 = &v14[8 * v13];
      *v15 = v7;
      v10 = v15 + 1;
      v18 = v26;
      v17 = v27;
      if (v27 != v26)
      {
        do
        {
          v19 = *--v17;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = v26;
      }
      v26 = v15;
      v27 = v10;
      v28 = (unint64_t)v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v27 = v7;
      v10 = v9 + 1;
    }
    v27 = v10;
    ZinObjectNameFactory::ZinObjectNameFactory(&__p, v7 + 24);
    if (ZinMergeGOCSequence(*a1, (uint64_t)&__p, (uint64_t)&v26))
    {
      v4 = 1;
      v5 = 1;
    }
    else
    {
      v20 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
      v4 = v20;
      v5 = HIBYTE(v20);
    }
    __p = off_24C01FBB0;
    if (v23 < 0)
      operator delete(v22);
    if (v26)
    {
      v27 = v26;
      operator delete(v26);
    }
  }
  else
  {
    v3 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    v4 = v3;
    v5 = HIBYTE(v3);
  }
  return v4 | (v5 << 8);
}

void sub_206DF84C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  void *v25;

  v25 = *(void **)(v23 - 56);
  if (v25)
  {
    *(_QWORD *)(v23 - 48) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinConvCompositeLayer::MatchActivation(uint64_t a1)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8);
  LOBYTE(a1) = 1;
  if (v1 == 4)
  {
    v2 = 1;
  }
  else
  {
    LOWORD(a1) = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    v2 = BYTE1(a1);
  }
  return a1 | (v2 << 8);
}

uint64_t ZinConvCompositeLayer::Clone()
{
  return 0;
}

ZinIrKernel **ZinConvCompositeLayer::CreateDecomposedPartition(uint64_t a1, ZinIrKernel **a2, ZinIrKernel **a3, unint64_t a4, char a5, __int128 *a6, uint64_t a7, uint64_t **a8, const ZinConvLayer *a9, uint64_t a10)
{
  _OWORD *v14;
  ZinIrKernel **v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  int v19;
  ZinIrTensor *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  ZinIrTensor::MirInfo *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  ZinIrKernel *v31;
  ZinIrKernel *v32;
  uint64_t *v33;
  BOOL v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  ZinPatternUtils **v38;
  ZinIrOpLayer *v39;
  ZinIrOpLayer *v40;
  BOOL v41;
  char v42;
  const char *v44;
  char *__format;
  uint64_t v46;
  ZinDeQuantLayer *v49;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  ZinIrTensor::MirInfo *v56;
  void *__p[2];
  char v58;
  void *v59[2];
  __int128 v60;
  int v61;
  _QWORD *v62;
  std::__shared_weak_count *v63;
  ZinIrOpLayer *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v14 = operator new(0x20uLL);
  v15 = 0;
  v49 = 0;
  v16 = 0;
  v17 = *(_OWORD *)(a1 + 208);
  *v14 = *(_OWORD *)(a1 + 192);
  v14[1] = v17;
  v53 = v14;
  __format = "Failed to set interleave";
  v46 = a1;
  do
  {
    v18 = (_QWORD *)v53[v16];
    if (!v18)
      goto LABEL_39;
    v19 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*v18 + 32))(v53[v16], 0, 0) + 88);
    (*(void (**)(void **__return_ptr, const ZinConvLayer *, _QWORD))(*(_QWORD *)a9 + 16))(__p, a9, 0);
    v20 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v18 + 32))(v18, 0, 0);
    ZinIrTensor::CopyTensorMirInfo(v20, &v56);
    v62 = 0;
    v63 = 0;
    LODWORD(v59[0]) = 0;
    v60 = 0uLL;
    v59[1] = 0;
    v61 = 0;
    ZinIrTensor::CreateTensor(a7, v19, a6, (__int128 *)__p, &v56, (uint64_t *)&v62, (unsigned int *)v59, (uint64_t *)&v64);
    v21 = v63;
    if (v63)
    {
      p_shared_owners = (unint64_t *)&v63->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v56;
    v56 = 0;
    if (v24)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v56, v24);
    if (v58 < 0)
      operator delete(__p[0]);
    v54 = (uint64_t)v64;
    v55 = v65;
    if (v65)
    {
      v25 = (unint64_t *)&v65->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    (*(void (**)(void **__return_ptr, const ZinConvLayer *, uint64_t))(*(_QWORD *)a9 + 16))(v59, a9, 1);
    v15 = (ZinIrKernel **)(*(uint64_t (**)(_QWORD *, uint64_t *, void **))(*v18 + 176))(v18, &v54, v59);
    if (SBYTE7(v60) < 0)
      operator delete(v59[0]);
    v27 = v55;
    if (v55)
    {
      v28 = (unint64_t *)&v55->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = *(_DWORD *)(v18[8] + 8);
    if (v30)
      goto LABEL_25;
    v31 = *a2;
    v49 = (ZinDeQuantLayer *)v15;
    if (*a2)
    {
      *a2 = 0;
      std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](v15 + 17, v31);
      v30 = *(_DWORD *)(v18[8] + 8);
      v49 = (ZinDeQuantLayer *)v15;
LABEL_25:
      if (v30 == 2)
      {
        v32 = *a3;
        if (*a3)
        {
          *a3 = 0;
          std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](v15 + 17, v32);
        }
      }
    }
    v33 = (uint64_t *)(*((uint64_t (**)(ZinIrKernel **, _QWORD, _QWORD))*v15 + 4))(v15, 0, 0);
    if (ZinIrTensor::SetInterleave(v33, a4, a5, 1))
      goto LABEL_57;
    v62 = v18;
    __p[0] = &v62;
    __p[1] = (void *)1;
    Layer2TDMapper::SourceLayer::SourceLayer(v59, __p);
    v34 = ZinIrOpLayerGraph::AddNode(a8, (ZinIrOpLayer *)v15, (ZinIrOpLayer ***)v59);
    v59[0] = &unk_24C02BB18;
    if (v59[1])
    {
      *(void **)&v60 = v59[1];
      operator delete(v59[1]);
    }
    if (!v34)
    {
      v44 = "Failed to AddNode";
LABEL_56:
      __format = (char *)v44;
LABEL_57:
      ZinAssertImpl(__format);
    }
    if (!ZinIrOpLayerGraph::AddEdge((uint64_t)a8, a10, (uint64_t)v15, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0))
    {
      v44 = "Failed to AddEdge";
      goto LABEL_56;
    }
    v35 = v65;
    if (v65)
    {
      v36 = (unint64_t *)&v65->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    a10 = (uint64_t)v15;
LABEL_39:
    ++v16;
  }
  while (v16 != 4);
  if (*(_QWORD *)(v46 + 192))
  {
    if (!v49)
      ZinAssertImpl("Expected non-null decomposed conv");
    v38 = (ZinPatternUtils **)*((_QWORD *)v49 + 11);
    v39 = *v38;
    if (!*v38)
      ZinAssertImpl("Expected non-null decomposed dequant");
    v40 = (ZinIrOpLayer *)ZinPatternUtils::ConvertDequantToPostConvGOC(*v38, v49, a9, (ZinObjectNameFactory *)1);
    if (!v40)
      ZinAssertImpl("Failed to ConvertDequantToPostConvGOC during convComposite lowering");
    v64 = v39;
    __p[0] = &v64;
    __p[1] = (void *)1;
    Layer2TDMapper::SourceLayer::SourceLayer(v59, __p);
    v41 = ZinIrOpLayerGraph::AddNode(a8, v40, (ZinIrOpLayer ***)v59);
    v59[0] = &unk_24C02BB18;
    if (v59[1])
    {
      *(void **)&v60 = v59[1];
      operator delete(v59[1]);
    }
    if (!v41)
      ZinAssertImpl("Failed to add dequant_as_goc");
    if (!ZinIrOpLayerGraph::MoveIncomingEdges((ZinIrOpLayerGraph *)a8, v39, v49))
      ZinAssertImpl("Failed to MoveIncomingEdges in CreateDecomposedPartition");
    if (!ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a8, v39, 0))
      ZinAssertImpl("Failed to remove dequant");
    *(_OWORD *)v59 = 0u;
    v60 = 0u;
    v61 = 1065353216;
    v42 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a8, (uint64_t **)v49, v40, v59);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v59);
    if ((v42 & 1) == 0)
      ZinAssertImpl("Failed to MoveOutgoingEdges in CreateDecomposedPartition");
    if ((ZinIrOpLayerGraph::AddEdge((uint64_t)a8, (uint64_t)v49, (uint64_t)v40, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)ZinAssertImpl("Failed to AddEdge in CreateDecomposedPartition");
    if (!*((_DWORD *)v15[8] + 2))
      v15 = (ZinIrKernel **)v40;
  }
  operator delete(v53);
  return v15;
}

void sub_206DF8AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,void *a29,uint64_t a30)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a28);
  operator delete(__p);
  _Unwind_Resume(a1);
}

ZinIrKernel *ZinConvCompositeLayer::GetDequantizedPadInfo(ZinIrKernel *this, ZinIrPadUnitInfo *a2)
{
  ZinDeQuantLayer *v2;
  uint64_t v9;
  uint64_t i;

  v2 = (ZinDeQuantLayer *)*((_QWORD *)this + 24);
  if (v2)
  {
    this = ZinDeQuantLayer::HasZeroPoint(*((ZinDeQuantLayer **)this + 24));
    if ((_DWORD)this)
    {
      if ((ZinDeQuantLayer::HasScalarZeroPoint(v2) & 1) == 0)
        ZinAssertImpl("Expected scalar zero_point");
      this = ZinDeQuantLayer::GetScalarZeroPoint(v2);
      _S0 = (float)(int)this;
      __asm { FCVT            H0, S0 }
      *((_WORD *)a2 + 112) = LOWORD(_S0);
      v9 = *((_QWORD *)a2 + 25);
      for (i = *((_QWORD *)a2 + 26); v9 != i; v9 += 8)
      {
        if (*(_DWORD *)(v9 + 4) != 1)
          ZinAssertImpl("Expected zero padding");
        *(_DWORD *)(v9 + 4) = 9;
      }
    }
  }
  return this;
}

void ZinConvCompositeLayer::~ZinConvCompositeLayer(ZinConvCompositeLayer *this)
{
  ZinIrOpLayer::~ZinIrOpLayer(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t ZinIrCrossCorrelationUnit::ZinIrCrossCorrelationUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v6;
  int v7;
  __int128 v8;
  __int128 v9;

  v5 = ZinIrUnit::ZinIrUnit((_QWORD *)a1, a3);
  *v5 = &off_24C023430;
  v5[7] = off_24C017CA0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    v5[10] = *(_QWORD *)(a2 + 24);
    *((_OWORD *)v5 + 4) = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 96), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = &unk_24C024F18;
  v8 = *(_OWORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 152) = v9;
  *(_OWORD *)(a1 + 136) = v8;
  return a1;
}

void sub_206DF8D54(_Unwind_Exception *a1)
{
  ZinIrUnit *v1;

  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

void ZinIrCrossCorrelationUnit::CreateOpcode(ZinIrCrossCorrelationUnit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = operator new();
  ZinIrCrossCorrelationInfo::ZinIrCrossCorrelationInfo((ZinIrCrossCorrelationInfo *)v5);
  *(_OWORD *)(v5 + 12) = *((_OWORD *)this + 9);
  v6 = *((int *)this + 42);
  *(_QWORD *)(v5 + 32) = *((int *)this + 43);
  *(_QWORD *)(v5 + 40) = v6;
  v8 = *((_QWORD *)this + 16);
  v7 = *((_QWORD *)this + 17);
  *(_QWORD *)(v5 + 48) = v7;
  if (v8 == -1)
  {
    v8 = *(_QWORD *)(*((_QWORD *)this + 1) + 136);
    if (v7 == v8 && v7 > 1)
      v8 = v7;
  }
  *(_QWORD *)(v5 + 56) = v8;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v5;
}

void sub_206DF8E0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x1081C4013A145ACLL);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCrossCorrelationUnit::TensorDimensions(ZinIrCrossCorrelationUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, CFArrayRef *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) - (_QWORD)v4 == 240)
  {
    *(_QWORD *)a3 = v4[1];
    v5 = *((_QWORD *)this + 16);
    if (v5 == -1)
    {
      v6 = *((_QWORD *)this + 17);
      v5 = v4[17];
      if (v6 == v5 && v6 > 1)
        v5 = *((_QWORD *)this + 17);
    }
    v8 = 0;
    v9 = v4[4];
    v10 = *((int *)this + 42);
    v11 = v4[3] + *((int *)this + 38) + (uint64_t)*((int *)this + 39) - *((int *)this + 43) + 1;
    *((_QWORD *)a3 + 1) = v5;
    *((_QWORD *)a3 + 2) = v11;
    v12 = v4[5];
    *((_QWORD *)a3 + 3) = v9 + *((int *)this + 36) + (uint64_t)*((int *)this + 37) - v10 + 1;
    *((_QWORD *)a3 + 4) = v12;
  }
  else
  {
    ZinIrUnitStatus::SetError(a4, CFSTR("InvalidBottomCount"));
    return 3;
  }
  return v8;
}

uint64_t ZinIrCrossCorrelationUnit::CreateLayer(ZinIrCrossCorrelationUnit *a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  int v19;
  uint64_t v20;

  ZinIrCrossCorrelationUnit::CreateOpcode(a1, (uint64_t)&v19);
  if (v19)
  {
    v7 = 0;
  }
  else
  {
    v8 = operator new();
    v7 = v8;
    v9 = (std::__shared_weak_count *)(*a3)[1];
    v17 = **a3;
    v18 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    ZinCrossCorrelationLayer::ZinCrossCorrelationLayer(v8, &v20, &v17, (char *)a1 + 64, a4);
    v12 = v18;
    if (v18)
    {
      v13 = (unint64_t *)&v18->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    ZinIrOpLayer::ValidateSemantics(v7);
  }
  v15 = v20;
  v20 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return v7;
}

void sub_206DF8FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void ZinIrCrossCorrelationUnit::~ZinIrCrossCorrelationUnit(void **this)
{
  *this = &off_24C023430;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
}

{
  *this = &off_24C023430;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
  JUMPOUT(0x20BD002F8);
}

double GetLogicalInputAndOutputSteps@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  double result;

  v2 = (_QWORD *)(a1 + 292);
  if ((*(_DWORD *)(a1 + 240) - 3) > 1)
  {
    *(_QWORD *)a2 = *v2;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 300);
    *(_QWORD *)&result = 0x100000001;
    *(_QWORD *)(a2 + 12) = 0x100000001;
    *(_DWORD *)(a2 + 20) = 1;
  }
  else
  {
    *(_QWORD *)&result = 0x100000001;
    *(_QWORD *)a2 = 0x100000001;
    *(_DWORD *)(a2 + 8) = 1;
    *(_QWORD *)(a2 + 12) = *v2;
    *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 300);
  }
  return result;
}

uint64_t ZinMirPETensorConstraint::Execute(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v7 = a3;
  v8[0] = &off_24C0019D0;
  v8[1] = a2;
  v8[2] = &v7;
  v9 = v8;
  v3 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v8, 1);
  v4 = v9;
  if (v9 == v8)
  {
    v5 = 4;
    v4 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void sub_206DF91B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C0019D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C0019D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t ***a2, ZinIrOpLayer **a3)
{
  uint64_t **v4;
  ZinIrOpLayer *v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  ZinEngineLayerMirInfo *v9;
  uint64_t v10;
  ZinEngineLayerMirInfo *v11;
  ZinEngineLayerMirInfo *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  uint64_t *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t i;
  int v30;
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  ZinIrTensor *RootTensor;
  uint64_t v41;
  ZinIrTensor *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  size_t v46;
  std::string *v47;
  const void *v48;
  std::string *v49;
  std::string *v50;
  __int128 v51;
  const std::string::value_type *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  ZinIrOpLayer *v58;
  _QWORD *v59;
  ZinIrOpLayer *v60;
  unint64_t IndexOfMatchedOutgoingLayer;
  ZinIrTensor *v62;
  int v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  ZinIrTensor *v67;
  ZinIrTensor *v68;
  ZinIrTensor *v69;
  uint64_t v70;
  uint64_t v71;
  _BOOL4 v72;
  uint64_t Interleave;
  char v74;
  char v75;
  uint64_t v76;
  char v77;
  BOOL v78;
  char v79;
  int v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  size_t v89;
  std::string *v90;
  const void *v91;
  std::string *v92;
  std::string *v93;
  __int128 v94;
  const std::string::value_type *v95;
  std::string::size_type v96;
  std::string *v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  ZinIrOpLayer *v102;
  _QWORD *v103;
  unint64_t IndexOfMatchedIncomingLayer;
  ZinIrTensor *v105;
  int v106;
  uint64_t v107;
  int64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  uint64_t v113;
  ZinIrTensor *v114;
  char *j;
  _BOOL4 v116;
  uint64_t v117;
  uint64_t v118;
  ZinIrTensor **k;
  std::string::size_type size;
  uint64_t v121;
  char v122;
  uint64_t v123;
  std::string::size_type v124;
  std::string::size_type v125;
  void *v126;
  uint64_t v127;
  unint64_t v128;
  int64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t *v132;
  uint64_t v133;
  ZinIrTensor *v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  std::string::size_type v138;
  std::string::size_type v139;
  unint64_t v140;
  uint64_t v141;
  ZinIrTensor *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  ZinIrTensor *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  ZinIrOpLayerGraph *v154;
  const ZinIrOpLayer *v155;
  int v156;
  size_t v157;
  std::string *v158;
  const void *v159;
  std::string *v160;
  std::string *v161;
  __int128 v162;
  std::string *v163;
  std::string::size_type v164;
  std::string *v165;
  __int128 v166;
  __n128 v167;
  uint64_t v168;
  _QWORD *v169;
  int v170;
  ZinIrOpLayer *v171;
  unint64_t v172;
  _QWORD *v173;
  _BOOL4 v174;
  int v175;
  ZinIrTensor *v176;
  int v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  ZinIrTensor *v181;
  void *v182;
  char *v183;
  std::string v184;
  void *__p;
  void *v186;
  char v187;
  unint64_t v188;
  ZinEngineLayerMirInfo *v189[2];
  uint64_t v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  __int16 v202;
  __int128 v203;
  char v204;
  __int128 v205;
  _BYTE v206[32];
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  int v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  char v215;
  uint64_t v216;
  int v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  char v221;
  uint64_t v222;
  int v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  char v227;
  uint64_t v228;
  int v229;
  _BYTE v230[32];
  int v231;
  int v232;
  _BYTE v233[32];
  int v234;
  int v235;
  _BYTE v236[32];
  int v237;
  std::string v238;
  ZinIrOpLayer *v239;
  unint64_t *v240;
  uint64_t v241;
  __int128 v242;
  int64_t v243;
  uint64_t v244;

  v244 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *a3;
  result = ZinIrOpLayer::IsPELayer(*a3);
  if ((_DWORD)result)
  {
    if (!ZinIrOpLayer::IsNELayer(v5))
    {
      v7 = (_QWORD *)*((_QWORD *)v5 + 11);
      if (*((_QWORD *)v5 + 12) - (_QWORD)v7 >= 0x10uLL)
      {
        v22 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v7 + 32))(*v7, 0, 0);
        v23 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)v5 + 11) + 8) + 32))(*(_QWORD *)(*((_QWORD *)v5 + 11) + 8), 0, 0);
        if (*(_BYTE *)(v22 + 164) || *(_BYTE *)(v23 + 164))
        {
          v24 = (_QWORD *)*((_QWORD *)v5 + 11);
          if (*((_QWORD *)v5 + 12) - (_QWORD)v24 >= 0x10uLL)
          {
            v25 = **(_QWORD **)(a1 + 8);
            v26 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v24 + 32))(*v24, 0, 0);
            v27 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)v5 + 11) + 8) + 32))(*(_QWORD *)(*((_QWORD *)v5 + 11) + 8), 0, 0);
            v28 = v27;
            if (*(_BYTE *)(v26 + 164))
            {
              if (*(_BYTE *)(v25 + 1252))
              {
                if (!*(_BYTE *)(v27 + 164))
                  return 0;
                goto LABEL_117;
              }
              if (*(_BYTE *)(v27 + 164))
              {
LABEL_117:
                v83 = *(_QWORD *)(v26 + 64);
                v180 = *(_QWORD *)(v26 + 56);
                v84 = *(_QWORD *)(v26 + 72);
                __p = 0;
                ZinTensorFormatGetSize(*(_DWORD *)(v26 + 88), &__p);
                v85 = ZinAlignPower2((_QWORD)__p * v84, *(_QWORD *)(v25 + 416));
                v87 = *(_QWORD *)(v28 + 56);
                v86 = *(_QWORD *)(v28 + 64);
                v88 = *(_QWORD *)(v28 + 72);
                v184.__r_.__value_.__r.__words[0] = 0;
                ZinTensorFormatGetSize(*(_DWORD *)(v28 + 88), &v184);
                if (v83 * v180 * v85 <= (unint64_t)(v86
                                                          * v87
                                                          * ZinAlignPower2(v184.__r_.__value_.__r.__words[0] * v88, *(_QWORD *)(v25 + 416))))v28 = v26;
LABEL_119:
                if (*((char *)v5 + 47) >= 0)
                  v89 = *((unsigned __int8 *)v5 + 47);
                else
                  v89 = *((_QWORD *)v5 + 4);
                v90 = &v238;
                std::string::basic_string[abi:ne180100]((uint64_t)&v238, v89 + 1);
                if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v90 = (std::string *)v238.__r_.__value_.__r.__words[0];
                if (v89)
                {
                  if (*((char *)v5 + 47) >= 0)
                    v91 = (char *)v5 + 24;
                  else
                    v91 = (const void *)*((_QWORD *)v5 + 3);
                  memmove(v90, v91, v89);
                }
                *(_WORD *)((char *)&v90->__r_.__value_.__l.__data_ + v89) = 95;
                v92 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v239, "decompress");
                v93 = std::string::append(v92, "_xfm", 4uLL);
                v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
                v243 = v93->__r_.__value_.__r.__words[2];
                v242 = v94;
                v93->__r_.__value_.__l.__size_ = 0;
                v93->__r_.__value_.__r.__words[2] = 0;
                v93->__r_.__value_.__r.__words[0] = 0;
                if (v243 >= 0)
                  v95 = (const std::string::value_type *)&v242;
                else
                  v95 = (const std::string::value_type *)v242;
                if (v243 >= 0)
                  v96 = HIBYTE(v243);
                else
                  v96 = *((_QWORD *)&v242 + 1);
                v97 = std::string::append(&v238, v95, v96);
                v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
                v184.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v98;
                v97->__r_.__value_.__l.__size_ = 0;
                v97->__r_.__value_.__r.__words[2] = 0;
                v97->__r_.__value_.__r.__words[0] = 0;
                ZinObjectNameFactory::ZinObjectNameFactory(&__p, &v184);
                if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v184.__r_.__value_.__l.__data_);
                if (SHIBYTE(v243) < 0)
                  operator delete((void *)v242);
                if (SHIBYTE(v241) < 0)
                  operator delete(v239);
                if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v238.__r_.__value_.__l.__data_);
                v99 = *(_QWORD *)(v28 + 96);
                v100 = *(_QWORD *)(v99 + 16);
                v101 = *(_DWORD *)(v28 + 88);
                v182 = 0;
                LOBYTE(v189[0]) = 0;
                v206[0] = 0;
                v102 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v100, (uint64_t)&__p, v99, v101, &v182, 0, (uint64_t)v189, 1.0);
                v103 = v182;
                v182 = 0;
                if (v103)
                  std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v182, v103);
                *(_QWORD *)&v242 = v5;
                v238.__r_.__value_.__r.__words[0] = (std::string::size_type)&v242;
                v238.__r_.__value_.__l.__size_ = 1;
                Layer2TDMapper::SourceLayer::SourceLayer(&v184, &v238);
                ZinIrOpLayerGraph::AddNode(v4, v102, (ZinIrOpLayer ***)&v184);
                v184.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
                if (v184.__r_.__value_.__l.__size_)
                {
                  v184.__r_.__value_.__r.__words[2] = v184.__r_.__value_.__l.__size_;
                  operator delete((void *)v184.__r_.__value_.__l.__size_);
                }
                ZinIrOpLayerGraph::AddEdge((uint64_t)v4, v99, (uint64_t)v102, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
                IndexOfMatchedIncomingLayer = ZinIrOpLayerGraph::GetIndexOfMatchedIncomingLayer((ZinIrOpLayerGraph *)v4, v5, *(const ZinIrOpLayer **)(v28 + 96));
                ZinIrOpLayerGraph::SwapEdgeSource((uint64_t)v4, *(ZinIrOpLayerGraph **)(v28 + 96), v102, (uint64_t)v5, 0xFFFFFFFFFFFFFFFFLL, IndexOfMatchedIncomingLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
                v105 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v102 + 32))(v102, 0, 0);
                v106 = ZinIrTensor::SetAllocationHint(v105, 1, 1);
                __p = off_24C01FBB0;
                if (v187 < 0)
                  operator delete(v186);
                if (!v106)
                  return 0;
                goto LABEL_170;
              }
              v117 = *(_QWORD *)(v27 + 104);
              if (v117 && *(_DWORD *)(v117 + 96) == 2)
                goto LABEL_119;
            }
            else
            {
              if (*(_BYTE *)(v27 + 164))
                v81 = *(_BYTE *)(v25 + 1252) == 0;
              else
                v81 = 0;
              if (!v81)
                return 0;
              v82 = *(_QWORD *)(v26 + 104);
              if (v82 && *(_DWORD *)(v82 + 96) == 2)
              {
                v28 = v26;
                goto LABEL_119;
              }
              v27 = v26;
            }
            if (ZinIrTensor::SetAllocationHint((ZinIrTensor *)v27, 1, 1))
            {
LABEL_170:
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                std::__function::__func<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()();
              return 3;
            }
          }
          return 0;
        }
      }
    }
    if (!*((_QWORD *)v5 + 33))
    {
      v8 = **(_QWORD **)(a1 + 8);
      v9 = (ZinEngineLayerMirInfo *)operator new();
      ZinEngineLayerMirInfo::ZinEngineLayerMirInfo(v9, *(int *)(v8 + 8));
      v189[0] = v9;
      *((_QWORD *)v9 + 13) = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0)+ 48);
      *((_QWORD *)v189[0] + 10) = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v5 + 360))(v5, 2);
      v10 = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v5 + 368))(v5, 2);
      v11 = v189[0];
      *((_QWORD *)v189[0] + 11) = v10;
      ZinMirL2Config::ZinMirSetFormats((ZinEngineLayerMirInfo *)((char *)v11 + 120), v5);
      ZinANELayer::SetMirInfo((uint64_t)v5, (int **)v189);
      v12 = v189[0];
      v189[0] = 0;
      if (v12)
      {
        ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v12);
        MEMORY[0x20BD002F8]();
      }
    }
    v13 = **(_QWORD **)(a1 + 8);
    if (*(_BYTE *)(v13 + 1265))
    {
      v15 = *((_QWORD *)v5 + 11);
      v14 = *((_QWORD *)v5 + 12);
      goto LABEL_30;
    }
    v16 = (_QWORD **)((char *)v5 + 88);
    v17 = (uint64_t *)((char *)v5 + 96);
    if (*((_QWORD *)v5 + 12) == *((_QWORD *)v5 + 11))
      goto LABEL_46;
    v18 = 0;
    while (1)
    {
      LODWORD(v189[0]) = 0;
      if (!ZinMemSourceIndexTranslator::GetL2SrcType(v5, v18, (int *)v189))
      {
        v19 = (int)v189[0];
        if (LODWORD(v189[0]))
          goto LABEL_19;
        if (!(*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)v5 + 656))(v5))
        {
          v19 = (int)v189[0];
LABEL_19:
          if (v19 != 1)
            goto LABEL_12;
          if (!(*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)v5 + 664))(v5))
            goto LABEL_12;
          v21 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v5 + 832))(v5);
          if (!ZinIrBroadcastInfo::HasDimension(v21, 3))
            goto LABEL_12;
LABEL_22:
          ZinEngineLayerMirInfo::SetNeedInputDMACached(*((_QWORD *)v5 + 33), (int)v189[0], 1);
          goto LABEL_12;
        }
        v20 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v5 + 696))(v5);
        if (ZinIrBroadcastInfo::HasDimension(*(_QWORD *)(v20 + 64), 3))
          goto LABEL_22;
      }
LABEL_12:
      ++v18;
      v14 = *v17;
      v15 = (uint64_t)*v16;
      if (v18 >= (*v17 - (uint64_t)*v16) >> 3)
      {
        v13 = **(_QWORD **)(a1 + 8);
LABEL_30:
        v16 = (_QWORD **)((char *)v5 + 88);
        v17 = (uint64_t *)((char *)v5 + 96);
        if (v14 != v15)
        {
          for (i = 0; i < (*v17 - (uint64_t)*v16) >> 3; ++i)
          {
            LODWORD(v189[0]) = 0;
            if (!ZinMemSourceIndexTranslator::GetL2SrcType(v5, i, (int *)v189))
            {
              v30 = (int)v189[0];
              if (LODWORD(v189[0]))
                goto LABEL_40;
              if (((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v5 + 640))(v5) & 1) == 0)
              {
                v30 = (int)v189[0];
LABEL_40:
                if (v30 != 1)
                  continue;
                v31 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v5 + 648))(v5);
                v32 = *(_BYTE *)(v13 + 1266) ? 0 : v31;
                if ((v32 & 1) == 0)
                  continue;
LABEL_45:
                ZinEngineLayerMirInfo::SetNeedInputDMACached(*((_QWORD *)v5 + 33), (int)v189[0], 1);
                continue;
              }
              if (!*(_BYTE *)(v13 + 1266))
                goto LABEL_45;
            }
          }
        }
LABEL_46:
        v33 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v5 + 408))(v5);
        if (*(_BYTE *)(v13 + 1266))
          v34 = 0;
        else
          v34 = v33;
        if ((v34 & 1) != 0)
          *(_BYTE *)(*((_QWORD *)v5 + 33) + 1642) = 1;
        if (*((_QWORD *)v5 + 25) && *((_QWORD *)v5 + 24) <= 1uLL)
        {
          if ((unint64_t)(*v17 - (_QWORD)*v16) < 0x10)
            return 0;
          v35 = **(_QWORD **)(a1 + 8);
          (*(void (**)(void **__return_ptr, ZinIrOpLayer *))(*(_QWORD *)v5 + 528))(&__p, v5);
          v36 = *(_QWORD *)__p;
          v186 = __p;
          operator delete(__p);
          v37 = *(_QWORD *)(*((_QWORD *)v5 + 11) + 8 * v36);
          v38 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v37 + 32))(v37, 0, 0);
          if (*((_QWORD *)v5 + 12) - *((_QWORD *)v5 + 11) == 16
            && ((*(uint64_t (**)(_QWORD))(**((_QWORD **)v5 + 25) + 304))(*((_QWORD *)v5 + 25)) & 1) != 0)
          {
            return 0;
          }
          v39 = *(_QWORD *)(v38 + 104);
          if (v39)
          {
            if (*(_DWORD *)(v39 + 96) == 1)
              return 0;
          }
          RootTensor = ZinIrTensor::GetRootTensor((ZinIrTensor *)v38);
          v41 = *(_QWORD *)(v38 + 104);
          if (v41 && *(_DWORD *)(v41 + 96) == 2)
            goto LABEL_64;
          v42 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0);
          if (RootTensor == ZinIrTensor::GetRootTensor(v42))
          {
            ZinIrTensor::GetDimensionOrderHint((ZinIrTensor *)v38, (uint64_t)&__p);
            ZinIrTensor::GetTensorSizeInBytesFromResidency(RootTensor, 1, (uint64_t)&__p, 0);
            v44 = v43;
            if (__p)
            {
              v186 = __p;
              operator delete(__p);
            }
            if (v44 > *(_QWORD *)(v35 + 408))
            {
LABEL_64:
              v45 = *(_QWORD *)(v38 + 96);
              if (*((char *)v5 + 47) >= 0)
                v46 = *((unsigned __int8 *)v5 + 47);
              else
                v46 = *((_QWORD *)v5 + 4);
              v47 = &v238;
              std::string::basic_string[abi:ne180100]((uint64_t)&v238, v46 + 1);
              if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v47 = (std::string *)v238.__r_.__value_.__r.__words[0];
              if (v46)
              {
                if (*((char *)v5 + 47) >= 0)
                  v48 = (char *)v5 + 24;
                else
                  v48 = (const void *)*((_QWORD *)v5 + 3);
                memmove(v47, v48, v46);
              }
              *(_WORD *)((char *)&v47->__r_.__value_.__l.__data_ + v46) = 95;
              v49 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v239, "tex_dram_l2");
              v50 = std::string::append(v49, "_xfm", 4uLL);
              v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
              v243 = v50->__r_.__value_.__r.__words[2];
              v242 = v51;
              v50->__r_.__value_.__l.__size_ = 0;
              v50->__r_.__value_.__r.__words[2] = 0;
              v50->__r_.__value_.__r.__words[0] = 0;
              if (v243 >= 0)
                v52 = (const std::string::value_type *)&v242;
              else
                v52 = (const std::string::value_type *)v242;
              if (v243 >= 0)
                v53 = HIBYTE(v243);
              else
                v53 = *((_QWORD *)&v242 + 1);
              v54 = std::string::append(&v238, v52, v53);
              v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
              v184.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v55;
              v54->__r_.__value_.__l.__size_ = 0;
              v54->__r_.__value_.__r.__words[2] = 0;
              v54->__r_.__value_.__r.__words[0] = 0;
              ZinObjectNameFactory::ZinObjectNameFactory(&__p, &v184);
              if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v184.__r_.__value_.__l.__data_);
              if (SHIBYTE(v243) < 0)
                operator delete((void *)v242);
              if (SHIBYTE(v241) < 0)
                operator delete(v239);
              if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v238.__r_.__value_.__l.__data_);
              v56 = *(_QWORD *)(v45 + 16);
              v57 = *(_DWORD *)(v38 + 88);
              v182 = 0;
              LOBYTE(v189[0]) = 0;
              v206[0] = 0;
              v58 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v56, (uint64_t)&__p, v45, v57, &v182, 0, (uint64_t)v189, 1.0);
              v59 = v182;
              v182 = 0;
              if (v59)
                std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v182, v59);
              *((_BYTE *)v58 + 440) = 1;
              *(_QWORD *)&v242 = v5;
              v238.__r_.__value_.__r.__words[0] = (std::string::size_type)&v242;
              v238.__r_.__value_.__l.__size_ = 1;
              Layer2TDMapper::SourceLayer::SourceLayer(&v184, &v238);
              ZinIrOpLayerGraph::AddNode(v4, v58, (ZinIrOpLayer ***)&v184);
              v184.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
              if (v184.__r_.__value_.__l.__size_)
              {
                v184.__r_.__value_.__r.__words[2] = v184.__r_.__value_.__l.__size_;
                operator delete((void *)v184.__r_.__value_.__l.__size_);
              }
              ZinIrOpLayerGraph::AddEdge((uint64_t)v4, v45, (uint64_t)v58, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
              v60 = *(ZinIrOpLayer **)(v38 + 96);
              IndexOfMatchedOutgoingLayer = ZinIrOpLayerGraph::GetIndexOfMatchedOutgoingLayer((ZinIrOpLayerGraph *)v4, v60, v5, v36);
              ZinIrOpLayerGraph::SwapEdgeSource((uint64_t)v4, v60, v58, (uint64_t)v5, 0xFFFFFFFFFFFFFFFFLL, v36, IndexOfMatchedOutgoingLayer, v36, 0, 0);
              v62 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v58 + 32))(v58, 0, 0);
              v63 = ZinIrTensor::SetAllocationHint(v62, 1, 1);
              __p = off_24C01FBB0;
              if (v187 < 0)
                operator delete(v186);
              goto LABEL_285;
            }
          }
          if (!ZinIrTensor::SetAllocationHint((ZinIrTensor *)v38, 1, 1))
            return 0;
          return 3;
        }
        v64 = *(uint64_t **)(a1 + 8);
        if (*(_BYTE *)(*v64 + 1252))
          return 0;
        if ((unint64_t)(*v17 - (_QWORD)*v16) < 0x10)
          return 0;
        v65 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)**v16 + 32))(**v16, 0, 0);
        v66 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*v16)[1] + 32))((*v16)[1], 0, 0);
        v67 = ZinIrTensor::GetRootTensor((ZinIrTensor *)v65);
        v68 = ZinIrTensor::GetRootTensor((ZinIrTensor *)v66);
        v69 = v68;
        v70 = *((_QWORD *)v67 + 13);
        if (v70)
        {
          if (*(_DWORD *)(v70 + 96) == 1)
            return 0;
        }
        v71 = *((_QWORD *)v68 + 13);
        if (v71)
        {
          if (*(_DWORD *)(v71 + 96) == 1)
            return 0;
        }
        v72 = ZinTensorDimensionsEqual((_QWORD *)(v65 + 48), (_QWORD *)(v66 + 48));
        Interleave = ZinIrTensor::GetInterleave((ZinIrTensor *)v65);
        v75 = v74;
        v76 = ZinIrTensor::GetInterleave((ZinIrTensor *)v66);
        v78 = HasInterleaveMismatch(Interleave, v75, v76, v77);
        v79 = *(_DWORD *)(v65 + 88) != *(_DWORD *)(v66 + 88) || v78;
        if ((v79 & 1) == 0 && v72)
        {
          v80 = 0;
          goto LABEL_284;
        }
        DimensionOrderHint::DimensionOrderHint(v189, 0);
        ZinIrTensor::GetTensorSizeInBytesFromResidency(v67, 1, (uint64_t)v189, 0);
        v108 = v107;
        if (v189[0])
        {
          v189[1] = v189[0];
          operator delete(v189[0]);
        }
        DimensionOrderHint::DimensionOrderHint(v189, 0);
        ZinIrTensor::GetTensorSizeInBytesFromResidency(v69, 1, (uint64_t)v189, 0);
        v110 = v109;
        if (v189[0])
        {
          v189[1] = v189[0];
          operator delete(v189[0]);
        }
        v111 = v108 < v110;
        v112 = v108 > v110;
        if (v108 < v110)
        {
          v113 = v65;
        }
        else
        {
          v108 = v110;
          v113 = v66;
        }
        if (v111)
          v114 = v67;
        else
          v114 = v69;
        ZinIrTensor::GetTensorFamily((ZinIrTensor *)v113, (uint64_t)&v182);
        for (j = (char *)v182; ; j += 8)
        {
          if (j == v183)
          {
            v116 = 0;
            goto LABEL_227;
          }
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)j + 96) + 120)
             - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)j + 96) + 112) > 8uLL)
            break;
        }
        v118 = *v64;
        if (*(_BYTE *)(*v64 + 1252))
          ZinAssertImpl("Constraint check only for single DMA engine architectures");
        if (*(_BYTE *)(v118 + 1327) || *(_BYTE *)(v118 + 1331))
          ZinAssertImpl("Constraint check only required aligned x view architectures");
        memset(&v184, 0, sizeof(v184));
        (*(void (**)(std::string *__return_ptr, ZinIrOpLayer *))(*(_QWORD *)v5 + 512))(&v238, v5);
        v179 = v108;
        v181 = v114;
        v189[0] = 0;
        std::vector<unsigned long>::vector(&v242, (uint64_t)(v238.__r_.__value_.__l.__size_ - v238.__r_.__value_.__r.__words[0]) >> 3, v189);
        size = v238.__r_.__value_.__l.__size_;
        for (k = (ZinIrTensor **)v238.__r_.__value_.__r.__words[0]; k != (ZinIrTensor **)size; ++k)
        {
          v121 = ZinIrTensor::GetInterleave(*k);
          if (v122)
            v123 = v121;
          else
            v123 = 1;
          v124 = v184.__r_.__value_.__l.__size_;
          if (v184.__r_.__value_.__l.__size_ >= v184.__r_.__value_.__r.__words[2])
          {
            v126 = (void *)v184.__r_.__value_.__r.__words[0];
            v127 = (uint64_t)(v184.__r_.__value_.__l.__size_ - v184.__r_.__value_.__r.__words[0]) >> 3;
            v128 = v127 + 1;
            if ((unint64_t)(v127 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v129 = v184.__r_.__value_.__r.__words[2] - v184.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v184.__r_.__value_.__r.__words[2] - v184.__r_.__value_.__r.__words[0]) >> 2 > v128)
              v128 = v129 >> 2;
            if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8)
              v130 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v130 = v128;
            if (v130)
            {
              v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v184.__r_.__value_.__r.__words[2], v130);
              v124 = v184.__r_.__value_.__l.__size_;
              v126 = (void *)v184.__r_.__value_.__r.__words[0];
            }
            else
            {
              v131 = 0;
            }
            v132 = (uint64_t *)&v131[8 * v127];
            *v132 = v123;
            v125 = (std::string::size_type)(v132 + 1);
            while ((void *)v124 != v126)
            {
              v133 = *(_QWORD *)(v124 - 8);
              v124 -= 8;
              *--v132 = v133;
            }
            v184.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
            v184.__r_.__value_.__l.__size_ = v125;
            v184.__r_.__value_.__r.__words[2] = (std::string::size_type)&v131[8 * v130];
            if (v126)
              operator delete(v126);
          }
          else
          {
            *(_QWORD *)v184.__r_.__value_.__l.__size_ = v123;
            v125 = v124 + 8;
          }
          v184.__r_.__value_.__l.__size_ = v125;
        }
        v134 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0);
        v135 = ZinIrTensor::GetInterleave(v134);
        *(int64x2_t *)v189 = vdupq_n_s64(1uLL);
        if (v136)
          v137 = v135;
        else
          v137 = 1;
        v196 = 0;
        v197 = 0;
        v193 = 0;
        v194 = 0;
        v195 = 0;
        v190 = 1;
        v191 = 0;
        v192 = 0;
        v198 = 1;
        v199 = 0;
        v200 = 0;
        v201 = 0;
        v202 = 0;
        v203 = xmmword_207A7E150;
        v204 = 0;
        v211 = 0;
        v216 = 0;
        v215 = 0;
        v213 = 0u;
        v214 = 0u;
        v212 = 0u;
        v217 = 0;
        v222 = 0;
        v218 = 0u;
        v219 = 0u;
        v220 = 0u;
        v221 = 0;
        v223 = 0;
        v228 = 0;
        v224 = 0u;
        v225 = 0u;
        v226 = 0u;
        v227 = 0;
        v229 = 0;
        memset(v230, 0, sizeof(v230));
        v205 = 0u;
        memset(v206, 0, 25);
        v207 = 0;
        v208 = 0;
        v210 = 0;
        v209 = 0;
        v231 = 1065353216;
        v232 = 0;
        memset(v233, 0, sizeof(v233));
        v234 = 1065353216;
        v235 = 0;
        memset(v236, 0, sizeof(v236));
        v237 = 1065353216;
        v239 = 0;
        v240 = 0;
        v241 = 0;
        v188 = 0;
        DMABuffer::CalculateMinimumSizes(v5, *v64, &v184, &v242, v137, 0, (uint64_t)v189, (unint64_t **)&v239, &v188, 1);
        v138 = v238.__r_.__value_.__l.__size_;
        v139 = v238.__r_.__value_.__r.__words[0];
        if (v238.__r_.__value_.__l.__size_ == v238.__r_.__value_.__r.__words[0])
        {
          v141 = 0;
        }
        else
        {
          v140 = 0;
          v141 = 0;
          do
          {
            if (v112 == v140)
            {
              v142 = *(ZinIrTensor **)(v139 + 8 * v140);
              DimensionOrderHint::DimensionOrderHint(&__p, 0);
              ZinIrTensor::GetTensorSizeInBytesFromResidency(v142, 1, (uint64_t)&__p, 0);
              v144 = v143;
              if (__p)
              {
                v186 = __p;
                operator delete(__p);
              }
              v138 = v238.__r_.__value_.__l.__size_;
              v139 = v238.__r_.__value_.__r.__words[0];
            }
            else
            {
              if (v140 >= ((char *)v240 - (char *)v239) >> 3)
                std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
              v144 = *((_QWORD *)v239 + v140);
            }
            v141 += v144;
            ++v140;
          }
          while (v140 < (uint64_t)(v138 - v139) >> 3);
        }
        v145 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0)+ 104);
        if (v145 && *(_DWORD *)(v145 + 96) == 1)
        {
          v146 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0);
          DimensionOrderHint::DimensionOrderHint(&__p, 0);
          ZinIrTensor::GetTensorSizeInBytesFromResidency(v146, 1, (uint64_t)&__p, 0);
          v148 = v147;
          if (__p)
          {
            v186 = __p;
            operator delete(__p);
          }
        }
        else
        {
          v148 = v188;
        }
        if (v239)
        {
          v240 = (unint64_t *)v239;
          operator delete(v239);
        }
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v236);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v233);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v230);
        if ((_QWORD)v242)
        {
          *((_QWORD *)&v242 + 1) = v242;
          operator delete((void *)v242);
        }
        if (v238.__r_.__value_.__r.__words[0])
        {
          v238.__r_.__value_.__l.__size_ = v238.__r_.__value_.__r.__words[0];
          operator delete(v238.__r_.__value_.__l.__data_);
        }
        if (v184.__r_.__value_.__r.__words[0])
        {
          v184.__r_.__value_.__l.__size_ = v184.__r_.__value_.__r.__words[0];
          operator delete(v184.__r_.__value_.__l.__data_);
        }
        v149 = *(_QWORD *)(v64[1] + 296);
        if (v149 < 1)
          v150 = *(_QWORD *)(*v64 + 408);
        else
          v150 = v149 << 10;
        v108 = v179;
        v114 = v181;
        v116 = v148 + v141 > v150;
LABEL_227:
        v151 = *((_QWORD *)v114 + 13);
        if (v151)
          LODWORD(v151) = *(_DWORD *)(v151 + 96) != 0;
        v152 = v151 | v116;
        if ((unint64_t)v108 > *(_QWORD *)(*v64 + 408) && *((_QWORD *)v114 + 6) == 1)
        {
          ZinIrTensor::GetTensorFamily(v114, (uint64_t)v189);
          if ((ZinEngineLayerMirInfo *)(v189[1] - v189[0]) > (ZinEngineLayerMirInfo *)8)
            v152 = 1;
          if (v189[0])
          {
            v189[1] = v189[0];
            operator delete(v189[0]);
          }
        }
        if (v152)
        {
          v153 = *((_QWORD *)v5 + 2);
          v154 = (ZinIrOpLayerGraph *)*((_QWORD *)v5 + 19);
          v155 = *(const ZinIrOpLayer **)(v113 + 96);
          v156 = ZinIrOpLayerGraph::GetIndexOfMatchedIncomingLayer(v154, v5, v155);
          if (*((char *)v5 + 47) >= 0)
            v157 = *((unsigned __int8 *)v5 + 47);
          else
            v157 = *((_QWORD *)v5 + 4);
          std::string::basic_string[abi:ne180100]((uint64_t)&v184, v157 + 1);
          if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v158 = &v184;
          else
            v158 = (std::string *)v184.__r_.__value_.__r.__words[0];
          if (v157)
          {
            if (*((char *)v5 + 47) >= 0)
              v159 = (char *)v5 + 24;
            else
              v159 = (const void *)*((_QWORD *)v5 + 3);
            memmove(v158, v159, v157);
          }
          *(_WORD *)((char *)&v158->__r_.__value_.__l.__data_ + v157) = 95;
          v160 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v242, "dram_l2");
          v161 = std::string::append(v160, "_xfm", 4uLL);
          v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
          v238.__r_.__value_.__r.__words[2] = v161->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v162;
          v161->__r_.__value_.__l.__size_ = 0;
          v161->__r_.__value_.__r.__words[2] = 0;
          v161->__r_.__value_.__r.__words[0] = 0;
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v163 = &v238;
          else
            v163 = (std::string *)v238.__r_.__value_.__r.__words[0];
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v164 = HIBYTE(v238.__r_.__value_.__r.__words[2]);
          else
            v164 = v238.__r_.__value_.__l.__size_;
          v165 = std::string::append(&v184, (const std::string::value_type *)v163, v164);
          v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
          v190 = v165->__r_.__value_.__r.__words[2];
          *(_OWORD *)v189 = v166;
          v165->__r_.__value_.__l.__size_ = 0;
          v165->__r_.__value_.__r.__words[2] = 0;
          v165->__r_.__value_.__r.__words[0] = 0;
          v167 = ZinObjectNameFactory::ZinObjectNameFactory(&__p, v189);
          if (SHIBYTE(v190) < 0)
            operator delete(v189[0]);
          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v238.__r_.__value_.__l.__data_);
          if (SHIBYTE(v243) < 0)
            operator delete((void *)v242);
          if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v184.__r_.__value_.__l.__data_);
          v168 = *(unsigned int *)(v113 + 88);
          v169 = (_QWORD *)*((_QWORD *)v5 + v156 + 30);
          if (v169 && *(_DWORD *)(v169[8] + 8) == 102)
          {
            LODWORD(v168) = *(_DWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t, __n128))(*v169 + 32))(v169, 0, 0, v168, v167)+ 88);
            v170 = 1;
          }
          else
          {
            v170 = 0;
          }
          *(_QWORD *)&v242 = 0;
          LOBYTE(v189[0]) = 0;
          v206[0] = 0;
          v171 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v153, (uint64_t)&__p, (uint64_t)v155, v168, &v242, 0, (uint64_t)v189, 1.0);
          v172 = v156;
          v173 = (_QWORD *)v242;
          *(_QWORD *)&v242 = 0;
          if (v173)
            std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v242, v173);
          if (v170)
          {
            *((_QWORD *)v5 + v156 + 30) = 0;
            *((_QWORD *)v171 + v156 + 30) = v169;
          }
          *((_BYTE *)v171 + 440) = 1;
          v239 = v5;
          v238.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
          v238.__r_.__value_.__l.__size_ = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(&v184, &v238);
          v174 = ZinIrOpLayerGraph::AddNode((uint64_t **)v154, v171, (ZinIrOpLayer ***)&v184);
          v184.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
          if (v184.__r_.__value_.__l.__size_)
          {
            v184.__r_.__value_.__r.__words[2] = v184.__r_.__value_.__l.__size_;
            operator delete((void *)v184.__r_.__value_.__l.__size_);
          }
          v175 = ZinIrOpLayerGraph::AddEdge((uint64_t)v154, (uint64_t)v155, (uint64_t)v171, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          if ((v174 & v175 & ZinIrOpLayerGraph::SwapEdgeSource((uint64_t)v154, v155, v171, (uint64_t)v5, 0xFFFFFFFFFFFFFFFFLL, v172, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0) & 1) != 0)
          {
            v176 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v171 + 32))(v171, 0, 0);
            if (ZinIrTensor::SetAllocationHint(v176, 1, 1))
              v63 = 3;
            else
              v63 = 0;
          }
          else
          {
            v63 = 3;
          }
          __p = off_24C01FBB0;
          if (v187 < 0)
            operator delete(v186);
          v177 = 0;
          v178 = 0;
          v80 = 0;
          if (!v63)
          {
LABEL_280:
            v63 = 0;
            v178 = 1;
            v80 = v177;
          }
          if (v182)
          {
            v183 = (char *)v182;
            operator delete(v182);
          }
          if ((v178 & 1) == 0)
            goto LABEL_285;
LABEL_284:
          v63 = v80;
LABEL_285:
          if (!v63)
            return 0;
          return 3;
        }
        v177 = ZinIrTensor::SetAllocationHint(v114, 1, 1);
        goto LABEL_280;
      }
    }
  }
  return result;
}

void sub_206DFA71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v41;
  void *v42;

  if (__p)
    operator delete(__p);
  v39 = *(void **)(v38 - 152);
  if (v39)
  {
    *(_QWORD *)(v38 - 144) = v39;
    operator delete(v39);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v36);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v37);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v35);
  v41 = *(void **)(v38 - 128);
  if (v41)
  {
    *(_QWORD *)(v38 - 120) = v41;
    operator delete(v41);
  }
  v42 = *(void **)(v38 - 176);
  if (v42)
  {
    *(_QWORD *)(v38 - 168) = v42;
    operator delete(v42);
  }
  if (a17)
    operator delete(a17);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

uint64_t std::__function::__func<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(ZinEngineLayerMirInfo *a1)
{
  ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(a1);
  return MEMORY[0x20BD002F8]();
}

void std::__function::__func<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Unable to handle compressed input constraint for PE dual-input\n", v0, 2u);
}

uint64_t ZinIrReshapeUnit::CreateLayer(ZinIrReshapeUnit *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  int v17;
  uint64_t v18;

  ZinIrReshapeUnit::CreateOpcode(a1, (uint64_t)&v17);
  if (v17)
  {
    v5 = 0;
  }
  else
  {
    v6 = operator new();
    v5 = v6;
    v7 = (std::__shared_weak_count *)(*a3)[1];
    v15 = **a3;
    v16 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    ZinReshapeLayer::ZinReshapeLayer(v6, &v18, &v15, (char *)a1 + 64);
    v10 = v16;
    if (v16)
    {
      v11 = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    ZinIrOpLayer::ValidateSemantics(v5);
  }
  v13 = v18;
  v18 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return v5;
}

void sub_206DFABE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

BOOL ZinIrReshapeUnit::HasDimWithValueOne(ZinIrReshapeUnit *this, const ZinTensorDimensions *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v8[2];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v2 = 0;
  v11 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 3);
  v3 = *((_QWORD *)this + 4);
  v8[0] = *(_QWORD *)this;
  v8[1] = v3;
  v9 = *(_OWORD *)((char *)this + 8);
  v10 = v4;
  do
  {
    v5 = v8[v2];
    if (v5 == 1)
      break;
  }
  while (v2++ != 4);
  return v5 == 1;
}

BOOL ZinIrReshapeUnit::IsNoOp(ZinIrReshapeUnit *this, const ZinIrHalParameters *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  BOOL v8;
  int v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  void *__p[4];

  v4 = *((_QWORD *)this + 1);
  v5 = (_QWORD *)(v4 + 8);
  v6 = v4 + 56;
  v7 = (_QWORD *)((char *)this + 136);
  DimensionOrderHint::DimensionOrderHint(__p, (char *)this + 176);
  v8 = ZinReshapeLayerUtils::ReplaceableWithAlias(v5, v6, v7, (uint64_t)__p, (uint64_t)a2, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v8)
    return 1;
  v10 = **((_DWORD **)this + 1);
  __p[0] = 0;
  ZinTensorFormatGetSize(v10, __p);
  if (*((_BYTE *)a2 + 1105))
    v11 = (char *)a2 + 528;
  else
    v11 = (char *)a2 + 416;
  v12 = *(_QWORD *)v11;
  v13 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  v14 = *((_QWORD *)this + 20);
  if (v13 * (uint64_t)__p[0] % v12)
    v15 = 0;
  else
    v15 = v14 * (uint64_t)__p[0] % v12 == 0;
  return v13 == v14 || v15;
}

void sub_206DFADB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinParseReductionMode(CFDictionaryRef *a1, ZinIrReductionUnitInfo *a2, CFArrayRef *a3)
{
  __CFString *Value;
  __CFString *v7;
  CFTypeID v8;
  __CFString *v9;
  __CFString *v10;
  CFTypeID v11;
  __CFString *v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const __CFDictionary *v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  CFTypeID v25;
  int valuePtr;
  __CFString *v33;
  __CFString *v34;

  Value = (__CFString *)CFDictionaryGetValue(*a1, CFSTR("Type"));
  if (Value && (v7 = Value, v8 = CFGetTypeID(Value), v8 == CFStringGetTypeID()))
  {
    v34 = v7;
    *((_DWORD *)a2 + 20) = CFStringToZinIrReductionType((const __CFString **)&v34);
    v9 = (__CFString *)CFDictionaryGetValue(*a1, CFSTR("PostProcessType"));
    if (v9)
    {
      v10 = v9;
      v11 = CFGetTypeID(v9);
      if (v11 == CFStringGetTypeID())
        v12 = v10;
      else
        v12 = 0;
    }
    else
    {
      v12 = 0;
    }
    v33 = v12;
    *((_DWORD *)a2 + 21) = CFStringToZinReductionPostOp((CFStringRef *)&v33);
    v22 = *a1;
    valuePtr = 6;
    ZinParseFloatingPoint(v22, CFSTR("PostScale"), &valuePtr, (float *)a2 + 22, 1.0);
    v23 = (const __CFNumber *)CFDictionaryGetValue(*a1, CFSTR("Epsilon"));
    if (v23)
    {
      v24 = v23;
      v25 = CFGetTypeID(v23);
      if (v25 == CFNumberGetTypeID())
      {
        LOWORD(valuePtr) = 0;
        CFNumberGetValue(v24, kCFNumberSInt16Type, &valuePtr);
        _H0 = valuePtr;
        __asm { FCVT            S0, H0 }
        *((_DWORD *)a2 + 23) = _S0;
      }
    }
    return 0;
  }
  else
  {
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidReductionTypeSyntax"));
    v13 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v13)
      ZinParseReductionMode(v13, v14, v15, v16, v17, v18, v19, v20);
    return 3;
  }
}

uint64_t ZinParseReductionDimension(CFDictionaryRef *a1, ZinIrReductionUnitInfo *a2, CFArrayRef *a3)
{
  const void *Value;
  const void *v6;
  CFTypeID v7;
  CFTypeID v8;
  unint64_t i;
  const void *ValueAtIndex;
  const void *v11;
  CFTypeID v12;
  const void *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  const __CFString **v35;
  _BOOL4 v36;
  char v37;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *__p;
  char *v48;
  uint64_t v49;

  __p = 0;
  v48 = 0;
  v49 = 0;
  Value = CFDictionaryGetValue(*a1, CFSTR("Dimension"));
  v6 = Value;
  if (!Value)
    goto LABEL_28;
  v7 = CFGetTypeID(Value);
  if (v7 != CFStringGetTypeID())
  {
    v8 = CFGetTypeID(v6);
    if (v8 == CFArrayGetTypeID())
    {
      for (i = 0; i < CFArrayGetCount((CFArrayRef)v6); ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v6, i);
        v11 = ValueAtIndex;
        if (ValueAtIndex)
        {
          v12 = CFGetTypeID(ValueAtIndex);
          if (v12 == CFStringGetTypeID())
            v13 = v11;
          else
            v13 = 0;
        }
        else
        {
          v13 = 0;
        }
        if ((unint64_t)v48 >= v49)
        {
          v15 = (v48 - __p) >> 3;
          if ((unint64_t)(v15 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v16 = (v49 - (uint64_t)__p) >> 2;
          if (v16 <= v15 + 1)
            v16 = v15 + 1;
          if ((unint64_t)(v49 - (_QWORD)__p) >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v49, v17);
          else
            v18 = 0;
          v19 = &v18[8 * v15];
          *(_QWORD *)v19 = v13;
          v14 = v19 + 8;
          v20 = v48;
          if (v48 != __p)
          {
            do
            {
              v21 = *((_QWORD *)v20 - 1);
              v20 -= 8;
              *((_QWORD *)v19 - 1) = v21;
              v19 -= 8;
            }
            while (v20 != __p);
            v20 = __p;
          }
          __p = v19;
          v49 = (uint64_t)&v18[8 * v17];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *(_QWORD *)v48 = v13;
          v14 = v48 + 8;
        }
        v48 = v14;
      }
      v34 = v48;
      goto LABEL_38;
    }
LABEL_28:
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidReductionDimensionSyntax"));
    v22 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v22)
      ZinParseReductionDimension(v22, v23, v24, v25, v26, v27, v28, v29);
    goto LABEL_30;
  }
  v31 = v49 >> 2;
  if ((unint64_t)(v49 >> 2) <= 1)
    v31 = 1;
  v32 = v31;
  if (v31)
    v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v49, v31);
  else
    v33 = 0;
  *(_QWORD *)v33 = v6;
  v34 = v33 + 8;
  __p = v33;
  v49 = (uint64_t)&v33[8 * v32];
LABEL_38:
  v35 = (const __CFString **)__p;
  if (__p == v34)
  {
    v30 = 0;
    if (__p)
      goto LABEL_53;
    return v30;
  }
  while (1)
  {
    v36 = ZinCFStringEquals(*v35, CFSTR("Height"));
    v37 = v36;
    if (v36)
      *((_QWORD *)a2 + 12) |= 8uLL;
    if (ZinCFStringEquals(*v35, CFSTR("Width")))
    {
      *((_QWORD *)a2 + 12) |= 0x10uLL;
      v37 = 1;
    }
    if (ZinCFStringEquals(*v35, CFSTR("Depth")))
    {
      *((_QWORD *)a2 + 12) |= 2uLL;
      v37 = 1;
    }
    if (ZinCFStringEquals(*v35, CFSTR("Channel")))
    {
      *((_QWORD *)a2 + 12) |= 4uLL;
      v37 = 1;
    }
    if (!ZinCFStringEquals(*v35, CFSTR("Batch")))
      break;
    *((_QWORD *)a2 + 12) |= 1uLL;
LABEL_50:
    if (++v35 == (const __CFString **)v34)
    {
      v30 = 0;
      goto LABEL_52;
    }
  }
  if ((v37 & 1) != 0)
    goto LABEL_50;
  ZinIrUnitStatus::SetError(a3, CFSTR("InvalidReductionDimensionSyntax"));
  v39 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v39)
    ZinParseReductionDimension(v39, v40, v41, v42, v43, v44, v45, v46);
LABEL_30:
  v30 = 3;
LABEL_52:
  v35 = (const __CFString **)__p;
  if (__p)
LABEL_53:
    operator delete(v35);
  return v30;
}

void sub_206DFB32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinParseReductionUnit(const __CFDictionary *a1, ZinIrReductionUnitInfo *a2, CFArrayRef *a3)
{
  __CFDictionary *Value;
  __CFDictionary *v6;
  CFTypeID v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __CFDictionary *v18;

  Value = (__CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Params"));
  if (Value && (v6 = Value, v7 = CFGetTypeID(Value), v7 == CFDictionaryGetTypeID()))
  {
    v18 = v6;
    v8 = 3;
    if (!ZinParseReductionMode(&v18, a2, a3))
    {
      if (ZinParseReductionDimension(&v18, a2, a3))
        return 3;
      else
        return 0;
    }
  }
  else
  {
    v9 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v9)
      ZinParseReductionUnit(v9, v10, v11, v12, v13, v14, v15, v16);
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidParamSyntax"));
    return 3;
  }
  return v8;
}

void ZinParseReductionMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing reduction type\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinParseReductionDimension(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing reduction dimension\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unrecognized reduction dimension\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinParseReductionUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing reduction type params\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinRegisterProgrammingAnalysis<8u>::CalculateBackprojectedSrc1Dims@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int HasSrc1Transpose;
  unsigned int Src1Interleave;
  uint64_t Hin;
  uint64_t Din;
  uint64_t v8;
  uint64_t Win;
  uint64_t v10;
  unsigned int NumGroups;
  uint64_t result;
  uint64_t v13;
  _QWORD v14[5];

  HasSrc1Transpose = ZinGetRegisterProgramming<8u>::HasSrc1Transpose(a1);
  Src1Interleave = ZinGetRegisterProgramming<8u>::GetSrc1Interleave(a1);
  if ((ZinGetRegisterProgramming<8u>::HasSrc1HBroadcast(a1) & 1) != 0)
    Hin = 1;
  else
    Hin = ZinGetRegisterProgramming<8u>::GetHin(a1);
  if ((ZinGetRegisterProgramming<8u>::HasSrc1DBroadcast(a1) & 1) != 0)
    Din = 1;
  else
    Din = ZinGetRegisterProgramming<8u>::GetDin(a1);
  if ((ZinGetRegisterProgramming<8u>::HasSrc1CBroadcast(a1) & 1) != 0)
    v8 = 1;
  else
    v8 = vcvtps_s32_f32((float)ZinGetRegisterProgramming<8u>::GetCin(a1) / (float)Src1Interleave);
  if ((ZinGetRegisterProgramming<8u>::HasSrc1WBroadcast(a1) & 1) != 0)
    Win = 1;
  else
    Win = ZinGetRegisterProgramming<8u>::GetWin(a1);
  if (HasSrc1Transpose)
    v10 = Win;
  else
    v10 = v8;
  if (!HasSrc1Transpose)
    v8 = Win;
  NumGroups = ZinGetRegisterProgramming<8u>::GetNumGroups(a1);
  result = ZinGetRegisterProgramming<8u>::IsTexModeEnabled(a1);
  if ((_DWORD)result)
  {
    result = ZinGetRegisterProgramming<8u>::GetTextureSourceDimensions(a1, v14);
    Hin = v14[2] + 1;
    Din = v14[4] + 1;
    v13 = v14[0] + 1;
    v8 = v14[3] + 1;
    v10 = (v14[1] + 1) / Src1Interleave;
  }
  else
  {
    v13 = NumGroups;
  }
  *a2 = v13;
  a2[1] = v10;
  a2[2] = Hin;
  a2[3] = v8;
  a2[4] = Din;
  return result;
}

uint64_t ZinRegisterProgrammingAnalysis<8u>::CalculateBackprojectedSrc2Dims@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int HasSrc2Transpose;
  unsigned int Src2Interleave;
  uint64_t CommonTaskType;
  int v7;
  char HasSrc2HBroadcast;
  uint64_t Hin;
  char HasSrc2DBroadcast;
  uint64_t Din;
  unint64_t v12;
  char HasSrc2WBroadcast;
  uint64_t Win;
  uint64_t GatherModeIndexHeightDimension;
  uint64_t GatherModeIndexPlaneDimension;
  uint64_t v17;
  unsigned int NumGroups;
  uint64_t result;

  HasSrc2Transpose = ZinGetRegisterProgramming<8u>::HasSrc2Transpose(a1);
  Src2Interleave = ZinGetRegisterProgramming<8u>::GetSrc2Interleave(a1);
  CommonTaskType = ZinGetRegisterProgramming<8u>::GetCommonTaskType(a1);
  if ((CommonTaskType & 0xFF00000000) == 0)
    std::__throw_bad_optional_access[abi:ne180100]();
  v7 = CommonTaskType;
  HasSrc2HBroadcast = ZinGetRegisterProgramming<8u>::HasSrc2HBroadcast(a1);
  Hin = 1;
  if (v7 != 1 && (HasSrc2HBroadcast & 1) == 0)
    Hin = ZinGetRegisterProgramming<8u>::GetHin(a1);
  HasSrc2DBroadcast = ZinGetRegisterProgramming<8u>::HasSrc2DBroadcast(a1);
  Din = 1;
  if (v7 != 1 && (HasSrc2DBroadcast & 1) == 0)
    Din = ZinGetRegisterProgramming<8u>::GetDin(a1);
  if ((ZinGetRegisterProgramming<8u>::HasSrc2CBroadcast(a1) & 1) != 0)
    v12 = 1;
  else
    v12 = vcvtps_s32_f32((float)ZinGetRegisterProgramming<8u>::GetCin(a1) / (float)Src2Interleave);
  HasSrc2WBroadcast = ZinGetRegisterProgramming<8u>::HasSrc2WBroadcast(a1);
  Win = 1;
  if ((HasSrc2WBroadcast & 1) == 0 && v7 != 1 && v7 != 7)
    Win = ZinGetRegisterProgramming<8u>::GetWin(a1);
  if (v7 == 7)
    GatherModeIndexHeightDimension = 2;
  else
    GatherModeIndexHeightDimension = Hin;
  if (HasSrc2Transpose)
    GatherModeIndexPlaneDimension = Win;
  else
    GatherModeIndexPlaneDimension = v12;
  if (HasSrc2Transpose)
    v17 = v12;
  else
    v17 = Win;
  NumGroups = ZinGetRegisterProgramming<8u>::GetNumGroups(a1);
  result = ZinGetRegisterProgramming<8u>::GetTextureMode(a1);
  if ((_DWORD)result == 3)
  {
    GatherModeIndexPlaneDimension = 1;
    v17 = 1;
    GatherModeIndexHeightDimension = 1;
    Din = 1;
  }
  else if ((_DWORD)result == 1)
  {
    NumGroups = ZinGetRegisterProgramming<8u>::GetGatherModeIndexGroupDimension(a1);
    Din = ZinGetRegisterProgramming<8u>::GetGatherModeIndexDepthDimension(a1);
    GatherModeIndexPlaneDimension = ZinGetRegisterProgramming<8u>::GetGatherModeIndexPlaneDimension(a1);
    GatherModeIndexHeightDimension = ZinGetRegisterProgramming<8u>::GetGatherModeIndexHeightDimension(a1);
    result = ZinGetRegisterProgramming<8u>::GetGatherModeIndexWidthDimension(a1);
    v17 = result;
  }
  *a2 = NumGroups;
  a2[1] = GatherModeIndexPlaneDimension;
  a2[2] = GatherModeIndexHeightDimension;
  a2[3] = v17;
  a2[4] = Din;
  return result;
}

float ZinRegisterProgrammingAnalysis<8u>::CalculateForwardprojectedResultDims@<S0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t Dout;
  uint64_t Hout;
  uint64_t Wout;
  uint64_t Cout;
  unsigned int NumGroups;
  _BOOL4 HasOutputTranspose;
  unsigned int v10;
  unsigned int OutputInterleave;
  float result;

  if (ZinGetRegisterProgramming<8u>::HasReduction(a1))
  {
    Dout = 1;
    Hout = 1;
    Wout = 1;
  }
  else
  {
    Hout = ZinGetRegisterProgramming<8u>::GetHout(a1);
    Dout = ZinGetRegisterProgramming<8u>::GetDout(a1);
    Wout = ZinGetRegisterProgramming<8u>::GetWout(a1);
  }
  Cout = ZinGetRegisterProgramming<8u>::GetCout(a1);
  NumGroups = ZinGetRegisterProgramming<8u>::GetNumGroups(a1);
  HasOutputTranspose = ZinGetRegisterProgramming<8u>::HasOutputTranspose(a1);
  if (HasOutputTranspose)
    v10 = Cout;
  else
    v10 = Wout;
  if (!HasOutputTranspose)
    Wout = Cout;
  OutputInterleave = ZinGetRegisterProgramming<8u>::GetOutputInterleave(a1);
  result = (float)Wout / (float)OutputInterleave;
  *a2 = NumGroups;
  a2[1] = vcvtps_s32_f32(result);
  a2[2] = Hout;
  a2[3] = v10 * (unint64_t)OutputInterleave;
  a2[4] = Dout;
  return result;
}

uint64_t ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaSrc1GranularityInX(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t DmaSrc1FormatMode;
  int v15;
  unsigned int Src1Interleave;
  int v18;

  if (ZinGetRegisterProgramming<8u>::IsTileDmaSrc1Compressed(a1))
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaSrc1GranularityInX(v6, v7, v8, v9, v10, v11, v12, v13);
    return 3;
  }
  else
  {
    v18 = 0;
    DmaSrc1FormatMode = ZinGetRegisterProgramming<8u>::GetDmaSrc1FormatMode(a1, &v18);
    if (!(_DWORD)DmaSrc1FormatMode)
    {
      v15 = v18;
      Src1Interleave = ZinGetRegisterProgramming<8u>::GetSrc1Interleave(a1);
      *a3 = ZinIrRegAllocUtil::CalculateLinearDmaGranularityInX(a2, v15, Src1Interleave);
    }
  }
  return DmaSrc1FormatMode;
}

uint64_t ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaSrc2GranularityInX(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t DmaSrc2FormatMode;
  int v15;
  unsigned int Src2Interleave;
  int v18;

  if (ZinGetRegisterProgramming<8u>::IsTileDmaSrc2Compressed(a1))
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaSrc1GranularityInX(v6, v7, v8, v9, v10, v11, v12, v13);
    return 3;
  }
  else
  {
    v18 = 0;
    DmaSrc2FormatMode = ZinGetRegisterProgramming<8u>::GetDmaSrc2FormatMode(a1, &v18);
    if (!(_DWORD)DmaSrc2FormatMode)
    {
      v15 = v18;
      Src2Interleave = ZinGetRegisterProgramming<8u>::GetSrc2Interleave(a1);
      *a3 = ZinIrRegAllocUtil::CalculateLinearDmaGranularityInX(a2, v15, Src2Interleave);
    }
  }
  return DmaSrc2FormatMode;
}

uint64_t ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaDstGranularityInX(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t DmaDstFormatMode;
  int v15;
  unsigned int OutputInterleave;
  int v18;

  if (ZinGetRegisterProgramming<8u>::IsTileDmaDstCompressed(a1))
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaSrc1GranularityInX(v6, v7, v8, v9, v10, v11, v12, v13);
    return 3;
  }
  else
  {
    v18 = 0;
    DmaDstFormatMode = ZinGetRegisterProgramming<8u>::GetDmaDstFormatMode(a1, &v18);
    if (!(_DWORD)DmaDstFormatMode)
    {
      v15 = v18;
      OutputInterleave = ZinGetRegisterProgramming<8u>::GetOutputInterleave(a1);
      *a3 = ZinIrRegAllocUtil::CalculateLinearDmaGranularityInX(a2, v15, OutputInterleave);
    }
  }
  return DmaDstFormatMode;
}

uint64_t ZinRegisterProgrammingAnalysis<10u>::CalculateBackprojectedSrc1Dims@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int HasSrc1Transpose;
  unsigned int Src1Interleave;
  uint64_t Hin;
  uint64_t Din;
  uint64_t v8;
  uint64_t Win;
  uint64_t v10;
  unsigned int NumGroups;
  uint64_t result;
  uint64_t v13;
  _QWORD v14[5];

  HasSrc1Transpose = ZinGetRegisterProgramming<10u>::HasSrc1Transpose(a1);
  Src1Interleave = ZinGetRegisterProgramming<10u>::GetSrc1Interleave(a1);
  if ((ZinGetRegisterProgramming<10u>::HasSrc1HBroadcast(a1) & 1) != 0)
    Hin = 1;
  else
    Hin = ZinGetRegisterProgramming<10u>::GetHin(a1);
  if ((ZinGetRegisterProgramming<10u>::HasSrc1DBroadcast(a1) & 1) != 0)
    Din = 1;
  else
    Din = ZinGetRegisterProgramming<10u>::GetDin(a1);
  if ((ZinGetRegisterProgramming<10u>::HasSrc1CBroadcast(a1) & 1) != 0)
    v8 = 1;
  else
    v8 = vcvtps_s32_f32((float)ZinGetRegisterProgramming<10u>::GetCin(a1) / (float)Src1Interleave);
  if ((ZinGetRegisterProgramming<10u>::HasSrc1WBroadcast(a1) & 1) != 0)
    Win = 1;
  else
    Win = ZinGetRegisterProgramming<10u>::GetWin(a1);
  if (HasSrc1Transpose)
    v10 = Win;
  else
    v10 = v8;
  if (!HasSrc1Transpose)
    v8 = Win;
  NumGroups = ZinGetRegisterProgramming<10u>::GetNumGroups(a1);
  result = ZinGetRegisterProgramming<10u>::IsTexModeEnabled(a1);
  if ((_DWORD)result)
  {
    result = ZinGetRegisterProgramming<10u>::GetTextureSourceDimensions(a1, v14);
    Hin = v14[2] + 1;
    Din = v14[4] + 1;
    v13 = v14[0] + 1;
    v8 = v14[3] + 1;
    v10 = (v14[1] + 1) / Src1Interleave;
  }
  else
  {
    v13 = NumGroups;
  }
  *a2 = v13;
  a2[1] = v10;
  a2[2] = Hin;
  a2[3] = v8;
  a2[4] = Din;
  return result;
}

uint64_t ZinRegisterProgrammingAnalysis<10u>::CalculateBackprojectedSrc2Dims@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int HasSrc2Transpose;
  unsigned int Src2Interleave;
  uint64_t CommonTaskType;
  int v7;
  char HasSrc2HBroadcast;
  uint64_t Hin;
  char HasSrc2DBroadcast;
  uint64_t Din;
  unint64_t v12;
  char HasSrc2WBroadcast;
  uint64_t Win;
  uint64_t GatherModeIndexHeightDimension;
  uint64_t GatherModeIndexPlaneDimension;
  uint64_t v17;
  unsigned int NumGroups;
  uint64_t result;

  HasSrc2Transpose = ZinGetRegisterProgramming<10u>::HasSrc2Transpose(a1);
  Src2Interleave = ZinGetRegisterProgramming<10u>::GetSrc2Interleave(a1);
  CommonTaskType = ZinGetRegisterProgramming<10u>::GetCommonTaskType(a1);
  if ((CommonTaskType & 0xFF00000000) == 0)
    std::__throw_bad_optional_access[abi:ne180100]();
  v7 = CommonTaskType;
  HasSrc2HBroadcast = ZinGetRegisterProgramming<10u>::HasSrc2HBroadcast(a1);
  Hin = 1;
  if (v7 != 1 && (HasSrc2HBroadcast & 1) == 0)
    Hin = ZinGetRegisterProgramming<10u>::GetHin(a1);
  HasSrc2DBroadcast = ZinGetRegisterProgramming<10u>::HasSrc2DBroadcast(a1);
  Din = 1;
  if (v7 != 1 && (HasSrc2DBroadcast & 1) == 0)
    Din = ZinGetRegisterProgramming<10u>::GetDin(a1);
  if ((ZinGetRegisterProgramming<10u>::HasSrc2CBroadcast(a1) & 1) != 0)
    v12 = 1;
  else
    v12 = vcvtps_s32_f32((float)ZinGetRegisterProgramming<10u>::GetCin(a1) / (float)Src2Interleave);
  HasSrc2WBroadcast = ZinGetRegisterProgramming<10u>::HasSrc2WBroadcast(a1);
  Win = 1;
  if ((HasSrc2WBroadcast & 1) == 0 && v7 != 1 && v7 != 7)
    Win = ZinGetRegisterProgramming<10u>::GetWin(a1);
  if (v7 == 7)
    GatherModeIndexHeightDimension = 2;
  else
    GatherModeIndexHeightDimension = Hin;
  if (HasSrc2Transpose)
    GatherModeIndexPlaneDimension = Win;
  else
    GatherModeIndexPlaneDimension = v12;
  if (HasSrc2Transpose)
    v17 = v12;
  else
    v17 = Win;
  NumGroups = ZinGetRegisterProgramming<10u>::GetNumGroups(a1);
  result = ZinGetRegisterProgramming<10u>::GetTextureMode(a1);
  if ((_DWORD)result == 3)
  {
    GatherModeIndexPlaneDimension = 1;
    v17 = 1;
    GatherModeIndexHeightDimension = 1;
    Din = 1;
  }
  else if ((_DWORD)result == 1)
  {
    NumGroups = ZinGetRegisterProgramming<10u>::GetGatherModeIndexGroupDimension(a1);
    Din = ZinGetRegisterProgramming<10u>::GetGatherModeIndexDepthDimension(a1);
    GatherModeIndexPlaneDimension = ZinGetRegisterProgramming<10u>::GetGatherModeIndexPlaneDimension(a1);
    GatherModeIndexHeightDimension = ZinGetRegisterProgramming<10u>::GetGatherModeIndexHeightDimension(a1);
    result = ZinGetRegisterProgramming<10u>::GetGatherModeIndexWidthDimension(a1);
    v17 = result;
  }
  *a2 = NumGroups;
  a2[1] = GatherModeIndexPlaneDimension;
  a2[2] = GatherModeIndexHeightDimension;
  a2[3] = v17;
  a2[4] = Din;
  return result;
}

float ZinRegisterProgrammingAnalysis<10u>::CalculateForwardprojectedResultDims@<S0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t Dout;
  uint64_t Hout;
  uint64_t Wout;
  uint64_t Cout;
  unsigned int NumGroups;
  _BOOL4 HasOutputTranspose;
  unsigned int v10;
  unsigned int OutputInterleave;
  float result;

  if (ZinGetRegisterProgramming<10u>::HasReduction(a1))
  {
    Dout = 1;
    Hout = 1;
    Wout = 1;
  }
  else
  {
    Hout = ZinGetRegisterProgramming<10u>::GetHout(a1);
    Dout = ZinGetRegisterProgramming<10u>::GetDout(a1);
    Wout = ZinGetRegisterProgramming<10u>::GetWout(a1);
  }
  Cout = ZinGetRegisterProgramming<10u>::GetCout(a1);
  NumGroups = ZinGetRegisterProgramming<10u>::GetNumGroups(a1);
  HasOutputTranspose = ZinGetRegisterProgramming<10u>::HasOutputTranspose(a1);
  if (HasOutputTranspose)
    v10 = Cout;
  else
    v10 = Wout;
  if (!HasOutputTranspose)
    Wout = Cout;
  OutputInterleave = ZinGetRegisterProgramming<10u>::GetOutputInterleave(a1);
  result = (float)Wout / (float)OutputInterleave;
  *a2 = NumGroups;
  a2[1] = vcvtps_s32_f32(result);
  a2[2] = Hout;
  a2[3] = v10 * (unint64_t)OutputInterleave;
  a2[4] = Dout;
  return result;
}

uint64_t ZinRegisterProgrammingAnalysis<10u>::CalculateLinearDmaSrc1GranularityInX(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t DmaSrc1FormatMode;
  int v15;
  unsigned int Src1Interleave;
  int v18;

  if (ZinGetRegisterProgramming<10u>::IsTileDmaSrc1Compressed(a1))
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaSrc1GranularityInX(v6, v7, v8, v9, v10, v11, v12, v13);
    return 3;
  }
  else
  {
    v18 = 0;
    DmaSrc1FormatMode = ZinGetRegisterProgramming<10u>::GetDmaSrc1FormatMode(a1, &v18);
    if (!(_DWORD)DmaSrc1FormatMode)
    {
      v15 = v18;
      Src1Interleave = ZinGetRegisterProgramming<10u>::GetSrc1Interleave(a1);
      *a3 = ZinIrRegAllocUtil::CalculateLinearDmaGranularityInX(a2, v15, Src1Interleave);
    }
  }
  return DmaSrc1FormatMode;
}

uint64_t ZinRegisterProgrammingAnalysis<10u>::CalculateLinearDmaSrc2GranularityInX(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t DmaSrc2FormatMode;
  int v15;
  unsigned int Src2Interleave;
  int v18;

  if (ZinGetRegisterProgramming<10u>::IsTileDmaSrc2Compressed(a1))
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaSrc1GranularityInX(v6, v7, v8, v9, v10, v11, v12, v13);
    return 3;
  }
  else
  {
    v18 = 0;
    DmaSrc2FormatMode = ZinGetRegisterProgramming<10u>::GetDmaSrc2FormatMode(a1, &v18);
    if (!(_DWORD)DmaSrc2FormatMode)
    {
      v15 = v18;
      Src2Interleave = ZinGetRegisterProgramming<10u>::GetSrc2Interleave(a1);
      *a3 = ZinIrRegAllocUtil::CalculateLinearDmaGranularityInX(a2, v15, Src2Interleave);
    }
  }
  return DmaSrc2FormatMode;
}

uint64_t ZinRegisterProgrammingAnalysis<10u>::CalculateLinearDmaDstGranularityInX(Layer2TDMapper::SourceLayer *a1, unint64_t a2, uint64_t *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t DmaDstFormatMode;
  int v15;
  unsigned int OutputInterleave;
  int v18;

  if (Layer2TDMapper::SourceLayer::IsGraphInitialization(a1))
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaSrc1GranularityInX(v6, v7, v8, v9, v10, v11, v12, v13);
    return 3;
  }
  else
  {
    v18 = 0;
    DmaDstFormatMode = ZinGetRegisterProgramming<10u>::GetDmaDstFormatMode((uint64_t)a1, &v18);
    if (!(_DWORD)DmaDstFormatMode)
    {
      v15 = v18;
      OutputInterleave = ZinGetRegisterProgramming<10u>::GetOutputInterleave((uint64_t)a1);
      *a3 = ZinIrRegAllocUtil::CalculateLinearDmaGranularityInX(a2, v15, OutputInterleave);
    }
  }
  return DmaDstFormatMode;
}

uint64_t ZinRegisterProgrammingAnalysis<11u>::CalculateBackprojectedSrc1Dims@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int HasSrc1Transpose;
  unsigned int Src1Interleave;
  uint64_t Hin;
  uint64_t Din;
  uint64_t v8;
  uint64_t Dout;
  uint64_t v10;
  unsigned int NumGroups;
  uint64_t result;
  uint64_t v13;
  _QWORD v14[5];

  HasSrc1Transpose = ZinGetRegisterProgramming<11u>::HasSrc1Transpose(a1);
  Src1Interleave = ZinGetRegisterProgramming<11u>::GetSrc1Interleave(a1);
  if ((ZinGetRegisterProgramming<11u>::HasSrc1HBroadcast(a1) & 1) != 0)
    Hin = 1;
  else
    Hin = ZinGetRegisterProgramming<11u>::GetHin(a1);
  if ((ZinGetRegisterProgramming<11u>::HasSrc1DBroadcast(a1) & 1) != 0)
    Din = 1;
  else
    Din = ZinGetRegisterProgramming<11u>::GetDin(a1);
  if ((ZinGetRegisterProgramming<11u>::HasSrc1CBroadcast(a1) & 1) != 0)
    v8 = 1;
  else
    v8 = vcvtps_s32_f32((float)ZinGetRegisterProgramming<11u>::GetCin(a1) / (float)Src1Interleave);
  if ((ZinGetRegisterProgramming<11u>::HasSrc1WBroadcast(a1) & 1) != 0)
    Dout = 1;
  else
    Dout = ZinGetRegisterProgramming<7u>::GetDout(a1);
  if (HasSrc1Transpose)
    v10 = Dout;
  else
    v10 = v8;
  if (!HasSrc1Transpose)
    v8 = Dout;
  NumGroups = ZinGetRegisterProgramming<11u>::GetNumGroups(a1);
  result = ZinGetRegisterProgramming<11u>::IsTexModeEnabled(a1);
  if ((_DWORD)result)
  {
    result = ZinGetRegisterProgramming<11u>::GetTextureSourceDimensions(a1, v14);
    Hin = v14[2] + 1;
    Din = v14[4] + 1;
    v13 = v14[0] + 1;
    v8 = v14[3] + 1;
    v10 = (v14[1] + 1) / Src1Interleave;
  }
  else
  {
    v13 = NumGroups;
  }
  *a2 = v13;
  a2[1] = v10;
  a2[2] = Hin;
  a2[3] = v8;
  a2[4] = Din;
  return result;
}

uint64_t ZinRegisterProgrammingAnalysis<11u>::CalculateBackprojectedSrc2Dims@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int HasSrc2Transpose;
  unsigned int Src2Interleave;
  uint64_t CommonTaskType;
  int v7;
  char HasSrc2HBroadcast;
  uint64_t Hin;
  char HasSrc2DBroadcast;
  uint64_t Din;
  unint64_t v12;
  char HasSrc2WBroadcast;
  uint64_t Dout;
  uint64_t GatherModeIndexHeightDimension;
  uint64_t GatherModeIndexPlaneDimension;
  uint64_t v17;
  unsigned int NumGroups;
  uint64_t result;

  HasSrc2Transpose = ZinGetRegisterProgramming<11u>::HasSrc2Transpose(a1);
  Src2Interleave = ZinGetRegisterProgramming<11u>::GetSrc2Interleave(a1);
  CommonTaskType = ZinGetRegisterProgramming<11u>::GetCommonTaskType(a1);
  if ((CommonTaskType & 0xFF00000000) == 0)
    std::__throw_bad_optional_access[abi:ne180100]();
  v7 = CommonTaskType;
  HasSrc2HBroadcast = ZinGetRegisterProgramming<11u>::HasSrc2HBroadcast(a1);
  Hin = 1;
  if (v7 != 1 && (HasSrc2HBroadcast & 1) == 0)
    Hin = ZinGetRegisterProgramming<11u>::GetHin(a1);
  HasSrc2DBroadcast = ZinGetRegisterProgramming<11u>::HasSrc2DBroadcast(a1);
  Din = 1;
  if (v7 != 1 && (HasSrc2DBroadcast & 1) == 0)
    Din = ZinGetRegisterProgramming<11u>::GetDin(a1);
  if ((ZinGetRegisterProgramming<11u>::HasSrc2CBroadcast(a1) & 1) != 0)
    v12 = 1;
  else
    v12 = vcvtps_s32_f32((float)ZinGetRegisterProgramming<11u>::GetCin(a1) / (float)Src2Interleave);
  HasSrc2WBroadcast = ZinGetRegisterProgramming<11u>::HasSrc2WBroadcast(a1);
  Dout = 1;
  if ((HasSrc2WBroadcast & 1) == 0 && v7 != 1 && v7 != 7)
    Dout = ZinGetRegisterProgramming<7u>::GetDout(a1);
  if (v7 == 7)
    GatherModeIndexHeightDimension = 2;
  else
    GatherModeIndexHeightDimension = Hin;
  if (HasSrc2Transpose)
    GatherModeIndexPlaneDimension = Dout;
  else
    GatherModeIndexPlaneDimension = v12;
  if (HasSrc2Transpose)
    v17 = v12;
  else
    v17 = Dout;
  NumGroups = ZinGetRegisterProgramming<11u>::GetNumGroups(a1);
  result = ZinGetRegisterProgramming<11u>::GetTextureMode(a1);
  if ((_DWORD)result == 3)
  {
    GatherModeIndexPlaneDimension = 1;
    v17 = 1;
    GatherModeIndexHeightDimension = 1;
    Din = 1;
  }
  else if ((_DWORD)result == 1)
  {
    NumGroups = ZinGetRegisterProgramming<11u>::GetGatherModeIndexGroupDimension(a1);
    Din = ZinGetRegisterProgramming<11u>::GetGatherModeIndexDepthDimension(a1);
    GatherModeIndexPlaneDimension = ZinGetRegisterProgramming<11u>::GetGatherModeIndexPlaneDimension(a1);
    GatherModeIndexHeightDimension = ZinGetRegisterProgramming<11u>::GetGatherModeIndexHeightDimension(a1);
    result = ZinGetRegisterProgramming<11u>::GetGatherModeIndexWidthDimension(a1);
    v17 = result;
  }
  *a2 = NumGroups;
  a2[1] = GatherModeIndexPlaneDimension;
  a2[2] = GatherModeIndexHeightDimension;
  a2[3] = v17;
  a2[4] = Din;
  return result;
}

float ZinRegisterProgrammingAnalysis<11u>::CalculateForwardprojectedResultDims@<S0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t Dout;
  uint64_t Hout;
  uint64_t Wout;
  uint64_t Cout;
  unsigned int NumGroups;
  _BOOL4 HasOutputTranspose;
  unsigned int v10;
  unsigned int OutputInterleave;
  float result;

  if (ZinGetRegisterProgramming<11u>::HasReduction(a1))
  {
    Dout = 1;
    Hout = 1;
    Wout = 1;
  }
  else
  {
    Hout = ZinGetRegisterProgramming<11u>::GetHout(a1);
    Dout = ZinGetRegisterProgramming<11u>::GetDout(a1);
    Wout = ZinGetRegisterProgramming<11u>::GetWout(a1);
  }
  Cout = ZinGetRegisterProgramming<11u>::GetCout(a1);
  NumGroups = ZinGetRegisterProgramming<11u>::GetNumGroups(a1);
  HasOutputTranspose = ZinGetRegisterProgramming<11u>::HasOutputTranspose(a1);
  if (HasOutputTranspose)
    v10 = Cout;
  else
    v10 = Wout;
  if (!HasOutputTranspose)
    Wout = Cout;
  OutputInterleave = ZinGetRegisterProgramming<11u>::GetOutputInterleave(a1);
  result = (float)Wout / (float)OutputInterleave;
  *a2 = NumGroups;
  a2[1] = vcvtps_s32_f32(result);
  a2[2] = Hout;
  a2[3] = v10 * (unint64_t)OutputInterleave;
  a2[4] = Dout;
  return result;
}

void ZinRegisterProgrammingAnalysis<17u>::CalculateBackprojectedSrc1Dims(int8x8_t *a1@<X0>, uint64_t *a2@<X8>)
{
  int HasSrc1Transpose;
  unsigned int Src1Interleave;
  uint64_t Cin;
  uint64_t Din;
  uint64_t v8;
  uint64_t Cout;
  uint64_t v10;
  unsigned int NumGroups;
  uint64_t v12;
  _QWORD v13[5];

  HasSrc1Transpose = ZinGetRegisterProgramming<17u>::HasSrc1Transpose((uint64_t)a1);
  Src1Interleave = ZinGetRegisterProgramming<17u>::GetSrc1Interleave((uint64_t)a1);
  if ((ZinGetRegisterProgramming<17u>::HasSrc1HBroadcast((uint64_t)a1) & 1) != 0)
    Cin = 1;
  else
    Cin = ZinGetRegisterProgramming<8u>::GetCin((uint64_t)a1);
  if ((ZinGetRegisterProgramming<17u>::HasSrc1DBroadcast((uint64_t)a1) & 1) != 0)
    Din = 1;
  else
    Din = ZinGetRegisterProgramming<17u>::GetDin((uint64_t)a1);
  if ((ZinGetRegisterProgramming<17u>::HasSrc1CBroadcast((uint64_t)a1) & 1) != 0)
    v8 = 1;
  else
    v8 = vcvtps_s32_f32((float)ZinGetRegisterProgramming<8u>::GetCout((uint64_t)a1) / (float)Src1Interleave);
  if ((ZinGetRegisterProgramming<17u>::HasSrc1WBroadcast((uint64_t)a1) & 1) != 0)
    Cout = 1;
  else
    Cout = ZinGetRegisterProgramming<11u>::GetCout((uint64_t)a1);
  if (HasSrc1Transpose)
    v10 = Cout;
  else
    v10 = v8;
  if (!HasSrc1Transpose)
    v8 = Cout;
  NumGroups = ZinGetRegisterProgramming<17u>::GetNumGroups((uint64_t)a1);
  if (ZinGetRegisterProgramming<17u>::IsTexModeEnabled((uint64_t)a1))
  {
    ZinGetRegisterProgramming<17u>::GetTextureSourceDimensions(a1, (uint64_t)v13);
    Cin = v13[2] + 1;
    Din = v13[4] + 1;
    v12 = v13[0] + 1;
    v8 = v13[3] + 1;
    v10 = (v13[1] + 1) / Src1Interleave;
  }
  else
  {
    v12 = NumGroups;
  }
  *a2 = v12;
  a2[1] = v10;
  a2[2] = Cin;
  a2[3] = v8;
  a2[4] = Din;
}

uint64_t ZinRegisterProgrammingAnalysis<17u>::CalculateBackprojectedSrc2Dims@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  int HasSrc2Transpose;
  unsigned int Src2Interleave;
  uint64_t CommonTaskType;
  int v7;
  char HasSrc2HBroadcast;
  uint64_t Cin;
  char HasSrc2DBroadcast;
  uint64_t Din;
  unint64_t v12;
  char HasSrc2WBroadcast;
  uint64_t Cout;
  uint64_t GatherModeIndexHeightDimension;
  uint64_t GatherModeIndexPlaneDimension;
  uint64_t v17;
  unsigned int NumGroups;
  uint64_t result;

  HasSrc2Transpose = ZinGetRegisterProgramming<17u>::HasSrc2Transpose((uint64_t)a1);
  Src2Interleave = ZinGetRegisterProgramming<17u>::GetSrc2Interleave((uint64_t)a1);
  CommonTaskType = ZinGetRegisterProgramming<17u>::GetCommonTaskType((uint64_t)a1);
  if ((CommonTaskType & 0xFF00000000) == 0)
    std::__throw_bad_optional_access[abi:ne180100]();
  v7 = CommonTaskType;
  HasSrc2HBroadcast = ZinGetRegisterProgramming<17u>::HasSrc2HBroadcast((uint64_t)a1);
  Cin = 1;
  if (v7 != 1 && (HasSrc2HBroadcast & 1) == 0)
    Cin = ZinGetRegisterProgramming<8u>::GetCin((uint64_t)a1);
  HasSrc2DBroadcast = ZinGetRegisterProgramming<17u>::HasSrc2DBroadcast((uint64_t)a1);
  Din = 1;
  if (v7 != 1 && (HasSrc2DBroadcast & 1) == 0)
    Din = ZinGetRegisterProgramming<17u>::GetDin((uint64_t)a1);
  if ((ZinGetRegisterProgramming<17u>::HasSrc2CBroadcast((uint64_t)a1) & 1) != 0)
    v12 = 1;
  else
    v12 = vcvtps_s32_f32((float)ZinGetRegisterProgramming<8u>::GetCout((uint64_t)a1) / (float)Src2Interleave);
  HasSrc2WBroadcast = ZinGetRegisterProgramming<17u>::HasSrc2WBroadcast((uint64_t)a1);
  Cout = 1;
  if ((HasSrc2WBroadcast & 1) == 0 && v7 != 1 && v7 != 7)
    Cout = ZinGetRegisterProgramming<11u>::GetCout((uint64_t)a1);
  if (v7 == 7)
    GatherModeIndexHeightDimension = 2;
  else
    GatherModeIndexHeightDimension = Cin;
  if (HasSrc2Transpose)
    GatherModeIndexPlaneDimension = Cout;
  else
    GatherModeIndexPlaneDimension = v12;
  if (HasSrc2Transpose)
    v17 = v12;
  else
    v17 = Cout;
  NumGroups = ZinGetRegisterProgramming<17u>::GetNumGroups((uint64_t)a1);
  result = ZinGetRegisterProgramming<17u>::GetTextureMode((uint64_t)a1);
  if ((_DWORD)result == 3)
  {
    GatherModeIndexPlaneDimension = 1;
    v17 = 1;
    GatherModeIndexHeightDimension = 1;
    Din = 1;
  }
  else if ((_DWORD)result == 1)
  {
    NumGroups = ZinGetRegisterProgramming<17u>::GetGatherModeIndexGroupDimension(a1);
    Din = ZinGetRegisterProgramming<17u>::GetGatherModeIndexDepthDimension(a1);
    GatherModeIndexPlaneDimension = ZinGetRegisterProgramming<17u>::GetGatherModeIndexPlaneDimension(a1);
    GatherModeIndexHeightDimension = ZinGetRegisterProgramming<17u>::GetGatherModeIndexHeightDimension(a1);
    result = ZinGetRegisterProgramming<17u>::GetGatherModeIndexWidthDimension(a1);
    v17 = result;
  }
  *a2 = NumGroups;
  a2[1] = GatherModeIndexPlaneDimension;
  a2[2] = GatherModeIndexHeightDimension;
  a2[3] = v17;
  a2[4] = Din;
  return result;
}

float ZinRegisterProgrammingAnalysis<17u>::CalculateForwardprojectedResultDims@<S0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t Dout;
  uint64_t Hout;
  uint64_t Wout;
  uint64_t Cout;
  unsigned int NumGroups;
  _BOOL4 HasOutputTranspose;
  unsigned int v10;
  unsigned int OutputInterleave;
  float result;

  if (ZinGetRegisterProgramming<17u>::HasReduction(a1))
  {
    Dout = 1;
    Hout = 1;
    Wout = 1;
  }
  else
  {
    Hout = ZinGetRegisterProgramming<17u>::GetHout(a1);
    Dout = ZinGetRegisterProgramming<17u>::GetDout(a1);
    Wout = ZinGetRegisterProgramming<17u>::GetWout(a1);
  }
  Cout = ZinGetRegisterProgramming<17u>::GetCout(a1);
  NumGroups = ZinGetRegisterProgramming<17u>::GetNumGroups(a1);
  HasOutputTranspose = ZinGetRegisterProgramming<17u>::HasOutputTranspose(a1);
  if (HasOutputTranspose)
    v10 = Cout;
  else
    v10 = Wout;
  if (!HasOutputTranspose)
    Wout = Cout;
  OutputInterleave = ZinGetRegisterProgramming<17u>::GetOutputInterleave(a1);
  result = (float)Wout / (float)OutputInterleave;
  *a2 = NumGroups;
  a2[1] = vcvtps_s32_f32(result);
  a2[2] = Hout;
  a2[3] = v10 * (unint64_t)OutputInterleave;
  a2[4] = Dout;
  return result;
}

uint64_t ZinRegisterProgrammingAnalysis<17u>::CalculateLinearDmaSrc1GranularityInX(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t DmaSrc1FormatMode;
  int v15;
  unsigned int Src1Interleave;
  int v18;

  if (ZinGetRegisterProgramming<17u>::IsTileDmaSrc1Compressed(a1))
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaSrc1GranularityInX(v6, v7, v8, v9, v10, v11, v12, v13);
    return 3;
  }
  else
  {
    v18 = 0;
    DmaSrc1FormatMode = ZinGetRegisterProgramming<17u>::GetDmaSrc1FormatMode(a1, &v18);
    if (!(_DWORD)DmaSrc1FormatMode)
    {
      v15 = v18;
      Src1Interleave = ZinGetRegisterProgramming<17u>::GetSrc1Interleave(a1);
      *a3 = ZinIrRegAllocUtil::CalculateLinearDmaGranularityInX(a2, v15, Src1Interleave);
    }
  }
  return DmaSrc1FormatMode;
}

uint64_t ZinRegisterProgrammingAnalysis<17u>::CalculateLinearDmaSrc2GranularityInX(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t DmaSrc2FormatMode;
  int v15;
  unsigned int Src2Interleave;
  int v18;

  if (ZinGetRegisterProgramming<17u>::IsTileDmaSrc2Compressed(a1))
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaSrc1GranularityInX(v6, v7, v8, v9, v10, v11, v12, v13);
    return 3;
  }
  else
  {
    v18 = 0;
    DmaSrc2FormatMode = ZinGetRegisterProgramming<17u>::GetDmaSrc2FormatMode(a1, &v18);
    if (!(_DWORD)DmaSrc2FormatMode)
    {
      v15 = v18;
      Src2Interleave = ZinGetRegisterProgramming<17u>::GetSrc2Interleave(a1);
      *a3 = ZinIrRegAllocUtil::CalculateLinearDmaGranularityInX(a2, v15, Src2Interleave);
    }
  }
  return DmaSrc2FormatMode;
}

uint64_t ZinRegisterProgrammingAnalysis<17u>::CalculateLinearDmaDstGranularityInX(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t DmaDstFormatMode;
  int v15;
  unsigned int OutputInterleave;
  int v18;

  if (ZinGetRegisterProgramming<17u>::IsTileDmaDstCompressed(a1))
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaSrc1GranularityInX(v6, v7, v8, v9, v10, v11, v12, v13);
    return 3;
  }
  else
  {
    v18 = 0;
    DmaDstFormatMode = ZinGetRegisterProgramming<17u>::GetDmaDstFormatMode(a1, &v18);
    if (!(_DWORD)DmaDstFormatMode)
    {
      v15 = v18;
      OutputInterleave = ZinGetRegisterProgramming<17u>::GetOutputInterleave(a1);
      *a3 = ZinIrRegAllocUtil::CalculateLinearDmaGranularityInX(a2, v15, OutputInterleave);
    }
  }
  return DmaDstFormatMode;
}

uint64_t ZinRegisterProgrammingAnalysis<19u>::CalculateBackprojectedSrc1Dims@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int HasSrc1Transpose;
  unsigned int Src1Interleave;
  uint64_t Wout;
  uint64_t Cout;
  uint64_t v8;
  uint64_t Din;
  uint64_t v10;
  unsigned int NumGroups;
  uint64_t result;
  uint64_t v13;
  _QWORD v14[5];

  HasSrc1Transpose = ZinGetRegisterProgramming<19u>::HasSrc1Transpose(a1);
  Src1Interleave = ZinGetRegisterProgramming<19u>::GetSrc1Interleave(a1);
  if ((ZinGetRegisterProgramming<19u>::HasSrc1HBroadcast(a1) & 1) != 0)
    Wout = 1;
  else
    Wout = ZinGetRegisterProgramming<17u>::GetWout(a1);
  if ((ZinGetRegisterProgramming<19u>::HasSrc1DBroadcast(a1) & 1) != 0)
    Cout = 1;
  else
    Cout = ZinGetRegisterProgramming<17u>::GetCout(a1);
  if ((ZinGetRegisterProgramming<19u>::HasSrc1CBroadcast(a1) & 1) != 0)
    v8 = 1;
  else
    v8 = vcvtps_s32_f32((float)ZinGetRegisterProgramming<17u>::GetHout(a1) / (float)Src1Interleave);
  if ((ZinGetRegisterProgramming<19u>::HasSrc1WBroadcast(a1) & 1) != 0)
    Din = 1;
  else
    Din = ZinGetRegisterProgramming<17u>::GetDin(a1);
  if (HasSrc1Transpose)
    v10 = Din;
  else
    v10 = v8;
  if (!HasSrc1Transpose)
    v8 = Din;
  NumGroups = ZinGetRegisterProgramming<19u>::GetNumGroups(a1);
  result = ZinGetRegisterProgramming<19u>::IsTexModeEnabled(a1);
  if ((_DWORD)result)
  {
    result = ZinGetRegisterProgramming<19u>::GetTextureSourceDimensions(a1, v14);
    Wout = v14[2] + 1;
    Cout = v14[4] + 1;
    v13 = v14[0] + 1;
    v8 = v14[3] + 1;
    v10 = (v14[1] + 1) / Src1Interleave;
  }
  else
  {
    v13 = NumGroups;
  }
  *a2 = v13;
  a2[1] = v10;
  a2[2] = Wout;
  a2[3] = v8;
  a2[4] = Cout;
  return result;
}

uint64_t ZinRegisterProgrammingAnalysis<19u>::CalculateBackprojectedSrc2Dims@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  int HasSrc2Transpose;
  unsigned int Src2Interleave;
  uint64_t CommonTaskType;
  int v7;
  char HasSrc2HBroadcast;
  uint64_t Wout;
  char HasSrc2DBroadcast;
  uint64_t Cout;
  unint64_t v12;
  char HasSrc2WBroadcast;
  uint64_t Din;
  uint64_t GatherModeIndexHeightDimension;
  uint64_t GatherModeIndexPlaneDimension;
  uint64_t v17;
  unsigned int NumGroups;
  uint64_t result;

  HasSrc2Transpose = ZinGetRegisterProgramming<19u>::HasSrc2Transpose((uint64_t)a1);
  Src2Interleave = ZinGetRegisterProgramming<19u>::GetSrc2Interleave((uint64_t)a1);
  CommonTaskType = ZinGetRegisterProgramming<19u>::GetCommonTaskType((uint64_t)a1);
  if ((CommonTaskType & 0xFF00000000) == 0)
    std::__throw_bad_optional_access[abi:ne180100]();
  v7 = CommonTaskType;
  HasSrc2HBroadcast = ZinGetRegisterProgramming<19u>::HasSrc2HBroadcast((uint64_t)a1);
  Wout = 1;
  if (v7 != 1 && (HasSrc2HBroadcast & 1) == 0)
    Wout = ZinGetRegisterProgramming<17u>::GetWout((uint64_t)a1);
  HasSrc2DBroadcast = ZinGetRegisterProgramming<19u>::HasSrc2DBroadcast((uint64_t)a1);
  Cout = 1;
  if (v7 != 1 && (HasSrc2DBroadcast & 1) == 0)
    Cout = ZinGetRegisterProgramming<17u>::GetCout((uint64_t)a1);
  if ((ZinGetRegisterProgramming<19u>::HasSrc2CBroadcast((uint64_t)a1) & 1) != 0)
    v12 = 1;
  else
    v12 = vcvtps_s32_f32((float)ZinGetRegisterProgramming<17u>::GetHout((uint64_t)a1) / (float)Src2Interleave);
  HasSrc2WBroadcast = ZinGetRegisterProgramming<19u>::HasSrc2WBroadcast((uint64_t)a1);
  Din = 1;
  if ((HasSrc2WBroadcast & 1) == 0 && v7 != 1 && v7 != 7)
    Din = ZinGetRegisterProgramming<17u>::GetDin((uint64_t)a1);
  if (v7 == 7)
    GatherModeIndexHeightDimension = 2;
  else
    GatherModeIndexHeightDimension = Wout;
  if (HasSrc2Transpose)
    GatherModeIndexPlaneDimension = Din;
  else
    GatherModeIndexPlaneDimension = v12;
  if (HasSrc2Transpose)
    v17 = v12;
  else
    v17 = Din;
  NumGroups = ZinGetRegisterProgramming<19u>::GetNumGroups((uint64_t)a1);
  result = ZinGetRegisterProgramming<19u>::GetTextureMode((uint64_t)a1);
  if ((_DWORD)result == 3)
  {
    GatherModeIndexPlaneDimension = 1;
    v17 = 1;
    GatherModeIndexHeightDimension = 1;
    Cout = 1;
  }
  else if ((_DWORD)result == 1)
  {
    NumGroups = ZinGetRegisterProgramming<19u>::GetGatherModeIndexGroupDimension(a1);
    Cout = ZinGetRegisterProgramming<19u>::GetGatherModeIndexDepthDimension(a1);
    GatherModeIndexPlaneDimension = ZinGetRegisterProgramming<19u>::GetGatherModeIndexPlaneDimension(a1);
    GatherModeIndexHeightDimension = ZinGetRegisterProgramming<19u>::GetGatherModeIndexHeightDimension(a1);
    result = ZinGetRegisterProgramming<19u>::GetGatherModeIndexWidthDimension(a1);
    v17 = result;
  }
  *a2 = NumGroups;
  a2[1] = GatherModeIndexPlaneDimension;
  a2[2] = GatherModeIndexHeightDimension;
  a2[3] = v17;
  a2[4] = Cout;
  return result;
}

float ZinRegisterProgrammingAnalysis<19u>::CalculateForwardprojectedResultDims@<S0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t Dout;
  uint64_t NumGroups;
  uint64_t v6;
  uint64_t Cout;
  unsigned int v8;
  _BOOL4 HasOutputTranspose;
  unsigned int v10;
  unsigned int OutputInterleave;
  float result;

  if (ZinGetRegisterProgramming<19u>::HasReduction(a1))
  {
    Dout = 1;
    NumGroups = 1;
    v6 = 1;
  }
  else
  {
    NumGroups = ZinGetRegisterProgramming<17u>::GetNumGroups(a1);
    Dout = ZinGetRegisterProgramming<19u>::GetDout(a1);
    v6 = ZinGetRegisterProgramming<17u>::GetDout(a1);
  }
  Cout = ZinGetRegisterProgramming<19u>::GetCout(a1);
  v8 = ZinGetRegisterProgramming<19u>::GetNumGroups(a1);
  HasOutputTranspose = ZinGetRegisterProgramming<19u>::HasOutputTranspose(a1);
  if (HasOutputTranspose)
    v10 = Cout;
  else
    v10 = v6;
  if (!HasOutputTranspose)
    v6 = Cout;
  OutputInterleave = ZinGetRegisterProgramming<19u>::GetOutputInterleave(a1);
  result = (float)v6 / (float)OutputInterleave;
  *a2 = v8;
  a2[1] = vcvtps_s32_f32(result);
  a2[2] = NumGroups;
  a2[3] = v10 * (unint64_t)OutputInterleave;
  a2[4] = Dout;
  return result;
}

uint64_t ZinRegisterProgrammingAnalysis<19u>::CalculateLinearDmaSrc1GranularityInX(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t DmaSrc1FormatMode;
  int v15;
  unsigned int Src1Interleave;
  int v18;

  if (ZinGetRegisterProgramming<19u>::IsTileDmaSrc1Compressed(a1))
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaSrc1GranularityInX(v6, v7, v8, v9, v10, v11, v12, v13);
    return 3;
  }
  else
  {
    v18 = 0;
    DmaSrc1FormatMode = ZinGetRegisterProgramming<19u>::GetDmaSrc1FormatMode(a1, &v18);
    if (!(_DWORD)DmaSrc1FormatMode)
    {
      v15 = v18;
      Src1Interleave = ZinGetRegisterProgramming<19u>::GetSrc1Interleave(a1);
      *a3 = ZinIrRegAllocUtil::CalculateLinearDmaGranularityInX(a2, v15, Src1Interleave);
    }
  }
  return DmaSrc1FormatMode;
}

uint64_t ZinRegisterProgrammingAnalysis<19u>::CalculateLinearDmaSrc2GranularityInX(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t DmaSrc2FormatMode;
  int v15;
  unsigned int Src2Interleave;
  int v18;

  if (ZinGetRegisterProgramming<19u>::IsTileDmaSrc2Compressed(a1))
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaSrc1GranularityInX(v6, v7, v8, v9, v10, v11, v12, v13);
    return 3;
  }
  else
  {
    v18 = 0;
    DmaSrc2FormatMode = ZinGetRegisterProgramming<19u>::GetDmaSrc2FormatMode(a1, &v18);
    if (!(_DWORD)DmaSrc2FormatMode)
    {
      v15 = v18;
      Src2Interleave = ZinGetRegisterProgramming<19u>::GetSrc2Interleave(a1);
      *a3 = ZinIrRegAllocUtil::CalculateLinearDmaGranularityInX(a2, v15, Src2Interleave);
    }
  }
  return DmaSrc2FormatMode;
}

uint64_t ZinRegisterProgrammingAnalysis<19u>::CalculateLinearDmaDstGranularityInX(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t DmaDstFormatMode;
  int v15;
  unsigned int OutputInterleave;
  int v18;

  if (ZinGetRegisterProgramming<19u>::IsTileDmaDstCompressed(a1))
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaSrc1GranularityInX(v6, v7, v8, v9, v10, v11, v12, v13);
    return 3;
  }
  else
  {
    v18 = 0;
    DmaDstFormatMode = ZinGetRegisterProgramming<19u>::GetDmaDstFormatMode(a1, &v18);
    if (!(_DWORD)DmaDstFormatMode)
    {
      v15 = v18;
      OutputInterleave = ZinGetRegisterProgramming<19u>::GetOutputInterleave(a1);
      *a3 = ZinIrRegAllocUtil::CalculateLinearDmaGranularityInX(a2, v15, OutputInterleave);
    }
  }
  return DmaDstFormatMode;
}

void ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaSrc1GranularityInX(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid compression config.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinIrChannelToSpaceUnit::ZinIrChannelToSpaceUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v6;
  int v7;
  uint64_t v8;

  v5 = ZinIrUnit::ZinIrUnit((_QWORD *)a1, a3);
  *v5 = &off_24C0220E0;
  v5[7] = off_24C017CA0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    v5[10] = *(_QWORD *)(a2 + 24);
    *((_OWORD *)v5 + 4) = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 96), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = off_24C024430;
  v8 = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 136) = v8;
  return a1;
}

void sub_206DFD048(_Unwind_Exception *a1)
{
  ZinIrUnit *v1;

  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrChannelToSpaceUnit::TensorDimensions(ZinIrChannelToSpaceUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, CFArrayRef *a4)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) - (_QWORD)v4 == 120)
  {
    v5 = *((_DWORD *)this + 35);
    v6 = *((int *)this + 34);
    if (!(_DWORD)v6 || !v5 || (v7 = *((int *)this + 36), !(_DWORD)v7))
      ZinAssertImpl("factor cannot be 0, current factor_x=%d, factor_y=%d, factor_z=%d", v6, *((_DWORD *)this + 35), *((_DWORD *)this + 36));
    result = 0;
    v9 = v4[2] / (v5 * (int)v6 * (int)v7);
    *(_QWORD *)a3 = v4[1];
    *((_QWORD *)a3 + 1) = v9;
    *((_QWORD *)a3 + 4) = v4[5] * v7;
    v10 = v4[4] * v6;
    *((_QWORD *)a3 + 2) = v4[3] * v5;
    *((_QWORD *)a3 + 3) = v10;
  }
  else
  {
    ZinIrUnitStatus::SetError(a4, CFSTR("InvalidBottomCount"));
    return 3;
  }
  return result;
}

uint64_t ZinIrChannelToSpaceUnit::CreateOpcode@<X0>(ZinIrChannelToSpaceUnit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;

  v4 = (uint64_t *)((char *)this + 136);
  v5 = operator new();
  result = ZinIrChannelToSpaceInfo::ZinIrChannelToSpaceInfo(v5, v4);
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v5;
  return result;
}

void sub_206DFD178(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x1081C40468F112ELL);
  _Unwind_Resume(a1);
}

uint64_t ZinIrChannelToSpaceUnit::CreateLayer(ZinIrChannelToSpaceUnit *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  void *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  int v28;
  uint64_t v29;

  ZinIrChannelToSpaceUnit::CreateOpcode(a1, (uint64_t)&v28);
  if (v28)
  {
    v5 = 0;
  }
  else
  {
    v6 = operator new();
    v5 = v6;
    v7 = (std::__shared_weak_count *)(*a3)[1];
    v26 = **a3;
    v27 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    ZinChannelToSpaceLayer::ZinChannelToSpaceLayer(v6, &v29, &v26, (char *)a1 + 64);
    v10 = v27;
    if (v27)
    {
      v11 = (unint64_t *)&v27->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (__int128 *)*((_QWORD *)a1 + 1);
    v21 = v13[4];
    v22 = v13[5];
    v23 = v13[6];
    v24 = *((_DWORD *)v13 + 28);
    v17 = *v13;
    v18 = v13[1];
    v19 = v13[2];
    v20 = v13[3];
    v14 = operator new(0x78uLL);
    v14[4] = v21;
    v14[5] = v22;
    v14[6] = v23;
    *((_DWORD *)v14 + 28) = v24;
    *v14 = v17;
    v14[1] = v18;
    v14[2] = v19;
    v14[3] = v20;
    v25 = v14;
    ZinIrOpLayer::ValidateSemantics(v5);
    if (v25)
      operator delete(v25);
  }
  v15 = v29;
  v29 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return v5;
}

void sub_206DFD324(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v1 - 104);
  if (v3)
  {
    *(_QWORD *)(v1 - 96) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(v1 - 56);
  *(_QWORD *)(v1 - 56) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(exception_object);
}

void ZinIrChannelToSpaceUnit::~ZinIrChannelToSpaceUnit(void **this)
{
  *this = &off_24C0220E0;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
}

{
  *this = &off_24C0220E0;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
  JUMPOUT(0x20BD002F8);
}

void ZinIrResizeAsInfo::ZinIrResizeAsInfo(ZinIrResizeAsInfo *this, const ZinIrResizeAsUnitInfo *a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)this, 60);
  *v4 = &unk_24C01CD68;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)(v4 + 2), a2);
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 2) = &unk_24C020A80;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)this + 22, *((const void **)a2 + 20), *((_QWORD *)a2 + 21), (uint64_t)(*((_QWORD *)a2 + 21) - *((_QWORD *)a2 + 20)) >> 3);
}

void sub_206DFD480(_Unwind_Exception *a1)
{
  ZinIrHalH13g *v1;
  ZinIrTextureUnitInfo *v2;

  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v2);
  ZinIrHalH13g::~ZinIrHalH13g(v1);
  _Unwind_Resume(a1);
}

_QWORD *ZinResizeAsLayer::ZinResizeAsLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  ZinIrKernel *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  ZinIrKernel *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v5 = *a2;
  *a2 = 0;
  v6 = a3[1];
  v17 = *a3;
  v18 = (std::__shared_weak_count *)v6;
  v19 = v5;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v16 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v19, &v17, a4, &v16);
  v9 = v16;
  v16 = 0;
  if (v9)
  {
    ZinIrKernel::~ZinIrKernel(v9);
    MEMORY[0x20BD002F8](v10, 0x1032C40DEE44497);
  }
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *a1 = &off_24C01C558;
  return a1;
}

void sub_206DFD594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t ZinResizeAsLayer::Lower(ZinResizeAsLayer *a1, uint64_t a2)
{
  ZinIrOpLayer **v2;
  uint64_t v3;
  ZinIrOpLayer *v6;
  ZinIrOpLayer *v7;
  const ZinIrTensor *v8;
  int64x2_t *v14;
  int v15;
  std::string *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  ZinIrOpLayer *ResizeLayer;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  ZinResizeTransform *v27;
  uint64_t v28;
  std::string::size_type v29;
  uint64_t v30;
  int v31;
  ZinResizeTransform *v33;
  _OWORD v34[2];
  int v35;
  _QWORD v36[2];
  std::string v37;
  void *__p[2];
  std::string::size_type v39;
  _QWORD v40[4];
  int v41;
  _QWORD v42[4];
  int v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[26];
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  char v56;
  _QWORD v57[3];

  v57[2] = *MEMORY[0x24BDAC8D0];
  v2 = (ZinIrOpLayer **)*((_QWORD *)a1 + 11);
  v3 = *((_QWORD *)a1 + 12);
  if (v3 - (_QWORD)v2 != 16)
    ZinAssertImpl("ResizeAs must have 2 bottoms");
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 8) != 29)
    ZinAssertImpl("Second input for ResizeAs must be ConstIn");
  v7 = *v2;
  v6 = v2[1];
  v8 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)*v2 + 32))(*v2, 0, 0);
  v44 = 0u;
  v45 = 0u;
  v46 = -1;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  memset(v50, 0, sizeof(v50));
  v42[0] = &off_24C01F040;
  memset(&v42[1], 0, 24);
  v51 = 0x100000001;
  __asm { FMOV            V0.2S, #-1.0 }
  v52 = _D0;
  v54 = 0;
  v55 = 0;
  v53 = 0;
  v56 = 0;
  v43 = 41;
  v14 = (int64x2_t *)(*(uint64_t (**)(ZinResizeAsLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  ZinResizeAsLayer::ComputeResizeUnitInfo(a1, (ZinIrResizeUnitInfo *)v42, v8, v14);
  if (ZinResizeLayerUtils::IsResizeNoOP((uint64_t)v8 + 48, (uint64_t)v42))
  {
    memset(v40, 0, sizeof(v40));
    v41 = 1065353216;
    v15 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)a1, v7, v40);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v40);
LABEL_23:
    v31 = v15 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, a1, 0);
    if (*((_QWORD *)v6 + 15) == *((_QWORD *)v6 + 14))
      v31 &= ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, v6, 0);
    if (v31)
      v30 = 0;
    else
      v30 = 3;
    goto LABEL_28;
  }
  std::string::basic_string[abi:ne180100]<0>(&v37, "resizeas_to_resize");
  v16 = std::string::append(&v37, "_xfm", 4uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v39 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = (*(uint64_t (**)(ZinResizeAsLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  ResizeLayer = (ZinIrOpLayer *)ZinResizeAsLayer::CreateResizeLayer((uint64_t)a1, v19, (uint64_t)__p, (uint64_t)v8, v18);
  if (SHIBYTE(v39) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  v21 = *((_QWORD *)v6 + 12);
  if (v21 - *((_QWORD *)v6 + 11) == 8)
    v22 = *(_QWORD *)(v21 - 8);
  else
    v22 = 0;
  v57[0] = a1;
  v57[1] = v22;
  v36[0] = v57;
  v36[1] = 2;
  Layer2TDMapper::SourceLayer::SourceLayer(&v37, v36);
  v23 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, ResizeLayer, (ZinIrOpLayer ***)&v37);
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
  if (v37.__r_.__value_.__l.__size_)
  {
    v37.__r_.__value_.__r.__words[2] = v37.__r_.__value_.__l.__size_;
    operator delete((void *)v37.__r_.__value_.__l.__size_);
  }
  v24 = ZinIrOpLayerGraph::AddEdge(a2, **((_QWORD **)a1 + 11), (uint64_t)ResizeLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  memset(v34, 0, sizeof(v34));
  v35 = 1065353216;
  v15 = v23 & v24 & ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)a1, ResizeLayer, v34);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v34);
  v25 = *((_QWORD *)a1 + 2);
  if (!*(_BYTE *)(v25 + 668))
    goto LABEL_23;
  v26 = *(_QWORD *)ZinIrOpLayer::GetGroupId(ResizeLayer);
  v27 = (ZinResizeTransform *)operator new();
  ZinResizeTransform::ZinResizeTransform(v27, (const ZinIrResizeUnitInfo *)v42);
  v33 = v27;
  ZinIrContext::InsertShapeDependentTransform(v25, v26, (uint64_t *)&v33);
  v28 = (uint64_t)v33;
  v33 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  Layer2TDMapper::LayerTracker::GetRootSourceLayers((Layer2TDMapper::LayerTracker *)(a2 + 152), ResizeLayer, &v37.__r_.__value_.__l.__data_);
  v29 = v37.__r_.__value_.__l.__size_ - v37.__r_.__value_.__r.__words[0];
  if (v37.__r_.__value_.__r.__words[0])
  {
    v37.__r_.__value_.__l.__size_ = v37.__r_.__value_.__r.__words[0];
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (v29 > 0xF)
    goto LABEL_23;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinResizeAsLayer::Lower();
  v30 = 3;
LABEL_28:
  v42[0] = &off_24C01F040;
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)v42);
  return v30;
}

void sub_206DFD9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Unwind_Resume(exception_object);
}

void ZinResizeAsLayer::ComputeResizeUnitInfo(ZinResizeAsLayer *this, ZinIrResizeUnitInfo *a2, const ZinIrTensor *a3, int64x2_t *a4)
{
  uint64_t v7;
  _BYTE *v8;
  _QWORD v9[10];
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *__p;
  _BYTE *v15;
  uint64_t v16;

  v7 = *((_QWORD *)this + 8);
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)v9, (const ZinIrTextureUnitInfo *)(v7 + 16));
  v9[0] = &unk_24C020A80;
  __p = 0;
  v15 = 0;
  v16 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *(const void **)(v7 + 176), *(_QWORD *)(v7 + 184), (uint64_t)(*(_QWORD *)(v7 + 184) - *(_QWORD *)(v7 + 176)) >> 3);
  if ((void **)((char *)a2 + 176) != &__p)
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a2 + 176, (char *)__p, (uint64_t)v15, (v15 - (_BYTE *)__p) >> 3);
  if (v9 == (_QWORD *)a2)
  {
    *((_DWORD *)a2 + 16) = *((_DWORD *)a3 + 22);
  }
  else
  {
    std::vector<ZinIrCoordinateInfo>::__assign_with_size[abi:ne180100]<ZinIrCoordinateInfo*,ZinIrCoordinateInfo*>((char *)a2 + 80, v10, v11, 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v10) >> 2));
    *((_DWORD *)a2 + 16) = *((_DWORD *)a3 + 22);
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a2 + 128, v12, v13, (v13 - (uint64_t)v12) >> 3);
  }
  *((_DWORD *)a2 + 17) = a4[5].i32[2];
  v8 = __p;
  *((_QWORD *)a2 + 9) = v9[9];
  *((_BYTE *)a2 + 200) = 1;
  *(int32x2_t *)((char *)a2 + 156) = vmovn_s64(a4[4]);
  v9[0] = &unk_24C020A80;
  if (v8)
  {
    v15 = v8;
    operator delete(v8);
  }
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)v9);
}

void sub_206DFDC08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)va);
  _Unwind_Resume(a1);
}

uint64_t ZinResizeAsLayer::CreateResizeLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  size_t v15;
  _BYTE *v16;
  const void *v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t ResizeLayer;
  uint64_t *v29;
  ZinIrTensor::MirInfo *v30;
  uint64_t *GroupId;
  ZinIrTensor::MirInfo *v33;
  void *v34;
  void *v35;
  char *v36;
  void *__p[2];
  void (**v38)(ZinIrResizeUnitInfo *__hidden);
  void *v39;
  void *v40;
  _QWORD v41[3];
  char v42;
  _QWORD v43[4];
  int v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[26];
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  char v57;
  _QWORD v58[20];
  void *v59;
  void *v60;
  uint64_t v61;
  _BYTE v62[32];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a1 + 64);
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)v58, (const ZinIrTextureUnitInfo *)(v9 + 16));
  v58[0] = &unk_24C020A80;
  v59 = 0;
  v61 = 0;
  v60 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v59, *(const void **)(v9 + 176), *(_QWORD *)(v9 + 184), (uint64_t)(*(_QWORD *)(v9 + 184) - *(_QWORD *)(v9 + 176)) >> 3);
  v45 = 0u;
  v46 = 0u;
  v43[0] = &off_24C01F040;
  memset(&v43[1], 0, 24);
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  memset(v51, 0, sizeof(v51));
  v52 = 0x100000001;
  __asm { FMOV            V0.2S, #-1.0 }
  v53 = _D0;
  v47 = -1;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v44 = 41;
  ZinResizeAsLayer::ComputeResizeUnitInfo((ZinResizeAsLayer *)a1, (ZinIrResizeUnitInfo *)v43, (const ZinIrTensor *)a4, (int64x2_t *)a5);
  if (*(char *)(a1 + 47) >= 0)
    v15 = *(unsigned __int8 *)(a1 + 47);
  else
    v15 = *(_QWORD *)(a1 + 32);
  v16 = v62;
  std::string::basic_string[abi:ne180100]((uint64_t)v62, v15 + 1);
  if (v62[23] < 0)
    v16 = *(_BYTE **)v62;
  if (v15)
  {
    if (*(char *)(a1 + 47) >= 0)
      v17 = (const void *)(a1 + 24);
    else
      v17 = *(const void **)(a1 + 24);
    memmove(v16, v17, v15);
  }
  *(_WORD *)&v16[v15] = 95;
  v18 = *(char *)(a3 + 23);
  if (v18 >= 0)
    v19 = (const std::string::value_type *)a3;
  else
    v19 = *(const std::string::value_type **)a3;
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(a3 + 23);
  else
    v20 = *(_QWORD *)(a3 + 8);
  v21 = std::string::append((std::string *)v62, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v38 = (void (**)(ZinIrResizeUnitInfo *__hidden))v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(v41, __p);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  if ((v62[23] & 0x80000000) != 0)
    operator delete(*(void **)v62);
  ZinIrResizeInfo::ZinIrResizeInfo((ZinIrResizeInfo *)__p, (const ZinIrResizeUnitInfo *)v43, *(_DWORD *)(a4 + 64), *(_DWORD *)(a4 + 72));
  v23 = *(_QWORD *)(a1 + 16);
  (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a4 + 96) + 80))(v62, *(_QWORD *)(a4 + 96), 0, 0);
  v24 = operator new(0x78uLL);
  v35 = (char *)v24 + 120;
  v36 = (char *)v24 + 120;
  v25 = v66;
  v24[4] = v65;
  v24[5] = v25;
  v24[6] = v67;
  *((_DWORD *)v24 + 28) = v68;
  v26 = *(_OWORD *)&v62[16];
  *v24 = *(_OWORD *)v62;
  v24[1] = v26;
  v27 = v64;
  v24[2] = v63;
  v24[3] = v27;
  v34 = v24;
  ResizeLayer = ZinBuilder::CreateResizeLayer(v23, (uint64_t)v41, (uint64_t)&v34, (__int128 *)(a5 + 48), *(_DWORD *)(a5 + 88), (uint64_t)__p);
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  v29 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)ResizeLayer + 32))(ResizeLayer, 0, 0);
  ZinIrTensor::CopyTensorMirInfo((ZinIrTensor *)a5, &v33);
  ZinIrTensor::SetTensorMirInfo(v29, &v33);
  v30 = v33;
  v33 = 0;
  if (v30)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v33, v30);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId((ZinIrOpLayer *)a1);
  ZinIrOpLayer::SetGroupId(ResizeLayer, *GroupId);
  __p[0] = &unk_24C01ADF0;
  v38 = &off_24C01F040;
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)&v38);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)__p);
  v41[0] = off_24C01FBB0;
  if (v42 < 0)
    operator delete((void *)v41[1]);
  v43[0] = &off_24C01F040;
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)v43);
  v58[0] = &unk_24C020A80;
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)v58);
  return ResizeLayer;
}

void sub_206DFDFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,char a51)
{
  _QWORD *v52;

  v52 = (_QWORD *)a9;
  a9 = 0;
  if (v52)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a9, v52);
  ZinIrResizeInfo::~ZinIrResizeInfo((ZinIrResizeInfo *)&a13);
  a43 = (uint64_t)off_24C01FBB0;
  if (a49 < 0)
    operator delete(__p);
  ZinIrResizeUnitInfo::~ZinIrResizeUnitInfo((ZinIrResizeUnitInfo *)&a51);
  ZinIrResizeAsUnitInfo::~ZinIrResizeAsUnitInfo((ZinIrResizeAsUnitInfo *)&STACK[0x208]);
  _Unwind_Resume(a1);
}

_QWORD *ZinResizeAsLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *GroupId;
  uint64_t v16[2];
  _QWORD *v17;

  v6 = (_QWORD *)operator new();
  v7 = *((_QWORD *)a1 + 8);
  v8 = (_QWORD *)operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((ZinIrOpLayerOpCode *)v8, (const ZinIrOpLayerOpCode *)v7);
  *v8 = &unk_24C01CD68;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)(v8 + 2), (const ZinIrTextureUnitInfo *)(v7 + 16));
  v8[22] = 0;
  v8[2] = &unk_24C020A80;
  v8[23] = 0;
  v8[24] = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(v8 + 22, *(const void **)(v7 + 176), *(_QWORD *)(v7 + 184), (uint64_t)(*(_QWORD *)(v7 + 184) - *(_QWORD *)(v7 + 176)) >> 3);
  v17 = v8;
  v9 = (std::__shared_weak_count *)a2[1];
  v16[0] = *a2;
  v16[1] = (uint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  ZinResizeAsLayer::ZinResizeAsLayer(v6, (uint64_t *)&v17, v16, a3);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v17)
    (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_206DFE208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

void ZinIrResizeAsInfo::~ZinIrResizeAsInfo(ZinIrResizeAsInfo *this)
{
  ZinIrTextureUnitInfo *v2;
  void *v3;

  *(_QWORD *)this = &unk_24C01CD68;
  *((_QWORD *)this + 2) = &unk_24C020A80;
  v2 = (ZinIrResizeAsInfo *)((char *)this + 16);
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v2);
  ZinIrHalH13g::~ZinIrHalH13g(this);
}

{
  ZinIrTextureUnitInfo *v2;
  void *v3;

  *(_QWORD *)this = &unk_24C01CD68;
  *((_QWORD *)this + 2) = &unk_24C020A80;
  v2 = (ZinIrResizeAsInfo *)((char *)this + 16);
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v2);
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

void ZinResizeAsLayer::Lower()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "ResizeAs layer should have 2 source layers to support dynamic shape\n", v0, 2u);
}

uint64_t ZinMirHandleFlattenLayer(uint64_t **a1, ZinFlattenCompositeLayer *a2)
{
  uint64_t Hal;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int WeightFormat;
  int v12;
  _BOOL8 HasPerCoutScale;
  unsigned __int8 v14;
  unsigned __int8 v15;
  _BOOL8 HasPerCoutZeroPoint;
  char v17;
  char InterleaveFactor;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t **v22;
  ZinIrOpLayerGraph ****v23;
  ZinIrOpLayerGraph *v24;
  uint64_t v25;
  ZinIrOpLayer *v26;
  int v27;
  float v28;
  ZinIrOpLayer *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t MaxLogicalKernelWidthForLargeKernelMode;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  _BYTE *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  int v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  ZinIrOpLayerGraph *v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  ZinIrContext *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  _BOOL8 v58;
  unsigned __int8 v59;
  unsigned __int8 v60;
  _BOOL8 v61;
  char v62;
  uint64_t v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  const std::string::value_type *v68;
  std::string::size_type v69;
  std::string *v70;
  _QWORD *InputTensorForAliasCopy;
  _QWORD *v72;
  _QWORD *v73;
  std::string::size_type v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  ZinIrContext *v90;
  uint64_t v91;
  uint64_t v92;
  std::string *v93;
  __int128 v94;
  std::string *v95;
  __int128 v96;
  const std::string::value_type *v97;
  std::string::size_type v98;
  std::string *v99;
  _QWORD *v100;
  _QWORD *v101;
  std::string::size_type v102;
  std::string::size_type v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  std::string::size_type *v113;
  _BYTE *v114;
  char v115;
  char v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD *v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  int v128;
  ZinIrOpLayer *Alias;
  _QWORD *v130;
  BOOL v131;
  std::string *v132;
  ZinIrOpLayer *PhysicalCopyLayer;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  float InterleavedDimensions;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  _DWORD *v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  int v149;
  _QWORD *v150;
  ZinIrOpLayer *v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  ZinIrKernel *v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  uint64_t v161;
  __int128 v162;
  ZinIrKernel *v163;
  std::string *v164;
  __int128 v165;
  ZinKernelSparsityCache *KernelSparsityCache;
  ZinIrOpLayer *v167;
  const ZinIrOpLayerOpCode *v168;
  ZinIrOpLayerOpCode *v169;
  _QWORD *v170;
  std::__shared_weak_count *v171;
  unint64_t *p_shared_owners;
  unint64_t v173;
  std::string *v174;
  __int128 v175;
  std::string *v176;
  __int128 v177;
  void **v178;
  std::string::size_type v179;
  std::string *v180;
  __int128 v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  ZinIrOpLayerOpCode *v185;
  BOOL v186;
  char v187;
  char v188;
  ZinIrKernel *v189;
  _QWORD *v190;
  ZinIrKernel *v191;
  int v192;
  float v194;
  BOOL v195;
  _QWORD *v196;
  ZinIrOpLayer *v197;
  _QWORD *v198;
  BOOL v199;
  std::string *v200;
  ZinIrOpLayer *v201;
  uint64_t v202;
  ZinIrKernel *v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  int v212;
  uint64_t v213;
  std::string *v214;
  __int128 v215;
  std::string *v216;
  __int128 v217;
  std::string *v218;
  std::string::size_type v219;
  std::string *v220;
  __int128 v221;
  ZinKernelSparsityCache *v222;
  ZinIrOpLayer *v223;
  const ZinIrOpLayerOpCode *v224;
  ZinIrOpLayerOpCode *v225;
  uint64_t v226;
  unint64_t *v227;
  unint64_t *v228;
  unint64_t v229;
  std::string *v230;
  __int128 v231;
  std::string *v232;
  __int128 v233;
  std::string *v234;
  std::string::size_type v235;
  std::string *v236;
  __int128 v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  uint64_t v241;
  BOOL v242;
  char v243;
  char v244;
  ZinIrKernel *v245;
  _QWORD *v246;
  const ZinKernelDescriptor *v247;
  uint64_t v248;
  uint64_t v249;
  size_t v250;
  _BYTE *v251;
  char *v252;
  char *v253;
  char *v254;
  char *v255;
  int v256;
  const std::string::value_type *v257;
  std::string::size_type v258;
  std::string *v259;
  __int128 v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  __int128 v275;
  unint64_t *v276;
  unint64_t v277;
  _OWORD *v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t *v281;
  unint64_t v282;
  std::string *v283;
  __int128 v284;
  std::string *v285;
  __int128 v286;
  void **v287;
  std::string::size_type v288;
  std::string *v289;
  __int128 v290;
  ZinIrKernel *v291;
  uint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::string::size_type v299;
  ZinIrOpLayer *v300;
  const ZinIrOpLayerOpCode *v301;
  ZinIrOpLayerOpCode *v302;
  uint64_t *v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  std::string *v307;
  __int128 v308;
  std::string *v309;
  __int128 v310;
  const std::string::value_type *v311;
  std::string::size_type v312;
  std::string *v313;
  __int128 v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  void *v318;
  _BOOL4 v319;
  uint64_t **v320;
  uint64_t *v321;
  int v322;
  ZinIrKernel *v323;
  char v324;
  BOOL v325;
  BOOL v326;
  BOOL v327;
  char v328;
  uint64_t v329;
  uint64_t v330;
  char v331;
  _QWORD *v332;
  _QWORD *v333;
  ZinIrOpLayerGraph *v334;
  ZinIrOpLayer *v335;
  _QWORD v336[4];
  int v337;
  uint64_t v338;
  std::__shared_weak_count *v339;
  _QWORD v340[3];
  char v341;
  std::string v342;
  _QWORD *v343;
  std::__shared_weak_count *v344;
  ZinIrOpLayerOpCode *v345;
  ZinIrKernel *v346;
  _BYTE v347[32];
  uint64_t v348;
  _QWORD *v349;
  _QWORD *v350;
  _QWORD *v351;
  _QWORD *v352;
  int v353;
  uint64_t v354;
  void *v355[2];
  int64_t v356;
  std::string v357;
  ZinIrKernel *v358;
  void *v359[2];
  __int128 v360;
  uint64_t v361;
  _BYTE v362[32];
  std::string::size_type size;
  _BYTE v364[48];
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  _BYTE v370[32];
  uint64_t v371;
  std::string v372;
  std::string v373;
  _BYTE v374[32];
  uint64_t v375;
  std::string __p[12];
  std::string v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;

  v380 = *MEMORY[0x24BDAC8D0];
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)a2 + 2) + 160));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v6 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)a2 + 11) + 32))(**((_QWORD **)a2 + 11), 0, 0);
  v335 = a2;
  v7 = *((_QWORD *)a2 + 26);
  if (!v7)
    goto LABEL_18;
  v8 = *(_DWORD *)(v6 + 88);
  v9 = (_QWORD *)(v6 + 48);
  __p[0].__r_.__value_.__r.__words[0] = 0;
  v10 = *(_QWORD *)(v7 + 136);
  WeightFormat = ZinIrKernel::GetWeightFormat((ZinIrKernel *)v10);
  v12 = (*(unsigned __int8 *)(v10 + 448) >> 6) & 1;
  HasPerCoutScale = ZinIrKernel::HasPerCoutScale(*(ZinIrKernel **)(v7 + 136));
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)HasPerCoutScale);
  v334 = (ZinIrOpLayerGraph *)a1;
  v15 = v14;
  HasPerCoutZeroPoint = ZinIrKernel::HasPerCoutZeroPoint(*(ZinIrKernel **)(v7 + 136));
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)HasPerCoutZeroPoint);
  InterleaveFactor = ZinFlattenCompositeLayer::FindInterleaveFactor((_QWORD *)v5, v12, (int *)(v10 + 328), v9, v8, WeightFormat, v15, v17, *(_QWORD *)(v10 + 416), (uint64_t *)__p);
  if (*(_BYTE *)(v5 + 1881))
    v19 = *(_BYTE *)(v5 + 1880) == 0;
  else
    v19 = 1;
  if (v19)
    v20 = InterleaveFactor;
  else
    v20 = 1;
  if ((v20 & 1) == 0)
    ZinAssertImpl("Error: no valid interleave factor found but transpose/reshape is not supported on the architecture");
  a1 = (uint64_t **)v334;
  if ((InterleaveFactor & 1) == 0)
  {
LABEL_18:
    ZinMirHandleFlattenWithReshape(a1, a2);
    return 0;
  }
  if (*((_QWORD *)a2 + 25))
  {
    if (*(_DWORD *)(*((_QWORD *)a2 + 8) + 8) != 19)
      ZinAssertImpl("Error: must be pointing to Flatten Composite layer");
    v21 = *((_QWORD *)a2 + 2);
    *(_QWORD *)v364 = a2;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v364;
    v22 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)v334 + 8, (unint64_t **)__p);
    v23 = (ZinIrOpLayerGraph ****)((char *)v334 + 104);
    if (v22)
      v23 = (ZinIrOpLayerGraph ****)(v22 + 3);
    v24 = ***v23;
    v25 = *((_QWORD *)a2 + 25);
    ZinObjectNameFactory::ZinObjectNameFactory(__p, (char *)a2 + 24);
    if (ZinIrKernel::IsMutable(*(ZinIrKernel **)(v25 + 136)))
      ZinAssertImpl("Error: goc layer with mutable kernel is not supported for decomposition");
    *(_QWORD *)v364 = a2;
    v377.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    if (ZinIrKernel::HasBias(*(ZinIrKernel **)(v25 + 136)))
    {
      if (ZinIrKernel::HasPerCoutBias(*(ZinIrKernel **)(v25 + 136)))
      {
        v26 = ZinMirHandleGOCAfterFlattenLayer(ZinIrOpLayerGraph *,ZinFlattenCompositeLayer *)::$_1::operator()((uint64_t *)&v377, (uint64_t **)v334, v21, (uint64_t)v24, v25, (uint64_t)__p, 0);
      }
      else
      {
        ZinIrVector::GetAt<float>(*(_QWORD *)(*(_QWORD *)(v25 + 136) + 576), 0);
        v26 = ZinMirHandleGOCAfterFlattenLayer(ZinIrOpLayerGraph *,ZinFlattenCompositeLayer *)::$_0::operator()(v364, (uint64_t **)v334, v21, (uint64_t)v24, (uint64_t)__p, 0, v28);
      }
      v27 = ZinIrOpLayerGraph::SwapEdgeSource((uint64_t)v334, v24, v26, (uint64_t)a2, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
      v24 = v26;
    }
    else
    {
      v27 = 1;
    }
    if (ZinIrKernel::HasScale(*(ZinIrKernel **)(v25 + 136)))
    {
      if (ZinIrKernel::HasPerCoutScale(*(ZinIrKernel **)(v25 + 136)))
      {
        v29 = ZinMirHandleGOCAfterFlattenLayer(ZinIrOpLayerGraph *,ZinFlattenCompositeLayer *)::$_1::operator()((uint64_t *)&v377, (uint64_t **)v334, v21, (uint64_t)v24, v25, (uint64_t)__p, 1);
      }
      else
      {
        ZinIrVector::GetAt<float>(*(_QWORD *)(*(_QWORD *)(v25 + 136) + 568), 0);
        v29 = ZinMirHandleGOCAfterFlattenLayer(ZinIrOpLayerGraph *,ZinFlattenCompositeLayer *)::$_0::operator()(v364, (uint64_t **)v334, v21, (uint64_t)v24, (uint64_t)__p, 1, v194);
      }
      if ((v27 & ZinIrOpLayerGraph::SwapEdgeSource((uint64_t)v334, v24, v29, (uint64_t)a2, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0) & 1) == 0)LABEL_176:ZinAssertImpl("ANE internal failure: graph manipulation error during flatten layer decomposition");
    }
    else if ((v27 & 1) == 0)
    {
      goto LABEL_176;
    }
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
    if (__p[1].__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)__p[0].__r_.__value_.__l.__size_);
  }
  v30 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)a2 + 11) + 32))(**((_QWORD **)a2 + 11), 0, 0);
  v31 = *(_DWORD *)(v30 + 88);
  v32 = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)a2 + 2) + 160));
  v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
  MaxLogicalKernelWidthForLargeKernelMode = GetMaxLogicalKernelWidthForLargeKernelMode(v33, v31);
  v35 = *(_QWORD *)(v33 + 112);
  v36 = *((_QWORD *)a2 + 24);
  v37 = *((_QWORD *)a2 + 26);
  if (*(char *)(v36 + 47) >= 0)
    v38 = *(unsigned __int8 *)(v36 + 47);
  else
    v38 = *(_QWORD *)(v36 + 32);
  std::string::basic_string[abi:ne180100]((uint64_t)v364, v38 + 1);
  if (v364[23] >= 0)
    v39 = v364;
  else
    v39 = *(_BYTE **)v364;
  if (v38)
  {
    v42 = *(char **)(v36 + 24);
    v41 = (char *)(v36 + 24);
    v40 = v42;
    if (v41[23] >= 0)
      v43 = v41;
    else
      v43 = v40;
    memmove(v39, v43, v38);
  }
  *(_WORD *)&v39[v38] = 95;
  v44 = *(char *)(v37 + 47);
  if (v44 >= 0)
    v45 = (const std::string::value_type *)(v37 + 24);
  else
    v45 = *(const std::string::value_type **)(v37 + 24);
  if (v44 >= 0)
    v46 = *(unsigned __int8 *)(v37 + 47);
  else
    v46 = *(_QWORD *)(v37 + 32);
  v47 = std::string::append((std::string *)v364, v45, v46);
  v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(v340, __p);
  v49 = v334;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if ((v364[23] & 0x80000000) != 0)
    operator delete(*(void **)v364);
  if (*(_QWORD *)(v30 + 72) > MaxLogicalKernelWidthForLargeKernelMode)
  {
    v50 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 24) + 64) + 12);
    v51 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)a2 + 11) + 32))(**((_QWORD **)a2 + 11), 0, 0);
    v52 = *(_DWORD *)(v51 + 88);
    v53 = (ZinIrContext *)*((_QWORD *)a2 + 2);
    v54 = *((_QWORD *)a2 + 26);
    (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(v340[0] + 16))(__p, v340, 2);
    v330 = v51 + 48;
    ZinMirCreateNewKernel(v54, (unint64_t *)(v51 + 48), v33, v50, (const void **)&__p[0].__r_.__value_.__l.__data_, (uint64_t *)&v358);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v354 = 0;
    v332 = (_QWORD *)v54;
    v55 = *(_QWORD *)(v54 + 136);
    if (!v55)
      ZinAssertImpl("Error: no conv kernel is found");
    v56 = ZinIrKernel::GetWeightFormat(*(ZinIrKernel **)(v54 + 136));
    v352 = *(_QWORD **)(v55 + 328);
    v353 = *(_DWORD *)(v55 + 336);
    v57 = *(unsigned __int8 *)(v55 + 448);
    v58 = ZinIrKernel::HasPerCoutScale(*(ZinIrKernel **)(v54 + 136));
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v58);
    v60 = v59;
    v61 = ZinIrKernel::HasPerCoutZeroPoint(*(ZinIrKernel **)(v54 + 136));
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v61);
    if ((ZinFlattenCompositeLayer::FindInterleaveFactor((_QWORD *)v33, (v57 >> 6) & 1, (int *)&v352, (_QWORD *)v330, v52, v56, v60, v62, *(_QWORD *)(v55 + 416), &v354) & 1) == 0)ZinAssertImpl("Error: no interleave factor found");
    v63 = **((_QWORD **)a2 + 11);
    (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(v340[0] + 16))(&v377, v340, 1);
    v64 = std::string::append(&v377, "_", 1uLL);
    v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    *(_QWORD *)&v364[16] = *((_QWORD *)&v64->__r_.__value_.__l + 2);
    *(_OWORD *)v364 = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v374, "dcmp_w_alcpy");
    v66 = std::string::append((std::string *)v374, "_xfm", 4uLL);
    v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    *(_QWORD *)&v362[16] = *((_QWORD *)&v66->__r_.__value_.__l + 2);
    *(_OWORD *)v362 = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    if (v362[23] >= 0)
      v68 = v362;
    else
      v68 = *(const std::string::value_type **)v362;
    if (v362[23] >= 0)
      v69 = v362[23];
    else
      v69 = *(_QWORD *)&v362[8];
    v70 = std::string::append((std::string *)v364, v68, v69);
    __p[0] = *v70;
    v70->__r_.__value_.__l.__size_ = 0;
    v70->__r_.__value_.__r.__words[2] = 0;
    v70->__r_.__value_.__r.__words[0] = 0;
    InputTensorForAliasCopy = (_QWORD *)ZinMirCreateInputTensorForAliasCopy((uint64_t **)v334, v63, (uint64_t)v53, v52, (const void **)&__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((v362[23] & 0x80000000) != 0)
      operator delete(*(void **)v362);
    if ((v374[23] & 0x80000000) != 0)
      operator delete(*(void **)v374);
    if ((v364[23] & 0x80000000) != 0)
      operator delete(*(void **)v364);
    if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v377.__r_.__value_.__l.__data_);
    v72 = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*InputTensorForAliasCopy + 32))(InputTensorForAliasCopy, 0, 0);
    v73 = v72;
    v74 = v354 * v72[7];
    v377.__r_.__value_.__r.__words[0] = v72[6];
    v377.__r_.__value_.__l.__size_ = v74;
    v75 = v72[9];
    if (v75 % v354)
      v76 = v75 / v354 + 1;
    else
      v76 = v75 / v354;
    v377.__r_.__value_.__r.__words[2] = v72[8];
    v378 = v76;
    v379 = 1;
    DimensionOrderHint::DimensionOrderHint(&v372, 2);
    ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)&v377, *((_DWORD *)v73 + 22), 2, (uint64_t)&v372, *(_QWORD *)(v33 + 528), v354, 1, (int64x2_t *)v362);
    v77 = operator new();
    ZinIrTensor::MirInfo::MirInfo(v77, 2, v354, 1, &v372, v362);
    v351 = (_QWORD *)v77;
    v78 = InputTensorForAliasCopy[2];
    (*(void (**)(std::string *__return_ptr, _QWORD *, _QWORD, _QWORD))(*InputTensorForAliasCopy + 80))(__p, InputTensorForAliasCopy, 0, 0);
    v79 = operator new(0x78uLL);
    *(_QWORD *)&v364[16] = v79 + 30;
    v79[28] = __p[4].__r_.__value_.__r.__words[2];
    v80 = *(_OWORD *)&__p[4].__r_.__value_.__l.__data_;
    v81 = *(_OWORD *)&__p[2].__r_.__value_.__r.__words[2];
    *((_OWORD *)v79 + 5) = *(_OWORD *)&__p[3].__r_.__value_.__r.__words[1];
    *((_OWORD *)v79 + 6) = v80;
    v82 = *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2];
    *(_OWORD *)v79 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    *((_OWORD *)v79 + 1) = v82;
    v83 = *(_OWORD *)&__p[2].__r_.__value_.__l.__data_;
    *((_OWORD *)v79 + 2) = *(_OWORD *)&__p[1].__r_.__value_.__r.__words[1];
    *((_OWORD *)v79 + 3) = v83;
    *((_OWORD *)v79 + 4) = v81;
    *(_QWORD *)v364 = v79;
    *(_QWORD *)&v364[8] = v79 + 30;
    v84 = *(_QWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*InputTensorForAliasCopy + 32))(InputTensorForAliasCopy, 0, 0)+ 104);
    if (v84)
      v85 = *(_DWORD *)(v84 + 96);
    else
      v85 = 0;
    v350 = v351;
    v351 = 0;
    Alias = (ZinIrOpLayer *)ZinBuilder::CreateAlias(v78, (uint64_t)v340, (uint64_t)v364, v85, (__int128 *)&v377, (uint64_t)&v350);
    v130 = v350;
    v350 = 0;
    if (v130)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v350, v130);
    if (*(_QWORD *)v364)
    {
      *(_QWORD *)&v364[8] = *(_QWORD *)v364;
      operator delete(*(void **)v364);
    }
    *(_QWORD *)v374 = a2;
    *(_QWORD *)v364 = v374;
    *(_QWORD *)&v364[8] = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, v364);
    v131 = ZinIrOpLayerGraph::AddNode((uint64_t **)v334, Alias, (ZinIrOpLayer ***)__p);
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
    if (__p[0].__r_.__value_.__l.__size_)
    {
      __p[0].__r_.__value_.__r.__words[2] = __p[0].__r_.__value_.__l.__size_;
      operator delete((void *)__p[0].__r_.__value_.__l.__size_);
    }
    v328 = ZinIrOpLayerGraph::AddEdge((uint64_t)v334, (uint64_t)InputTensorForAliasCopy, (uint64_t)Alias, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t))(v340[0] + 16))(v364, v340, 1);
    v132 = std::string::append((std::string *)v364, "_physical_copy", 0xEuLL);
    __p[0] = *v132;
    v132->__r_.__value_.__l.__size_ = 0;
    v132->__r_.__value_.__r.__words[2] = 0;
    v132->__r_.__value_.__r.__words[0] = 0;
    PhysicalCopyLayer = ZinMirCreatePhysicalCopyLayer((uint64_t **)v334, (uint64_t)Alias, (uint64_t)v53, v52, (const void **)&__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((v364[23] & 0x80000000) != 0)
      operator delete(*(void **)v364);
    v134 = (_QWORD *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)PhysicalCopyLayer + 32))(PhysicalCopyLayer, 0, 0);
    v135 = v134[9];
    v136 = v134[8] * v134[7] / v354;
    *(_QWORD *)v374 = v134[6];
    *(_QWORD *)&v374[8] = v136;
    *(_QWORD *)&v374[16] = v354;
    *(_QWORD *)&v374[24] = v135;
    v375 = 1;
    InterleavedDimensions = ZinFlattenCompositeLayer::GetInterleavedDimensions((_QWORD *)v330, v354, v359);
    v138 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD, float))(*(_QWORD *)PhysicalCopyLayer + 32))(PhysicalCopyLayer, 0, 0, InterleavedDimensions);
    v326 = v131;
    ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)v374, *(_DWORD *)(v138 + 88), 2, (uint64_t)&v372, *(_QWORD *)(v33 + 528), 1, 1, (int64x2_t *)__p);
    *(_OWORD *)v362 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    *(_OWORD *)&v362[16] = *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2];
    size = __p[1].__r_.__value_.__l.__size_;
    v139 = operator new();
    ZinIrTensor::MirInfo::MirInfo(v139, 2, 1, 1, &v372, v362);
    __p[0].__r_.__value_.__r.__words[0] = 0;
    v140 = v351;
    v351 = (_QWORD *)v139;
    if (v140)
    {
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v351, v140);
      v141 = (_QWORD *)__p[0].__r_.__value_.__r.__words[0];
      __p[0].__r_.__value_.__r.__words[0] = 0;
      if (v141)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)__p, v141);
    }
    v142 = *((_QWORD *)PhysicalCopyLayer + 2);
    (*(void (**)(std::string *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)PhysicalCopyLayer
                                                                                      + 80))(__p, PhysicalCopyLayer, 0, 0);
    v143 = operator new(0x78uLL);
    *(_QWORD *)&v364[16] = v143 + 30;
    v143[28] = __p[4].__r_.__value_.__r.__words[2];
    v144 = *(_OWORD *)&__p[4].__r_.__value_.__l.__data_;
    v145 = *(_OWORD *)&__p[2].__r_.__value_.__r.__words[2];
    *((_OWORD *)v143 + 5) = *(_OWORD *)&__p[3].__r_.__value_.__r.__words[1];
    *((_OWORD *)v143 + 6) = v144;
    v146 = *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2];
    *(_OWORD *)v143 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    *((_OWORD *)v143 + 1) = v146;
    v147 = *(_OWORD *)&__p[2].__r_.__value_.__l.__data_;
    *((_OWORD *)v143 + 2) = *(_OWORD *)&__p[1].__r_.__value_.__r.__words[1];
    *((_OWORD *)v143 + 3) = v147;
    *((_OWORD *)v143 + 4) = v145;
    *(_QWORD *)v364 = v143;
    *(_QWORD *)&v364[8] = v143 + 30;
    v148 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)PhysicalCopyLayer + 32))(PhysicalCopyLayer, 0, 0)+ 104);
    if (v148)
      v149 = *(_DWORD *)(v148 + 96);
    else
      v149 = 0;
    v150 = v351;
    v351 = 0;
    v349 = v150;
    v151 = (ZinIrOpLayer *)ZinBuilder::CreateAlias(v142, (uint64_t)v340, (uint64_t)v364, v149, (__int128 *)v374, (uint64_t)&v349);
    v152 = v349;
    v349 = 0;
    if (v152)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v349, v152);
    if (*(_QWORD *)v364)
    {
      *(_QWORD *)&v364[8] = *(_QWORD *)v364;
      operator delete(*(void **)v364);
    }
    *(_QWORD *)v370 = a2;
    *(_QWORD *)v364 = v370;
    *(_QWORD *)&v364[8] = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, v364);
    v325 = ZinIrOpLayerGraph::AddNode((uint64_t **)v334, v151, (ZinIrOpLayer ***)__p);
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
    if (__p[0].__r_.__value_.__l.__size_)
    {
      __p[0].__r_.__value_.__r.__words[2] = __p[0].__r_.__value_.__l.__size_;
      operator delete((void *)__p[0].__r_.__value_.__l.__size_);
    }
    v153 = v33;
    v154 = (uint64_t)v151;
    v324 = ZinIrOpLayerGraph::AddEdge((uint64_t)v334, (uint64_t)PhysicalCopyLayer, (uint64_t)v151, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v155 = (ZinIrKernel *)v332[17];
    v156 = *((_DWORD *)v155 + 82);
    v157 = *((_DWORD *)v155 + 83);
    v158 = *((_DWORD *)v155 + 84);
    v159 = *((_DWORD *)v155 + 85);
    v160 = *((_DWORD *)v155 + 86);
    v161 = *((int *)v155 + 87);
    *(_OWORD *)v370 = xmmword_207A80930;
    *(int64x2_t *)&v370[16] = vdupq_n_s64(1uLL);
    v371 = 1;
    ZinIrKernel::GetWeightDimensions(v155, (uint64_t)__p);
    *(_OWORD *)&v370[8] = *(_OWORD *)&v374[8];
    *(_QWORD *)v370 = __p[0].__r_.__value_.__r.__words[0];
    *(_QWORD *)&v370[24] = *(_QWORD *)&v374[24];
    details::ZinIrMappedData_Impl<ZinKernelPosition>::ZinIrMappedData_Impl((uint64_t)__p, 1);
    if (!*((_BYTE *)v53 + 1048))
    {
      v162 = *(_OWORD *)(v330 + 16);
      *(_OWORD *)v347 = *(_OWORD *)v330;
      *(_OWORD *)&v347[16] = v162;
      v348 = *(_QWORD *)(v330 + 32);
      GetDeInterleaveShufflingOrder(v347, v354, *(uint64_t *)v370, (uint64_t)v364);
      memset(__p, 0, 40);
      __p[1].__r_.__value_.__s.__data_[16] = v364[40];
      *(_OWORD *)&__p[2].__r_.__value_.__l.__data_ = v365;
      __p[2].__r_.__value_.__r.__words[2] = v366;
      v364[40] = 0;
      v365 = 0uLL;
      *(_QWORD *)&v366 = 0;
      details::ZinIrMappedData_Impl<ZinKernelPosition>::~ZinIrMappedData_Impl((uint64_t)v364);
    }
    v163 = v358;
    (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(v340[0] + 16))(&v357, v340, 2);
    v164 = std::string::append(&v357, "_kernel", 7uLL);
    v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
    *(_QWORD *)&v364[16] = *((_QWORD *)&v164->__r_.__value_.__l + 2);
    *(_OWORD *)v364 = v165;
    v164->__r_.__value_.__l.__size_ = 0;
    v164->__r_.__value_.__r.__words[2] = 0;
    v164->__r_.__value_.__r.__words[0] = 0;
    KernelSparsityCache = (ZinKernelSparsityCache *)ZinIrContext::GetKernelSparsityCache(v53);
    memset(&v373, 0, sizeof(v373));
    ZinIrKernel::ShuffleKernel((uint64_t)v163, (__int128 *)v364, (uint64_t)__p, v156, v157, v158, v159, v160, (uint64_t *)&v346, v161, (uint64_t)v370, v153, KernelSparsityCache, (__int128 *)&v373, 0, 1);
    v49 = v334;
    if ((v364[23] & 0x80000000) != 0)
      operator delete(*(void **)v364);
    if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v357.__r_.__value_.__l.__data_);
    v167 = (ZinIrOpLayer *)operator new();
    v168 = (const ZinIrOpLayerOpCode *)v332[8];
    v169 = (ZinIrOpLayerOpCode *)operator new();
    ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v169, v168);
    *(_QWORD *)v169 = &unk_24C01FA18;
    v345 = v169;
    v170 = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v332 + 40))(v332, 0, 0);
    v171 = (std::__shared_weak_count *)v170[1];
    v343 = (_QWORD *)*v170;
    v344 = v171;
    if (v171)
    {
      p_shared_owners = (unint64_t *)&v171->__shared_owners_;
      do
        v173 = __ldxr(p_shared_owners);
      while (__stxr(v173 + 1, p_shared_owners));
    }
    (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(v340[0] + 16))(&v373, v340, 2);
    v174 = std::string::append(&v373, "_", 1uLL);
    v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
    v357.__r_.__value_.__r.__words[2] = v174->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v357.__r_.__value_.__l.__data_ = v175;
    v174->__r_.__value_.__l.__size_ = 0;
    v174->__r_.__value_.__r.__words[2] = 0;
    v174->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v342, "dcmp_w_conv");
    v176 = std::string::append(&v342, "_xfm", 4uLL);
    v177 = *(_OWORD *)&v176->__r_.__value_.__l.__data_;
    v356 = v176->__r_.__value_.__r.__words[2];
    *(_OWORD *)v355 = v177;
    v176->__r_.__value_.__l.__size_ = 0;
    v176->__r_.__value_.__r.__words[2] = 0;
    v176->__r_.__value_.__r.__words[0] = 0;
    if (v356 >= 0)
      v178 = v355;
    else
      v178 = (void **)v355[0];
    if (v356 >= 0)
      v179 = HIBYTE(v356);
    else
      v179 = (std::string::size_type)v355[1];
    v180 = std::string::append(&v357, (const std::string::value_type *)v178, v179);
    v181 = *(_OWORD *)&v180->__r_.__value_.__l.__data_;
    *(_QWORD *)&v364[16] = *((_QWORD *)&v180->__r_.__value_.__l + 2);
    *(_OWORD *)v364 = v181;
    v180->__r_.__value_.__l.__size_ = 0;
    v180->__r_.__value_.__r.__words[2] = 0;
    v180->__r_.__value_.__r.__words[0] = 0;
    ZinConvLayer::ZinConvLayer(v167, &v345, &v343, v364, &v346);
    if ((v364[23] & 0x80000000) != 0)
      operator delete(*(void **)v364);
    if (SHIBYTE(v356) < 0)
      operator delete(v355[0]);
    if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v342.__r_.__value_.__l.__data_);
    if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v357.__r_.__value_.__l.__data_);
    if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v373.__r_.__value_.__l.__data_);
    v182 = v344;
    if (v344)
    {
      v183 = (unint64_t *)&v344->__shared_owners_;
      do
        v184 = __ldaxr(v183);
      while (__stlxr(v184 - 1, v183));
      if (!v184)
      {
        ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
        std::__shared_weak_count::__release_weak(v182);
      }
    }
    v185 = v345;
    v345 = 0;
    if (v185)
      (*(void (**)(ZinIrOpLayerOpCode *))(*(_QWORD *)v185 + 8))(v185);
    v373.__r_.__value_.__r.__words[0] = (std::string::size_type)v335;
    v357.__r_.__value_.__r.__words[0] = (std::string::size_type)&v373;
    v357.__r_.__value_.__l.__size_ = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(v364, &v357);
    v186 = ZinIrOpLayerGraph::AddNode((uint64_t **)v334, v167, (ZinIrOpLayer ***)v364);
    *(_QWORD *)v364 = &unk_24C02BB18;
    if (*(_QWORD *)&v364[8])
    {
      *(_QWORD *)&v364[16] = *(_QWORD *)&v364[8];
      operator delete(*(void **)&v364[8]);
    }
    v187 = ZinIrOpLayerGraph::AddEdge((uint64_t)v334, v154, (uint64_t)v167, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    memset(v364, 0, 32);
    *(_DWORD *)&v364[32] = 1065353216;
    v188 = v326 & v328 & v325 & v324 & v186 & v187 & ZinIrOpLayerGraph::MoveOutgoingEdges(v334, (uint64_t **)v335, v167, v364);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v364);
    if ((v188 & 1) == 0)
      ZinAssertImpl("ANE internal failure: graph manipulation error during flatten layer decomposition");
    v189 = v346;
    v346 = 0;
    if (v189)
    {
      ZinIrKernel::~ZinIrKernel(v189);
      MEMORY[0x20BD002F8]();
    }
    details::ZinIrMappedData_Impl<ZinKernelPosition>::~ZinIrMappedData_Impl((uint64_t)__p);
    v190 = v351;
    v351 = 0;
    if (v190)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v351, v190);
    if (v372.__r_.__value_.__r.__words[0])
    {
      v372.__r_.__value_.__l.__size_ = v372.__r_.__value_.__r.__words[0];
      operator delete(v372.__r_.__value_.__l.__data_);
    }
    v191 = v358;
    v358 = 0;
    if (!v191)
      goto LABEL_169;
    goto LABEL_168;
  }
  if (*(_QWORD *)(v30 + 64) > v35)
  {
    v86 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 24) + 64) + 12);
    v87 = **((_QWORD **)a2 + 11);
    v88 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v87 + 32))(v87, 0, 0);
    v89 = *(_DWORD *)(v88 + 88);
    v90 = (ZinIrContext *)*((_QWORD *)a2 + 2);
    v91 = *((_QWORD *)a2 + 26);
    (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(v340[0] + 16))(__p, v340, 2);
    v92 = v88 + 48;
    ZinMirCreateNewKernel(v91, (unint64_t *)(v88 + 48), v33, v86, (const void **)&__p[0].__r_.__value_.__l.__data_, (uint64_t *)&v342);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(v340[0] + 16))(&v377, v340, 1);
    v93 = std::string::append(&v377, "_", 1uLL);
    v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
    *(_QWORD *)&v364[16] = *((_QWORD *)&v93->__r_.__value_.__l + 2);
    *(_OWORD *)v364 = v94;
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v374, "dcmp_h_alcpy");
    v95 = std::string::append((std::string *)v374, "_xfm", 4uLL);
    v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
    *(_QWORD *)&v362[16] = *((_QWORD *)&v95->__r_.__value_.__l + 2);
    *(_OWORD *)v362 = v96;
    v95->__r_.__value_.__l.__size_ = 0;
    v95->__r_.__value_.__r.__words[2] = 0;
    v95->__r_.__value_.__r.__words[0] = 0;
    if (v362[23] >= 0)
      v97 = v362;
    else
      v97 = *(const std::string::value_type **)v362;
    if (v362[23] >= 0)
      v98 = v362[23];
    else
      v98 = *(_QWORD *)&v362[8];
    v99 = std::string::append((std::string *)v364, v97, v98);
    __p[0] = *v99;
    v99->__r_.__value_.__l.__size_ = 0;
    v99->__r_.__value_.__r.__words[2] = 0;
    v99->__r_.__value_.__r.__words[0] = 0;
    v100 = (_QWORD *)ZinMirCreateInputTensorForAliasCopy((uint64_t **)v334, v87, (uint64_t)v90, v89, (const void **)&__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((v362[23] & 0x80000000) != 0)
      operator delete(*(void **)v362);
    if ((v374[23] & 0x80000000) != 0)
      operator delete(*(void **)v374);
    if ((v364[23] & 0x80000000) != 0)
      operator delete(*(void **)v364);
    if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v377.__r_.__value_.__l.__data_);
    v101 = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v100 + 32))(v100, 0, 0);
    v102 = v101[7] * v101[8];
    v103 = 1;
    while (v102 > *(_QWORD *)(v33 + 368))
      v102 /= ++v103;
    v377.__r_.__value_.__r.__words[0] = v101[6];
    v377.__r_.__value_.__l.__size_ = v102;
    v118 = v101[9];
    v377.__r_.__value_.__r.__words[2] = v103;
    v378 = v118;
    v379 = 1;
    DimensionOrderHint::DimensionOrderHint(v370, 2);
    v119 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v100 + 32))(v100, 0, 0);
    ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)&v377, *(_DWORD *)(v119 + 88), 2, (uint64_t)v370, *(_QWORD *)(v33 + 528), 1, 1, (int64x2_t *)v362);
    v120 = operator new();
    ZinIrTensor::MirInfo::MirInfo(v120, 2, 1, 1, v370, v362);
    v343 = (_QWORD *)v120;
    v121 = v100[2];
    (*(void (**)(std::string *__return_ptr, _QWORD *, _QWORD, _QWORD))(*v100 + 80))(__p, v100, 0, 0);
    v122 = operator new(0x78uLL);
    *(_QWORD *)&v364[16] = v122 + 30;
    v122[28] = __p[4].__r_.__value_.__r.__words[2];
    v123 = *(_OWORD *)&__p[4].__r_.__value_.__l.__data_;
    v124 = *(_OWORD *)&__p[2].__r_.__value_.__r.__words[2];
    *((_OWORD *)v122 + 5) = *(_OWORD *)&__p[3].__r_.__value_.__r.__words[1];
    *((_OWORD *)v122 + 6) = v123;
    v125 = *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2];
    *(_OWORD *)v122 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    *((_OWORD *)v122 + 1) = v125;
    v126 = *(_OWORD *)&__p[2].__r_.__value_.__l.__data_;
    *((_OWORD *)v122 + 2) = *(_OWORD *)&__p[1].__r_.__value_.__r.__words[1];
    *((_OWORD *)v122 + 3) = v126;
    *((_OWORD *)v122 + 4) = v124;
    *(_QWORD *)v364 = v122;
    *(_QWORD *)&v364[8] = v122 + 30;
    v127 = *(_QWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v100 + 32))(v100, 0, 0) + 104);
    if (v127)
      v128 = *(_DWORD *)(v127 + 96);
    else
      v128 = 0;
    v196 = v343;
    v343 = 0;
    v352 = v196;
    v197 = (ZinIrOpLayer *)ZinBuilder::CreateAlias(v121, (uint64_t)v340, (uint64_t)v364, v128, (__int128 *)&v377, (uint64_t)&v352);
    v198 = v352;
    v352 = 0;
    if (v198)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v352, v198);
    if (*(_QWORD *)v364)
    {
      *(_QWORD *)&v364[8] = *(_QWORD *)v364;
      operator delete(*(void **)v364);
    }
    *(_QWORD *)v374 = v335;
    *(_QWORD *)v364 = v374;
    *(_QWORD *)&v364[8] = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, v364);
    v199 = ZinIrOpLayerGraph::AddNode((uint64_t **)v334, v197, (ZinIrOpLayer ***)__p);
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
    if (__p[0].__r_.__value_.__l.__size_)
    {
      __p[0].__r_.__value_.__r.__words[2] = __p[0].__r_.__value_.__l.__size_;
      operator delete((void *)__p[0].__r_.__value_.__l.__size_);
    }
    v331 = ZinIrOpLayerGraph::AddEdge((uint64_t)v334, (uint64_t)v100, (uint64_t)v197, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t))(v340[0] + 16))(v364, v340, 1);
    v200 = std::string::append((std::string *)v364, "_physical_copy", 0xEuLL);
    __p[0] = *v200;
    v200->__r_.__value_.__l.__size_ = 0;
    v200->__r_.__value_.__r.__words[2] = 0;
    v200->__r_.__value_.__r.__words[0] = 0;
    v201 = ZinMirCreatePhysicalCopyLayer((uint64_t **)v334, (uint64_t)v197, (uint64_t)v90, v89, (const void **)&__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v327 = v199;
    if ((v364[23] & 0x80000000) != 0)
      operator delete(*(void **)v364);
    v329 = (uint64_t)v201;
    v202 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v201 + 32))(v201, 0, 0);
    v333 = (_QWORD *)v91;
    v203 = *(ZinIrKernel **)(v91 + 136);
    v204 = *((_DWORD *)v203 + 82);
    v205 = *((_DWORD *)v203 + 83);
    v206 = *((_DWORD *)v203 + 84);
    v207 = *((_DWORD *)v203 + 85);
    v208 = *((_DWORD *)v203 + 86);
    v209 = *((int *)v203 + 87);
    *(_OWORD *)v374 = xmmword_207A80930;
    *(int64x2_t *)&v374[16] = vdupq_n_s64(1uLL);
    v375 = 1;
    ZinIrKernel::GetWeightDimensions(v203, (uint64_t)__p);
    *(_OWORD *)&v374[8] = *(_OWORD *)(v202 + 56);
    v210 = *(_QWORD *)(v202 + 72);
    *(_QWORD *)v374 = __p[0].__r_.__value_.__r.__words[0];
    *(_QWORD *)&v374[24] = v210;
    details::ZinIrMappedData_Impl<ZinKernelPosition>::ZinIrMappedData_Impl((uint64_t)__p, 1);
    if (!*((_BYTE *)v90 + 1048))
    {
      v211 = *(_OWORD *)(v92 + 16);
      *(_OWORD *)v359 = *(_OWORD *)v92;
      v360 = v211;
      v361 = *(_QWORD *)(v92 + 32);
      GetDeInterleaveShufflingOrder(v359, 1uLL, *(uint64_t *)v374, (uint64_t)v364);
      memset(__p, 0, 40);
      __p[1].__r_.__value_.__s.__data_[16] = v364[40];
      *(_OWORD *)&__p[2].__r_.__value_.__l.__data_ = v365;
      __p[2].__r_.__value_.__r.__words[2] = v366;
      v364[40] = 0;
      v365 = 0uLL;
      *(_QWORD *)&v366 = 0;
      details::ZinIrMappedData_Impl<ZinKernelPosition>::~ZinIrMappedData_Impl((uint64_t)v364);
    }
    v212 = v204;
    v213 = v342.__r_.__value_.__r.__words[0];
    (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(v340[0] + 16))(&v372, v340, 2);
    v214 = std::string::append(&v372, "_", 1uLL);
    v215 = *(_OWORD *)&v214->__r_.__value_.__l.__data_;
    *(_QWORD *)&v347[16] = *((_QWORD *)&v214->__r_.__value_.__l + 2);
    *(_OWORD *)v347 = v215;
    v214->__r_.__value_.__l.__size_ = 0;
    v214->__r_.__value_.__r.__words[2] = 0;
    v214->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v373, "dcmp_w_kernel");
    v216 = std::string::append(&v373, "_xfm", 4uLL);
    v217 = *(_OWORD *)&v216->__r_.__value_.__l.__data_;
    v357.__r_.__value_.__r.__words[2] = v216->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v357.__r_.__value_.__l.__data_ = v217;
    v216->__r_.__value_.__l.__size_ = 0;
    v216->__r_.__value_.__r.__words[2] = 0;
    v216->__r_.__value_.__r.__words[0] = 0;
    if ((v357.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v218 = &v357;
    else
      v218 = (std::string *)v357.__r_.__value_.__r.__words[0];
    if ((v357.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v219 = HIBYTE(v357.__r_.__value_.__r.__words[2]);
    else
      v219 = v357.__r_.__value_.__l.__size_;
    v220 = std::string::append((std::string *)v347, (const std::string::value_type *)v218, v219);
    v221 = *(_OWORD *)&v220->__r_.__value_.__l.__data_;
    *(_QWORD *)&v364[16] = *((_QWORD *)&v220->__r_.__value_.__l + 2);
    *(_OWORD *)v364 = v221;
    v220->__r_.__value_.__l.__size_ = 0;
    v220->__r_.__value_.__r.__words[2] = 0;
    v220->__r_.__value_.__r.__words[0] = 0;
    v222 = (ZinKernelSparsityCache *)ZinIrContext::GetKernelSparsityCache(v90);
    v355[0] = 0;
    v355[1] = 0;
    v356 = 0;
    ZinIrKernel::ShuffleKernel(v213, (__int128 *)v364, (uint64_t)__p, v212, v205, v206, v207, v208, (uint64_t *)&v358, v209, (uint64_t)v374, v33, v222, (__int128 *)v355, 0, 1);
    v49 = v334;
    if ((v364[23] & 0x80000000) != 0)
      operator delete(*(void **)v364);
    if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v357.__r_.__value_.__l.__data_);
    if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v373.__r_.__value_.__l.__data_);
    if ((v347[23] & 0x80000000) != 0)
      operator delete(*(void **)v347);
    if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v372.__r_.__value_.__l.__data_);
    v223 = (ZinIrOpLayer *)operator new();
    v224 = (const ZinIrOpLayerOpCode *)v333[8];
    v225 = (ZinIrOpLayerOpCode *)operator new();
    ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v225, v224);
    *(_QWORD *)v225 = &unk_24C01FA18;
    v354 = (uint64_t)v225;
    v226 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v333 + 40))(v333, 0, 0);
    v227 = *(unint64_t **)(v226 + 8);
    v355[0] = *(void **)v226;
    v355[1] = v227;
    if (v227)
    {
      v228 = v227 + 1;
      do
        v229 = __ldxr(v228);
      while (__stxr(v229 + 1, v228));
    }
    (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(v340[0] + 16))(&v372, v340, 2);
    v230 = std::string::append(&v372, "_", 1uLL);
    v231 = *(_OWORD *)&v230->__r_.__value_.__l.__data_;
    *(_QWORD *)&v347[16] = *((_QWORD *)&v230->__r_.__value_.__l + 2);
    *(_OWORD *)v347 = v231;
    v230->__r_.__value_.__l.__size_ = 0;
    v230->__r_.__value_.__r.__words[2] = 0;
    v230->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v373, "decomph_conv");
    v232 = std::string::append(&v373, "_xfm", 4uLL);
    v233 = *(_OWORD *)&v232->__r_.__value_.__l.__data_;
    v357.__r_.__value_.__r.__words[2] = v232->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v357.__r_.__value_.__l.__data_ = v233;
    v232->__r_.__value_.__l.__size_ = 0;
    v232->__r_.__value_.__r.__words[2] = 0;
    v232->__r_.__value_.__r.__words[0] = 0;
    if ((v357.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v234 = &v357;
    else
      v234 = (std::string *)v357.__r_.__value_.__r.__words[0];
    if ((v357.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v235 = HIBYTE(v357.__r_.__value_.__r.__words[2]);
    else
      v235 = v357.__r_.__value_.__l.__size_;
    v236 = std::string::append((std::string *)v347, (const std::string::value_type *)v234, v235);
    v237 = *(_OWORD *)&v236->__r_.__value_.__l.__data_;
    *(_QWORD *)&v364[16] = *((_QWORD *)&v236->__r_.__value_.__l + 2);
    *(_OWORD *)v364 = v237;
    v236->__r_.__value_.__l.__size_ = 0;
    v236->__r_.__value_.__r.__words[2] = 0;
    v236->__r_.__value_.__r.__words[0] = 0;
    ZinConvLayer::ZinConvLayer(v223, &v354, v355, v364, &v358);
    if ((v364[23] & 0x80000000) != 0)
      operator delete(*(void **)v364);
    if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v357.__r_.__value_.__l.__data_);
    if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v373.__r_.__value_.__l.__data_);
    if ((v347[23] & 0x80000000) != 0)
      operator delete(*(void **)v347);
    if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v372.__r_.__value_.__l.__data_);
    v238 = (std::__shared_weak_count *)v355[1];
    if (v355[1])
    {
      v239 = (unint64_t *)((char *)v355[1] + 8);
      do
        v240 = __ldaxr(v239);
      while (__stlxr(v240 - 1, v239));
      if (!v240)
      {
        ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
        std::__shared_weak_count::__release_weak(v238);
      }
    }
    v241 = v354;
    v354 = 0;
    if (v241)
      (*(void (**)(uint64_t))(*(_QWORD *)v241 + 8))(v241);
    v372.__r_.__value_.__r.__words[0] = (std::string::size_type)v335;
    *(_QWORD *)v347 = &v372;
    *(_QWORD *)&v347[8] = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(v364, v347);
    v242 = ZinIrOpLayerGraph::AddNode((uint64_t **)v334, v223, (ZinIrOpLayer ***)v364);
    *(_QWORD *)v364 = &unk_24C02BB18;
    if (*(_QWORD *)&v364[8])
    {
      *(_QWORD *)&v364[16] = *(_QWORD *)&v364[8];
      operator delete(*(void **)&v364[8]);
    }
    v243 = ZinIrOpLayerGraph::AddEdge((uint64_t)v334, v329, (uint64_t)v223, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    memset(v364, 0, 32);
    *(_DWORD *)&v364[32] = 1065353216;
    v244 = v327 & v331 & v242 & v243 & ZinIrOpLayerGraph::MoveOutgoingEdges(v334, (uint64_t **)v335, v223, v364);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v364);
    if ((v244 & 1) == 0)
      ZinAssertImpl("ANE internal failure: graph manipulation error during flatten layer decomposition");
    v245 = v358;
    v358 = 0;
    if (v245)
    {
      ZinIrKernel::~ZinIrKernel(v245);
      MEMORY[0x20BD002F8]();
    }
    details::ZinIrMappedData_Impl<ZinKernelPosition>::~ZinIrMappedData_Impl((uint64_t)__p);
    v246 = v343;
    v343 = 0;
    if (v246)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v343, v246);
    if (*(_QWORD *)v370)
    {
      *(_QWORD *)&v370[8] = *(_QWORD *)v370;
      operator delete(*(void **)v370);
    }
    v191 = (ZinIrKernel *)v342.__r_.__value_.__r.__words[0];
    v342.__r_.__value_.__r.__words[0] = 0;
    if (!v191)
      goto LABEL_169;
LABEL_168:
    ZinIrKernel::~ZinIrKernel(v191);
    MEMORY[0x20BD002F8]();
LABEL_169:
    v192 = 1;
LABEL_170:
    if ((v192 & ZinIrOpLayerGraph::RemoveNode(v49, v335, 0) & 1) == 0)
      ZinAssertImpl("ANE internal failure: graph manipulation error during flatten layer decomposition");
    goto LABEL_171;
  }
  v104 = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)a2 + 2) + 160));
  v105 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v104 + 16))(v104);
  v106 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)a2 + 11) + 32))(**((_QWORD **)a2 + 11), 0, 0);
  v107 = *((_QWORD *)a2 + 26);
  if (v107)
  {
    v108 = v106;
    v109 = *((_QWORD *)a2 + 25);
    v110 = ZinIrKernel::GetWeightFormat(*(ZinIrKernel **)(v107 + 136));
    HIDWORD(__p[0].__r_.__value_.__r.__words[1]) = 0;
    LOWORD(__p[0].__r_.__value_.__r.__words[2]) = 0;
    HIDWORD(__p[0].__r_.__value_.__r.__words[2]) = 0;
    LOWORD(__p[1].__r_.__value_.__l.__data_) = 0;
    *(_OWORD *)&__p[1].__r_.__value_.__r.__words[1] = 0u;
    memset(&__p[2], 0, sizeof(std::string));
    LOWORD(__p[0].__r_.__value_.__r.__words[1]) = 0;
    *(int64x2_t *)&__p[4].__r_.__value_.__r.__words[2] = vdupq_n_s64(1uLL);
    *(_OWORD *)&__p[5].__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[4].__r_.__value_.__r.__words[2];
    __p[6].__r_.__value_.__r.__words[0] = 1;
    *(_OWORD *)&__p[7].__r_.__value_.__r.__words[1] = 0uLL;
    __p[8].__r_.__value_.__r.__words[0] = 0;
    *(_OWORD *)&__p[8].__r_.__value_.__r.__words[1] = xmmword_207A85790;
    LODWORD(__p[9].__r_.__value_.__l.__data_) = 1;
    __p[9].__r_.__value_.__l.__size_ = 1;
    LODWORD(__p[9].__r_.__value_.__r.__words[2]) = 0;
    *(_OWORD *)&__p[10].__r_.__value_.__l.__data_ = 1uLL;
    LODWORD(__p[11].__r_.__value_.__r.__words[1]) = 0;
    __p[10].__r_.__value_.__r.__words[2] = 0;
    __p[11].__r_.__value_.__r.__words[0] = 0;
    __p[0].__r_.__value_.__r.__words[0] = v110;
    v111 = *(_QWORD *)(v107 + 136);
    __p[3].__r_.__value_.__r.__words[0] = *(_QWORD *)(v111 + 248);
    *(_OWORD *)&__p[3].__r_.__value_.__r.__words[1] = *(_OWORD *)(v108 + 56);
    *(_OWORD *)&__p[4].__r_.__value_.__l.__data_ = *(_OWORD *)(v108 + 72);
    v112 = *(_DWORD *)(v111 + 336);
    __p[6].__r_.__value_.__l.__size_ = *(_QWORD *)(v111 + 328);
    v113 = (std::string::size_type *)(v111 + 340);
    LODWORD(v111) = *(_DWORD *)(v111 + 348);
    LODWORD(__p[6].__r_.__value_.__r.__words[2]) = v112;
    HIDWORD(__p[7].__r_.__value_.__r.__words[0]) = v111;
    *(std::string::size_type *)((char *)&__p[6].__r_.__value_.__r.__words[2] + 4) = *v113;
    if (v109)
    {
      v114 = *(_BYTE **)(v109 + 136);
      if (v114)
      {
        v115 = v114[185];
        v116 = v114[193];
        v117 = v114[448];
        __p[0].__r_.__value_.__s.__data_[9] = v115 & 1;
        LOBYTE(v114) = v117 & 0x18;
        __p[0].__r_.__value_.__s.__data_[17] = v116 & 1;
      }
    }
    else
    {
      LOBYTE(v114) = 0;
    }
    __p[11].__r_.__value_.__s.__data_[8] = (char)v114;
    __p[1].__r_.__value_.__s.__data_[1] = 0;
    ZinKernelDescriptorStrides((int *)&__p[6].__r_.__value_.__r.__words[1], (int *)&__p[6].__r_.__value_.__r.__words[2] + 1, __p[3].__r_.__value_.__r.__words, &__p[7].__r_.__value_.__r.__words[1], v364);
    *(_OWORD *)&__p[4].__r_.__value_.__r.__words[2] = *(_OWORD *)v364;
    *(_OWORD *)&__p[5].__r_.__value_.__r.__words[1] = *(_OWORD *)&v364[16];
    __p[6].__r_.__value_.__r.__words[0] = *(_QWORD *)&v364[32];
    if (ZinIrKernel::HasVectorPalettizedWeight(*(ZinIrKernel **)(v107 + 136)))
      ZinAssertImpl("The inner product layer cannot have vector palettization in FlattenCompositeLayer");
    v195 = ZinKernelSizeEstimateUtil::EstimateKMEMFootprintPerCoutElement((ZinKernelSizeEstimateUtil *)__p, v247) <= *(_QWORD *)(v105 + 480);
  }
  else
  {
    v195 = 0;
  }
  if (v195 || !*(_BYTE *)(v33 + 1881) || !*(_BYTE *)(v33 + 1880))
  {
    v248 = *((_QWORD *)a2 + 26);
    v249 = *((_QWORD *)a2 + 24);
    if (*(char *)(v249 + 47) >= 0)
      v250 = *(unsigned __int8 *)(v249 + 47);
    else
      v250 = *(_QWORD *)(v249 + 32);
    std::string::basic_string[abi:ne180100]((uint64_t)v364, v250 + 1);
    if (v364[23] >= 0)
      v251 = v364;
    else
      v251 = *(_BYTE **)v364;
    if (v250)
    {
      v254 = *(char **)(v249 + 24);
      v253 = (char *)(v249 + 24);
      v252 = v254;
      if (v253[23] >= 0)
        v255 = v253;
      else
        v255 = v252;
      memmove(v251, v255, v250);
    }
    *(_WORD *)&v251[v250] = 95;
    v256 = *(char *)(v248 + 47);
    if (v256 >= 0)
      v257 = (const std::string::value_type *)(v248 + 24);
    else
      v257 = *(const std::string::value_type **)(v248 + 24);
    if (v256 >= 0)
      v258 = *(unsigned __int8 *)(v248 + 47);
    else
      v258 = *(_QWORD *)(v248 + 32);
    v259 = std::string::append((std::string *)v364, v257, v258);
    v260 = *(_OWORD *)&v259->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v259->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v260;
    v259->__r_.__value_.__l.__size_ = 0;
    v259->__r_.__value_.__r.__words[2] = 0;
    v259->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(&v377, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((v364[23] & 0x80000000) != 0)
      operator delete(*(void **)v364);
    v261 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 24) + 64) + 12);
    v262 = *(_QWORD *)(v248 + 136);
    v263 = *(_QWORD *)(v262 + 584);
    v264 = *(_OWORD *)(v263 + 8);
    v265 = *(_OWORD *)(v263 + 24);
    v266 = *(_OWORD *)(v263 + 40);
    v365 = *(_OWORD *)(v263 + 56);
    v267 = *(_OWORD *)(v263 + 72);
    v268 = *(_OWORD *)(v263 + 88);
    v269 = *(_OWORD *)(v263 + 120);
    v368 = *(_OWORD *)(v263 + 104);
    v369 = v269;
    v366 = v267;
    v367 = v268;
    *(_OWORD *)&v364[16] = v265;
    *(_OWORD *)&v364[32] = v266;
    *(_OWORD *)v364 = v264;
    v270 = *(_QWORD *)(v30 + 56);
    v271 = *(_QWORD *)(v30 + 64);
    *((_QWORD *)&v365 + 1) = v270;
    *(_QWORD *)&v366 = v271;
    v272 = *(_QWORD *)(v30 + 72);
    *((_QWORD *)&v366 + 1) = v272;
    if (v261 == 1)
    {
      v272 *= v270;
      v273 = 1;
    }
    else
    {
      v273 = v272 * v271;
      *((_QWORD *)&v367 + 1) = v273 * v270;
      v270 = 1;
    }
    *(_QWORD *)&v369 = v270;
    *(_QWORD *)&v368 = v273;
    *((_QWORD *)&v368 + 1) = v272;
    v372.__r_.__value_.__r.__words[0] = 0;
    std::allocate_shared[abi:ne180100]<ZinIrTransformWeightAlias,std::allocator<ZinIrTransformWeightAlias>,ZinKernelDimensions &,ZinKernelDimensions &,void>(&v365, (uint64_t)&v367 + 8, v347);
    v274 = *(_QWORD *)(v262 + 584);
    v275 = *(_OWORD *)v347;
    *(_OWORD *)v374 = *(_OWORD *)v347;
    if (*(_QWORD *)&v347[8])
    {
      v276 = (unint64_t *)(*(_QWORD *)&v347[8] + 8);
      do
        v277 = __ldxr(v276);
      while (__stxr(v277 + 1, v276));
    }
    memset(__p, 0, 24);
    *(_QWORD *)v362 = __p;
    v362[8] = 0;
    v278 = operator new(0x10uLL);
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v278;
    __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v278;
    __p[0].__r_.__value_.__r.__words[2] = (std::string::size_type)(v278 + 1);
    *v278 = v275;
    if (*((_QWORD *)&v275 + 1))
    {
      v279 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
      do
        v280 = __ldxr(v279);
      while (__stxr(v280 + 1, v279));
    }
    __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v278 + 1);
    ZinIrWeight::Transform(v274, (uint64_t)__p, (uint64_t *)&v372);
    *(_QWORD *)v362 = __p;
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)v362);
    if (*((_QWORD *)&v275 + 1))
    {
      v281 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
      do
        v282 = __ldaxr(v281);
      while (__stlxr(v282 - 1, v281));
      if (!v282)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v275 + 1) + 16))(*((_QWORD *)&v275 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v275 + 1));
      }
    }
    if (ZinIrKernel::HasScale(*(ZinIrKernel **)(v248 + 136)))
      std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(*(_QWORD *)(*(_QWORD *)(v248 + 136) + 568), (uint64_t *)&v357);
    else
      v357.__r_.__value_.__r.__words[0] = 0;
    if (ZinIrKernel::HasBias(*(ZinIrKernel **)(v248 + 136)))
      std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(*(_QWORD *)(*(_QWORD *)(v248 + 136) + 576), (uint64_t *)&v373);
    else
      v373.__r_.__value_.__r.__words[0] = 0;
    if (ZinIrKernel::HasZeroPoint(*(ZinIrKernel **)(v248 + 136)))
      std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(*(_QWORD *)(*(_QWORD *)(v248 + 136) + 592), (uint64_t *)v355);
    else
      v355[0] = 0;
    ZinObjectNameFactory::CreateName((uint64_t)&v377, 2u, (std::string *)v362);
    v283 = std::string::append((std::string *)v362, "_", 1uLL);
    v284 = *(_OWORD *)&v283->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v283->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v284;
    v283->__r_.__value_.__l.__size_ = 0;
    v283->__r_.__value_.__r.__words[2] = 0;
    v283->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v370, "flatten_kernel");
    v285 = std::string::append((std::string *)v370, "_xfm", 4uLL);
    v286 = *(_OWORD *)&v285->__r_.__value_.__l.__data_;
    *(_QWORD *)&v360 = *((_QWORD *)&v285->__r_.__value_.__l + 2);
    *(_OWORD *)v359 = v286;
    v285->__r_.__value_.__l.__size_ = 0;
    v285->__r_.__value_.__r.__words[2] = 0;
    v285->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v360) & 0x80u) == 0)
      v287 = v359;
    else
      v287 = (void **)v359[0];
    if ((SBYTE7(v360) & 0x80u) == 0)
      v288 = BYTE7(v360);
    else
      v288 = (std::string::size_type)v359[1];
    v289 = std::string::append(__p, (const std::string::value_type *)v287, v288);
    v290 = *(_OWORD *)&v289->__r_.__value_.__l.__data_;
    *(_QWORD *)&v374[16] = *((_QWORD *)&v289->__r_.__value_.__l + 2);
    *(_OWORD *)v374 = v290;
    v289->__r_.__value_.__l.__size_ = 0;
    v289->__r_.__value_.__r.__words[2] = 0;
    v289->__r_.__value_.__r.__words[0] = 0;
    if (SBYTE7(v360) < 0)
      operator delete(v359[0]);
    if ((v370[23] & 0x80000000) != 0)
      operator delete(*(void **)v370);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((v362[23] & 0x80000000) != 0)
      operator delete(*(void **)v362);
    memcpy(__p, (const void *)(*(_QWORD *)(v248 + 136) + 176), 0x118uLL);
    *(_OWORD *)&__p[3].__r_.__value_.__l.__data_ = v365;
    *(_OWORD *)&__p[3].__r_.__value_.__r.__words[2] = v366;
    __p[2] = *(std::string *)&v364[24];
    __p[4].__r_.__value_.__l.__size_ = v367;
    *(_OWORD *)&__p[1].__r_.__value_.__r.__words[1] = *(_OWORD *)&v364[8];
    ZinKernelDescriptorStrides((int *)&__p[6].__r_.__value_.__r.__words[1], (int *)&__p[6].__r_.__value_.__r.__words[2] + 1, __p[3].__r_.__value_.__r.__words, &__p[7].__r_.__value_.__r.__words[1], v362);
    *(_OWORD *)&__p[4].__r_.__value_.__r.__words[2] = *(_OWORD *)v362;
    *(_OWORD *)&__p[5].__r_.__value_.__r.__words[1] = *(_OWORD *)&v362[16];
    __p[6].__r_.__value_.__r.__words[0] = size;
    v291 = (ZinIrKernel *)operator new();
    ZinIrKernel::ZinIrKernel(v291, v374, __p, &v372, &v357, &v373, v355, 2);
    v342.__r_.__value_.__r.__words[0] = (std::string::size_type)v291;
    ZinIrKernel::SetActivationParams(v291, (const ZinIrActivationParams *)(*(_QWORD *)(v248 + 136) + 616));
    v292 = *(_QWORD *)(v248 + 136);
    if ((*(_QWORD *)(v292 + 584) || *(_QWORD *)(v292 + 600)) && *(_BYTE *)(v292 + 160))
      ZinIrKernel::SetMustCompressWeight((uint64_t)v291, *(_DWORD *)(v292 + 164));
    if ((v374[23] & 0x80000000) != 0)
      operator delete(*(void **)v374);
    v293 = v355[0];
    v355[0] = 0;
    if (v293)
      std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)v355, (uint64_t)v293);
    v294 = v373.__r_.__value_.__r.__words[0];
    v373.__r_.__value_.__r.__words[0] = 0;
    if (v294)
      std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v373, v294);
    v295 = v357.__r_.__value_.__r.__words[0];
    v357.__r_.__value_.__r.__words[0] = 0;
    if (v295)
      std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v357, v295);
    v296 = *(std::__shared_weak_count **)&v347[8];
    if (*(_QWORD *)&v347[8])
    {
      v297 = (unint64_t *)(*(_QWORD *)&v347[8] + 8);
      do
        v298 = __ldaxr(v297);
      while (__stlxr(v298 - 1, v297));
      if (!v298)
      {
        ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
        std::__shared_weak_count::__release_weak(v296);
      }
    }
    v299 = v372.__r_.__value_.__r.__words[0];
    v372.__r_.__value_.__r.__words[0] = 0;
    if (v299)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v299 + 16))(v299);
    v377.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
    if (SHIBYTE(v378) < 0)
      operator delete((void *)v377.__r_.__value_.__l.__size_);
    v300 = (ZinIrOpLayer *)operator new();
    v301 = *(const ZinIrOpLayerOpCode **)(v37 + 64);
    v302 = (ZinIrOpLayerOpCode *)operator new();
    ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v302, v301);
    *(_QWORD *)v302 = &unk_24C01FA18;
    v359[0] = v302;
    v303 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v37 + 40))(v37, 0, 0);
    v304 = (std::__shared_weak_count *)v303[1];
    v338 = *v303;
    v339 = v304;
    if (v304)
    {
      v305 = (unint64_t *)&v304->__shared_owners_;
      do
        v306 = __ldxr(v305);
      while (__stxr(v306 + 1, v305));
    }
    ZinObjectNameFactory::CreateName((uint64_t)v340, 1u, &v377);
    v307 = std::string::append(&v377, "_", 1uLL);
    v308 = *(_OWORD *)&v307->__r_.__value_.__l.__data_;
    *(_QWORD *)&v364[16] = *((_QWORD *)&v307->__r_.__value_.__l + 2);
    *(_OWORD *)v364 = v308;
    v307->__r_.__value_.__l.__size_ = 0;
    v307->__r_.__value_.__r.__words[2] = 0;
    v307->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v374, "decomp_single_conv");
    v309 = std::string::append((std::string *)v374, "_xfm", 4uLL);
    v310 = *(_OWORD *)&v309->__r_.__value_.__l.__data_;
    *(_QWORD *)&v362[16] = *((_QWORD *)&v309->__r_.__value_.__l + 2);
    *(_OWORD *)v362 = v310;
    v309->__r_.__value_.__l.__size_ = 0;
    v309->__r_.__value_.__r.__words[2] = 0;
    v309->__r_.__value_.__r.__words[0] = 0;
    if (v362[23] >= 0)
      v311 = v362;
    else
      v311 = *(const std::string::value_type **)v362;
    if (v362[23] >= 0)
      v312 = v362[23];
    else
      v312 = *(_QWORD *)&v362[8];
    v313 = std::string::append((std::string *)v364, v311, v312);
    v314 = *(_OWORD *)&v313->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v313->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v314;
    v313->__r_.__value_.__l.__size_ = 0;
    v313->__r_.__value_.__r.__words[2] = 0;
    v313->__r_.__value_.__r.__words[0] = 0;
    ZinConvLayer::ZinConvLayer(v300, v359, &v338, __p, &v342);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((v362[23] & 0x80000000) != 0)
      operator delete(*(void **)v362);
    if ((v374[23] & 0x80000000) != 0)
      operator delete(*(void **)v374);
    if ((v364[23] & 0x80000000) != 0)
      operator delete(*(void **)v364);
    if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v377.__r_.__value_.__l.__data_);
    v315 = v339;
    if (v339)
    {
      v316 = (unint64_t *)&v339->__shared_owners_;
      do
        v317 = __ldaxr(v316);
      while (__stlxr(v317 - 1, v316));
      if (!v317)
      {
        ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
        std::__shared_weak_count::__release_weak(v315);
      }
    }
    v318 = v359[0];
    v359[0] = 0;
    if (v318)
      (*(void (**)(void *))(*(_QWORD *)v318 + 8))(v318);
    v377.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    *(_QWORD *)v364 = &v377;
    *(_QWORD *)&v364[8] = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, v364);
    v319 = ZinIrOpLayerGraph::AddNode((uint64_t **)v334, v300, (ZinIrOpLayer ***)__p);
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
    if (__p[0].__r_.__value_.__l.__size_)
    {
      __p[0].__r_.__value_.__r.__words[2] = __p[0].__r_.__value_.__l.__size_;
      operator delete((void *)__p[0].__r_.__value_.__l.__size_);
    }
    *(_QWORD *)v364 = a2;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v364;
    v320 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)v334 + 8, (unint64_t **)__p);
    if (v320)
      v321 = (uint64_t *)(v320 + 3);
    else
      v321 = (uint64_t *)((char *)v334 + 104);
    v322 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>((uint64_t)v334, v321, (uint64_t)v300);
    memset(v336, 0, sizeof(v336));
    v337 = 1065353216;
    v192 = v319 & v322 & ZinIrOpLayerGraph::MoveOutgoingEdges(v334, (uint64_t **)a2, v300, v336);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v336);
    v323 = (ZinIrKernel *)v342.__r_.__value_.__r.__words[0];
    v342.__r_.__value_.__r.__words[0] = 0;
    if (v323)
    {
      ZinIrKernel::~ZinIrKernel(v323);
      MEMORY[0x20BD002F8]();
    }
    goto LABEL_170;
  }
  ZinMirHandleFlattenWithReshape((uint64_t **)v334, a2);
LABEL_171:
  v340[0] = off_24C01FBB0;
  if (v341 < 0)
    operator delete((void *)v340[1]);
  return 0;
}

void sub_206E00958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  _QWORD *v43;
  void *v44;

  details::ZinIrMappedData_Impl<ZinKernelPosition>::~ZinIrMappedData_Impl((uint64_t)&STACK[0x320]);
  v43 = (_QWORD *)a42;
  a42 = 0;
  if (v43)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a42, v43);
  v44 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v44;
    operator delete(v44);
  }
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)&a39, 0);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(a1);
}

void ZinMirHandleFlattenWithReshape(uint64_t **a1, ZinFlattenCompositeLayer *a2)
{
  uint64_t Hal;
  uint64_t v5;
  BOOL v6;
  uint64_t *v7;
  size_t v8;
  std::string *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  const std::string::value_type *v13;
  const std::string::value_type *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  ZinIrOpLayer *v20;
  ZinIrOpLayer *v21;
  uint64_t v22;
  uint64_t v23;
  ZinIrOpLayer *Transpose;
  std::string::size_type v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  ZinIrOpLayer *Reshape;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char *v35;
  _DWORD *v36;
  _BOOL4 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  ZinIrOpLayer *v43;
  _BOOL4 v44;
  _QWORD *v45;
  ZinIrOpLayer *v46;
  _BOOL4 v47;
  _QWORD *v48;
  int v49;
  ZinIrOpLayer *v50;
  ZinIrOpLayer *v51;
  uint64_t v52;
  uint64_t **v53;
  uint64_t *v54;
  _OWORD v55[2];
  int v56;
  void *v57;
  uint64_t v58;
  char *v59;
  void *__p[2];
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  std::string v65;
  _QWORD v66[3];
  char v67;
  _QWORD v68[3];

  v68[1] = *MEMORY[0x24BDAC8D0];
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)a2 + 2) + 160));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  if (*(_BYTE *)(v5 + 1881))
    v6 = *(_BYTE *)(v5 + 1880) == 0;
  else
    v6 = 1;
  if (v6)
    ZinAssertImpl("Flatten can't be lowered since reshape or transpose is not supported on this arch");
  v7 = (uint64_t *)*((_QWORD *)a2 + 11);
  if (*((char *)a2 + 47) >= 0)
    v8 = *((unsigned __int8 *)a2 + 47);
  else
    v8 = *((_QWORD *)a2 + 4);
  std::string::basic_string[abi:ne180100]((uint64_t)&v65, v8 + 1);
  if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v65;
  else
    v9 = (std::string *)v65.__r_.__value_.__r.__words[0];
  if (v8)
  {
    if (*((char *)a2 + 47) >= 0)
      v10 = (char *)a2 + 24;
    else
      v10 = (char *)*((_QWORD *)a2 + 3);
    memmove(v9, v10, v8);
  }
  *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 95;
  v11 = *((_QWORD *)a2 + 24);
  v14 = *(const std::string::value_type **)(v11 + 24);
  v12 = v11 + 24;
  v13 = v14;
  v15 = *(char *)(v12 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)v12;
  else
    v16 = v13;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(v12 + 23);
  else
    v17 = *(_QWORD *)(v12 + 8);
  v18 = std::string::append(&v65, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v61 = (void *)v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(v66, __p);
  if (SHIBYTE(v61) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  v21 = (ZinIrOpLayer *)*((_QWORD *)a2 + 25);
  v20 = (ZinIrOpLayer *)*((_QWORD *)a2 + 26);
  v53 = (uint64_t **)a2;
  v22 = *((_QWORD *)a2 + 24);
  v23 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v7 + 32))(*v7, 0, 0);
  Transpose = (ZinIrOpLayer *)*v7;
  memset(&v65, 0, sizeof(v65));
  v63 = 0;
  v64 = 0;
  v62 = 0;
  ZinFlattenLayerUtils::DecomposeFlatten(*(_DWORD *)(v23 + 88), *(_DWORD *)(*(_QWORD *)(v22 + 64) + 12), v23 + 48, (uint64_t *)&v65, (char **)&v62);
  v52 = v23;
  v54 = v7;
  v50 = v20;
  v51 = v21;
  v25 = v65.__r_.__value_.__r.__words[0];
  if (v65.__r_.__value_.__l.__size_ == v65.__r_.__value_.__r.__words[0])
    goto LABEL_61;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  Reshape = 0;
  v30 = 1;
  do
  {
    v31 = *(_DWORD *)(v25 + v27);
    if (v31 == 21)
    {
      v39 = *(_QWORD *)(*v54 + 16);
      v40 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v54 + 32))(*v54, 0, 0);
      v41 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v54 + 32))(*v54, 0, 0);
      Transpose = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v39, (uint64_t)v66, v40 + 48, *(_DWORD *)(v41 + 88), v25 + v27 + 88);
      v68[0] = v53;
      v57 = v68;
      v58 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(__p, &v57);
      v37 = ZinIrOpLayerGraph::AddNode(a1, Transpose, (ZinIrOpLayer ***)__p);
      __p[0] = &unk_24C02BB18;
      if (__p[1])
      {
        v61 = __p[1];
        operator delete(__p[1]);
      }
      v38 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, *v54, (uint64_t)Transpose, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
    else
    {
      if (v31 != 22)
        ZinAssertImpl("Invalid flatten decomposition");
      v32 = *((_QWORD *)Transpose + 2);
      v33 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Transpose + 32))(Transpose, 0, 0);
      v34 = *(_DWORD *)(v52 + 88);
      v35 = (char *)v62;
      v36 = operator new(0x14uLL);
      v58 = (uint64_t)(v36 + 5);
      v59 = (char *)(v36 + 5);
      v36[4] = 4;
      *(_OWORD *)v36 = xmmword_207AA030C;
      v57 = v36;
      DimensionOrderHint::DimensionOrderHint(__p, &v57);
      Reshape = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v32, (uint64_t)v66, v33 + 48, v34, (__int128 *)&v35[v26], (const DimensionOrderHint *)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v57)
      {
        v58 = (uint64_t)v57;
        operator delete(v57);
      }
      v68[0] = v53;
      v57 = v68;
      v58 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(__p, &v57);
      v37 = ZinIrOpLayerGraph::AddNode(a1, Reshape, (ZinIrOpLayer ***)__p);
      __p[0] = &unk_24C02BB18;
      if (__p[1])
      {
        v61 = __p[1];
        operator delete(__p[1]);
      }
      v38 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)Transpose, (uint64_t)Reshape, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
    v30 &= v37 & v38;
    ++v28;
    v25 = v65.__r_.__value_.__r.__words[0];
    v27 += 152;
    v26 += 40;
  }
  while (0x86BCA1AF286BCA1BLL * ((uint64_t)(v65.__r_.__value_.__l.__size_ - v65.__r_.__value_.__r.__words[0]) >> 3) > v28);
  if (!Reshape)
LABEL_61:
    ZinAssertImpl("Invalid flatten decomposition. No reshape layer is found", v50);
  v42 = a1;
  v43 = v51;
  if (v51)
  {
    v68[0] = v53;
    v57 = v68;
    v58 = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v57);
    v44 = ZinIrOpLayerGraph::AddNode(a1, v51, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_24C02BB18;
    if (__p[1])
    {
      v61 = __p[1];
      operator delete(__p[1]);
    }
    v45 = operator new(8uLL);
    __p[0] = v45;
    *v45 = Reshape;
    __p[1] = v45 + 1;
    v61 = v45 + 1;
    v30 &= v44 & ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)v42, (uint64_t *)__p, (uint64_t)v51);
    v46 = v50;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v50)
      goto LABEL_48;
LABEL_53:
    v46 = v43;
    goto LABEL_54;
  }
  v43 = Reshape;
  v46 = v50;
  if (!v50)
    goto LABEL_53;
LABEL_48:
  v68[0] = v53;
  v57 = v68;
  v58 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v57);
  v47 = ZinIrOpLayerGraph::AddNode(v42, v46, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    v61 = __p[1];
    operator delete(__p[1]);
  }
  v48 = operator new(8uLL);
  __p[0] = v48;
  *v48 = v43;
  __p[1] = v48 + 1;
  v61 = v48 + 1;
  v30 &= v47 & ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)v42, (uint64_t *)__p, (uint64_t)v46);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_54:
  memset(v55, 0, sizeof(v55));
  v56 = 1065353216;
  v49 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)v42, v53, v46, v55);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v55);
  if ((v30 & v49 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v42, (ZinIrOpLayer *)v53, 0) & 1) == 0)
    ZinAssertImpl("ANE internal failure: graph manipulation error during flatten layer decomposition", v50);
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  __p[0] = &v65;
  std::vector<ZinFlattenLayerUtils::FlattenDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v66[0] = off_24C01FBB0;
  if (v67 < 0)
    operator delete((void *)v66[1]);
}

void sub_206E019E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t *__p,uint64_t *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (__p)
  {
    a24 = __p;
    operator delete(__p);
  }
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  __p = &a30;
  std::vector<ZinFlattenLayerUtils::FlattenDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(_QWORD *)(v35 - 144) = off_24C01FBB0;
  if (*(char *)(v35 - 113) < 0)
    operator delete(*(void **)(v35 - 136));
  _Unwind_Resume(a1);
}

void std::vector<ZinFlattenLayerUtils::FlattenDecomposedDesc>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        ZinFlattenLayerUtils::FlattenDecomposedDesc::~FlattenDecomposedDesc((ZinFlattenLayerUtils::FlattenDecomposedDesc *)(v4 - 152));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

ZinIrOpLayer *ZinMirHandleGOCAfterFlattenLayer(ZinIrOpLayerGraph *,ZinFlattenCompositeLayer *)::$_1::operator()(uint64_t *a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t i;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int16 v30;
  uint64_t v31;
  uint64_t *v32;
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  ZinIrOpLayer *v39;
  uint64_t v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _BOOL4 v46;
  int v47;
  _OWORD *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  ZinIrOpLayer *ElementWiseLayer;
  _QWORD *v58;
  _BOOL4 v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  _QWORD *v79;
  __int128 v80[2];
  uint64_t v81;
  __int128 v82;
  void *__p;
  char *v84;
  char *v85;
  __int128 v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD v89[2];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _OWORD v97[6];
  _OWORD v98[2];
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a5 + 136);
  if (a7)
    v10 = 568;
  else
    v10 = 576;
  v11 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 0, 0) + 56);
  v12 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 0, 0) + 64)
      * v11;
  v13 = v12
      * *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 0, 0) + 72);
  __p = 0;
  v84 = 0;
  v85 = 0;
  std::vector<half>::reserve(&__p, v13);
  if (v13)
  {
    for (i = 0; i != v13; ++i)
    {
      ZinIrVector::GetAt<float>(*(_QWORD *)(v9 + v10), i);
      __asm { FCVT            H8, S0 }
      v21 = v84;
      if (v84 >= v85)
      {
        v23 = (char *)__p;
        v24 = v84 - (_BYTE *)__p;
        if (v84 - (_BYTE *)__p <= -3)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v25 = v24 >> 1;
        if (v85 - (_BYTE *)__p <= (unint64_t)((v24 >> 1) + 1))
          v26 = v25 + 1;
        else
          v26 = v85 - (_BYTE *)__p;
        if ((unint64_t)(v85 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
          v27 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
        {
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>((uint64_t)&v85, v27);
          v23 = (char *)__p;
          v21 = v84;
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[2 * v25];
        *(_WORD *)v29 = _H8;
        v22 = v29 + 2;
        while (v21 != v23)
        {
          v30 = *((_WORD *)v21 - 1);
          v21 -= 2;
          *((_WORD *)v29 - 1) = v30;
          v29 -= 2;
        }
        __p = v29;
        v84 = v22;
        v85 = &v28[2 * v27];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_WORD *)v84 = _H8;
        v22 = v21 + 2;
      }
      v84 = v22;
    }
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)&__p, &v90);
  v82 = v90;
  v31 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 0, 0);
  v32 = a1;
  v33 = *(_OWORD *)(v31 + 64);
  v80[0] = *(_OWORD *)(v31 + 48);
  v80[1] = v33;
  v81 = *(_QWORD *)(v31 + 80);
  *(_QWORD *)&v80[0] = 1;
  v34 = operator new();
  DimensionOrderHint::DimensionOrderHint(&v86, 0);
  *(_QWORD *)&v92 = 0;
  v90 = 0u;
  v91 = 0u;
  ZinIrTensor::MirInfo::MirInfo(v34, 2, 0, 0, &v86, &v90);
  v79 = (_QWORD *)v34;
  if ((_QWORD)v86)
  {
    *((_QWORD *)&v86 + 1) = v86;
    operator delete((void *)v86);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a6 + 16))(&v86, a6, 0);
  v35 = v79;
  v79 = 0;
  v76 = v35;
  LODWORD(v90) = 0;
  v91 = 0uLL;
  *((_QWORD *)&v90 + 1) = 0;
  LODWORD(v92) = 0;
  ZinIrTensor::CreateTensor(a3, 3, v80, &v86, &v76, (uint64_t *)&v82, (unsigned int *)&v90, &v77);
  v36 = v76;
  v76 = 0;
  if (v36)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v76, v36);
  if (SHIBYTE(v87) < 0)
    operator delete((void *)v86);
  v37 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v37, 29);
  v75 = v37;
  v38 = operator new();
  v39 = (ZinIrOpLayer *)v38;
  v40 = v77;
  v73 = v77;
  v74 = v78;
  if (v78)
  {
    p_shared_owners = (unint64_t *)&v78->__shared_owners_;
    do
      v42 = __ldxr(p_shared_owners);
    while (__stxr(v42 + 1, p_shared_owners));
  }
  ZinConstInLayer::ZinConstInLayer(v38, &v75, &v73, v40 + 24);
  v43 = v74;
  if (v74)
  {
    v44 = (unint64_t *)&v74->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v89[0] = *a1;
  *(_QWORD *)&v86 = v89;
  *((_QWORD *)&v86 + 1) = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v90, &v86);
  v46 = ZinIrOpLayerGraph::AddNode(a2, v39, (ZinIrOpLayer ***)&v90);
  *(_QWORD *)&v90 = &unk_24C02BB18;
  if (*((_QWORD *)&v90 + 1))
  {
    *(_QWORD *)&v91 = *((_QWORD *)&v90 + 1);
    operator delete(*((void **)&v90 + 1));
  }
  if (a7)
    v47 = 2;
  else
    v47 = 1;
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 80))(&v90, a4, 0, 0);
  (*(void (**)(_QWORD *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v39 + 80))((_QWORD *)v97 + 1, v39, 0, 0);
  v48 = operator new(0xF0uLL);
  v87 = v48 + 15;
  v49 = v98[0];
  v48[12] = v97[5];
  v48[13] = v49;
  *(_OWORD *)((char *)v48 + 220) = *(_OWORD *)((char *)v98 + 12);
  v50 = v97[2];
  v48[8] = v97[1];
  v48[9] = v50;
  v51 = v97[4];
  v48[10] = v97[3];
  v48[11] = v51;
  v52 = v95;
  v48[4] = v94;
  v48[5] = v52;
  v53 = v97[0];
  v48[6] = v96;
  v48[7] = v53;
  v54 = v91;
  *v48 = v90;
  v48[1] = v54;
  v55 = v93;
  v48[2] = v92;
  v48[3] = v55;
  *(_QWORD *)&v86 = v48;
  *((_QWORD *)&v86 + 1) = v48 + 15;
  v56 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 0, 0);
  ElementWiseLayer = (ZinIrOpLayer *)ZinBuilder::CreateElementWiseLayer(a3, a6, v47, (uint64_t)&v86, (__int128 *)(v56 + 48), 3);
  if ((_QWORD)v86)
  {
    *((_QWORD *)&v86 + 1) = v86;
    operator delete((void *)v86);
  }
  v58 = operator new(0x10uLL);
  *((_QWORD *)&v86 + 1) = v58 + 2;
  v87 = v58 + 2;
  *v58 = a4;
  v58[1] = v39;
  *(_QWORD *)&v86 = v58;
  v88 = *v32;
  v89[0] = &v88;
  v89[1] = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v90, v89);
  v59 = ZinIrOpLayerGraph::AddNode(a2, ElementWiseLayer, (ZinIrOpLayer ***)&v90);
  *(_QWORD *)&v90 = &unk_24C02BB18;
  if (*((_QWORD *)&v90 + 1))
  {
    *(_QWORD *)&v91 = *((_QWORD *)&v90 + 1);
    operator delete(*((void **)&v90 + 1));
  }
  if (((v46 && v59) & ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)a2, (uint64_t *)&v86, (uint64_t)ElementWiseLayer) & 1) == 0)ZinAssertImpl("ANE internal failure: graph manipulation error during flatten layer decomposition");
  if ((_QWORD)v86)
  {
    *((_QWORD *)&v86 + 1) = v86;
    operator delete((void *)v86);
  }
  v60 = v75;
  v75 = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = v78;
  if (v78)
  {
    v62 = (unint64_t *)&v78->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v79;
  v79 = 0;
  if (v64)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v79, v64);
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (__p)
  {
    v84 = (char *)__p;
    operator delete(__p);
  }
  return ElementWiseLayer;
}

void sub_206E021EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  uint64_t v44;
  _QWORD *v46;

  a42 = v44 + 16;
  if (__p)
  {
    a44 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  v46 = a20;
  a20 = 0;
  if (v46)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a20, v46);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  _Unwind_Resume(a1);
}

ZinIrOpLayer *ZinMirHandleGOCAfterFlattenLayer(ZinIrOpLayerGraph *,ZinFlattenCompositeLayer *)::$_0::operator()(_QWORD *a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, float a7)
{
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  ZinIrScaleBiasInfo *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  ZinIrVector *v22;
  ZinIrKernel *v23;
  uint64_t v24;
  ZinIrOpLayer *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _BOOL4 v31;
  ZinIrKernel *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  ZinIrScaleBiasInfo *v37;
  uint64_t v39;
  std::__shared_weak_count *v40;
  ZinIrKernel *v41;
  ZinIrVector *v42;
  ZinIrKernel *v43;
  void *__p;
  void *v45;
  uint64_t v46;
  int v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  ZinIrScaleBiasInfo *v53;
  uint64_t v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  void *v82[2];
  char v83;
  __int128 v84;
  char v85;
  void *v86[2];
  char v87;
  __int128 v88[2];
  uint64_t v89;
  _QWORD v90[2];

  v90[1] = *MEMORY[0x24BDAC8D0];
  v14 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 0, 0);
  v15 = *(_OWORD *)(v14 + 64);
  v88[0] = *(_OWORD *)(v14 + 48);
  v88[1] = v15;
  v89 = *(_QWORD *)(v14 + 80);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a5 + 16))(v86, a5, 1);
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a5 + 16))(&v84, a5, 0);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a5 + 16))(v82, a5, 2);
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v54 = 0;
  v55 = 0;
  v60 = 0u;
  v61 = 0u;
  v62 = 0;
  v63 = vdupq_n_s64(1uLL);
  v64 = v63;
  v65 = v63;
  v66 = v63;
  v67 = v63;
  *(_QWORD *)&v16 = 0x100000001;
  *((_QWORD *)&v16 + 1) = 0x100000001;
  v68 = v16;
  v69 = 0x100000001;
  v71 = 0;
  v72 = 0;
  v70 = 0;
  v73 = xmmword_207A85790;
  v74 = 1;
  v75 = 1;
  v76 = 0;
  v81 = 0;
  v77 = 1;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v17 = (ZinIrScaleBiasInfo *)operator new();
  ZinIrScaleBiasInfo::ZinIrScaleBiasInfo(v17);
  v53 = v17;
  v49 = 0;
  v50 = 0;
  v48 = 0;
  LODWORD(v43) = 0;
  v45 = 0;
  v46 = 0;
  __p = 0;
  v47 = 0;
  ZinIrTensor::CreateTensor(a3, 3, v88, &v84, &v50, (uint64_t *)&v48, (unsigned int *)&v43, &v51);
  v18 = (std::__shared_weak_count *)v49;
  if (v49)
  {
    v19 = (unint64_t *)(v49 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v50;
  v50 = 0;
  if (v21)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v50, v21);
  v22 = (ZinIrVector *)operator new();
  ZinIrVector::ZinIrVector(v22, a7, 0);
  v41 = 0;
  v42 = v22;
  v48 = 0;
  v90[0] = 0;
  if ((a6 & 1) != 0)
    std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelDescriptor &,decltype(nullptr),std::unique_ptr<ZinIrVector>,decltype(nullptr)>((uint64_t)v82, (uint64_t)&v54, (uint64_t)&v42, (uint64_t *)&v43);
  else
    std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelDescriptor &,decltype(nullptr),decltype(nullptr),std::unique_ptr<ZinIrVector>>((uint64_t)v82, (uint64_t)&v54, (uint64_t)&v42, (uint64_t *)&v43);
  v23 = v43;
  v43 = 0;
  v41 = v23;
  v24 = operator new();
  v25 = (ZinIrOpLayer *)v24;
  v39 = v51;
  v40 = v52;
  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
  }
  ZinGOCLayer::ZinGOCLayer(v24, &v53, &v39, v86, &v41);
  v28 = v40;
  if (v40)
  {
    v29 = (unint64_t *)&v40->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v90[0] = *a1;
  v48 = v90;
  v49 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v43, &v48);
  v31 = ZinIrOpLayerGraph::AddNode(a2, v25, (ZinIrOpLayer ***)&v43);
  v43 = (ZinIrKernel *)&unk_24C02BB18;
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  if ((v31 & ZinIrOpLayerGraph::AddEdge((uint64_t)a2, a4, (uint64_t)v25, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)ZinAssertImpl("ANE internal failure: graph manipulation error during flatten layer decomposition");
  v32 = v41;
  v41 = 0;
  if (v32)
  {
    ZinIrKernel::~ZinIrKernel(v32);
    MEMORY[0x20BD002F8]();
  }
  v33 = (uint64_t)v42;
  v42 = 0;
  if (v33)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v42, v33);
  v34 = v52;
  if (v52)
  {
    v35 = (unint64_t *)&v52->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v53;
  v53 = 0;
  if (v37)
    (*(void (**)(ZinIrScaleBiasInfo *))(*(_QWORD *)v37 + 8))(v37);
  if (v83 < 0)
    operator delete(v82[0]);
  if (v85 < 0)
    operator delete((void *)v84);
  if (v87 < 0)
    operator delete(v86[0]);
  return v25;
}

void sub_206E02854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, ZinIrKernel *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a12, 0);
  v26 = a13;
  a13 = 0;
  if (v26)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a13, v26);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  v27 = a24;
  a24 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  if (*(char *)(v24 - 193) < 0)
    operator delete(*(void **)(v24 - 216));
  if (*(char *)(v24 - 169) < 0)
    operator delete(*(void **)(v24 - 192));
  if (*(char *)(v24 - 145) < 0)
    operator delete(*(void **)(v24 - 168));
  _Unwind_Resume(a1);
}

uint64_t ZinMirCreateNewKernel@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, const void **a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v8;
  ZinIrKernel *v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t j;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  std::string *v43;
  const void *v44;
  std::string *v45;
  __int128 v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  ZinKernelSparsityCache *KernelSparsityCache;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  int v60;
  int v61;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t i;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  __int128 v70;
  uint64_t v71;
  std::string v72;
  std::string v73;
  void *__p[2];
  std::string::size_type v75;
  char v76;
  __int128 v77;
  uint64_t v78;
  _QWORD v79[5];
  char v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  unint64_t v85;
  uint64_t v86;
  __int128 v87;
  char *v88;

  v8 = a1;
  v10 = *(ZinIrKernel **)(a1 + 136);
  v11 = *((_DWORD *)v10 + 82);
  v12 = *((_DWORD *)v10 + 83);
  v13 = *((_DWORD *)v10 + 84);
  v61 = *((_DWORD *)v10 + 85);
  v60 = *((_DWORD *)v10 + 86);
  v58 = *((int *)v10 + 87);
  v86 = 1;
  ZinIrKernel::GetWeightDimensions(v10, (uint64_t)v79);
  v84 = *(_OWORD *)(a2 + 1);
  v14 = a2[3];
  v83 = v79[0];
  v85 = v14;
  if (!*(_QWORD *)(v8 + 136))
    ZinAssertImpl("IP layer kernel cannot be null.");
  details::ZinIrMappedData_Impl<ZinKernelPosition>::ZinIrMappedData_Impl((uint64_t)v79, 1);
  if (!*(_BYTE *)(*(_QWORD *)(v8 + 16) + 1048))
  {
    v54 = v13;
    v55 = v12;
    v56 = v11;
    v57 = a6;
    v15 = a2[1];
    v16 = a2[2];
    v17 = a2[3];
    v53 = v8;
    ZinIrKernel::GetWeightDimensions(*(ZinIrKernel **)(v8 + 136), (uint64_t)&v73);
    v18 = v73.__r_.__value_.__r.__words[0];
    if (a4 == 1)
      v19 = v15;
    else
      v19 = 1;
    if (a4 == 1)
      v20 = 1;
    else
      v20 = v17 * v16;
    v64 = v20;
    details::ZinIrMappedData_Impl<ZinKernelPosition>::ZinIrMappedData_Impl((uint64_t)__p, v17 * v16 * v15 * v73.__r_.__value_.__r.__words[0]);
    v63 = v15;
    if (v18)
    {
      v21 = 0;
      v68 = v16;
      v69 = v17 * v19;
      if (v17 <= 1)
        v22 = 1;
      else
        v22 = v17;
      v23 = v15;
      if (v15 <= 1)
        v24 = 1;
      else
        v24 = v15;
      v65 = v24;
      v67 = v17;
      do
      {
        if (v23)
        {
          for (i = 0; i != v65; ++i)
          {
            v87 = 0uLL;
            v88 = 0;
            if (v16)
            {
              v25 = 0;
              v26 = 0;
              v27 = v17;
              do
              {
                if (v27)
                {
                  for (j = 0; j != v22; ++j)
                  {
                    v29 = i * v64 + v69 * v26 + j * v19;
                    if (v25 >= v88)
                    {
                      v30 = (char *)v87;
                      v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v25[-v87] >> 3);
                      v32 = v31 + 1;
                      if (v31 + 1 > 0x666666666666666)
                        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                      if (0x999999999999999ALL * ((uint64_t)&v88[-v87] >> 3) > v32)
                        v32 = 0x999999999999999ALL * ((uint64_t)&v88[-v87] >> 3);
                      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v88[-v87] >> 3) >= 0x333333333333333)
                        v33 = 0x666666666666666;
                      else
                        v33 = v32;
                      if (v33)
                      {
                        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v88, v33);
                        v25 = (char *)*((_QWORD *)&v87 + 1);
                        v30 = (char *)v87;
                      }
                      else
                      {
                        v34 = 0;
                      }
                      v35 = &v34[40 * v31];
                      *(_QWORD *)v35 = v21;
                      *((_QWORD *)v35 + 1) = v29;
                      *((_QWORD *)v35 + 3) = 0;
                      *((_QWORD *)v35 + 4) = 0;
                      *((_QWORD *)v35 + 2) = 0;
                      if (v25 == v30)
                      {
                        v39 = &v34[40 * v31];
                      }
                      else
                      {
                        v36 = &v34[40 * v31];
                        do
                        {
                          v37 = *(_OWORD *)(v25 - 40);
                          v38 = *(_OWORD *)(v25 - 24);
                          v39 = v36 - 40;
                          *((_QWORD *)v36 - 1) = *((_QWORD *)v25 - 1);
                          *(_OWORD *)(v36 - 24) = v38;
                          *(_OWORD *)(v36 - 40) = v37;
                          v25 -= 40;
                          v36 -= 40;
                        }
                        while (v25 != v30);
                      }
                      v25 = v35 + 40;
                      *(_QWORD *)&v87 = v39;
                      *((_QWORD *)&v87 + 1) = v35 + 40;
                      v88 = &v34[40 * v33];
                      if (v30)
                        operator delete(v30);
                    }
                    else
                    {
                      *(_QWORD *)v25 = v21;
                      *((_QWORD *)v25 + 1) = v29;
                      *((_QWORD *)v25 + 3) = 0;
                      *((_QWORD *)v25 + 4) = 0;
                      *((_QWORD *)v25 + 2) = 0;
                      v25 += 40;
                    }
                    *((_QWORD *)&v87 + 1) = v25;
                  }
                  v17 = v67;
                  v16 = v68;
                  v27 = v67;
                }
                ++v26;
              }
              while (v26 != v16);
            }
            details::ZinIrMappedData_Impl<ZinKernelPosition>::write((uint64_t)__p, (uint64_t)&v87);
            if ((_QWORD)v87)
            {
              *((_QWORD *)&v87 + 1) = v87;
              operator delete((void *)v87);
            }
          }
          v23 = v63;
        }
        ++v21;
      }
      while (v21 != v18);
    }
    memset(v79, 0, sizeof(v79));
    v80 = v76;
    v81 = v77;
    v82 = v78;
    v76 = 0;
    v77 = 0uLL;
    v78 = 0;
    details::ZinIrMappedData_Impl<ZinKernelPosition>::~ZinIrMappedData_Impl((uint64_t)__p);
    v11 = v56;
    a6 = v57;
    v13 = v54;
    v12 = v55;
    v8 = v53;
  }
  if (*((_QWORD *)&v81 + 1) == (_QWORD)v81)
    ZinAssertImpl("Flatten Shuffling is not correct due to lack of memory\n");
  v40 = v8;
  v41 = *(_QWORD *)(v8 + 136);
  if (*((char *)a5 + 23) >= 0)
    v42 = *((unsigned __int8 *)a5 + 23);
  else
    v42 = (size_t)a5[1];
  v43 = &v73;
  std::string::basic_string[abi:ne180100]((uint64_t)&v73, v42 + 1);
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v43 = (std::string *)v73.__r_.__value_.__r.__words[0];
  if (v42)
  {
    if (*((char *)a5 + 23) >= 0)
      v44 = a5;
    else
      v44 = *a5;
    memmove(v43, v44, v42);
  }
  *(_WORD *)((char *)&v43->__r_.__value_.__l.__data_ + v42) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v72, "kernel_fold_hw");
  v45 = std::string::append(&v72, "_xfm", 4uLL);
  v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v88 = (char *)v45->__r_.__value_.__r.__words[2];
  v87 = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v88) >= 0)
    v47 = (const std::string::value_type *)&v87;
  else
    v47 = (const std::string::value_type *)v87;
  if (SHIBYTE(v88) >= 0)
    v48 = HIBYTE(v88);
  else
    v48 = *((_QWORD *)&v87 + 1);
  v49 = std::string::append(&v73, v47, v48);
  v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  v75 = v49->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  KernelSparsityCache = (ZinKernelSparsityCache *)ZinIrContext::GetKernelSparsityCache(*(ZinIrContext **)(v40 + 16));
  v70 = 0uLL;
  v71 = 0;
  ZinIrKernel::ShuffleKernel(v41, (__int128 *)__p, (uint64_t)v79, v11, v12, v13, v61, v60, a6, v58, (uint64_t)&v83, a3, KernelSparsityCache, &v70, 0, 1);
  if (SHIBYTE(v75) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v88) < 0)
    operator delete((void *)v87);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  return details::ZinIrMappedData_Impl<ZinKernelPosition>::~ZinIrMappedData_Impl((uint64_t)v79);
}

void sub_206E02EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  details::ZinIrMappedData_Impl<ZinKernelPosition>::~ZinIrMappedData_Impl(v58 - 240);
  _Unwind_Resume(a1);
}

uint64_t ZinMirCreateInputTensorForAliasCopy(uint64_t **a1, uint64_t a2, uint64_t a3, int a4, const void **a5)
{
  uint64_t v7;
  ZinIrTensor *v8;
  unint64_t v9;
  ZinIrTensor *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  __int128 *v36;
  uint64_t Interleave;
  char v38;
  char v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  ZinIrTensor *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  __int128 *p_p;
  __int128 *v49;
  const void *v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  _QWORD *v55;
  int v56;
  ZinIrOpLayer *v57;
  ZinIrCopyInfo *v58;
  unint64_t *v59;
  unint64_t v60;
  size_t v61;
  void **v62;
  const void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _BOOL4 v67;
  ZinIrTensor *RootTensor;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  ZinIrTensor *v74;
  ZinIrTensor *v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  BOOL v79;
  ZinIrTensor *v80;
  ZinIrTensor *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  ZinIrOpLayer *v85;
  _QWORD *v86;
  _BOOL4 v87;
  int v88;
  ZinIrTensor *v89;
  ZinIrTensor *v91;
  uint64_t *v92;
  ZinIrTensor *v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  _QWORD *v99;
  ZinIrTensor *v100;
  uint64_t v101;
  _QWORD *v102;
  __int128 __p;
  uint64_t v104;
  void *v105[2];
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD v109[3];

  v7 = a2;
  v109[1] = *MEMORY[0x24BDAC8D0];
  v8 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  ZinIrTensor::GetTensorFamily(v8, (uint64_t)v105);
  v9 = (char *)v105[1] - (char *)v105[0];
  if (v105[0])
  {
    v105[1] = v105[0];
    operator delete(v105[0]);
  }
  if (v9 < 9)
  {
    v36 = (__int128 *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0);
    Interleave = ZinIrTensor::GetInterleave((ZinIrTensor *)v36);
    v39 = v38;
    v40 = *((_QWORD *)ZinIrTensor::GetRootTensor((ZinIrTensor *)v36) + 13);
    if (v40)
      LODWORD(v40) = *(_DWORD *)(v40 + 96);
    if (v39)
      v41 = Interleave == 1;
    else
      v41 = 1;
    v42 = v41;
    if ((_DWORD)v40 || !v42)
    {
      v45 = *((_QWORD *)v36 + 13);
      if (!v45)
        goto LABEL_38;
      if (*(_DWORD *)(v45 + 96) != 2)
        LOBYTE(v42) = 0;
      if ((v42 & 1) == 0)
      {
LABEL_38:
        DimensionOrderHint::DimensionOrderHint(&__p, 0);
        v46 = operator new();
        v107 = 0;
        *(_OWORD *)v105 = 0u;
        v106 = 0u;
        ZinIrTensor::MirInfo::MirInfo(v46, 2, 1, 1, &__p, v105);
        v109[0] = v46;
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        if (*((char *)a5 + 23) >= 0)
          v47 = *((unsigned __int8 *)a5 + 23);
        else
          v47 = (size_t)a5[1];
        p_p = &__p;
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, v47 + 23);
        v49 = v36 + 3;
        if (v104 < 0)
          p_p = (__int128 *)__p;
        if (v47)
        {
          if (*((char *)a5 + 23) >= 0)
            v50 = a5;
          else
            v50 = *a5;
          memmove(p_p, v50, v47);
        }
        strcpy((char *)p_p + v47, "_first_alias_copy_input");
        v51 = (_QWORD *)v109[0];
        v109[0] = 0;
        v98 = 0;
        v99 = v51;
        v97 = 0;
        LODWORD(v105[0]) = 0;
        v106 = 0uLL;
        v105[1] = 0;
        LODWORD(v107) = 0;
        ZinIrTensor::CreateTensor(a3, a4, v49, &__p, &v99, &v97, (unsigned int *)v105, (uint64_t *)&v100);
        v52 = v98;
        if (v98)
        {
          p_shared_owners = (unint64_t *)&v98->__shared_owners_;
          do
            v54 = __ldaxr(p_shared_owners);
          while (__stlxr(v54 - 1, p_shared_owners));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v55 = v99;
        v99 = 0;
        if (v55)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v99, v55);
        if (SHIBYTE(v104) < 0)
          operator delete((void *)__p);
        v56 = ZinIrTensor::SetAllocationHint(v100, 2, 1);
        if (v56)
        {
          v57 = 0;
        }
        else
        {
          v58 = (ZinIrCopyInfo *)operator new();
          ZinIrCopyInfo::ZinIrCopyInfo(v58);
          v97 = (uint64_t)v58;
          v57 = (ZinIrOpLayer *)operator new();
          v95 = v100;
          v96 = (std::__shared_weak_count *)v101;
          if (v101)
          {
            v59 = (unint64_t *)(v101 + 8);
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
          }
          if (*((char *)a5 + 23) >= 0)
            v61 = *((unsigned __int8 *)a5 + 23);
          else
            v61 = (size_t)a5[1];
          std::string::basic_string[abi:ne180100]((uint64_t)v105, v61 + 19);
          if ((SBYTE7(v106) & 0x80u) == 0)
            v62 = v105;
          else
            v62 = (void **)v105[0];
          if (v61)
          {
            if (*((char *)a5 + 23) >= 0)
              v63 = a5;
            else
              v63 = *a5;
            memmove(v62, v63, v61);
          }
          strcpy((char *)v62 + v61, "_prepare_input_copy");
          ZinCopyLayer::ZinCopyLayer(v57, &v97, &v95, v105);
          if (SBYTE7(v106) < 0)
            operator delete(v105[0]);
          v64 = v96;
          if (v96)
          {
            v65 = (unint64_t *)&v96->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
          v108 = v7;
          *(_QWORD *)&__p = &v108;
          *((_QWORD *)&__p + 1) = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(v105, &__p);
          v67 = ZinIrOpLayerGraph::AddNode(a1, v57, (ZinIrOpLayer ***)v105);
          v105[0] = &unk_24C02BB18;
          if (v105[1])
          {
            *(void **)&v106 = v105[1];
            operator delete(v105[1]);
          }
          if ((v67 & ZinIrOpLayerGraph::AddEdge((uint64_t)a1, v7, (uint64_t)v57, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)ZinAssertImpl("ANE internal failure: graph manipulation error during flatten layer decomposition");
          RootTensor = ZinIrTensor::GetRootTensor(v100);
          v56 = ZinIrTensor::SetAllocationHint(RootTensor, 2, 1);
          v69 = v97;
          v97 = 0;
          if (v69)
            (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
        }
        v70 = (std::__shared_weak_count *)v101;
        if (v101)
        {
          v71 = (unint64_t *)(v101 + 8);
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        v73 = (_QWORD *)v109[0];
        v109[0] = 0;
        if (v73)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)v109, v73);
        if (v56)
          ZinAssertImpl("ZinMirCreateInputTensorForAliasCopy fails in setting AllocationHint");
        v7 = (uint64_t)v57;
        if (!v57)
          ZinAssertImpl("Error: failed to get the alias copy");
      }
    }
    else
    {
      v43 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0);
      if (ZinIrTensor::SetAllocationHint(v43, 2, 1))
        ZinAssertImpl("ZinMirCreateInputTensorForAliasCopy fails in setting AllocationHint");
      v44 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0);
      if (ZinIrTensor::SetInterleave(v44, 1uLL, 1, 1))
        ZinAssertImpl("ZinMirCreateInputTensorForAliasCopy fails in setting interleave");
    }
    return v7;
  }
  v10 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0);
  ZinIrTensor::GetTensorFamily(v10, (uint64_t)v105);
  v11 = (char *)v105[0];
  v12 = (char *)v105[1];
  if (v105[0] == v105[1])
  {
    v16 = 0;
    if (v105[0])
      goto LABEL_101;
    goto LABEL_102;
  }
  while (1)
  {
    v13 = *(_QWORD **)v11;
    v14 = *(_QWORD *)(*(_QWORD *)v11 + 96);
    v15 = *(_DWORD *)(*(_QWORD *)(v14 + 64) + 8);
    if (v15 != 36)
    {
      v16 = 1;
      if (v15 == 33 || v15 == 37)
        goto LABEL_100;
      goto LABEL_19;
    }
    v17 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v14 + 88) + 32))(**(_QWORD **)(v14 + 88), 0, 0);
    v18 = v17[9];
    v19 = v17[10];
    v20 = v17[6];
    v21 = v17[7];
    v22 = v17[8];
    v23 = operator new(0x28uLL);
    *v23 = v20;
    v23[1] = v19;
    v23[2] = v21;
    v23[3] = v22;
    v23[4] = v18;
    v25 = v13[9];
    v24 = v13[10];
    v26 = v13[6];
    v27 = v13[7];
    v28 = v13[8];
    v29 = operator new(0x28uLL);
    v30 = 0;
    *v29 = v26;
    v29[1] = v24;
    v29[2] = v27;
    v29[3] = v28;
    v31 = -1;
    v32 = -1;
    v29[4] = v25;
    do
    {
      v33 = v23[v30];
      v34 = v33 > 1;
      if (v32 == -1 && v33 > 1)
        v32 = v30;
      if (v33 <= v29[v30])
        v35 = -1;
      else
        v35 = v30;
      if (v31 == -1 && v34)
        v31 = v35;
      ++v30;
    }
    while (v30 != 5);
    operator delete(v29);
    operator delete(v23);
    if (v31 > v32)
      break;
LABEL_19:
    v11 += 8;
    if (v11 == v12)
    {
      v16 = 0;
      goto LABEL_100;
    }
  }
  v16 = 1;
LABEL_100:
  v11 = (char *)v105[0];
  if (v105[0])
  {
LABEL_101:
    v105[1] = v11;
    operator delete(v11);
  }
LABEL_102:
  if ((v16 & 1) != 0
    || (v74 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0),
        v75 = ZinIrTensor::GetRootTensor(v74),
        (v76 = *((_QWORD *)v75 + 13)) != 0)
    && *(_DWORD *)(v76 + 96) == 1
    || ((v77 = ZinIrTensor::GetInterleave(v75), v78) ? (v79 = v77 >= 2) : (v79 = 0), v79))
  {
    DimensionOrderHint::DimensionOrderHint(&__p, 0);
    v82 = operator new();
    v107 = 0;
    *(_OWORD *)v105 = 0u;
    v106 = 0u;
    ZinIrTensor::MirInfo::MirInfo(v82, 2, 1, 1, &__p, v105);
    v97 = v82;
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    ZinObjectNameFactory::ZinObjectNameFactory(v105, v7 + 24);
    v83 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0) + 88);
    v84 = v97;
    v97 = 0;
    v102 = (_QWORD *)v84;
    v85 = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(a3, v7, (uint64_t)v105, v83, &v102);
    v86 = v102;
    v102 = 0;
    if (v86)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v102, v86);
    v109[0] = v7;
    v100 = (ZinIrTensor *)v109;
    v101 = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v100);
    v87 = ZinIrOpLayerGraph::AddNode(a1, v85, (ZinIrOpLayer ***)&__p);
    *(_QWORD *)&__p = &unk_24C02BB18;
    if (*((_QWORD *)&__p + 1))
    {
      v104 = *((_QWORD *)&__p + 1);
      operator delete(*((void **)&__p + 1));
    }
    v88 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, v7, (uint64_t)v85, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v89 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0, 0);
    if ((v87 & v88 & (ZinIrTensor::SetAllocationHint(v89, 2, 1) == 0)) != 0)
      v7 = (uint64_t)v85;
    else
      v7 = 0;
    v105[0] = off_24C01FBB0;
    if (SHIBYTE(v106) < 0)
      operator delete(v105[1]);
    v97 = 0;
  }
  else
  {
    v80 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0);
    v81 = ZinIrTensor::GetRootTensor(v80);
    if (ZinIrTensor::SetAllocationHint(v81, 2, 1))
    {
      return 0;
    }
    else
    {
      v91 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0);
      v92 = (uint64_t *)ZinIrTensor::GetRootTensor(v91);
      if (ZinIrTensor::SetInterleave(v92, 1uLL, 1, 1))
        return 0;
    }
  }
  return v7;
}

void sub_206E038B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, void *a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  _QWORD *v34;

  a26 = &unk_24C02BB18;
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  v34 = *(_QWORD **)(v32 - 104);
  *(_QWORD *)(v32 - 104) = 0;
  if (v34)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100](v32 - 104, v34);
  _Unwind_Resume(a1);
}

ZinIrOpLayer *ZinMirCreatePhysicalCopyLayer(uint64_t **a1, uint64_t a2, uint64_t a3, int a4, const void **a5)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  size_t v13;
  void **v14;
  const void *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD *v20;
  ZinIrCopyInfo *v21;
  ZinIrOpLayer *v22;
  unint64_t *v23;
  unint64_t v24;
  size_t v25;
  __int128 *v26;
  const void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  ZinIrTensor *v38;
  std::__shared_weak_count *v39;
  ZinIrCopyInfo *v40;
  std::__shared_weak_count *v41;
  _QWORD *v42;
  ZinIrTensor *v43;
  std::__shared_weak_count *v44;
  void *__p[2];
  char v46;
  _QWORD *v47;
  __int128 v48[2];
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _QWORD v53[2];

  v53[1] = *MEMORY[0x24BDAC8D0];
  v10 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v11 = *(_OWORD *)(v10 + 64);
  v48[0] = *(_OWORD *)(v10 + 48);
  v48[1] = v11;
  v49 = *(_QWORD *)(v10 + 80);
  DimensionOrderHint::DimensionOrderHint(__p, 0);
  v12 = operator new();
  v52 = 0;
  v50 = 0u;
  v51 = 0u;
  ZinIrTensor::MirInfo::MirInfo(v12, 2, 1, 1, __p, &v50);
  v47 = (_QWORD *)v12;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*((char *)a5 + 23) >= 0)
    v13 = *((unsigned __int8 *)a5 + 23);
  else
    v13 = (size_t)a5[1];
  v14 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v13 + 21);
  if (v46 < 0)
    v14 = (void **)__p[0];
  if (v13)
  {
    if (*((char *)a5 + 23) >= 0)
      v15 = a5;
    else
      v15 = *a5;
    memmove(v14, v15, v13);
  }
  strcpy((char *)v14 + v13, "_physical_copy_output");
  v16 = v47;
  v47 = 0;
  v41 = 0;
  v42 = v16;
  v40 = 0;
  LODWORD(v50) = 0;
  v51 = 0uLL;
  *((_QWORD *)&v50 + 1) = 0;
  LODWORD(v52) = 0;
  ZinIrTensor::CreateTensor(a3, a4, v48, (__int128 *)__p, &v42, (uint64_t *)&v40, (unsigned int *)&v50, (uint64_t *)&v43);
  v17 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v42;
  v42 = 0;
  if (v20)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v42, v20);
  if (v46 < 0)
    operator delete(__p[0]);
  if (ZinIrTensor::SetAllocationHint(v43, 2, 1))
    ZinAssertImpl("ZinMirCreatePhysicalCopyLayer fails in setting AllocationHint\n");
  v21 = (ZinIrCopyInfo *)operator new();
  ZinIrCopyInfo::ZinIrCopyInfo(v21);
  v40 = v21;
  v22 = (ZinIrOpLayer *)operator new();
  v38 = v43;
  v39 = v44;
  if (v44)
  {
    v23 = (unint64_t *)&v44->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  if (*((char *)a5 + 23) >= 0)
    v25 = *((unsigned __int8 *)a5 + 23);
  else
    v25 = (size_t)a5[1];
  v26 = &v50;
  std::string::basic_string[abi:ne180100]((uint64_t)&v50, v25 + 14);
  if (SBYTE7(v51) < 0)
    v26 = (__int128 *)v50;
  if (v25)
  {
    if (*((char *)a5 + 23) >= 0)
      v27 = a5;
    else
      v27 = *a5;
    memmove(v26, v27, v25);
  }
  strcpy((char *)v26 + v25, "_physical_copy");
  ZinCopyLayer::ZinCopyLayer(v22, &v40, &v38, &v50);
  if (SBYTE7(v51) < 0)
    operator delete((void *)v50);
  v28 = v39;
  if (v39)
  {
    v29 = (unint64_t *)&v39->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v53[0] = a2;
  __p[0] = v53;
  __p[1] = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v50, __p);
  v31 = ZinIrOpLayerGraph::AddNode(a1, v22, (ZinIrOpLayer ***)&v50);
  *(_QWORD *)&v50 = &unk_24C02BB18;
  if (*((_QWORD *)&v50 + 1))
  {
    *(_QWORD *)&v51 = *((_QWORD *)&v50 + 1);
    operator delete(*((void **)&v50 + 1));
  }
  if ((v31 & ZinIrOpLayerGraph::AddEdge((uint64_t)a1, a2, (uint64_t)v22, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)ZinAssertImpl("ANE internal failure: graph manipulation error during flatten layer decomposition", v38);
  v32 = (uint64_t)v40;
  v40 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = v44;
  if (v44)
  {
    v34 = (unint64_t *)&v44->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v47;
  v47 = 0;
  if (v36)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v47, v36);
  return v22;
}

void sub_206E03F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,_QWORD *a23)
{
  uint64_t v23;
  void *v25;
  _QWORD *v26;

  *(_QWORD *)(v23 - 128) = &unk_24C02BB18;
  v25 = *(void **)(v23 - 120);
  if (v25)
  {
    *(_QWORD *)(v23 - 112) = v25;
    operator delete(v25);
  }
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  v26 = a23;
  a23 = 0;
  if (v26)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a23, v26);
  _Unwind_Resume(a1);
}

void GetDeInterleaveShufflingOrder(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t i;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t j;
  char *v39;
  uint64_t k;
  uint64_t m;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  char *v56;
  uint64_t v57;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void *v62[3];
  void *v63[2];
  __int128 v64;
  uint64_t v65;
  void *__p[3];
  uint64_t v67[3];
  _QWORD v68[3];
  void **v69;

  v7 = a1[1];
  v8 = a1[2];
  v9 = a1[3];
  v65 = 0;
  *(_OWORD *)v63 = 0u;
  v64 = 0u;
  std::vector<ZinKernelPosition>::vector(__p, v9, (__int128 *)v63);
  std::vector<std::vector<ZinKernelPosition>>::vector(v67, v8, (uint64_t)__p);
  std::vector<std::vector<std::vector<ZinKernelPosition>>>::vector(v68, v7, v67);
  v62[0] = v67;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)v62);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v11 = a1[1];
  v10 = a1[2];
  if (v11)
  {
    v12 = 0;
    v13 = a1[2];
    do
    {
      if (v13)
      {
        v14 = 0;
        v15 = (_QWORD *)(v68[0] + 24 * v12);
        v16 = a1[3];
        do
        {
          if (v16)
          {
            v17 = 0;
            v18 = (unint64_t *)(*(_QWORD *)(*v15 + 24 * v14) + 16);
            do
            {
              *(v18 - 2) = 0;
              *(v18 - 1) = v12;
              *v18 = v14;
              v18[1] = v17;
              v18[2] = 0;
              ++v17;
              v16 = a1[3];
              v18 += 5;
            }
            while (v17 < v16);
            v10 = a1[2];
          }
          ++v14;
        }
        while (v14 < v10);
        v11 = a1[1];
        v13 = v10;
      }
      ++v12;
    }
    while (v12 < v11);
  }
  v19 = a1[3];
  if (v19 % a2)
    v20 = v19 / a2 + 1;
  else
    v20 = v19 / a2;
  v65 = 0;
  *(_OWORD *)v63 = 0u;
  v64 = 0u;
  v61 = v20;
  std::vector<ZinKernelPosition>::vector(v62, v20, (__int128 *)v63);
  std::vector<std::vector<ZinKernelPosition>>::vector(__p, v10, (uint64_t)v62);
  v59 = v11 * a2;
  std::vector<std::vector<std::vector<ZinKernelPosition>>>::vector(v67, v11 * a2, (uint64_t *)__p);
  v69 = __p;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&v69);
  if (v62[0])
  {
    v62[1] = v62[0];
    operator delete(v62[0]);
  }
  if (v59 >= a2)
  {
    v21 = 0;
    v22 = v59 / a2;
    if (v59 / a2 <= 1)
      v22 = 1;
    do
    {
      v23 = 0;
      v24 = 0;
      do
      {
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            if (v61)
            {
              v26 = 0;
              v27 = (_QWORD *)(v67[0] + 24 * (v24 + v21 * a2));
              v28 = (_QWORD *)(v68[0] + 24 * v21);
              v29 = v24;
              v30 = v23;
              v31 = v61;
              do
              {
                if (a1[1] <= v21 || a1[2] <= i || a1[3] <= v29)
                {
                  v36 = (_QWORD *)(*(_QWORD *)(*v27 + 24 * i) + v26);
                  *v36 = a3;
                  v36[1] = v11;
                  v36[2] = v10;
                  v36[3] = v19;
                  v36[4] = 1;
                }
                else
                {
                  v32 = (__int128 *)(*(_QWORD *)(*v28 + 24 * i) + v30);
                  v33 = *(_QWORD *)(*v27 + 24 * i) + v26;
                  v34 = *v32;
                  v35 = v32[1];
                  *(_QWORD *)(v33 + 32) = *((_QWORD *)v32 + 4);
                  *(_OWORD *)v33 = v34;
                  *(_OWORD *)(v33 + 16) = v35;
                }
                v30 += 40 * a2;
                v29 += a2;
                v26 += 40;
                --v31;
              }
              while (v31);
            }
          }
        }
        ++v24;
        v23 += 40;
      }
      while (v24 != a2);
      ++v21;
    }
    while (v21 != v22);
  }
  v60 = v10;
  details::ZinIrMappedData_Impl<ZinKernelPosition>::ZinIrMappedData_Impl(a4, v59 * a3 * v10 * v61);
  if (a3)
  {
    v37 = 0;
    v57 = a3;
    do
    {
      if (v59)
      {
        for (j = 0; j != v59; ++j)
        {
          v63[0] = 0;
          v63[1] = 0;
          *(_QWORD *)&v64 = 0;
          if (v60)
          {
            v39 = 0;
            for (k = 0; k != v60; ++k)
            {
              if (v61)
              {
                for (m = 0; m != v61; ++m)
                {
                  v42 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v67[0] + 24 * j) + 24 * k) + 40 * m);
                  v44 = v42[1];
                  v43 = v42[2];
                  v45 = v42[3];
                  if ((unint64_t)v39 >= (unint64_t)v64)
                  {
                    v46 = v37;
                    v47 = (char *)v63[0];
                    v48 = 0xCCCCCCCCCCCCCCCDLL * ((v39 - (char *)v63[0]) >> 3);
                    v49 = v48 + 1;
                    if (v48 + 1 > 0x666666666666666)
                      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                    if (0x999999999999999ALL * ((uint64_t)(v64 - (unint64_t)v63[0]) >> 3) > v49)
                      v49 = 0x999999999999999ALL * ((uint64_t)(v64 - (unint64_t)v63[0]) >> 3);
                    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v64 - (unint64_t)v63[0]) >> 3) >= 0x333333333333333)
                      v50 = 0x666666666666666;
                    else
                      v50 = v49;
                    if (v50)
                    {
                      v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v64, v50);
                      v47 = (char *)v63[0];
                      v39 = (char *)v63[1];
                    }
                    else
                    {
                      v51 = 0;
                    }
                    v52 = &v51[40 * v48];
                    v37 = v46;
                    *(_QWORD *)v52 = v46;
                    *((_QWORD *)v52 + 1) = v44;
                    *((_QWORD *)v52 + 2) = v43;
                    *((_QWORD *)v52 + 3) = v45;
                    *((_QWORD *)v52 + 4) = 0;
                    if (v39 == v47)
                    {
                      v56 = v52;
                    }
                    else
                    {
                      v53 = v52;
                      do
                      {
                        v54 = *(_OWORD *)(v39 - 40);
                        v55 = *(_OWORD *)(v39 - 24);
                        v56 = v53 - 40;
                        *((_QWORD *)v53 - 1) = *((_QWORD *)v39 - 1);
                        *(_OWORD *)(v53 - 24) = v55;
                        *(_OWORD *)(v53 - 40) = v54;
                        v39 -= 40;
                        v53 -= 40;
                      }
                      while (v39 != v47);
                    }
                    v39 = v52 + 40;
                    v63[0] = v56;
                    v63[1] = v52 + 40;
                    *(_QWORD *)&v64 = &v51[40 * v50];
                    if (v47)
                      operator delete(v47);
                  }
                  else
                  {
                    *(_QWORD *)v39 = v37;
                    *((_QWORD *)v39 + 1) = v44;
                    *((_QWORD *)v39 + 2) = v43;
                    *((_QWORD *)v39 + 3) = v45;
                    *((_QWORD *)v39 + 4) = 0;
                    v39 += 40;
                  }
                  v63[1] = v39;
                }
              }
            }
          }
          details::ZinIrMappedData_Impl<ZinKernelPosition>::write(a4, (uint64_t)v63);
          if (v63[0])
          {
            v63[1] = v63[0];
            operator delete(v63[0]);
          }
        }
      }
      ++v37;
    }
    while (v37 != v57);
  }
  v63[0] = v67;
  std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v63);
  v63[0] = v68;
  std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v63);
}

void sub_206E04570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  a19 = &a27;
  std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a19 = (char *)(v27 - 120);
  std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

BOOL details::ZinIrMappedData_Impl<ZinKernelPosition>::write(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v4 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  if (v3 <= v4)
    v5 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - v3) >> 3);
  else
    v5 = 0;
  if (v2 <= v5)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_))
    {
      memcpy(*(void **)(a1 + 64), *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
      *(_QWORD *)(a1 + 64) += *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    }
    std::vector<ZinKernelPosition>::resize(a2, 0);
    std::vector<ZinKernelPosition>::shrink_to_fit(a2);
  }
  return v2 <= v5;
}

void std::vector<ZinKernelPosition>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<ZinKernelPosition>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 40 * a2;
  }
}

void std::vector<ZinKernelPosition>::shrink_to_fit(uint64_t a1)
{
  char *v2;
  int64x2_t v3;
  int64x2_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v2 = *(char **)a1;
  v3 = *(int64x2_t *)(a1 + 8);
  v4 = vshrq_n_s64(vsubq_s64(v3, vdupq_n_s64((unint64_t)v2)), 3uLL);
  v5 = 0xCCCCCCCCCCCCCCCDLL * v4.i64[0];
  v6 = v5;
  if (0xCCCCCCCCCCCCCCCDLL * v4.i64[1] > v5)
  {
    if ((char *)v3.i64[0] == v2)
    {
      v11 = 0;
      v9 = 40 * v5;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(a1 + 16, v5);
      v2 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[40 * v6];
      v11 = &v7[40 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *(_OWORD *)(v8 - 40);
          v14 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(v12 - 8) = *((_QWORD *)v8 - 1);
          *(_OWORD *)(v12 - 24) = v14;
          *(_OWORD *)(v12 - 40) = v13;
          v12 -= 40;
          v8 -= 40;
        }
        while (v8 != v2);
        v2 = *(char **)a1;
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v2)
      operator delete(v2);
  }
}

void std::vector<ZinKernelPosition>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[40 * v8];
    v15 = &v12[40 * v11];
    v16 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 40);
        v21 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v21;
        *(_OWORD *)(v14 - 40) = v20;
        v14 -= 40;
        v18 -= 40;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

_QWORD *std::vector<ZinKernelPosition>::vector(_QWORD *a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<ZinMirInterchangeInfo>::__vallocate[abi:ne180100](a1, a2);
    v6 = a1[1];
    v7 = v6 + 40 * a2;
    v8 = 40 * a2;
    do
    {
      v9 = *a3;
      v10 = a3[1];
      *(_QWORD *)(v6 + 32) = *((_QWORD *)a3 + 4);
      *(_OWORD *)v6 = v9;
      *(_OWORD *)(v6 + 16) = v10;
      v6 += 40;
      v8 -= 40;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_206E04A14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<ZinKernelPosition>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<ZinTensorDimensions>::__init_with_size[abi:ne180100]<std::__wrap_iter<ZinTensorDimensions const*>,std::__wrap_iter<ZinTensorDimensions const*>>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_206E04AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<std::vector<ZinKernelPosition>>>::vector(_QWORD *a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<std::vector<ZinKernelPosition>>::__init_with_size[abi:ne180100]<std::vector<ZinKernelPosition>*,std::vector<ZinKernelPosition>*>(v6, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_206E04B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<ZinKernelPosition>>::__init_with_size[abi:ne180100]<std::vector<ZinKernelPosition>*,std::vector<ZinKernelPosition>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinKernelPosition>>,std::vector<ZinKernelPosition>*,std::vector<ZinKernelPosition>*,std::vector<ZinKernelPosition>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_206E04C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinKernelPosition>>,std::vector<ZinKernelPosition>*,std::vector<ZinKernelPosition>*,std::vector<ZinKernelPosition>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<ZinTensorDimensions>::__init_with_size[abi:ne180100]<std::__wrap_iter<ZinTensorDimensions const*>,std::__wrap_iter<ZinTensorDimensions const*>>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinKernelPosition>>,std::vector<ZinKernelPosition>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_206E04CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinKernelPosition>>,std::vector<ZinKernelPosition>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinKernelPosition>>,std::vector<ZinKernelPosition>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinIrOpLayer *>>,std::vector<ZinIrOpLayer *>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t ZinIrOpt::RemoveRedundantShapeChange(ZinIrOpt *this, ZinIrControlFlowGraph *a2, const ZinIrCompilerParameters *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7[0] = &off_24C0042A8;
  v7[1] = a2;
  v8 = v7;
  v3 = ZinIrControlFlowGraph::TraverseForward(this, (uint64_t)v7, 1);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void sub_206E04E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinIrOpt::RemoveRedundantShapeChange(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveRedundantShapeChange(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::RemoveRedundantShapeChange(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveRedundantShapeChange(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0042A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::RemoveRedundantShapeChange(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveRedundantShapeChange(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0042A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::RemoveRedundantShapeChange(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveRedundantShapeChange(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, ZinIrOpLayerGraph **a2, uint64_t *a3)
{
  ZinIrOpLayerGraph *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  ZinIrKernel **v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  ZinIrKernel *v13;
  int v14;
  int *i;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  ZinIrKernel ***v22;
  char *v23;
  char *v24;
  ZinIrKernel **v25;
  ZinIrKernel ***v26;
  ZinIrOpLayer *v27;
  ZinReshapeLayer *v28;
  ZinIrOpLayer **v29;
  int v30;
  int v31;
  ZinIrTransposeInfo *ReshapeInfo;
  const ZinIrTransposeInfo *v33;
  uint64_t InputTensor;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  ZinIrOpLayer **v38;
  ZinIrOpLayer **v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  ZinIrOpLayer **v44;
  ZinIrOpLayer **v45;
  ZinIrOpLayer **v46;
  ZinIrOpLayer *v47;
  char *v48;
  char *v49;
  int64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  ZinIrOpLayer **v58;
  int v59;
  ZinIrOpLayer *v60;
  int v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t ***v79;
  uint64_t ***v80;
  uint64_t **v81;
  ZinIrOpLayer *v82;
  int v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  size_t v90;
  _BYTE *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  std::string *v96;
  std::string *v97;
  __int128 v98;
  const std::string::value_type *v99;
  std::string::size_type v100;
  std::string *v101;
  __int128 v102;
  ZinIrTensor *v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD *v114;
  std::string *v115;
  __int128 v116;
  std::string *v117;
  __int128 v118;
  const std::string::value_type *v119;
  std::string::size_type v120;
  ZinIrOpLayer **v121;
  ZinIrOpLayer **j;
  std::string *v123;
  __int128 v124;
  const std::string::value_type *v125;
  std::string::size_type v126;
  char *v127;
  char *v128;
  std::string *v129;
  __int128 v130;
  const std::string::value_type *v131;
  std::string::size_type v132;
  void **v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  int v143;
  _QWORD *v144;
  _QWORD *v145;
  int8x16_t *v146;
  int64x2_t v147;
  int64x2_t *v148;
  int64x2_t *v149;
  int64x2_t v150;
  int64x2_t v151;
  int32x4_t v152;
  size_t v153;
  const char *v154;
  _BYTE *v155;
  const void *v156;
  std::string *v157;
  std::string *v158;
  __int128 v159;
  std::string *v160;
  std::string::size_type size;
  std::string *v162;
  __int128 v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  void *v179;
  ZinIrOpLayer **v180;
  ZinIrOpLayer *v181;
  ZinIrOpLayer *v182;
  _BOOL4 v183;
  int v184;
  uint64_t **v185;
  ZinIrOpLayer *v186;
  int v187;
  ZinIrOpLayer *v188;
  _BOOL4 v189;
  int v191;
  uint64_t v192;
  ZinIrOpLayer **v193;
  int64x2_t v194;
  _QWORD **v195;
  ZinIrOpLayerGraph *v196;
  void *v197;
  void *__dst;
  uint64_t v199;
  uint64_t *v200;
  _QWORD *v201;
  uint64_t v202;
  void *v203;
  char *v204;
  unint64_t v205;
  void *v206;
  char *v207;
  char *v208;
  void *__p[2];
  __int128 v210;
  _BYTE v211[20];
  int32x4_t v212;
  int v213;
  char v214;
  _BYTE v215[32];
  uint64_t v216;
  __int128 v217;
  std::string::size_type v218;
  std::string v219;
  _BYTE v220[32];
  uint64_t v221;
  ZinIrOpLayer **v222;
  ZinIrOpLayer **v223;
  _QWORD v224[4];

  v224[1] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 8);
  v222 = 0;
  v223 = 0;
  v224[0] = 0;
  v206 = 0;
  v207 = 0;
  v208 = 0;
  v203 = 0;
  v204 = 0;
  v205 = 0;
  v201 = 0;
  v202 = 0;
  v200 = (uint64_t *)&v201;
  v6 = *(uint64_t **)(v4 + 88);
  v195 = (_QWORD **)(v4 + 88);
  v196 = v3;
  if (*(uint64_t **)(v4 + 96) == v6)
    goto LABEL_215;
  v7 = *v6;
  if (*(_QWORD *)(*v6 + 120) - *(_QWORD *)(*v6 + 112) > 8uLL)
    goto LABEL_215;
  v192 = v5;
  v8 = (ZinIrKernel **)v4;
  while (1)
  {
    v9 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0);
    v10 = *(_OWORD *)(v9 + 64);
    *(_OWORD *)v220 = *(_OWORD *)(v9 + 48);
    *(_OWORD *)&v220[16] = v10;
    v221 = *(_QWORD *)(v9 + 80);
    v11 = (*((uint64_t (**)(ZinIrKernel **, _QWORD, _QWORD))*v8 + 4))(v8, 0, 0);
    v12 = *(_OWORD *)(v11 + 64);
    *(_OWORD *)v215 = *(_OWORD *)(v11 + 48);
    *(_OWORD *)&v215[16] = v12;
    v216 = *(_QWORD *)(v11 + 80);
    if (!ZinTensorDimensionsEqual(v220, v215))
      break;
    v13 = v8[8];
    v14 = *((_DWORD *)v13 + 2);
    switch(v14)
    {
      case 1:
        (*((void (**)(void **__return_ptr, ZinIrKernel **))*v8 + 17))(__p, v8);
        if (!v214
          || __p[0] != (void *)1
          || __p[1] != (void *)1
          || v210 != __PAIR128__(0x100000001, 1)
          || *(_DWORD *)v211 != 1
          || (vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(*(int32x4_t *)&v211[4], (int32x4_t)xmmword_207A8A480), (int16x8_t)vceqzq_s32(v212))))) & 1) != 0|| v213)
        {
          goto LABEL_39;
        }
        goto LABEL_21;
      case 2:
        if (ZinGOCLayer::IsPerCout(v8))
        {
          LODWORD(__p[0]) = 2;
          std::__tree<ZinIrDimension>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension>(&v200, (int *)__p, __p);
        }
        goto LABEL_21;
      case 3:
      case 6:
      case 7:
      case 8:
        goto LABEL_39;
      case 4:
      case 9:
        goto LABEL_21;
      case 5:
        if ((IsEWTypeUnary(*((_DWORD *)v13 + 3)) & 1) != 0)
          goto LABEL_21;
        goto LABEL_39;
      default:
        if (v14 != 42)
          goto LABEL_39;
        std::unordered_set<ZinIrDimension>::unordered_set((uint64_t)__p, (uint64_t)v13 + 16);
        for (i = (int *)v210; i; i = *(int **)i)
          std::__tree<ZinKernelFormat>::__emplace_hint_unique_key_args<ZinKernelFormat,ZinKernelFormat const&>(&v200, (uint64_t *)&v201, i + 4, i + 4);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)__p);
LABEL_21:
        v16 = v207;
        if (v207 >= v208)
        {
          v18 = (v207 - (_BYTE *)v206) >> 3;
          if ((unint64_t)(v18 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v19 = (v208 - (_BYTE *)v206) >> 2;
          if (v19 <= v18 + 1)
            v19 = v18 + 1;
          if ((unint64_t)(v208 - (_BYTE *)v206) >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v19;
          if (v20)
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v208, v20);
          else
            v21 = 0;
          v22 = (ZinIrKernel ***)&v21[8 * v18];
          *v22 = v8;
          v17 = (char *)(v22 + 1);
          v24 = (char *)v206;
          v23 = v207;
          if (v207 != v206)
          {
            do
            {
              v25 = (ZinIrKernel **)*((_QWORD *)v23 - 1);
              v23 -= 8;
              *--v22 = v25;
            }
            while (v23 != v24);
            v23 = (char *)v206;
          }
          v206 = v22;
          v207 = v17;
          v208 = &v21[8 * v20];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *(_QWORD *)v207 = v8;
          v17 = v16 + 8;
        }
        v207 = v17;
        v26 = (ZinIrKernel ***)v8[14];
        if ((unint64_t)(v8[15] - (ZinIrKernel *)v26) > 8)
          goto LABEL_215;
        v8 = *v26;
        v7 = *(_QWORD *)(*v26)[11];
        break;
    }
  }
LABEL_39:
  if (v207 == v206)
    goto LABEL_215;
  v27 = *(ZinIrOpLayer **)v206;
  v28 = (ZinReshapeLayer *)*((_QWORD *)v207 - 1);
  while (1)
  {
    v29 = (ZinIrOpLayer **)*((_QWORD *)v27 + 11);
    v27 = *v29;
    v28 = (ZinReshapeLayer *)**((_QWORD **)v28 + 14);
    v30 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)*v29 + 32))(*v29, 0, 0)+ 88);
    if (v30 != *(_DWORD *)((*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0, 0)+ 88))break;
    v31 = *(_DWORD *)(*((_QWORD *)v27 + 8) + 8);
    if (v31 != *(_DWORD *)(*((_QWORD *)v28 + 8) + 8))
      break;
    if (v31 == 35)
    {
      InputTensor = ZinIrOpLayer::GetInputTensor(v27, 0);
      v35 = *(_OWORD *)(InputTensor + 64);
      *(_OWORD *)__p = *(_OWORD *)(InputTensor + 48);
      v210 = v35;
      *(_QWORD *)v211 = *(_QWORD *)(InputTensor + 80);
      v36 = (*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0, 0);
      v37 = *(_OWORD *)(v36 + 64);
      *(_OWORD *)v220 = *(_OWORD *)(v36 + 48);
      *(_OWORD *)&v220[16] = v37;
      v221 = *(_QWORD *)(v36 + 80);
      if (!ZinTensorDimensionsEqual(__p, v220))
        break;
    }
    else
    {
      if (v31 != 37)
        break;
      ReshapeInfo = (ZinIrTransposeInfo *)ZinReshapeLayer::GetReshapeInfo(v27);
      v33 = (const ZinIrTransposeInfo *)ZinReshapeLayer::GetReshapeInfo(v28);
      if (!ZinIrTransposeInfo::IsInverse(ReshapeInfo, v33))
        break;
    }
    v38 = v223;
    if ((unint64_t)v223 >= v224[0])
    {
      v40 = v223 - v222;
      if ((unint64_t)(v40 + 1) >> 61)
        goto LABEL_295;
      v41 = (uint64_t)(v224[0] - (_QWORD)v222) >> 2;
      if (v41 <= v40 + 1)
        v41 = v40 + 1;
      if (v224[0] - (_QWORD)v222 >= 0x7FFFFFFFFFFFFFF8uLL)
        v42 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      if (v42)
        v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v224, v42);
      else
        v43 = 0;
      v44 = (ZinIrOpLayer **)&v43[8 * v40];
      *v44 = v27;
      v39 = v44 + 1;
      v46 = v222;
      v45 = v223;
      if (v223 != v222)
      {
        do
        {
          v47 = *--v45;
          *--v44 = v47;
        }
        while (v45 != v46);
        v45 = v222;
      }
      v222 = v44;
      v223 = v39;
      v224[0] = &v43[8 * v42];
      if (v45)
        operator delete(v45);
    }
    else
    {
      *v223 = v27;
      v39 = v38 + 1;
    }
    v223 = v39;
    v48 = v204;
    if ((unint64_t)v204 >= v205)
    {
      v50 = (v204 - (_BYTE *)v203) >> 3;
      if ((unint64_t)(v50 + 1) >> 61)
LABEL_295:
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v51 = (uint64_t)(v205 - (_QWORD)v203) >> 2;
      if (v51 <= v50 + 1)
        v51 = v50 + 1;
      if (v205 - (unint64_t)v203 >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v51;
      if (v52)
        v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v205, v52);
      else
        v53 = 0;
      v54 = &v53[8 * v50];
      *(_QWORD *)v54 = v28;
      v49 = v54 + 8;
      v56 = (char *)v203;
      v55 = v204;
      if (v204 != v203)
      {
        do
        {
          v57 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v54 - 1) = v57;
          v54 -= 8;
        }
        while (v55 != v56);
        v55 = (char *)v203;
      }
      v203 = v54;
      v204 = v49;
      v205 = (unint64_t)&v53[8 * v52];
      if (v55)
        operator delete(v55);
    }
    else
    {
      *(_QWORD *)v204 = v28;
      v49 = v48 + 8;
    }
    v204 = v49;
  }
  if (!v202)
    goto LABEL_121;
  if (v202 != 1)
  {
LABEL_215:
    v75 = 0;
    goto LABEL_216;
  }
  v58 = v222;
  v193 = v223;
  if (v222 == v223)
    goto LABEL_121;
  v59 = *((_DWORD *)v200 + 7);
  v191 = v59;
  do
  {
    v60 = *v58;
    v61 = *(_DWORD *)(*((_QWORD *)*v58 + 8) + 8);
    if (v61 == 35)
    {
      v64 = v4;
      v65 = (_QWORD *)ZinIrOpLayer::GetInputTensor(*v58, 0);
      v67 = v65[6];
      v66 = v65[7];
      v69 = v65[8];
      v68 = v65[9];
      v70 = v65[10];
      v71 = (_QWORD *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v60 + 32))(v60, 0, 0);
      v72 = v71[6];
      v73 = v71[7];
      v74 = v71[10];
      switch(v59)
      {
        case 0:
          v59 = 0;
          v75 = 0;
          v4 = v64;
          if (v67 == v72)
            goto LABEL_119;
          goto LABEL_216;
        case 1:
          if (v67 != v72 || v70 != v74)
            goto LABEL_269;
          v59 = 1;
          goto LABEL_118;
        case 2:
          if (v70 * v67 != v74 * v72 || v66 != v73)
            goto LABEL_269;
          v59 = 2;
          goto LABEL_118;
        case 3:
          if (v70 * v67 * v66 != v74 * v72 * v73 || v69 != v71[8])
            goto LABEL_269;
          v59 = 3;
          goto LABEL_118;
        case 4:
          if (v68 != v71[9])
            goto LABEL_269;
          v59 = 4;
LABEL_118:
          v4 = v64;
          goto LABEL_119;
        default:
LABEL_269:
          v75 = 0;
          v4 = v64;
          goto LABEL_216;
      }
    }
    if (v61 == 37)
    {
      v62 = ZinReshapeLayer::GetReshapeInfo(*v58);
      __p[1] = 0;
      *(_QWORD *)&v210 = 0;
      __p[0] = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(__p, *(const void **)(v62 + 16), *(_QWORD *)(v62 + 24), (uint64_t)(*(_QWORD *)(v62 + 24) - *(_QWORD *)(v62 + 16)) >> 3);
      if (__p[0] == __p[1])
      {
LABEL_91:
        if (__p[0])
          goto LABEL_97;
      }
      else
      {
        v63 = __p[0];
        while (*v63 != v59)
        {
          v63 += 2;
          if (v63 == __p[1])
            goto LABEL_91;
        }
        v59 = v63[1];
        if (__p[0])
        {
LABEL_97:
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
    }
LABEL_119:
    ++v58;
  }
  while (v58 != v193);
  if (v191 != v59)
    goto LABEL_215;
LABEL_121:
  v197 = 0;
  __dst = 0;
  v199 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v197, v222, (uint64_t)v223, v223 - v222);
  std::vector<ZinGOCLayer const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinGOCLayer const**>,std::__wrap_iter<ZinGOCLayer const**>>((uint64_t)&v197, (uint64_t)__dst, (char *)v203, v204, (v204 - (_BYTE *)v203) >> 3);
  v79 = (uint64_t ***)v197;
  v80 = (uint64_t ***)__dst;
  if (v197 == __dst)
  {
LABEL_124:
    if (v223 != v222)
    {
      v84 = (char *)v206;
      v85 = v207;
      if (v206 != v207)
      {
        v86 = **(_QWORD **)(*(_QWORD *)v206 + 88);
        do
        {
          v87 = *(_QWORD *)v84;
          v88 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v84 + 32))(*(_QWORD *)v84, 0, 0);
          v89 = v88;
          if (*(char *)(v88 + 47) >= 0)
            v90 = *(unsigned __int8 *)(v88 + 47);
          else
            v90 = *(_QWORD *)(v88 + 32);
          std::string::basic_string[abi:ne180100]((uint64_t)v220, v90 + 1);
          if (v220[23] >= 0)
            v91 = v220;
          else
            v91 = *(_BYTE **)v220;
          if (v90)
          {
            v94 = *(char **)(v89 + 24);
            v93 = (char *)(v89 + 24);
            v92 = v94;
            if (v93[23] >= 0)
              v95 = v93;
            else
              v95 = v92;
            memmove(v91, v95, v90);
          }
          *(_WORD *)&v91[v90] = 95;
          v96 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v219, "reshape_red_shape");
          v97 = std::string::append(v96, "_xfm", 4uLL);
          v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
          *(_QWORD *)&v215[16] = *((_QWORD *)&v97->__r_.__value_.__l + 2);
          *(_OWORD *)v215 = v98;
          v97->__r_.__value_.__l.__size_ = 0;
          v97->__r_.__value_.__r.__words[2] = 0;
          v97->__r_.__value_.__r.__words[0] = 0;
          if (v215[23] >= 0)
            v99 = v215;
          else
            v99 = *(const std::string::value_type **)v215;
          if (v215[23] >= 0)
            v100 = v215[23];
          else
            v100 = *(_QWORD *)&v215[8];
          v101 = std::string::append((std::string *)v220, v99, v100);
          v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
          *(_QWORD *)&v210 = *((_QWORD *)&v101->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v102;
          v101->__r_.__value_.__l.__size_ = 0;
          v101->__r_.__value_.__r.__words[2] = 0;
          v101->__r_.__value_.__r.__words[0] = 0;
          if ((v215[23] & 0x80000000) != 0)
            operator delete(*(void **)v215);
          if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v219.__r_.__value_.__l.__data_);
          if ((v220[23] & 0x80000000) != 0)
            operator delete(*(void **)v220);
          v103 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v87 + 32))(v87, 0, 0);
          ZinIrTensor::CopyTensorMirInfo(v103, (ZinIrTensor::MirInfo **)&v219);
          v104 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v86 + 32))(v86, 0, 0);
          v218 = v219.__r_.__value_.__r.__words[0];
          v219.__r_.__value_.__r.__words[0] = 0;
          ZinIrTensor::CreateTensor(v104, (__int128 *)__p, &v218, (uint64_t *)v215);
          v105 = (_QWORD *)v218;
          v218 = 0;
          if (v105)
            std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v218, v105);
          v217 = *(_OWORD *)v215;
          if (*(_QWORD *)&v215[8])
          {
            v106 = (unint64_t *)(*(_QWORD *)&v215[8] + 8);
            do
              v107 = __ldxr(v106);
            while (__stxr(v107 + 1, v106));
          }
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v87 + 24))(v87, &v217);
          v108 = (std::__shared_weak_count *)*((_QWORD *)&v217 + 1);
          if (*((_QWORD *)&v217 + 1))
          {
            v109 = (unint64_t *)(*((_QWORD *)&v217 + 1) + 8);
            do
              v110 = __ldaxr(v109);
            while (__stlxr(v110 - 1, v109));
            if (!v110)
            {
              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
              std::__shared_weak_count::__release_weak(v108);
            }
          }
          v111 = *(std::__shared_weak_count **)&v215[8];
          if (*(_QWORD *)&v215[8])
          {
            v112 = (unint64_t *)(*(_QWORD *)&v215[8] + 8);
            do
              v113 = __ldaxr(v112);
            while (__stlxr(v113 - 1, v112));
            if (!v113)
            {
              ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
              std::__shared_weak_count::__release_weak(v111);
            }
          }
          v114 = (_QWORD *)v219.__r_.__value_.__r.__words[0];
          v219.__r_.__value_.__r.__words[0] = 0;
          if (v114)
            std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v219, v114);
          if (SBYTE7(v210) < 0)
            operator delete(__p[0]);
          v84 += 8;
        }
        while (v84 != v85);
      }
    }
    if (*(int *)(v192 + 96) >= 1 && v223 != v222)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "\n[RemoveRedundantShape]");
      std::to_string(&v219, ((char *)v223 - (char *)v222) >> 2);
      v115 = std::string::insert(&v219, 0, "\nRemoved redundant pre/post shaping layers(size=", 0x30uLL);
      v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
      *(_QWORD *)&v215[16] = *((_QWORD *)&v115->__r_.__value_.__l + 2);
      *(_OWORD *)v215 = v116;
      v115->__r_.__value_.__l.__size_ = 0;
      v115->__r_.__value_.__r.__words[2] = 0;
      v115->__r_.__value_.__r.__words[0] = 0;
      v117 = std::string::append((std::string *)v215, ")={\n", 4uLL);
      v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
      *(_QWORD *)&v220[16] = *((_QWORD *)&v117->__r_.__value_.__l + 2);
      *(_OWORD *)v220 = v118;
      v117->__r_.__value_.__l.__size_ = 0;
      v117->__r_.__value_.__r.__words[2] = 0;
      v117->__r_.__value_.__r.__words[0] = 0;
      if (v220[23] >= 0)
        v119 = v220;
      else
        v119 = *(const std::string::value_type **)v220;
      if (v220[23] >= 0)
        v120 = v220[23];
      else
        v120 = *(_QWORD *)&v220[8];
      std::string::append((std::string *)__p, v119, v120);
      if ((v220[23] & 0x80000000) != 0)
        operator delete(*(void **)v220);
      if ((v215[23] & 0x80000000) != 0)
        operator delete(*(void **)v215);
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v219.__r_.__value_.__l.__data_);
      v121 = v222;
      for (j = v223; v121 != j; ++v121)
      {
        std::operator+<char>();
        v123 = std::string::append((std::string *)v215, ", \n", 3uLL);
        v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
        *(_QWORD *)&v220[16] = *((_QWORD *)&v123->__r_.__value_.__l + 2);
        *(_OWORD *)v220 = v124;
        v123->__r_.__value_.__l.__size_ = 0;
        v123->__r_.__value_.__r.__words[2] = 0;
        v123->__r_.__value_.__r.__words[0] = 0;
        if (v220[23] >= 0)
          v125 = v220;
        else
          v125 = *(const std::string::value_type **)v220;
        if (v220[23] >= 0)
          v126 = v220[23];
        else
          v126 = *(_QWORD *)&v220[8];
        std::string::append((std::string *)__p, v125, v126);
        if ((v220[23] & 0x80000000) != 0)
          operator delete(*(void **)v220);
        if ((v215[23] & 0x80000000) != 0)
          operator delete(*(void **)v215);
      }
      v127 = (char *)v203;
      v128 = v204;
      if (v203 != v204)
      {
        do
        {
          std::operator+<char>();
          v129 = std::string::append((std::string *)v215, ", \n", 3uLL);
          v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
          *(_QWORD *)&v220[16] = *((_QWORD *)&v129->__r_.__value_.__l + 2);
          *(_OWORD *)v220 = v130;
          v129->__r_.__value_.__l.__size_ = 0;
          v129->__r_.__value_.__r.__words[2] = 0;
          v129->__r_.__value_.__r.__words[0] = 0;
          if (v220[23] >= 0)
            v131 = v220;
          else
            v131 = *(const std::string::value_type **)v220;
          if (v220[23] >= 0)
            v132 = v220[23];
          else
            v132 = *(_QWORD *)&v220[8];
          std::string::append((std::string *)__p, v131, v132);
          if ((v220[23] & 0x80000000) != 0)
            operator delete(*(void **)v220);
          if ((v215[23] & 0x80000000) != 0)
            operator delete(*(void **)v215);
          v127 += 8;
        }
        while (v127 != v128);
      }
      std::string::append((std::string *)__p, "}\n", 2uLL);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        v133 = __p;
        if (SBYTE7(v210) < 0)
          v133 = (void **)__p[0];
        *(_DWORD *)v220 = 136315138;
        *(_QWORD *)&v220[4] = v133;
        _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s\n", v220, 0xCu);
      }
      if (SBYTE7(v210) < 0)
        operator delete(__p[0]);
    }
    v75 = 0;
  }
  else
  {
    while (1)
    {
      v81 = *v79;
      v82 = (ZinIrOpLayer *)*(*v79)[11];
      *(_OWORD *)__p = 0u;
      v210 = 0u;
      *(_DWORD *)v211 = 1065353216;
      v83 = ZinIrOpLayerGraph::MoveOutgoingEdges(v196, v81, v82, __p);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)__p);
      if ((v83 & ZinIrOpLayerGraph::RemoveNode(v196, (ZinIrOpLayer *)v81, 0) & 1) == 0)
        break;
      if (++v79 == v80)
        goto LABEL_124;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      std::__function::__func<ZinIrOpt::RemoveRedundantShapeChange(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveRedundantShapeChange(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v4, v167, v168, v169, v170, v171, v172, v173);
    v75 = 3;
  }
  if (v197)
  {
    __dst = v197;
    operator delete(v197);
  }
LABEL_216:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v200, v201);
  if (v203)
  {
    v204 = (char *)v203;
    operator delete(v203);
  }
  if (v206)
  {
    v207 = (char *)v206;
    operator delete(v206);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  if (!(_DWORD)v75)
  {
    if (*(_DWORD *)(*(_QWORD *)(v4 + 64) + 8) != 7)
      return 0;
    v141 = *(uint64_t **)(v4 + 112);
    if (*(_QWORD *)(v4 + 120) - (_QWORD)v141 != 8)
      return 0;
    v142 = *v141;
    v143 = *(_DWORD *)(*(_QWORD *)(*v141 + 64) + 8);
    if (v143 != 37 && v143 != 35)
      return 0;
    v144 = *(_QWORD **)(v4 + 88);
    v145 = *(_QWORD **)(v4 + 96);
    if (v144 != v145)
    {
      v194 = vdupq_n_s64(1uLL);
      while (1)
      {
        v146 = (int8x16_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v144 + 32))(*v144, 0, 0);
        v147.i64[0] = v146[5].i64[0];
        v147.i64[1] = v146[4].i64[0];
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vextq_s8(v146[3], v146[3], 8uLL), v194), (int32x4_t)vceqq_s64(v147, v194))))) & 1) != 0|| v146[4].i64[1] != 1)
        {
          return 0;
        }
        if (++v144 == v145)
        {
          v142 = **(_QWORD **)(v4 + 112);
          break;
        }
      }
    }
    v148 = (int64x2_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v142 + 32))(v142, 0, 0);
    v149 = v148;
    if (v148[4].i64[1] != 1)
      return 0;
    v150.i64[0] = v148[5].i64[0];
    v150.i64[1] = v148[4].i64[0];
    v151 = vdupq_n_s64(1uLL);
    v152 = (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v148[3], v151), (int32x4_t)vceqq_s64(v150, v151)), (int8x16_t)xmmword_207A8E9B0);
    v152.i32[0] = vaddvq_s32(v152);
    *(int8x8_t *)v152.i8 = vcnt_s8(*(int8x8_t *)v152.i8);
    v152.i16[0] = vaddlv_u8(*(uint8x8_t *)v152.i8);
    if (v152.i32[0] != 3)
      return 0;
    if (*(char *)(v4 + 47) >= 0)
      v153 = *(unsigned __int8 *)(v4 + 47);
    else
      v153 = *(_QWORD *)(v4 + 32);
    std::string::basic_string[abi:ne180100]((uint64_t)v215, v153 + 1);
    v154 = (const char *)(v4 + 24);
    if (v215[23] >= 0)
      v155 = v215;
    else
      v155 = *(_BYTE **)v215;
    if (v153)
    {
      if (*(char *)(v4 + 47) >= 0)
        v156 = (const void *)(v4 + 24);
      else
        v156 = *(const void **)(v4 + 24);
      memmove(v155, v156, v153);
    }
    *(_WORD *)&v155[v153] = 95;
    v157 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v222, "sclr_ccat_cpy");
    v158 = std::string::append(v157, "_xfm", 4uLL);
    v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
    v219.__r_.__value_.__r.__words[2] = v158->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v159;
    v158->__r_.__value_.__l.__size_ = 0;
    v158->__r_.__value_.__r.__words[2] = 0;
    v158->__r_.__value_.__r.__words[0] = 0;
    if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v160 = &v219;
    else
      v160 = (std::string *)v219.__r_.__value_.__r.__words[0];
    if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v219.__r_.__value_.__r.__words[2]);
    else
      size = v219.__r_.__value_.__l.__size_;
    v162 = std::string::append((std::string *)v215, (const std::string::value_type *)v160, size);
    v163 = *(_OWORD *)&v162->__r_.__value_.__l.__data_;
    *(_QWORD *)&v220[16] = *((_QWORD *)&v162->__r_.__value_.__l + 2);
    *(_OWORD *)v220 = v163;
    v162->__r_.__value_.__l.__size_ = 0;
    v162->__r_.__value_.__r.__words[2] = 0;
    v162->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(__p, v220);
    if ((v220[23] & 0x80000000) != 0)
      operator delete(*(void **)v220);
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v219.__r_.__value_.__l.__data_);
    if (SHIBYTE(v224[0]) < 0)
      operator delete(v222);
    if ((v215[23] & 0x80000000) != 0)
      operator delete(*(void **)v215);
    v164 = *(_QWORD *)(v4 + 64);
    v165 = *(_DWORD *)(v164 + 12);
    if (v149[3].i64[0] <= 1)
    {
      if (v149[3].i64[1] <= 1)
      {
        if (v149[5].i64[0] <= 1)
        {
          if (v149[4].i64[0] <= 1)
            v166 = v165;
          else
            v166 = 2;
        }
        else
        {
          v166 = 4;
        }
      }
      else
      {
        v166 = 0;
      }
    }
    else
    {
      v166 = 5;
    }
    if ((_DWORD)v166 != v165)
    {
      v174 = *(_QWORD *)(v4 + 16);
      v206 = 0;
      ZinBuilder::CreateConcat(v174, (uint64_t)__p, (__int128 *)v149[3].i8, v195, v164 + 16, v166, 1, &v206, (void **)v215, 0);
      v175 = v206;
      v206 = 0;
      if (v175)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v206, v175);
      v176 = *(_QWORD *)(v4 + 96) - *(_QWORD *)(v4 + 88);
      if (v176)
      {
        v177 = 0;
        v178 = v176 >> 3;
        v179 = *(void **)v215;
        if (v178 <= 1)
          v178 = 1;
        while (!*(_QWORD *)(*(_QWORD *)v215 + 8 * v177))
        {
          if (v178 == ++v177)
            goto LABEL_285;
        }
      }
      else
      {
LABEL_285:
        v180 = (ZinIrOpLayer **)v4;
        v181 = *(ZinIrOpLayer **)(*(_QWORD *)&v215[8] - 8);
        v222 = v180;
        v182 = (ZinIrOpLayer *)v180;
        v223 = *(ZinIrOpLayer ***)v180[14];
        v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v222;
        v219.__r_.__value_.__l.__size_ = 2;
        Layer2TDMapper::SourceLayer::SourceLayer(v220, &v219);
        v183 = ZinIrOpLayerGraph::AddNode((uint64_t **)v196, v181, (ZinIrOpLayer ***)v220);
        *(_QWORD *)v220 = &unk_24C02BB18;
        if (*(_QWORD *)&v220[8])
        {
          *(_QWORD *)&v220[16] = *(_QWORD *)&v220[8];
          operator delete(*(void **)&v220[8]);
        }
        v184 = ZinIrOpLayerGraph::MoveIncomingEdges(v196, v182, *(ZinIrOpLayer **)(*(_QWORD *)&v215[8] - 8));
        v185 = (uint64_t **)**((_QWORD **)v182 + 14);
        v186 = *(ZinIrOpLayer **)(*(_QWORD *)&v215[8] - 8);
        memset(v220, 0, sizeof(v220));
        LODWORD(v221) = 1065353216;
        v187 = ZinIrOpLayerGraph::MoveOutgoingEdges(v196, v185, v186, v220);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v220);
        v188 = (ZinIrOpLayer *)**((_QWORD **)v182 + 14);
        v189 = ZinIrOpLayerGraph::RemoveNode(v196, v182, 0);
        if ((v183 & v184 & v187 & v189 & ZinIrOpLayerGraph::RemoveNode(v196, v188, 0) & 1) == 0)
        {
          if (*((char *)v182 + 47) < 0)
            v154 = *(const char **)v154;
          ZinAssertImpl("Error: RemoveRedundantShapeChangeAfterScalarConcat of layer %s fails changing graph.", v154);
        }
        v179 = *(void **)v215;
        if (!*(_QWORD *)v215)
          goto LABEL_290;
      }
      *(_QWORD *)&v215[8] = v179;
      operator delete(v179);
    }
LABEL_290:
    __p[0] = off_24C01FBB0;
    if (SHIBYTE(v210) < 0)
      operator delete(__p[1]);
    return 0;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    std::__function::__func<ZinIrOpt::RemoveRedundantShapeChange(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveRedundantShapeChange(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v4, v134, v135, v136, v137, v138, v139, v140);
  return v75;
}

void sub_206E0618C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,void *__p,int a33,__int16 a34,char a35,char a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;
  uint64_t v55;
  void *v57;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v55 - 176);
  v57 = *(void **)(v54 + 96);
  if (v57)
  {
    *(_QWORD *)(v54 + 104) = v57;
    operator delete(v57);
  }
  if (a40 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ZinIrOpt::RemoveRedundantShapeChange(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveRedundantShapeChange(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::RemoveRedundantShapeChange(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveRedundantShapeChange(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::RemoveRedundantShapeChange(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveRedundantShapeChange(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: RemoveRedundantShapeChange fails in %s.", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: RemoveRedundantShapeLayer fails in %s.", a5, a6, a7, a8, 2u);
}

void std::__function::__func<ZinIrOpt::RemoveRedundantShapeChange(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveRedundantShapeChange(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(std::__shared_weak_count **a1, uint64_t a2, int a3, uint64_t a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v7 = *a1;
  if (*a1)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
}

__CFDictionary *ZinCreatePEElementWiseUnit(const ZinIrPEElementWiseUnitInfo *a1)
{
  __CFDictionary *Unit;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  Unit = ZinCreateUnit(a1);
  v6[0] = &off_24C0540C8;
  v7 = v6;
  ZinCreatePEUnit((uint64_t)a1, (uint64_t)v6, Unit);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return Unit;
}

void sub_206E066D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinCreatePEElementWiseUnit(ZinIrPEElementWiseUnitInfo const&)::$_0,std::allocator<ZinCreatePEElementWiseUnit(ZinIrPEElementWiseUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinCreatePEElementWiseUnit(ZinIrPEElementWiseUnitInfo const&)::$_0,std::allocator<ZinCreatePEElementWiseUnit(ZinIrPEElementWiseUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C0540C8;
  return result;
}

void std::__function::__func<ZinCreatePEElementWiseUnit(ZinIrPEElementWiseUnitInfo const&)::$_0,std::allocator<ZinCreatePEElementWiseUnit(ZinIrPEElementWiseUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C0540C8;
}

void std::__function::__func<ZinCreatePEElementWiseUnit(ZinIrPEElementWiseUnitInfo const&)::$_0,std::allocator<ZinCreatePEElementWiseUnit(ZinIrPEElementWiseUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::operator()(uint64_t a1, const ZinIrPEUnitInfo *a2, uint64_t a3, __CFDictionary **a4)
{
  __CFDictionary *v6;
  size_t v7;
  std::string *p_str;
  _QWORD *v9;
  __CFDictionary *ScaledEWUnit;
  std::string *p_p;
  CFStringRef v12;
  size_t v13;
  std::string *v14;
  _QWORD *v15;
  __CFDictionary *ReductionUnit;
  std::string *v17;
  CFStringRef v18;
  void (**v19)(ZinIrReductionUnitInfo *__hidden);
  std::string __p;
  int v21;
  std::string v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  size_t v28;
  unsigned __int8 v29;
  __int128 v30;
  void *v31;
  std::string __s;
  int v33;
  __int128 *v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  __int16 v38;
  char v39;
  void *v40;
  std::string v41;
  int v42;
  __int128 *v43;
  __int128 *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  std::string __str;
  __int128 v50;

  *(_QWORD *)&v50 = *MEMORY[0x24BDAC8D0];
  v6 = *a4;
  ZinIrPEUnitInfo::ZinIrPEUnitInfo((ZinIrPEUnitInfo *)&v26, a2);
  v26 = &unk_24C023BB8;
  std::__optional_copy_base<ZinIrScaledEWUnitInfo,false>::__optional_copy_base[abi:ne180100](&v31, (uint64_t)a2 + 968);
  std::__optional_copy_base<ZinIrReductionUnitInfo,false>::__optional_copy_base[abi:ne180100](&v40, (uint64_t)a2 + 1080);
  if (v39)
  {
    v19 = off_24C017CA0;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      __p = __s;
    v21 = v33;
    memset(&v22, 0, sizeof(v22));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, v34, v35, 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - (char *)v34) >> 3));
    v19 = (void (**)(ZinIrReductionUnitInfo *__hidden))&unk_24C020AA8;
    LOWORD(v25) = v38;
    v23 = v36;
    v24 = v37;
    if ((v29 & 0x80u) == 0)
      v7 = v29;
    else
      v7 = v28;
    p_str = &__str;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, v7 + 10);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (v7)
    {
      if ((v29 & 0x80u) == 0)
        v9 = &v27;
      else
        v9 = v27;
      memmove(p_str, v9, v7);
    }
    strcpy((char *)p_str + v7, ".scaled_ew");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __str;
    v23 = v30;
    if (&v22 != (std::string *)a3)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v22, *(std::string **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      __str = __p;
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)a3, &__str, &v50, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    ScaledEWUnit = ZinCreateScaledEWUnit((const ZinIrScaledEWUnitInfo *)&v19);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)p_p, 0x8000100u);
    CFDictionaryAddValue(v6, v12, ScaledEWUnit);
    CFRelease(v12);
    CFRelease(ScaledEWUnit);
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v19);
  }
  if (v48)
  {
    v19 = off_24C017CA0;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
    else
      __p = v41;
    v21 = v42;
    memset(&v22, 0, sizeof(v22));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, v43, v44, 0xAAAAAAAAAAAAAAABLL * (((char *)v44 - (char *)v43) >> 3));
    v19 = off_24C021A78;
    v25 = v47;
    v23 = v45;
    v24 = v46;
    if ((v29 & 0x80u) == 0)
      v13 = v29;
    else
      v13 = v28;
    v14 = &__str;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, v13 + 10);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v14 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (v13)
    {
      if ((v29 & 0x80u) == 0)
        v15 = &v27;
      else
        v15 = v27;
      memmove(v14, v15, v13);
    }
    strcpy((char *)v14 + v13, ".reduction");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __str;
    v23 = v30;
    if (&v22 != (std::string *)a3)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v22, *(std::string **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      __str = __p;
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)a3, &__str, &v50, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    ReductionUnit = ZinCreateReductionUnit((const ZinIrReductionUnitInfo *)&v19);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &__p;
    else
      v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v18 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)v17, 0x8000100u);
    CFDictionaryAddValue(v6, v18, ReductionUnit);
    CFRelease(v18);
    CFRelease(ReductionUnit);
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v19);
    v26 = &unk_24C023BB8;
    if (v48)
      ZinIrUnitInfo::~ZinIrUnitInfo(&v40);
  }
  else
  {
    v26 = &unk_24C023BB8;
  }
  if (v39)
    ZinIrUnitInfo::~ZinIrUnitInfo(&v31);
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(&v26);
}

void sub_206E06CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void **v23;

  ZinIrUnitInfo::~ZinIrUnitInfo(&a10);
  a23 = (uint64_t)&unk_24C023BB8;
  if (LOBYTE(STACK[0x510]))
    ZinIrUnitInfo::~ZinIrUnitInfo(a9);
  if (LOBYTE(STACK[0x4A0]))
    ZinIrUnitInfo::~ZinIrUnitInfo(v23);
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo((void **)&a23);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ZinCreatePEElementWiseUnit(ZinIrPEElementWiseUnitInfo const&)::$_0,std::allocator<ZinCreatePEElementWiseUnit(ZinIrPEElementWiseUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinCreatePEElementWiseUnit(ZinIrPEElementWiseUnitInfo const&)::$_0,std::allocator<ZinCreatePEElementWiseUnit(ZinIrPEElementWiseUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::target_type()
{
}

void ZinIrPEElementWiseUnitInfo::~ZinIrPEElementWiseUnitInfo(void **this)
{
  *this = &unk_24C023BB8;
  if (*((_BYTE *)this + 1184))
    ZinIrUnitInfo::~ZinIrUnitInfo(this + 135);
  if (*((_BYTE *)this + 1072))
    ZinIrUnitInfo::~ZinIrUnitInfo(this + 121);
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(this);
}

{
  *this = &unk_24C023BB8;
  if (*((_BYTE *)this + 1184))
    ZinIrUnitInfo::~ZinIrUnitInfo(this + 135);
  if (*((_BYTE *)this + 1072))
    ZinIrUnitInfo::~ZinIrUnitInfo(this + 121);
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(this);
  JUMPOUT(0x20BD002F8);
}

_BYTE *std::__optional_copy_base<ZinIrScaledEWUnitInfo,false>::__optional_copy_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[104] = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    std::construct_at[abi:ne180100]<ZinIrScaledEWUnitInfo,ZinIrScaledEWUnitInfo const&,ZinIrScaledEWUnitInfo*>((uint64_t)a1, a2);
    a1[104] = 1;
  }
  return a1;
}

void sub_206E06EEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 104))
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrScaledEWUnitInfo,ZinIrScaledEWUnitInfo const&,ZinIrScaledEWUnitInfo*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;
  __int128 v6;

  *(_QWORD *)a1 = off_24C017CA0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 40), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)a1 = &unk_24C020AA8;
  v6 = *(_OWORD *)(a2 + 80);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  return a1;
}

void sub_206E06FCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_copy_base<ZinIrReductionUnitInfo,false>::__optional_copy_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[104] = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    std::construct_at[abi:ne180100]<ZinIrReductionUnitInfo,ZinIrReductionUnitInfo const&,ZinIrReductionUnitInfo*>((uint64_t)a1, a2);
    a1[104] = 1;
  }
  return a1;
}

void sub_206E07028(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 104))
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrReductionUnitInfo,ZinIrReductionUnitInfo const&,ZinIrReductionUnitInfo*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;
  __int128 v6;

  *(_QWORD *)a1 = off_24C017CA0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 40), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)a1 = off_24C021A78;
  v6 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  return a1;
}

void sub_206E07108(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

ZinIrNEUnit *ZinIrNEBypassUnit::ZinIrNEBypassUnit(ZinIrNEUnit *a1, const ZinIrNEUnitInfo *a2)
{
  _QWORD *v4;

  ZinIrNEUnit::ZinIrNEUnit(a1, a2);
  *v4 = &off_24C01CAF8;
  ZinIrNEUnitInfo::ZinIrNEUnitInfo((ZinIrNEUnitInfo *)(v4 + 55), a2);
  *((_QWORD *)a1 + 55) = &unk_24C020840;
  return a1;
}

void sub_206E07174(_Unwind_Exception *a1)
{
  ZinIrNEUnit *v1;

  ZinIrNEUnit::~ZinIrNEUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrNEBypassUnit::CreateLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t SubLayers;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;

  SubLayers = ZinIrNEUnit::CreateSubLayers((_BYTE *)a1, a2, (ZinIrTensor ***)a3);
  v7 = v6;
  v8 = operator new();
  v9 = v8;
  v10 = *(_QWORD *)(a3 + 8);
  v12 = *(_QWORD *)(v10 - 16);
  v11 = *(std::__shared_weak_count **)(v10 - 8);
  v19 = v12;
  v20 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  ZinNEBypassLayer::ZinNEBypassLayer(v8, &v19, (__int128 *)(a1 + 448), 0, 0, 0, SubLayers, v7, 0, 0);
  v15 = v20;
  if (v20)
  {
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*(_BYTE *)(a1 + 420))
  {
    *(_DWORD *)(v9 + 420) = *(_DWORD *)(a1 + 416);
    *(_BYTE *)(v9 + 424) = 1;
  }
  return v9;
}

void sub_206E0728C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x20BD002F8](v3, 0x10B3C4062F41AEELL);
  _Unwind_Resume(a1);
}

uint64_t ZinIrNEBypassUnit::CreateKernel(ZinIrNEUnit *a1, const ZinIrHalParameters *a2, ZinIrFileManager *a3, const ZinWeightFileInfo *a4, uint64_t a5, uint64_t a6, ZinIrUnitStatus *a7)
{
  uint64_t v7;
  uint64_t v8;

  if ((_DWORD)a5)
    ZinAssertImpl("NEBypass does not support Espresso weight format", a2, a3, a4, a5, a6, a7, v7, v8);
  return ZinIrNEUnit::CreateSubKernels(a1, a2, a3, a4, a7);
}

uint64_t ZinIrNEBypassUnit::TensorDimensions(ZinIrNEBypassUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, CFArrayRef *a4)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;

  v4 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) - v4 == 120)
  {
    result = 0;
    v6 = *(_OWORD *)(v4 + 8);
    v7 = *(_OWORD *)(v4 + 24);
    *((_QWORD *)a3 + 4) = *(_QWORD *)(v4 + 40);
    *(_OWORD *)a3 = v6;
    *((_OWORD *)a3 + 1) = v7;
  }
  else
  {
    ZinIrUnitStatus::SetError(a4, CFSTR("InvalidBottomCount"));
    return 3;
  }
  return result;
}

void ZinIrNEBypassUnit::~ZinIrNEBypassUnit(ZinIrNEBypassUnit *this)
{
  ZinIrNEBypassUnit::~ZinIrNEBypassUnit(this);
  JUMPOUT(0x20BD002F8);
}

{
  void **v2;

  *(_QWORD *)this = &off_24C01CAF8;
  v2 = (void **)((char *)this + 440);
  *((_QWORD *)this + 55) = &unk_24C01AB80;
  if (*((_BYTE *)this + 792))
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 85);
  if (*((_BYTE *)this + 672))
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 65);
  ZinIrUnitInfo::~ZinIrUnitInfo(v2);
  ZinIrNEUnit::~ZinIrNEUnit(this);
}

__CFDictionary *ZinCreateAffineTransformUnit(const ZinIrAffineTransformUnitInfo *a1)
{
  __CFDictionary *Unit;
  __CFDictionary *TextureCommonUnit;
  const __CFAllocator *v4;
  __CFArray *Mutable;
  _DWORD *v6;
  _DWORD *v7;
  __CFDictionary *CoordinateInfo;
  CFNumberRef v9;
  CFNumberRef v10;
  int v12;
  int valuePtr;

  Unit = ZinCreateUnit(a1);
  TextureCommonUnit = ZinCreateTextureCommonUnit(a1);
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 1, MEMORY[0x24BDBD690]);
  v6 = (_DWORD *)*((_QWORD *)a1 + 25);
  v7 = (_DWORD *)*((_QWORD *)a1 + 26);
  while (v6 != v7)
  {
    CoordinateInfo = ZinCreateCoordinateInfo(v6);
    CFArrayAppendValue(Mutable, CoordinateInfo);
    CFRelease(CoordinateInfo);
    v6 += 3;
  }
  CFDictionaryAddValue(TextureCommonUnit, CFSTR("OutputCoordinateInfo"), Mutable);
  CFRelease(Mutable);
  valuePtr = *((_QWORD *)a1 + 20);
  v9 = CFNumberCreate(v4, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(TextureCommonUnit, CFSTR("OutputWidth"), v9);
  CFRelease(v9);
  v12 = *((_QWORD *)a1 + 21);
  v10 = CFNumberCreate(v4, kCFNumberSInt32Type, &v12);
  CFDictionaryAddValue(TextureCommonUnit, CFSTR("OutputHeight"), v10);
  CFRelease(v10);
  CFDictionaryAddValue(Unit, CFSTR("Params"), TextureCommonUnit);
  CFRelease(TextureCommonUnit);
  return Unit;
}

uint64_t ZinParseNEUnit(const __CFDictionary *a1, ZinIrNEUnitInfo *a2, CFArrayRef *a3)
{
  const __CFNumber *Value;
  const __CFNumber *v7;
  CFTypeID v8;
  size_t v9;
  void **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  char *v16;
  void *__p[2];
  char v19;

  Value = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("BinaryPoint"));
  if (Value)
  {
    v7 = Value;
    v8 = CFGetTypeID(Value);
    if (v8 == CFNumberGetTypeID())
    {
      LODWORD(__p[0]) = 0;
      CFNumberGetValue(v7, kCFNumberSInt32Type, __p);
      *((_DWORD *)a2 + 90) = __p[0];
      *((_BYTE *)a2 + 364) = 1;
    }
  }
  if (*((char *)a2 + 31) >= 0)
    v9 = *((unsigned __int8 *)a2 + 31);
  else
    v9 = *((_QWORD *)a2 + 2);
  v10 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v9 + 4);
  if (v19 < 0)
    v10 = (void **)__p[0];
  if (v9)
  {
    if (*((char *)a2 + 31) >= 0)
      v11 = (char *)a2 + 8;
    else
      v11 = (char *)*((_QWORD *)a2 + 1);
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, ".goc");
  v12 = OptionalSubunitParser<ZinIrGOCUnitInfo>(a1, (const char *)__p, (uint64_t (*)(const void *, void **, CFArrayRef *))ZinParseGOCUnit, (uint64_t)a2 + 80, a3);
  v13 = v12;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if ((_DWORD)v13)
      return v13;
  }
  else if ((_DWORD)v12)
  {
    return v13;
  }
  if (*((char *)a2 + 31) >= 0)
    v14 = *((unsigned __int8 *)a2 + 31);
  else
    v14 = *((_QWORD *)a2 + 2);
  v15 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v14 + 11);
  if (v19 < 0)
    v15 = (void **)__p[0];
  if (v14)
  {
    if (*((char *)a2 + 31) >= 0)
      v16 = (char *)a2 + 8;
    else
      v16 = (char *)*((_QWORD *)a2 + 1);
    memmove(v15, v16, v14);
  }
  strcpy((char *)v15 + v14, ".activation");
  v13 = OptionalSubunitParser<ZinIrNeuronUnitInfo>(a1, (const char *)__p, (uint64_t (*)(const void *, void **, CFArrayRef *))ZinParseNeuronUnit, (uint64_t)a2 + 240, a3);
  if (v19 < 0)
    operator delete(__p[0]);
  return v13;
}

void sub_206E076F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinWeightFileInfo::AddWeightFile(uint64_t **a1, __int128 *a2, int a3)
{
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t **v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  char v24[8];
  void *v25;
  char v26;
  uint64_t v27;
  std::string v28;
  void *__p;
  char v30;

  if (a3)
    v6 = 3;
  else
    v6 = 9;
  if (a3)
    v7 = a1 + 3;
  else
    v7 = a1 + 9;
  v24[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v25, &byte_207AF6795);
  v27 = 0;
  std::pair<std::string const,WeightFileProperties>::pair[abi:ne180100]<true,0>(&v28, a2, (uint64_t)v24);
  if (a3)
    v8 = a1;
  else
    v8 = a1 + 6;
  v9 = std::__tree<std::__value_type<std::string,WeightFileProperties>,std::__map_value_compare<std::string,std::__value_type<std::string,WeightFileProperties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,WeightFileProperties>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,WeightFileProperties>>(v8, (void **)&v28.__r_.__value_.__l.__data_, (__int128 *)&v28);
  if (v30 < 0)
    operator delete(__p);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (v26 < 0)
    operator delete(v25);
  v10 = (unint64_t)v7[2];
  v11 = (uint64_t **)v7[1];
  if ((unint64_t)v11 >= v10)
  {
    v13 = a1[v6];
    v14 = ((char *)v11 - (char *)v13) >> 3;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v15 = v10 - (_QWORD)v13;
    v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v7 + 2), v17);
    else
      v18 = 0;
    v19 = (uint64_t **)&v18[8 * v14];
    v20 = &v18[8 * v17];
    *v19 = v9;
    v12 = (uint64_t *)(v19 + 1);
    v21 = v7[1];
    v22 = a1[v6];
    if (v21 != v22)
    {
      do
      {
        v23 = (uint64_t *)*--v21;
        *--v19 = v23;
      }
      while (v21 != v22);
      v21 = a1[v6];
    }
    a1[v6] = (uint64_t *)v19;
    v7[1] = v12;
    v7[2] = (uint64_t *)v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v11 = v9;
    v12 = (uint64_t *)(v11 + 1);
  }
  v7[1] = v12;
}

void sub_206E07894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  std::pair<std::string const,WeightFileProperties>::~pair((uint64_t)&a18);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,WeightFileProperties>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void ZinWeightFileInfo::AddWeightFiles(uint64_t **a1, __int128 **a2, int a3)
{
  __int128 *v3;
  __int128 *v4;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      ZinWeightFileInfo::AddWeightFile(a1, v3, a3);
      v3 = (__int128 *)((char *)v3 + 24);
    }
    while (v3 != v4);
  }
}

BOOL ZinWeightFileInfo::GetWeightFile(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  std::string v13;

  v5 = a1 + 72;
  v6 = 24;
  if (a3)
    v5 = a1 + 24;
  else
    v6 = 72;
  v7 = *(_QWORD *)(v5 + 8);
  v8 = *(_QWORD *)(a1 + v6);
  v9 = (v7 - v8) >> 3;
  if (v9 > a2)
  {
    v11 = *(_QWORD *)(v8 + 8 * a2);
    if (*(char *)(v11 + 55) < 0)
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(v11 + 32), *(_QWORD *)(v11 + 40));
    else
      v13 = *(std::string *)(v11 + 32);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v13;
  }
  return v9 > a2;
}

uint64_t ZinWeightFileInfo::GetWeightFileCount(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 72;
  v3 = 24;
  if (a2)
    v2 = a1 + 24;
  else
    v3 = 72;
  return (uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)(a1 + v3)) >> 3;
}

uint64_t ZinWeightFileInfo::SetFileProperties(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t **v6;
  uint64_t *v7;
  void **v9;

  if ((void **)(a1 + 8) == std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a1, a2))
  {
    if ((void **)(a1 + 56) == std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a1 + 48, a2))return 0;
    v9 = a2;
    v6 = (uint64_t **)(a1 + 48);
  }
  else
  {
    v9 = a2;
    v6 = (uint64_t **)a1;
  }
  v7 = std::__tree<std::__value_type<std::string,WeightFileProperties>,std::__map_value_compare<std::string,std::__value_type<std::string,WeightFileProperties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,WeightFileProperties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v9);
  *((_BYTE *)v7 + 56) = *(_BYTE *)a3;
  std::string::operator=((std::string *)(v7 + 8), (const std::string *)(a3 + 8));
  v7[11] = *(_QWORD *)(a3 + 32);
  return 1;
}

BOOL ZinWeightFileInfo::IsEncrypted(uint64_t a1, unint64_t a2, int a3, _BYTE *a4)
{
  _BOOL8 WeightFileProperties;
  _BYTE v7[8];
  void *__p;
  uint64_t v9;
  uint64_t v10;

  v7[0] = 0;
  v9 = 0;
  v10 = 0;
  __p = 0;
  WeightFileProperties = ZinWeightFileInfo::GetWeightFileProperties(a1, a2, a3, (uint64_t)v7);
  if (WeightFileProperties)
    *a4 = v7[0];
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return WeightFileProperties;
}

void sub_206E07B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ZinWeightFileInfo::GetWeightFileProperties(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void **v14;
  char v16;
  std::string v17;
  uint64_t v18;

  v5 = a1 + 72;
  v6 = 24;
  if (a3)
    v5 = a1 + 24;
  else
    v6 = 72;
  v7 = *(_QWORD *)(v5 + 8);
  v8 = *(_QWORD *)(a1 + v6);
  v9 = (v7 - v8) >> 3;
  if (v9 > a2)
  {
    v11 = *(_QWORD *)(v8 + 8 * a2);
    v12 = *(_BYTE *)(v11 + 56);
    v16 = v12;
    if (*(char *)(v11 + 87) < 0)
    {
      std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(v11 + 64), *(_QWORD *)(v11 + 72));
      v12 = v16;
    }
    else
    {
      v17 = *(std::string *)(v11 + 64);
    }
    v13 = *(_QWORD *)(v11 + 88);
    v18 = v13;
    *(_BYTE *)a4 = v12;
    v14 = (void **)(a4 + 8);
    if (*(char *)(a4 + 31) < 0)
    {
      operator delete(*v14);
      v13 = v18;
    }
    *(_OWORD *)v14 = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
    *(_QWORD *)(a4 + 24) = *((_QWORD *)&v17.__r_.__value_.__l + 2);
    *(_QWORD *)(a4 + 32) = v13;
  }
  return v9 > a2;
}

std::string *std::pair<std::string const,WeightFileProperties>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__s.__data_[0] = *(_BYTE *)a3;
  v6 = (std::string *)((char *)this + 32);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(a3 + 8);
    this[2].__r_.__value_.__r.__words[0] = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  this[2].__r_.__value_.__l.__size_ = *(_QWORD *)(a3 + 32);
  return this;
}

void sub_206E07CF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,WeightFileProperties>,std::__map_value_compare<std::string,std::__value_type<std::string,WeightFileProperties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,WeightFileProperties>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,WeightFileProperties>>(uint64_t **a1, void **a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::string,WeightFileProperties>,std::__map_value_compare<std::string,std::__value_type<std::string,WeightFileProperties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,WeightFileProperties>>>::__construct_node<std::pair<std::string const,WeightFileProperties>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,WeightFileProperties>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,WeightFileProperties>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

std::string *std::__tree<std::__value_type<std::string,WeightFileProperties>,std::__map_value_compare<std::string,std::__value_type<std::string,WeightFileProperties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,WeightFileProperties>>>::__construct_node<std::pair<std::string const,WeightFileProperties>>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,WeightFileProperties>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_206E07DF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,WeightFileProperties>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,WeightFileProperties>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,WeightFileProperties>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__s.__data_[0] = *((_BYTE *)a2 + 24);
  v5 = a2[2];
  this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 6);
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v5;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 4) = 0;
  this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
  return this;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,WeightFileProperties>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,WeightFileProperties>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,WeightFileProperties>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,WeightFileProperties>,std::__map_value_compare<std::string,std::__value_type<std::string,WeightFileProperties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,WeightFileProperties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,WeightFileProperties>,std::__map_value_compare<std::string,std::__value_type<std::string,WeightFileProperties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,WeightFileProperties>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,WeightFileProperties>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,WeightFileProperties>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

double std::__tree<std::__value_type<std::string,WeightFileProperties>,std::__map_value_compare<std::string,std::__value_type<std::string,WeightFileProperties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,WeightFileProperties>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  double result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_QWORD *)v6 + 11) = 0;
  result = 0.0;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_206E07FEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,WeightFileProperties>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,WeightFileProperties>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void ZinIrUnitStatus::SetError(CFArrayRef *this, const __CFString *a2)
{
  CFRange v4;

  v4.length = CFArrayGetCount(this[1]);
  v4.location = 0;
  if (!CFArrayContainsValue(this[1], v4, a2))
    CFArrayAppendValue(this[1], a2);
}

CFIndex ZinIrUnitStatus::GetErrors@<X0>(CFArrayRef *this@<X0>, void **a2@<X8>)
{
  CFIndex v4;
  uint64_t v5;
  CFIndex result;
  const void *ValueAtIndex;
  const void *v8;
  CFTypeID v9;
  const void *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = (uint64_t)(a2 + 2);
  while (1)
  {
    result = CFArrayGetCount(this[1]);
    if (result <= v4)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(this[1], v4);
    v8 = ValueAtIndex;
    if (ValueAtIndex)
    {
      v9 = CFGetTypeID(ValueAtIndex);
      if (v9 == CFStringGetTypeID())
        v10 = v8;
      else
        v10 = 0;
    }
    else
    {
      v10 = 0;
    }
    v12 = a2[1];
    v11 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v11)
    {
      v14 = ((char *)v12 - (_BYTE *)*a2) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v15 = v11 - (_QWORD)*a2;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v17);
      else
        v18 = 0;
      v19 = &v18[8 * v14];
      *(_QWORD *)v19 = v10;
      v13 = v19 + 8;
      v21 = (char *)*a2;
      v20 = (char *)a2[1];
      if (v20 != *a2)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *((_QWORD *)v19 - 1) = v22;
          v19 -= 8;
        }
        while (v20 != v21);
        v20 = (char *)*a2;
      }
      *a2 = v19;
      a2[1] = v13;
      a2[2] = &v18[8 * v17];
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v12 = v10;
      v13 = v12 + 1;
    }
    a2[1] = v13;
    ++v4;
  }
  return result;
}

void sub_206E081A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrUnitStatus::Status(ZinIrUnitStatus *this, const __CFString *a2)
{
  if (CFArrayGetCount(*((CFArrayRef *)this + 1)) > 0)
  {
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)this, a2, *((const void **)this + 1));
    if (CFArrayGetCount(*((CFArrayRef *)this + 2)) < 1)
      return *(_QWORD *)this;
    goto LABEL_5;
  }
  if (CFArrayGetCount(*((CFArrayRef *)this + 2)) > 0)
  {
LABEL_5:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)this, CFSTR("UnitInvalidBottoms"), *((const void **)this + 2));
    return *(_QWORD *)this;
  }
  return 0;
}

void ZinIrIOStatus::ZinIrIOStatus(ZinIrIOStatus *this)
{
  const __CFAllocator *v2;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  *(_QWORD *)this = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *((_QWORD *)this + 1) = CFArrayCreateMutable(v2, 0, MEMORY[0x24BDBD690]);
}

void ZinIrIOStatus::~ZinIrIOStatus(ZinIrIOStatus *this)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)this;
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)this = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 1) = 0;
  }
}

CFArrayRef ZinIrIOStatus::Status(CFArrayRef *this, const __CFString *a2)
{
  if (CFArrayGetCount(this[1]) < 1)
    return 0;
  CFDictionaryAddValue(*this, a2, this[1]);
  return *this;
}

void ZinIrNetworkStatus::ZinIrNetworkStatus(ZinIrNetworkStatus *this)
{
  const __CFAllocator *v2;
  _OWORD v3[3];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 7) = (char *)this + 64;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = (char *)this + 88;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 13) = (char *)this + 112;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 16) = (char *)this + 136;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 19) = (char *)this + 160;
  v3[0] = xmmword_207AA0620;
  v3[1] = unk_207AA0630;
  v3[2] = xmmword_207AA0640;
  std::map<IOType,__CFArray *>::map[abi:ne180100]((uint64_t)this + 176, (int *)v3, 3);
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  *((_QWORD *)this + 1) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *((_QWORD *)this + 2) = CFArrayCreateMutable(v2, 0, MEMORY[0x24BDBD690]);
  *((_QWORD *)this + 3) = CFArrayCreateMutable(v2, 0, MEMORY[0x24BDBD690]);
}

void sub_206E084CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _QWORD **v13;
  _QWORD **v14;
  _QWORD **v15;
  _QWORD **v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD **v20;

  std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::destroy(v18, *v19);
  std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::destroy(v17, *v16);
  std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::destroy(a10, *v15);
  std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::destroy(a11, *v14);
  std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::destroy(a12, *v13);
  std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>>>::destroy(a13, *v20);
  _Unwind_Resume(a1);
}

void ZinIrNetworkStatus::~ZinIrNetworkStatus(ZinIrNetworkStatus *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  const void *v9;
  const void *v10;
  int v11;
  int *v12;

  v2 = *(const void **)this;
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)this = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 1) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 2);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 2) = 0;
  }
  v5 = (const void *)*((_QWORD *)this + 3);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 3) = 0;
  }
  v11 = 0;
  v12 = &v11;
  if (std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t **)this + 22, &v11, (uint64_t)&std::piecewise_construct, &v12)[5])
  {
    v11 = 0;
    v12 = &v11;
    v6 = std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t **)this + 22, &v11, (uint64_t)&std::piecewise_construct, &v12);
    CFRelease(v6[5]);
    v11 = 0;
    v12 = &v11;
    std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t **)this + 22, &v11, (uint64_t)&std::piecewise_construct, &v12)[5] = 0;
  }
  v11 = 2;
  v12 = &v11;
  if (std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t **)this + 22, &v11, (uint64_t)&std::piecewise_construct, &v12)[5])
  {
    v11 = 2;
    v12 = &v11;
    v7 = std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t **)this + 22, &v11, (uint64_t)&std::piecewise_construct, &v12);
    CFRelease(v7[5]);
    v11 = 2;
    v12 = &v11;
    std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t **)this + 22, &v11, (uint64_t)&std::piecewise_construct, &v12)[5] = 0;
  }
  v11 = 1;
  v12 = &v11;
  if (std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t **)this + 22, &v11, (uint64_t)&std::piecewise_construct, &v12)[5])
  {
    v11 = 1;
    v12 = &v11;
    v8 = std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t **)this + 22, &v11, (uint64_t)&std::piecewise_construct, &v12);
    CFRelease(v8[5]);
    v11 = 1;
    v12 = &v11;
    std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t **)this + 22, &v11, (uint64_t)&std::piecewise_construct, &v12)[5] = 0;
  }
  v9 = (const void *)*((_QWORD *)this + 25);
  if (v9)
  {
    CFRelease(v9);
    *((_QWORD *)this + 25) = 0;
  }
  v10 = (const void *)*((_QWORD *)this + 26);
  if (v10)
  {
    CFRelease(v10);
    *((_QWORD *)this + 26) = 0;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 176, *((_QWORD **)this + 23));
  std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::destroy((uint64_t)this + 128, *((_QWORD **)this + 17));
  std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::destroy((uint64_t)this + 104, *((_QWORD **)this + 14));
  std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
}

uint64_t ZinIrNetworkStatus::LiveIOList(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  int v8;

  v8 = a2;
  v2 = *(_QWORD *)(a1 + 184);
  if (!v2)
    goto LABEL_12;
  v3 = a1 + 184;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a2;
    if (v4 >= a2)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == a1 + 184 || *(_DWORD *)(v3 + 32) > a2)
LABEL_12:
    ZinAssertImpl("Invalid live IO type");
  return *std::map<ZinIrDimension,unsigned long>::at(a1 + 176, &v8);
}

void ZinIrNetworkStatus::SetError(CFArrayRef *this, const __CFString *a2)
{
  CFRange v4;

  v4.length = CFArrayGetCount(this[2]);
  v4.location = 0;
  if (!CFArrayContainsValue(this[2], v4, a2))
    CFArrayAppendValue(this[2], a2);
}

CFMutableDictionaryRef *ZinIrNetworkStatus::AddUnit(ZinIrNetworkStatus *this, CFStringRef theString)
{
  uint64_t **v4;
  void **v5;
  CFMutableDictionaryRef *v6;
  ZinIrUnitStatus *v8;
  uint64_t *v9;
  void *__p[2];
  uint64_t v11;
  void **v12;

  __p[0] = 0;
  __p[1] = 0;
  v11 = 0;
  if (theString && (ZinGetString(theString, (uint64_t)__p) & 1) != 0)
  {
    v4 = (uint64_t **)((char *)this + 32);
    v5 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)this + 32, __p);
    if ((void **)((char *)this + 40) == v5)
    {
      v8 = (ZinIrUnitStatus *)operator new();
      ZinIrUnitStatus::ZinIrUnitStatus(v8);
      v12 = __p;
      v9 = std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v12);
      std::unique_ptr<ZinIrUnitStatus>::reset[abi:ne180100]((ZinIrUnitStatus **)v9 + 7, v8);
      v12 = __p;
      v6 = (CFMutableDictionaryRef *)std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v12)[7];
      if (v6)
        CFDictionaryAddValue(*v6, CFSTR("Name"), theString);
    }
    else
    {
      v6 = (CFMutableDictionaryRef *)v5[7];
    }
  }
  else
  {
    v6 = 0;
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_206E089C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::unique_ptr<ZinIrUnitStatus>::reset[abi:ne180100]((ZinIrUnitStatus **)&a9, 0);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CFMutableDictionaryRef *ZinIrNetworkStatus::AddInputOrState(int a1, CFStringRef theString, uint64_t **a3)
{
  void **v5;
  CFMutableDictionaryRef *v6;
  ZinIrIOStatus *v8;
  uint64_t *v9;
  void *__p[2];
  uint64_t v11;
  void **v12;

  __p[0] = 0;
  __p[1] = 0;
  v11 = 0;
  if (theString && (ZinGetString(theString, (uint64_t)__p) & 1) != 0)
  {
    v5 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)a3, __p);
    if (a3 + 1 == (uint64_t **)v5)
    {
      v8 = (ZinIrIOStatus *)operator new();
      ZinIrIOStatus::ZinIrIOStatus(v8);
      v12 = __p;
      v9 = std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v12);
      std::unique_ptr<ZinIrIOStatus>::reset[abi:ne180100]((ZinIrIOStatus **)v9 + 7, v8);
      v12 = __p;
      v6 = (CFMutableDictionaryRef *)std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v12)[7];
      if (v6)
        CFDictionaryAddValue(*v6, CFSTR("InputName"), theString);
    }
    else
    {
      v6 = (CFMutableDictionaryRef *)v5[7];
    }
  }
  else
  {
    v6 = 0;
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_206E08B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::unique_ptr<ZinIrIOStatus>::reset[abi:ne180100]((ZinIrIOStatus **)&a9, 0);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CFMutableDictionaryRef *ZinIrNetworkStatus::AddInput(uint64_t **this, const __CFString *a2)
{
  return ZinIrNetworkStatus::AddInputOrState((int)this, a2, this + 7);
}

CFMutableDictionaryRef *ZinIrNetworkStatus::AddState(uint64_t **this, const __CFString *a2)
{
  return ZinIrNetworkStatus::AddInputOrState((int)this, a2, this + 10);
}

CFMutableDictionaryRef *ZinIrNetworkStatus::AddConstant(ZinIrNetworkStatus *this, CFStringRef theString)
{
  uint64_t **v4;
  void **v5;
  CFMutableDictionaryRef *v6;
  ZinIrIOStatus *v8;
  uint64_t *v9;
  void *__p[2];
  uint64_t v11;
  void **v12;

  __p[0] = 0;
  __p[1] = 0;
  v11 = 0;
  if (theString && (ZinGetString(theString, (uint64_t)__p) & 1) != 0)
  {
    v4 = (uint64_t **)((char *)this + 104);
    v5 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)this + 104, __p);
    if ((void **)((char *)this + 112) == v5)
    {
      v8 = (ZinIrIOStatus *)operator new();
      ZinIrIOStatus::ZinIrIOStatus(v8);
      v12 = __p;
      v9 = std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v12);
      std::unique_ptr<ZinIrIOStatus>::reset[abi:ne180100]((ZinIrIOStatus **)v9 + 7, v8);
      v12 = __p;
      v6 = (CFMutableDictionaryRef *)std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v12)[7];
      if (v6)
        CFDictionaryAddValue(*v6, CFSTR("ConstantName"), theString);
    }
    else
    {
      v6 = (CFMutableDictionaryRef *)v5[7];
    }
  }
  else
  {
    v6 = 0;
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_206E08CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::unique_ptr<ZinIrIOStatus>::reset[abi:ne180100]((ZinIrIOStatus **)&a9, 0);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CFMutableDictionaryRef *ZinIrNetworkStatus::AddInputParam(ZinIrNetworkStatus *this, CFStringRef theString)
{
  uint64_t **v4;
  void **v5;
  CFMutableDictionaryRef *v6;
  ZinIrIOStatus *v8;
  uint64_t *v9;
  void *__p[2];
  uint64_t v11;
  void **v12;

  __p[0] = 0;
  __p[1] = 0;
  v11 = 0;
  if (theString && (ZinGetString(theString, (uint64_t)__p) & 1) != 0)
  {
    v4 = (uint64_t **)((char *)this + 128);
    v5 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)this + 128, __p);
    if ((void **)((char *)this + 136) == v5)
    {
      v8 = (ZinIrIOStatus *)operator new();
      ZinIrIOStatus::ZinIrIOStatus(v8);
      v12 = __p;
      v9 = std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v12);
      std::unique_ptr<ZinIrIOStatus>::reset[abi:ne180100]((ZinIrIOStatus **)v9 + 7, v8);
      v12 = __p;
      v6 = (CFMutableDictionaryRef *)std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v12)[7];
      if (v6)
        CFDictionaryAddValue(*v6, CFSTR("InputParamName"), theString);
    }
    else
    {
      v6 = (CFMutableDictionaryRef *)v5[7];
    }
  }
  else
  {
    v6 = 0;
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_206E08E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::unique_ptr<ZinIrIOStatus>::reset[abi:ne180100]((ZinIrIOStatus **)&a9, 0);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CFMutableDictionaryRef *ZinIrNetworkStatus::AddOutput(ZinIrNetworkStatus *this, CFStringRef theString)
{
  uint64_t **v4;
  void **v5;
  CFMutableDictionaryRef *v6;
  ZinIrIOStatus *v8;
  uint64_t *v9;
  void *__p[2];
  uint64_t v11;
  void **v12;

  __p[0] = 0;
  __p[1] = 0;
  v11 = 0;
  if (theString && (ZinGetString(theString, (uint64_t)__p) & 1) != 0)
  {
    v4 = (uint64_t **)((char *)this + 152);
    v5 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)this + 152, __p);
    if ((void **)((char *)this + 160) == v5)
    {
      v8 = (ZinIrIOStatus *)operator new();
      ZinIrIOStatus::ZinIrIOStatus(v8);
      v12 = __p;
      v9 = std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v12);
      std::unique_ptr<ZinIrIOStatus>::reset[abi:ne180100]((ZinIrIOStatus **)v9 + 7, v8);
      v12 = __p;
      v6 = (CFMutableDictionaryRef *)std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v12)[7];
      if (v6)
        CFDictionaryAddValue(*v6, CFSTR("OutputName"), theString);
    }
    else
    {
      v6 = (CFMutableDictionaryRef *)v5[7];
    }
  }
  else
  {
    v6 = 0;
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_206E08FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::unique_ptr<ZinIrIOStatus>::reset[abi:ne180100]((ZinIrIOStatus **)&a9, 0);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ZinIrNetworkStatus::AddNameMapping(uint64_t a1, _QWORD *a2)
{
  const __CFAllocator **v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  const __CFAllocator *v8;
  const char *v9;
  const char *v10;
  CFStringRef v11;
  const char *v12;
  CFStringRef v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;

  v4 = (const __CFAllocator **)MEMORY[0x24BDBD240];
  if (!*(_QWORD *)(a1 + 208))
    *(_QWORD *)(a1 + 208) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v7 = (_QWORD *)*a2;
  v5 = a2 + 1;
  v6 = v7;
  if (v7 != v5)
  {
    v8 = *v4;
    do
    {
      v9 = (const char *)(v6 + 4);
      if (*((char *)v6 + 55) >= 0)
        v10 = (const char *)(v6 + 4);
      else
        v10 = (const char *)v6[4];
      v11 = CFStringCreateWithCString(v8, v10, 0x8000100u);
      if (*((char *)v6 + 79) >= 0)
        v12 = (const char *)(v6 + 7);
      else
        v12 = (const char *)v6[7];
      v13 = CFStringCreateWithCString(v8, v12, 0x8000100u);
      if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 208), v11))
      {
        if (*((char *)v6 + 55) < 0)
          v9 = *(const char **)v9;
        ZinAssertImpl("Unable to add a name mapping, another mapping with same key %s already exists in the dictionary", v9);
      }
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 208), v11, v13);
      CFRelease(v11);
      CFRelease(v13);
      v14 = (_QWORD *)v6[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v6[2];
          v16 = *v15 == (_QWORD)v6;
          v6 = v15;
        }
        while (!v16);
      }
      v6 = v15;
    }
    while (v15 != v5);
  }
}

uint64_t ZinIrNetworkStatus::AppendRankAgnosticInfo(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  CFIndex v12;
  const __CFAllocator *v13;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v15;
  CFTypeID v16;
  const __CFDictionary *v17;
  const __CFString *Value;
  const __CFString *v19;
  CFTypeID v20;
  uint64_t *v21;
  __CFArray *Mutable;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  CFNumberRef v26;
  void **v27;
  _BOOL8 v28;
  uint64_t *v29;
  __CFArray *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  CFNumberRef v34;
  uint64_t v36;
  CFIndex Count;
  const __CFArray *theArray;
  void **v39;
  void *__p[2];
  uint64_t v42;
  int v43;

  v43 = a2;
  v4 = a1 + 184;
  v5 = *(_QWORD *)(a1 + 184);
  if (v5)
  {
    v7 = a1 + 176;
    v8 = v4;
    do
    {
      v9 = *(_DWORD *)(v5 + 32);
      v10 = v9 < a2;
      if (v9 >= a2)
        v11 = (uint64_t *)v5;
      else
        v11 = (uint64_t *)(v5 + 8);
      if (!v10)
        v8 = v5;
      v5 = *v11;
    }
    while (*v11);
    if (v8 != v4 && *(_DWORD *)(v8 + 32) <= a2)
    {
      theArray = (const __CFArray *)*std::map<ZinIrDimension,unsigned long>::at(v7, &v43);
      Count = CFArrayGetCount(theArray);
      if (!Count)
        return 1;
      v12 = 0;
      v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v39 = (void **)(a4 + 8);
      v36 = a4;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v12);
        if (ValueAtIndex)
        {
          v15 = ValueAtIndex;
          v16 = CFGetTypeID(ValueAtIndex);
          if (v16 == CFDictionaryGetTypeID())
            v17 = v15;
          else
            v17 = 0;
        }
        else
        {
          v17 = 0;
        }
        Value = (const __CFString *)CFDictionaryGetValue(v17, CFSTR("Symbol"));
        if (Value)
        {
          v19 = Value;
          v20 = CFGetTypeID(Value);
          if (v20 == CFStringGetTypeID())
            Value = v19;
          else
            Value = 0;
        }
        __p[0] = 0;
        __p[1] = 0;
        v42 = 0;
        if ((ZinGetString(Value, (uint64_t)__p) & 1) == 0
          || (void **)(a3 + 8) == std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a3, __p))
        {
          break;
        }
        v21 = (uint64_t *)std::map<std::string,BOOL>::at(a3, __p);
        Mutable = CFArrayCreateMutable(v13, 0, MEMORY[0x24BDBD690]);
        v23 = *v21;
        if (v21[1] != *v21)
        {
          v24 = 0;
          v25 = 0;
          do
          {
            v26 = CFNumberCreate(v13, kCFNumberSInt32Type, (const void *)(v23 + v24));
            CFArrayAppendValue(Mutable, v26);
            CFRelease(v26);
            ++v25;
            v23 = *v21;
            v24 += 4;
          }
          while (v25 < (v21[1] - *v21) >> 2);
        }
        CFDictionaryAddValue(v17, CFSTR("RankAgnosticShape"), Mutable);
        CFRelease(Mutable);
        v27 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a4, __p);
        v28 = v39 != v27;
        if (v39 != v27)
        {
          v29 = (uint64_t *)std::map<std::string,BOOL>::at(a4, __p);
          v30 = CFArrayCreateMutable(v13, 0, MEMORY[0x24BDBD690]);
          v31 = *v29;
          if (v29[1] != *v29)
          {
            v32 = 0;
            v33 = 0;
            do
            {
              v34 = CFNumberCreate(v13, kCFNumberSInt64Type, (const void *)(v31 + v32));
              CFArrayAppendValue(v30, v34);
              CFRelease(v34);
              ++v33;
              v31 = *v29;
              v32 += 8;
            }
            while (v33 < (v29[1] - *v29) >> 3);
          }
          CFDictionaryAddValue(v17, CFSTR("RankAgnosticStrides"), v30);
          a4 = v36;
          CFRelease(v30);
        }
        if (SHIBYTE(v42) < 0)
          operator delete(__p[0]);
        if (v39 != v27 && ++v12 != Count)
          continue;
        return v28;
      }
      if (SHIBYTE(v42) < 0)
        operator delete(__p[0]);
    }
  }
  return 0;
}

void sub_206E0944C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrNetworkStatus::Status(ZinIrNetworkStatus *this)
{
  CFIndex Count;
  BOOL v3;
  __CFArray *ArrayFrom;
  __CFArray *v5;
  __CFArray *v6;
  __CFArray *v7;

  Count = CFArrayGetCount(*((CFArrayRef *)this + 2));
  v3 = Count < 1;
  if (Count >= 1)
    CFDictionaryAddValue(*((CFMutableDictionaryRef *)this + 1), CFSTR("NetworkErrorList"), *((const void **)this + 2));
  if (CFArrayGetCount(*((CFArrayRef *)this + 3)) >= 1)
  {
    CFDictionaryAddValue(*((CFMutableDictionaryRef *)this + 1), CFSTR("InvalidWeightList"), *((const void **)this + 3));
    v3 = 0;
  }
  ArrayFrom = CreateArrayFromMap<ZinIrUnitStatus>((_QWORD *)this + 4, CFSTR("UnitErrorList"));
  v5 = CreateArrayFromMap<ZinIrIOStatus>((_QWORD *)this + 7, CFSTR("InputErrorList"));
  v6 = CreateArrayFromMap<ZinIrIOStatus>((_QWORD *)this + 13, CFSTR("ConstantErrorList"));
  v7 = CreateArrayFromMap<ZinIrIOStatus>((_QWORD *)this + 19, CFSTR("OutputErrorList"));
  if (CFArrayGetCount(ArrayFrom) >= 1)
  {
    CFDictionaryAddValue(*((CFMutableDictionaryRef *)this + 1), CFSTR("InvalidUnits"), ArrayFrom);
    v3 = 0;
  }
  if (CFArrayGetCount(v5) >= 1)
  {
    CFDictionaryAddValue(*((CFMutableDictionaryRef *)this + 1), CFSTR("InvalidInputs"), v5);
    v3 = 0;
  }
  if (CFArrayGetCount(v6) >= 1)
  {
    CFDictionaryAddValue(*((CFMutableDictionaryRef *)this + 1), CFSTR("InvalidConstants"), v6);
    v3 = 0;
  }
  if (CFArrayGetCount(v7) < 1)
  {
    CFRelease(ArrayFrom);
    CFRelease(v5);
    CFRelease(v6);
    CFRelease(v7);
    if (v3)
      return 0;
  }
  else
  {
    CFDictionaryAddValue(*((CFMutableDictionaryRef *)this + 1), CFSTR("InvalidOutputs"), v7);
    CFRelease(ArrayFrom);
    CFRelease(v5);
    CFRelease(v6);
    CFRelease(v7);
  }
  return *((_QWORD *)this + 1);
}

__CFArray *CreateArrayFromMap<ZinIrUnitStatus>(_QWORD *a1, const __CFString *a2)
{
  __CFArray *Mutable;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  const void *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v7 = (_QWORD *)*a1;
  v5 = a1 + 1;
  v6 = v7;
  if (v7 != v5)
  {
    do
    {
      v8 = (const void *)ZinIrUnitStatus::Status((ZinIrUnitStatus *)v6[7], a2);
      if (v8)
        CFArrayAppendValue(Mutable, v8);
      v9 = (_QWORD *)v6[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v6[2];
          v11 = *v10 == (_QWORD)v6;
          v6 = v10;
        }
        while (!v11);
      }
      v6 = v10;
    }
    while (v10 != v5);
  }
  return Mutable;
}

__CFArray *CreateArrayFromMap<ZinIrIOStatus>(_QWORD *a1, const __CFString *a2)
{
  __CFArray *Mutable;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  CFArrayRef v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v7 = (_QWORD *)*a1;
  v5 = a1 + 1;
  v6 = v7;
  if (v7 != v5)
  {
    do
    {
      v8 = ZinIrIOStatus::Status((CFArrayRef *)v6[7], a2);
      if (v8)
        CFArrayAppendValue(Mutable, v8);
      v9 = (_QWORD *)v6[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v6[2];
          v11 = *v10 == (_QWORD)v6;
          v6 = v10;
        }
        while (!v11);
      }
      v6 = v10;
    }
    while (v10 != v5);
  }
  return Mutable;
}

void ZinIrNetworkStatus::UpdateLiveIOList(uint64_t a1, int a2, const __CFArray *a3)
{
  uint64_t **v4;
  CFIndex Count;
  uint64_t **v6;
  int v7;
  int *v8;
  CFRange v9;

  v7 = a2;
  v4 = (uint64_t **)(a1 + 176);
  if (*std::map<ZinIrDimension,unsigned long>::at(a1 + 176, &v7))
  {
    Count = CFArrayGetCount(a3);
    v8 = &v7;
    v6 = std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>(v4, &v7, (uint64_t)&std::piecewise_construct, &v8);
    v9.location = 0;
    v9.length = Count;
    CFArrayAppendArray((CFMutableArrayRef)v6[5], a3, v9);
    CFRelease(a3);
  }
  else
  {
    v8 = &v7;
    std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>(v4, &v7, (uint64_t)&std::piecewise_construct, &v8)[5] = (uint64_t *)a3;
  }
}

void ZinIrNetworkStatus::AddLiveIO<ZinSinglePlaneLinearIODescriptor>(uint64_t a1, int a2, _QWORD *a3, uint64_t a4)
{
  __CFArray *SinglePlaneLinearLiveIOAttributes;

  SinglePlaneLinearLiveIOAttributes = CreateSinglePlaneLinearLiveIOAttributes(a3, a4);
  ZinIrNetworkStatus::UpdateLiveIOList(a1, a2, SinglePlaneLinearLiveIOAttributes);
}

void ZinIrNetworkStatus::AddLiveIO<ZinSinglePlaneCircularIODescriptor>(uint64_t a1, int a2, _QWORD *a3, uint64_t a4)
{
  __CFArray *SinglePlaneCircularLiveIOAttributes;

  SinglePlaneCircularLiveIOAttributes = CreateSinglePlaneCircularLiveIOAttributes(a3, a4);
  ZinIrNetworkStatus::UpdateLiveIOList(a1, a2, SinglePlaneCircularLiveIOAttributes);
}

void ZinIrNetworkStatus::AddLiveIO<ZinMultiPlaneLinearIODescriptor>(uint64_t a1, int a2, _QWORD *a3, uint64_t a4)
{
  __CFArray *MultiPlaneLinearLiveIOAttributes;

  MultiPlaneLinearLiveIOAttributes = CreateMultiPlaneLinearLiveIOAttributes(a3, a4);
  ZinIrNetworkStatus::UpdateLiveIOList(a1, a2, MultiPlaneLinearLiveIOAttributes);
}

void ZinIrNetworkStatus::AddLiveIO<ZinTiledCompressedIODescriptor>(uint64_t a1, int a2, _QWORD *a3, uint64_t a4)
{
  __CFArray *TiledLive;

  TiledLive = CreateTiledLiveIOAttributes<ZinTiledCompressedIODescriptor>(a3, a4);
  ZinIrNetworkStatus::UpdateLiveIOList(a1, a2, TiledLive);
}

__CFArray *CreateTiledLiveIOAttributes<ZinTiledCompressedIODescriptor>(_QWORD *a1, uint64_t a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  BOOL v9;
  __CFArray *Mutable;
  void **v11;
  void **v12;
  char *v13;
  __CFDictionary *TiledIOAttributeDict;
  void **v15;
  void **v16;

  v4 = (void **)(a1 + 1);
  v5 = (void **)*a1;
  if ((_QWORD *)*a1 == a1 + 1)
  {
LABEL_10:
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    v11 = (void **)*a1;
    if ((void **)*a1 != v4)
    {
      do
      {
        v12 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a2, v11 + 4);
        v13 = (char *)(v12 + 7);
        if (*((char *)v12 + 79) < 0)
          v13 = *(char **)v13;
        TiledIOAttributeDict = CreateTiledIOAttributeDict((int)v11[7], (int)v11[8], (int)v11[9], *((unsigned int *)v11 + 20), v13);
        CFArrayAppendValue(Mutable, TiledIOAttributeDict);
        CFRelease(TiledIOAttributeDict);
        v15 = (void **)v11[1];
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = (void **)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (void **)v11[2];
            v9 = *v16 == v11;
            v11 = v16;
          }
          while (!v9);
        }
        v11 = v16;
      }
      while (v16 != v4);
    }
  }
  else
  {
    v6 = (void **)(a2 + 8);
    while (v6 != std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a2, v5 + 4))
    {
      v7 = (void **)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v5[2];
          v9 = *v8 == v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
      if (v8 == v4)
        goto LABEL_10;
    }
    return 0;
  }
  return Mutable;
}

void ZinIrNetworkStatus::AddLiveInputParam(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __CFArray *LiveInputParamAttributes;
  const __CFArray *v5;
  CFRange v6;

  LiveInputParamAttributes = CreateLiveInputParamAttributes(a2, a3);
  v5 = LiveInputParamAttributes;
  if (*(_QWORD *)(a1 + 200))
  {
    v6.length = CFArrayGetCount(LiveInputParamAttributes);
    v6.location = 0;
    CFArrayAppendArray(*(CFMutableArrayRef *)(a1 + 200), v5, v6);
    CFRelease(v5);
  }
  else
  {
    *(_QWORD *)(a1 + 200) = LiveInputParamAttributes;
  }
}

void ZinIrCompilationStatus::ZinIrCompilationStatus(ZinIrCompilationStatus *this)
{
  const __CFAllocator *v2;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 2, &byte_207AF6795);
  *((_QWORD *)this + 5) = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  *(_QWORD *)this = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *((_QWORD *)this + 1) = CFArrayCreateMutable(v2, 0, MEMORY[0x24BDBD690]);
}

void sub_206E09B50(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  ZinIrNetworkStatus **v3;

  std::unique_ptr<ZinIrNetworkStatus>::reset[abi:ne180100](v3, 0);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void ZinIrCompilationStatus::~ZinIrCompilationStatus(ZinIrCompilationStatus *this)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)this;
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)this = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 1) = 0;
  }
  std::unique_ptr<ZinIrNetworkStatus>::reset[abi:ne180100]((ZinIrNetworkStatus **)this + 5, 0);
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

ZinIrNetworkStatus *ZinIrCompilationStatus::AddNetwork(ZinIrCompilationStatus *this, CFStringRef theString)
{
  ZinIrNetworkStatus *v4;
  ZinIrNetworkStatus **v5;
  uint64_t v6;
  std::string::size_type size;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  char *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  std::string *p_p;
  ZinIrNetworkStatus *v16;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  if (!theString || (ZinGetString(theString, (uint64_t)&__p) & 1) == 0)
    goto LABEL_19;
  v5 = (ZinIrNetworkStatus **)((char *)this + 40);
  v4 = (ZinIrNetworkStatus *)*((_QWORD *)this + 5);
  if (!v4)
  {
    std::string::operator=((std::string *)((char *)this + 16), &__p);
    v16 = (ZinIrNetworkStatus *)operator new();
    ZinIrNetworkStatus::ZinIrNetworkStatus(v16);
    std::unique_ptr<ZinIrNetworkStatus>::reset[abi:ne180100](v5, v16);
    v4 = *v5;
    if (*v5)
    {
      *(_QWORD *)v4 = theString;
      CFRetain(theString);
    }
    goto LABEL_20;
  }
  v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = *((unsigned __int8 *)this + 39);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *((_QWORD *)this + 3);
  if (size != v8)
  {
LABEL_19:
    v4 = 0;
    goto LABEL_20;
  }
  v12 = (unsigned __int8 *)*((_QWORD *)this + 2);
  v11 = (char *)this + 16;
  v10 = v12;
  if (v9 >= 0)
    v13 = (unsigned __int8 *)v11;
  else
    v13 = v10;
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_20;
    p_p = &__p;
    while (p_p->__r_.__value_.__s.__data_[0] == *v13)
    {
      p_p = (std::string *)((char *)p_p + 1);
      ++v13;
      if (!--v6)
        goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (memcmp(__p.__r_.__value_.__l.__data_, v13, __p.__r_.__value_.__l.__size_))
    v4 = 0;
LABEL_20:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_206E09D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x20BD002F8](v15, 0x1060C4060FD83BDLL);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCompilationStatus::Status(ZinIrCompilationStatus *this)
{
  const void **v2;
  const void *v3;
  const void *v4;
  const __CFArray *v5;
  const __CFArray *v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  const void *v10;

  if (CFArrayGetCount(*((CFArrayRef *)this + 1)) >= 1)
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)this, CFSTR("ErrorList"), *((const void **)this + 1));
  v2 = (const void **)*((_QWORD *)this + 5);
  if (v2)
  {
    if (*v2)
    {
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)this, CFSTR("Name"), *v2);
      v2 = (const void **)*((_QWORD *)this + 5);
    }
    v3 = (const void *)ZinIrNetworkStatus::Status((ZinIrNetworkStatus *)v2);
    if (v3)
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)this, CFSTR("NetworkCompilationStatus"), v3);
    v4 = (const void *)ZinIrNetworkStatus::LiveIOList(*((_QWORD *)this + 5), 0);
    if (v4)
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)this, CFSTR("LiveInputList"), v4);
    v5 = (const __CFArray *)ZinIrNetworkStatus::LiveIOList(*((_QWORD *)this + 5), 2);
    if (v5)
    {
      v6 = v5;
      if (CFArrayGetCount(v5) >= 1)
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)this, CFSTR("LiveStateList"), v6);
    }
    v7 = (const void *)ZinIrNetworkStatus::LiveIOList(*((_QWORD *)this + 5), 1);
    if (v7)
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)this, CFSTR("LiveOutputList"), v7);
    v8 = *((_QWORD *)this + 5);
    v9 = *(const void **)(v8 + 200);
    if (v9 && CFArrayGetCount(*(CFArrayRef *)(v8 + 200)) >= 1)
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)this, CFSTR("LiveInputParamList"), v9);
    v10 = *(const void **)(*((_QWORD *)this + 5) + 208);
    if (v10)
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)this, CFSTR("NameMappingDictionary"), v10);
  }
  return *(_QWORD *)this;
}

void ZinIrPlistCompilationStatus::SetName(uint64_t a1, const char *a2)
{
  CFStringRef v3;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, 0x8000100u);
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("CompiledInputSourceFileName"), v3);
  CFRelease(v3);
}

void ZinIrPlistCompilationStatus::SetError(CFArrayRef *this, const __CFString *a2)
{
  CFRange v4;

  v4.length = CFArrayGetCount(this[4]);
  v4.location = 0;
  if (!CFArrayContainsValue(this[4], v4, a2))
    CFArrayAppendValue(this[4], a2);
}

void ZinIrPlistCompilationStatus::AppendCompilationStatus(CFMutableArrayRef *this, ZinIrCompilationStatus *a2)
{
  const __CFDictionary *v4;
  const __CFArray *Value;
  const __CFArray *v6;
  CFTypeID v7;
  std::string __p;

  if (*((char *)a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
  else
    __p = *(std::string *)((char *)a2 + 16);
  if (this + 1 == (CFMutableArrayRef *)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)this, (void **)&__p.__r_.__value_.__l.__data_))
  {
    v4 = (const __CFDictionary *)ZinIrCompilationStatus::Status(a2);
    if (!v4)
      CFArrayAppendValue(this[4], CFSTR("CompilationFailure"));
    Value = (const __CFArray *)CFDictionaryGetValue(v4, CFSTR("ErrorList"));
    v6 = Value;
    if (Value)
    {
      v7 = CFGetTypeID(Value);
      if (v7 == CFArrayGetTypeID())
      {
        if (CFArrayGetCount(v6))
          CFArrayAppendValue(this[4], CFSTR("CompilationFailure"));
      }
    }
    CFArrayAppendValue(this[5], v4);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)this, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_206E0A068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrPlistCompilationStatus::Status(ZinIrPlistCompilationStatus *this)
{
  CFDictionaryAddValue(*((CFMutableDictionaryRef *)this + 3), CFSTR("NetworkStatusList"), *((const void **)this + 5));
  CFDictionaryAddValue(*((CFMutableDictionaryRef *)this + 3), CFSTR("ErrorList"), *((const void **)this + 4));
  return *((_QWORD *)this + 3);
}

uint64_t std::map<IOType,__CFArray *>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_hint_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>((uint64_t **)a1, v4, a2, a2);
      a2 += 4;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_206E0A134(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<ZinIrUnitStatus>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<ZinIrUnitStatus>>,0>(uint64_t a1)
{
  std::unique_ptr<ZinIrUnitStatus>::reset[abi:ne180100]((ZinIrUnitStatus **)(a1 + 24), 0);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<ZinIrIOStatus>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<ZinIrIOStatus>>,0>(uint64_t a1)
{
  std::unique_ptr<ZinIrIOStatus>::reset[abi:ne180100]((ZinIrIOStatus **)(a1 + 24), 0);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_QWORD *)v6 + 7) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_206E0A37C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<ZinIrUnitStatus>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<ZinIrUnitStatus>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

ZinIrUnitStatus *std::unique_ptr<ZinIrUnitStatus>::reset[abi:ne180100](ZinIrUnitStatus **a1, ZinIrUnitStatus *a2)
{
  ZinIrUnitStatus *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ZinIrUnitStatus::~ZinIrUnitStatus(result);
    JUMPOUT(0x20BD002F8);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_QWORD *)v6 + 7) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_206E0A534(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<ZinIrIOStatus>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<ZinIrIOStatus>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

ZinIrIOStatus *std::unique_ptr<ZinIrIOStatus>::reset[abi:ne180100](ZinIrIOStatus **a1, ZinIrIOStatus *a2)
{
  ZinIrIOStatus *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ZinIrIOStatus::~ZinIrIOStatus(result);
    JUMPOUT(0x20BD002F8);
  }
  return result;
}

ZinIrNetworkStatus *std::unique_ptr<ZinIrNetworkStatus>::reset[abi:ne180100](ZinIrNetworkStatus **a1, ZinIrNetworkStatus *a2)
{
  ZinIrNetworkStatus *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ZinIrNetworkStatus::~ZinIrNetworkStatus(result);
    JUMPOUT(0x20BD002F8);
  }
  return result;
}

void ZinRegisterPacking::GetOptimalCommands(uint64_t a1@<X0>, int a2@<W1>, char **a3@<X8>)
{
  int8x8_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  int8x8_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int *v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  int *v23;
  int v24;
  int v25;
  int8x8_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;
  char *v42;
  char *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  int v73;
  __int128 __p;
  char *v75;
  __int128 v76;
  void *v77[3];
  void *v78;
  _BYTE *v79;
  uint64_t v80;

  v78 = 0;
  v79 = 0;
  v80 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v78, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  __p = 0x100000000uLL;
  LODWORD(v75) = 0;
  std::vector<ZinRegisterPacking::IntermediatePackingResult>::vector(v77, ((v79 - (_BYTE *)v78) >> 2) + 1, &__p);
  v6 = (unint64_t)(v79 - (_BYTE *)v78) >> 2;
  v7 = (v6 - 1);
  if ((int)v6 - 1 >= 0)
  {
    v8 = -(uint64_t)v7;
    do
    {
      v9 = 0;
      v10 = (int)v6;
      v11 = 20 * (int)v6;
      v12.i32[1] = 1;
      v12.i32[0] = *(_DWORD *)((char *)v77[0] + v11) + 2;
      v13 = *((_DWORD *)v78 + v7);
      v14 = (v79 - (_BYTE *)v78) >> 2;
      if (a2 && v14 > (int)v6)
      {
        v15 = 0;
        v9 = 0;
        v16 = (int *)((char *)v77[0] + v11 + 20);
        v17 = 3;
        v18 = (int)v6;
        v19 = v6;
        do
        {
          v20 = *((_DWORD *)v78 + v18);
          if ((v20 - v13) > 0x10)
            break;
          v15 |= 1 << (v20 + ~(_BYTE)v13);
          v21 = *v16;
          v16 += 5;
          ++v18;
          v22 = (v17 + v21) > v12.i32[0];
          v5.i32[0] = v17 + v21;
          v5 = (int8x8_t)vdup_lane_s32((int32x2_t)vcgt_u32((uint32x2_t)v5, (uint32x2_t)v12), 0);
          v12 = vbsl_s8(v5, v12, (int8x8_t)(v17 + v21));
          if (!v22)
          {
            v9 = v15;
            v19 = v6 + v17 - 2;
          }
          ++v17;
        }
        while (v14 > v18);
      }
      else
      {
        v19 = v6;
      }
      if (v14 > (int)v6)
      {
        v23 = (int *)((char *)v77[0] + v11 + 20);
        v24 = 1;
        do
        {
          if (v8 + v10 > 0x3F || v8 + v10 != *((_DWORD *)v78 + v10) - v13)
            break;
          v25 = *v23;
          v23 += 5;
          ++v10;
          v26.i32[1] = 1;
          v26.i32[0] = v24 + v25 + 2;
          v22 = v26.i32[0] > (unsigned __int32)v12.i32[0];
          v5.i32[0] = v26.i32[0];
          v5 = (int8x8_t)vdup_lane_s32((int32x2_t)vcgt_u32((uint32x2_t)v5, (uint32x2_t)v12), 0);
          v12 = vbsl_s8(v5, v12, v26);
          if (!v22)
          {
            v9 = v24;
            v19 = v6 + v24;
          }
          ++v24;
        }
        while (v14 > v10);
      }
      v27 = (char *)v77[0] + 20 * v7;
      *(int8x8_t *)v27 = v12;
      *((_DWORD *)v27 + 2) = v9;
      *((_DWORD *)v27 + 3) = v13;
      *((_DWORD *)v27 + 4) = v19;
      LODWORD(v6) = v6 - 1;
      ++v8;
      v22 = v7-- <= 0;
    }
    while (!v22);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v76 = *(_OWORD *)v77[0];
  v28 = *((unsigned int *)v77[0] + 4);
  if ((_DWORD)v28)
  {
    v29 = 0;
    v30 = a3 + 2;
    do
    {
      if ((unint64_t)v29 >= *v30)
      {
        v32 = 0xAAAAAAAAAAAAAAABLL * ((v29 - *a3) >> 2);
        v33 = v32 + 1;
        if (v32 + 1 > 0x1555555555555555)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(*v30 - (_QWORD)*a3) >> 2) > v33)
          v33 = 0x5555555555555556 * ((uint64_t)(*v30 - (_QWORD)*a3) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v30 - (_QWORD)*a3) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v34 = 0x1555555555555555;
        else
          v34 = v33;
        if (v34)
          v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Layer>>((uint64_t)(a3 + 2), v34);
        else
          v35 = 0;
        v36 = &v35[12 * v32];
        *(_QWORD *)v36 = *(_QWORD *)((char *)&v76 + 4);
        *((_DWORD *)v36 + 2) = HIDWORD(v76);
        v38 = *a3;
        v37 = a3[1];
        v39 = v36;
        if (v37 != *a3)
        {
          do
          {
            v40 = *(_QWORD *)(v37 - 12);
            v37 -= 12;
            v41 = *((_DWORD *)v37 + 2);
            *(_QWORD *)(v39 - 12) = v40;
            v39 -= 12;
            *((_DWORD *)v39 + 2) = v41;
          }
          while (v37 != v38);
          v37 = *a3;
        }
        v29 = v36 + 12;
        *a3 = v39;
        a3[1] = v36 + 12;
        a3[2] = &v35[12 * v34];
        if (v37)
          operator delete(v37);
      }
      else
      {
        v31 = *(_QWORD *)((char *)&v76 + 4);
        *((_DWORD *)v29 + 2) = HIDWORD(v76);
        *(_QWORD *)v29 = v31;
        v29 += 12;
      }
      a3[1] = v29;
      v42 = (char *)v77[0] + 20 * v28;
      v76 = *(_OWORD *)v42;
      v28 = *((unsigned int *)v42 + 4);
    }
    while ((_DWORD)v28);
    v43 = *a3;
    __p = 0uLL;
    v75 = 0;
    if (v43 != v29)
    {
      v44 = 0;
      do
      {
        if (*(_DWORD *)v43)
        {
          if (*(_DWORD *)v43 != 1 || (v45 = *((_DWORD *)v43 + 2), __CFADD__(v45, *((_DWORD *)v43 + 1))))
          {
            v46 = v44;
          }
          else
          {
            do
            {
              if (v44 >= (unsigned int *)v75)
              {
                v47 = (unsigned int *)__p;
                v48 = (uint64_t)((uint64_t)v44 - __p) >> 2;
                v49 = v48 + 1;
                if ((unint64_t)(v48 + 1) >> 62)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v50 = (uint64_t)&v75[-__p];
                if ((uint64_t)&v75[-__p] >> 1 > v49)
                  v49 = v50 >> 1;
                if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
                  v51 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v51 = v49;
                if (v51)
                {
                  v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v75, v51);
                  v44 = (unsigned int *)*((_QWORD *)&__p + 1);
                  v47 = (unsigned int *)__p;
                }
                else
                {
                  v52 = 0;
                }
                v53 = (unsigned int *)&v52[4 * v48];
                *v53 = v45;
                v46 = v53 + 1;
                while (v44 != v47)
                {
                  v54 = *--v44;
                  *--v53 = v54;
                }
                *(_QWORD *)&__p = v53;
                *((_QWORD *)&__p + 1) = v46;
                v75 = &v52[4 * v51];
                if (v47)
                  operator delete(v47);
              }
              else
              {
                *v44 = v45;
                v46 = v44 + 1;
              }
              *((_QWORD *)&__p + 1) = v46;
              ++v45;
              v44 = v46;
            }
            while (v45 <= *((_DWORD *)v43 + 1) + *((_DWORD *)v43 + 2));
          }
        }
        else
        {
          if (v44 >= (unsigned int *)v75)
          {
            v55 = (unsigned int *)__p;
            v56 = (uint64_t)((uint64_t)v44 - __p) >> 2;
            v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 62)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v58 = (uint64_t)&v75[-__p];
            if ((uint64_t)&v75[-__p] >> 1 > v57)
              v57 = v58 >> 1;
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
              v59 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v59 = v57;
            if (v59)
            {
              v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v75, v59);
              v44 = (unsigned int *)*((_QWORD *)&__p + 1);
              v55 = (unsigned int *)__p;
            }
            else
            {
              v60 = 0;
            }
            v61 = &v60[4 * v56];
            *(_DWORD *)v61 = *((_DWORD *)v43 + 2);
            v46 = (unsigned int *)(v61 + 4);
            while (v44 != v55)
            {
              v62 = *--v44;
              *((_DWORD *)v61 - 1) = v62;
              v61 -= 4;
            }
            *(_QWORD *)&__p = v61;
            *((_QWORD *)&__p + 1) = v46;
            v75 = &v60[4 * v59];
            if (v55)
              operator delete(v55);
          }
          else
          {
            *v44 = *((_DWORD *)v43 + 2);
            v46 = v44 + 1;
          }
          v63 = 0;
          *((_QWORD *)&__p + 1) = v46;
          do
          {
            if (((*((_DWORD *)v43 + 1) >> v63) & 1) != 0)
            {
              ++v63;
              v64 = *((_DWORD *)v43 + 2) + v63;
              if (v46 >= (unsigned int *)v75)
              {
                v66 = (unsigned int *)__p;
                v67 = (uint64_t)((uint64_t)v46 - __p) >> 2;
                v68 = v67 + 1;
                if ((unint64_t)(v67 + 1) >> 62)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v69 = (uint64_t)&v75[-__p];
                if ((uint64_t)&v75[-__p] >> 1 > v68)
                  v68 = v69 >> 1;
                if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
                  v70 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v70 = v68;
                if (v70)
                {
                  v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v75, v70);
                  v46 = (unsigned int *)*((_QWORD *)&__p + 1);
                  v66 = (unsigned int *)__p;
                }
                else
                {
                  v71 = 0;
                }
                v72 = &v71[4 * v67];
                *(_DWORD *)v72 = v64;
                v65 = (unsigned int *)(v72 + 4);
                while (v46 != v66)
                {
                  v73 = *--v46;
                  *((_DWORD *)v72 - 1) = v73;
                  v72 -= 4;
                }
                *(_QWORD *)&__p = v72;
                *((_QWORD *)&__p + 1) = v65;
                v75 = &v71[4 * v70];
                if (v66)
                  operator delete(v66);
              }
              else
              {
                *v46 = v64;
                v65 = v46 + 1;
              }
              *((_QWORD *)&__p + 1) = v65;
              v46 = v65;
            }
            else
            {
              ++v63;
            }
          }
          while (v63 != 16);
        }
        v43 += 12;
        v44 = v46;
      }
      while (v43 != v29);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
    }
  }
  if (v77[0])
  {
    v77[1] = v77[0];
    operator delete(v77[0]);
  }
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
}

void sub_206E0AC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinRegisterPacking::ProcessRegisters(uint64_t a1, std::vector<int>::size_type a2, int a3, unsigned int *a4, int a5, int a6, _QWORD *a7, _QWORD *a8, unsigned __int8 a9, __int32 **a10)
{
  unint64_t v16;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  int v21;
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  char *v28;
  __int32 *v29;
  __int32 *v30;
  __int32 *v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  int *v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  int *v39;
  int v40;
  int v41;
  int v42;
  int *v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unint64_t v51;
  void (**v52)(ZinIrHalH13g *__hidden);
  unsigned int v53;
  __int32 __c[2];
  int *v55;
  std::vector<int> v56;

  v16 = a2;
  memset(&v56, 0, sizeof(v56));
  std::vector<unsigned int>::reserve(&v56, a2);
  if (v16)
  {
    v18 = 0;
    v19 = 0;
    v51 = v16;
    while (1)
    {
      __c[0] = a3 + 4 * v19;
      if (!std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(a8, (unsigned int *)__c))break;
LABEL_57:
      v18 = ++v19;
      if (v19 >= v16)
        goto LABEL_58;
    }
    if (a6 == 1)
    {
      if (std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(a7, (unsigned int *)__c))
      {
        v20 = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(a7, (unsigned int *)__c);
        if (!v20)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v21 = *((_DWORD *)v20 + 5);
      }
      else
      {
        v21 = 0;
      }
      if (*(_DWORD *)(a1 + 4 * v18) == v21)
      {
        v29 = a10[1];
        v30 = wmemchr(*a10, __c[0], v29 - *a10);
        if (v30)
          v31 = v30;
        else
          v31 = v29;
        v16 = v51;
        if (v31 == a10[1])
          goto LABEL_57;
        end = v56.__end_;
        if (v56.__end_ >= v56.__end_cap_.__value_)
        {
          begin = v56.__begin_;
          v32 = v56.__end_ - v56.__begin_;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62)
            goto LABEL_92;
          v34 = (char *)v56.__end_cap_.__value_ - (char *)v56.__begin_;
          if (((char *)v56.__end_cap_.__value_ - (char *)v56.__begin_) >> 1 > v33)
            v33 = v34 >> 1;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
            v27 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v27 = v33;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v56.__end_cap_, v27);
            begin = v56.__begin_;
            end = v56.__end_;
          }
          else
          {
            v28 = 0;
          }
          v39 = (int *)&v28[4 * v32];
          *v39 = v19;
          v35 = v39 + 1;
          while (end != begin)
          {
            v42 = *--end;
            *--v39 = v42;
          }
          goto LABEL_54;
        }
      }
      else
      {
        end = v56.__end_;
        if (v56.__end_ >= v56.__end_cap_.__value_)
        {
          begin = v56.__begin_;
          v36 = v56.__end_ - v56.__begin_;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 62)
LABEL_92:
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v38 = (char *)v56.__end_cap_.__value_ - (char *)v56.__begin_;
          if (((char *)v56.__end_cap_.__value_ - (char *)v56.__begin_) >> 1 > v37)
            v37 = v38 >> 1;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
            v27 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v27 = v37;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v56.__end_cap_, v27);
            begin = v56.__begin_;
            end = v56.__end_;
          }
          else
          {
            v28 = 0;
          }
          v39 = (int *)&v28[4 * v36];
          *v39 = v19;
          v35 = v39 + 1;
          while (end != begin)
          {
            v41 = *--end;
            *--v39 = v41;
          }
          goto LABEL_54;
        }
      }
    }
    else
    {
      end = v56.__end_;
      if (v56.__end_ >= v56.__end_cap_.__value_)
      {
        begin = v56.__begin_;
        v24 = v56.__end_ - v56.__begin_;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v26 = (char *)v56.__end_cap_.__value_ - (char *)v56.__begin_;
        if (((char *)v56.__end_cap_.__value_ - (char *)v56.__begin_) >> 1 > v25)
          v25 = v26 >> 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
          v27 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v56.__end_cap_, v27);
          begin = v56.__begin_;
          end = v56.__end_;
        }
        else
        {
          v28 = 0;
        }
        v39 = (int *)&v28[4 * v24];
        *v39 = v19;
        v35 = v39 + 1;
        while (end != begin)
        {
          v40 = *--end;
          *--v39 = v40;
        }
LABEL_54:
        v56.__begin_ = v39;
        v56.__end_ = v35;
        v56.__end_cap_.__value_ = (int *)&v28[4 * v27];
        if (begin)
          operator delete(begin);
        goto LABEL_56;
      }
    }
    *end = v19;
    v35 = end + 1;
LABEL_56:
    v56.__end_ = v35;
    goto LABEL_57;
  }
LABEL_58:
  ZinRegisterPacking::GetOptimalCommands((uint64_t)&v56, a9 ^ 1, (char **)__c);
  v43 = *(int **)__c;
  v44 = v55;
  if (*(int **)__c == v55)
  {
    v45 = 0;
    if (*(_QWORD *)__c)
    {
LABEL_84:
      v55 = v43;
      operator delete(v43);
    }
  }
  else
  {
    v45 = 0;
    do
    {
      if (*v43)
      {
        if (*v43 == 1)
        {
          if (a9)
          {
            v52 = &off_24BFFE178;
            v53 = 0;
            ZinAneSequentialCommand_v7minus::SetAddress((uint64_t)&v52, a3 + 4 * v43[2]);
            v46 = v43[1];
            if (a5 == 1)
            {
              *a4++ = v53 & 0x3FFFFFF | (v46 << 26);
              if (v43[1] != -1)
              {
                v47 = 0;
                do
                {
                  *a4++ = *(_DWORD *)(a1 + 4 * (v47 + v43[2]));
                  ++v47;
                }
                while (v47 < v43[1] + 1);
              }
            }
          }
          else
          {
            v52 = &off_24C0243D0;
            v53 = 0;
            ZinAneSequentialCommand_v11::SetAddress((uint64_t)&v52, a3 + 4 * v43[2]);
            v46 = v43[1];
            if (a5 == 1)
            {
              *a4++ = v53 & 0xFFE07FFF | ((v43[1] & 0x3F) << 15);
              if (v43[1] != -1)
              {
                v49 = 0;
                do
                {
                  *a4++ = *(_DWORD *)(a1 + 4 * (v49 + v43[2]));
                  ++v49;
                }
                while (v49 < v43[1] + 1);
              }
            }
          }
          v45 += v46 + 2;
        }
      }
      else
      {
        v52 = &off_24C020280;
        v53 = 0x80000000;
        ZinAneMaskCommand_v11::SetAddress((uint64_t)&v52, a3 + 4 * v43[2]);
        if (a5 == 1)
        {
          *a4 = v53 & 0x80007FFF | ((unsigned __int16)v43[1] << 15);
          a4[1] = *(_DWORD *)(a1 + 4 * v43[2]);
          a4 += 2;
        }
        v48 = 0;
        v45 += 2;
        do
        {
          if (((v43[1] >> v48) & 1) != 0)
          {
            if (a5 == 1)
              *a4++ = *(_DWORD *)(a1 + 4 * (v48 + v43[2] + 1));
            ++v45;
          }
          ++v48;
        }
        while (v48 != 16);
      }
      v43 += 3;
    }
    while (v43 != v44);
    v43 = *(int **)__c;
    if (*(_QWORD *)__c)
      goto LABEL_84;
  }
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
  return v45;
}

void sub_206E0B1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<ZinRegisterPacking::IntermediatePackingResult>::vector(_QWORD *a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<ZinIr4CCInfo::ZinIr4CCPlaneInfo>::__vallocate[abi:ne180100](a1, a2);
    v6 = a1[1];
    v7 = v6 + 20 * a2;
    v8 = 20 * a2;
    do
    {
      v9 = *a3;
      *(_DWORD *)(v6 + 16) = *((_DWORD *)a3 + 4);
      *(_OWORD *)v6 = v9;
      v6 += 20;
      v8 -= 20;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_206E0B2A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinParsePEGOCUnit(const __CFDictionary *a1, ZinIrPEGOCUnitInfo *a2, CFArrayRef *a3)
{
  uint64_t v6;
  size_t v7;
  void **v8;
  char *v9;
  void *__p[2];
  char v12;

  v6 = ZinParsePEUnit(a1, a2, a3);
  if (!(_DWORD)v6)
  {
    if (*((char *)a2 + 31) >= 0)
      v7 = *((unsigned __int8 *)a2 + 31);
    else
      v7 = *((_QWORD *)a2 + 2);
    v8 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v7 + 12);
    if (v12 < 0)
      v8 = (void **)__p[0];
    if (v7)
    {
      if (*((char *)a2 + 31) >= 0)
        v9 = (char *)a2 + 8;
      else
        v9 = (char *)*((_QWORD *)a2 + 1);
      memmove(v8, v9, v7);
    }
    strcpy((char *)v8 + v7, ".dynamic_goc");
    v6 = RequiredSubunitParser<ZinIrDynamicGOCUnitInfo>(a1, (const char *)__p, (uint64_t (*)(const void *, void **, CFArrayRef *))ZinParseDynamicGOCUnit, (uint64_t)a2 + 968, a3);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  return v6;
}

void sub_206E0B3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RequiredSubunitParser<ZinIrDynamicGOCUnitInfo>(const __CFDictionary *a1, const char *a2, uint64_t (*a3)(const void *, void **, CFArrayRef *), uint64_t a4, CFArrayRef *a5)
{
  uint64_t v6;
  _BYTE v8[8];
  std::string v9;
  int v10;
  std::string *v11;
  __int128 *v12;
  __int128 v13;
  int v14;
  __int16 v15;
  std::string v16;
  int v17;
  std::string *v18;
  __int128 *v19;
  __int128 v20;
  uint64_t *v21;
  int v22;
  __int16 v23;
  char v24;
  char v25;

  v8[0] = 0;
  v25 = 0;
  if (OptionalSubunitParser<ZinIrDynamicGOCUnitInfo>(a1, a2, a3, (ZinIrDynamicGOCUnitInfo *)v8, a5)
    || !v25)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      RequiredSubunitParser<ZinIrConvUnitInfo>();
    v6 = 3;
  }
  else
  {
    std::string::operator=((std::string *)(a4 + 8), &v9);
    *(_DWORD *)(a4 + 32) = v10;
    if (v8 != (_BYTE *)a4)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a4 + 40), v11, v12, 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v11) >> 3));
    *(_OWORD *)(a4 + 64) = v13;
    *(_DWORD *)(a4 + 80) = v14;
    *(_WORD *)(a4 + 84) = v15;
    std::string::operator=((std::string *)(a4 + 96), &v16);
    *(_DWORD *)(a4 + 120) = v17;
    if (v8 != (_BYTE *)a4)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a4 + 128), v18, v19, 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v18) >> 3));
      *(_OWORD *)(a4 + 152) = v20;
      *(_DWORD *)(a4 + 200) = v22;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(a4 + 168), v21, 0);
    }
    v6 = 0;
    *(_WORD *)(a4 + 208) = v23;
    *(_BYTE *)(a4 + 210) = v24;
  }
  std::__optional_destruct_base<ZinIrDynamicGOCUnitInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v8);
  return v6;
}

void sub_206E0B518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<ZinIrDynamicGOCUnitInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t OptionalSubunitParser<ZinIrDynamicGOCUnitInfo>(const __CFDictionary *a1, const char *a2, uint64_t (*a3)(const void *, void **, CFArrayRef *), ZinIrDynamicGOCUnitInfo *a4, CFArrayRef *a5)
{
  CFStringRef v9;
  const void *Value;
  const void *v11;
  CFTypeID v12;
  uint64_t v13;
  void *v15[4];
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  void *v22[4];
  int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _BYTE v27[32];
  int v28;
  __int16 v29;
  char v30;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v9 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, 0x8000100u);
  Value = CFDictionaryGetValue(a1, v9);
  if (Value && (v11 = Value, v12 = CFGetTypeID(Value), v12 == CFDictionaryGetTypeID()))
  {
    v16 = 0;
    v17 = 0u;
    v18 = 0u;
    v19 = -1;
    v15[0] = &unk_24C0221D8;
    memset(&v15[1], 0, 24);
    v20 = 1065353216;
    v21 = 0;
    v23 = 0;
    v24 = 0u;
    v25 = 0u;
    v26 = -1;
    v22[0] = off_24C021950;
    memset(&v22[1], 0, 24);
    memset(v27, 0, sizeof(v27));
    v28 = 1065353216;
    v29 = 0;
    v30 = 0;
    v13 = ZinParseUnit(a1, v9, (ZinIrUnitInfo *)v15, a5);
    CFRelease(v9);
    if (!(_DWORD)v13)
    {
      v13 = a3(v11, v15, a5);
      if (!(_DWORD)v13)
      {
        std::optional<ZinIrDynamicGOCUnitInfo>::operator=[abi:ne180100]<ZinIrDynamicGOCUnitInfo&,void>(a4, (ZinIrDynamicGOCUnitInfo *)v15);
        v13 = 0;
      }
    }
    v15[0] = &unk_24C0221D8;
    v22[0] = off_24C021950;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v27);
    ZinIrUnitInfo::~ZinIrUnitInfo(v22);
    ZinIrUnitInfo::~ZinIrUnitInfo(v15);
  }
  else
  {
    CFRelease(v9);
    return 0;
  }
  return v13;
}

void sub_206E0B6DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ZinIrDynamicGOCUnitInfo::~ZinIrDynamicGOCUnitInfo((ZinIrDynamicGOCUnitInfo *)va);
  _Unwind_Resume(a1);
}

ZinIrDynamicGOCUnitInfo *std::optional<ZinIrDynamicGOCUnitInfo>::operator=[abi:ne180100]<ZinIrDynamicGOCUnitInfo&,void>(ZinIrDynamicGOCUnitInfo *this, ZinIrDynamicGOCUnitInfo *a2)
{
  int v4;
  __int16 v5;

  if (*((_BYTE *)this + 216))
  {
    std::string::operator=((std::string *)((char *)this + 8), (const std::string *)((char *)a2 + 8));
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    if (this != a2)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 40), *((std::string **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
    *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
    v4 = *((_DWORD *)a2 + 20);
    *((_WORD *)this + 42) = *((_WORD *)a2 + 42);
    *((_DWORD *)this + 20) = v4;
    std::string::operator=((std::string *)this + 4, (const std::string *)a2 + 4);
    *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
    if (this != a2)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 128), *((std::string **)a2 + 16), *((__int128 **)a2 + 17), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 3));
      *(_OWORD *)((char *)this + 152) = *(_OWORD *)((char *)a2 + 152);
      *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)this + 21, *((uint64_t **)a2 + 23), 0);
    }
    v5 = *((_WORD *)a2 + 104);
    *((_BYTE *)this + 210) = *((_BYTE *)a2 + 210);
    *((_WORD *)this + 104) = v5;
  }
  else
  {
    ZinIrDynamicGOCUnitInfo::ZinIrDynamicGOCUnitInfo(this, a2);
    *((_BYTE *)this + 216) = 1;
  }
  return this;
}

uint64_t std::__optional_destruct_base<ZinIrDynamicGOCUnitInfo,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 216))
  {
    *(_QWORD *)a1 = &unk_24C0221D8;
    *(_QWORD *)(a1 + 88) = off_24C021950;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a1 + 168);
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)(a1 + 88));
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)a1);
  }
  return a1;
}

uint64_t ANECGetMPSDialectSupportedVersion(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t result;

  result = 1;
  if (a1 && a2)
  {
    if (a3)
    {
      ZinGetMPSDialectVersion(a1, a2, a3);
      return 0;
    }
  }
  return result;
}

CFMutableDictionaryRef ANECValidateMPSModule(uint64_t *a1, char *a2, CFDictionaryRef theDict)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  const __CFString *v8;
  const __CFString *v9;
  CFTypeID v10;
  char v11;
  const __CFAllocator *v12;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v14;
  _QWORD **v15;
  const void *v16;
  const void *v17;
  __CFDictionary *v18;
  _QWORD *v19;
  std::string *v20;
  CFStringRef v21;
  CFStringRef v22;
  CFTypeID v23;
  CFStringRef v24;
  CFMutableDictionaryRef v25;
  const void *v26;
  const char *v27;
  CFStringRef v28;
  CFStringRef v29;
  CFTypeID v30;
  _QWORD *v31;
  _QWORD *v32;
  BOOL v33;
  const char *v34;
  CFStringRef v35;
  CFStringRef v36;
  CFTypeID v37;
  _QWORD *v38;
  _QWORD **v39;
  _BOOL8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL8 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL8 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __CFDictionary *theDicta;
  void *__p[2];
  char v83;
  std::string v84;
  _QWORD **v85;
  _QWORD *v86[2];
  void *v87[2];
  uint64_t v88;

  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("parameters"));
  if (!Value || (v6 = Value, v7 = CFGetTypeID(Value), v7 != CFDictionaryGetTypeID()))
  {
    v40 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v40)
      ANECValidateMPSModule_cold_1(v40, v41, v42, v43, v44, v45, v46, v47);
    return 0;
  }
  v8 = (const __CFString *)CFDictionaryGetValue(v6, CFSTR("scratchPadPath"));
  if (!v8 || (v9 = v8, v10 = CFGetTypeID(v8), v10 != CFStringGetTypeID()))
  {
    v48 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v48)
      ANECValidateMPSModule_cold_2(v48, v49, v50, v51, v52, v53, v54, v55);
    return 0;
  }
  v87[0] = 0;
  v87[1] = 0;
  v88 = 0;
  if ((ZinGetString(v9, (uint64_t)v87) & 1) == 0)
  {
    v57 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v57)
      ANECValidateMPSModule_cold_6(v57, v58, v59, v60, v61, v62, v63, v64);
    v14 = 0;
    goto LABEL_71;
  }
  v86[0] = 0;
  v86[1] = 0;
  v85 = v86;
  std::string::basic_string[abi:ne180100]<0>(&v84, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "1.0.15");
  v11 = ValidateMLIRProgram(a1, (uint64_t)&v84, (const void **)v87, (uint64_t)&v85, -1, 0, (uint64_t)__p);
  if (v83 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if ((v11 & 1) == 0)
  {
    v65 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v65)
      ANECValidateMPSModule_cold_5(v65, v66, v67, v68, v69, v70, v71, v72);
    goto LABEL_69;
  }
  v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v14 = Mutable;
  if (!Mutable)
  {
    v73 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v73)
    {
LABEL_69:
      v14 = 0;
      goto LABEL_70;
    }
LABEL_68:
    ANECValidateMPSModule_cold_3(v73, v74, v75, v76, v77, v78, v79, v80);
    goto LABEL_69;
  }
  v15 = v85;
  if (v85 != v86)
  {
    v16 = (const void *)*MEMORY[0x24BDBD270];
    v17 = (const void *)*MEMORY[0x24BDBD268];
    theDicta = Mutable;
    while (1)
    {
      v18 = CFDictionaryCreateMutable(v12, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (!v18)
        break;
      v19 = v15[7];
      if (v19 != v15 + 8)
      {
        do
        {
          std::to_string(&v84, v19[4]);
          if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v20 = &v84;
          else
            v20 = (std::string *)v84.__r_.__value_.__r.__words[0];
          v21 = CFStringCreateWithCString(v12, (const char *)v20, 0x8000100u);
          v22 = v21;
          if (v21)
          {
            v23 = CFGetTypeID(v21);
            if (v23 == CFStringGetTypeID())
              v24 = v22;
            else
              v24 = 0;
          }
          else
          {
            v24 = 0;
          }
          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v84.__r_.__value_.__l.__data_);
          v25 = CFDictionaryCreateMutable(v12, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
          CFDictionaryAddValue(v18, v24, v25);
          CFRelease(v24);
          CFRelease(v25);
          if (*((_BYTE *)v19 + 40))
            v26 = v16;
          else
            v26 = v17;
          CFDictionaryAddValue(v25, CFSTR("support"), v26);
          if (*((char *)v19 + 71) >= 0)
            v27 = (const char *)(v19 + 6);
          else
            v27 = (const char *)v19[6];
          v28 = CFStringCreateWithCString(v12, v27, 0x8000100u);
          v29 = v28;
          if (v28)
          {
            v30 = CFGetTypeID(v28);
            if (v30 != CFStringGetTypeID())
              v29 = 0;
          }
          CFDictionaryAddValue(v25, CFSTR("errorMsg"), v29);
          CFRelease(v29);
          v31 = (_QWORD *)v19[1];
          if (v31)
          {
            do
            {
              v32 = v31;
              v31 = (_QWORD *)*v31;
            }
            while (v31);
          }
          else
          {
            do
            {
              v32 = (_QWORD *)v19[2];
              v33 = *v32 == (_QWORD)v19;
              v19 = v32;
            }
            while (!v33);
          }
          v19 = v32;
        }
        while (v32 != v15 + 8);
      }
      if (*((char *)v15 + 55) >= 0)
        v34 = (const char *)(v15 + 4);
      else
        v34 = (const char *)v15[4];
      v35 = CFStringCreateWithCString(v12, v34, 0x8000100u);
      v14 = theDicta;
      v36 = v35;
      if (v35)
      {
        v37 = CFGetTypeID(v35);
        if (v37 != CFStringGetTypeID())
          v36 = 0;
      }
      CFDictionaryAddValue(theDicta, v36, v18);
      CFRelease(v36);
      CFRelease(v18);
      v38 = v15[1];
      if (v38)
      {
        do
        {
          v39 = (_QWORD **)v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD **)v15[2];
          v33 = *v39 == v15;
          v15 = v39;
        }
        while (!v33);
      }
      v15 = v39;
      if (v39 == v86)
        goto LABEL_70;
    }
    v73 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v73)
      goto LABEL_69;
    goto LABEL_68;
  }
LABEL_70:
  std::__tree<std::__value_type<std::string,std::map<unsigned long long,ValidateEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,ValidateEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,ValidateEntry>>>>::destroy((uint64_t)&v85, v86[0]);
LABEL_71:
  if (SHIBYTE(v88) < 0)
    operator delete(v87[0]);
  return v14;
}

void sub_206E0BD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,_QWORD *a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__tree<std::__value_type<std::string,std::map<unsigned long long,ValidateEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,ValidateEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,ValidateEntry>>>>::destroy((uint64_t)&a23, a24);
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::map<unsigned long long,ValidateEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,ValidateEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,ValidateEntry>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<unsigned long long,ValidateEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,ValidateEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,ValidateEntry>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<unsigned long long,ValidateEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,ValidateEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,ValidateEntry>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned long long,ValidateEntry>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned long long,ValidateEntry>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long long,ValidateEntry>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ValidateEntry>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ValidateEntry>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void ANECValidateMPSModule_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing required CFDict key: \"parameters\".\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECValidateMPSModule_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing required CFDict key: \"scratchPadPath\".\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECValidateMPSModule_cold_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Could not create the output dictionary!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECValidateMPSModule_cold_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed to validate MLIR program\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECValidateMPSModule_cold_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid \"scratchPadPath\" CFStringRef from ANEF interface!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinParseConvType(const __CFString *a1, int *a2, CFArrayRef *this)
{
  uint64_t result;
  int v7;
  const __CFString *v8;

  if (!a1)
  {
    v8 = CFSTR("InvalidConvTypeSyntax");
    goto LABEL_5;
  }
  if (!ZinCFStringEquals(a1, CFSTR("Conv")))
  {
    if (ZinCFStringEquals(a1, CFSTR("ChannelWiseConv")))
    {
      result = 0;
      v7 = 2;
      goto LABEL_16;
    }
    if (ZinCFStringEquals(a1, CFSTR("DeConv")))
    {
      result = 0;
      v7 = 3;
      goto LABEL_16;
    }
    if (ZinCFStringEquals(a1, CFSTR("ChannelWiseDeConv")))
    {
      result = 0;
      v7 = 4;
      goto LABEL_16;
    }
    if (ZinCFStringEquals(a1, CFSTR("DilatedConv")))
    {
      result = 0;
      v7 = 5;
      goto LABEL_16;
    }
    if (ZinCFStringEquals(a1, CFSTR("ChannelWiseDilatedConv")))
    {
      result = 0;
      v7 = 6;
      goto LABEL_16;
    }
    *a2 = 0;
    v8 = CFSTR("InvalidUnitConvType");
LABEL_5:
    ZinIrUnitStatus::SetError(this, v8);
    return 3;
  }
  result = 0;
  v7 = 1;
LABEL_16:
  *a2 = v7;
  return result;
}

uint64_t ZinParseConvUnit(const __CFDictionary *a1, ZinIrConvUnitInfo *a2, CFArrayRef *a3)
{
  uint64_t result;
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  CFTypeID v9;
  const __CFString *v10;
  const __CFString *v11;
  CFTypeID v12;
  const __CFBoolean *v13;
  const __CFBoolean *v14;
  CFTypeID v15;

  result = ZinParseUnitNumGroups(a1, (uint64_t *)a2 + 31, a3);
  if (!(_DWORD)result)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Params"));
    if (Value && (v8 = Value, v9 = CFGetTypeID(Value), v9 == CFDictionaryGetTypeID()))
    {
      v10 = (const __CFString *)CFDictionaryGetValue(v8, CFSTR("Type"));
      if (v10)
      {
        v11 = v10;
        v12 = CFGetTypeID(v10);
        if (v12 == CFStringGetTypeID())
          v10 = v11;
        else
          v10 = 0;
      }
      if (ZinParseConvType(v10, (int *)a2 + 60, a3))
        ZinAssertImpl("Failed to parse the conv type");
      if ((*((_DWORD *)a2 + 60) - 5) > 1
        || (result = ZinParseKernelDilationRates(v8, (int *)a2 + 70, a3), !(_DWORD)result))
      {
        *((_BYTE *)a2 + 244) = 0;
        v13 = (const __CFBoolean *)CFDictionaryGetValue(v8, CFSTR("KernelGroupReuse"));
        if (v13)
        {
          v14 = v13;
          v15 = CFGetTypeID(v13);
          if (v15 == CFBooleanGetTypeID())
            *((_BYTE *)a2 + 244) = CFBooleanGetValue(v14) != 0;
        }
        result = ZinParseKernelSize(v8, (_QWORD *)a2 + 32, a3);
        if (!(_DWORD)result)
        {
          result = ZinParseKernelAndFileInfo<ZinIrConvUnitInfo>(v8, (uint64_t)a2, a3);
          if (!(_DWORD)result)
          {
            result = ZinParseSteps(v8, (int *)a2 + 73, a3);
            if (!(_DWORD)result)
            {
              result = ZinParsePadding(v8, (ZinIrConvUnitInfo *)((char *)a2 + 304), a3);
              if (!(_DWORD)result)
                return (uint64_t)ZinParsePaddingMode(v8, (_DWORD *)a2 + 82, a3);
            }
          }
        }
      }
    }
    else
    {
      ZinIrUnitStatus::SetError(a3, CFSTR("InvalidParamSyntax"));
      return 3;
    }
  }
  return result;
}

uint64_t ZinParseKernelAndFileInfo<ZinIrConvUnitInfo>(const __CFDictionary *a1, uint64_t a2, CFArrayRef *a3)
{
  const __CFString *Value;
  const __CFString *v7;
  CFTypeID v8;
  int KernelMode;
  const __CFString *v10;
  const __CFString *v11;
  CFTypeID v12;
  uint64_t v13;
  const __CFString *v14;
  const __CFNumber *v16;
  const __CFNumber *v17;
  CFTypeID v18;
  const __CFString *v19;
  const __CFString *v20;
  CFTypeID v21;
  int KernelFormat;
  const void *v23;
  CFTypeID v24;
  BOOL v25;
  const void *v26;
  CFTypeID v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("KernelMode"));
  v7 = Value;
  if (Value)
  {
    v8 = CFGetTypeID(Value);
    if (v8 != CFStringGetTypeID())
      v7 = 0;
  }
  KernelMode = ZinGetKernelMode(v7);
  *(_DWORD *)(a2 + 80) = KernelMode;
  if (!KernelMode)
  {
    v14 = CFSTR("InvalidKernelMode");
    goto LABEL_16;
  }
  ZinParseBoolean(a1, CFSTR("KernelMutable"), (BOOL *)(a2 + 180));
  v10 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("KernelType"));
  if (!v10 || (v11 = v10, v12 = CFGetTypeID(v10), v12 != CFStringGetTypeID()))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinParseKernelAndFileInfo<ZinIrConvUnitInfo>();
    v14 = CFSTR("InvalidKernelTypeSyntax");
    goto LABEL_16;
  }
  *(_DWORD *)(a2 + 84) = ZinGetKernelFormat(v11, v7);
  if (ZinKernelModeIsPalette(*(_DWORD *)(a2 + 80)))
  {
    v31 = 1;
    v13 = ZinParseCFNumberToken<(CFNumberType)3,int>(a1, CFSTR("KernelPaletteVectorSize"), CFSTR("InvalidKernelPaletteVectorSize"), &v31, a3, 1);
    if ((_DWORD)v13 || v31 <= 0)
    {
      ZinIrUnitStatus::SetError(a3, CFSTR("InvalidKernelPaletteVectorSize"));
      if ((_DWORD)v13)
        return v13;
    }
    else
    {
      *(_DWORD *)(a2 + 176) = v31;
      v13 = ZinParseIndexAndOffsetTokenArray(a1, CFSTR("KernelPaletteLUTIndex"), CFSTR("KernelPaletteLUTOffset"), a2 + 128, a2 + 152, a3);
      if ((_DWORD)v13)
        return v13;
    }
  }
  if (ZinKernelModeIsSparse(*(_DWORD *)(a2 + 80)))
  {
    v13 = ZinParseIndexAndOffsetToken(a1, CFSTR("KernelMaskIndex"), CFSTR("KernelMaskByteOffset"), (int *)(a2 + 104), (uint64_t *)(a2 + 112), a3);
    if ((_DWORD)v13)
      return v13;
    v16 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("KernelCoeffCount"));
    if (v16)
    {
      v17 = v16;
      v18 = CFGetTypeID(v16);
      if (v18 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v17, kCFNumberSInt64Type, (void *)(a2 + 120));
        goto LABEL_24;
      }
    }
    v14 = CFSTR("InvalidKernelCount");
LABEL_16:
    ZinIrUnitStatus::SetError(a3, v14);
    return 3;
  }
LABEL_24:
  if (*(_DWORD *)(a2 + 80) == 15
    || (v13 = ZinParseIndexAndOffsetToken(a1, CFSTR("KernelIndex"), CFSTR("KernelOffset"), (int *)(a2 + 88), (uint64_t *)(a2 + 96), a3), !(_DWORD)v13))
  {
    v19 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("KernelPerCoutScaleFormat"));
    if (v19 && (v20 = v19, v21 = CFGetTypeID(v19), v21 == CFStringGetTypeID()))
      KernelFormat = ZinGetKernelFormat(v20, 0);
    else
      KernelFormat = 6;
    *(_DWORD *)(a2 + 224) = KernelFormat;
    v23 = CFDictionaryGetValue(a1, CFSTR("KernelScaleByteOffset"));
    if (v23)
    {
      v24 = CFGetTypeID(v23);
      v25 = v24 == CFNumberGetTypeID();
    }
    else
    {
      v25 = 0;
    }
    *(_BYTE *)(a2 + 184) = v25;
    v26 = CFDictionaryGetValue(a1, CFSTR("KernelZeroPointByteOffset"));
    if (v26)
    {
      v27 = CFGetTypeID(v26);
      v28 = v27 == CFNumberGetTypeID();
    }
    else
    {
      v28 = 0;
    }
    *(_BYTE *)(a2 + 185) = v28;
    if (*(_BYTE *)(a2 + 184))
      v29 = ZinParseIndexAndOffsetToken(a1, CFSTR("KernelScaleIndex"), CFSTR("KernelScaleByteOffset"), (int *)(a2 + 192), (uint64_t *)(a2 + 200), a3);
    else
      v29 = ZinParseCFNumberToken<(CFNumberType)5,float>(a1, CFSTR("KernelScaleScalar"), CFSTR("InvalidKernelQuantizationParams"), (void *)(a2 + 228), a3, 1);
    v13 = v29;
    if (!(_DWORD)v29)
    {
      if (*(_BYTE *)(a2 + 185))
        v30 = ZinParseIndexAndOffsetToken(a1, CFSTR("KernelZeroPointIndex"), CFSTR("KernelZeroPointByteOffset"), (int *)(a2 + 208), (uint64_t *)(a2 + 216), a3);
      else
        v30 = ZinParseCFNumberToken<(CFNumberType)3,int>(a1, CFSTR("KernelZeroPointScalar"), CFSTR("InvalidKernelQuantizationParams"), (void *)(a2 + 232), a3, 1);
      v13 = v30;
      if (!(_DWORD)v30)
        return 0;
    }
  }
  return v13;
}

void ZinParseKernelAndFileInfo<ZinIrConvUnitInfo>()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Fail to get kernel format!\n", v0, 2u);
}

__CFDictionary *ZinCreateChannelToSpaceUnit(const ZinIrChannelToSpaceUnitInfo *a1)
{
  __CFDictionary *Unit;
  __CFDictionary *Mutable;
  int v5;

  Unit = ZinCreateUnit(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v5 = 37;
  ZinAddSpaceTransformFactorToParamsDict(Mutable, &v5, (uint64_t)a1 + 80);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

uint64_t ZinMirElementWise::Transform(ZinMirElementWise *this, ZinIrOpLayerGraph *a2, ZinNEElementWiseLayer *a3)
{
  _QWORD *v3;
  uint64_t v4;
  char *v7;
  ZinIrOpLayer *v8;
  double v9;
  unsigned int v10;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t **v35;
  char *v36;
  uint64_t **v37;
  uint64_t **v38;
  uint64_t *v39;
  ZinIrTensor *v40;
  const ZinIrOpLayer *v41;
  ZinIrCopyInfo *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  ZinIrOpLayer *v46;
  _QWORD *v47;
  std::string::size_type size;
  std::string::size_type v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  ZinIrOpLayer **v54;
  char *v55;
  std::string::size_type v56;
  ZinIrOpLayer *v57;
  std::string::size_type v58;
  std::string::size_type v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t *v64;
  char *v65;
  std::string::size_type v66;
  uint64_t v67;
  uint64_t **v68;
  char *v69;
  ZinIrOpLayer ***v70;
  int v71;
  size_t v72;
  std::string *v73;
  const void *v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  std::string::size_type v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  std::string::size_type v84;
  std::string *v85;
  uint64_t v86;
  int v87;
  uint64_t GOC;
  ZinIrOpLayer *v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  size_t v94;
  std::string *v95;
  __int128 *v96;
  std::string *v97;
  std::string *v98;
  __int128 v99;
  std::string *v100;
  std::string::size_type v101;
  std::string *v102;
  __int128 v103;
  std::__shared_weak_count *v104;
  unint64_t *p_shared_owners;
  unint64_t v106;
  ZinIrOpLayer *v107;
  uint64_t v108;
  uint64_t v109;
  size_t v110;
  __int128 *v111;
  const void *v112;
  uint64_t v113;
  uint64_t *v114;
  ZinIrTensor::MirInfo *v115;
  size_t v116;
  std::string *v117;
  const void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  size_t v122;
  std::string *v123;
  const void *v124;
  std::string *v125;
  __int128 v126;
  const std::string::value_type *v127;
  std::string::size_type v128;
  std::string *v129;
  __int128 v130;
  std::string *v131;
  __int128 v132;
  __int128 *v133;
  __int128 v134;
  std::string::size_type v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  std::string::size_type v146;
  std::string::size_type v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t ElementWiseLayer;
  uint64_t *v158;
  _QWORD *v159;
  ZinIrOpLayer *v160;
  std::string::size_type *v161;
  std::string::size_type v162;
  unint64_t *v163;
  unint64_t v164;
  size_t v165;
  __int128 *v166;
  __int128 *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  char v176;
  void *v177;
  _BOOL8 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  std::string *v186;
  std::string::size_type v187;
  std::string *v188;
  __int128 v189;
  ZinIrKernel *v190;
  ZinIrKernel *v191;
  ZinIrOpLayer *v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  size_t v199;
  __int128 *v200;
  const void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  ZinIrOpLayer ***v213;
  int64x2_t v214;
  ZinIrOpLayerGraph *v215;
  _QWORD v216[3];
  char v217;
  std::string v218;
  std::string v219;
  ZinIrKernel *v220;
  ZinIrTensor::MirInfo *v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  std::string v224;
  std::string v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  int v231;
  char v232;
  std::string v233;
  __int128 v234;
  int64_t v235;
  std::string v236;
  std::string v237;
  std::string v238;
  uint64_t v239;

  v239 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)((char *)a2 + 88);
  if (*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11) == 8)
    return 0;
  v7 = (char *)a2 + 24;
  *(_QWORD *)&v9 = ZinObjectNameFactory::ZinObjectNameFactory(v216, (char *)a2 + 24).n128_u64[0];
  v4 = 0;
  v10 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 57) + 64) + 12);
  if (v10 <= 0x15)
  {
    if (((1 << v10) & 0x3FFC01) != 0)
    {
LABEL_5:
      v4 = 3;
      goto LABEL_6;
    }
    v215 = this;
    if (((1 << v10) & 0xF6) != 0)
    {
      if (ZinMirUtils::ZinMirHandleConstTensorBatching(this, a2, v8))
      {
        v12 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v12)
          ZinMirElementWise::Transform(v12, v13, v14, v15, v16, v17, v18, v19);
        goto LABEL_5;
      }
      v20 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)*v3 + 32))(*(_QWORD *)*v3, 0, 0)+ 88);
      if (v20 != *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*v3 + 8) + 32))(*(_QWORD *)(*v3 + 8), 0, 0)+ 88)&& ZinMirTensorTransform::ReconcileInputTensorFormat((uint64_t **)this, a2, (uint64_t)v216, 3))
      {
        v21 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v21)
          ZinMirElementWise::Transform(v21, v22, v23, v24, v25, v26, v27, v28);
        goto LABEL_5;
      }
      v29 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)*v3 + 32))(*(_QWORD *)*v3, 0, 0);
      v30 = (_QWORD *)*((_QWORD *)a2 + 11);
      v31 = (_QWORD *)*((_QWORD *)a2 + 12);
      if (v30 != v31)
      {
        v32 = *(_DWORD *)(v29 + 88);
        while (v32 == *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v30 + 32))(*v30, 0, 0)+ 88))
        {
          if (++v30 == v31)
          {
            v30 = (_QWORD *)*v3;
            goto LABEL_22;
          }
        }
        v178 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v178)
          ZinMirElementWise::Transform(v178, v179, v180, v181, v182, v183, v184, v185);
        goto LABEL_5;
      }
LABEL_22:
      v211 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v30 + 32))(*v30, 0, 0);
      v34 = *((_QWORD *)a2 + 11);
      v33 = *((_QWORD *)a2 + 12);
      memset(&v233, 0, sizeof(v233));
      v238.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      *(_QWORD *)&v226 = &v238;
      v35 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)this + 8, (unint64_t **)&v226);
      v209 = v34;
      v210 = v33;
      v36 = (char *)this + 104;
      if (v35)
        v36 = (char *)(v35 + 3);
      v37 = *(uint64_t ***)v36;
      v38 = (uint64_t **)*((_QWORD *)v36 + 1);
      if (*(uint64_t ***)v36 != v38)
      {
        do
        {
          v39 = *v37;
          v40 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)**v37 + 32))(**v37, 0, 0);
          if (*(_QWORD *)(*v39 + 120) - *(_QWORD *)(*v39 + 112) != 8
            || ZinIrTensor::IsLiveInLiveStateOrConstTensor(v40)
            || ZinOpLayerUtils::IsConnectedToLiveOut((ZinOpLayerUtils *)*v39, v41))
          {
            v42 = (ZinIrCopyInfo *)operator new();
            ZinIrCopyInfo::ZinIrCopyInfo(v42);
            v43 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)*v3 + 32))(*(_QWORD *)*v3, 0, 0)+ 88);
            v44 = *v39;
            v45 = *(_QWORD *)(*v39 + 16);
            v236.__r_.__value_.__r.__words[0] = 0;
            LOBYTE(v229) = 0;
            v232 = 0;
            v46 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v45, (uint64_t)v216, v44, v43, &v236, 0, (uint64_t)&v229, 1.0);
            v47 = (_QWORD *)v236.__r_.__value_.__r.__words[0];
            v236.__r_.__value_.__r.__words[0] = 0;
            if (v47)
              std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v236, v47);
            v237.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
            v238.__r_.__value_.__r.__words[0] = (std::string::size_type)&v237;
            v238.__r_.__value_.__l.__size_ = 1;
            Layer2TDMapper::SourceLayer::SourceLayer(&v226, &v238);
            ZinIrOpLayerGraph::AddNode((uint64_t **)v215, v46, (ZinIrOpLayer ***)&v226);
            *(_QWORD *)&v226 = &unk_24C02BB18;
            if (*((_QWORD *)&v226 + 1))
            {
              *(_QWORD *)&v227 = *((_QWORD *)&v226 + 1);
              operator delete(*((void **)&v226 + 1));
            }
            ZinIrOpLayerGraph::AddEdge((uint64_t)v215, *v39, (uint64_t)v46, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
            size = v233.__r_.__value_.__l.__size_;
            if (v233.__r_.__value_.__l.__size_ >= v233.__r_.__value_.__r.__words[2])
            {
              v50 = (uint64_t)(v233.__r_.__value_.__l.__size_ - v233.__r_.__value_.__r.__words[0]) >> 3;
              if ((unint64_t)(v50 + 1) >> 61)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v51 = (uint64_t)(v233.__r_.__value_.__r.__words[2] - v233.__r_.__value_.__r.__words[0]) >> 2;
              if (v51 <= v50 + 1)
                v51 = v50 + 1;
              if (v233.__r_.__value_.__r.__words[2] - v233.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
                v52 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v52 = v51;
              if (v52)
                v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v233.__r_.__value_.__r.__words[2], v52);
              else
                v53 = 0;
              v54 = (ZinIrOpLayer **)&v53[8 * v50];
              *v54 = v46;
              v49 = (std::string::size_type)(v54 + 1);
              v55 = (char *)v233.__r_.__value_.__l.__size_;
              v56 = v233.__r_.__value_.__r.__words[0];
              if (v233.__r_.__value_.__l.__size_ != v233.__r_.__value_.__r.__words[0])
              {
                do
                {
                  v57 = (ZinIrOpLayer *)*((_QWORD *)v55 - 1);
                  v55 -= 8;
                  *--v54 = v57;
                }
                while (v55 != (char *)v56);
                v55 = (char *)v233.__r_.__value_.__r.__words[0];
              }
              v233.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
              v233.__r_.__value_.__l.__size_ = v49;
              v233.__r_.__value_.__r.__words[2] = (std::string::size_type)&v53[8 * v52];
              if (v55)
                operator delete(v55);
            }
            else
            {
              *(_QWORD *)v233.__r_.__value_.__l.__size_ = v46;
              v49 = size + 8;
            }
            v233.__r_.__value_.__l.__size_ = v49;
            (*(void (**)(ZinIrCopyInfo *))(*(_QWORD *)v42 + 8))(v42);
          }
          else
          {
            v58 = v233.__r_.__value_.__l.__size_;
            if (v233.__r_.__value_.__l.__size_ >= v233.__r_.__value_.__r.__words[2])
            {
              v60 = (uint64_t)(v233.__r_.__value_.__l.__size_ - v233.__r_.__value_.__r.__words[0]) >> 3;
              if ((unint64_t)(v60 + 1) >> 61)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v61 = (uint64_t)(v233.__r_.__value_.__r.__words[2] - v233.__r_.__value_.__r.__words[0]) >> 2;
              if (v61 <= v60 + 1)
                v61 = v60 + 1;
              if (v233.__r_.__value_.__r.__words[2] - v233.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
                v62 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v62 = v61;
              if (v62)
                v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v233.__r_.__value_.__r.__words[2], v62);
              else
                v63 = 0;
              v64 = (uint64_t *)&v63[8 * v60];
              *v64 = *v39;
              v59 = (std::string::size_type)(v64 + 1);
              v65 = (char *)v233.__r_.__value_.__l.__size_;
              v66 = v233.__r_.__value_.__r.__words[0];
              if (v233.__r_.__value_.__l.__size_ != v233.__r_.__value_.__r.__words[0])
              {
                do
                {
                  v67 = *((_QWORD *)v65 - 1);
                  v65 -= 8;
                  *--v64 = v67;
                }
                while (v65 != (char *)v66);
                v65 = (char *)v233.__r_.__value_.__r.__words[0];
              }
              v233.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
              v233.__r_.__value_.__l.__size_ = v59;
              v233.__r_.__value_.__r.__words[2] = (std::string::size_type)&v63[8 * v62];
              if (v65)
                operator delete(v65);
            }
            else
            {
              *(_QWORD *)v233.__r_.__value_.__l.__size_ = *v39;
              v59 = v58 + 8;
            }
            v233.__r_.__value_.__l.__size_ = v59;
          }
          ++v37;
        }
        while (v37 != v38);
      }
      memset(&v238, 0, sizeof(v238));
      if ((uint64_t)(v233.__r_.__value_.__l.__size_ - v233.__r_.__value_.__r.__words[0]) >= 1)
      {
        v135 = 0;
        v136 = 0;
        v137 = (uint64_t)(v233.__r_.__value_.__l.__size_ - v233.__r_.__value_.__r.__words[0]) >> 3;
        if (v137 <= 1)
          v138 = 1;
        else
          v138 = (uint64_t)(v233.__r_.__value_.__l.__size_ - v233.__r_.__value_.__r.__words[0]) >> 3;
        v214 = vdupq_n_s64(1uLL);
        do
        {
          v226 = 0uLL;
          *(_QWORD *)&v227 = 0;
          if (v135 >= v238.__r_.__value_.__r.__words[2])
          {
            v140 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v135 - v238.__r_.__value_.__r.__words[0]) >> 4);
            v141 = v140 + 1;
            if (v140 + 1 > 0x333333333333333)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            if (0x999999999999999ALL
               * ((uint64_t)(v238.__r_.__value_.__r.__words[2] - v238.__r_.__value_.__r.__words[0]) >> 4) > v141)
              v141 = 0x999999999999999ALL
                   * ((uint64_t)(v238.__r_.__value_.__r.__words[2] - v238.__r_.__value_.__r.__words[0]) >> 4);
            if (0xCCCCCCCCCCCCCCCDLL
               * ((uint64_t)(v238.__r_.__value_.__r.__words[2] - v238.__r_.__value_.__r.__words[0]) >> 4) >= 0x199999999999999)
              v142 = 0x333333333333333;
            else
              v142 = v141;
            if (v142)
              v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v238.__r_.__value_.__r.__words[2], v142);
            else
              v143 = 0;
            v144 = &v143[80 * v140];
            *(_QWORD *)v144 = 0;
            *((_QWORD *)v144 + 1) = v136;
            *((_QWORD *)v144 + 2) = 0;
            *((_QWORD *)v144 + 3) = 0;
            *((_QWORD *)v144 + 4) = 0;
            *((_QWORD *)v144 + 5) = 1;
            *((_QWORD *)v144 + 6) = v137;
            *(int64x2_t *)(v144 + 56) = vdupq_n_s64(1uLL);
            *((_QWORD *)v144 + 9) = 1;
            v145 = (char *)v238.__r_.__value_.__l.__size_;
            v146 = v238.__r_.__value_.__r.__words[0];
            v147 = (std::string::size_type)v144;
            if (v238.__r_.__value_.__l.__size_ != v238.__r_.__value_.__r.__words[0])
            {
              do
              {
                *(_OWORD *)(v147 - 80) = *((_OWORD *)v145 - 5);
                v148 = *((_OWORD *)v145 - 4);
                v149 = *((_OWORD *)v145 - 3);
                v150 = *((_OWORD *)v145 - 1);
                *(_OWORD *)(v147 - 32) = *((_OWORD *)v145 - 2);
                *(_OWORD *)(v147 - 16) = v150;
                *(_OWORD *)(v147 - 64) = v148;
                *(_OWORD *)(v147 - 48) = v149;
                v147 -= 80;
                v145 -= 80;
              }
              while (v145 != (char *)v146);
              v145 = (char *)v146;
            }
            v135 = (std::string::size_type)(v144 + 80);
            v238.__r_.__value_.__r.__words[0] = v147;
            v238.__r_.__value_.__l.__size_ = (std::string::size_type)(v144 + 80);
            v238.__r_.__value_.__r.__words[2] = (std::string::size_type)&v143[80 * v142];
            if (v145)
              operator delete(v145);
          }
          else
          {
            *(_QWORD *)v135 = 0;
            *(_QWORD *)(v135 + 8) = v136;
            v139 = v227;
            *(_OWORD *)(v135 + 16) = v226;
            *(_QWORD *)(v135 + 32) = v139;
            *(_QWORD *)(v135 + 40) = 1;
            *(_QWORD *)(v135 + 48) = v137;
            *(int64x2_t *)(v135 + 56) = v214;
            *(_QWORD *)(v135 + 72) = 1;
            v135 += 80;
          }
          v238.__r_.__value_.__l.__size_ = v135;
          ++v136;
        }
        while (v136 != v138);
      }
      v151 = *((_QWORD *)a2 + 2);
      v152 = *(_QWORD *)(v211 + 56);
      *(_QWORD *)&v226 = *(_QWORD *)(v211 + 48);
      *((_QWORD *)&v226 + 1) = v152 * ((v210 - v209) >> 3);
      v227 = *(_OWORD *)(v211 + 64);
      v228 = *(_QWORD *)(v211 + 80);
      v224.__r_.__value_.__r.__words[0] = 0;
      ZinBuilder::CreateConcat(v151, (uint64_t)v216, &v226, &v233, (uint64_t)&v238, 1, 0, &v224, (void **)&v237.__r_.__value_.__l.__data_, 0);
      v153 = (_QWORD *)v224.__r_.__value_.__r.__words[0];
      v224.__r_.__value_.__r.__words[0] = 0;
      if (v153)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v224, v153);
      *(_QWORD *)&v234 = a2;
      v225.__r_.__value_.__r.__words[0] = (std::string::size_type)&v234;
      v225.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v226, &v225);
      ZinBuilder::AddConcatToGraph((uint64_t **)v215, (uint64_t *)&v233, &v237, (ZinIrOpLayer ***)&v226);
      *(_QWORD *)&v226 = &unk_24C02BB18;
      if (*((_QWORD *)&v226 + 1))
      {
        *(_QWORD *)&v227 = *((_QWORD *)&v226 + 1);
        operator delete(*((void **)&v226 + 1));
      }
      v154 = *(_QWORD *)(v237.__r_.__value_.__l.__size_ - 8);
      if (v237.__r_.__value_.__r.__words[0])
      {
        v237.__r_.__value_.__l.__size_ = v237.__r_.__value_.__r.__words[0];
        operator delete(v237.__r_.__value_.__l.__data_);
      }
      if (v238.__r_.__value_.__r.__words[0])
      {
        v238.__r_.__value_.__l.__size_ = v238.__r_.__value_.__r.__words[0];
        operator delete(v238.__r_.__value_.__l.__data_);
      }
      if (v233.__r_.__value_.__r.__words[0])
      {
        v233.__r_.__value_.__l.__size_ = v233.__r_.__value_.__r.__words[0];
        operator delete(v233.__r_.__value_.__l.__data_);
      }
      v155 = *(_QWORD *)(*((_QWORD *)a2 + 57) + 64);
      (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(v216[0] + 16))(&v226, v216, 1);
      ZinOpLayerUtils::GetTensorInfoFromLayers(v3, (uint64_t)&v233);
      v156 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)a2 + 57) + 32))(*((_QWORD *)a2 + 57), 0, 0);
      ElementWiseLayer = ZinBuilder::CreateElementWiseLayer(*((_QWORD *)a2 + 2), (uint64_t)v216, *(_DWORD *)(v155 + 12), (uint64_t)&v233, (__int128 *)(v156 + 48), *(_DWORD *)(v156 + 88));
      v158 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)ElementWiseLayer + 32))(ElementWiseLayer, 0, 0);
      ZinIrTensor::CopyTensorMirInfo((ZinIrTensor *)v156, (ZinIrTensor::MirInfo **)&v225);
      ZinIrTensor::SetTensorMirInfo(v158, &v225);
      v159 = (_QWORD *)v225.__r_.__value_.__r.__words[0];
      v225.__r_.__value_.__r.__words[0] = 0;
      if (v159)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v225, v159);
      v160 = (ZinIrOpLayer *)operator new();
      v161 = (std::string::size_type *)(*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)a2 + 40))(a2, 0, 0);
      v162 = v161[1];
      v238.__r_.__value_.__r.__words[0] = *v161;
      v238.__r_.__value_.__l.__size_ = v162;
      if (v162)
      {
        v163 = (unint64_t *)(v162 + 8);
        do
          v164 = __ldxr(v163);
        while (__stxr(v164 + 1, v163));
      }
      if ((SBYTE7(v227) & 0x80u) == 0)
        v165 = BYTE7(v227);
      else
        v165 = *((_QWORD *)&v226 + 1);
      v166 = &v229;
      std::string::basic_string[abi:ne180100]((uint64_t)&v229, v165 + 5);
      if (SBYTE7(v230) < 0)
        v166 = (__int128 *)v229;
      if (v165)
      {
        if ((SBYTE7(v227) & 0x80u) == 0)
          v167 = &v226;
        else
          v167 = (__int128 *)v226;
        memmove(v166, v167, v165);
      }
      strcpy((char *)v166 + v165, "_neew");
      v168 = *((_QWORD *)a2 + 47);
      v169 = (*(uint64_t (**)(ZinIrOpLayerGraph *))(*(_QWORD *)a2 + 576))(a2);
      v170 = *((_QWORD *)a2 + 48);
      v171 = *((_QWORD *)a2 + 49);
      v172 = (*(uint64_t (**)(ZinIrOpLayerGraph *))(*(_QWORD *)a2 + 416))(a2);
      ZinNEElementWiseLayer::ZinNEElementWiseLayer(v160, (uint64_t *)&v238, &v229, v168, (uint64_t)a2 + 432, ElementWiseLayer, v169, v170, v171, v172, *((_QWORD *)a2 + 51));
      if (SBYTE7(v230) < 0)
        operator delete((void *)v229);
      v173 = (std::__shared_weak_count *)v238.__r_.__value_.__l.__size_;
      if (v238.__r_.__value_.__l.__size_)
      {
        v174 = (unint64_t *)(v238.__r_.__value_.__l.__size_ + 8);
        do
          v175 = __ldaxr(v174);
        while (__stlxr(v175 - 1, v174));
        if (!v175)
        {
          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
          std::__shared_weak_count::__release_weak(v173);
        }
      }
      ZinANELayer::CopyDMALayers(v160, a2);
      v236.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      v237.__r_.__value_.__r.__words[0] = (std::string::size_type)&v236;
      v237.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v229, &v237);
      ZinIrOpLayerGraph::AddNode((uint64_t **)v215, v160, (ZinIrOpLayer ***)&v229);
      *(_QWORD *)&v229 = &unk_24C02BB18;
      if (*((_QWORD *)&v229 + 1))
      {
        *(_QWORD *)&v230 = *((_QWORD *)&v229 + 1);
        operator delete(*((void **)&v229 + 1));
      }
      ZinIrOpLayerGraph::AddEdge((uint64_t)v215, v154, (uint64_t)v160, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v229 = 0u;
      v230 = 0u;
      v231 = 1065353216;
      v176 = ZinIrOpLayerGraph::MoveOutgoingEdges(v215, (uint64_t **)a2, v160, &v229);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v229);
      if ((v176 & 1) == 0)
        ZinAssertImpl("Failed in moving outgoing edges.");
      ZinIrOpLayerGraph::RemoveNode(v215, a2, 0);
      if (v233.__r_.__value_.__r.__words[0])
      {
        v233.__r_.__value_.__l.__size_ = v233.__r_.__value_.__r.__words[0];
        operator delete(v233.__r_.__value_.__l.__data_);
      }
      if ((SBYTE7(v227) & 0x80000000) == 0)
        goto LABEL_317;
      v177 = (void *)v226;
    }
    else
    {
      if (v10 != 8)
        goto LABEL_6;
      v212 = v7;
      if (*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11) != 16)
        ZinAssertImpl("There must be 2 incoming layers.", v9);
      *(_QWORD *)&v226 = a2;
      *(_QWORD *)&v229 = &v226;
      v68 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)this + 8, (unint64_t **)&v229);
      v69 = (char *)this + 104;
      if (v68)
        v69 = (char *)(v68 + 3);
      v70 = *(ZinIrOpLayer ****)v69;
      v213 = (ZinIrOpLayer ***)*((_QWORD *)v69 + 1);
      if (*(ZinIrOpLayer ****)v69 != v213)
      {
        v71 = 0;
        do
        {
          if (*((char *)a2 + 47) >= 0)
            v72 = *((unsigned __int8 *)a2 + 47);
          else
            v72 = *((_QWORD *)a2 + 4);
          std::string::basic_string[abi:ne180100]((uint64_t)&v238, v72 + 1);
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v73 = &v238;
          else
            v73 = (std::string *)v238.__r_.__value_.__r.__words[0];
          if (v72)
          {
            if (*((char *)a2 + 47) >= 0)
              v74 = v7;
            else
              v74 = (const void *)*((_QWORD *)a2 + 3);
            memmove(v73, v74, v72);
          }
          *(_WORD *)((char *)&v73->__r_.__value_.__l.__data_ + v72) = 95;
          std::string::basic_string[abi:ne180100]<0>(&v225, "ew2min");
          v75 = std::string::append(&v225, "_xfm", 4uLL);
          v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
          v237.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v76;
          v75->__r_.__value_.__l.__size_ = 0;
          v75->__r_.__value_.__r.__words[2] = 0;
          v75->__r_.__value_.__r.__words[0] = 0;
          if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v77 = &v237;
          else
            v77 = (std::string *)v237.__r_.__value_.__r.__words[0];
          if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v78 = HIBYTE(v237.__r_.__value_.__r.__words[2]);
          else
            v78 = v237.__r_.__value_.__l.__size_;
          v79 = std::string::append(&v238, (const std::string::value_type *)v77, v78);
          v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
          v233.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v80;
          v79->__r_.__value_.__l.__size_ = 0;
          v79->__r_.__value_.__r.__words[2] = 0;
          v79->__r_.__value_.__r.__words[0] = 0;
          v81 = std::string::append(&v233, "_", 1uLL);
          v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
          *(_QWORD *)&v230 = *((_QWORD *)&v81->__r_.__value_.__l + 2);
          v229 = v82;
          v81->__r_.__value_.__l.__size_ = 0;
          v81->__r_.__value_.__r.__words[2] = 0;
          v81->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v236, v71);
          if ((v236.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v83 = &v236;
          else
            v83 = (std::string *)v236.__r_.__value_.__r.__words[0];
          if ((v236.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v84 = HIBYTE(v236.__r_.__value_.__r.__words[2]);
          else
            v84 = v236.__r_.__value_.__l.__size_;
          v85 = std::string::append((std::string *)&v229, (const std::string::value_type *)v83, v84);
          v226 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
          *(_QWORD *)&v227 = *((_QWORD *)&v85->__r_.__value_.__l + 2);
          v85->__r_.__value_.__l.__size_ = 0;
          v85->__r_.__value_.__r.__words[2] = 0;
          v85->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v236.__r_.__value_.__l.__data_);
          if (SBYTE7(v230) < 0)
            operator delete((void *)v229);
          if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v233.__r_.__value_.__l.__data_);
          if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v237.__r_.__value_.__l.__data_);
          if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v225.__r_.__value_.__l.__data_);
          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v238.__r_.__value_.__l.__data_);
          v86 = (uint64_t)**v70;
          v87 = SBYTE7(v227);
          if (SBYTE7(v227) < 0)
          {
            std::string::__init_copy_ctor_external(&v224, (const std::string::value_type *)v226, *((std::string::size_type *)&v226 + 1));
          }
          else
          {
            *(_OWORD *)&v224.__r_.__value_.__l.__data_ = v226;
            v224.__r_.__value_.__r.__words[2] = v227;
          }
          GOC = ZinMirElementWise::CreateGOC(v86, (uint64_t)&v224);
          if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v224.__r_.__value_.__l.__data_);
          v89 = (ZinIrOpLayer *)operator new();
          v90 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)GOC + 40))(GOC, 0, 0);
          v91 = v90[1];
          v222 = *v90;
          v223 = (std::__shared_weak_count *)v91;
          if (v91)
          {
            v92 = (unint64_t *)(v91 + 8);
            do
              v93 = __ldxr(v92);
            while (__stxr(v93 + 1, v92));
          }
          if (v87 >= 0)
            v94 = v87;
          else
            v94 = *((_QWORD *)&v226 + 1);
          std::string::basic_string[abi:ne180100]((uint64_t)&v233, v94 + 1);
          if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v95 = &v233;
          else
            v95 = (std::string *)v233.__r_.__value_.__r.__words[0];
          if (v94)
          {
            if (v87 >= 0)
              v96 = &v226;
            else
              v96 = (__int128 *)v226;
            memmove(v95, v96, v94);
          }
          *(_WORD *)((char *)&v95->__r_.__value_.__l.__data_ + v94) = 95;
          v97 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v237, "bypass_ewmM");
          v98 = std::string::append(v97, "_xfm", 4uLL);
          v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
          v238.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v99;
          v98->__r_.__value_.__l.__size_ = 0;
          v98->__r_.__value_.__r.__words[2] = 0;
          v98->__r_.__value_.__r.__words[0] = 0;
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v100 = &v238;
          else
            v100 = (std::string *)v238.__r_.__value_.__r.__words[0];
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v101 = HIBYTE(v238.__r_.__value_.__r.__words[2]);
          else
            v101 = v238.__r_.__value_.__l.__size_;
          v102 = std::string::append(&v233, (const std::string::value_type *)v100, v101);
          v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
          *(_QWORD *)&v230 = *((_QWORD *)&v102->__r_.__value_.__l + 2);
          v229 = v103;
          v102->__r_.__value_.__l.__size_ = 0;
          v102->__r_.__value_.__r.__words[2] = 0;
          v102->__r_.__value_.__r.__words[0] = 0;
          ZinNEBypassLayer::ZinNEBypassLayer((uint64_t)v89, &v222, &v229, 0, 0, 0, GOC, 0, 0, 0);
          if (SBYTE7(v230) < 0)
            operator delete((void *)v229);
          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v238.__r_.__value_.__l.__data_);
          if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v237.__r_.__value_.__l.__data_);
          if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v233.__r_.__value_.__l.__data_);
          v104 = v223;
          if (v223)
          {
            p_shared_owners = (unint64_t *)&v223->__shared_owners_;
            do
              v106 = __ldaxr(p_shared_owners);
            while (__stlxr(v106 - 1, p_shared_owners));
            if (!v106)
            {
              ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
              std::__shared_weak_count::__release_weak(v104);
            }
          }
          v107 = **v70;
          v238.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
          v233.__r_.__value_.__r.__words[0] = (std::string::size_type)&v238;
          v233.__r_.__value_.__l.__size_ = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(&v229, &v233);
          ZinIrOpLayerGraph::InsertNodeBetween((uint64_t **)v215, v89, v107, a2, (ZinIrOpLayer ***)&v229);
          *(_QWORD *)&v229 = &unk_24C02BB18;
          if (*((_QWORD *)&v229 + 1))
          {
            *(_QWORD *)&v230 = *((_QWORD *)&v229 + 1);
            operator delete(*((void **)&v229 + 1));
          }
          if (SBYTE7(v227) < 0)
            operator delete((void *)v226);
          ++v71;
          ++v70;
        }
        while (v70 != v213);
      }
      v108 = (*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
      ZinOpLayerUtils::GetTensorInfoFromLayers(v3, (uint64_t)&v233);
      v109 = *((_QWORD *)a2 + 57);
      if (*(char *)(v109 + 47) >= 0)
        v110 = *(unsigned __int8 *)(v109 + 47);
      else
        v110 = *(_QWORD *)(v109 + 32);
      std::string::basic_string[abi:ne180100]((uint64_t)&v226, v110 + 6);
      if ((SBYTE7(v227) & 0x80u) == 0)
        v111 = &v226;
      else
        v111 = (__int128 *)v226;
      if (v110)
      {
        if (*(char *)(v109 + 47) >= 0)
          v112 = (const void *)(v109 + 24);
        else
          v112 = *(const void **)(v109 + 24);
        memmove(v111, v112, v110);
      }
      strcpy((char *)v111 + v110, "to_max");
      ZinObjectNameFactory::ZinObjectNameFactory(&v229, &v226);
      if (SBYTE7(v227) < 0)
        operator delete((void *)v226);
      v113 = ZinBuilder::CreateElementWiseLayer(*((_QWORD *)a2 + 2), (uint64_t)&v229, 7, (uint64_t)&v233, (__int128 *)(v108 + 48), *(_DWORD *)(v108 + 88));
      v114 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v113 + 32))(v113, 0, 0);
      ZinIrTensor::CopyTensorMirInfo((ZinIrTensor *)v108, &v221);
      ZinIrTensor::SetTensorMirInfo(v114, &v221);
      v115 = v221;
      v221 = 0;
      if (v115)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v221, v115);
      if (*((char *)a2 + 47) >= 0)
        v116 = *((unsigned __int8 *)a2 + 47);
      else
        v116 = *((_QWORD *)a2 + 4);
      std::string::basic_string[abi:ne180100]((uint64_t)&v238, v116 + 12);
      if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v117 = &v238;
      else
        v117 = (std::string *)v238.__r_.__value_.__r.__words[0];
      if (v116)
      {
        if (*((char *)a2 + 47) >= 0)
          v118 = v212;
        else
          v118 = (const void *)*((_QWORD *)a2 + 3);
        memmove(v117, v118, v116);
      }
      strcpy((char *)v117 + v116, "_back_to_min");
      v119 = ZinMirElementWise::CreateGOC(v113, (uint64_t)&v238);
      if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v238.__r_.__value_.__l.__data_);
      v120 = *((_QWORD *)a2 + 48);
      if (v120)
      {
        v121 = *(_QWORD *)(v120 + 136);
        if (*(char *)(v121 + 23) >= 0)
          v122 = *(unsigned __int8 *)(v121 + 23);
        else
          v122 = *(_QWORD *)(v121 + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&v236, v122 + 1);
        if ((v236.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v123 = &v236;
        else
          v123 = (std::string *)v236.__r_.__value_.__r.__words[0];
        if (v122)
        {
          if (*(char *)(v121 + 23) >= 0)
            v124 = (const void *)v121;
          else
            v124 = *(const void **)v121;
          memmove(v123, v124, v122);
        }
        *(_WORD *)((char *)&v123->__r_.__value_.__l.__data_ + v122) = 95;
        std::string::basic_string[abi:ne180100]<0>(&v219, "ew2min_goc");
        v125 = std::string::append(&v219, "_xfm", 4uLL);
        v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
        v235 = v125->__r_.__value_.__r.__words[2];
        v234 = v126;
        v125->__r_.__value_.__l.__size_ = 0;
        v125->__r_.__value_.__r.__words[2] = 0;
        v125->__r_.__value_.__r.__words[0] = 0;
        if (v235 >= 0)
          v127 = (const std::string::value_type *)&v234;
        else
          v127 = (const std::string::value_type *)v234;
        if (v235 >= 0)
          v128 = HIBYTE(v235);
        else
          v128 = *((_QWORD *)&v234 + 1);
        v129 = std::string::append(&v236, v127, v128);
        v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
        v225.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v130;
        v129->__r_.__value_.__l.__size_ = 0;
        v129->__r_.__value_.__r.__words[2] = 0;
        v129->__r_.__value_.__r.__words[0] = 0;
        v131 = std::string::append(&v225, "_", 1uLL);
        v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
        v237.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v132;
        v131->__r_.__value_.__l.__size_ = 0;
        v131->__r_.__value_.__r.__words[2] = 0;
        v131->__r_.__value_.__r.__words[0] = 0;
        v133 = *(__int128 **)(v119 + 136);
        if (v133)
        {
          if (*((char *)v133 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)v133, *((_QWORD *)v133 + 1));
          }
          else
          {
            v134 = *v133;
            v218.__r_.__value_.__r.__words[2] = *((_QWORD *)v133 + 2);
            *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v134;
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v218, "kernel");
        }
        if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v186 = &v218;
        else
          v186 = (std::string *)v218.__r_.__value_.__r.__words[0];
        if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v187 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
        else
          v187 = v218.__r_.__value_.__l.__size_;
        v188 = std::string::append(&v237, (const std::string::value_type *)v186, v187);
        v189 = *(_OWORD *)&v188->__r_.__value_.__l.__data_;
        *(_QWORD *)&v227 = *((_QWORD *)&v188->__r_.__value_.__l + 2);
        v226 = v189;
        v188->__r_.__value_.__l.__size_ = 0;
        v188->__r_.__value_.__r.__words[2] = 0;
        v188->__r_.__value_.__r.__words[0] = 0;
        ZinIrKernel::FuseScaleBiasWithBottom(v121, &v226, (uint64_t *)(v119 + 136), (uint64_t *)&v220);
        if (SBYTE7(v227) < 0)
          operator delete((void *)v226);
        if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v218.__r_.__value_.__l.__data_);
        if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v237.__r_.__value_.__l.__data_);
        if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v225.__r_.__value_.__l.__data_);
        if (SHIBYTE(v235) < 0)
          operator delete((void *)v234);
        if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v219.__r_.__value_.__l.__data_);
        if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v236.__r_.__value_.__l.__data_);
        v190 = v220;
        v220 = 0;
        std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)(v119 + 136), v190);
        v191 = v220;
        v220 = 0;
        if (v191)
        {
          ZinIrKernel::~ZinIrKernel(v191);
          MEMORY[0x20BD002F8]();
        }
      }
      v192 = (ZinIrOpLayer *)operator new();
      v193 = *((_QWORD *)a2 + 49);
      v194 = (*(uint64_t (**)(ZinIrOpLayerGraph *))(*(_QWORD *)a2 + 416))(a2);
      v195 = operator new(0x18uLL);
      v196 = 0;
      *v195 = v119;
      v195[1] = v193;
      v195[2] = v194;
      *(_OWORD *)&v237.__r_.__value_.__l.__data_ = 0uLL;
      do
      {
        v197 = v195[v196];
        if (v197)
        {
          v198 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v197 + 40))(v197, 0, 0);
          std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100](&v237, v198);
        }
        ++v196;
      }
      while (v196 != 3);
      if (*((char *)a2 + 47) >= 0)
        v199 = *((unsigned __int8 *)a2 + 47);
      else
        v199 = *((_QWORD *)a2 + 4);
      std::string::basic_string[abi:ne180100]((uint64_t)&v226, v199 + 11);
      if ((SBYTE7(v227) & 0x80u) == 0)
        v200 = &v226;
      else
        v200 = (__int128 *)v226;
      if (v199)
      {
        if (*((char *)a2 + 47) >= 0)
          v201 = v212;
        else
          v201 = (const void *)*((_QWORD *)a2 + 3);
        memmove(v200, v201, v199);
      }
      strcpy((char *)v200 + v199, "_min_to_max");
      v202 = *((_QWORD *)a2 + 47);
      v203 = (*(uint64_t (**)(ZinIrOpLayerGraph *))(*(_QWORD *)a2 + 576))(a2);
      v204 = *((_QWORD *)a2 + 49);
      v205 = (*(uint64_t (**)(ZinIrOpLayerGraph *))(*(_QWORD *)a2 + 416))(a2);
      ZinNEElementWiseLayer::ZinNEElementWiseLayer(v192, (uint64_t *)&v237, &v226, v202, (uint64_t)a2 + 432, v113, v203, v119, v204, v205, *((_QWORD *)a2 + 51));
      if (SBYTE7(v227) < 0)
        operator delete((void *)v226);
      v206 = (std::__shared_weak_count *)v237.__r_.__value_.__l.__size_;
      if (v237.__r_.__value_.__l.__size_)
      {
        v207 = (unint64_t *)(v237.__r_.__value_.__l.__size_ + 8);
        do
          v208 = __ldaxr(v207);
        while (__stlxr(v208 - 1, v207));
        if (!v208)
        {
          ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
          std::__shared_weak_count::__release_weak(v206);
        }
      }
      operator delete(v195);
      *(_QWORD *)&v226 = &unk_24C02BB18;
      *((_QWORD *)&v226 + 1) = 0;
      v227 = 0uLL;
      ZinIrOpLayerGraph::ReplaceNode((uint64_t **)v215, a2, v192, (const Layer2TDMapper::SourceLayer *)&v226);
      *(_QWORD *)&v226 = &unk_24C02BB18;
      if (*((_QWORD *)&v226 + 1))
      {
        *(_QWORD *)&v227 = *((_QWORD *)&v226 + 1);
        operator delete(*((void **)&v226 + 1));
      }
      *(_QWORD *)&v229 = off_24C01FBB0;
      if (SHIBYTE(v230) < 0)
        operator delete(*((void **)&v229 + 1));
      v177 = (void *)v233.__r_.__value_.__r.__words[0];
      if (!v233.__r_.__value_.__r.__words[0])
        goto LABEL_317;
      v233.__r_.__value_.__l.__size_ = v233.__r_.__value_.__r.__words[0];
    }
    operator delete(v177);
LABEL_317:
    v4 = 0;
  }
LABEL_6:
  v216[0] = off_24C01FBB0;
  if (v217 < 0)
    operator delete((void *)v216[1]);
  return v4;
}

void sub_206E0DC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  uint64_t v64;
  void *v66;

  if (*(char *)(v64 - 137) < 0)
    operator delete(*(void **)(v64 - 160));
  if (a50 < 0)
    operator delete(__p);
  if (*(char *)(v64 - 185) < 0)
    operator delete(*(void **)(v64 - 208));
  if (a36 < 0)
    operator delete(a31);
  if (*(char *)(v64 - 161) < 0)
    operator delete(*(void **)(v64 - 184));
  if (a64 < 0)
    operator delete(a59);
  v66 = *(void **)(v64 - 240);
  if (v66)
  {
    *(_QWORD *)(v64 - 232) = v66;
    operator delete(v66);
  }
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void sub_206E0E19C()
{
  JUMPOUT(0x206E0E194);
}

uint64_t ZinMirElementWise::CreateGOC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  ZinIrVector *v10;
  size_t v11;
  std::string *v12;
  const void *v13;
  std::string *v14;
  std::string *v15;
  __int128 v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  __int128 v21;
  ZinIrScaleBiasInfo *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  ZinIrKernel *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::string v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  void *v64[2];
  char v65;
  __int128 v66;
  int64_t v67;
  __int128 v68;
  std::string::size_type v69;
  ZinIrVector *v70;
  _QWORD *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;

  v3 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_DWORD *)(v3 + 88);
  v71 = 0;
  v68 = 0uLL;
  LODWORD(v40.__r_.__value_.__l.__data_) = 0;
  v41 = 0;
  *(_OWORD *)&v40.__r_.__value_.__r.__words[1] = 0uLL;
  LODWORD(v42) = 0;
  ZinIrTensor::CreateTensor(v4, v5, (__int128 *)(v3 + 48), (__int128 *)a2, &v71, (uint64_t *)&v68, (unsigned int *)&v40, &v72);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
  if (*((_QWORD *)&v68 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v71;
  v71 = 0;
  if (v9)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v71, v9);
  v10 = (ZinIrVector *)operator new();
  ZinIrVector::ZinIrVector(v10, -1.0, 0);
  v70 = v10;
  if (*(char *)(a2 + 23) >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  v12 = &v40;
  std::string::basic_string[abi:ne180100]((uint64_t)&v40, v11 + 1);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v12 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if (v11)
  {
    if (*(char *)(a2 + 23) >= 0)
      v13 = (const void *)a2;
    else
      v13 = *(const void **)a2;
    memmove(v12, v13, v11);
  }
  *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 95;
  v14 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v64, "create_goc_kernel");
  v15 = std::string::append(v14, "_xfm", 4uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v67 = v15->__r_.__value_.__r.__words[2];
  v66 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v67 >= 0)
    v17 = (const std::string::value_type *)&v66;
  else
    v17 = (const std::string::value_type *)v66;
  if (v67 >= 0)
    v18 = HIBYTE(v67);
  else
    v18 = *((_QWORD *)&v66 + 1);
  v19 = std::string::append(&v40, v17, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v69 = v19->__r_.__value_.__r.__words[2];
  v68 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v67) < 0)
    operator delete((void *)v66);
  if (v65 < 0)
    operator delete(v64[0]);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  HIDWORD(v40.__r_.__value_.__r.__words[1]) = 0;
  LOWORD(v40.__r_.__value_.__r.__words[2]) = 0;
  HIDWORD(v40.__r_.__value_.__r.__words[2]) = 0;
  LOWORD(v41) = 0;
  v40.__r_.__value_.__r.__words[0] = 0;
  LOWORD(v40.__r_.__value_.__r.__words[1]) = 0;
  v42 = 0u;
  v43 = 0u;
  v44 = 0;
  v45 = vdupq_n_s64(1uLL);
  v46 = v45;
  v47 = v45;
  v48 = v45;
  v49 = v45;
  *(_QWORD *)&v21 = 0x100000001;
  *((_QWORD *)&v21 + 1) = 0x100000001;
  v50 = v21;
  v51 = 0x100000001;
  v53 = 0;
  v54 = 0;
  v52 = 0;
  v55 = xmmword_207A85790;
  v56 = 1;
  v57 = 1;
  v58 = 0;
  v63 = 0;
  v59 = 1;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v64[0] = 0;
  v39 = 0;
  std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelDescriptor &,decltype(nullptr),std::unique_ptr<ZinIrVector>,decltype(nullptr)>((uint64_t)&v68, (uint64_t)&v40, (uint64_t)&v70, (uint64_t *)&v66);
  v22 = (ZinIrScaleBiasInfo *)operator new();
  ZinIrScaleBiasInfo::ZinIrScaleBiasInfo(v22);
  v64[0] = v22;
  v23 = operator new();
  v24 = v23;
  v37 = v72;
  v38 = v73;
  if (v73)
  {
    p_shared_owners = (unint64_t *)&v73->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
  }
  ZinGOCLayer::ZinGOCLayer(v23, v64, &v37, a2, &v66);
  v27 = v38;
  if (v38)
  {
    v28 = (unint64_t *)&v38->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v64[0];
  v64[0] = 0;
  if (v30)
    (*(void (**)(void *))(*(_QWORD *)v30 + 8))(v30);
  v31 = (ZinIrKernel *)v66;
  *(_QWORD *)&v66 = 0;
  if (v31)
  {
    ZinIrKernel::~ZinIrKernel(v31);
    MEMORY[0x20BD002F8]();
  }
  if (SHIBYTE(v69) < 0)
    operator delete((void *)v68);
  v32 = (uint64_t)v70;
  v70 = 0;
  if (v32)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v70, v32);
  v33 = v73;
  if (v73)
  {
    v34 = (unint64_t *)&v73->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return v24;
}

void sub_206E0E590(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x20BD002F8](v2, 0x10B3C4024B96488);
  v5 = *(_QWORD *)(v3 - 152);
  *(_QWORD *)(v3 - 152) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)(v3 - 128), 0);
  if (*(char *)(v3 - 73) < 0)
    operator delete(*(void **)(v3 - 96));
  v6 = *(_QWORD *)(v3 - 64);
  *(_QWORD *)(v3 - 64) = 0;
  if (v6)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100](v3 - 64, v6);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v3 - 48);
  _Unwind_Resume(a1);
}

void sub_206E0E698()
{
  uint64_t v0;

  MEMORY[0x20BD002F8](v0, 0x10B3C400A1ACBE3);
  JUMPOUT(0x206E0E688);
}

void sub_206E0E6B8()
{
  JUMPOUT(0x206E0E688);
}

void sub_206E0E6C0()
{
  uint64_t v0;
  _QWORD *v1;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v0 - 96);
  v1 = *(_QWORD **)(v0 - 56);
  *(_QWORD *)(v0 - 56) = 0;
  if (v1)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100](v0 - 56, v1);
  JUMPOUT(0x206E0E690);
}

void ZinMirElementWise::Transform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Mismatch in format", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Fixing Tensor Format mismatch failed \n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Replicating Const tensor to support batch size failed\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

BOOL ZinComputeProgramMakeGpuProcedures(uint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t *v12;
  char *ProcedureNameFromGPUThread;
  uint64_t v14;
  _QWORD *v15;

  if (a3)
  {
    v9 = 0;
    v10 = (_QWORD *)(a2 + 16);
    v11 = 1;
    do
    {
      v12 = (uint64_t *)a1[1];
      ProcedureNameFromGPUThread = ZinComputeProgramGetProcedureNameFromGPUThread(*a1, a4, a5);
      v14 = *v12;
      *(v10 - 2) = ProcedureNameFromGPUThread;
      *(v10 - 1) = v14;
      *v10 = a1[2];
      v10[1] = 1;
      v15 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
      v10[2] = v15;
      if (!v15)
        break;
      ++v9;
      *v15 = a1;
      v11 = v9 < a3;
      v10 += 10;
      a1 += 263;
    }
    while (a3 != v9);
  }
  else
  {
    return 0;
  }
  return v11;
}

uint64_t ZinComputeProgramMakeGpuOperation(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  uint64_t SectionByIndex;

  if (*(_DWORD *)(a2 + 8) != 2)
    return 3;
  v16 = a2 + 16;
  if ((ZinIsOutsideBounds(a2 + 16, 24, a7, a8) & 1) != 0)
    return 4;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v16;
  if (!*(_QWORD *)(a2 + 16))
    return 0;
  if ((ZinIsOutsideBounds(a2, *(unsigned int *)(a2 + 32), a7, a8) & 1) != 0)
    return 4;
  v19 = *(unsigned int *)(a2 + 32) + a2;
  v17 = 4;
  if ((ZinIsOutsideBounds(v19 + 4 * **(_QWORD **)(a1 + 8) - 4, 4, a7, a8) & 1) != 0)
    return v17;
  v20 = malloc_type_calloc(**(_QWORD **)(a1 + 8), 8uLL, 0x2004093837F09uLL);
  *(_QWORD *)(a1 + 16) = v20;
  if (!v20)
    return 1;
  if (!**(_QWORD **)(a1 + 8))
    return 0;
  v21 = 0;
  do
  {
    SectionByIndex = ZinComputeProgramFindSectionByIndex(a3, a4, *(unsigned int *)(v19 + 4 * v21));
    v17 = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v21++) = ZinComputeProgramFindFvmlib(a5, a6, SectionByIndex);
  }
  while (v21 < **(_QWORD **)(a1 + 8));
  return v17;
}

uint64_t ANEDebugInfo::DebugInfoSerializer::DebugInfoSerializer(uint64_t this, const ANEDebugInfo::DebugInfoInMem *a2)
{
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

BOOL ANEDebugInfo::DebugInfoSerializer::Alloc(ANEDebugInfo::DebugInfoSerializer *this, int a2)
{
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = (char *)this + 16;
  v3 = (char *)*((_QWORD *)this + 2);
  v4 = (char *)*((_QWORD *)v5 + 1);
  v6 = *((unsigned int *)this + 2);
  if (v4 != &v3[v6])
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ANEDebugInfo::DebugInfoSerializer::Alloc(result, v8, v9, v10, v11, v12, v13, v14);
    return 0;
  }
  if (v3)
  {
    if (&v4[a2] <= v3)
    {
      *((_DWORD *)this + 2) = v6 + a2;
      return 1;
    }
    v16 = (*((_DWORD *)this + 8) + 2 * a2);
    *((_DWORD *)this + 8) = v16;
    v17 = v4 - v3;
    v18 = (char *)malloc_type_realloc(v3, v16, 0xEC513D67uLL);
    *((_QWORD *)this + 2) = v18;
    v19 = &v18[v17];
  }
  else
  {
    v20 = (2 * a2);
    *((_DWORD *)this + 8) = v20;
    v18 = (char *)malloc_type_malloc(v20, 0xDF67174DuLL);
    v19 = v18;
    *((_QWORD *)this + 2) = v18;
  }
  *((_QWORD *)this + 3) = v19;
  *((_DWORD *)this + 2) += a2;
  if (v18)
    return 1;
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    ANEDebugInfo::DebugInfoSerializer::Alloc(result, v21, v22, v23, v24, v25, v26, v27);
    return 0;
  }
  return result;
}

BOOL ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(ANEDebugInfo::DebugInfoSerializer *this)
{
  uint64_t v1;
  unint64_t v3;
  _BOOL8 result;

  v1 = *((_QWORD *)this + 3) & 7;
  if (!v1)
    return 1;
  v3 = v1 | 0xFFFFFFFFFFFFFFF8;
  do
    ANEDebugInfo::DebugInfoSerializer::Store<char>((uint64_t)this, 0);
  while (!__CFADD__(v3++, 1));
  if (*((_QWORD *)this + 3) <= *((_QWORD *)this + 2) + (unint64_t)*((unsigned int *)this + 2))
    return 1;
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord();
    return 0;
  }
  return result;
}

BOOL ANEDebugInfo::DebugInfoSerializer::Store<char>(uint64_t a1, char a2)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;

  v2 = *(_BYTE **)(a1 + 24);
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 16) + *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v2 + 1) > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord();
  }
  else
  {
    *v2 = a2;
    ++*(_QWORD *)(a1 + 24);
  }
  return (unint64_t)v3 <= v4;
}

BOOL ANEDebugInfo::DebugInfoSerializer::StoreAttrSize(uint64_t a1, int a2, int a3)
{
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((a3 & 7) != 0)
  {
    v3 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v3)
      ANEDebugInfo::DebugInfoSerializer::StoreAttrSize(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  else if (ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>(a1, a2))
  {
    return ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>(a1, a3);
  }
  return 0;
}

BOOL ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>(uint64_t a1, int a2)
{
  _DWORD *v2;
  _DWORD *v3;
  unint64_t v4;

  v2 = *(_DWORD **)(a1 + 24);
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 16) + *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v2 + 1) > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord();
  }
  else
  {
    *v2 = a2;
    *(_QWORD *)(a1 + 24) = v3;
  }
  return (unint64_t)v3 <= v4;
}

BOOL ANEDebugInfo::DebugInfoSerializer::AllocAttr(ANEDebugInfo::DebugInfoSerializer *a1, int a2, int a3)
{
  int v5;
  _BOOL8 result;

  v5 = ZinAlignPower2((a3 + 8), 8);
  result = ANEDebugInfo::DebugInfoSerializer::Alloc(a1, v5);
  if (result)
    return ANEDebugInfo::DebugInfoSerializer::StoreAttrSize((uint64_t)a1, a2, v5);
  return result;
}

BOOL ANEDebugInfo::DebugInfoSerializer::EncodeCU(ANEDebugInfo::DebugInfoSerializer *this)
{
  _BOOL4 v2;
  int v3;
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  __int128 v7;
  unsigned int v8;
  std::string *p_p;
  int i;
  _BOOL4 v11;
  uint64_t Mode;
  int v13;
  _BOOL8 result;
  BOOL v15;
  std::string __p;

  if (ANEDebugInfo::DebugInfoSerializer::AllocTag<(ANEDebugInfo::TAG)0>(this)
    && ANEDebugInfo::DebugInfoSerializer::AllocAttr(this, 2061, 4)
    && ANEDebugInfo::DebugInfoSerializer::Store<unsigned long long>((uint64_t)this, 1)
    && ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(this))
  {
    v2 = ANEDebugInfo::DebugInfoSerializer::AllocTag<(ANEDebugInfo::TAG)8>(this);
    v3 = ZinAlignPower2(*(unsigned int *)(*(_QWORD *)this + 116), 8);
    if (v2)
      LOBYTE(v2) = ANEDebugInfo::DebugInfoSerializer::AllocAttr(this, 2051, v3);
  }
  else
  {
    v3 = ZinAlignPower2(*(unsigned int *)(*(_QWORD *)this + 116), 8);
    LOBYTE(v2) = 0;
  }
  v4 = *(_QWORD *)this;
  v5 = *(__int128 **)(*(_QWORD *)this + 72);
  v6 = *(__int128 **)(*(_QWORD *)this + 80);
  if (v5 != v6)
  {
    while (1)
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v7 = *v5;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        break;
      if (v2)
      {
        v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        p_p = &__p;
LABEL_17:
        LOBYTE(v2) = ANEDebugInfo::DebugInfoSerializer::Store<char>((uint64_t)this, (char *)p_p, v8)
                  && ANEDebugInfo::DebugInfoSerializer::Store<char>((uint64_t)this, 0);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_25;
        goto LABEL_24;
      }
      LOBYTE(v2) = 0;
LABEL_25:
      v5 = (__int128 *)((char *)v5 + 24);
      if (v5 == v6)
      {
        v4 = *(_QWORD *)this;
        goto LABEL_27;
      }
    }
    if (v2)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v8 = __p.__r_.__value_.__r.__words[1];
      goto LABEL_17;
    }
    LOBYTE(v2) = 0;
LABEL_24:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_25;
  }
LABEL_27:
  for (i = v3 - *(_DWORD *)(v4 + 116); i; --i)
    LOBYTE(v2) = v2 && ANEDebugInfo::DebugInfoSerializer::Store<char>((uint64_t)this, 0);
  v11 = v2
     && ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(this)
     && ANEDebugInfo::DebugInfoSerializer::AllocAttr(this, 2049, 4)
     && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)this, *(_DWORD *)(*(_QWORD *)this + 64))
     && ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(this)
     && ANEDebugInfo::DebugInfoSerializer::EncodeProc(this);
  if (*(_BYTE *)ANEDebugInfo::DebugInfoInMem::GetMode(*(ANEDebugInfo::DebugInfoInMem **)this))
  {
    if (!v11)
      goto LABEL_45;
    if (!ANEDebugInfo::DebugInfoSerializer::EncodeHwConfigs(this))
    {
      v11 = 0;
      goto LABEL_45;
    }
  }
  else if (!v11)
  {
    goto LABEL_45;
  }
  v11 = ANEDebugInfo::DebugInfoSerializer::EncodeIdentString(this);
LABEL_45:
  Mode = ANEDebugInfo::DebugInfoInMem::GetMode(*(ANEDebugInfo::DebugInfoInMem **)this);
  v13 = *(unsigned __int8 *)(Mode + 1);
  if (*(_BYTE *)(Mode + 1))
    result = 0;
  else
    result = v11;
  if (v13)
    v15 = !v11;
  else
    v15 = 1;
  if (!v15)
    return ANEDebugInfo::DebugInfoSerializer::EncodeMaxLatencyThreshold(this);
  return result;
}

BOOL ANEDebugInfo::DebugInfoSerializer::AllocTag<(ANEDebugInfo::TAG)0>(ANEDebugInfo::DebugInfoSerializer *a1)
{
  return ANEDebugInfo::DebugInfoSerializer::Alloc(a1, 8)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, 0)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, 8);
}

BOOL ANEDebugInfo::DebugInfoSerializer::Store<unsigned long long>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;

  v2 = *(_QWORD **)(a1 + 24);
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 16) + *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v2 + 1) > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord();
  }
  else
  {
    *v2 = a2;
    *(_QWORD *)(a1 + 24) = v3;
  }
  return (unint64_t)v3 <= v4;
}

BOOL ANEDebugInfo::DebugInfoSerializer::AllocTag<(ANEDebugInfo::TAG)8>(ANEDebugInfo::DebugInfoSerializer *a1)
{
  return ANEDebugInfo::DebugInfoSerializer::Alloc(a1, 8)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, 8)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, 8);
}

BOOL ANEDebugInfo::DebugInfoSerializer::Store<char>(uint64_t a1, char *a2, unsigned int a3)
{
  _BYTE *v3;
  _BYTE *v4;
  unint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_BYTE **)(a1 + 24);
  v4 = &v3[a3];
  v5 = *(_QWORD *)(a1 + 16) + *(unsigned int *)(a1 + 8);
  if ((unint64_t)v4 > v5)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord();
  }
  else
  {
    v6 = a3;
    if (a3)
    {
      do
      {
        v7 = *a2++;
        *v3++ = v7;
        --a3;
      }
      while (a3);
      v3 = *(_BYTE **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 24) = &v3[v6];
  }
  return (unint64_t)v4 <= v5;
}

BOOL ANEDebugInfo::DebugInfoSerializer::EncodeProc(ANEDebugInfo::DebugInfoSerializer *this)
{
  _BOOL4 v2;
  _BYTE *Mode;
  _BOOL8 v4;
  BOOL v5;
  uint64_t v6;
  uint64_t i;
  void *v9;
  void *v10;
  uint64_t v11;
  void *__p;
  void *v13;
  uint64_t v14;

  v2 = ANEDebugInfo::DebugInfoSerializer::AllocTag<(ANEDebugInfo::TAG)1>(this)
    && ANEDebugInfo::DebugInfoSerializer::AllocAttr(this, 2048, 4)
    && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)this, *(_DWORD *)(*(_QWORD *)this + 68))
    && ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(this);
  Mode = (_BYTE *)ANEDebugInfo::DebugInfoInMem::GetMode(*(ANEDebugInfo::DebugInfoInMem **)this);
  if (*Mode)
    v4 = 0;
  else
    v4 = v2;
  if (*Mode)
    v5 = !v2;
  else
    v5 = 1;
  if (!v5)
    v4 = ANEDebugInfo::DebugInfoSerializer::AllocAttr(this, 2056, 4)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned long long>((uint64_t)this, *(_QWORD *)(*(_QWORD *)this + 96))&& ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(this);
  v6 = *(_QWORD *)(*(_QWORD *)this + 40);
  for (i = *(_QWORD *)(*(_QWORD *)this + 48); v6 != i; v6 += 48)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    std::vector<ANEDebugInfo::DebugInfoInMem::Layer>::__init_with_size[abi:ne180100]<ANEDebugInfo::DebugInfoInMem::Layer*,ANEDebugInfo::DebugInfoInMem::Layer*>(&v9, *(const void **)v6, *(_QWORD *)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2));
    __p = 0;
    v13 = 0;
    v14 = 0;
    std::vector<ANEDebugInfo::DebugInfoInMem::TD>::__init_with_size[abi:ne180100]<ANEDebugInfo::DebugInfoInMem::TD*,ANEDebugInfo::DebugInfoInMem::TD*>(&__p, *(const void **)(v6 + 24), *(_QWORD *)(v6 + 32), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v6 + 32) - *(_QWORD *)(v6 + 24)) >> 3));
    v4 = v4 && ANEDebugInfo::DebugInfoSerializer::EncodeGroup(this, (const ANEDebugInfo::DebugInfoInMem::Group *)&v9);
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
    if (v9)
    {
      v10 = v9;
      operator delete(v9);
    }
  }
  return v4;
}

void sub_206E0F24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  ANEDebugInfo::DebugInfoInMem::Group::~Group((ANEDebugInfo::DebugInfoInMem::Group *)&__p);
  _Unwind_Resume(a1);
}

BOOL ANEDebugInfo::DebugInfoSerializer::EncodeHwConfigs(ANEDebugInfo::DebugInfoSerializer *this)
{
  return ANEDebugInfo::DebugInfoSerializer::AllocTag<(ANEDebugInfo::TAG)10>(this)
      && ANEDebugInfo::DebugInfoSerializer::AllocAttr(this, 2057, 4)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned long long>((uint64_t)this, (unint64_t)**(double **)this)&& ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(this)&& ANEDebugInfo::DebugInfoSerializer::AllocAttr(this, 2058, 4)&& ANEDebugInfo::DebugInfoSerializer::Store<unsigned long long>((uint64_t)this, (unint64_t)*(double *)(*(_QWORD *)this + 8))&& ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(this)&& ANEDebugInfo::DebugInfoSerializer::AllocAttr(this, 2059, 4)&& ANEDebugInfo::DebugInfoSerializer::Store<unsigned long long>((uint64_t)this, (unint64_t)*(double *)(*(_QWORD *)this + 24))&& ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(this);
}

BOOL ANEDebugInfo::DebugInfoSerializer::EncodeIdentString(ANEDebugInfo::DebugInfoSerializer *this)
{
  return ANEDebugInfo::DebugInfoSerializer::AllocAttr(this, 2063, 4)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)this, *(_DWORD *)(*(_QWORD *)this + 112))
      && ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(this);
}

BOOL ANEDebugInfo::DebugInfoSerializer::EncodeMaxLatencyThreshold(ANEDebugInfo::DebugInfoSerializer *this)
{
  return ANEDebugInfo::DebugInfoSerializer::AllocAttr(this, 2064, 4)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned long long>((uint64_t)this, *(_QWORD *)(*(_QWORD *)this + 104))&& ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(this);
}

BOOL ANEDebugInfo::DebugInfoSerializer::AllocTag<(ANEDebugInfo::TAG)10>(ANEDebugInfo::DebugInfoSerializer *a1)
{
  return ANEDebugInfo::DebugInfoSerializer::Alloc(a1, 8)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, 10)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, 8);
}

BOOL ANEDebugInfo::DebugInfoSerializer::AllocTag<(ANEDebugInfo::TAG)1>(ANEDebugInfo::DebugInfoSerializer *a1)
{
  return ANEDebugInfo::DebugInfoSerializer::Alloc(a1, 8)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, 1)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, 8);
}

BOOL ANEDebugInfo::DebugInfoSerializer::EncodeGroup(ANEDebugInfo::DebugInfoSerializer *this, const ANEDebugInfo::DebugInfoInMem::Group *a2)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = ANEDebugInfo::DebugInfoSerializer::AllocTag<(ANEDebugInfo::TAG)9>(this);
  v5 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  while (v5 != v6)
  {
    result = result && ANEDebugInfo::DebugInfoSerializer::EncodeSourceLayer(this, v5);
    v5 += 12;
  }
  v8 = *((_QWORD *)a2 + 3);
  v7 = *((_QWORD *)a2 + 4);
  while (v8 != v7)
  {
    result = result && ANEDebugInfo::DebugInfoSerializer::EncodeTD(this, v8);
    v8 += 72;
  }
  return result;
}

BOOL ANEDebugInfo::DebugInfoSerializer::EncodePerfStats(ANEDebugInfo::DebugInfoSerializer *a1, uint64_t *a2)
{
  return ANEDebugInfo::DebugInfoSerializer::AllocTag<(ANEDebugInfo::TAG)6>(a1)
      && ANEDebugInfo::DebugInfoSerializer::AllocAttr(a1, 2052, 8)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned long long>((uint64_t)a1, *a2)
      && ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(a1)
      && ANEDebugInfo::DebugInfoSerializer::AllocAttr(a1, 2053, 8)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned long long>((uint64_t)a1, a2[1])
      && ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(a1)
      && ANEDebugInfo::DebugInfoSerializer::AllocAttr(a1, 2054, 8)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned long long>((uint64_t)a1, a2[2])
      && ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(a1)
      && ANEDebugInfo::DebugInfoSerializer::AllocAttr(a1, 2055, 8)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned long long>((uint64_t)a1, a2[3])
      && ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(a1);
}

BOOL ANEDebugInfo::DebugInfoSerializer::AllocTag<(ANEDebugInfo::TAG)6>(ANEDebugInfo::DebugInfoSerializer *a1)
{
  return ANEDebugInfo::DebugInfoSerializer::Alloc(a1, 8)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, 6)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, 8);
}

BOOL ANEDebugInfo::DebugInfoSerializer::EncodeTD(ANEDebugInfo::DebugInfoSerializer *a1, uint64_t a2)
{
  _BOOL4 v4;
  uint64_t Mode;
  _BOOL4 v6;
  BOOL v7;
  _BYTE *v8;
  _BOOL4 v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  _BOOL8 result;
  BOOL v14;

  v4 = ANEDebugInfo::DebugInfoSerializer::AllocTag<(ANEDebugInfo::TAG)5>(a1)
    && ANEDebugInfo::DebugInfoSerializer::AllocAttr(a1, 2050, 4)
    && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, *(_DWORD *)a2)
    && ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(a1);
  Mode = ANEDebugInfo::DebugInfoInMem::GetMode(*(ANEDebugInfo::DebugInfoInMem **)a1);
  if (*(_BYTE *)(Mode + 1))
    v6 = 0;
  else
    v6 = v4;
  if (*(_BYTE *)(Mode + 1))
    v7 = !v4;
  else
    v7 = 1;
  if (!v7)
    v6 = ANEDebugInfo::DebugInfoSerializer::AllocAttr(a1, 2062, 4)
      && ANEDebugInfo::DebugInfoSerializer::Store<BOOL>((uint64_t)a1, *(_BYTE *)(a2 + 4))
      && ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(a1);
  v8 = (_BYTE *)ANEDebugInfo::DebugInfoInMem::GetMode(*(ANEDebugInfo::DebugInfoInMem **)a1);
  if (*v8)
    v9 = 0;
  else
    v9 = v6;
  if (*v8)
    v10 = !v6;
  else
    v10 = 1;
  if (!v10)
    v9 = ANEDebugInfo::DebugInfoSerializer::EncodePerfStats(a1, (uint64_t *)(a2 + 8));
  v11 = ANEDebugInfo::DebugInfoInMem::GetMode(*(ANEDebugInfo::DebugInfoInMem **)a1);
  v12 = *(unsigned __int8 *)(v11 + 2);
  if (*(_BYTE *)(v11 + 2))
    result = 0;
  else
    result = v9;
  if (v12)
    v14 = !v9;
  else
    v14 = 1;
  if (!v14)
    return ANEDebugInfo::DebugInfoSerializer::EncodePerfTracingInfo(a1, a2);
  return result;
}

BOOL ANEDebugInfo::DebugInfoSerializer::AllocTag<(ANEDebugInfo::TAG)5>(ANEDebugInfo::DebugInfoSerializer *a1)
{
  return ANEDebugInfo::DebugInfoSerializer::Alloc(a1, 8)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, 5)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, 8);
}

BOOL ANEDebugInfo::DebugInfoSerializer::Store<BOOL>(uint64_t a1, char a2)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;

  v2 = *(_BYTE **)(a1 + 24);
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 16) + *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v2 + 1) > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord();
  }
  else
  {
    *v2 = a2;
    *(_QWORD *)(a1 + 24) = v3;
  }
  return (unint64_t)v3 <= v4;
}

BOOL ANEDebugInfo::DebugInfoSerializer::EncodePerfTracingInfo(ANEDebugInfo::DebugInfoSerializer *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t i;

  LOBYTE(result) = ANEDebugInfo::DebugInfoSerializer::AllocTag<(ANEDebugInfo::TAG)11>(a1);
  for (i = 0; i != 32; i += 8)
  {
    if (result)
    {
      result = ANEDebugInfo::DebugInfoSerializer::AllocAttr(a1, 2066, 8);
      if (result)
      {
        result = ANEDebugInfo::DebugInfoSerializer::Store<unsigned long long>((uint64_t)a1, *(int *)(a2 + i + 40));
        if (result)
        {
          result = ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(a1);
          if (result)
          {
            result = ANEDebugInfo::DebugInfoSerializer::AllocAttr(a1, 2067, 8);
            if (result)
            {
              result = ANEDebugInfo::DebugInfoSerializer::Store<unsigned long long>((uint64_t)a1, *(int *)(a2 + i + 44));
              if (result)
                result = ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(a1);
            }
          }
        }
      }
    }
    else
    {
      result = 0;
    }
  }
  return result;
}

BOOL ANEDebugInfo::DebugInfoSerializer::AllocTag<(ANEDebugInfo::TAG)11>(ANEDebugInfo::DebugInfoSerializer *a1)
{
  return ANEDebugInfo::DebugInfoSerializer::Alloc(a1, 8)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, 11)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, 8);
}

BOOL ANEDebugInfo::DebugInfoSerializer::AllocTag<(ANEDebugInfo::TAG)9>(ANEDebugInfo::DebugInfoSerializer *a1)
{
  return ANEDebugInfo::DebugInfoSerializer::Alloc(a1, 8)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, 9)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, 8);
}

BOOL ANEDebugInfo::DebugInfoSerializer::EncodeSourceLayer(ANEDebugInfo::DebugInfoSerializer *a1, uint64_t a2)
{
  _BOOL4 v4;

  v4 = ANEDebugInfo::DebugInfoSerializer::AllocTag<(ANEDebugInfo::TAG)3>(a1);
  if (v4)
  {
    v4 = ANEDebugInfo::DebugInfoSerializer::AllocAttr(a1, 2048, 4);
    if (v4)
    {
      v4 = ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, *(_DWORD *)a2);
      if (v4)
        v4 = ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(a1);
    }
  }
  if (*(float *)(a2 + 8) == 1.0)
  {
    if (!v4)
      return 0;
  }
  else if (!v4
         || !ANEDebugInfo::DebugInfoSerializer::AllocAttr(a1, 2060, 4)
         || !ANEDebugInfo::DebugInfoSerializer::Store<float>((uint64_t)a1, *(float *)(a2 + 8))
         || !ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(a1))
  {
    return 0;
  }
  return ANEDebugInfo::DebugInfoSerializer::EncodeOperation(a1, a2);
}

uint64_t ANEDebugInfo::DebugInfoSerializer::GetMetadataBuf(ANEDebugInfo::DebugInfoSerializer *this)
{
  return *((unsigned int *)this + 2);
}

BOOL ANEDebugInfo::DebugInfoSerializer::EncodeOperation(ANEDebugInfo::DebugInfoSerializer *a1, uint64_t a2)
{
  return ANEDebugInfo::DebugInfoSerializer::AllocTag<(ANEDebugInfo::TAG)4>(a1)
      && ANEDebugInfo::DebugInfoSerializer::AllocAttr(a1, 2048, 4)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, *(_DWORD *)(a2 + 4))
      && ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord(a1);
}

BOOL ANEDebugInfo::DebugInfoSerializer::AllocTag<(ANEDebugInfo::TAG)4>(ANEDebugInfo::DebugInfoSerializer *a1)
{
  return ANEDebugInfo::DebugInfoSerializer::Alloc(a1, 8)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, 4)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, 8);
}

BOOL ANEDebugInfo::DebugInfoSerializer::AllocTag<(ANEDebugInfo::TAG)3>(ANEDebugInfo::DebugInfoSerializer *a1)
{
  return ANEDebugInfo::DebugInfoSerializer::Alloc(a1, 8)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, 3)
      && ANEDebugInfo::DebugInfoSerializer::Store<unsigned int>((uint64_t)a1, 8);
}

BOOL ANEDebugInfo::DebugInfoSerializer::Store<float>(uint64_t a1, float a2)
{
  float *v2;
  float *v3;
  unint64_t v4;

  v2 = *(float **)(a1 + 24);
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 16) + *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v2 + 1) > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord();
  }
  else
  {
    *v2 = a2;
    *(_QWORD *)(a1 + 24) = v3;
  }
  return (unint64_t)v3 <= v4;
}

void ANEDebugInfo::DebugInfoSerializer::Alloc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "malloc/realloc failed.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Previous allocation was not used.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANEDebugInfo::DebugInfoSerializer::AlignDataWritePtrAfterRecord()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_8(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Storing out of bound: %p < %p", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void ANEDebugInfo::DebugInfoSerializer::StoreAttrSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Last record size is not aligned to 8 bytes. Need padding.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

_QWORD *ZinNEPoolLayer::ZinNEPoolLayer(_QWORD *a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;

  v19 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v19, 89);
  v20 = a2[1];
  v28 = *a2;
  v29 = (std::__shared_weak_count *)v20;
  v30 = v19;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  ZinNELayer::ZinNELayer((uint64_t)a1, &v30, &v28, a4, a5, a6, a8, a9, a10, a11, a3, 0);
  v23 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v30;
  v30 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  *a1 = &off_24C019590;
  a1[54] = a7;
  return a1;
}

{
  return ZinNEPoolLayer::ZinNEPoolLayer(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_206E0FDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  v17 = a16;
  a16 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

_QWORD *ZinNEPoolLayer::ZinNEPoolLayer(_QWORD *a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16[2];

  v10 = (std::__shared_weak_count *)a2[1];
  v16[0] = *a2;
  v16[1] = (uint64_t)v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  ZinNEPoolLayer::ZinNEPoolLayer(a1, v16, a3, 0, 0, a4, a5, a6, a7, a8, a9);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return a1;
}

void sub_206E0FEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinNEPoolLayer::Lower()
{
  return 0;
}

uint64_t ZinNEPoolLayer::LowerEngineCore(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t Hal;
  ZinNEPoolLayer *v12;
  uint64_t *v13;
  unint64_t v14;

  v6 = *(_QWORD *)(a1 + 432);
  v7 = *(_DWORD *)(*(_QWORD *)(v6 + 64) + 104);
  v8 = v7 > 0xB || ((1 << v7) & 0xEB0) == 0;
  if (v8 && v7 - 12 > 2)
    return 0;
  v9 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 88) + 32))(**(_QWORD **)(a1 + 88), 0, 0)+ 56);
  v10 = *(_DWORD *)(*(_QWORD *)(v6 + 64) + 104) & 0xFFFFFFFE;
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*(_QWORD *)(a1 + 16) + 160));
  v12 = (ZinNEPoolLayer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v13 = (uint64_t *)((char *)v12 + 752);
  if (v10 != 4)
    v13 = (uint64_t *)((char *)v12 + 760);
  v14 = *v13;
  if (v9 <= *v13)
    return 0;
  if (ZinNEPoolLayer::HasPrimeFactorGreaterThanUnicastCinMax(v12, v9, *v13))
    return ZinNEPoolLayer::DecomposePrimeFactorChannelPool((ZinNEPoolLayer *)a1, a2, v14, *(_DWORD *)(**(_QWORD **)a3 + 8));
  return ZinNEPoolLayer::DecomposeChannelPool((ZinNEPoolLayer *)a1, a2, v14);
}

uint64_t ZinNEPoolLayer::HasPrimeFactorGreaterThanUnicastCinMax(ZinNEPoolLayer *this, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;

  do
  {
    v3 = a2;
    a2 >>= 1;
  }
  while ((v3 & 1) == 0);
  for (i = a3 + 1; ; i += 2)
  {
    if (i > v3)
      return 0;
    if (!(v3 % i) && ZinIsPrime(i))
      break;
  }
  return 1;
}

uint64_t ZinNEPoolLayer::DecomposePrimeFactorChannelPool(ZinNEPoolLayer *this, uint64_t **a2, unint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  void **v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  ZinIrOpLayer *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _OWORD v56[2];
  int v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  ZinIrOpLayer **v60;
  void *v61;
  void *v62;
  uint64_t v63;
  int v64;
  ZinNEPoolLayer **v65;
  uint64_t v66;
  _QWORD *v67;
  std::string v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  __int128 v71[2];
  uint64_t v72;
  void *__p[2];
  __int128 v74;
  uint64_t v75;
  _QWORD v76[3];
  char v77;
  ZinNEPoolLayer *v78;
  _QWORD v79[3];
  _QWORD *v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0)+ 56);
  v9 = (*(uint64_t (**)(ZinNEPoolLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  if (*((char *)this + 47) >= 0)
    v10 = *((unsigned __int8 *)this + 47);
  else
    v10 = *((_QWORD *)this + 4);
  v11 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v10 + 19);
  if (SBYTE7(v74) < 0)
    v11 = (void **)__p[0];
  if (v10)
  {
    if (*((char *)this + 47) >= 0)
      v12 = (char *)this + 24;
    else
      v12 = (char *)*((_QWORD *)this + 3);
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "_primepooldecompose");
  ZinObjectNameFactory::ZinObjectNameFactory(v76, __p);
  v13 = v9 + 48;
  if (SBYTE7(v74) < 0)
    operator delete(__p[0]);
  v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)__p = *(_OWORD *)v13;
  v74 = v14;
  v75 = *(_QWORD *)(v13 + 32);
  if (v8 / a3 * a3 >= a4 * a3)
    v15 = a4 * a3;
  else
    v15 = v8 / a3 * a3;
  v16 = v15;
  if ((uint64_t)v15 >= (uint64_t)a3)
  {
    v17 = a3;
    while ((uint64_t)v15 % v17--)
      ;
    v16 = v17 + 1;
  }
  v19 = (char *)(v15 / v16 * (v8 / v15));
  __p[1] = v19;
  v20 = v8 % v15;
  if (v8 % v15 < a3)
    goto LABEL_23;
  if (ZinIsPrime(v8 % v15))
  {
    v19 = (char *)__p[1];
LABEL_23:
    v21 = v19 + 1;
    goto LABEL_29;
  }
  v22 = v8 % v15;
  if (v20 >= (uint64_t)a3)
  {
    v23 = a3;
    while (v20 % v23--)
      ;
    v22 = v23 + 1;
  }
  v21 = (char *)__p[1] + v20 / v22;
LABEL_29:
  __p[1] = v21;
  v79[0] = &off_24C000AB0;
  v79[1] = a3;
  v79[2] = this;
  v80 = v79;
  v25 = ZinMirChannelSplit::ZinSplitLayerByInputChannel(a2, this, (ZinANELayer *)v15, (__int128 *)__p, (uint64_t)v79);
  v26 = v80;
  if (v80 == v79)
  {
    v27 = 4;
    v26 = v79;
    goto LABEL_33;
  }
  if (v80)
  {
    v27 = 5;
LABEL_33:
    (*(void (**)(void))(*v26 + 8 * v27))();
  }
  v28 = (*(uint64_t (**)(ZinNEPoolLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  v29 = *(_OWORD *)(v28 + 64);
  v71[0] = *(_OWORD *)(v28 + 48);
  v71[1] = v29;
  v72 = *(_QWORD *)(v28 + 80);
  *((_QWORD *)&v71[0] + 1) = 1;
  v30 = *((_QWORD *)this + 2);
  v31 = *(_DWORD *)((*(uint64_t (**)(ZinNEPoolLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0)+ 88);
  ZinObjectNameFactory::CreateName((uint64_t)v76, 0, &v68);
  v66 = 0;
  v67 = 0;
  v65 = 0;
  LODWORD(v60) = 0;
  v62 = 0;
  v63 = 0;
  v61 = 0;
  v64 = 0;
  ZinIrTensor::CreateTensor(v30, v31, v71, (__int128 *)&v68, &v67, (uint64_t *)&v65, (unsigned int *)&v60, &v69);
  v32 = (std::__shared_weak_count *)v66;
  if (v66)
  {
    v33 = (unint64_t *)(v66 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v67;
  v67 = 0;
  if (v35)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v67, v35);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  ZinObjectNameFactory::CreateName((uint64_t)v76, 1u, &v68);
  v58 = v69;
  v59 = v70;
  if (v70)
  {
    p_shared_owners = (unint64_t *)&v70->__shared_owners_;
    do
      v37 = __ldxr(p_shared_owners);
    while (__stxr(v37 + 1, p_shared_owners));
  }
  v38 = (ZinIrOpLayer *)(*(uint64_t (**)(ZinNEPoolLayer *, uint64_t *, std::string *))(*(_QWORD *)this + 176))(this, &v58, &v68);
  v39 = v59;
  if (v59)
  {
    v40 = (unint64_t *)&v59->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v78 = this;
  v65 = &v78;
  v66 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v60, &v65);
  ZinIrOpLayerGraph::AddNode(a2, v38, &v60);
  v60 = (ZinIrOpLayer **)&unk_24C02BB18;
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v25, (uint64_t)v38, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  memset(v56, 0, sizeof(v56));
  v57 = 1065353216;
  v42 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)this, v38, v56);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v56);
  if ((v42 & 1) != 0)
  {
    ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, this, 0);
    v43 = 0;
  }
  else
  {
    v44 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v44)
      std::__function::__func<ZinMirLayerFusion::Commit(void)::$_0,std::allocator<ZinMirLayerFusion::Commit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v44, v45, v46, v47, v48, v49, v50, v51);
    v43 = 3;
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  v52 = v70;
  if (v70)
  {
    v53 = (unint64_t *)&v70->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v76[0] = off_24C01FBB0;
  if (v77 < 0)
    operator delete((void *)v76[1]);
  return v43;
}

void sub_206E105B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  *(_QWORD *)(v43 - 168) = off_24C01FBB0;
  if (*(char *)(v43 - 137) < 0)
    operator delete(*(void **)(v43 - 160));
  _Unwind_Resume(exception_object);
}

uint64_t ZinNEPoolLayer::DecomposeChannelPool(ZinNEPoolLayer *this, uint64_t **a2, uint64_t a3)
{
  ZinIrOpLayer *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  __int128 *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  ZinIrOpLayer *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  ZinIrOpLayer *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  char v38;
  uint64_t v39;
  _BOOL8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[2];
  int v50;
  uint64_t v51[2];
  ZinIrOpLayer **v52;
  void *v53;
  void *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  _QWORD *v59;
  std::string __p;
  uint64_t v61;
  std::__shared_weak_count *v62;
  std::string v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _QWORD v67[3];
  char v68;
  ZinNEPoolLayer *v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v6 = (ZinIrOpLayer *)**((_QWORD **)this + 11);
  v7 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0);
  v8 = *(_QWORD *)(v7 + 56);
  if (v8
     / *(_QWORD *)((*(uint64_t (**)(ZinNEPoolLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0)+ 56) <= a3)return 0;
  if (*((char *)this + 47) >= 0)
    v9 = *((unsigned __int8 *)this + 47);
  else
    v9 = *((_QWORD *)this + 4);
  std::string::basic_string[abi:ne180100]((uint64_t)&v64, v9 + 14);
  if ((SBYTE7(v65) & 0x80u) == 0)
    v10 = &v64;
  else
    v10 = (__int128 *)v64;
  if (v9)
  {
    if (*((char *)this + 47) >= 0)
      v11 = (char *)this + 24;
    else
      v11 = (char *)*((_QWORD *)this + 3);
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, "_pooldecompose");
  ZinObjectNameFactory::ZinObjectNameFactory(v67, &v64);
  if (SBYTE7(v65) < 0)
    operator delete((void *)v64);
  if (v8 < 2)
  {
LABEL_60:
    v39 = 0;
    goto LABEL_61;
  }
  v12 = (uint64_t)v6;
  do
  {
    v13 = *(_OWORD *)(v7 + 64);
    v64 = *(_OWORD *)(v7 + 48);
    v65 = v13;
    v66 = *(_QWORD *)(v7 + 80);
    v14 = v8;
    if (v8 >= a3)
    {
      v15 = a3;
      while (v8 % v15--)
        ;
      v14 = v15 + 1;
    }
    *((_QWORD *)&v64 + 1) = v8 / v14;
    ZinObjectNameFactory::CreateName((uint64_t)v67, 1u, &v63);
    if (*((_QWORD *)&v64 + 1) == 1)
    {
      v17 = (uint64_t *)(*(uint64_t (**)(ZinNEPoolLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 40))(this, 0, 0);
      v18 = (std::__shared_weak_count *)v17[1];
      v61 = *v17;
      v62 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
      }
      v21 = (ZinIrOpLayer *)(*(uint64_t (**)(ZinNEPoolLayer *, uint64_t *, std::string *))(*(_QWORD *)this
                                                                                                  + 176))(this, &v61, &v63);
      v22 = v62;
      if (v62)
      {
        v23 = (unint64_t *)&v62->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        goto LABEL_49;
      }
    }
    else
    {
      v25 = *((_QWORD *)this + 2);
      v26 = *(_DWORD *)(v7 + 88);
      ZinObjectNameFactory::CreateName((uint64_t)v67, 0, &__p);
      v58 = 0;
      v59 = 0;
      v57 = 0;
      LODWORD(v52) = 0;
      v54 = 0;
      v55 = 0;
      v53 = 0;
      v56 = 0;
      ZinIrTensor::CreateTensor(v25, v26, &v64, (__int128 *)&__p, &v59, &v57, (unsigned int *)&v52, (uint64_t *)&v69);
      v27 = v58;
      if (v58)
      {
        v28 = (unint64_t *)&v58->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = v59;
      v59 = 0;
      if (v30)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v59, v30);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v31 = (ZinIrOpLayer *)operator new();
      v21 = v31;
      v32 = (std::__shared_weak_count *)v70;
      v51[0] = (uint64_t)v69;
      v51[1] = v70;
      if (v70)
      {
        v33 = (unint64_t *)(v70 + 8);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      ZinNEPoolLayer::ZinNEPoolLayer(v31, v51, (__int128 *)&v63, 0, *((_QWORD *)this + 54), 0, 0, 0, 0);
      if (v32)
      {
        v35 = (unint64_t *)&v32->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v22 = (std::__shared_weak_count *)v70;
      if (v70)
      {
        v37 = (unint64_t *)(v70 + 8);
        do
          v24 = __ldaxr(v37);
        while (__stlxr(v24 - 1, v37));
LABEL_49:
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    v69 = this;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
    __p.__r_.__value_.__l.__size_ = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v52, &__p);
    ZinIrOpLayerGraph::AddNode(a2, v21, &v52);
    v52 = (ZinIrOpLayer **)&unk_24C02BB18;
    if (v53)
    {
      v54 = v53;
      operator delete(v53);
    }
    ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v12, (uint64_t)v21, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v8 = *((_QWORD *)&v64 + 1);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    v12 = (uint64_t)v21;
  }
  while (v8 > 1);
  if (v21 == v6)
    goto LABEL_60;
  memset(v49, 0, sizeof(v49));
  v50 = 1065353216;
  v38 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)this, v21, v49);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v49);
  if ((v38 & 1) != 0)
  {
    ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, this, 0);
    v39 = 0;
  }
  else
  {
    v41 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v41)
      std::__function::__func<ZinMirLayerFusion::Commit(void)::$_0,std::allocator<ZinMirLayerFusion::Commit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v41, v42, v43, v44, v45, v46, v47, v48);
    v39 = 3;
  }
LABEL_61:
  v67[0] = off_24C01FBB0;
  if (v68 < 0)
    operator delete((void *)v67[1]);
  return v39;
}

void sub_206E10BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  *(_QWORD *)(v40 - 152) = off_24C01FBB0;
  if (*(char *)(v40 - 121) < 0)
    operator delete(*(void **)(v40 - 144));
  _Unwind_Resume(exception_object);
}

uint64_t ZinNEPoolLayer::LowerEngine(char *a1, uint64_t **a2, ZinANELayer ***a3)
{
  _QWORD *v6;
  NSObject *v7;
  const char *v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (ZinNEPoolLayer::UpdatePoolInfo((ZinNEPoolLayer *)a1, **a3))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      v6 = a1 + 24;
      if (a1[47] < 0)
        v6 = (_QWORD *)*v6;
      v11 = 136315138;
      v12 = v6;
      v7 = MEMORY[0x24BDACB70];
      v8 = "Error: Failed to update convolution info: \"%s\"";
LABEL_11:
      _os_log_impl(&dword_2069AB000, v7, OS_LOG_TYPE_INFO, v8, (uint8_t *)&v11, 0xCu);
    }
  }
  else
  {
    result = ZinANELayer::LowerEngine((uint64_t)a1, a2, a3);
    if (!(_DWORD)result)
      return result;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      v10 = a1 + 24;
      if (a1[47] < 0)
        v10 = (_QWORD *)*v10;
      v11 = 136315138;
      v12 = v10;
      v7 = MEMORY[0x24BDACB70];
      v8 = "Error: Failed to lower the texture layer in engine layer: \"%s\"";
      goto LABEL_11;
    }
  }
  return 3;
}

uint64_t ZinNEPoolLayer::UpdatePoolInfo(ZinNEPoolLayer *this, const ZinIrHalParameters *a2)
{
  uint64_t v4;
  unsigned int v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  size_t v20;
  std::string *v21;
  char *v22;
  std::string *v23;
  __int128 v24;
  std::string *p_p;
  std::string::size_type size;
  std::string *v27;
  __int128 v28;
  __n128 v29;
  uint64_t v30;
  _DWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int32x4_t v35;
  uint64_t v36;
  std::string *v37;
  __int128 v38;
  uint64_t v39;
  ZinIrKernel *v40;
  uint64_t v41;
  uint64_t v42;
  int32x4_t v43;
  int32x2_t v44;
  uint64_t v45;
  std::string v47;
  std::string __p;
  std::string v49;
  _QWORD v50[3];
  char v51;
  __int128 v52;
  _BYTE v53[32];
  int32x4_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  unint64_t v60;
  _BYTE v61[32];
  __int128 v62;
  int32x4_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 54))
    return 0;
  v4 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0);
  v5 = *(_DWORD *)(v4 + 88);
  v60 = *(_QWORD *)(v4 + 80);
  v6 = *(_OWORD *)(v4 + 64);
  v58 = *(_OWORD *)(v4 + 48);
  v59 = v6;
  v7 = (*(uint64_t (**)(ZinNEPoolLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  v8 = *((_QWORD *)this + 54);
  v9 = *((_QWORD *)this + 25);
  if (v9)
  {
    v10 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0, 0);
    v11 = *(_OWORD *)(v10 + 64);
    v58 = *(_OWORD *)(v10 + 48);
    v59 = v11;
    v60 = *(_QWORD *)(v10 + 80);
    v5 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 25) + 32))(*((_QWORD *)this + 25), 0, 0)+ 88);
  }
  v12 = *(_QWORD *)(*((_QWORD *)this + 54) + 64);
  v13 = *(_OWORD *)(v12 + 80);
  v14 = *(_OWORD *)(v12 + 96);
  v15 = *(_OWORD *)(v12 + 112);
  v54 = *(int32x4_t *)(v12 + 64);
  v55 = v13;
  v56 = v14;
  v57 = v15;
  v16 = *(_OWORD *)(v12 + 32);
  v52 = *(_OWORD *)(v12 + 16);
  v17 = *(_OWORD *)(v12 + 48);
  *(_OWORD *)v53 = v16;
  *(_OWORD *)&v53[16] = v17;
  v18 = *(_DWORD *)(v12 + 104) == 2 ? 2 : 3;
  ZinKernelComputeStrideExpansion(a2, (int *)(v12 + 40), (unint64_t *)(v12 + 16), v5, v18, (int *)v61);
  *(_QWORD *)&v53[8] = *(_QWORD *)v61;
  *(_QWORD *)&v53[20] = *(_QWORD *)&v61[12];
  *(_DWORD *)&v53[16] = *(_DWORD *)&v61[8];
  *(_DWORD *)&v53[28] = *(_DWORD *)&v61[20];
  if (*(_DWORD *)v61 == *(_DWORD *)(v12 + 40)
    && *(_QWORD *)&v53[12] == *(_QWORD *)(v12 + 44)
    && *(_DWORD *)&v53[20] == *(_DWORD *)(v12 + 52)
    && *(_DWORD *)&v53[24] == *(_DWORD *)(v12 + 56)
    && *(_DWORD *)&v53[28] == *(_DWORD *)(v12 + 60))
  {
    return 0;
  }
  if (IsFullyConnected(*((uint64_t *)&v59 + 1), *(_QWORD *)(v12 + 16), *(int *)(v12 + 64), *(int *)(v12 + 68)))
    *(_DWORD *)&v53[20] = 1;
  if (IsFullyConnected(v59, *(_QWORD *)(v12 + 24), *(int *)(v12 + 72), *(int *)(v12 + 76)))
    *(_DWORD *)&v53[24] = 1;
  if (IsFullyConnected(v60, *(_QWORD *)(v12 + 32), *(int *)(v12 + 80), *(int *)(v12 + 84)))
    *(_DWORD *)&v53[28] = 1;
  if (*((char *)this + 47) >= 0)
    v20 = *((unsigned __int8 *)this + 47);
  else
    v20 = *((_QWORD *)this + 4);
  v21 = &v49;
  std::string::basic_string[abi:ne180100]((uint64_t)&v49, v20 + 1);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v21 = (std::string *)v49.__r_.__value_.__r.__words[0];
  if (v20)
  {
    if (*((char *)this + 47) >= 0)
      v22 = (char *)this + 24;
    else
      v22 = (char *)*((_QWORD *)this + 3);
    memmove(v21, v22, v20);
  }
  *(_WORD *)((char *)&v21->__r_.__value_.__l.__data_ + v20) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v47, "pool_s_2");
  v23 = std::string::append(&v47, "_xfm", 4uLL);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v27 = std::string::append(&v49, (const std::string::value_type *)p_p, size);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  *(_QWORD *)&v61[16] = *((_QWORD *)&v27->__r_.__value_.__l + 2);
  *(_OWORD *)v61 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = ZinObjectNameFactory::ZinObjectNameFactory(v50, v61);
  if ((v61[23] & 0x80000000) != 0)
    operator delete(*(void **)v61);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  v30 = *((_QWORD *)this + 2);
  (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, _QWORD, __n128))(***((_QWORD ***)this + 11) + 80))(v61, **((_QWORD **)this + 11), 0, 0, v29);
  v31 = operator new(0x78uLL);
  v49.__r_.__value_.__l.__size_ = (std::string::size_type)(v31 + 30);
  v49.__r_.__value_.__r.__words[2] = (std::string::size_type)(v31 + 30);
  v31[28] = v67;
  v32 = v66;
  v33 = v64;
  *((_OWORD *)v31 + 5) = v65;
  *((_OWORD *)v31 + 6) = v32;
  v34 = *(_OWORD *)&v61[16];
  *(_OWORD *)v31 = *(_OWORD *)v61;
  *((_OWORD *)v31 + 1) = v34;
  v35 = v63;
  *((_OWORD *)v31 + 2) = v62;
  *((int32x4_t *)v31 + 3) = v35;
  *((_OWORD *)v31 + 4) = v33;
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  v36 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 54) + 32))(*((_QWORD *)this + 54), 0, 0);
  *((_QWORD *)this + 54) = ZinBuilder::CreatePool(v30, (uint64_t)v50, (uint64_t *)&v49, (uint64_t)&v52, *(_DWORD *)(v36 + 88));
  if (v49.__r_.__value_.__r.__words[0])
  {
    v49.__r_.__value_.__l.__size_ = v49.__r_.__value_.__r.__words[0];
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (*(_QWORD *)(v8 + 136))
  {
    v62 = *(_OWORD *)&v53[16];
    v63 = v54;
    LOWORD(v66) = 0;
    DWORD1(v66) = 0;
    v64 = v55;
    *(_QWORD *)&v65 = v56;
    *((_QWORD *)&v65 + 1) = 1;
    *(_OWORD *)v61 = v52;
    *(_OWORD *)&v61[16] = *(_OWORD *)v53;
    std::operator+<char>();
    v37 = std::string::append(&__p, "_", 1uLL);
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v39 = *(_QWORD *)(v8 + 136);
    v40 = (ZinIrKernel *)operator new();
    ZinIrKernel::ZinIrKernel(v40, &v49, v61, v39);
    std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)(*((_QWORD *)this + 54) + 136), v40);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
  }
  v41 = *((_QWORD *)this + 25);
  if (v41)
  {
    v42 = *(_QWORD *)(v41 + 64);
    v43 = 0uLL;
    v44 = 0;
    if (*(_DWORD *)(v42 + 8) == 58)
    {
      v43 = *(int32x4_t *)(v42 + 172);
      v44 = *(int32x2_t *)(v42 + 188);
    }
  }
  else
  {
    v43 = 0uLL;
    v44 = 0;
  }
  *(int32x4_t *)&v49.__r_.__value_.__l.__data_ = vaddq_s32(v54, v43);
  v49.__r_.__value_.__r.__words[2] = (std::string::size_type)vadd_s32(*(int32x2_t *)&v55, v44);
  __p.__r_.__value_.__r.__words[0] = 0x100000001;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 1;
  v45 = *(_QWORD *)(v7 + 56);
  v47.__r_.__value_.__r.__words[0] = 0x100000001;
  LODWORD(v47.__r_.__value_.__r.__words[1]) = 1;
  ZinGetOutputTensorDimension((uint64_t)&v58, &v52, (unsigned int *)(v12 + 40), (unsigned int *)&__p, (int *)&v49, v45, (int *)&v47, (uint64_t)v61);
  if (ZinTensorPosition::operator==(v61, (_QWORD *)(v7 + 48)))
    v19 = 0;
  else
    v19 = 3;
  v50[0] = off_24C01FBB0;
  if (v51 < 0)
    operator delete((void *)v50[1]);
  return v19;
}

void sub_206E113D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  MEMORY[0x20BD002F8](v35, 0x1032C40DEE44497);
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(a1);
}

__n128 ZinNEPoolLayer::ExecutionOrderSort@<Q0>(__n128 *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  __n128 v7;
  __n128 result;

  v4 = this[12].n128_u64[1];
  v5 = this[27].n128_u64[0];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v6 = (char *)operator new(0x40uLL);
  a2[1] = v6 + 64;
  a2[2] = v6 + 64;
  *(_QWORD *)v6 = v4;
  v7 = this[24];
  *(__n128 *)(v6 + 8) = this[23];
  *((_QWORD *)v6 + 3) = v5;
  result = this[25];
  *((__n128 *)v6 + 2) = v7;
  *((__n128 *)v6 + 3) = result;
  *a2 = v6;
  return result;
}

uint64_t ZinNEPoolLayer::Clone(_QWORD *a1, uint64_t *a2, const void **a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  __int128 *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  __int128 *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  std::string *v19;
  const void *v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  __int128 *v30;
  const void *v31;
  uint64_t v32;
  size_t v33;
  __int128 *v34;
  const void *v35;
  uint64_t v36;
  size_t v37;
  std::string *v38;
  const void *v39;
  std::string *v40;
  __int128 v41;
  void **v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  size_t v48;
  __int128 *v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  __int128 *v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  size_t v64;
  __int128 *v65;
  const void *v66;
  unint64_t *v67;
  unint64_t v68;
  ZinEngineLayerMirInfo *v69;
  uint64_t *GroupId;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77[2];
  std::string v78;
  void *__p[2];
  int64_t v80;
  std::string v81;
  __int128 v82;
  int64_t v83;

  v6 = *(_QWORD *)(*a2 + 16);
  v7 = a1[25];
  if (*((char *)a3 + 23) >= 0)
    v8 = *((unsigned __int8 *)a3 + 23);
  else
    v8 = (size_t)a3[1];
  v9 = &v82;
  std::string::basic_string[abi:ne180100]((uint64_t)&v82, v8 + 8);
  if (v83 < 0)
    v9 = (__int128 *)v82;
  if (v8)
  {
    if (*((char *)a3 + 23) >= 0)
      v10 = a3;
    else
      v10 = *a3;
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, "_texture");
  v11 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v7, (const void **)&v82);
  if (SHIBYTE(v83) < 0)
    operator delete((void *)v82);
  v12 = a1[47];
  if (*((char *)a3 + 23) >= 0)
    v13 = *((unsigned __int8 *)a3 + 23);
  else
    v13 = (size_t)a3[1];
  v14 = &v82;
  std::string::basic_string[abi:ne180100]((uint64_t)&v82, v13 + 6);
  if (v83 < 0)
    v14 = (__int128 *)v82;
  if (v13)
  {
    if (*((char *)a3 + 23) >= 0)
      v15 = a3;
    else
      v15 = *a3;
    memmove(v14, v15, v13);
  }
  strcpy((char *)v14 + v13, "_irelu");
  v16 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v12, (const void **)&v82);
  if (SHIBYTE(v83) < 0)
    operator delete((void *)v82);
  v17 = a1[54];
  if (*((char *)a3 + 23) >= 0)
    v18 = *((unsigned __int8 *)a3 + 23);
  else
    v18 = (size_t)a3[1];
  v19 = &v81;
  std::string::basic_string[abi:ne180100]((uint64_t)&v81, v18 + 1);
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v19 = (std::string *)v81.__r_.__value_.__r.__words[0];
  if (v18)
  {
    if (*((char *)a3 + 23) >= 0)
      v20 = a3;
    else
      v20 = *a3;
    memmove(v19, v20, v18);
  }
  *(_WORD *)((char *)&v19->__r_.__value_.__l.__data_ + v18) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v78, "clone_pool");
  v21 = std::string::append(&v78, "_xfm", 4uLL);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v80 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (v80 >= 0)
    v23 = __p;
  else
    v23 = (void **)__p[0];
  if (v80 >= 0)
    v24 = HIBYTE(v80);
  else
    v24 = (std::string::size_type)__p[1];
  v25 = std::string::append(&v81, (const std::string::value_type *)v23, v24);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v83 = v25->__r_.__value_.__r.__words[2];
  v82 = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v17, (const void **)&v82);
  if (SHIBYTE(v83) < 0)
    operator delete((void *)v82);
  if (SHIBYTE(v80) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  v28 = a1[48];
  if (*((char *)a3 + 23) >= 0)
    v29 = *((unsigned __int8 *)a3 + 23);
  else
    v29 = (size_t)a3[1];
  v30 = &v82;
  std::string::basic_string[abi:ne180100]((uint64_t)&v82, v29 + 4);
  if (v83 < 0)
    v30 = (__int128 *)v82;
  if (v29)
  {
    if (*((char *)a3 + 23) >= 0)
      v31 = a3;
    else
      v31 = *a3;
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "_goc");
  v76 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v28, (const void **)&v82);
  if (SHIBYTE(v83) < 0)
    operator delete((void *)v82);
  v32 = a1[49];
  if (*((char *)a3 + 23) >= 0)
    v33 = *((unsigned __int8 *)a3 + 23);
  else
    v33 = (size_t)a3[1];
  v34 = &v82;
  std::string::basic_string[abi:ne180100]((uint64_t)&v82, v33 + 11);
  if (v83 < 0)
    v34 = (__int128 *)v82;
  if (v33)
  {
    if (*((char *)a3 + 23) >= 0)
      v35 = a3;
    else
      v35 = *a3;
    memmove(v34, v35, v33);
  }
  strcpy((char *)v34 + v33, "_activation");
  v75 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v32, (const void **)&v82);
  if (SHIBYTE(v83) < 0)
    operator delete((void *)v82);
  v36 = (*(uint64_t (**)(_QWORD *))(*a1 + 416))(a1);
  if (*((char *)a3 + 23) >= 0)
    v37 = *((unsigned __int8 *)a3 + 23);
  else
    v37 = (size_t)a3[1];
  v38 = &v81;
  std::string::basic_string[abi:ne180100]((uint64_t)&v81, v37 + 1);
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v38 = (std::string *)v81.__r_.__value_.__r.__words[0];
  if (v37)
  {
    if (*((char *)a3 + 23) >= 0)
      v39 = a3;
    else
      v39 = *a3;
    memmove(v38, v39, v37);
  }
  *(_WORD *)((char *)&v38->__r_.__value_.__l.__data_ + v37) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v78, "nepl_clne_transp");
  v40 = std::string::append(&v78, "_xfm", 4uLL);
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v80 = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (v80 >= 0)
    v42 = __p;
  else
    v42 = (void **)__p[0];
  if (v80 >= 0)
    v43 = HIBYTE(v80);
  else
    v43 = (std::string::size_type)__p[1];
  v44 = std::string::append(&v81, (const std::string::value_type *)v42, v43);
  v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v83 = v44->__r_.__value_.__r.__words[2];
  v82 = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  v46 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v36, (const void **)&v82);
  if (SHIBYTE(v83) < 0)
    operator delete((void *)v82);
  if (SHIBYTE(v80) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  v73 = v46;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  v74 = v27;
  v47 = a1[51];
  if (*((char *)a3 + 23) >= 0)
    v48 = *((unsigned __int8 *)a3 + 23);
  else
    v48 = (size_t)a3[1];
  v49 = &v82;
  std::string::basic_string[abi:ne180100]((uint64_t)&v82, v48 + 6);
  if (v83 < 0)
    v49 = (__int128 *)v82;
  if (v48)
  {
    if (*((char *)a3 + 23) >= 0)
      v50 = a3;
    else
      v50 = *a3;
    memmove(v49, v50, v48);
  }
  v51 = v16;
  strcpy((char *)v49 + v48, "_quant");
  v52 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v47, (const void **)&v82);
  v53 = v11;
  if (SHIBYTE(v83) < 0)
    operator delete((void *)v82);
  v54 = a1[46];
  if (*((char *)a3 + 23) >= 0)
    v55 = *((unsigned __int8 *)a3 + 23);
  else
    v55 = (size_t)a3[1];
  v56 = &v82;
  std::string::basic_string[abi:ne180100]((uint64_t)&v82, v55 + 10);
  if (v83 < 0)
    v56 = (__int128 *)v82;
  if (v55)
  {
    if (*((char *)a3 + 23) >= 0)
      v57 = a3;
    else
      v57 = *a3;
    memmove(v56, v57, v55);
  }
  strcpy((char *)v56 + v55, "_broadcast");
  v58 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v54, (const void **)&v82);
  if (SHIBYTE(v83) < 0)
    operator delete((void *)v82);
  v59 = operator new();
  v60 = *a2;
  v61 = (std::__shared_weak_count *)a2[1];
  v77[0] = v60;
  v77[1] = (uint64_t)v61;
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldxr(p_shared_owners);
    while (__stxr(v63 + 1, p_shared_owners));
  }
  if (*((char *)a3 + 23) >= 0)
    v64 = *((unsigned __int8 *)a3 + 23);
  else
    v64 = (size_t)a3[1];
  v65 = &v82;
  std::string::basic_string[abi:ne180100]((uint64_t)&v82, v64 + 7);
  if (v83 < 0)
    v65 = (__int128 *)v82;
  if (v64)
  {
    if (*((char *)a3 + 23) >= 0)
      v66 = a3;
    else
      v66 = *a3;
    memmove(v65, v66, v64);
  }
  strcpy((char *)v65 + v64, "_nepool");
  ZinNEPoolLayer::ZinNEPoolLayer((_QWORD *)v59, v77, &v82, v53, v58, v51, v74, v76, v75, v73, v52);
  if (SHIBYTE(v83) < 0)
    operator delete((void *)v82);
  if (v61)
  {
    v67 = (unint64_t *)&v61->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (a1[33])
  {
    ZinANELayer::CopyMirInfo((ZinANELayer *)a1, (ZinEngineLayerMirInfo **)&v82);
    ZinANELayer::SetMirInfo(v59, (int **)&v82);
    v69 = (ZinEngineLayerMirInfo *)v82;
    *(_QWORD *)&v82 = 0;
    if (v69)
    {
      ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v69);
      MEMORY[0x20BD002F8]();
    }
  }
  ZinANELayer::CopyDMALayers((_QWORD *)v59, (const ZinANELayer *)a1);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId((ZinIrOpLayer *)a1);
  ZinIrOpLayer::SetGroupId(v59, *GroupId);
  v71 = *(_QWORD *)((char *)a1 + 420);
  if ((v71 & 0xFF00000000) != 0)
  {
    *(_DWORD *)(v59 + 420) = v71;
    *(_BYTE *)(v59 + 424) = 1;
  }
  return v59;
}

void sub_206E11D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  std::unique_ptr<ZinEngineLayerMirInfo>::reset[abi:ne180100]((ZinEngineLayerMirInfo **)(v35 - 112), 0);
  _Unwind_Resume(a1);
}

uint64_t ZinNEPoolLayer::SpatialSplitCopy(ZinNEPoolLayer *this, const TiledLayerTensorRegions *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string::size_type size;
  __int128 *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t Broadcast;
  size_t v11;
  std::string *v12;
  const void *v13;
  std::string *p_p;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  __n128 v18;
  uint64_t v19;
  _DWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t *GroupId;
  uint64_t v27;
  ZinIrOpLayerOpCode *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  std::string::size_type v39;
  std::string *v40;
  std::string *v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string::size_type v46;
  std::string *v47;
  std::string *v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  std::string::size_type v62;
  std::string *v63;
  std::string *v64;
  uint64_t v65;
  std::string::size_type v66;
  std::string *v67;
  std::string *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::string::size_type v73;
  std::string *v74;
  std::string *v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  std::string::size_type v79;
  std::string *v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::string *v85;
  std::string *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  ZinEngineLayerMirInfo *v95;
  uint64_t v96;
  uint64_t v97;
  ZinIrOpLayerOpCode *v98;
  ZinIrKernel *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  std::string v107;
  std::string v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  _QWORD *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  ZinIrOpLayerOpCode *v114;
  ZinIrKernel *v115;
  std::string __p;
  std::string v117;
  __int128 v118;
  int64_t v119;
  char v120;
  std::string v121;
  uint64_t v122;
  int v123;
  char v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  std::string v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  _BYTE v132[32];
  __int128 v133;
  __int128 v134;
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  ZinIrOpLayer::CreateSpatialSplitCopyName(this, a2, &v127);
  ZinIrOpLayer::CreateSpatialSplitCopyTensor(this, a2, &v125);
  v4 = *(_QWORD *)(v125 + 16);
  v5 = *((_QWORD *)this + 47);
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  else
    size = v127.__r_.__value_.__l.__size_;
  v7 = &v128;
  std::string::basic_string[abi:ne180100]((uint64_t)&v128, size + 6);
  if (SBYTE7(v129) < 0)
    v7 = (__int128 *)v128;
  if (size)
  {
    if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v127;
    else
      v8 = (std::string *)v127.__r_.__value_.__r.__words[0];
    memmove(v7, v8, size);
  }
  strcpy((char *)v7 + size, "_irelu");
  v9 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v4, v5, (const void **)&v128);
  if (SBYTE7(v129) < 0)
    operator delete((void *)v128);
  Broadcast = *((_QWORD *)this + 46);
  if (Broadcast)
  {
    ZinBroadcastLayerUtils::GetBroadcastDimensionMap(*(_QWORD *)(Broadcast + 64) + 16, (uint64_t *)a2 + 5, &v121);
    if (v124)
    {
      if (*(char *)(Broadcast + 47) >= 0)
        v11 = *(unsigned __int8 *)(Broadcast + 47);
      else
        v11 = *(_QWORD *)(Broadcast + 32);
      v12 = &v117;
      std::string::basic_string[abi:ne180100]((uint64_t)&v117, v11 + 1);
      if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = (std::string *)v117.__r_.__value_.__r.__words[0];
      if (v11)
      {
        if (*(char *)(Broadcast + 47) >= 0)
          v13 = (const void *)(Broadcast + 24);
        else
          v13 = *(const void **)(Broadcast + 24);
        memmove(v12, v13, v11);
      }
      *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 95;
      TiledLayerTensorRegions::Id::ToStringForIr((const TiledLayerTensorRegions *)((char *)a2 + 152), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v15 = __p.__r_.__value_.__l.__size_;
      v16 = std::string::append(&v117, (const std::string::value_type *)p_p, v15);
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      *(_QWORD *)&v129 = *((_QWORD *)&v16->__r_.__value_.__l + 2);
      v128 = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      v18 = ZinObjectNameFactory::ZinObjectNameFactory(&v118, &v128);
      if (SBYTE7(v129) < 0)
        operator delete((void *)v128);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v117.__r_.__value_.__l.__data_);
      v19 = *(_QWORD *)(Broadcast + 16);
      (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, _QWORD, __n128))(*(_QWORD *)Broadcast + 80))(&v128, Broadcast, 0, 0, v18);
      v20 = operator new(0x78uLL);
      v117.__r_.__value_.__l.__size_ = (std::string::size_type)(v20 + 30);
      v117.__r_.__value_.__r.__words[2] = (std::string::size_type)(v20 + 30);
      v20[28] = v134;
      v21 = v133;
      v22 = *(_OWORD *)v132;
      *((_OWORD *)v20 + 5) = *(_OWORD *)&v132[16];
      *((_OWORD *)v20 + 6) = v21;
      v23 = v129;
      *(_OWORD *)v20 = v128;
      *((_OWORD *)v20 + 1) = v23;
      v24 = v131;
      *((_OWORD *)v20 + 2) = v130;
      *((_OWORD *)v20 + 3) = v24;
      *((_OWORD *)v20 + 4) = v22;
      v117.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
      v25 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)Broadcast + 32))(Broadcast, 0, 0);
      Broadcast = ZinBuilder::CreateBroadcast(v19, (uint64_t)&v118, (uint64_t *)&v117, (uint64_t)&v121, *(_DWORD *)(v25 + 88));
      if (v117.__r_.__value_.__r.__words[0])
      {
        v117.__r_.__value_.__l.__size_ = v117.__r_.__value_.__r.__words[0];
        operator delete(v117.__r_.__value_.__l.__data_);
      }
      GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(*((ZinIrOpLayer **)this + 46));
      ZinIrOpLayer::SetGroupId(Broadcast, *GroupId);
      *(_QWORD *)&v118 = off_24C01FBB0;
      if (v120 < 0)
        operator delete(*((void **)&v118 + 1));
      if (v124)
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v121);
    }
  }
  ZinIrPoolingInfo::ZinIrPoolingInfo((uint64_t)&v128, (__int128 *)(*(_QWORD *)(*((_QWORD *)this + 54) + 64) + 16));
  v27 = *((_QWORD *)a2 + 13);
  *(_DWORD *)&v132[8] = *(_QWORD *)(v27 + 40);
  *(int32x2_t *)v132 = vmovn_s64(*(int64x2_t *)(v27 + 56));
  *(_QWORD *)&v132[12] = 0;
  ZinANELayer::CreateSpatialSplitCopyKernel((uint64_t)this, (uint64_t *)(*((_QWORD *)this + 54) + 136), a2, &v115);
  v28 = (ZinIrOpLayerOpCode *)operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v28, (const ZinIrOpLayerOpCode *)&v128);
  *(_QWORD *)v28 = &unk_24C01BAE8;
  v29 = v133;
  *((_OWORD *)v28 + 5) = *(_OWORD *)&v132[16];
  *((_OWORD *)v28 + 6) = v29;
  *((_OWORD *)v28 + 7) = v134;
  v30 = v130;
  *((_OWORD *)v28 + 1) = v129;
  *((_OWORD *)v28 + 2) = v30;
  v31 = *(_OWORD *)v132;
  *((_OWORD *)v28 + 3) = v131;
  *((_OWORD *)v28 + 4) = v31;
  v114 = v28;
  std::string::basic_string[abi:ne180100]<0>(&v121, "ss_ne_pool");
  v32 = std::string::append(&v121, "_xfm", 4uLL);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v119 = v32->__r_.__value_.__r.__words[2];
  v118 = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v121.__r_.__value_.__l.__data_);
  v34 = operator new();
  v35 = (_QWORD *)*((_QWORD *)this + 54);
  v36 = v35[2];
  v37 = *(_DWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v35 + 32))(v35, 0, 0) + 88);
  v38 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 54) + 32))(*((_QWORD *)this + 54), 0, 0);
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  else
    v39 = v127.__r_.__value_.__l.__size_;
  v40 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v39 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v39)
  {
    if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = &v127;
    else
      v41 = (std::string *)v127.__r_.__value_.__r.__words[0];
    memmove(v40, v41, v39);
  }
  *(_WORD *)((char *)&v40->__r_.__value_.__l.__data_ + v39) = 95;
  if (v119 >= 0)
    v42 = (const std::string::value_type *)&v118;
  else
    v42 = (const std::string::value_type *)v118;
  if (v119 >= 0)
    v43 = HIBYTE(v119);
  else
    v43 = *((_QWORD *)&v118 + 1);
  v44 = std::string::append(&__p, v42, v43);
  v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v117.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  v110 = 0;
  v111 = 0;
  v109 = 0;
  LODWORD(v121.__r_.__value_.__l.__data_) = 0;
  v122 = 0;
  *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
  v123 = 0;
  ZinIrTensor::CreateTensor(v36, v37, (__int128 *)(v38 + 48), (__int128 *)&v117, &v111, &v109, (unsigned int *)&v121, &v112);
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  else
    v46 = v127.__r_.__value_.__l.__size_;
  v47 = &v107;
  std::string::basic_string[abi:ne180100]((uint64_t)&v107, v46 + 1);
  if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v47 = (std::string *)v107.__r_.__value_.__r.__words[0];
  if (v46)
  {
    if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &v127;
    else
      v48 = (std::string *)v127.__r_.__value_.__r.__words[0];
    memmove(v47, v48, v46);
  }
  *(_WORD *)((char *)&v47->__r_.__value_.__l.__data_ + v46) = 95;
  if (v119 >= 0)
    v49 = (const std::string::value_type *)&v118;
  else
    v49 = (const std::string::value_type *)v118;
  if (v119 >= 0)
    v50 = HIBYTE(v119);
  else
    v50 = *((_QWORD *)&v118 + 1);
  v51 = std::string::append(&v107, v49, v50);
  v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  v108.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v52;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  ZinPoolLayer::ZinPoolLayer(v34, &v114, &v112, &v108, &v115);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v107.__r_.__value_.__l.__data_);
  v53 = v113;
  if (v113)
  {
    p_shared_owners = (unint64_t *)&v113->__shared_owners_;
    do
      v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v110;
  if (v110)
  {
    v57 = (unint64_t *)&v110->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = v111;
  v111 = 0;
  if (v59)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v111, v59);
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v117.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v60 = *(_QWORD *)(v125 + 16);
  v61 = *((_QWORD *)this + 48);
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v62 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  else
    v62 = v127.__r_.__value_.__l.__size_;
  v63 = &v121;
  std::string::basic_string[abi:ne180100]((uint64_t)&v121, v62 + 4);
  if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v63 = (std::string *)v121.__r_.__value_.__r.__words[0];
  if (v62)
  {
    if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = &v127;
    else
      v64 = (std::string *)v127.__r_.__value_.__r.__words[0];
    memmove(v63, v64, v62);
  }
  strcpy((char *)v63 + v62, "_goc");
  v104 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v60, v61, (const void **)&v121.__r_.__value_.__l.__data_);
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v121.__r_.__value_.__l.__data_);
  v65 = *((_QWORD *)this + 49);
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v66 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  else
    v66 = v127.__r_.__value_.__l.__size_;
  v67 = &v121;
  std::string::basic_string[abi:ne180100]((uint64_t)&v121, v66 + 11);
  if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v67 = (std::string *)v121.__r_.__value_.__r.__words[0];
  if (v66)
  {
    if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v68 = &v127;
    else
      v68 = (std::string *)v127.__r_.__value_.__r.__words[0];
    memmove(v67, v68, v66);
  }
  strcpy((char *)v67 + v66, "_activation");
  v69 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v60, v65, (const void **)&v121.__r_.__value_.__l.__data_);
  v70 = v34;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v121.__r_.__value_.__l.__data_);
  v71 = v9;
  v72 = (*(uint64_t (**)(ZinNEPoolLayer *))(*(_QWORD *)this + 416))(this);
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v73 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  else
    v73 = v127.__r_.__value_.__l.__size_;
  v74 = &v117;
  std::string::basic_string[abi:ne180100]((uint64_t)&v117, v73 + 1);
  if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v74 = (std::string *)v117.__r_.__value_.__r.__words[0];
  if (v73)
  {
    if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v75 = &v127;
    else
      v75 = (std::string *)v127.__r_.__value_.__r.__words[0];
    memmove(v74, v75, v73);
  }
  *(_WORD *)((char *)&v74->__r_.__value_.__l.__data_ + v73) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v108, "nepl_spatspl_transp");
  v76 = std::string::append(&v108, "_xfm", 4uLL);
  v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v78 = &__p;
  else
    v78 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v79 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v79 = __p.__r_.__value_.__l.__size_;
  v80 = std::string::append(&v117, (const std::string::value_type *)v78, v79);
  v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  v121.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0;
  v80->__r_.__value_.__r.__words[2] = 0;
  v80->__r_.__value_.__r.__words[0] = 0;
  v82 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v60, v72, (const void **)&v121.__r_.__value_.__l.__data_);
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v121.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v117.__r_.__value_.__l.__data_);
  v83 = *((_QWORD *)this + 51);
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v84 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  else
    v84 = v127.__r_.__value_.__l.__size_;
  v85 = &v121;
  std::string::basic_string[abi:ne180100]((uint64_t)&v121, v84 + 6);
  if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v85 = (std::string *)v121.__r_.__value_.__r.__words[0];
  if (v84)
  {
    if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v86 = &v127;
    else
      v86 = (std::string *)v127.__r_.__value_.__r.__words[0];
    memmove(v85, v86, v84);
  }
  strcpy((char *)v85 + v84, "_quant");
  v87 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v60, v83, (const void **)&v121.__r_.__value_.__l.__data_);
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v121.__r_.__value_.__l.__data_);
  v88 = (_QWORD *)operator new();
  v89 = (uint64_t)v88;
  v105 = v125;
  v106 = v126;
  if (v126)
  {
    v90 = (unint64_t *)&v126->__shared_owners_;
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  ZinNEPoolLayer::ZinNEPoolLayer(v88, &v105, (__int128 *)&v127, 0, Broadcast, v71, v70, v104, v69, v82, v87);
  v92 = v106;
  if (v106)
  {
    v93 = (unint64_t *)&v106->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  if (*((_QWORD *)this + 33))
  {
    ZinANELayer::CopyMirInfo(this, (ZinEngineLayerMirInfo **)&v121);
    ZinANELayer::SetMirInfo(v89, (int **)&v121);
    v95 = (ZinEngineLayerMirInfo *)v121.__r_.__value_.__r.__words[0];
    v121.__r_.__value_.__r.__words[0] = 0;
    if (v95)
    {
      ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v95);
      MEMORY[0x20BD002F8]();
    }
    v96 = *(_QWORD *)(v89 + 264);
    if (v96 && !*(_BYTE *)(v96 + 233))
    {
      *(_QWORD *)(v96 + 200) = 1;
      *(_QWORD *)(v96 + 208) = 0;
      *(_QWORD *)(v96 + 216) = 0;
      *(_QWORD *)(v96 + 224) = 0;
      *(_WORD *)(v96 + 232) = 0;
    }
  }
  v97 = *(_QWORD *)((char *)this + 420);
  if ((v97 & 0xFF00000000) != 0)
  {
    *(_DWORD *)(v89 + 420) = v97;
    *(_BYTE *)(v89 + 424) = 1;
  }
  if (SHIBYTE(v119) < 0)
    operator delete((void *)v118);
  v98 = v114;
  v114 = 0;
  if (v98)
    (*(void (**)(ZinIrOpLayerOpCode *))(*(_QWORD *)v98 + 8))(v98);
  v99 = v115;
  v115 = 0;
  if (v99)
  {
    ZinIrKernel::~ZinIrKernel(v99);
    MEMORY[0x20BD002F8]();
  }
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v128);
  v100 = v126;
  if (v126)
  {
    v101 = (unint64_t *)&v126->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  return v89;
}

void sub_206E12A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,int a52,__int16 a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a43 < 0)
    operator delete(__p);
  if (a51)
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a46);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

ZinIrKernel *ZinNEPoolLayer::GetFusedKernel@<X0>(ZinIrKernel *result@<X0>, int a2@<W1>, ZinIrKernel **a3@<X8>)
{
  ZinIrKernel *v3;
  uint64_t v5;
  uint64_t *v6;
  const void **v7;
  const void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  size_t v15;
  std::string *v16;
  const void *v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  size_t v24;
  std::string *v25;
  const void *v26;
  std::string *v27;
  __int128 v28;
  void **v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  ZinIrKernel *v33;
  ZinIrKernel *v34;
  void *v35;
  size_t v36;
  std::string *v37;
  const void *v38;
  int v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  ZinIrKernel *v44;
  ZinIrKernel *v45;
  uint64_t v46;
  uint64_t v47;
  std::string v48;
  void *__p[2];
  int64_t v50;
  ZinIrKernel *v51;
  std::string v52;
  __int128 v53;
  std::string::size_type v54;

  v3 = result;
  v5 = *((_QWORD *)result + 54);
  v8 = *(const void ***)(v5 + 136);
  v6 = (uint64_t *)(v5 + 136);
  v7 = v8;
  v9 = *((_QWORD *)result + 48);
  if (!v9)
  {
    *a3 = 0;
    if (!v7)
      return result;
LABEL_30:
    if (*((char *)v7 + 23) >= 0)
      v24 = *((unsigned __int8 *)v7 + 23);
    else
      v24 = (size_t)v7[1];
    v25 = &v52;
    std::string::basic_string[abi:ne180100]((uint64_t)&v52, v24 + 1);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v25 = (std::string *)v52.__r_.__value_.__r.__words[0];
    if (v24)
    {
      if (*((char *)v7 + 23) >= 0)
        v26 = v7;
      else
        v26 = *v7;
      memmove(v25, v26, v24);
    }
    *(_WORD *)((char *)&v25->__r_.__value_.__l.__data_ + v24) = 95;
    std::string::basic_string[abi:ne180100]<0>(&v48, "nepool_kernel");
    v27 = std::string::append(&v48, "_xfm", 4uLL);
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v50 = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if (v50 >= 0)
      v29 = __p;
    else
      v29 = (void **)__p[0];
    if (v50 >= 0)
      v30 = HIBYTE(v50);
    else
      v30 = (std::string::size_type)__p[1];
    v31 = std::string::append(&v52, (const std::string::value_type *)v29, v30);
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v54 = v31->__r_.__value_.__r.__words[2];
    v53 = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::make_unique[abi:ne180100]<ZinIrKernel,std::unique_ptr<ZinIrKernel> const&,std::string>((uint64_t)v6, (uint64_t)&v53, (uint64_t *)&v51);
    goto LABEL_47;
  }
  v12 = *(_QWORD *)(v9 + 136);
  v10 = v9 + 136;
  v11 = v12;
  *a3 = 0;
  if (v7)
    v13 = a2 == 0;
  else
    v13 = 0;
  if (v13 && v11 != 0)
  {
    if (*(char *)(v11 + 23) >= 0)
      v36 = *(unsigned __int8 *)(v11 + 23);
    else
      v36 = *(_QWORD *)(v11 + 8);
    v37 = &v52;
    std::string::basic_string[abi:ne180100]((uint64_t)&v52, v36 + 7);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v37 = (std::string *)v52.__r_.__value_.__r.__words[0];
    if (v36)
    {
      if (*(char *)(v11 + 23) >= 0)
        v38 = (const void *)v11;
      else
        v38 = *(const void **)v11;
      memmove(v37, v38, v36);
    }
    strcpy((char *)v37 + v36, "_fused_");
    v39 = *(char *)(*v6 + 23);
    if (v39 >= 0)
      v40 = (const std::string::value_type *)*v6;
    else
      v40 = *(const std::string::value_type **)*v6;
    if (v39 >= 0)
      v41 = *(unsigned __int8 *)(*v6 + 23);
    else
      v41 = *(_QWORD *)(*v6 + 8);
    v42 = std::string::append(&v52, v40, v41);
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v54 = v42->__r_.__value_.__r.__words[2];
    v53 = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    ZinIrKernel::FuseScaleBiasWithBottom(v11, &v53, v6, (uint64_t *)__p);
    v44 = (ZinIrKernel *)__p[0];
    __p[0] = 0;
    std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](a3, v44);
    v45 = (ZinIrKernel *)__p[0];
    __p[0] = 0;
    if (v45)
    {
      ZinIrKernel::~ZinIrKernel(v45);
      MEMORY[0x20BD002F8]();
    }
    if ((SHIBYTE(v54) & 0x80000000) == 0)
      goto LABEL_76;
    v35 = (void *)v53;
LABEL_75:
    operator delete(v35);
LABEL_76:
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    goto LABEL_78;
  }
  if (v7)
    goto LABEL_30;
  if (v11)
  {
    if (*(char *)(v11 + 23) >= 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = *(_QWORD *)(v11 + 8);
    v16 = &v52;
    std::string::basic_string[abi:ne180100]((uint64_t)&v52, v15 + 1);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v16 = (std::string *)v52.__r_.__value_.__r.__words[0];
    if (v15)
    {
      if (*(char *)(v11 + 23) >= 0)
        v17 = (const void *)v11;
      else
        v17 = *(const void **)v11;
      memmove(v16, v17, v15);
    }
    *(_WORD *)((char *)&v16->__r_.__value_.__l.__data_ + v15) = 95;
    std::string::basic_string[abi:ne180100]<0>(&v48, "nepool_goc_kernel");
    v18 = std::string::append(&v48, "_xfm", 4uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v50 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (v50 >= 0)
      v20 = __p;
    else
      v20 = (void **)__p[0];
    if (v50 >= 0)
      v21 = HIBYTE(v50);
    else
      v21 = (std::string::size_type)__p[1];
    v22 = std::string::append(&v52, (const std::string::value_type *)v20, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v54 = v22->__r_.__value_.__r.__words[2];
    v53 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::make_unique[abi:ne180100]<ZinIrKernel,std::unique_ptr<ZinIrKernel> const&,std::string>(v10, (uint64_t)&v53, (uint64_t *)&v51);
LABEL_47:
    v33 = v51;
    v51 = 0;
    std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](a3, v33);
    v34 = v51;
    v51 = 0;
    if (v34)
    {
      ZinIrKernel::~ZinIrKernel(v34);
      MEMORY[0x20BD002F8]();
    }
    if (SHIBYTE(v54) < 0)
      operator delete((void *)v53);
    if (SHIBYTE(v50) < 0)
      operator delete(__p[0]);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_76;
    v35 = (void *)v48.__r_.__value_.__r.__words[0];
    goto LABEL_75;
  }
LABEL_78:
  result = *a3;
  if (*a3)
  {
    v46 = *((_QWORD *)v3 + 49);
    if (!v46
      || (ZinIrKernel::SetActivationParams(result, (const ZinIrActivationParams *)(v46 + 192)), (result = *a3) != 0))
    {
      v47 = *((_QWORD *)v3 + 33);
      if (v47)
        return (ZinIrKernel *)ZinIrKernel::SetSmallSourceMode((uint64_t)result, *(_DWORD *)(v47 + 144));
    }
  }
  return result;
}

void sub_206E13100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  ZinIrKernel **v29;
  uint64_t v30;

  if (*(char *)(v30 - 57) < 0)
    operator delete(*(void **)(v30 - 80));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a29 < 0)
    operator delete(a24);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](v29, 0);
  _Unwind_Resume(a1);
}

uint64_t ZinNEPoolLayer::DebugDetailPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206E13254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinNEPoolLayer::HasValidOutputTranspose(ZinNEPoolLayer *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t Hal;
  uint64_t v6;

  result = (*(uint64_t (**)(ZinNEPoolLayer *))(*(_QWORD *)this + 408))(this);
  if ((_DWORD)result)
  {
    v3 = (*(uint64_t (**)(ZinNEPoolLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0) + 48;
    v4 = *(unsigned int *)((*(uint64_t (**)(ZinNEPoolLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0)+ 88);
    Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)this + 2) + 160));
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
    return (*(uint64_t (**)(ZinNEPoolLayer *, uint64_t, uint64_t, char *, uint64_t, _QWORD))(*(_QWORD *)this
                                                                                                  + 600))(this, v3, v4, (char *)this + 264, v6, 0);
  }
  return result;
}

uint64_t ZinNEPoolLayer::ComputeMirInfoCore(const ZinIrOpLayer *a1, uint64_t a2, ZinEngineLayerMirInfo **a3, int a4)
{
  unsigned int v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  ZinEngineLayerMirInfo *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  ZinEngineLayerMirInfo *v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BOOL4 v28;
  ZinEngineLayerMirInfo *v29;
  uint64_t v30;
  ZinEngineLayerMirInfo *v31;
  int v32;
  _BOOL4 v34;
  ZinEngineLayerMirInfo *v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  ZinEngineLayerMirInfo *v41;
  int v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  int64_t v46;
  BOOL v47;
  int v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  _QWORD v52[5];
  uint64_t v53;
  uint64_t v54;
  void *__p;
  uint64_t v56;
  unsigned int v57;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 512))(&__p);
  v8 = *(_DWORD *)(*(_QWORD *)__p + 88);
  v57 = v8;
  v56 = (uint64_t)__p;
  operator delete(__p);
  (*(void (**)(void **__return_ptr, const ZinIrOpLayer *))(*(_QWORD *)a1 + 376))(&__p, a1);
  (*(void (**)(uint64_t *__return_ptr, const ZinIrOpLayer *))(*(_QWORD *)a1 + 384))(&v53, a1);
  v9 = *((_QWORD *)a1 + 49);
  if (v9)
    v10 = *(_DWORD *)(v9 + 192) > 1u;
  else
    v10 = 0;
  v11 = *(_QWORD *)(*((_QWORD *)a1 + 54) + 64);
  if (*(_DWORD *)(a2 + 8) >= (int)v54)
    v12 = v54;
  else
    v12 = *(_DWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 1148))
  {
    v13 = *a3;
    *((_QWORD *)v13 + 13) = __p;
    *(_BYTE *)v13 = 1;
    *((_QWORD *)v13 + 10) = v56;
    (*(void (**)(_QWORD *__return_ptr, const ZinIrOpLayer *))(*(_QWORD *)a1 + 400))(v52, a1);
    *((_QWORD *)*a3 + 11) = v52[1];
  }
  else if (ZinNELayer::ComputeChannelWiseMirInfoIfUnicastIsUnsupported((uint64_t)a1, &__p, (uint64_t)&v53, a3))
  {
    return 3;
  }
  v14 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 54) + 64) + 104);
  if (v14 <= 9 && ((1 << v14) & 0x2B0) != 0)
  {
    v15 = v56;
    v16 = v54;
    v17 = v56 / v54;
    v18 = *a3;
    *((_QWORD *)*a3 + 12) = v56 / v54;
    if (v15 != v17 * v16)
    {
      std::unique_ptr<ZinEngineLayerMirInfo>::reset[abi:ne180100](a3, 0);
      v19 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v19)
        ZinNEPoolLayer::ComputeMirInfoCore(v19, v20, v21, v22, v23, v24, v25, v26);
      return 3;
    }
    v27 = *((_QWORD *)v18 + 10) / v17;
    if (*(_DWORD *)(a2 + 8) < (int)v27)
      LODWORD(v27) = *(_DWORD *)(a2 + 8);
    v28 = ZinEngineLayerMirInfo::SetNumNeededNEs(v18, (int)v27);
    v29 = *a3;
    v30 = 1;
    goto LABEL_21;
  }
  if ((v14 & 0xFFFFFFFE) == 0xA)
  {
    v31 = *a3;
    *((_QWORD *)v31 + 12) = v56;
    v28 = ZinEngineLayerMirInfo::SetNumNeededNEs(v31, 1);
    v29 = *a3;
    v30 = 2;
LABEL_21:
    v32 = v28 & ZinEngineLayerMirInfo::SetOCGSize(v29, v30);
    goto LABEL_22;
  }
  if (v14 - 12 <= 2)
  {
    ZinMirL2Config::ZinMirSetFormats((ZinEngineLayerMirInfo *)((char *)*a3 + 120), a1);
    v34 = ZinEngineLayerMirInfo::SetNumNeededNEs(*a3, 1);
    v32 = v34 & ZinEngineLayerMirInfo::SetOCGSize(*a3, 1);
    v35 = *a3;
    *(_BYTE *)v35 = 1;
    v37 = __p;
    v36 = v56;
    *((_QWORD *)v35 + 10) = v56;
    *((_QWORD *)v35 + 11) = 1;
    *((_QWORD *)v35 + 12) = v36;
    *((_QWORD *)v35 + 13) = v37;
    goto LABEL_22;
  }
  v38 = (uint64_t *)(v11 + 16);
  v39 = *(_DWORD *)(v11 + 40);
  if (v8 != 3)
  {
    if (v39 != 2)
    {
      if (v39 != 1)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
LABEL_54:
          ZinNEPoolLayer::ComputeMirInfoCore();
          return 3;
        }
        return 3;
      }
      v43 = *v38;
      if ((unint64_t)(*v38 - 1) > 1)
      {
        if ((unint64_t)(v43 - 3) > 1)
        {
          if (v43 != 5)
          {
            if (v43 < 6 || v43 > (unint64_t)ZinIrHalParameters::GetMaxSmallKernelWidth(a2, v8))
            {
              if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                return 3;
              goto LABEL_101;
            }
            goto LABEL_102;
          }
LABEL_80:
          v41 = *a3;
          v47 = v12 < 8;
          v48 = 8;
LABEL_81:
          if (!v47)
            v12 = v48;
          goto LABEL_83;
        }
        v41 = *a3;
        v44 = !v10;
        v42 = 4;
      }
      else
      {
        v41 = *a3;
        if (v43 == 1 && *(_QWORD *)(v11 + 24) == 1)
          goto LABEL_83;
        v44 = !v10;
        v42 = 2;
      }
      if (!v44)
        v42 = 8;
      goto LABEL_61;
    }
    v46 = *v38;
    if ((unint64_t)(*v38 - 1) <= 3)
    {
      v41 = *a3;
      if (v10)
        v42 = 2;
      else
        v42 = 1;
LABEL_61:
      if (v42 < v12)
        v12 = v42;
      goto LABEL_83;
    }
    if (v46 != 5)
    {
      if (v46 < 6 || v46 > GetMaxLogicalKernelWidthForLargeKernelMode(a2, v8))
      {
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          return 3;
        goto LABEL_101;
      }
      goto LABEL_102;
    }
LABEL_73:
    v41 = *a3;
    v47 = v12 < 2;
    v48 = 2;
    goto LABEL_81;
  }
  if (v39 == 2)
  {
    v45 = *v38;
    if ((unint64_t)(*v38 - 1) <= 3)
    {
      v41 = *a3;
      if (v12 >= 1)
        v12 = 1;
      goto LABEL_83;
    }
    if (v45 != 5)
    {
      if (v45 >= 6)
      {
        if (v45 <= (unint64_t)ZinIrHalParameters::GetMaxSmallKernelWidth(a2, 3u))
          goto LABEL_102;
        v45 = *v38;
      }
      if (v45 <= (unint64_t)ZinIrHalParameters::GetMaxSmallKernelWidth(a2, 3u)
        || (v49 = *v38, v49 > GetMaxLogicalKernelWidthForLargeKernelMode(a2, 3)))
      {
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          return 3;
LABEL_101:
        ZinNEPoolLayer::ComputeMirInfoCore();
        return 3;
      }
LABEL_102:
      v41 = *a3;
      goto LABEL_83;
    }
    goto LABEL_73;
  }
  if (v39 != 1)
  {
    v32 = 1;
    goto LABEL_84;
  }
  v40 = *v38;
  if ((unint64_t)(*v38 - 1) > 1)
  {
    if ((unint64_t)(v40 - 3) <= 1)
    {
      v41 = *a3;
      v47 = v12 < 4;
      v48 = 4;
      goto LABEL_81;
    }
    if (v40 != 5)
    {
      if (v40 < 6 || v40 > (unint64_t)ZinIrHalParameters::GetMaxSmallKernelWidth(a2, 3u))
      {
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          return 3;
        goto LABEL_101;
      }
      goto LABEL_102;
    }
    goto LABEL_80;
  }
  v41 = *a3;
  if (v40 != 1 || *(_QWORD *)(v11 + 24) != 1)
  {
    if (v10)
      v42 = 4;
    else
      v42 = 1;
    goto LABEL_61;
  }
LABEL_83:
  v32 = ZinEngineLayerMirInfo::SetNumNeededNEs(v41, v12);
LABEL_84:
  v50 = *(_DWORD *)(v11 + 44);
  if (v50 == 2)
  {
    v51 = *(_QWORD *)(v11 + 24);
    if (v51 <= GetMaxLogicalKernelHeightForLargeKernelMode(a2))
      goto LABEL_22;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_101;
    return 3;
  }
  if (v50 != 1)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      return 3;
    goto LABEL_54;
  }
  if (*(_QWORD *)(v11 + 24) > *(_QWORD *)(a2 + 112))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinNEPoolLayer::ComputeMirInfoCore();
    return 3;
  }
LABEL_22:
  if (a4
    && (*(unsigned int (**)(const ZinIrOpLayer *, uint64_t, unsigned int *, ZinEngineLayerMirInfo **))(*(_QWORD *)a1 + 632))(a1, a2, &v57, a3))
  {
    return 3;
  }
  ZinNELayer::ComputeMulticastParams(a1, a2, a4, (uint64_t *)a3);
  if (v32)
    return 0;
  else
    return 3;
}

uint64_t ZinNEPoolLayer::GetProgrammedKernelSize@<X0>(ZinNEPoolLayer *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(*((_QWORD *)this + 54) + 64);
  *(_OWORD *)a2 = *(_OWORD *)(v4 + 16);
  a2[2] = *(_QWORD *)(v4 + 32);
  v5 = (*(uint64_t (**)(ZinNEPoolLayer *))(*(_QWORD *)this + 336))(this);
  v7 = v6;
  v8 = (*(uint64_t (**)(ZinNEPoolLayer *))(*(_QWORD *)this + 344))(this);
  v10 = v9;
  (*(void (**)(uint64_t *__return_ptr, ZinNEPoolLayer *))(*(_QWORD *)this + 352))(&v12, this);
  *a2 = details::ZinGetProgrammedKernelDimension((int)v5, (int)v8, *a2, v12);
  a2[1] = details::ZinGetProgrammedKernelDimension(v5 >> 32, v8 >> 32, a2[1], v13);
  result = details::ZinGetProgrammedKernelDimension(v7, v10, a2[2], v14);
  a2[2] = result;
  return result;
}

uint64_t ZinNEPoolLayer::GetProgrammedInputStride(ZinNEPoolLayer *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 54) + 64) + 40);
}

uint64_t ZinNEPoolLayer::GetProgrammedPadding@<X0>(ZinNEPoolLayer *this@<X0>, int *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t result;

  v4 = *(_QWORD *)(*((_QWORD *)this + 54) + 64);
  *(_OWORD *)a2 = *(_OWORD *)(v4 + 64);
  *((_QWORD *)a2 + 2) = *(_QWORD *)(v4 + 80);
  v5 = (*(uint64_t (**)(ZinNEPoolLayer *))(*(_QWORD *)this + 336))(this);
  v7 = v6;
  v8 = (*(uint64_t (**)(ZinNEPoolLayer *))(*(_QWORD *)this + 344))(this);
  v10 = v9;
  *a2 = details::ZinGetProgrammedPadDimension((int)v5, (int)v8, *a2);
  a2[2] = details::ZinGetProgrammedPadDimension(v5 >> 32, v8 >> 32, a2[2]);
  result = details::ZinGetProgrammedPadDimension(v7, v10, a2[4]);
  a2[4] = result;
  return result;
}

uint64_t ZinNEPoolLayer::GetKernelInfo(ZinNEPoolLayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 54) + 136))(*((_QWORD *)this + 54));
}

uint64_t ZinNEPoolLayer::IsQualifiedForInPlace()
{
  return 0;
}

BOOL ZinNEPoolLayer::IsRedundant(ZinNEPoolLayer *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BOOL8 IsRedundant;
  void *__p;
  _QWORD *v10;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 312))(&__p);
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0);
  v3 = (*(uint64_t (**)(ZinNEPoolLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  if (!ZinTensorDimensionsEqual((_QWORD *)(v2 + 48), (_QWORD *)(v3 + 48)) || !*((_QWORD *)this + 54))
    goto LABEL_10;
  v4 = __p;
  if (__p == v10)
  {
    IsRedundant = 0;
    if (!__p)
      return IsRedundant;
    goto LABEL_12;
  }
  v5 = 0;
  do
  {
    if (*v4++)
      ++v5;
  }
  while (v4 != v10);
  if (v5 == 1)
    IsRedundant = ZinPoolLayer::IsRedundant(*((_QWORD **)this + 54), (_QWORD **)this + 11);
  else
LABEL_10:
    IsRedundant = 0;
  v4 = __p;
  if (__p)
  {
LABEL_12:
    v10 = v4;
    operator delete(v4);
  }
  return IsRedundant;
}

void sub_206E13BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinNEPoolLayer::ValidateSemantics_Impl(_QWORD *a1, uint64_t *a2, unsigned __int8 *a3)
{
  ZinANELayer::ValidateSemantics_Impl(a1, a2, a3);
  if (!a1[54])
    ZinAssertImpl("NEPoolLayer must contain a pooling layer");
}

void std::__function::__func<ZinNEPoolLayer::DecomposePrimeFactorChannelPool(ZinIrOpLayerGraph *,unsigned long,int)::$_0,std::allocator<ZinNEPoolLayer::DecomposePrimeFactorChannelPool(ZinIrOpLayerGraph *,unsigned long,int)::$_0>,ZinTensorDimensions ()(ZinTensorDimensions const&,long,ZinANELayer const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinNEPoolLayer::DecomposePrimeFactorChannelPool(ZinIrOpLayerGraph *,unsigned long,int)::$_0,std::allocator<ZinNEPoolLayer::DecomposePrimeFactorChannelPool(ZinIrOpLayerGraph *,unsigned long,int)::$_0>,ZinTensorDimensions ()(ZinTensorDimensions const&,long,ZinANELayer const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C000AB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ZinNEPoolLayer::DecomposePrimeFactorChannelPool(ZinIrOpLayerGraph *,unsigned long,int)::$_0,std::allocator<ZinNEPoolLayer::DecomposePrimeFactorChannelPool(ZinIrOpLayerGraph *,unsigned long,int)::$_0>,ZinTensorDimensions ()(ZinTensorDimensions const&,long,ZinANELayer const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C000AB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinNEPoolLayer::DecomposePrimeFactorChannelPool(ZinIrOpLayerGraph *,unsigned long,int)::$_0,std::allocator<ZinNEPoolLayer::DecomposePrimeFactorChannelPool(ZinIrOpLayerGraph *,unsigned long,int)::$_0>,ZinTensorDimensions ()(ZinTensorDimensions const&,long,ZinANELayer const*)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a3;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a2;
  *(_OWORD *)(a4 + 16) = v5;
  *(_QWORD *)(a4 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(result + 8);
  v7 = v4;
  if (v6 <= v4)
  {
    while (v4 % v6--)
      ;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a4 + 8) = v4 / v7;
  return result;
}

uint64_t std::__function::__func<ZinNEPoolLayer::DecomposePrimeFactorChannelPool(ZinIrOpLayerGraph *,unsigned long,int)::$_0,std::allocator<ZinNEPoolLayer::DecomposePrimeFactorChannelPool(ZinIrOpLayerGraph *,unsigned long,int)::$_0>,ZinTensorDimensions ()(ZinTensorDimensions const&,long,ZinANELayer const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEPoolLayer::DecomposePrimeFactorChannelPool(ZinIrOpLayerGraph *,unsigned long,int)::$_0,std::allocator<ZinNEPoolLayer::DecomposePrimeFactorChannelPool(ZinIrOpLayerGraph *,unsigned long,int)::$_0>,ZinTensorDimensions ()(ZinTensorDimensions const&,long,ZinANELayer const*)>::target_type()
{
}

void ZinNEPoolLayer::ComputeMirInfoCore()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: OpLayer %s pooling kernel stride not in [1,2]\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_8(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: OpLayer %s pooling kernel size %zu not supported\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_8(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: OpLayer %s pooling kernel size %zu not supported\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void ZinNEPoolLayer::ComputeMirInfoCore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "For NE channel pool, input channel must be divisible by projected output channel\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinMirSpatialSplitCostModel::CreateSplitLayers(uint64_t a1, uint64_t a2, const ZinIrOpLayer *a3, uint64_t a4, void **a5)
{
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL4 v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  BOOL v56;
  __int128 v57;
  uint64_t v58;
  const std::string::value_type *v59;
  uint64_t v60;
  const std::string::value_type *v61;
  int v62;
  const std::string::value_type *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  const std::string::value_type *v69;
  std::string::size_type v70;
  std::string *v71;
  __int128 v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  size_t v87;
  std::string *v88;
  const void *v89;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  std::string::size_type size;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  void *v97;
  int v98;
  __n128 v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t *v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  _BYTE v117[172];
  _QWORD *v118;
  std::string v119;
  char v120;
  std::string v121;
  std::string v122;
  std::string v123;
  _BYTE v124[32];
  uint64_t v125;
  int64x2_t v126;
  int64x2_t v127;
  uint64_t v128;
  void *v129[2];
  unsigned __int8 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;

  v9 = *(_QWORD *)(a4 + 168);
  v10 = (_QWORD *)(a1 + 8);
  *(_QWORD *)&v131 = a3;
  v11 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)(a1 + 8), &v131);
  if (!v11)
    goto LABEL_142;
  if (v9 < (uint64_t)(v11[4] - v11[3]) >> 3)
  {
    *(_QWORD *)&v131 = a3;
    v12 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v10, &v131);
    if (v12)
    {
      v13 = *(_QWORD *)(v12[3] + 8 * v9);
      v14 = "_reuse";
      goto LABEL_23;
    }
LABEL_142:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  v13 = (*(uint64_t (**)(const ZinIrOpLayer *, uint64_t))(*(_QWORD *)a3 + 320))(a3, a4);
  *(_QWORD *)&v131 = a3;
  v15 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v10, &v131);
  if (!v15)
    goto LABEL_142;
  v16 = v15;
  v19 = v15[5];
  v17 = (uint64_t)(v15 + 5);
  v18 = v19;
  v20 = *(uint64_t **)(v17 - 8);
  if ((unint64_t)v20 >= v19)
  {
    v22 = (void **)(v17 - 16);
    v23 = *(_QWORD *)(v17 - 16);
    v24 = ((uint64_t)v20 - v23) >> 3;
    if ((unint64_t)(v24 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v25 = v18 - v23;
    v26 = v25 >> 2;
    if (v25 >> 2 <= (unint64_t)(v24 + 1))
      v26 = v24 + 1;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
      v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v17, v27);
    else
      v28 = 0;
    v29 = (uint64_t *)&v28[8 * v24];
    v30 = &v28[8 * v27];
    *v29 = v13;
    v21 = v29 + 1;
    v32 = (char *)v16[3];
    v31 = (char *)v16[4];
    if (v31 != v32)
    {
      do
      {
        v33 = *((_QWORD *)v31 - 1);
        v31 -= 8;
        *--v29 = v33;
      }
      while (v31 != v32);
      v31 = (char *)*v22;
    }
    v16[3] = v29;
    v16[4] = v21;
    v16[5] = v30;
    if (v31)
      operator delete(v31);
  }
  else
  {
    *v20 = v13;
    v21 = v20 + 1;
  }
  v16[4] = v21;
  v14 = &byte_207AF6795;
LABEL_23:
  v34 = (unint64_t)a5[2];
  v35 = (uint64_t *)a5[1];
  if ((unint64_t)v35 >= v34)
  {
    v37 = ((char *)v35 - (_BYTE *)*a5) >> 3;
    if ((unint64_t)(v37 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v38 = v34 - (_QWORD)*a5;
    v39 = v38 >> 2;
    if (v38 >> 2 <= (unint64_t)(v37 + 1))
      v39 = v37 + 1;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
      v40 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v40 = v39;
    if (v40)
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a5 + 2), v40);
    else
      v41 = 0;
    v42 = (uint64_t *)&v41[8 * v37];
    v43 = &v41[8 * v40];
    *v42 = v13;
    v36 = v42 + 1;
    v45 = (char *)*a5;
    v44 = (char *)a5[1];
    if (v44 != *a5)
    {
      do
      {
        v46 = *((_QWORD *)v44 - 1);
        v44 -= 8;
        *--v42 = v46;
      }
      while (v44 != v45);
      v44 = (char *)*a5;
    }
    *a5 = v42;
    a5[1] = v36;
    a5[2] = v43;
    if (v44)
      operator delete(v44);
  }
  else
  {
    *v35 = v13;
    v36 = v35 + 1;
  }
  a5[1] = v36;
  if (GetConcatConsumer(a3))
  {
    v47 = *((_QWORD *)a3 + 15) - *((_QWORD *)a3 + 14);
    v48 = v47 > 8;
    v49 = *(_QWORD *)(a4 + 184);
    v50 = *(_QWORD *)(a4 + 192);
    v51 = v49 != 0;
    if (*(_OWORD *)(a4 + 184) == 0)
    {
      if (v47 < 9)
        return;
      v50 = 0;
      v49 = 0;
LABEL_57:
      v57 = *(_OWORD *)(a4 + 56);
      v131 = *(_OWORD *)(a4 + 40);
      v132 = v57;
      v133 = *(_QWORD *)(a4 + 72);
      *(_QWORD *)&v132 = v57 - v49;
      *((_QWORD *)&v132 + 1) = *((_QWORD *)&v57 + 1) - v50;
      std::string::basic_string[abi:ne180100]<0>(v129, v14);
      v125 = 0;
      memset(v124, 0, sizeof(v124));
      v126 = vdupq_n_s64(1uLL);
      v127 = v126;
      v128 = 1;
      v58 = (*(uint64_t (**)(const ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0);
      TiledLayerTensorRegions::Id::ToStringForIr((TiledLayerTensorRegions::Id *)(a4 + 152), &v121);
      v61 = *(const std::string::value_type **)(v58 + 24);
      v60 = v58 + 24;
      v59 = v61;
      v62 = *(char *)(v60 + 23);
      if (v62 >= 0)
        v63 = (const std::string::value_type *)v60;
      else
        v63 = v59;
      if (v62 >= 0)
        v64 = *(unsigned __int8 *)(v60 + 23);
      else
        v64 = *(_QWORD *)(v60 + 8);
      v65 = std::string::insert(&v121, 0, v63, v64);
      v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v122.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      v67 = std::string::append(&v122, "/trimmed", 8uLL);
      v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v123.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      if ((v130 & 0x80u) == 0)
        v69 = (const std::string::value_type *)v129;
      else
        v69 = (const std::string::value_type *)v129[0];
      if ((v130 & 0x80u) == 0)
        v70 = v130;
      else
        v70 = (std::string::size_type)v129[1];
      v71 = std::string::append(&v123, v69, v70);
      v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v119.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      v73 = ZinBuilder::CreateCopyView(a3, &v131, (uint64_t)v124, (uint64_t)&v119);
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v119.__r_.__value_.__l.__data_);
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v123.__r_.__value_.__l.__data_);
      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v122.__r_.__value_.__l.__data_);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v121.__r_.__value_.__l.__data_);
      v75 = (uint64_t *)a5[1];
      v74 = (unint64_t)a5[2];
      if ((unint64_t)v75 >= v74)
      {
        v77 = ((char *)v75 - (_BYTE *)*a5) >> 3;
        if ((unint64_t)(v77 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v78 = v74 - (_QWORD)*a5;
        v79 = v78 >> 2;
        if (v78 >> 2 <= (unint64_t)(v77 + 1))
          v79 = v77 + 1;
        if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
          v80 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v80 = v79;
        if (v80)
          v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a5 + 2), v80);
        else
          v81 = 0;
        v82 = (uint64_t *)&v81[8 * v77];
        v83 = &v81[8 * v80];
        *v82 = v73;
        v76 = v82 + 1;
        v85 = (char *)*a5;
        v84 = (char *)a5[1];
        if (v84 != *a5)
        {
          do
          {
            v86 = *((_QWORD *)v84 - 1);
            v84 -= 8;
            *--v82 = v86;
          }
          while (v84 != v85);
          v84 = (char *)*a5;
        }
        *a5 = v82;
        a5[1] = v76;
        a5[2] = v83;
        if (v84)
          operator delete(v84);
      }
      else
      {
        *v75 = v73;
        v76 = v75 + 1;
      }
      a5[1] = v76;
      if (*(char *)(v73 + 47) >= 0)
        v87 = *(unsigned __int8 *)(v73 + 47);
      else
        v87 = *(_QWORD *)(v73 + 32);
      v88 = &v123;
      std::string::basic_string[abi:ne180100]((uint64_t)&v123, v87 + 1);
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v88 = (std::string *)v123.__r_.__value_.__r.__words[0];
      if (v87)
      {
        if (*(char *)(v73 + 47) >= 0)
          v89 = (const void *)(v73 + 24);
        else
          v89 = *(const void **)(v73 + 24);
        memmove(v88, v89, v87);
      }
      *(_WORD *)((char *)&v88->__r_.__value_.__l.__data_ + v87) = 95;
      std::string::basic_string[abi:ne180100]<0>(&v121, "ss_cost");
      v90 = std::string::append(&v121, "_xfm", 4uLL);
      v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      v122.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v91;
      v90->__r_.__value_.__l.__size_ = 0;
      v90->__r_.__value_.__r.__words[2] = 0;
      v90->__r_.__value_.__r.__words[0] = 0;
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v92 = &v122;
      else
        v92 = (std::string *)v122.__r_.__value_.__r.__words[0];
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v122.__r_.__value_.__r.__words[2]);
      else
        size = v122.__r_.__value_.__l.__size_;
      v94 = std::string::append(&v123, (const std::string::value_type *)v92, size);
      v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
      v119.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v95;
      v94->__r_.__value_.__l.__size_ = 0;
      v94->__r_.__value_.__r.__words[2] = 0;
      v94->__r_.__value_.__r.__words[0] = 0;
      v96 = std::string::append(&v119, "_", 1uLL);
      v97 = (void *)v96->__r_.__value_.__r.__words[0];
      v98 = SHIBYTE(v96->__r_.__value_.__r.__words[2]);
      v96->__r_.__value_.__r.__words[0] = 0;
      v96->__r_.__value_.__l.__size_ = 0;
      v96->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v119.__r_.__value_.__l.__data_);
      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v122.__r_.__value_.__l.__data_);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v121.__r_.__value_.__l.__data_);
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v123.__r_.__value_.__l.__data_);
      v99 = ZinObjectNameFactory::ZinObjectNameFactory(&v119, v73 + 24);
      v100 = *((_QWORD *)a3 + 2);
      v101 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD, __n128))(*(_QWORD *)v73 + 32))(v73, 0, 0, v99)+ 88);
      v118 = 0;
      v117[0] = 0;
      v117[168] = 0;
      v102 = ZinBuilder::CreateNEBypass(v100, (uint64_t)&v119, v73, v101, &v118, 0, (uint64_t)v117, 1.0);
      v103 = v118;
      v118 = 0;
      if (v103)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v118, v103);
      v105 = (uint64_t *)a5[1];
      v104 = (unint64_t)a5[2];
      if ((unint64_t)v105 >= v104)
      {
        v107 = ((char *)v105 - (_BYTE *)*a5) >> 3;
        if ((unint64_t)(v107 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v108 = v104 - (_QWORD)*a5;
        v109 = v108 >> 2;
        if (v108 >> 2 <= (unint64_t)(v107 + 1))
          v109 = v107 + 1;
        if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8)
          v110 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v110 = v109;
        if (v110)
          v111 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a5 + 2), v110);
        else
          v111 = 0;
        v112 = (uint64_t *)&v111[8 * v107];
        v113 = &v111[8 * v110];
        *v112 = v102;
        v106 = v112 + 1;
        v115 = (char *)*a5;
        v114 = (char *)a5[1];
        if (v114 != *a5)
        {
          do
          {
            v116 = *((_QWORD *)v114 - 1);
            v114 -= 8;
            *--v112 = v116;
          }
          while (v114 != v115);
          v114 = (char *)*a5;
        }
        *a5 = v112;
        a5[1] = v106;
        a5[2] = v113;
        if (v114)
          operator delete(v114);
      }
      else
      {
        *v105 = v102;
        v106 = v105 + 1;
      }
      a5[1] = v106;
      v119.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
      if (v120 < 0)
      {
        operator delete((void *)v119.__r_.__value_.__l.__size_);
        if ((v98 & 0x80000000) == 0)
          goto LABEL_137;
      }
      else if ((v98 & 0x80000000) == 0)
      {
        goto LABEL_137;
      }
      operator delete(v97);
LABEL_137:
      if ((char)v130 < 0)
        operator delete(v129[0]);
      return;
    }
  }
  else
  {
    v49 = *(_QWORD *)(a4 + 184);
    v50 = *(_QWORD *)(a4 + 192);
    v51 = v49 != 0;
    if (*(_OWORD *)(a4 + 184) == 0)
      return;
    v48 = 0;
  }
  v52 = *(_QWORD **)(a2 + 24);
  v53 = (_QWORD *)(a2 + 32);
  if (v52 != (_QWORD *)(a2 + 32))
  {
    while ((const ZinIrOpLayer *)v52[4] != a3)
    {
      v54 = (_QWORD *)v52[1];
      if (v54)
      {
        do
        {
          v55 = v54;
          v54 = (_QWORD *)*v54;
        }
        while (v54);
      }
      else
      {
        do
        {
          v55 = (_QWORD *)v52[2];
          v56 = *v55 == (_QWORD)v52;
          v52 = v55;
        }
        while (!v56);
      }
      v52 = v55;
      if (v55 == v53)
        goto LABEL_55;
    }
  }
  if (v52 != v53)
    goto LABEL_57;
LABEL_55:
  if (v48 && !v51 && !v50)
    goto LABEL_57;
}

void sub_206E146D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  void *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;

  *(_QWORD *)(v64 + 8) = off_24C01FBB0;
  if (a42 < 0)
    operator delete(*(void **)(v64 + 16));
  if (v63 < 0)
    operator delete(v62);
  if (*(char *)(v65 - 129) < 0)
    operator delete(*(void **)(v64 + 224));
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirSpatialSplitSimpleCostModel::ComputeLayerCostOrgLayer(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0x3FF0000000000000;
  return 0;
}

uint64_t ZinMirSpatialSplitSimpleCostModel::ComputeLayerCostSplitLayer()
{
  return 0;
}

uint64_t ZinMirSpatialSplitSimpleCostModel::ComputeCopyLayerCostSplitLayer()
{
  return 0;
}

uint64_t ZinMirOpt::EnableLargeKernelModeFor1DWinograd(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24C004EB0;
  v6[1] = a2;
  v7 = v6;
  v2 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v6, 1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_206E148D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinMirOpt::EnableLargeKernelModeFor1DWinograd(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirOpt::EnableLargeKernelModeFor1DWinograd(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinMirOpt::EnableLargeKernelModeFor1DWinograd(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirOpt::EnableLargeKernelModeFor1DWinograd(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C004EB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinMirOpt::EnableLargeKernelModeFor1DWinograd(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirOpt::EnableLargeKernelModeFor1DWinograd(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C004EB0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinMirOpt::EnableLargeKernelModeFor1DWinograd(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirOpt::EnableLargeKernelModeFor1DWinograd(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, ZinNELayer **a3)
{
  ZinNELayer *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  _BOOL4 HasNonlinearActivationLUT;
  MirInfoChannelAssignment *ChannelAssignment;
  unint64_t NumNeededNEs;
  MirInfoChannelAssignment *v12;
  uint64_t OCGSize;
  uint64_t v14;
  char v15;
  unint64_t v17;
  uint64_t ProgrammedKernelDimension;
  const ZinKernelDescriptor *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  ZinNEPerf *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t InputTensor;
  uint64_t v41;
  uint64_t v42;
  ZinIrHalParameters *v43;
  _QWORD *v44;
  _BOOL4 v49;
  uint64_t v50;
  double v51;
  char v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  unsigned __int8 v57;
  uint64_t v58;
  char v59;
  MirInfoChannelAssignment *v60;
  unint64_t v61;
  const void **v62;
  size_t v63;
  _BYTE *v64;
  const void *v65;
  ZinIrKernel *v66;
  const ZinIrWeight *v67;
  ZinIrWeight *v68;
  ZinIrKernel *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t NonZeroElementsInSubKernel;
  unsigned int v79;
  void *v80;
  uint64_t *v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  void *v96;
  void *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  _OWORD __dst[39];
  uint64_t v109;
  _BYTE __src[452];
  uint64_t *v111[4];
  int v112;
  int v113;
  uint64_t *v114[4];
  int v115;
  int v116;
  uint64_t *v117[4];
  int v118;
  __int128 v119[3];

  v3 = *a3;
  if (*(_DWORD *)(*((_QWORD *)*a3 + 8) + 8) == 85)
  {
    v4 = *((_QWORD *)v3 + 54);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 136);
      if (v5)
      {
        if (!*((_QWORD *)v3 + 33))
          ZinAssertImpl("Invalid MirInfo for 1D winograd with large kernel mode");
        if (*(_QWORD *)(v5 + 584))
        {
          v7 = **(_QWORD **)(a1 + 8);
          v8 = (*(uint64_t (**)(ZinNELayer *))(*(_QWORD *)v3 + 408))(*a3);
          HasNonlinearActivationLUT = ZinNELayer::HasNonlinearActivationLUT(v3);
          ChannelAssignment = (MirInfoChannelAssignment *)ZinMirL2Config::NE::GetChannelAssignment((ZinMirL2Config::NE *)(*((_QWORD *)v3 + 33) + 120));
          NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment);
          v12 = (MirInfoChannelAssignment *)ZinMirL2Config::NE::GetChannelAssignment((ZinMirL2Config::NE *)(*((_QWORD *)v3 + 33) + 120));
          OCGSize = MirInfoChannelAssignment::GetOCGSize(v12);
          if (*(_BYTE *)(v7 + 1600))
          {
            v14 = *(_QWORD *)(v5 + 272);
            v15 = (v14 & 0xFFFFFFFFFFFFFFFELL) == 4 ? v8 : 1;
            if ((v15 & 1) == 0 && *(_DWORD *)(v5 + 328) == 1 && *(_DWORD *)(v5 + 340) == 1)
            {
              v17 = OCGSize;
              ProgrammedKernelDimension = details::ZinGetProgrammedKernelDimension(2, 2, v14, *(_DWORD *)(v5 + 352));
              if (details::ZinIrSubchannelKernelDimension(2, 2, ProgrammedKernelDimension, *(_DWORD *)(v5 + 352)) == 3)
              {
                v80 = (void *)(v5 + 176);
                memcpy(__dst, (const void *)(v5 + 176), 0x118uLL);
                DWORD2(__dst[9]) = 2;
                *(_QWORD *)((char *)&__dst[9] + 12) = *(_QWORD *)(v5 + 332);
                DWORD1(__dst[10]) = 2;
                *((_QWORD *)&__dst[10] + 1) = *(_QWORD *)(v5 + 344);
                ZinKernelDescriptorStrides((int *)&__dst[9] + 2, (int *)&__dst[10] + 1, (_QWORD *)&__dst[4] + 1, &__dst[11], __src);
                __dst[7] = *(_OWORD *)__src;
                __dst[8] = *(_OWORD *)&__src[16];
                *(_QWORD *)&__dst[9] = *(_QWORD *)&__src[32];
                v20 = ZinKernelSizeEstimateUtil::EstimateKMEMFootprintPerCoutElement((ZinKernelSizeEstimateUtil *)__dst, v19);
                v21 = v17;
                if (ZinKernelFormatIsPalette(__dst[0]))
                  v21 = v17 / *(_QWORD *)&__dst[15];
                ZinChannelAssignment::ZinChannelAssignment((ZinChannelAssignment *)__src, NumNeededNEs, v17, *((unint64_t *)&__dst[4] + 1), 1uLL);
                if (*(_OWORD *)&__src[40] == 0)
                  v22 = *(_QWORD *)&__src[32];
                else
                  v22 = *(_QWORD *)&__src[32] + 1;
                if (SLOBYTE(__dst[17]) < 0)
                  v24 = 1;
                else
                  v24 = *(_QWORD *)&__dst[14];
                v23 = v21 * v20;
                if (ZinKernelGetLUTSize(v7, HasNonlinearActivationLUT) + v23 * v24 * v22 < *(_QWORD *)(v7 + 480))
                {
                  v25 = *(_QWORD *)(v5 + 264);
                  v26 = *(ZinNEPerf **)(v5 + 272);
                  v27 = *(_QWORD *)(v5 + 280);
                  v28 = *(int *)(v5 + 332);
                  v29 = *(int *)(v5 + 336);
                  v30 = *(int *)(v5 + 348);
                  v31 = *(int *)(v5 + 328);
                  v32 = *(int *)(v5 + 340);
                  v33 = *(int *)(v5 + 344);
                  NonZeroElementsInSubKernel = ZinNEPerf::GetNonZeroElementsInSubKernel(v26, v25, v27, v31, v28, v29, v32, v33, v30, v76);
                  v34 = ZinNEPerf::GetNonZeroElementsInSubKernel(v26, v25, v27, 2, v28, v29, 2, v33, v30, v77);
                  if (*((_QWORD *)v3 + 33))
                  {
                    v35 = v34;
                    v36 = *(_QWORD *)(a1 + 8);
                    ZinIrHalParameters::GetOperationCondition(*(ZinIrHalParameters **)v36, *(double *)(*(_QWORD *)(v36 + 8) + 104), *(_DWORD *)(*(_QWORD *)(v36 + 8) + 112), *(_DWORD *)(*(_QWORD *)(v36 + 8) + 116), (uint64_t)v119);
                    v37 = (_DWORD *)*((_QWORD *)v3 + 33);
                    memcpy(__src, v37 + 30, sizeof(__src));
                    std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v111, (uint64_t)(v37 + 144));
                    v113 = v37[154];
                    std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v114, (uint64_t)(v37 + 156));
                    v116 = v37[166];
                    std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v117, (uint64_t)(v37 + 168));
                    v109 = 0;
                    (*(void (**)(_OWORD *__return_ptr, ZinNELayer *))(*(_QWORD *)v3 + 384))(__dst, v3);
                    v38 = *(_QWORD *)&__dst[1];
                    (*(void (**)(__int128 *__return_ptr, ZinNELayer *))(*(_QWORD *)v3 + 384))(&v83, v3);
                    v39 = *((_QWORD *)&v84 + 1);
                    InputTensor = ZinIrOpLayer::GetInputTensor(v3, 0);
                    ZinNEPerf::EstimateMinimumNumOfWorkunits(v38, v39, *(int *)(InputTensor + 88), 0, *(_QWORD *)v36, (unint64_t *)&v109);
                    v41 = *((_QWORD *)v3 + 33);
                    if (!*(_BYTE *)(v41 + 150))
                    {
                      v42 = v109;
                      *(_QWORD *)(v41 + 128) = v109;
                      *(_QWORD *)(v41 + 136) = v42;
                      *(_QWORD *)(v41 + 120) = v42;
                    }
                    ZinMirL2Config::ZinMirSetTileHeight((ZinMirL2Config *)(v41 + 120), v3, 1);
                    v43 = *(ZinIrHalParameters **)v36;
                    LOWORD(v83) = 257;
                    BYTE2(v83) = 1;
                    *(_DWORD *)((char *)&v83 + 3) = 0;
                    *(_DWORD *)((char *)&v83 + 6) = 0;
                    BYTE10(v83) = 1;
                    *(_DWORD *)((char *)&v83 + 11) = 0;
                    ZinIrPerf::ZinIrPerf((uint64_t)__dst, (uint64_t)v43, v119, (uint64_t *)&v83);
                    v95 = 0;
                    v93 = 0u;
                    v94 = 0u;
                    v91 = 0u;
                    v92 = 0u;
                    v89 = 0u;
                    v90 = 0u;
                    v87 = 0u;
                    v88 = 0u;
                    v85 = 0u;
                    v86 = 0u;
                    v83 = 0u;
                    v84 = 0u;
                    v44 = operator new(8uLL);
                    v96 = v44;
                    *v44 = 0;
                    v97 = v44 + 1;
                    v98 = v44 + 1;
                    v99 = 0;
                    v100 = 0;
                    __asm { FMOV            V0.2D, #-1.0 }
                    v101 = _Q0;
                    v102 = _Q0;
                    v103 = _Q0;
                    v104 = _Q0;
                    v105 = 0;
                    v106 = 0;
                    v107 = 0;
                    if (ZinANELayer::CalculatePerf(v3, (ZinIrPerf *)__dst, (ZinPerfDescriptor *)&v83))
                    {
                      v49 = 1;
                    }
                    else
                    {
                      v50 = *((_QWORD *)v3 + 33);
                      memcpy((void *)(v50 + 120), __src, 0x1C0uLL);
                      *(_DWORD *)(v50 + 568) = *(_DWORD *)&__src[448];
                      if ((_BYTE *)(v50 + 120) == __src)
                      {
                        *(_DWORD *)(v50 + 616) = v113;
                        *(_DWORD *)(v50 + 664) = v116;
                      }
                      else
                      {
                        *(_DWORD *)(v50 + 608) = v112;
                        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v50 + 576), v111[2], 0);
                        *(_DWORD *)(v50 + 616) = v113;
                        *(_DWORD *)(v50 + 656) = v115;
                        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v50 + 624), v114[2], 0);
                        *(_DWORD *)(v50 + 664) = v116;
                        *(_DWORD *)(v50 + 704) = v118;
                        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v50 + 672), v117[2], 0);
                      }
                      v51 = *((double *)&v87 + 1)
                          * (float)((float)v35 / (float)(unint64_t)NonZeroElementsInSubKernel);
                      v49 = v51 + v51 <= *(double *)&v84;
                    }
                    if (v96)
                    {
                      v97 = v96;
                      operator delete(v96);
                    }
                    ZinIrPerf::~ZinIrPerf((ZinIrPerf *)__dst);
                    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v117);
                    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v114);
                    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v111);
                    if (v49)
                    {
                      memcpy(__dst, v80, 0x118uLL);
                      DWORD2(__dst[9]) = 2;
                      DWORD1(__dst[10]) = 2;
                      v52 = *(_BYTE *)(*(_QWORD *)(v4 + 136) + 160);
                      v81 = *(uint64_t **)(a1 + 8);
                      v79 = (*(uint64_t (**)(ZinNELayer *))(*(_QWORD *)v3 + 408))(v3);
                      (*(void (**)(_BYTE *__return_ptr, ZinNELayer *))(*(_QWORD *)v3 + 392))(__src, v3);
                      (*(void (**)(__int128 *__return_ptr, ZinNELayer *))(*(_QWORD *)v3 + 400))(&v83, v3);
                      v53 = (*(uint64_t (**)(ZinNELayer *))(*(_QWORD *)v3 + 88))(v3);
                      v54 = *(_DWORD *)ZinMirL2Config::GetTileSrc(*((_QWORD *)v3 + 33) + 120, 0);
                      v55 = *((_QWORD *)v3 + 33);
                      v56 = *(_DWORD *)(v55 + 144);
                      v57 = *(_BYTE *)(v55 + 1);
                      v58 = *(unsigned __int8 *)(v55 + 149);
                      v59 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 496);
                      v60 = (MirInfoChannelAssignment *)ZinMirL2Config::NE::GetChannelAssignment((ZinMirL2Config::NE *)(v55 + 120));
                      v61 = MirInfoChannelAssignment::GetOCGSize(v60);
                      if (ZinMirConvUtils::CanUseWinogradMode(v81, v79, (uint64_t)__src, (uint64_t)&v83, v53, (uint64_t)__dst, v54, v56, v57, v75, v58, SHIDWORD(v58), 0, v52, v59, v61, 1))
                      {
                        *(_BYTE *)(*((_QWORD *)v3 + 33) + 148) = 1;
                        v62 = *(const void ***)(v4 + 136);
                        if (*((char *)v62 + 23) >= 0)
                          v63 = *((unsigned __int8 *)v62 + 23);
                        else
                          v63 = (size_t)v62[1];
                        std::string::basic_string[abi:ne180100]((uint64_t)__src, v63 + 1);
                        if (__src[23] >= 0)
                          v64 = __src;
                        else
                          v64 = *(_BYTE **)__src;
                        if (v63)
                        {
                          if (*((char *)v62 + 23) >= 0)
                            v65 = v62;
                          else
                            v65 = *v62;
                          memmove(v64, v65, v63);
                        }
                        *(_WORD *)&v64[v63] = 95;
                        v66 = *(ZinIrKernel **)(v4 + 136);
                        v67 = (const ZinIrWeight *)*((_QWORD *)v66 + 73);
                        if (v67 || *((_QWORD *)v66 + 75))
                        {
                          v68 = (ZinIrWeight *)operator new();
                          ZinIrWeight::ZinIrWeight(v68, v67);
                          *(_QWORD *)&v83 = v68;
                          v66 = *(ZinIrKernel **)(v4 + 136);
                        }
                        else
                        {
                          *(_QWORD *)&v83 = 0;
                        }
                        if (ZinIrKernel::HasScale(v66))
                          std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(*(_QWORD *)(*(_QWORD *)(v4 + 136) + 568), (uint64_t *)v119);
                        else
                          *(_QWORD *)&v119[0] = 0;
                        if (ZinIrKernel::HasBias(*(ZinIrKernel **)(v4 + 136)))
                          std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(*(_QWORD *)(*(_QWORD *)(v4 + 136) + 576), &v109);
                        else
                          v109 = 0;
                        if (ZinIrKernel::HasZeroPoint(*(ZinIrKernel **)(v4 + 136)))
                          std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(*(_QWORD *)(*(_QWORD *)(v4 + 136) + 592), &v82);
                        else
                          v82 = 0;
                        v69 = (ZinIrKernel *)operator new();
                        ZinIrKernel::ZinIrKernel(v69, __src, __dst, &v83, v119, &v109, &v82, 2);
                        std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)(*((_QWORD *)v3 + 54) + 136), v69);
                        v70 = v82;
                        v82 = 0;
                        if (v70)
                          std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v82, v70);
                        v71 = v109;
                        v109 = 0;
                        if (v71)
                          std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v109, v71);
                        v72 = *(_QWORD *)&v119[0];
                        *(_QWORD *)&v119[0] = 0;
                        if (v72)
                          std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)v119, v72);
                        v73 = v83;
                        *(_QWORD *)&v83 = 0;
                        if (v73)
                          (*(void (**)(uint64_t))(*(_QWORD *)v73 + 16))(v73);
                        if ((__src[23] & 0x80000000) != 0)
                          operator delete(*(void **)__src);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

void sub_206E15184(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C400FFB447ELL);
  if (SLOBYTE(STACK[0x50F]) < 0)
    operator delete((void *)STACK[0x4F8]);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ZinMirOpt::EnableLargeKernelModeFor1DWinograd(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirOpt::EnableLargeKernelModeFor1DWinograd(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirOpt::EnableLargeKernelModeFor1DWinograd(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirOpt::EnableLargeKernelModeFor1DWinograd(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

BOOL ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(ZinMirBatchOrChannelSplitter *this)
{
  int v1;
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  char v9;
  float v10;
  int v11;
  char v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v12 = *((_BYTE *)this + 26);
  if (*((_BYTE *)this + 27))
  {
    v1 = 0;
  }
  else if (*((_BYTE *)this + 28))
  {
    v1 = 2;
  }
  else
  {
    v1 = 5;
  }
  v11 = v1;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v10 = (float)*(unint64_t *)(**((_QWORD **)this + 2) + 408) * 0.5;
  v9 = 0;
  v3 = operator new(0x28uLL);
  *v3 = &off_24BFF4F88;
  v3[1] = &v9;
  v3[2] = &v10;
  v3[3] = &v11;
  v3[4] = &v12;
  v14 = v3;
  v4 = ZinIrControlFlowGraph::TraverseForward(v2, (uint64_t)v13, 1);
  v5 = v14;
  if (v14 == v13)
  {
    v6 = 4;
    v5 = v13;
  }
  else
  {
    if (!v14)
      return v9 && v4 == 0;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
  return v9 && v4 == 0;
}

void sub_206E15424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

ZinMirGraphSplitterBase *ZinMirBatchOrChannelSplitter::ZinMirBatchOrChannelSplitter(ZinMirGraphSplitterBase *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;

  v8 = (_QWORD *)ZinMirGraphSplitterBase::ZinMirGraphSplitterBase((uint64_t)a1, a2, a3, (uint64_t *)a5, 0);
  *v8 = &off_24BFF2560;
  v8[7] = a4;
  if ((*(_BYTE *)(a5 + 3) == 0) == (*(_BYTE *)(a5 + 4) == 0))
    ZinAssertImpl("Must be either batch or channel splitting, and not both");
  if (ZinMirGraphSplitterBase::SetNextTileId(a1))
    ZinAssertImpl("Spatial Split Internal Error");
  return a1;
}

void sub_206E154F4(_Unwind_Exception *a1)
{
  ZinIrHalH13g *v1;

  ZinIrHalH13g::~ZinIrHalH13g(v1);
  _Unwind_Resume(a1);
}

void ZinMirBatchOrChannelSplitter::~ZinMirBatchOrChannelSplitter(ZinIrControlFlowGraph **this)
{
  *this = (ZinIrControlFlowGraph *)&off_24BFF2560;
  ZinIrControlFlowGraph::UnsetScheduleMap(this[1]);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)this);
}

{
  ZinMirBatchOrChannelSplitter::~ZinMirBatchOrChannelSplitter(this);
  JUMPOUT(0x20BD002F8);
}

void ZinMirBatchOrChannelSplitter::AdjustBroadcastInfoForSplitLayer(uint64_t a1, _QWORD **a2, uint64_t a3, ZinIrOpLayer **a4, uint64_t a5)
{
  _BOOL4 IsPELayer;
  ZinIrOpLayer *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  std::string *v15;
  const void *v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  __n128 v21;
  uint64_t v22;
  _DWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t Broadcast;
  uint64_t v30;
  ZinIrOpLayer *v31;
  uint64_t *GroupId;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  ZinPEGOCLayer *v36;
  uint64_t v37;
  float v38;
  int v39;
  char *v40;
  char *v41;
  uint64_t TernaryDynamicGOCLayer;
  uint64_t *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  std::string *v48;
  const void *v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  __n128 v54;
  uint64_t v55;
  _DWORD *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  std::string *v64;
  uint64_t v65;
  char *v66;
  size_t v67;
  __int128 *v68;
  const void *v69;
  std::string *v70;
  std::string::size_type v71;
  std::string *v72;
  __int128 v73;
  __n128 v74;
  uint64_t v75;
  _DWORD *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  ZinIrOpLayer *v84;
  uint64_t *v85;
  void *v86;
  void *v87;
  char *v88;
  std::string v89;
  char v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  int v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  int v106;
  std::string v107;
  char v108;
  _QWORD v109[5];
  void *__p[46];

  __p[45] = *(void **)MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 27))
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a3 + 392))(v109, a3);
    v109[0] = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)*a4 + 32))(*a4, 0, 0)+ 48);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 28))
      ZinAssertImpl("invalid splitting dimension");
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a3 + 392))(v109, a3);
    v109[1] = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)*a4 + 32))(*a4, 0, 0)+ 56);
  }
  IsPELayer = ZinIrOpLayer::IsPELayer(*a4);
  v10 = *a4;
  if (IsPELayer)
  {
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)v10 + 656))(v10))
    {
      v11 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)**a2 + 32))(**a2, 0, 0);
      ZinBroadcastLayerUtils::GetBroadcastDimensionMap((ZinBroadcastLayerUtils *)(v11 + 48), (const ZinTensorDimensions *)v109, &v99);
      if (BYTE8(v101))
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 696))(a3);
        v13 = (char *)v12;
        if (*(char *)(v12 + 47) >= 0)
          v14 = *(unsigned __int8 *)(v12 + 47);
        else
          v14 = *(_QWORD *)(v12 + 32);
        v15 = &v107;
        std::string::basic_string[abi:ne180100]((uint64_t)&v107, v14 + 7);
        if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v15 = (std::string *)v107.__r_.__value_.__r.__words[0];
        if (v14)
        {
          if (v13[47] >= 0)
            v16 = v13 + 24;
          else
            v16 = (const void *)*((_QWORD *)v13 + 3);
          memmove(v15, v16, v14);
        }
        strcpy((char *)v15 + v14, "_Btile_");
        std::to_string(&v89, a5);
        if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = &v89;
        else
          v17 = (std::string *)v89.__r_.__value_.__r.__words[0];
        if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
        else
          size = v89.__r_.__value_.__l.__size_;
        v19 = std::string::append(&v107, (const std::string::value_type *)v17, size);
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        v21 = ZinObjectNameFactory::ZinObjectNameFactory(&v91, __p);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        v22 = *(_QWORD *)(a3 + 16);
        (*(void (**)(void **__return_ptr, _QWORD, _QWORD, _QWORD, __n128))(*(_QWORD *)**a2 + 80))(__p, **a2, 0, 0, v21);
        v23 = operator new(0x78uLL);
        v107.__r_.__value_.__l.__size_ = (std::string::size_type)(v23 + 30);
        v107.__r_.__value_.__r.__words[2] = (std::string::size_type)(v23 + 30);
        v23[28] = __p[14];
        v24 = *(_OWORD *)&__p[12];
        v25 = *(_OWORD *)&__p[8];
        *((_OWORD *)v23 + 5) = *(_OWORD *)&__p[10];
        *((_OWORD *)v23 + 6) = v24;
        v26 = *(_OWORD *)&__p[2];
        *(_OWORD *)v23 = *(_OWORD *)__p;
        *((_OWORD *)v23 + 1) = v26;
        v27 = *(_OWORD *)&__p[6];
        *((_OWORD *)v23 + 2) = *(_OWORD *)&__p[4];
        *((_OWORD *)v23 + 3) = v27;
        *((_OWORD *)v23 + 4) = v25;
        v107.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
        v28 = (*(uint64_t (**)(char *, _QWORD, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0, 0);
        Broadcast = ZinBuilder::CreateBroadcast(v22, (uint64_t)&v91, (uint64_t *)&v107, (uint64_t)&v99, *(_DWORD *)(v28 + 88));
        (*(void (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v10 + 752))(v10, Broadcast);
        if (v107.__r_.__value_.__r.__words[0])
        {
          v107.__r_.__value_.__l.__size_ = v107.__r_.__value_.__r.__words[0];
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        v30 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v10 + 696))(v10);
        v31 = (ZinIrOpLayer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 696))(a3);
        GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(v31);
        ZinIrOpLayer::SetGroupId(v30, *GroupId);
        *(_QWORD *)&v91 = off_24C01FBB0;
        if (SHIBYTE(v92) < 0)
          operator delete(*((void **)&v91 + 1));
        if (BYTE8(v101))
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v99);
      }
    }
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)v10 + 664))(v10))
    {
      v33 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*a2)[1] + 32))((*a2)[1], 0, 0);
      ZinBroadcastLayerUtils::GetBroadcastDimensionMap((ZinBroadcastLayerUtils *)(v33 + 48), (const ZinTensorDimensions *)v109, &v107);
      if (v108)
      {
        if (*(_DWORD *)(*((_QWORD *)v10 + 8) + 8) == 84)
        {
          v34 = *((_QWORD *)v10 + 55);
          v35 = *(_QWORD *)(v34 + 64);
          (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(*a2)[1] + 80))(&v99, (*a2)[1], 0, 0);
          v36 = (ZinPEGOCLayer *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*a2)[1] + 32))((*a2)[1], 0, 0);
          ZinPEGOCLayer::GetDecoupledDynamicGOCScaleBiasTensorInfo(v36, (const ZinIrTensor *)*(unsigned __int8 *)(v35 + 80), (uint64_t)&v91);
          ZinObjectNameFactory::ZinObjectNameFactory(&v89, v34 + 24);
          v37 = *(_QWORD *)(v34 + 16);
          v38 = *(float *)(v35 + 12);
          LODWORD(v34) = *(unsigned __int8 *)(v35 + 16);
          v39 = *(unsigned __int8 *)(v35 + 17);
          LODWORD(v35) = *(unsigned __int8 *)(v35 + 80);
          *(_OWORD *)&__p[8] = v103;
          *(_OWORD *)&__p[10] = v104;
          *(_OWORD *)&__p[12] = v105;
          *(_OWORD *)__p = v99;
          *(_OWORD *)&__p[2] = v100;
          *(_OWORD *)&__p[4] = v101;
          *(_OWORD *)&__p[6] = v102;
          *(_OWORD *)&__p[21] = v94;
          *(_OWORD *)&__p[19] = v93;
          *(_OWORD *)&__p[17] = v92;
          *(_OWORD *)&__p[15] = v91;
          *(_OWORD *)&__p[27] = v97;
          *(_OWORD *)&__p[25] = v96;
          *(_OWORD *)&__p[23] = v95;
          *(_OWORD *)&__p[34] = v93;
          *(_OWORD *)&__p[36] = v94;
          LODWORD(__p[14]) = v106;
          LODWORD(__p[29]) = v98;
          *(_OWORD *)&__p[30] = v91;
          *(_OWORD *)&__p[32] = v92;
          LODWORD(__p[44]) = v98;
          *(_OWORD *)&__p[40] = v96;
          *(_OWORD *)&__p[42] = v97;
          *(_OWORD *)&__p[38] = v95;
          v40 = (char *)operator new(0x168uLL);
          v41 = v40 + 360;
          v86 = v40;
          v88 = v40 + 360;
          memcpy(v40, __p, 0x164uLL);
          v87 = v41;
          TernaryDynamicGOCLayer = ZinBuilder::CreateTernaryDynamicGOCLayer(v37, (uint64_t)&v89, (_DWORD)v34 != 0, v39 != 0, (uint64_t)&v107, (_DWORD)v35 != 0, (uint64_t *)&v86, 0, v38, 0);
          if (v86)
          {
            v87 = v86;
            operator delete(v86);
          }
          *((_QWORD *)v10 + 55) = TernaryDynamicGOCLayer;
          v43 = (uint64_t *)ZinIrOpLayer::GetGroupId(*(ZinIrOpLayer **)(a3 + 440));
          ZinIrOpLayer::SetGroupId(TernaryDynamicGOCLayer, *v43);
          v89.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
          if ((v90 & 0x80000000) == 0)
            goto LABEL_100;
          v44 = (void *)v89.__r_.__value_.__l.__size_;
        }
        else
        {
          v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 704))(a3);
          v66 = (char *)v65;
          if (*(char *)(v65 + 47) >= 0)
            v67 = *(unsigned __int8 *)(v65 + 47);
          else
            v67 = *(_QWORD *)(v65 + 32);
          v68 = &v91;
          std::string::basic_string[abi:ne180100]((uint64_t)&v91, v67 + 7);
          if (SBYTE7(v92) < 0)
            v68 = (__int128 *)v91;
          if (v67)
          {
            if (v66[47] >= 0)
              v69 = v66 + 24;
            else
              v69 = (const void *)*((_QWORD *)v66 + 3);
            memmove(v68, v69, v67);
          }
          strcpy((char *)v68 + v67, "_Btile_");
          std::to_string(&v89, a5);
          if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v70 = &v89;
          else
            v70 = (std::string *)v89.__r_.__value_.__r.__words[0];
          if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v71 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
          else
            v71 = v89.__r_.__value_.__l.__size_;
          v72 = std::string::append((std::string *)&v91, (const std::string::value_type *)v70, v71);
          v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
          __p[2] = (void *)v72->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v73;
          v72->__r_.__value_.__l.__size_ = 0;
          v72->__r_.__value_.__r.__words[2] = 0;
          v72->__r_.__value_.__r.__words[0] = 0;
          v74 = ZinObjectNameFactory::ZinObjectNameFactory(&v99, __p);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v89.__r_.__value_.__l.__data_);
          if (SBYTE7(v92) < 0)
            operator delete((void *)v91);
          v75 = *(_QWORD *)(a3 + 16);
          (*(void (**)(void **__return_ptr, _QWORD, _QWORD, _QWORD, __n128))(*(_QWORD *)(*a2)[1] + 80))(__p, (*a2)[1], 0, 0, v74);
          v76 = operator new(0x78uLL);
          *((_QWORD *)&v91 + 1) = v76 + 30;
          *(_QWORD *)&v92 = v76 + 30;
          v76[28] = __p[14];
          v77 = *(_OWORD *)&__p[12];
          v78 = *(_OWORD *)&__p[8];
          *((_OWORD *)v76 + 5) = *(_OWORD *)&__p[10];
          *((_OWORD *)v76 + 6) = v77;
          v79 = *(_OWORD *)&__p[2];
          *(_OWORD *)v76 = *(_OWORD *)__p;
          *((_OWORD *)v76 + 1) = v79;
          v80 = *(_OWORD *)&__p[6];
          *((_OWORD *)v76 + 2) = *(_OWORD *)&__p[4];
          *((_OWORD *)v76 + 3) = v80;
          *((_OWORD *)v76 + 4) = v78;
          *(_QWORD *)&v91 = v76;
          v81 = (*(uint64_t (**)(char *, _QWORD, _QWORD))(*(_QWORD *)v66 + 32))(v66, 0, 0);
          v82 = ZinBuilder::CreateBroadcast(v75, (uint64_t)&v99, (uint64_t *)&v91, (uint64_t)&v107, *(_DWORD *)(v81 + 88));
          (*(void (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v10 + 760))(v10, v82);
          if ((_QWORD)v91)
          {
            *((_QWORD *)&v91 + 1) = v91;
            operator delete((void *)v91);
          }
          v83 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v10 + 704))(v10);
          v84 = (ZinIrOpLayer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 704))(a3);
          v85 = (uint64_t *)ZinIrOpLayer::GetGroupId(v84);
          ZinIrOpLayer::SetGroupId(v83, *v85);
          *(_QWORD *)&v99 = off_24C01FBB0;
          if ((SHIBYTE(v100) & 0x80000000) == 0)
            goto LABEL_100;
          v44 = (void *)*((_QWORD *)&v99 + 1);
        }
        operator delete(v44);
LABEL_100:
        if (!v108)
          return;
        v64 = &v107;
        goto LABEL_102;
      }
    }
  }
  else if (*((_QWORD *)v10 + 46))
  {
    v45 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)**a2 + 32))(**a2, 0, 0);
    ZinBroadcastLayerUtils::GetBroadcastDimensionMap((ZinBroadcastLayerUtils *)(v45 + 48), (const ZinTensorDimensions *)v109, &v99);
    if (BYTE8(v101))
    {
      v46 = *(_QWORD *)(a3 + 368);
      if (*(char *)(v46 + 47) >= 0)
        v47 = *(unsigned __int8 *)(v46 + 47);
      else
        v47 = *(_QWORD *)(v46 + 32);
      v48 = &v107;
      std::string::basic_string[abi:ne180100]((uint64_t)&v107, v47 + 7);
      if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v48 = (std::string *)v107.__r_.__value_.__r.__words[0];
      if (v47)
      {
        if (*(char *)(v46 + 47) >= 0)
          v49 = (const void *)(v46 + 24);
        else
          v49 = *(const void **)(v46 + 24);
        memmove(v48, v49, v47);
      }
      strcpy((char *)v48 + v47, "_Btile_");
      std::to_string(&v89, a5);
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = &v89;
      else
        v50 = (std::string *)v89.__r_.__value_.__r.__words[0];
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
      else
        v51 = v89.__r_.__value_.__l.__size_;
      v52 = std::string::append(&v107, (const std::string::value_type *)v50, v51);
      v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      __p[2] = (void *)v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      v54 = ZinObjectNameFactory::ZinObjectNameFactory(&v91, __p);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v107.__r_.__value_.__l.__data_);
      v55 = *(_QWORD *)(a3 + 16);
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, _QWORD, __n128))(*(_QWORD *)**a2 + 80))(__p, **a2, 0, 0, v54);
      v56 = operator new(0x78uLL);
      v107.__r_.__value_.__l.__size_ = (std::string::size_type)(v56 + 30);
      v107.__r_.__value_.__r.__words[2] = (std::string::size_type)(v56 + 30);
      v56[28] = __p[14];
      v57 = *(_OWORD *)&__p[12];
      v58 = *(_OWORD *)&__p[8];
      *((_OWORD *)v56 + 5) = *(_OWORD *)&__p[10];
      *((_OWORD *)v56 + 6) = v57;
      v59 = *(_OWORD *)&__p[2];
      *(_OWORD *)v56 = *(_OWORD *)__p;
      *((_OWORD *)v56 + 1) = v59;
      v60 = *(_OWORD *)&__p[6];
      *((_OWORD *)v56 + 2) = *(_OWORD *)&__p[4];
      *((_OWORD *)v56 + 3) = v60;
      *((_OWORD *)v56 + 4) = v58;
      v107.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
      v61 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v46 + 32))(v46, 0, 0);
      v62 = ZinBuilder::CreateBroadcast(v55, (uint64_t)&v91, (uint64_t *)&v107, (uint64_t)&v99, *(_DWORD *)(v61 + 88));
      *((_QWORD *)v10 + 46) = v62;
      if (v107.__r_.__value_.__r.__words[0])
      {
        v107.__r_.__value_.__l.__size_ = v107.__r_.__value_.__r.__words[0];
        operator delete(v107.__r_.__value_.__l.__data_);
        v62 = *((_QWORD *)v10 + 46);
      }
      v63 = (uint64_t *)ZinIrOpLayer::GetGroupId(*(ZinIrOpLayer **)(a3 + 368));
      ZinIrOpLayer::SetGroupId(v62, *v63);
      *(_QWORD *)&v91 = off_24C01FBB0;
      if (SHIBYTE(v92) < 0)
        operator delete(*((void **)&v91 + 1));
      if (BYTE8(v101))
      {
        v64 = (std::string *)&v99;
LABEL_102:
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v64);
      }
    }
  }
}

void sub_206E15F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (a39 < 0)
    operator delete(__p);
  if (a56)
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a51);
  _Unwind_Resume(a1);
}

uint64_t ZinMirBatchOrChannelSplitter::CreateSplitLayer(uint64_t a1, uint64_t **a2, uint64_t a3, SplitInfo *a4, uint64_t a5, uint64_t *a6, __int128 *a7, uint64_t a8, uint64_t a9, ZinIrOpLayer **a10)
{
  const char *v15;
  size_t v16;
  std::string *v17;
  const void *v18;
  char *v19;
  std::string *v20;
  std::string::size_type size;
  std::string *v22;
  uint64_t *v23;
  __int128 v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t **v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  ZinIrOpLayer *SplitLayer;
  _BOOL4 v39;
  uint64_t v40;
  std::string::size_type v41;
  ZinIrOpLayer *v42;
  uint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  char v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unsigned int v54;
  ZinIrTensor *v55;
  char v56;
  std::string::size_type v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *TiledLayerTensorRegions;
  _OWORD *v68;
  uint64_t *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  __int128 v78;
  int v79;
  std::string::size_type v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  std::string::size_type v96;
  __int128 v97;
  uint64_t v99;
  std::__shared_weak_count *v100;
  void (**v101)(ZinObjectNameFactory *__hidden);
  std::string v102;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  void (**v108)(ZinObjectNameFactory *__hidden);
  std::string v109;
  uint64_t v110;
  std::string v111;
  int v112;
  uint64_t v113;
  char v114;
  uint64_t v115[3];
  _QWORD v116[5];
  uint64_t v117;
  _QWORD v118[3];
  std::string v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  int v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  std::string __p;
  _BYTE v143[48];
  char v144;
  std::string v145;
  __int128 v146;
  __int16 v147;
  char v148;
  void *v149;
  void *v150;
  uint64_t v151;
  __int16 v152;
  _QWORD **v153;
  _QWORD *v154[5];

  v154[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 27))
    v15 = "_Btile_";
  else
    v15 = "_Ctile_";
  if (*(char *)(a9 + 47) >= 0)
    v16 = *(unsigned __int8 *)(a9 + 47);
  else
    v16 = *(_QWORD *)(a9 + 32);
  v17 = &v119;
  std::string::basic_string[abi:ne180100]((uint64_t)&v119, v16 + 7);
  if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = (std::string *)v119.__r_.__value_.__r.__words[0];
  if (v16)
  {
    if (*(char *)(a9 + 47) >= 0)
      v18 = (const void *)(a9 + 24);
    else
      v18 = *(const void **)(a9 + 24);
    memmove(v17, v18, v16);
  }
  v19 = (char *)v17 + v16;
  *(_DWORD *)v19 = *(_DWORD *)v15;
  *(_DWORD *)(v19 + 3) = *(_DWORD *)(v15 + 3);
  v19[7] = 0;
  std::to_string(&v145, a8);
  if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v145;
  else
    v20 = (std::string *)v145.__r_.__value_.__r.__words[0];
  if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v145.__r_.__value_.__r.__words[2]);
  else
    size = v145.__r_.__value_.__l.__size_;
  v22 = std::string::append(&v119, (const std::string::value_type *)v20, size);
  v23 = a6;
  v24 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v24;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(&v108, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v145.__r_.__value_.__l.__data_);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v119.__r_.__value_.__l.__data_);
  CreateSplitCopyTensor((const ZinTensorDimensions *)((char *)a7 + 40), (ZinObjectNameFactory *)&v108, (const ZinIrOpLayer *)a9, &v106);
  v104 = v106;
  v105 = v107;
  if (v107)
  {
    p_shared_owners = (unint64_t *)&v107->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
  }
  ZinObjectNameFactory::CreateName((uint64_t)&v108, 1u, &__p);
  *a10 = (ZinIrOpLayer *)(*(uint64_t (**)(uint64_t, uint64_t *, std::string *))(*(_QWORD *)a9 + 176))(a9, &v104, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v27 = v105;
  if (v105)
  {
    v28 = (unint64_t *)&v105->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (ZinIrOpLayer::IsANELayer(*a10))
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*a10;
    v30 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 264);
    if (v30 && *(_BYTE *)(a1 + 27))
      *(_QWORD *)(v30 + 104) = *(_QWORD *)(v106 + 48);
    ZinMirBatchOrChannelSplitter::AdjustBroadcastInfoForSplitLayer(a1, (_QWORD **)a6, a9, (ZinIrOpLayer **)&__p, a8);
  }
  v31 = *((_QWORD *)*a10 + 8);
  v32 = *(_DWORD *)(v31 + 8);
  if (v32 != 85)
  {
    v33 = a2;
    if (v32 == 36)
    {
      v34 = (__int128 *)*((_QWORD *)a7 + 16);
      *(_QWORD *)v143 = *((_QWORD *)v34 + 4);
      v35 = *v34;
      v36 = v34[1];
      *(_OWORD *)&v143[8] = *(_OWORD *)(v31 + 56);
      *(_OWORD *)&v143[24] = *(_OWORD *)(v31 + 72);
      *(_QWORD *)&v143[40] = *(_QWORD *)(v31 + 88);
      *(_OWORD *)(v31 + 16) = v35;
      *(_OWORD *)(v31 + 32) = v36;
      v37 = *(_OWORD *)v143;
      *(_OWORD *)(v31 + 64) = *(_OWORD *)&v143[16];
      *(_OWORD *)(v31 + 80) = *(_OWORD *)&v143[32];
      *(_OWORD *)(v31 + 48) = v37;
    }
    goto LABEL_44;
  }
  if (!*(_BYTE *)(a1 + 28))
  {
    v33 = a2;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a9 + 120))(a9))
    {
      v42 = *a10;
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a9 + 128))(&__p, a9);
      if ((*(uint64_t (**)(uint64_t, std::string::size_type))(*(_QWORD *)a9 + 152))(a9, __p.__r_.__value_.__r.__words[0]) != 1)ZinAssertImpl("wrong kernel-tensor index");
      v43 = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*v23 + 8) + 40))(*(_QWORD *)(*v23 + 8), 0, 0);
      v44 = (std::__shared_weak_count *)v43[1];
      v99 = *v43;
      v100 = v44;
      if (v44)
      {
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      v47 = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t *))(*(_QWORD *)v42 + 240))(v42, &v99);
      v48 = v100;
      if (v100)
      {
        v49 = (unint64_t *)&v100->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      if ((v47 & 1) == 0)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          v74 = (_QWORD *)((char *)v42 + 24);
          if (*((char *)v42 + 47) < 0)
            v74 = (_QWORD *)*v74;
          LODWORD(v119.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v119.__r_.__value_.__r.__words + 4) = (std::string::size_type)v74;
          _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "[TrySplit] Splitter Fail to create tensor kernel for layer %s.\n", (uint8_t *)&v119, 0xCu);
        }
        v75 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v76 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        goto LABEL_88;
      }
      v51 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v52 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
    }
    goto LABEL_44;
  }
  v101 = off_24C01FBB0;
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v102, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
  else
    v102 = v109;
  v103 = v110;
  v117 = *(_QWORD *)(a9 + 16);
  v118[0] = v118;
  v118[1] = v118;
  v118[2] = 0;
  LOBYTE(v146) = 0;
  BYTE8(v146) = 0;
  v147 = 0;
  v148 = 0;
  v154[0] = 0;
  v154[1] = 0;
  v150 = 0;
  v151 = 0;
  v149 = 0;
  v152 = 0;
  v153 = v154;
  v54 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)a9, 0) + 88);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a9 + 392))(v116, a9);
  if (ZinMirKernelSizeSplitterEngine::Analyze((ZinMirKernelSizeSplitterEngine *)&v117, a9, v54, (uint64_t)v116, (uint64_t)&v145))
  {
    SplitLayer = 0;
    v33 = a2;
    goto LABEL_127;
  }
  HIBYTE(v147) = 1;
  v55 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a9 + 32))(a9, 0, 0);
  *(_QWORD *)&v146 = ZinIrTensor::GetInterleave(v55);
  BYTE8(v146) = v56;
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a9 + 400))(&__p, a9);
  v57 = __p.__r_.__value_.__l.__size_;
  v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a9 + 88))(a9);
  v59 = v58;
  if ((_BYTE)v147)
    v57 /= v58;
  ZinMirKernelSizeSplitterEngine::DetermineGroupMergeFactor((uint64_t)&v117, v57, v58, (uint64_t)&v145);
  v61 = *(_QWORD *)a4;
  v60 = *((_QWORD *)a4 + 1);
  v113 = 0;
  v114 = 0;
  memset(v115, 0, sizeof(v115));
  v63 = v60 - v61;
  v62 = v63 == 0;
  v64 = v63 / 24;
  v95 = v64;
  if (v62)
  {
    v112 = 1;
    v96 = 728 * a8;
    v68 = (_OWORD *)*((_QWORD *)a7 + 16);
    v69 = (uint64_t *)v68 + 1;
    v78 = v146;
LABEL_108:
    v97 = v78;
    goto LABEL_109;
  }
  v65 = 0;
  if (v64 <= 1)
    v66 = 1;
  else
    v66 = v64;
  do
  {
    TiledLayerTensorRegions = SplitInfo::GetTiledLayerTensorRegions(a4, (const ZinIrOpLayer *)a9);
    std::__optional_copy_base<TiledLayerTensorRegions,false>::__optional_copy_base[abi:ne180100]((TiledLayerTensorRegions *)&v119, (const TiledLayerTensorRegions *)(*TiledLayerTensorRegions + v65));
    if (!(_BYTE)v133)
      ZinAssertImpl("tiled region must exist");
    __p.__r_.__value_.__s.__data_[0] = 0;
    v144 = 0;
    ZinIrLayerSplitInfo::AppendNonCompressed(v115, v122, (const ZinIrLayerSplitInfo::Part::Constraints *)&__p);
    std::__optional_destruct_base<ZinIrLayerSplitInfo::Part::Constraints,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
    std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v119);
    v65 += 232;
    --v66;
  }
  while (v66);
  v112 = 1;
  v96 = v115[0] + 728 * a8;
  v68 = (_OWORD *)*((_QWORD *)a7 + 16);
  v69 = (uint64_t *)v68 + 1;
  if (!v114)
  {
    v78 = v146;
    goto LABEL_108;
  }
  v97 = 0u;
LABEL_109:
  v79 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a9 + 32))(a9, 0, 0) + 88);
  if (v59 <= 1)
    v80 = 0;
  else
    v80 = a8;
  if (v59 <= 1)
    v81 = a8;
  else
    v81 = 0;
  if (v59 < 2)
  {
    v82 = 1;
  }
  else
  {
    v82 = v59 / v95;
    if (v59 % v95)
      ZinAssertImpl("invalid tile count");
  }
  v83 = *v69;
  v119.__r_.__value_.__r.__words[0] = a9;
  v119.__r_.__value_.__l.__size_ = v96;
  v119.__r_.__value_.__r.__words[2] = v80;
  v120 = v81;
  v84 = a7[3];
  v123 = a7[2];
  v124 = v84;
  v125 = a7[4];
  v85 = a7[1];
  v121 = *a7;
  v122 = v85;
  v87 = v68[1];
  v86 = v68[2];
  v88 = v68[4];
  v129 = v68[3];
  v130 = v88;
  v127 = v87;
  v128 = v86;
  v126 = *v68;
  v131 = *v68;
  v89 = v68[1];
  v90 = v68[2];
  v91 = v68[4];
  v134 = v68[3];
  v135 = v91;
  v132 = v89;
  v133 = v90;
  v136 = v83;
  v137 = v82;
  v138 = v97;
  v139 = v79;
  v141 = 0;
  v140 = 0;
  ZinObjectNameFactory::CreateName((uint64_t)&v101, 1u, &v111);
  v33 = a2;
  SplitLayer = (ZinIrOpLayer *)ZinNEConvLayer::CreateSplitLayer((__int128 *)&v111, (uint64_t)&v112, (unint64_t *)&v119);
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
  v92 = v141;
  if (v141)
  {
    v93 = (unint64_t *)&v141->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v119.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
  std::vector<ZinIrLayerSplitInfo::Part>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
LABEL_127:
  std::__tree<std::__value_type<std::shared_ptr<ZinIrConstData>,std::vector<unsigned long>>,std::__map_value_compare<std::shared_ptr<ZinIrConstData>,std::__value_type<std::shared_ptr<ZinIrConstData>,std::vector<unsigned long>>,std::less<std::shared_ptr<ZinIrConstData>>,true>,std::allocator<std::__value_type<std::shared_ptr<ZinIrConstData>,std::vector<unsigned long>>>>::destroy((uint64_t)&v153, v154[0]);
  if (v149)
  {
    v150 = v149;
    operator delete(v149);
  }
  std::__list_imp<ZinIrSection *>::clear(v118);
  *a10 = SplitLayer;
  v101 = off_24C01FBB0;
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v102.__r_.__value_.__l.__data_);
LABEL_44:
    SplitLayer = *a10;
  }
  if (!SplitLayer)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a9 + 47) < 0)
        v41 = *(_QWORD *)(a9 + 24);
      else
        v41 = a9 + 24;
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v41;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "[TrySplit] Splitter Fail : In region Layer %s fail to split.\n", (uint8_t *)&__p, 0xCu);
    }
LABEL_88:
    v40 = 3;
    goto LABEL_89;
  }
  v145.__r_.__value_.__r.__words[0] = a9;
  v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
  v119.__r_.__value_.__l.__size_ = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v119);
  v39 = ZinIrOpLayerGraph::AddNode(v33, SplitLayer, (ZinIrOpLayer ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
  if (__p.__r_.__value_.__l.__size_)
  {
    __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  }
  if ((v39 & ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)v33, v23, (uint64_t)*a10)) != 0)v40 = 0;
  else
    v40 = 3;
LABEL_89:
  v70 = v107;
  if (v107)
  {
    v71 = (unint64_t *)&v107->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v108 = off_24C01FBB0;
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  return v40;
}

void sub_206E16B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  uint64_t v57;

  std::vector<ZinIrLayerSplitInfo::Part>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
  ZinMirKernelSizeSplitterEngine::Analysis::~Analysis((ZinMirKernelSizeSplitterEngine::Analysis *)(v57 - 232));
  std::__list_imp<ZinIrSection *>::clear(a14);
  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  a31 = (uint64_t)off_24C01FBB0;
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(a1);
}

void CreateSplitCopyTensor(const ZinTensorDimensions *a1@<X0>, ZinObjectNameFactory *a2@<X1>, const ZinIrOpLayer *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  ZinIrTensor *v14;
  int v15;
  ZinIrTensor::MirInfo *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  ZinIrTensor::MirInfo *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  _QWORD *v28;
  uint64_t v29[3];
  __int128 v30;
  char v31;

  (*(void (**)(__int128 *__return_ptr, ZinObjectNameFactory *, _QWORD))(*(_QWORD *)a2 + 16))(&v30, a2, 0);
  v7 = *((_QWORD *)a3 + 2);
  v8 = *(_DWORD *)((*(uint64_t (**)(const ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0)+ 88);
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v21 = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v25 = 0;
  ZinIrTensor::CreateTensor(v7, v8, (__int128 *)a1, &v30, &v28, &v26, &v21, v29);
  v9 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v28;
  v28 = 0;
  if (v12)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v28, v12);
  v13 = (uint64_t *)v29[0];
  v14 = (ZinIrTensor *)(*(uint64_t (**)(const ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0);
  ZinIrTensor::CopyTensorMirInfo(v14, &v20);
  v15 = ZinIrTensor::SetTensorMirInfo(v13, &v20);
  v16 = v20;
  v20 = 0;
  if (v16)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v20, v16);
  if (v15)
  {
    *a4 = 0;
    a4[1] = 0;
    v17 = (std::__shared_weak_count *)v29[1];
    if (v29[1])
    {
      v18 = (unint64_t *)(v29[1] + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)v29;
  }
  if (v31 < 0)
    operator delete((void *)v30);
}

void sub_206E16E88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v4 = v5;
  v5 = 0;
  if (v4)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)va, v4);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (*(char *)(v2 - 33) < 0)
    operator delete(*(void **)(v2 - 56));
  _Unwind_Resume(a1);
}

uint64_t ZinMirBatchOrChannelSplitter::BuildConcatsForOutputNodes(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, __n128 a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v12;
  char **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  ZinIrTensor *v17;
  ZinIrTensor::MirInfo *v18;
  ZinIrOpLayer *v19;
  char v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  __n128 v26;
  _OWORD v28[2];
  int v29;
  ZinIrTensor::MirInfo *v30;
  ZinIrOpLayerGraph **v31;
  void *__p;
  char v33;
  ZinIrOpLayer **v34;
  void *v35;
  void *v36;
  ZinIrOpLayerGraph *v37;
  uint8_t buf[4];
  _QWORD *v39;
  ZinIrOpLayerGraph *v40;
  ZinIrOpLayerGraph *v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD **)(a3 + 24);
  v8 = (_QWORD *)(a3 + 32);
  if (v7 == (_QWORD *)(a3 + 32))
    return 0;
  a5.n128_u64[0] = 136315138;
  v26 = a5;
  while (1)
  {
    v37 = (ZinIrOpLayerGraph *)v7[4];
    v40 = v37;
    v31 = &v40;
    __p = (void *)1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v34, &v31);
    ZinObjectNameFactory::ZinObjectNameFactory(&v31, (char *)v37 + 24);
    v12 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(a7, &v37);
    if (!v12)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v13 = (char **)(v12 + 3);
    if (*(unsigned __int8 *)(a1 + 27) == (uint64_t)(v12[4] - v12[3]) >> 3)
      v14 = (_QWORD *)(a4 + 120);
    else
      v14 = (_QWORD *)(a4 + 128);
    if (!*v14)
      ZinAssertImpl("Number of split layers doesn't match tile count.");
    v15 = *((_QWORD *)v37 + 2);
    if (*(_BYTE *)(a1 + 27))
      v16 = 5;
    else
      v16 = 0;
    v17 = (ZinIrTensor *)(*(uint64_t (**)(void))(*(_QWORD *)v37 + 32))();
    ZinIrTensor::CopyTensorMirInfo(v17, &v30);
    ZinBuilder::CreateConcat(v15, (uint64_t)&v31, v13, v16, 1, &v30, 0, (uint64_t)&v40);
    v18 = v30;
    v30 = 0;
    if (v18)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v30, v18);
    if (!v42)
      std::__throw_bad_optional_access[abi:ne180100]();
    v19 = (ZinIrOpLayer *)*((_QWORD *)v41 - 1);
    if (v19)
    {
      if (!ZinIrOpLayerGraph::AddNode(a2, *((ZinIrOpLayer **)v41 - 1), &v34)
        || !ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)a2, (uint64_t *)v13, (uint64_t)v19)|| (memset(v28, 0, sizeof(v28)), v29 = 1065353216, v20 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)v37, v19, v28), std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v28), (v20 & 1) == 0))
      {
        ZinAssertImpl("Split Error", *(_OWORD *)&v26);
      }
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v21 = (_QWORD *)((char *)v37 + 24);
      if (*((char *)v37 + 47) < 0)
        v21 = (_QWORD *)*v21;
      *(_DWORD *)buf = v26.n128_u32[0];
      v39 = v21;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "[TrySplit] Splitter Fail :  Layer %s fail to create concat and copy.\n", buf, 0xCu);
    }
    if (v42 && v40)
    {
      v41 = v40;
      operator delete(v40);
    }
    v31 = (ZinIrOpLayerGraph **)off_24C01FBB0;
    if (v33 < 0)
      operator delete(__p);
    v34 = (ZinIrOpLayer **)&unk_24C02BB18;
    if (v35)
    {
      v36 = v35;
      operator delete(v35);
    }
    if (!v19)
      break;
    v22 = (_QWORD *)v7[1];
    if (v22)
    {
      do
      {
        v23 = v22;
        v22 = (_QWORD *)*v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        v23 = (_QWORD *)v7[2];
        v24 = *v23 == (_QWORD)v7;
        v7 = v23;
      }
      while (!v24);
    }
    v7 = v23;
    if (v23 == v8)
      return 0;
  }
  return 3;
}

void sub_206E1720C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void (**a19)(ZinObjectNameFactory *__hidden this), void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,void *a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a13);
  if (*(_BYTE *)(v29 - 104))
  {
    v31 = *(void **)(v29 - 128);
    if (v31)
    {
      *(_QWORD *)(v29 - 120) = v31;
      operator delete(v31);
    }
  }
  a19 = off_24C01FBB0;
  if (a25 < 0)
    operator delete(__p);
  a27 = &unk_24C02BB18;
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirBatchOrChannelSplitter::DetermineInputLayersForCurrentSplitLayer(uint64_t a1, uint64_t **a2, uint64_t a3, SplitInfo *a4, unint64_t a5, _QWORD *a6, uint64_t a7, const ZinIrOpLayer *a8, _QWORD *a9, void **a10)
{
  uint64_t v11;
  SplitInfo *v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  const void ***v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  __n128 v28;
  uint64_t v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t View;
  ZinIrOpLayer *v44;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  ZinIrOpLayer **v53;
  char *v54;
  char *v55;
  ZinIrOpLayer *v56;
  _BOOL4 v57;
  int v58;
  __n128 v59;
  uint64_t v60;
  int v61;
  ZinIrOpLayer *v62;
  _QWORD *v63;
  unint64_t v64;
  ZinIrOpLayer **v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  ZinIrOpLayer **v72;
  char *v73;
  char *v74;
  ZinIrOpLayer *v75;
  BOOL v76;
  char v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  uint64_t v82;
  int64x2_t v84;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  std::string v89;
  _BYTE v90[172];
  _QWORD *v91;
  std::string v92;
  char v93;
  _QWORD v94[5];
  int64x2_t v95;
  int64x2_t v96;
  uint64_t v97;
  void *__p[2];
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  std::string::size_type v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  _QWORD v105[3];
  char v106;
  const void *v107[2];
  char v108;
  const void **v109;
  const void **v110;
  _QWORD v111[5];

  v111[2] = *MEMORY[0x24BDAC8D0];
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a6[1] - *a6) >> 3) <= a5)
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v11 = *((_QWORD *)a8 + 11);
  if (*((_QWORD *)a8 + 12) != v11)
  {
    v13 = a4;
    v15 = 0;
    v88 = a3 + 72;
    v86 = (_QWORD *)(*a6 + 40 * a5);
    v87 = a3 + 80;
    v82 = (uint64_t)(a10 + 2);
    v84 = vdupq_n_s64(1uLL);
    while (1)
    {
      v109 = 0;
      v109 = *(const void ***)(v11 + 8 * v15);
      v16 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(v88, (ZinIrOpLayer **)&v109);
      v17 = *SplitInfo::GetTiledLayerTensorRegions(v13, a8) + 232 * a5;
      if (!*(_BYTE *)(v17 + 224))
        ZinAssertImpl("Internal Batch Split Error");
      if (v87 != v16)
        break;
      if (*(_BYTE *)(a1 + 27)
        && *(_QWORD *)((*((uint64_t (**)(const void **, _QWORD, _QWORD))*v109 + 4))(v109, 0, 0) + 48) == 1)
      {
        v20 = *(_QWORD *)(v17 + 128);
        if (*(_QWORD *)(v20 + 80 * v15 + 40) != 1 || *(_QWORD *)(v20 + 80 * v15))
          ZinAssertImpl("wrong tile region", v82);
        goto LABEL_17;
      }
      if (*(_BYTE *)(a1 + 28)
        && *(_QWORD *)((*((uint64_t (**)(const void **, _QWORD, _QWORD))*v109 + 4))(v109, 0, 0) + 56) == 1)
      {
        v21 = *(_QWORD *)(v17 + 128);
        if (*(_QWORD *)(v21 + 80 * v15 + 48) != 1 || *(_QWORD *)(v21 + 80 * v15 + 8))
          ZinAssertImpl("wrong tile region", v82);
LABEL_17:
        v19 = &v109;
LABEL_18:
        *(_QWORD *)(*a9 + 8 * v15) = *v19;
        goto LABEL_19;
      }
      if (*(_BYTE *)(a1 + 27))
        v22 = "_BSinview_";
      else
        v22 = "_CSinview_";
      std::string::basic_string[abi:ne180100]<0>(v107, v22);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v109 + 3, v107, (uint64_t)&v92);
      v23 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v23 + 1;
      std::to_string(&v89, v23);
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v89;
      else
        v24 = (std::string *)v89.__r_.__value_.__r.__words[0];
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
      else
        size = v89.__r_.__value_.__l.__size_;
      v26 = std::string::append(&v92, (const std::string::value_type *)v24, size);
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      *(_QWORD *)&v99 = *((_QWORD *)&v26->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      v28 = ZinObjectNameFactory::ZinObjectNameFactory(v105, __p);
      if (SBYTE7(v99) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v92.__r_.__value_.__l.__data_);
      v29 = (*((uint64_t (**)(const void **, _QWORD, _QWORD, __n128))*v109 + 4))(v109, 0, 0, v28);
      CreateSplitCopyTensor((const ZinTensorDimensions *)(v29 + 48), (ZinObjectNameFactory *)v105, (const ZinIrOpLayer *)v109, &v103);
      ZinObjectNameFactory::CreateName((uint64_t)v105, 0, &v92);
      v30 = std::string::append(&v92, "_batchview", 0xAuLL);
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      *(_QWORD *)&v99 = *((_QWORD *)&v30->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v89, a5);
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v89;
      else
        v32 = (std::string *)v89.__r_.__value_.__r.__words[0];
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
      else
        v33 = v89.__r_.__value_.__l.__size_;
      v34 = std::string::append((std::string *)__p, (const std::string::value_type *)v32, v33);
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v102 = v34->__r_.__value_.__r.__words[2];
      v101 = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
      if (SBYTE7(v99) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v92.__r_.__value_.__l.__data_);
      v36 = *(_QWORD *)(v17 + 128) + 80 * v15;
      v37 = *(_OWORD *)(v36 + 40);
      v38 = *(_OWORD *)(v36 + 56);
      v100 = *(_QWORD *)(v36 + 72);
      *(_OWORD *)__p = v37;
      v99 = v38;
      v39 = *(_QWORD *)(v17 + 128);
      if (*(_BYTE *)(a1 + 27))
      {
        v40 = 0;
        v41 = *(_QWORD *)(v39 + 80 * v15);
      }
      else
      {
        v41 = 0;
        v40 = *(_QWORD *)(v39 + 80 * v15 + 8);
      }
      memset(&v94[2], 0, 24);
      v42 = *((_QWORD *)a8 + 2);
      v94[0] = v41;
      v94[1] = v40;
      v95 = v84;
      v96 = v84;
      v97 = 1;
      View = ZinBuilder::CreateView(v42, (uint64_t)&v101, v103, (__int128 *)__p, (uint64_t)v94);
      v44 = (ZinIrOpLayer *)View;
      v46 = (uint64_t *)a10[1];
      v45 = (unint64_t)a10[2];
      if ((unint64_t)v46 >= v45)
      {
        v48 = ((char *)v46 - (_BYTE *)*a10) >> 3;
        if ((unint64_t)(v48 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v49 = v45 - (_QWORD)*a10;
        v50 = v49 >> 2;
        if (v49 >> 2 <= (unint64_t)(v48 + 1))
          v50 = v48 + 1;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v51 = v50;
        if (v51)
          v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v82, v51);
        else
          v52 = 0;
        v53 = (ZinIrOpLayer **)&v52[8 * v48];
        *v53 = v44;
        v47 = v53 + 1;
        v55 = (char *)*a10;
        v54 = (char *)a10[1];
        if (v54 != *a10)
        {
          do
          {
            v56 = (ZinIrOpLayer *)*((_QWORD *)v54 - 1);
            v54 -= 8;
            *--v53 = v56;
          }
          while (v54 != v55);
          v54 = (char *)*a10;
        }
        *a10 = v53;
        a10[1] = v47;
        a10[2] = &v52[8 * v51];
        if (v54)
          operator delete(v54);
      }
      else
      {
        *v46 = View;
        v47 = v46 + 1;
      }
      a10[1] = v47;
      v111[0] = a8;
      v89.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
      v89.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v92, &v89);
      v57 = ZinIrOpLayerGraph::AddNode(a2, v44, (ZinIrOpLayer ***)&v92);
      v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
      if (v92.__r_.__value_.__l.__size_)
      {
        v92.__r_.__value_.__r.__words[2] = v92.__r_.__value_.__l.__size_;
        operator delete((void *)v92.__r_.__value_.__l.__size_);
      }
      v58 = v57 & ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v109, (uint64_t)v44, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      *(_QWORD *)(*a9 + 8 * v15) = v44;
      if (*(_DWORD *)(*((_QWORD *)a8 + 8) + 8) == 7)
      {
        v59 = ZinObjectNameFactory::ZinObjectNameFactory(&v92, (char *)v44 + 24);
        v60 = *((_QWORD *)a8 + 2);
        v61 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD, __n128))(*(_QWORD *)v44 + 32))(v44, 0, 0, v59)+ 88);
        v91 = 0;
        v90[0] = 0;
        v90[168] = 0;
        v62 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v60, (uint64_t)&v92, (uint64_t)v44, v61, &v91, 0, (uint64_t)v90, 1.0);
        v63 = v91;
        v91 = 0;
        if (v63)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v91, v63);
        v65 = (ZinIrOpLayer **)a10[1];
        v64 = (unint64_t)a10[2];
        if ((unint64_t)v65 >= v64)
        {
          v67 = ((char *)v65 - (_BYTE *)*a10) >> 3;
          if ((unint64_t)(v67 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v68 = v64 - (_QWORD)*a10;
          v69 = v68 >> 2;
          if (v68 >> 2 <= (unint64_t)(v67 + 1))
            v69 = v67 + 1;
          if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
            v70 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v70 = v69;
          if (v70)
            v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v82, v70);
          else
            v71 = 0;
          v72 = (ZinIrOpLayer **)&v71[8 * v67];
          *v72 = v62;
          v66 = v72 + 1;
          v74 = (char *)*a10;
          v73 = (char *)a10[1];
          if (v73 != *a10)
          {
            do
            {
              v75 = (ZinIrOpLayer *)*((_QWORD *)v73 - 1);
              v73 -= 8;
              *--v72 = v75;
            }
            while (v73 != v74);
            v73 = (char *)*a10;
          }
          *a10 = v72;
          a10[1] = v66;
          a10[2] = &v71[8 * v70];
          if (v73)
            operator delete(v73);
        }
        else
        {
          *v65 = v62;
          v66 = v65 + 1;
        }
        a10[1] = v66;
        v110 = v109;
        v111[0] = &v110;
        v111[1] = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(&v89, v111);
        v76 = ZinIrOpLayerGraph::AddNode(a2, v62, (ZinIrOpLayer ***)&v89);
        v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
        if (v89.__r_.__value_.__l.__size_)
        {
          v89.__r_.__value_.__r.__words[2] = v89.__r_.__value_.__l.__size_;
          operator delete((void *)v89.__r_.__value_.__l.__size_);
        }
        v77 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v44, (uint64_t)v62, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        *(_QWORD *)(*a9 + 8 * v15) = v62;
        v92.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
        if (v93 < 0)
          operator delete((void *)v92.__r_.__value_.__l.__size_);
        LOBYTE(v58) = v58 & v76 & v77;
      }
      if (SHIBYTE(v102) < 0)
        operator delete((void *)v101);
      v78 = v104;
      v13 = a4;
      if (v104)
      {
        p_shared_owners = (unint64_t *)&v104->__shared_owners_;
        do
          v80 = __ldaxr(p_shared_owners);
        while (__stlxr(v80 - 1, p_shared_owners));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v105[0] = off_24C01FBB0;
      if (v106 < 0)
        operator delete((void *)v105[1]);
      if (v108 < 0)
      {
        operator delete((void *)v107[0]);
        if ((v58 & 1) == 0)
          return 3;
      }
      else if ((v58 & 1) == 0)
      {
        return 3;
      }
LABEL_19:
      ++v15;
      v11 = *((_QWORD *)a8 + 11);
      if (v15 >= (*((_QWORD *)a8 + 12) - v11) >> 3)
        return 0;
    }
    v18 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v86, &v109);
    if (!v18)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v19 = (const void ***)(v18 + 3);
    goto LABEL_18;
  }
  return 0;
}

void sub_206E17B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (a54 < 0)
    operator delete(__p);
  if (*(char *)(v54 - 217) < 0)
    operator delete(*(void **)(v54 - 240));
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v54 - 216);
  *(_QWORD *)(v54 - 200) = off_24C01FBB0;
  if (*(char *)(v54 - 169) < 0)
    operator delete(*(void **)(v54 - 192));
  if (*(char *)(v54 - 137) < 0)
    operator delete(*(void **)(v54 - 160));
  _Unwind_Resume(a1);
}

_QWORD *SplitInfo::GetTiledLayerTensorRegions(SplitInfo *this, const ZinIrOpLayer *a2)
{
  _QWORD *v2;
  const ZinIrOpLayer *v4;

  v4 = a2;
  v2 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 3, &v4);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v2 + 3;
}

void ZinMirBatchOrChannelSplitter::ResetTileRegion(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  char **v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  void *__p;
  _BYTE *v51;
  unint64_t v52;

  v5 = a1;
  if (*(_BYTE *)(a1 + 27))
    v6 = (unint64_t *)(a3 + 120);
  else
    v6 = (unint64_t *)(a3 + 128);
  v7 = *v6;
  v8 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v9 = 48;
  if (!*(_BYTE *)(v5 + 27))
    v9 = 56;
  v47 = (_QWORD *)v8;
  v10 = *(_QWORD *)(v8 + v9);
  v52 = v10 / v7;
  if (v7 > v10)
    ZinAssertImpl("invalid split tile size");
  std::vector<unsigned long>::vector(&__p, v7, &v52);
  if (v10 % v7)
  {
    v11 = 0;
    v12 = __p;
    v13 = (v51 - (_BYTE *)__p) >> 3;
    do
    {
      if (v13 == v11)
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      ++v12[v11++];
    }
    while (v11 < v10 % v7);
  }
  v14 = v47;
  v15 = 0;
  v16 = 0;
  v44 = (uint64_t)(a4 + 2);
  v45 = v5;
  v46 = v7;
  do
  {
    v18 = v14[8];
    v17 = v14[9];
    v19 = v14[10];
    v20 = (v51 - (_BYTE *)__p) >> 3;
    if (*(_BYTE *)(v5 + 27))
    {
      if (v20 <= v15)
        goto LABEL_41;
      v21 = 0;
      v22 = v14[7];
      v23 = *((_QWORD *)__p + v15);
      v24 = v16;
      v25 = v23;
    }
    else
    {
      if (v20 <= v15)
LABEL_41:
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      v24 = 0;
      v25 = v14[6];
      v23 = *((_QWORD *)__p + v15);
      v21 = v16;
      v22 = v23;
    }
    v26 = a4[1];
    v27 = (unint64_t)a4[2];
    if ((unint64_t)v26 >= v27)
    {
      v48 = v14[10];
      v49 = v23;
      v29 = a4;
      v30 = *a4;
      v31 = 0xCCCCCCCCCCCCCCCDLL * ((v26 - *a4) >> 4);
      v32 = v31 + 1;
      if (v31 + 1 > 0x333333333333333)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v33 = v14[9];
      v34 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v27 - (_QWORD)v30) >> 4);
      if (2 * v34 > v32)
        v32 = 2 * v34;
      if (v34 >= 0x199999999999999)
        v35 = 0x333333333333333;
      else
        v35 = v32;
      if (v35)
        v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>(v44, v35);
      else
        v36 = 0;
      v37 = &v36[80 * v31];
      *(_QWORD *)v37 = v24;
      *((_QWORD *)v37 + 1) = v21;
      *((_QWORD *)v37 + 2) = 0;
      *((_QWORD *)v37 + 3) = 0;
      *((_QWORD *)v37 + 4) = 0;
      *((_QWORD *)v37 + 5) = v25;
      *((_QWORD *)v37 + 6) = v22;
      *((_QWORD *)v37 + 7) = v18;
      *((_QWORD *)v37 + 8) = v33;
      *((_QWORD *)v37 + 9) = v48;
      a4 = v29;
      v39 = *v29;
      v38 = v29[1];
      v40 = v37;
      if (v38 == *v29)
      {
        v5 = v45;
      }
      else
      {
        v5 = v45;
        do
        {
          *((_OWORD *)v40 - 5) = *((_OWORD *)v38 - 5);
          v41 = *((_OWORD *)v38 - 4);
          v42 = *((_OWORD *)v38 - 3);
          v43 = *((_OWORD *)v38 - 1);
          *((_OWORD *)v40 - 2) = *((_OWORD *)v38 - 2);
          *((_OWORD *)v40 - 1) = v43;
          *((_OWORD *)v40 - 4) = v41;
          *((_OWORD *)v40 - 3) = v42;
          v40 -= 80;
          v38 -= 80;
        }
        while (v38 != v39);
        v38 = *v29;
      }
      v7 = v46;
      v28 = v37 + 80;
      *a4 = v40;
      a4[1] = v37 + 80;
      a4[2] = &v36[80 * v35];
      if (v38)
        operator delete(v38);
      v14 = v47;
      v23 = v49;
    }
    else
    {
      *(_QWORD *)v26 = v24;
      *((_QWORD *)v26 + 1) = v21;
      *((_QWORD *)v26 + 2) = 0;
      *((_QWORD *)v26 + 3) = 0;
      *((_QWORD *)v26 + 4) = 0;
      *((_QWORD *)v26 + 5) = v25;
      *((_QWORD *)v26 + 6) = v22;
      *((_QWORD *)v26 + 7) = v18;
      v28 = v26 + 80;
      *((_QWORD *)v26 + 8) = v17;
      *((_QWORD *)v26 + 9) = v19;
    }
    a4[1] = v28;
    v16 += v23;
    ++v15;
  }
  while (v15 != v7);
  if (__p)
  {
    v51 = __p;
    operator delete(__p);
  }
}

void sub_206E17FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinMirBatchOrChannelSplitter::DetermineInputTiling(uint64_t a1, ZinIrOpLayer *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8)
{
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t *v73;
  uint64_t v74;
  unint64_t v76;
  unint64_t v77;
  void *v78[2];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  void *__p;
  void *v97;
  uint64_t v98;
  _BYTE v99[80];
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;

  if (*(_BYTE *)(a1 + 27))
    v8 = (uint64_t *)(a5 + 120);
  else
    v8 = (uint64_t *)(a5 + 128);
  v67 = *v8;
  if (*v8)
  {
    v10 = 0;
    while (1)
    {
      v11 = *a6;
      v70 = v10;
      v74 = *a6 + 80 * v10;
      v110 = 0;
      v111 = 0;
      v112 = 0;
      v12 = *((_QWORD *)a2 + 11);
      if (*((_QWORD *)a2 + 12) != v12)
        break;
LABEL_80:
      v107 = *(unint64_t *)(a3 + 64);
      v108 = v70;
      v109 = 0;
      v78[0] = 0;
      v78[1] = 0;
      *(_QWORD *)&v79 = 0;
      __p = 0;
      v97 = 0;
      v98 = 0;
      TiledLayerTensorRegions::TiledLayerTensorRegions((uint64_t)v99, &v107, (_OWORD *)v74, (uint64_t)v78, (uint64_t)&__p, (uint64_t)&v110, 0, 0);
      if (__p)
      {
        v97 = __p;
        operator delete(__p);
      }
      if (v78[0])
      {
        v78[1] = v78[0];
        operator delete(v78[0]);
      }
      TiledLayerTensorRegions::TiledLayerTensorRegions((TiledLayerTensorRegions *)v78, (const TiledLayerTensorRegions *)v99);
      v95 = 1;
      v59 = a8[1];
      if (v59 >= a8[2])
      {
        v65 = std::vector<std::optional<TiledLayerTensorRegions>>::__push_back_slow_path<std::optional<TiledLayerTensorRegions>>(a8, (uint64_t)v78);
      }
      else
      {
        *(_BYTE *)v59 = 0;
        *(_BYTE *)(v59 + 224) = 0;
        if (v95)
        {
          *(_OWORD *)v59 = *(_OWORD *)v78;
          v60 = v79;
          v61 = v80;
          v62 = v82;
          *(_OWORD *)(v59 + 48) = v81;
          *(_OWORD *)(v59 + 64) = v62;
          *(_OWORD *)(v59 + 16) = v60;
          *(_OWORD *)(v59 + 32) = v61;
          *(_QWORD *)(v59 + 88) = 0;
          *(_QWORD *)(v59 + 96) = 0;
          *(_QWORD *)(v59 + 80) = 0;
          *(_OWORD *)(v59 + 80) = v83;
          *(_QWORD *)(v59 + 96) = v84;
          *(_QWORD *)(v59 + 104) = 0;
          v83 = 0uLL;
          v84 = 0;
          *(_QWORD *)(v59 + 112) = 0;
          *(_QWORD *)(v59 + 120) = 0;
          *(_OWORD *)(v59 + 104) = v85;
          v85 = 0uLL;
          *(_QWORD *)(v59 + 120) = v86;
          *(_QWORD *)(v59 + 128) = 0;
          v86 = 0;
          *(_QWORD *)(v59 + 136) = 0;
          *(_QWORD *)(v59 + 144) = 0;
          *(_OWORD *)(v59 + 128) = v87;
          *(_QWORD *)(v59 + 144) = v88;
          v87 = 0uLL;
          v88 = 0;
          v63 = v89;
          v64 = v90;
          *(_OWORD *)(v59 + 184) = v91;
          *(_OWORD *)(v59 + 168) = v64;
          *(_OWORD *)(v59 + 152) = v63;
          *(_QWORD *)(v59 + 200) = v92;
          *(_QWORD *)(v59 + 208) = v93;
          *(_QWORD *)(v59 + 216) = v94;
          v92 = 0;
          v93 = 0;
          v94 = 0;
          *(_BYTE *)(v59 + 224) = 1;
        }
        v65 = v59 + 232;
      }
      a8[1] = v65;
      std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v78);
      if (v106)
        operator delete(v106);
      if (v104)
      {
        v105 = v104;
        operator delete(v104);
      }
      if (v102)
      {
        v103 = v102;
        operator delete(v102);
      }
      if (v100)
      {
        v101 = v100;
        operator delete(v100);
      }
      if (v110)
      {
        v111 = v110;
        operator delete(v110);
      }
      v10 = v70 + 1;
      if (v70 + 1 == v67)
        return;
    }
    v13 = 0;
    v14 = v11 + 80 * v10;
    v73 = (unint64_t *)(v14 + 40);
    v72 = (unint64_t *)(v14 + 48);
    while (1)
    {
      v15 = *(_QWORD *)(v12 + 8 * v13);
      v16 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0, 0);
      v17 = v16[6];
      v18 = v16[7];
      if (*(_BYTE *)(a1 + 27))
      {
        v76 = 0;
        v77 = v16[7];
        v19 = *(_QWORD *)v74;
        v20 = *v73;
      }
      else
      {
        v19 = 0;
        v76 = *(_QWORD *)(v74 + 8);
        v77 = *v72;
        v20 = v16[6];
      }
      v22 = v16[8];
      v21 = v16[9];
      v23 = v16[10];
      if (!ZinIrOpLayer::IsANELayer(a2))
        break;
      if (!ZinIrOpLayer::IsPELayer(a2))
        goto LABEL_62;
      v71 = *(_QWORD *)(a1 + 24);
      if (v13 == 1)
      {
        if (!(*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a2 + 664))(a2))
          goto LABEL_62;
        v38 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a2 + 832))(a2);
        v39 = v38;
        if ((v71 & 0x1000000) == 0 || !ZinIrBroadcastInfo::HasDimension(v38, 0))
        {
          if ((v71 & 0x100000000) != 0 && ZinIrBroadcastInfo::HasDimension(v39, 2))
          {
LABEL_54:
            if ((v71 & 0x1000000) != 0)
            {
              v44 = v77;
            }
            else
            {
              v17 = v20;
              v44 = v18;
            }
            v45 = v76;
            if ((v71 & 0x1000000) == 0)
              v45 = 0;
            v76 = v45;
            v77 = v44;
            if ((v71 & 0x1000000) != 0)
              v19 = 0;
            goto LABEL_63;
          }
          goto LABEL_62;
        }
      }
      else
      {
        if (v13 || !(*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a2 + 656))(a2))
          goto LABEL_62;
        v24 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a2 + 696))(a2);
        v25 = *(_QWORD *)(v24 + 64);
        if ((v71 & 0x1000000) == 0 || !ZinIrBroadcastInfo::HasDimension(*(_QWORD *)(v24 + 64), 0))
        {
          if ((v71 & 0x100000000) != 0 && ZinIrBroadcastInfo::HasDimension(v25, 2))
            goto LABEL_54;
          goto LABEL_62;
        }
      }
      v19 = 0;
LABEL_63:
      v46 = v111;
      if (v111 >= v112)
      {
        v48 = 0xCCCCCCCCCCCCCCCDLL * ((v111 - v110) >> 4);
        v49 = v48 + 1;
        if (v48 + 1 > 0x333333333333333)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((v112 - v110) >> 4) > v49)
          v49 = 0x999999999999999ALL * ((v112 - v110) >> 4);
        if (0xCCCCCCCCCCCCCCCDLL * ((v112 - v110) >> 4) >= 0x199999999999999)
          v50 = 0x333333333333333;
        else
          v50 = v49;
        if (v50)
          v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v112, v50);
        else
          v51 = 0;
        v52 = &v51[80 * v48];
        *(_QWORD *)v52 = v19;
        *((_QWORD *)v52 + 1) = v76;
        *((_QWORD *)v52 + 2) = 0;
        *((_QWORD *)v52 + 3) = 0;
        *((_QWORD *)v52 + 4) = 0;
        *((_QWORD *)v52 + 5) = v17;
        *((_QWORD *)v52 + 6) = v77;
        *((_QWORD *)v52 + 7) = v22;
        *((_QWORD *)v52 + 8) = v21;
        *((_QWORD *)v52 + 9) = v23;
        v54 = v110;
        v53 = v111;
        v55 = v52;
        if (v111 != v110)
        {
          do
          {
            *((_OWORD *)v55 - 5) = *((_OWORD *)v53 - 5);
            v56 = *((_OWORD *)v53 - 4);
            v57 = *((_OWORD *)v53 - 3);
            v58 = *((_OWORD *)v53 - 1);
            *((_OWORD *)v55 - 2) = *((_OWORD *)v53 - 2);
            *((_OWORD *)v55 - 1) = v58;
            *((_OWORD *)v55 - 4) = v56;
            *((_OWORD *)v55 - 3) = v57;
            v55 -= 80;
            v53 -= 80;
          }
          while (v53 != v54);
          v53 = v54;
        }
        v47 = v52 + 80;
        v110 = v55;
        v111 = v52 + 80;
        v112 = &v51[80 * v50];
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_QWORD *)v111 = v19;
        *((_QWORD *)v46 + 1) = v76;
        *((_QWORD *)v46 + 2) = 0;
        *((_QWORD *)v46 + 3) = 0;
        *((_QWORD *)v46 + 4) = 0;
        *((_QWORD *)v46 + 5) = v17;
        *((_QWORD *)v46 + 6) = v77;
        *((_QWORD *)v46 + 7) = v22;
        v47 = v46 + 80;
        *((_QWORD *)v46 + 8) = v21;
        *((_QWORD *)v46 + 9) = v23;
      }
      v111 = v47;
      ++v13;
      v12 = *((_QWORD *)a2 + 11);
      if (v13 >= (*((_QWORD *)a2 + 12) - v12) >> 3)
        goto LABEL_80;
    }
    if (*(_DWORD *)(*((_QWORD *)a2 + 8) + 8) == 35)
    {
      v26 = *(_QWORD *)(a1 + 24);
      v27 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
      v28 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0, 0);
      v29 = 48;
      if ((v26 & 0x1000000) == 0)
        v29 = 56;
      v30 = *(_QWORD *)(v27 + v29);
      v31 = *(_QWORD *)(v28 + v29);
      v32 = (_QWORD *)(v74 + 8);
      if ((v26 & 0x1000000) != 0)
        v32 = (_QWORD *)v74;
      v33 = v73;
      if ((v26 & 0x1000000) == 0)
        v33 = v72;
      if (v30 != v31)
      {
        if (v30 <= v31)
        {
          v40 = v31 / v30;
          if (v31 % v30)
LABEL_102:
            ZinAssertImpl("split dimension sizes incompatible");
          v41 = *v32 * v40;
          v42 = v76;
          if ((v26 & 0x1000000) == 0)
            v42 = v41;
          v76 = v42;
          if ((v26 & 0x1000000) != 0)
            v19 = v41;
          v37 = *v33 * v40;
        }
        else
        {
          v34 = v30 / v31;
          if (v30 % v31)
            goto LABEL_102;
          v35 = *v32 / v34;
          v36 = v76;
          if ((v26 & 0x1000000) == 0)
            v36 = v35;
          v76 = v36;
          if ((v26 & 0x1000000) != 0)
            v19 = v35;
          v37 = *v33 / v34;
        }
        if ((v26 & 0x1000000) != 0)
          v17 = v37;
        else
          v17 = v20;
        v43 = v77;
        if ((v26 & 0x1000000) == 0)
          v43 = v37;
        v77 = v43;
        goto LABEL_63;
      }
    }
LABEL_62:
    v17 = v20;
    goto LABEL_63;
  }
}

void sub_206E186BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;
  void *v63;

  std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a29);
  TiledLayerTensorRegions::~TiledLayerTensorRegions((TiledLayerTensorRegions *)&a61);
  v63 = *(void **)(v61 - 112);
  if (v63)
  {
    *(_QWORD *)(v61 - 104) = v63;
    operator delete(v63);
  }
  _Unwind_Resume(a1);
}

void ZinMirBatchOrChannelSplitter::FindBestTileCount(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t **v10;
  _QWORD *v11;
  _QWORD *v12;
  ZinIrOpLayer *v13;
  ZinIrOpLayer *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t GreatestCommonDivisor;
  _DWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  _DWORD *v28[3];
  int v29;
  int v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;

  if (a2[17])
  {
    if (*(_BYTE *)(a4 + 3))
      *(_QWORD *)(a3 + 120) = 1;
    else
      *(_QWORD *)(a3 + 128) = 1;
  }
  else
  {
    v7 = a2[12];
    v8 = a2[13];
    for (i = 1; v7 != v8; v7 += 24)
    {
      std::map<ZinIrDimension,unsigned long>::map[abi:ne180100]((uint64_t *)&v31, v7);
      if (*(_BYTE *)(a4 + 3))
      {
        v30 = 0;
        v28[0] = &v30;
        v10 = std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>(&v31, &v30, (uint64_t)&std::piecewise_construct, v28);
      }
      else
      {
        v29 = 2;
        v28[0] = &v29;
        v10 = std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>(&v31, &v29, (uint64_t)&std::piecewise_construct, v28);
      }
      if (i <= (unint64_t)v10[5])
        i = (unint64_t)v10[5];
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v31, v32);
    }
    v32 = 0;
    v33 = 0;
    v31 = (uint64_t *)&v32;
    v11 = (_QWORD *)a2[9];
    v12 = a2 + 10;
    if (v11 == v12)
    {
      v18 = 0;
      v19 = (uint64_t *)&v32;
    }
    else
    {
      do
      {
        if (*(_BYTE *)(a4 + 3))
        {
          v28[0] = *(_DWORD **)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)v11[4] + 32))(v11[4], 0, 0)+ 48);
          std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v31, (unint64_t *)v28, (uint64_t *)v28);
          v13 = (ZinIrOpLayer *)v11[4];
          if (*(_DWORD *)(*((_QWORD *)v13 + 8) + 8) == 35)
          {
            v28[0] = *(_DWORD **)(ZinIrOpLayer::GetInputTensor(v13, 0) + 48);
            std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v31, (unint64_t *)v28, (uint64_t *)v28);
          }
        }
        else
        {
          v28[0] = *(_DWORD **)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)v11[4] + 32))(v11[4], 0, 0)+ 56);
          std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v31, (unint64_t *)v28, (uint64_t *)v28);
          v14 = (ZinIrOpLayer *)v11[4];
          if (*(_DWORD *)(*((_QWORD *)v14 + 8) + 8) == 35)
          {
            v28[0] = *(_DWORD **)(ZinIrOpLayer::GetInputTensor(v14, 0) + 56);
            std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v31, (unint64_t *)v28, (uint64_t *)v28);
          }
        }
        v15 = (_QWORD *)v11[1];
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = (_QWORD *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (_QWORD *)v11[2];
            v17 = *v16 == (_QWORD)v11;
            v11 = v16;
          }
          while (!v17);
        }
        v11 = v16;
      }
      while (v16 != v12);
      v18 = v33;
      v19 = v31;
    }
    std::vector<ZinIrSymbol *>::vector<std::__tree_const_iterator<ZinIrSymbol *,std::__tree_node<ZinIrSymbol *,void *> *,long>,0>(v28, v19, &v32);
    if (v18 == 1)
    {
      v20 = *(_QWORD *)v28[0];
      if (i < *(_QWORD *)v28[0])
        v20 = i;
    }
    else
    {
      GreatestCommonDivisor = FindGreatestCommonDivisor((uint64_t)v28);
      v20 = GreatestCommonDivisor;
      if (i <= GreatestCommonDivisor)
      {
        v20 = i;
        do
        {
          if (v31 == (uint64_t *)&v32)
            break;
          v24 = v31;
          while (!(v24[4] % v20))
          {
            v25 = (uint64_t *)v24[1];
            if (v25)
            {
              do
              {
                v26 = v25;
                v25 = (uint64_t *)*v25;
              }
              while (v25);
            }
            else
            {
              do
              {
                v26 = (uint64_t *)v24[2];
                v17 = *v26 == (_QWORD)v24;
                v24 = v26;
              }
              while (!v17);
            }
            v24 = v26;
            if (v26 == (uint64_t *)&v32)
              goto LABEL_31;
          }
          ++v20;
        }
        while (v20 <= GreatestCommonDivisor);
        v20 = i;
      }
    }
LABEL_31:
    v22 = v28[0];
    v23 = 120;
    if (!*(_BYTE *)(a1 + 27))
      v23 = 128;
    *(_QWORD *)(a3 + v23) = v20;
    if (v22)
    {
      v28[1] = v22;
      operator delete(v22);
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v31, v32);
  }
}

void sub_206E18A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16)
{
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

uint64_t ZinMirBatchOrChannelSplitter::AnalysisPerBasicBlock(ZinMirGraphSplitterBase *a1, ZinIrTarget *a2, unsigned int (***a3)(_QWORD, uint64_t, uint64_t *, uint64_t, uint64_t), uint64_t **a4, uint64_t a5, uint64_t a6)
{
  uint64_t Hal;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  ZinIrOpLayerGraph *v19;
  uint64_t *v20;
  void **v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26[3];
  _QWORD v27[3];
  _QWORD *v28[3];
  uint64_t v29;
  _QWORD *v30[4];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void ***v34;
  _QWORD *v35[2];
  _QWORD **v36;
  _QWORD *v37[2];
  _QWORD **v38;
  _QWORD *v39[2];
  _QWORD **v40;
  _QWORD *v41[2];
  _QWORD **v42;
  _QWORD *v43[2];
  _BYTE v44[32];
  int v45;
  _OWORD v46[3];
  uint64_t v47;
  int v48;
  _BYTE v49[32];
  int v50;
  int64x2_t v51;
  int64x2_t v52;
  BOOL v53;
  _QWORD v54[3];
  _QWORD *v55[3];
  _QWORD v56[3];
  unint64_t v57[3];
  uint64_t v58;
  _QWORD *v59[4];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  ZinIrTarget *v63;
  uint64_t *v64[3];

  v63 = a2;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>>>::__emplace_unique_key_args<ZinIrBasicBlock *,ZinIrBasicBlock *&,std::vector<std::pair<Subgraph,SplitInfo>>>(a4, (unint64_t *)&v63, &v63, (uint64_t)&v23);
  v34 = &v23;
  std::vector<std::pair<Subgraph,SplitInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v60 = 0;
  v61 = 0;
  v62 = 0;
  Hal = ZinIrTarget::GetHal(v63);
  if ((**a3)(a3, Hal, &v60, a5, a6) != 3)
  {
    v12 = v60;
    if (v61 == v60)
    {
LABEL_17:
      v11 = 0;
      goto LABEL_18;
    }
    v13 = 0;
    v14 = 0;
    while (1)
    {
      Subgraph::Subgraph((Subgraph *)v54, (const Subgraph *)(v12 + v13));
      v47 = 0;
      memset(v46, 0, sizeof(v46));
      memset(v49, 0, sizeof(v49));
      v48 = 1065353216;
      v50 = 1065353216;
      v15 = 1;
      v51 = vdupq_n_s64(1uLL);
      v52 = v51;
      v35[0] = 0;
      v35[1] = 0;
      v37[0] = 0;
      v37[1] = 0;
      v34 = (void ***)v35;
      v36 = v37;
      v39[0] = 0;
      v39[1] = 0;
      v41[0] = 0;
      v41[1] = 0;
      v38 = v39;
      v40 = v41;
      v43[0] = 0;
      v43[1] = 0;
      v42 = v43;
      memset(v44, 0, sizeof(v44));
      v45 = 1065353216;
      if (!*((_BYTE *)a1 + 26))
        v15 = *((_BYTE *)a1 + 28) != 0;
      v53 = v15;
      ZinMirBatchOrChannelSplitter::FindBestTileCount((uint64_t)a1, v54, (uint64_t)v46, (uint64_t)a1 + 24);
      v16 = *((_BYTE *)a1 + 27) ? (unint64_t *)&v52 : &v52.u64[1];
      v17 = *v16;
      if (*v16 == 1)
      {
        v18 = 2;
      }
      else
      {
        SplitInfo::ReserveBranch((uint64_t **)v46, v57[2]);
        std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::resize((uint64_t *)v46, v17);
        SplitInfo::ReserveTiledLayerTensorRegions((uint64_t)v46, v57, v17);
        v19 = (ZinIrOpLayerGraph *)ZinIrTarget::GetHal(v63);
        if (ZinMirGraphSplitterBase::TileSubgraph(a1, v19, (Subgraph *)v54, (SplitInfo *)v46, (LatencyInfo *)&v34, 1))
        {
          v18 = 1;
        }
        else
        {
          v64[0] = (uint64_t *)&v63;
          v20 = std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::unordered_map<ZinIrDimension,unsigned long>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::unordered_map<ZinIrDimension,unsigned long>>>,std::less<ZinIrOpLayer const*>,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::unordered_map<ZinIrDimension,unsigned long>>>>>::__emplace_unique_key_args<ZinIrOpLayer const*,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer const* const&>,std::tuple<>>(a4, (unint64_t *)&v63, (uint64_t)&std::piecewise_construct, v64)+ 5;
          std::pair<Subgraph,SplitInfo>::pair[abi:ne180100]<Subgraph,SplitInfo,0>((uint64_t)&v23, (uint64_t)v54, (uint64_t)v46);
          std::vector<std::pair<Subgraph,SplitInfo>>::push_back[abi:ne180100](v20, (uint64_t)&v23);
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v33);
          std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table((uint64_t)&v32);
          v64[0] = &v31;
          std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v64);
          std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v30, v30[1]);
          v64[0] = &v29;
          std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v64);
          std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v28, v28[1]);
          std::__list_imp<ZinIrSection *>::clear(v27);
          std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v26, v26[1]);
          std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v23, v24);
          v18 = 0;
        }
      }
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v44);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v42, v43[0]);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v40, v41[0]);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v38, v39[0]);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v36, v37[0]);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v34, v35[0]);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v49);
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table((uint64_t)&v46[1] + 8);
      v23 = (void **)v46;
      std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100](&v23);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v59, v59[1]);
      v23 = (void **)&v58;
      std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v23);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v57, (_QWORD *)v57[1]);
      std::__list_imp<ZinIrSection *>::clear(v56);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v55, v55[1]);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v54, (_QWORD *)v54[1]);
      if ((v18 | 2) != 2)
        break;
      ++v14;
      v12 = v60;
      v13 += 152;
      if (v14 >= 0x86BCA1AF286BCA1BLL * ((v61 - v60) >> 3))
        goto LABEL_17;
    }
  }
  v11 = 3;
LABEL_18:
  v23 = (void **)&v60;
  std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100](&v23);
  return v11;
}

void sub_206E18F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a67;

  std::vector<std::pair<Subgraph,SplitInfo>>::__destroy_vector::operator()[abi:ne180100](&a67);
  _Unwind_Resume(a1);
}

void SplitInfo::ReserveBranch(uint64_t **this, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5[3];
  void **v6;

  v2 = *this;
  v3 = this[1];
  if (*this != v3)
  {
    do
    {
      memset(v5, 0, sizeof(v5));
      std::vector<std::optional<TiledLayerTensorRegions>>::__init_with_size[abi:ne180100]<std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*>(v5, *v2, v2[1], 0x34F72C234F72C235 * ((v2[1] - *v2) >> 3));
      std::vector<std::optional<TiledLayerTensorRegions>>::reserve(v5, a2);
      v6 = (void **)v5;
      std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100](&v6);
      v2 += 3;
    }
    while (v2 != v3);
  }
}

void sub_206E19024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void SplitInfo::ReserveTiledLayerTensorRegions(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  void **v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void **v16;

  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v6 = (_QWORD *)(a1 + 24);
    do
    {
      v15 = (void **)v4[4];
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v6, &v15))
      {
        v12 = 0;
        v13 = 0;
        v14 = 0;
        std::vector<std::optional<TiledLayerTensorRegions>>::resize(&v12, a3);
        v10 = v15;
        memset(v11, 0, sizeof(v11));
        std::vector<std::optional<TiledLayerTensorRegions>>::__init_with_size[abi:ne180100]<std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*>(v11, v12, v13, 0x34F72C234F72C235 * ((v13 - v12) >> 3));
        std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__emplace_unique_impl<std::pair<ZinIrOpLayer*,std::vector<std::optional<TiledLayerTensorRegions>>>>(v6, (uint64_t)&v10);
        v16 = (void **)v11;
        std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100](&v16);
        v10 = (void **)&v12;
        std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100](&v10);
      }
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != v3);
  }
}

void sub_206E1915C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  va_copy((va_list)v3, va1);
  std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<Subgraph,SplitInfo>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0x14C1BACF914C1BADLL * ((uint64_t)(v7 - *a1) >> 3);
    if ((unint64_t)(v10 + 1) > 0xDD67C8A60DD67CLL)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v11 = 0x14C1BACF914C1BADLL * ((uint64_t)(v5 - *a1) >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x6EB3E45306EB3ELL)
      v13 = 0xDD67C8A60DD67CLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<Subgraph,SplitInfo>>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[296 * v10];
    v18 = &v14[296 * v13];
    std::pair<Subgraph,SplitInfo>::pair[abi:ne180100]((uint64_t)v16, a2);
    v17 = v16 + 296;
    std::vector<std::pair<Subgraph,SplitInfo>>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<std::pair<Subgraph,SplitInfo>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = std::pair<Subgraph,SplitInfo>::pair[abi:ne180100](*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 296;
    a1[1] = v7 + 296;
  }
  a1[1] = v9;
  return result;
}

void sub_206E192B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<Subgraph,SplitInfo>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<Subgraph,SplitInfo>::~pair(uint64_t a1)
{
  void **v2;
  void **v4;

  v2 = (void **)(a1 + 152);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a1 + 216);
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table(a1 + 176);
  v4 = v2;
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a1 + 120, *(_QWORD **)(a1 + 128));
  v4 = (void **)(a1 + 96);
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a1 + 72, *(_QWORD **)(a1 + 80));
  std::__list_imp<ZinIrSection *>::clear((_QWORD *)(a1 + 48));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void LatencyInfo::~LatencyInfo(LatencyInfo *this)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 120);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 96, *((_QWORD **)this + 13));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

uint64_t ZinMirBatchOrChannelSplitter::UpdatePerBasicBlock(ZinMirGraphSplitterBase *a1, ZinIrTarget *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  ZinIrOpLayerGraph *Hal;
  uint64_t v16;
  _QWORD *v17;
  ZinIrTarget *v19;

  v19 = a2;
  v7 = std::map<ZinIrTensor const*,SpatialAmount>::at(a3, (unint64_t *)&v19);
  if (v7[1] != *v7)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = std::map<ZinIrTensor const*,SpatialAmount>::at(a3, (unint64_t *)&v19);
      v11 = *v10;
      if (0x14C1BACF914C1BADLL * ((v10[1] - *v10) >> 3) <= v9
        || (v12 = std::map<ZinIrTensor const*,SpatialAmount>::at(a3, (unint64_t *)&v19),
            0x14C1BACF914C1BADLL * ((uint64_t)(v12[1] - *v12) >> 3) <= v9))
      {
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      }
      v13 = *v12 + v8;
      if (*((_BYTE *)a1 + 27))
        v14 = 272;
      else
        v14 = 280;
      if (*(_QWORD *)(v13 + v14) >= 2uLL)
      {
        Hal = (ZinIrOpLayerGraph *)ZinIrTarget::GetHal(v19);
        v16 = (*a4)++;
        ZinMirGraphSplitterBase::SplitSubgraph(a1, Hal, (Subgraph *)(v11 + v8), (const SplitInfo *)(v13 + 152), (unsigned __int16)v16, *(_BYTE *)(v13 + 288));
      }
      ++v9;
      v17 = std::map<ZinIrTensor const*,SpatialAmount>::at(a3, (unint64_t *)&v19);
      v8 += 296;
    }
    while (v9 < 0x14C1BACF914C1BADLL * ((uint64_t)(v17[1] - *v17) >> 3));
  }
  return 0;
}

uint64_t ZinMirBatchOrChannelSplitter::Tile(uint64_t **this)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  ZinL2FootprintCalculator *v14;
  uint64_t v15;
  uint64_t v17;
  char **v18;
  char *v19[2];
  ZinMirSpatialSplitLatencyCostModel *v20[36];
  _QWORD **v21;
  _QWORD *v22[2];
  ZinL2FootprintCalculator *v23;
  _OWORD v24[2];
  int v25;
  _QWORD **v26;
  _QWORD *v27[2];
  _BYTE v28[24];
  _BYTE *v29;
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (!ZinMirBatchOrChannelSplitter::IsQualifiedForSplit((ZinMirBatchOrChannelSplitter *)this))
    return 0;
  v27[0] = 0;
  v27[1] = 0;
  v26 = v27;
  memset(v24, 0, sizeof(v24));
  v25 = 1065353216;
  v22[1] = 0;
  v23 = 0;
  v21 = v22;
  v22[0] = 0;
  if (!ZinMirSpatialSplitUtils::PreprocessForPressureBasedSubgraphIdentification(this[1], this[2], (uint64_t)&v26, &v23, (uint64_t)&v21, (uint64_t)v24, (_BYTE *)this + 24))
  {
    BatchOrChannelSplitPressureBasedSubgraphIdentification::BatchOrChannelSplitPressureBasedSubgraphIdentification(v20, this[1], this[2], v24, this + 3, v23, &v21);
    v19[0] = 0;
    v19[1] = 0;
    v18 = v19;
    v3 = this[1];
    v31 = 0;
    v4 = operator new(0x20uLL);
    *v4 = &off_24BFF4FE0;
    v4[1] = this;
    v4[2] = v20;
    v4[3] = &v18;
    v31 = v4;
    v5 = ZinIrControlFlowGraph::TraverseForward(v3, (uint64_t)v30);
    v6 = v31;
    if (v31 == v30)
    {
      v7 = 4;
      v6 = v30;
    }
    else
    {
      if (!v31)
        goto LABEL_10;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_10:
    if (v5)
    {
      v2 = 3;
LABEL_20:
      std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>>>::destroy((uint64_t)&v18, v19[0]);
      PressureBasedSubgraphIdentification::~PressureBasedSubgraphIdentification(v20);
      goto LABEL_21;
    }
    v17 = 0;
    ZinMirSpatialSplitUtils::PostprocessForPressureBasedSubgraphIdentification((ZinEngineLayerMirInfo *)&v26);
    v8 = this[1];
    v29 = 0;
    v9 = operator new(0x20uLL);
    *v9 = &off_24BFF5038;
    v9[1] = this;
    v9[2] = &v18;
    v9[3] = &v17;
    v29 = v9;
    v11 = ZinIrControlFlowGraph::TraverseForward(v8, (uint64_t)v28);
    v12 = v29;
    if (v29 == v28)
    {
      v13 = 4;
      v12 = v28;
    }
    else
    {
      if (!v29)
        goto LABEL_17;
      v13 = 5;
    }
    (*(void (**)(_QWORD *, uint64_t))(*v12 + 8 * v13))(v12, v10);
LABEL_17:
    if (v11)
      v2 = 3;
    else
      v2 = 0;
    goto LABEL_20;
  }
  v2 = 3;
LABEL_21:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v21, v22[0]);
  v14 = v23;
  v23 = 0;
  if (v14)
  {
    ZinL2FootprintCalculator::~ZinL2FootprintCalculator(v14);
    MEMORY[0x20BD002F8](v15, 0x10E0C4067EF369CLL);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v24);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v26, v27[0]);
  return v2;
}

void sub_206E1975C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;
  char *v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, char *);
  v10 = va_arg(va1, _QWORD);
  v5 = *(_QWORD **)(v3 - 80);
  if (v5 == v2)
  {
    v6 = 4;
    v5 = (_QWORD *)(v3 - 104);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>>>::destroy((uint64_t)va, v9);
  PressureBasedSubgraphIdentification::~PressureBasedSubgraphIdentification((ZinMirSpatialSplitLatencyCostModel **)va1);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v3 - 208, *(_QWORD **)(v3 - 200));
  std::unique_ptr<ZinL2FootprintCalculator>::reset[abi:ne180100]((ZinL2FootprintCalculator **)(v3 - 184), 0);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v3 - 176);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v3 - 128, *(_QWORD **)(v3 - 120));
  _Unwind_Resume(a1);
}

uint64_t ZinMirBatchOrChannelSplit::TryDRAMBatchSplit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v5[8];
  _BYTE v6[7];
  char v7;
  int v8;

  *(_DWORD *)&v6[3] = 0;
  *(_DWORD *)v6 = 16842752;
  v7 = 1;
  v8 = 0;
  ZinMirBatchOrChannelSplitter::ZinMirBatchOrChannelSplitter((ZinMirGraphSplitterBase *)v5, a1, a2, a3, (uint64_t)v6);
  if (ZinMirBatchOrChannelSplitter::Tile(v5))
    v3 = 3;
  else
    v3 = 0;
  ZinMirBatchOrChannelSplitter::~ZinMirBatchOrChannelSplitter((ZinIrControlFlowGraph **)v5);
  return v3;
}

void sub_206E1987C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrControlFlowGraph *a9)
{
  ZinMirBatchOrChannelSplitter::~ZinMirBatchOrChannelSplitter(&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinMirBatchOrChannelSplit::TryL2BatchSplit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ZinIrCompilerParameters *v4;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  void **v10;
  int v11;
  int v12;
  _BOOL4 v14;
  int v15;
  void *__p[2];
  unsigned __int8 v18;
  void **v19;
  uint64_t v20;
  unsigned __int8 v21;

  v4 = *(ZinIrCompilerParameters **)(a2 + 8);
  if (!*((_BYTE *)v4 + 534))
    return 0;
  ZinIrCompilerParameters::getSpatialSplitMode(v4, __p);
  v7 = v18;
  if ((v18 & 0x80u) != 0)
    v7 = (unint64_t)__p[1];
  if (v7 != 4)
    goto LABEL_8;
  v8 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v8 = __p;
  if (*(_DWORD *)v8 != 1869903201)
  {
LABEL_8:
    ZinIrCompilerParameters::getSpatialSplitMode(*(ZinIrCompilerParameters **)(a2 + 8), &v19);
    v9 = v21;
    if ((v21 & 0x80u) != 0)
      v9 = v20;
    if (v9 == 6)
    {
      v10 = v19;
      if ((v21 & 0x80u) == 0)
        v10 = (void **)&v19;
      v11 = *(_DWORD *)v10;
      v12 = *((unsigned __int16 *)v10 + 2);
      v14 = v11 != 1869440365 || v12 != 31090;
      if (((char)v21 & 0x80000000) == 0)
      {
LABEL_23:
        if ((v18 & 0x80) == 0)
          goto LABEL_24;
LABEL_27:
        operator delete(__p[0]);
        if (!v14)
          return 0;
        goto LABEL_28;
      }
    }
    else
    {
      v14 = 1;
      if (((char)v21 & 0x80000000) == 0)
        goto LABEL_23;
    }
    operator delete(v19);
    goto LABEL_23;
  }
  v14 = 0;
  if ((v18 & 0x80) != 0)
    goto LABEL_27;
LABEL_24:
  if (!v14)
    return 0;
LABEL_28:
  *(_DWORD *)((char *)&v19 + 3) = 0;
  LODWORD(v19) = 0x1000000;
  HIBYTE(v19) = 1;
  LODWORD(v20) = 0;
  ZinMirBatchOrChannelSplitter::ZinMirBatchOrChannelSplitter((ZinMirGraphSplitterBase *)__p, a1, a2, a3, (uint64_t)&v19);
  v15 = ZinMirBatchOrChannelSplitter::Tile((uint64_t **)__p);
  ZinMirBatchOrChannelSplitter::~ZinMirBatchOrChannelSplitter((ZinIrControlFlowGraph **)__p);
  if (v15)
    return 3;
  return 0;
}

void sub_206E19A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  ZinMirBatchOrChannelSplitter::~ZinMirBatchOrChannelSplitter((ZinIrControlFlowGraph **)&__p);
  _Unwind_Resume(a1);
}

uint64_t ZinMirBatchOrChannelSplit::TryBatchSplit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = ZinMirBatchOrChannelSplit::TryDRAMBatchSplit(a1, a2, a3);
  if (!(_DWORD)result)
    return ZinMirBatchOrChannelSplit::TryL2BatchSplit(a1, a2, a3);
  return result;
}

uint64_t ZinMirBatchOrChannelSplit::TryL2ChannelSplit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  void **v9;
  int v10;
  int v11;
  _BOOL4 v13;
  int v14;
  void *__p[2];
  unsigned __int8 v17;
  void **v18;
  uint64_t v19;
  unsigned __int8 v20;

  ZinIrCompilerParameters::getSpatialSplitMode(*(ZinIrCompilerParameters **)(a2 + 8), __p);
  v6 = v17;
  if ((v17 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  if (v6 != 4)
    goto LABEL_7;
  v7 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v7 = __p;
  if (*(_DWORD *)v7 != 1869903201)
  {
LABEL_7:
    ZinIrCompilerParameters::getSpatialSplitMode(*(ZinIrCompilerParameters **)(a2 + 8), &v18);
    v8 = v20;
    if ((v20 & 0x80u) != 0)
      v8 = v19;
    if (v8 == 6)
    {
      v9 = v18;
      if ((v20 & 0x80u) == 0)
        v9 = (void **)&v18;
      v10 = *(_DWORD *)v9;
      v11 = *((unsigned __int16 *)v9 + 2);
      v13 = v10 != 1869440365 || v11 != 31090;
      if (((char)v20 & 0x80000000) == 0)
      {
LABEL_22:
        if ((v17 & 0x80) == 0)
          goto LABEL_23;
LABEL_26:
        operator delete(__p[0]);
        if (!v13)
          return 0;
        goto LABEL_27;
      }
    }
    else
    {
      v13 = 1;
      if (((char)v20 & 0x80000000) == 0)
        goto LABEL_22;
    }
    operator delete(v18);
    goto LABEL_22;
  }
  v13 = 0;
  if ((v17 & 0x80) != 0)
    goto LABEL_26;
LABEL_23:
  if (!v13)
    return 0;
LABEL_27:
  *(_DWORD *)((char *)&v18 + 3) = 256;
  LODWORD(v18) = 0;
  HIBYTE(v18) = 1;
  LODWORD(v19) = 0;
  ZinMirBatchOrChannelSplitter::ZinMirBatchOrChannelSplitter((ZinMirGraphSplitterBase *)__p, a1, a2, a3, (uint64_t)&v18);
  v14 = ZinMirBatchOrChannelSplitter::Tile((uint64_t **)__p);
  ZinMirBatchOrChannelSplitter::~ZinMirBatchOrChannelSplitter((ZinIrControlFlowGraph **)__p);
  if (v14)
    return 3;
  return 0;
}

void sub_206E19BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  ZinMirBatchOrChannelSplitter::~ZinMirBatchOrChannelSplitter((ZinIrControlFlowGraph **)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::optional<TiledLayerTensorRegions>>::__push_back_slow_path<std::optional<TiledLayerTensorRegions>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[5];

  v3 = *a1;
  v4 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x11A7B9611A7B961)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x34F72C234F72C235 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x8D3DCB08D3DCB0)
    v9 = 0x11A7B9611A7B961;
  else
    v9 = v5;
  v14[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::optional<TiledLayerTensorRegions>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[232 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[232 * v9];
  *v11 = 0;
  v11[224] = 0;
  if (*(_BYTE *)(a2 + 224))
  {
    std::construct_at[abi:ne180100]<TiledLayerTensorRegions,TiledLayerTensorRegions,TiledLayerTensorRegions*>((uint64_t)v11, a2);
    v11[224] = 1;
  }
  v14[2] = v11 + 232;
  std::vector<std::optional<TiledLayerTensorRegions>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::optional<TiledLayerTensorRegions>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_206E19D30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::optional<TiledLayerTensorRegions>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<Subgraph,SplitInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 296;
        std::__destroy_at[abi:ne180100]<std::pair<Subgraph,SplitInfo>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<Subgraph,SplitInfo>,0>(uint64_t a1)
{
  void **v2;
  void **v3;

  v2 = (void **)(a1 + 152);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a1 + 216);
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table(a1 + 176);
  v3 = v2;
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a1 + 120, *(_QWORD **)(a1 + 128));
  v3 = (void **)(a1 + 96);
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a1 + 72, *(_QWORD **)(a1 + 80));
  std::__list_imp<ZinIrSection *>::clear((_QWORD *)(a1 + 48));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a1, *(_QWORD **)(a1 + 8));
}

uint64_t std::vector<std::optional<TiledLayerTensorRegions>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x34F72C234F72C235 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x11A7B9611A7B962)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::optional<TiledLayerTensorRegions>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 232 * v6;
    std::vector<std::optional<TiledLayerTensorRegions>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::optional<TiledLayerTensorRegions>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_206E19EE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::optional<TiledLayerTensorRegions>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::optional<TiledLayerTensorRegions>>::__init_with_size[abi:ne180100]<std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::optional<TiledLayerTensorRegions>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<TiledLayerTensorRegions>>,std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_206E19F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::optional<TiledLayerTensorRegions>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x11A7B9611A7B962)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::optional<TiledLayerTensorRegions>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[232 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<TiledLayerTensorRegions>>,std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::__optional_copy_base<TiledLayerTensorRegions,false>::__optional_copy_base[abi:ne180100]((TiledLayerTensorRegions *)(a4 + v7), (const TiledLayerTensorRegions *)(a2 + v7));
      v7 += 232;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_206E1A030(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 232;
    do
    {
      std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100](v4 + v2);
      v2 -= 232;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::optional<TiledLayerTensorRegions>>>::~__split_buffer(&v15);
  }
}

void sub_206E1A238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::optional<TiledLayerTensorRegions>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::optional<TiledLayerTensorRegions>>>,std::reverse_iterator<std::vector<std::optional<TiledLayerTensorRegions>>*>,std::reverse_iterator<std::vector<std::optional<TiledLayerTensorRegions>>*>,std::reverse_iterator<std::vector<std::optional<TiledLayerTensorRegions>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::optional<TiledLayerTensorRegions>>>,std::reverse_iterator<std::vector<std::optional<TiledLayerTensorRegions>>*>,std::reverse_iterator<std::vector<std::optional<TiledLayerTensorRegions>>*>,std::reverse_iterator<std::vector<std::optional<TiledLayerTensorRegions>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::optional<TiledLayerTensorRegions>>>,std::reverse_iterator<std::vector<std::optional<TiledLayerTensorRegions>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::optional<TiledLayerTensorRegions>>>,std::reverse_iterator<std::vector<std::optional<TiledLayerTensorRegions>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::optional<TiledLayerTensorRegions>>>,std::reverse_iterator<std::vector<std::optional<TiledLayerTensorRegions>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::optional<TiledLayerTensorRegions>>>,std::reverse_iterator<std::vector<std::optional<TiledLayerTensorRegions>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::optional<TiledLayerTensorRegions>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::optional<TiledLayerTensorRegions>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::optional<TiledLayerTensorRegions>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<std::optional<TiledLayerTensorRegions>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  result = a1[1];
  v4 = 0x34F72C234F72C235 * ((result - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return std::vector<std::optional<TiledLayerTensorRegions>>::__append(a1, v6);
  if (!v5)
  {
    v7 = *a1 + 232 * a2;
    while (result != v7)
      result = std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100](result - 232);
    a1[1] = v7;
  }
  return result;
}

uint64_t std::vector<std::optional<TiledLayerTensorRegions>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_BYTE **)(result - 8);
  if (0x34F72C234F72C235 * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[232 * a2];
      do
      {
        *v7 = 0;
        v7[224] = 0;
        v7 += 232;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0x34F72C234F72C235 * ((uint64_t)&v7[-*a1] >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x11A7B9611A7B961)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0x34F72C234F72C235 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x8D3DCB08D3DCB0)
      v11 = 0x11A7B9611A7B961;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::optional<TiledLayerTensorRegions>>>(result, v11);
    else
      v12 = 0;
    v14 = &v12[232 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[232 * v11];
    v15 = &v14[232 * a2];
    do
    {
      *v14 = 0;
      v14[224] = 0;
      v14 += 232;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<std::optional<TiledLayerTensorRegions>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<std::optional<TiledLayerTensorRegions>>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_206E1A620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::optional<TiledLayerTensorRegions>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__emplace_unique_impl<std::pair<ZinIrOpLayer*,std::vector<std::optional<TiledLayerTensorRegions>>>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *inserted;
  char v4;
  void **v5;
  void *__p;
  uint64_t v8;

  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__construct_node<std::pair<ZinIrOpLayer*,std::vector<std::optional<TiledLayerTensorRegions>>>>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<ZinIrOpLayer *,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__node_insert_unique(a1, __p);
  if ((v4 & 1) == 0)
  {
    v5 = (void **)__p;
    __p = 0;
    if (v5)
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
  }
  return inserted;
}

void sub_206E1A698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

__n128 std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__construct_node<std::pair<ZinIrOpLayer*,std::vector<std::optional<TiledLayerTensorRegions>>>>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _OWORD *v6;
  __n128 result;
  __int128 v8;
  unint64_t v9;

  v5 = a1 + 16;
  v6 = operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  result = *(__n128 *)a2;
  v8 = *(_OWORD *)(a2 + 16);
  v6[1] = *(_OWORD *)a2;
  v6[2] = v8;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  v9 = 0x9DDFEA08EB382D69 * ((8 * result.n128_u32[0] + 8) ^ HIDWORD(result.n128_u64[0]));
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0x9DDFEA08EB382D69
                      * ((0x9DDFEA08EB382D69 * (HIDWORD(result.n128_u64[0]) ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (HIDWORD(result.n128_u64[0]) ^ (v9 >> 47) ^ v9)) >> 47));
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 3;
    std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

uint64_t std::pair<Subgraph,SplitInfo>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  __int128 v6;

  v4 = (_QWORD *)Subgraph::Subgraph(a1, a2);
  v4[19] = 0;
  v4[20] = 0;
  v4[21] = 0;
  *(_OWORD *)(v4 + 19) = *(_OWORD *)(a2 + 152);
  v4[21] = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table((uint64_t)(v4 + 22), (uint64_t *)(a2 + 176));
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a1 + 216, (uint64_t *)(a2 + 216));
  v5 = *(_OWORD *)(a2 + 256);
  v6 = *(_OWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(_OWORD *)(a1 + 256) = v5;
  *(_OWORD *)(a1 + 272) = v6;
  return a1;
}

{
  _QWORD *v4;
  __int128 v5;
  __int128 v6;

  Subgraph::Subgraph((Subgraph *)a1, (const Subgraph *)a2);
  v4[19] = 0;
  v4[20] = 0;
  v4[21] = 0;
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__init_with_size[abi:ne180100]<std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*>(v4 + 19, *(uint64_t **)(a2 + 152), *(uint64_t **)(a2 + 160), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 3));
  std::unordered_map<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>::unordered_map(a1 + 176, a2 + 176);
  std::unordered_set<ZinIrOpLayer const*>::unordered_set(a1 + 216, a2 + 216);
  v5 = *(_OWORD *)(a2 + 256);
  v6 = *(_OWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(_OWORD *)(a1 + 256) = v5;
  *(_OWORD *)(a1 + 272) = v6;
  return a1;
}

uint64_t std::vector<std::pair<Subgraph,SplitInfo>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 296;
    result = std::pair<Subgraph,SplitInfo>::pair[abi:ne180100](result - 296, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<Subgraph,SplitInfo>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xDD67C8A60DD67DLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(296 * a2);
}

uint64_t std::__split_buffer<std::pair<Subgraph,SplitInfo>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 296;
    std::__destroy_at[abi:ne180100]<std::pair<Subgraph,SplitInfo>,0>(i - 296);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::pair<Subgraph,SplitInfo>::pair[abi:ne180100]<Subgraph,SplitInfo,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v6;
  __int128 v7;

  v5 = (_QWORD *)Subgraph::Subgraph(a1, a2);
  v5[19] = 0;
  v5[20] = 0;
  v5[21] = 0;
  *(_OWORD *)(v5 + 19) = *(_OWORD *)a3;
  v5[21] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table((uint64_t)(v5 + 22), (uint64_t *)(a3 + 24));
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a1 + 216, (uint64_t *)(a3 + 64));
  v6 = *(_OWORD *)(a3 + 104);
  v7 = *(_OWORD *)(a3 + 120);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a3 + 136);
  *(_OWORD *)(a1 + 256) = v6;
  *(_OWORD *)(a1 + 272) = v7;
  return a1;
}

void std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152;
        std::__destroy_at[abi:ne180100]<Subgraph,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__function::__func<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24BFF4F88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFF4F88;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, ZinIrOpLayer **a3)
{
  ZinIrOpLayer *v4;
  ZinIrTensor *v5;
  uint64_t v6;
  int v7;
  int v8;
  ZinReshapeLayer **v9;
  BOOL v10;
  ZinReshapeLayer *v11;
  uint64_t ReshapeInfo;
  char v13;
  ZinReshapeLayer **v14;
  ZinReshapeLayer *v15;
  uint64_t v16;
  ZinIrOpLayer **v17;
  ZinIrOpLayer **v18;
  char *v19;
  int *v20;
  ZinIrOpLayer *v21;
  int IsLayerSplittable;
  void *__dst;
  ZinIrOpLayer **v25;
  uint64_t v26;
  void *v27[3];
  void *__p[3];

  if (!**(_BYTE **)(a1 + 8))
  {
    v4 = *a3;
    memset(v27, 0, sizeof(v27));
    if (ZinIrOpLayer::IsANELayer(v4))
    {
      v5 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0, 0);
      ZinIrTensor::GetTensorSizeInBytes(v5);
      if (**(float **)(a1 + 16) < (float)v6)
      {
        v7 = **(_DWORD **)(a1 + 24);
        if (*(_DWORD *)(*((_QWORD *)v4 + 8) + 8) == 85)
          v8 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v4 + 120))(v4);
        else
          v8 = 0;
        v9 = (ZinReshapeLayer **)*((_QWORD *)v4 + 11);
        v10 = *((_QWORD *)v4 + 12) - (_QWORD)v9 >= 9uLL && v8 == 0;
        if (!v10 && *((_QWORD *)v4 + 15) - *((_QWORD *)v4 + 14) <= 8uLL)
        {
          while (1)
          {
            v11 = *v9;
            if (*(_DWORD *)(*((_QWORD *)*v9 + 8) + 8) != 37)
            {
LABEL_15:
              v13 = 0;
              goto LABEL_17;
            }
            ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(v11);
            if ((ZinIrTransposeInfo::HasDimension(ReshapeInfo, v7) & 1) != 0)
              break;
            v9 = (ZinReshapeLayer **)*((_QWORD *)v11 + 11);
            if (*((_QWORD *)v11 + 12) - (_QWORD)v9 >= 9uLL)
              goto LABEL_15;
          }
          v13 = 1;
LABEL_17:
          v14 = (ZinReshapeLayer **)*((_QWORD *)v4 + 14);
          do
          {
            v15 = *v14;
            if (*(_DWORD *)(*((_QWORD *)*v14 + 8) + 8) != 37)
              break;
            v16 = ZinReshapeLayer::GetReshapeInfo(v15);
            if ((ZinIrTransposeInfo::HasDimension(v16, v7) & 1) != 0)
            {
              if ((v13 & 1) != 0)
                goto LABEL_34;
              break;
            }
            v14 = (ZinReshapeLayer **)*((_QWORD *)v15 + 14);
          }
          while (*((_QWORD *)v15 + 15) - (_QWORD)v14 <= 8uLL);
        }
        if (BatchOrChannelSplitPressureBasedSubgraphIdentification::IsLayerSplittable(v4, **(_BYTE **)(a1 + 32) == 0, **(_BYTE **)(a1 + 32), **(_DWORD **)(a1 + 24), 0, (uint64_t)v27))
        {
          __dst = 0;
          v25 = 0;
          v26 = 0;
          std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__dst, *((const void **)v4 + 11), *((_QWORD *)v4 + 12), (uint64_t)(*((_QWORD *)v4 + 12) - *((_QWORD *)v4 + 11)) >> 3);
          std::vector<ZinGOCLayer const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinGOCLayer const**>,std::__wrap_iter<ZinGOCLayer const**>>((uint64_t)&__dst, (uint64_t)__dst, *((char **)v4 + 14), *((char **)v4 + 15), (uint64_t)(*((_QWORD *)v4 + 15) - *((_QWORD *)v4 + 14)) >> 3);
          v17 = (ZinIrOpLayer **)__dst;
          v18 = v25;
          if (__dst != v25)
          {
            v20 = *(int **)(a1 + 24);
            v19 = *(char **)(a1 + 32);
            while (1)
            {
              v21 = *v17;
              memset(__p, 0, sizeof(__p));
              IsLayerSplittable = BatchOrChannelSplitPressureBasedSubgraphIdentification::IsLayerSplittable(v21, *v19 == 0, *v19, *v20, 0, (uint64_t)__p);
              if (__p[0])
                operator delete(__p[0]);
              if (IsLayerSplittable)
                break;
              if (++v17 == v18)
                goto LABEL_32;
            }
            **(_BYTE **)(a1 + 8) = 1;
          }
LABEL_32:
          if (__dst)
          {
            v25 = (ZinIrOpLayer **)__dst;
            operator delete(__dst);
          }
        }
      }
    }
LABEL_34:
    if (v27[0])
      operator delete(v27[0]);
  }
  return 0;
}

void sub_206E1ACC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

uint64_t **std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>>>::__emplace_unique_key_args<ZinIrBasicBlock *,ZinIrBasicBlock *&,std::vector<std::pair<Subgraph,SplitInfo>>>(uint64_t **a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t **v10;
  unint64_t v11;
  char *v12;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = v7[4];
        if (v9 >= v11)
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_10;
      }
      if (v11 >= v9)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = (char *)operator new(0x40uLL);
    *((_QWORD *)v12 + 4) = *a3;
    *(_OWORD *)(v12 + 40) = *(_OWORD *)a4;
    *((_QWORD *)v12 + 7) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v10, v8, (uint64_t *)v12);
    return (uint64_t **)v12;
  }
  return v10;
}

void std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>>>::destroy(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 40);
    std::vector<std::pair<Subgraph,SplitInfo>>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24BFF4FE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFF4FE0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::operator()(uint64_t a1, ZinIrTarget **a2)
{
  return ZinMirBatchOrChannelSplitter::AnalysisPerBasicBlock(*(ZinMirGraphSplitterBase **)(a1 + 8), *a2, *(unsigned int (****)(_QWORD, uint64_t, uint64_t *, uint64_t, uint64_t))(a1 + 16), *(uint64_t ***)(a1 + 24), 0, 0);
}

uint64_t std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target_type()
{
}

void std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_1,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_1,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24BFF5038;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_1,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFF5038;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_1,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::operator()(uint64_t a1, ZinIrTarget **a2)
{
  ZinMirBatchOrChannelSplitter::UpdatePerBasicBlock(*(ZinMirGraphSplitterBase **)(a1 + 8), *a2, *(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 24));
  return 0;
}

uint64_t std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_1,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_1,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::target_type()
{
}

uint64_t ZinIrWeight::CreateWeightDataBitStream@<X0>(int a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  char *v4;

  switch(a1)
  {
    case 7:
    case 8:
    case 9:
    case 10:
      result = operator new();
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_QWORD *)(result + 32) = 0;
      goto LABEL_7;
    case 11:
    case 12:
    case 13:
    case 14:
      result = operator new();
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_QWORD *)(result + 32) = 0;
      goto LABEL_7;
    case 15:
    case 16:
    case 17:
    case 18:
      result = operator new();
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_QWORD *)(result + 32) = 0;
      goto LABEL_7;
    case 19:
    case 20:
    case 21:
    case 22:
      result = operator new();
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_QWORD *)(result + 32) = 0;
      goto LABEL_7;
    case 23:
    case 24:
    case 25:
    case 26:
      result = operator new();
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_QWORD *)(result + 32) = 0;
LABEL_7:
      *(_QWORD *)result = v4 + 16;
      break;
    default:
      result = 0;
      break;
  }
  *a2 = result;
  return result;
}

uint64_t ZinIrWeight::ZinIrWeight(uint64_t a1, uint64_t *a2, uint64_t **a3, int a4, int64x2_t *a5, uint64_t a6, int a7, char a8)
{
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v12 = a2[1];
  v27 = *a2;
  v28 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  ZinIrWeightBase::ZinIrWeightBase(a1, &v27, a4, a5, 0, a7, a8);
  v15 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)a1 = &off_24C015D98;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 1;
  if (!*a2)
    ZinAssertImpl("ZinIrWeight received invalid underlying data");
  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
  {
    if ((uint64_t **)(a1 + 280) != a3)
      std::vector<std::shared_ptr<ZinIrConstData>>::__assign_with_size[abi:ne180100]<std::shared_ptr<ZinIrConstData> const*,std::shared_ptr<ZinIrConstData> const*>(a1 + 280, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
    *(_QWORD *)(a1 + 304) = a6;
    if (!a6 || (v19 = *(uint64_t **)(a1 + 280), v18 = *(uint64_t **)(a1 + 288), v18 == v19))
      ZinAssertImpl("Invalid information for palettized kernels.");
    do
    {
      v20 = *v19;
      v21 = (std::__shared_weak_count *)v19[1];
      v26 = *v19;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
        if (!v20)
LABEL_25:
          ZinAssertImpl("Invalid palettized LUT const data.", v26, v21, v27);
        do
          v24 = __ldaxr(v22);
        while (__stlxr(v24 - 1, v22));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      else if (!v20)
      {
        goto LABEL_25;
      }
      v19 += 2;
    }
    while (v19 != v18);
  }
  return a1;
}

void sub_206E1B34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::ZinIrWeight(uint64_t a1, uint64_t **a2, int a3, int64x2_t *a4, uint64_t a5, int a6, char a7)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v22 = 0;
  v23 = 0;
  ZinIrWeightBase::ZinIrWeightBase(a1, &v22, a3, a4, 0, a6, a7);
  v10 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_QWORD *)a1 = &off_24C015D98;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 1;
  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
  {
    if ((uint64_t **)(a1 + 280) != a2)
      std::vector<std::shared_ptr<ZinIrConstData>>::__assign_with_size[abi:ne180100]<std::shared_ptr<ZinIrConstData> const*,std::shared_ptr<ZinIrConstData> const*>(a1 + 280, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
    *(_QWORD *)(a1 + 304) = a5;
    if (!a5 || (v14 = *(uint64_t **)(a1 + 280), v13 = *(uint64_t **)(a1 + 288), v13 == v14))
      ZinAssertImpl("Invalid information for palettized kernels.");
    do
    {
      v15 = *v14;
      v16 = (std::__shared_weak_count *)v14[1];
      v21 = *v14;
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
        if (!v15)
LABEL_21:
          ZinAssertImpl("Invalid palettized LUT const data.", v21, v16);
        do
          v19 = __ldaxr(v17);
        while (__stlxr(v19 - 1, v17));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      else if (!v15)
      {
        goto LABEL_21;
      }
      v14 += 2;
    }
    while (v14 != v13);
  }
  return a1;
}

void sub_206E1B4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::CreateAlias@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = operator new();
  ZinIrWeight::ZinIrWeight((ZinIrWeight *)v6, (const ZinIrWeight *)a1);
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 == *(_DWORD *)a2
    && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 8)
    && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 16)
    && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 24)
    && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 32)
    && *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 40))
  {
    result = ZinKernelFormatIsPalette(v7);
    if ((_DWORD)result && *(_QWORD *)(a1 + 304) >= 2uLL && *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 48))
    {
      v13 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v13)
        ZinIrWeight::CreateAlias(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      if (*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280) >= 0x11uLL)
        ZinAssertImpl("Aliasing is not supported for per-channel palettized kernels yet");
      if (*(_QWORD *)(a1 + 64)
         * *(_QWORD *)(a1 + 56)
         * *(_QWORD *)(a1 + 72)
         * *(_QWORD *)(a1 + 80)
         * *(_QWORD *)(a1 + 88) == *(_QWORD *)(a2 + 56)
                                 * *(_QWORD *)(a2 + 48)
                                 * *(_QWORD *)(a2 + 64)
                                 * *(_QWORD *)(a2 + 72)
                                 * *(_QWORD *)(a2 + 80))
      {
        v9 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(v6 + 72) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(v6 + 88) = v9;
        v10 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(v6 + 104) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(v6 + 120) = v10;
        v11 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(v6 + 8) = *(_OWORD *)a2;
        *(_OWORD *)(v6 + 24) = v11;
        v12 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(v6 + 40) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(v6 + 56) = v12;
        *a3 = v6;
        return result;
      }
    }
  }
  *a3 = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
}

void sub_206E1B6D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void ZinIrWeight::CreatePartial(const ZinIrWeight *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  void **v14;

  v10 = operator new();
  ZinIrWeight::ZinIrWeight((ZinIrWeight *)v10, a1);
  if (ZinIrWeightBase::UpdateDescriptorForPartialTransform((uint64_t *)v10, a2, a3, a4))
  {
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  }
  else
  {
    if (!a4)
    {
      v11 = *(_QWORD *)(v10 + 280);
      if ((unint64_t)(*(_QWORD *)(v10 + 288) - v11) >= 0x11)
      {
        v12 = 0uLL;
        v13 = 0;
        std::vector<std::shared_ptr<ZinIrTransform>>::__init_with_size[abi:ne180100]<std::shared_ptr<ZinIrTransform>*,std::shared_ptr<ZinIrTransform>*>((char *)&v12, (_QWORD *)(v11 + 16 * a3), (_QWORD *)(v11 + 16 * a3 + 16 * a2), a2);
        std::vector<std::shared_ptr<ZinIrConstData>>::__vdeallocate((void **)(v10 + 280));
        *(_OWORD *)(v10 + 280) = v12;
        *(_QWORD *)(v10 + 296) = v13;
        v13 = 0;
        v12 = 0uLL;
        v14 = (void **)&v12;
        std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v14);
      }
    }
    *a5 = v10;
  }
}

void sub_206E1B81C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void ZinIrWeight::RemapByType(ZinIrWeight *this@<X0>, const ZinTensorDimensions *a2@<X1>, uint64_t *a3@<X8>)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  unint64_t *v45;
  _BOOL8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v64;
  __int128 v65;

  if (ZinKernelFormatIsPalette(*((_DWORD *)this + 2)) && *((_QWORD *)this + 38) >= 2uLL)
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinIrWeight::RemapByType(v6, v7, v8, v9, v10, v11, v12, v13);
    *a3 = 0;
  }
  else
  {
    if (*((_QWORD *)this + 36) - *((_QWORD *)this + 35) >= 0x11uLL)
      ZinAssertImpl("Remapping is not supported for per-channel palettized kernels yet");
    v64 = 0uLL;
    switch(*((_DWORD *)this + 2))
    {
      case 1:
        ZinIrWeightBase::RemapData<std::vector<signed char>,ZinIrConstData_specialization<signed char>>((uint64_t)this, a2, &v65);
        goto LABEL_69;
      case 2:
      case 0x1B:
        ZinIrWeightBase::RemapData<std::vector<unsigned char>,ZinIrConstData_specialization<unsigned char>>((uint64_t)this, a2, &v65);
        v41 = v65;
        v65 = 0uLL;
        v42 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
        v64 = v41;
        if (v42)
        {
          p_shared_owners = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v18 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
        if (!*((_QWORD *)&v65 + 1))
          break;
        v45 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
        do
          v20 = __ldaxr(v45);
        while (__stlxr(v20 - 1, v45));
        goto LABEL_61;
      case 4:
        ZinIrWeightBase::RemapData<std::vector<half>,ZinIrConstData_specialization<half>>((uint64_t)this, a2, &v65);
        goto LABEL_69;
      case 5:
        ZinIrWeightBase::RemapData<std::vector<e4m3_t>,ZinIrConstData_specialization<e4m3_t>>((uint64_t)this, a2, &v65);
        goto LABEL_69;
      case 6:
        ZinIrWeightBase::RemapData<std::vector<float>,ZinIrConstData_specialization<float>>((uint64_t)this, a2, &v65);
LABEL_69:
        std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v64, &v65);
        std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v65);
        break;
      case 7:
      case 8:
      case 9:
      case 0xA:
        ZinIrWeightBase::RemapData<ZinIrWeightDataBitStream1,ZinIrConstData_specialization<unsigned char>>((uint64_t)this, a2, &v65);
        v14 = v65;
        v65 = 0uLL;
        v15 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
        v64 = v14;
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v18 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
        if (!*((_QWORD *)&v65 + 1))
          break;
        v19 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        goto LABEL_61;
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
        ZinIrWeightBase::RemapData<ZinIrWeightDataBitStream2,ZinIrConstData_specialization<unsigned char>>((uint64_t)this, a2, &v65);
        v21 = v65;
        v65 = 0uLL;
        v22 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
        v64 = v21;
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v18 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
        if (!*((_QWORD *)&v65 + 1))
          break;
        v25 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
        do
          v20 = __ldaxr(v25);
        while (__stlxr(v20 - 1, v25));
        goto LABEL_61;
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
        ZinIrWeightBase::RemapData<ZinIrWeightDataBitStream3,ZinIrConstData_specialization<unsigned char>>((uint64_t)this, a2, &v65);
        v26 = v65;
        v65 = 0uLL;
        v27 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
        v64 = v26;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v18 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
        if (!*((_QWORD *)&v65 + 1))
          break;
        v30 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
        do
          v20 = __ldaxr(v30);
        while (__stlxr(v20 - 1, v30));
        goto LABEL_61;
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
        ZinIrWeightBase::RemapData<ZinIrWeightDataBitStream4,ZinIrConstData_specialization<unsigned char>>((uint64_t)this, a2, &v65);
        v31 = v65;
        v65 = 0uLL;
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
        v64 = v31;
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v18 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
        if (!*((_QWORD *)&v65 + 1))
          break;
        v35 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
        do
          v20 = __ldaxr(v35);
        while (__stlxr(v20 - 1, v35));
        goto LABEL_61;
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
        ZinIrWeightBase::RemapData<ZinIrWeightDataBitStream6,ZinIrConstData_specialization<unsigned char>>((uint64_t)this, a2, &v65);
        v36 = v65;
        v65 = 0uLL;
        v37 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
        v64 = v36;
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        v18 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
        if (!*((_QWORD *)&v65 + 1))
          break;
        v40 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
        do
          v20 = __ldaxr(v40);
        while (__stlxr(v20 - 1, v40));
LABEL_61:
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        break;
      default:
        v46 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v46)
          goto LABEL_79;
        ZinIrWeight::RemapByType(v46, v47, v48, v49, v50, v51, v52, v53);
        break;
    }
    if ((_QWORD)v64)
    {
      v54 = operator new();
      v55 = v54;
      v56 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      v65 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v57 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      ZinIrWeight::ZinIrWeight(v54, (uint64_t *)&v65, (uint64_t **)this + 35, *((_DWORD *)this + 2), (int64x2_t *)((char *)this + 56), *((_QWORD *)this + 38), 1262703187, 0);
      *a3 = v55;
      if (v56)
      {
        v59 = (unint64_t *)&v56->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
    }
    else
    {
LABEL_79:
      *a3 = 0;
    }
    v61 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
    if (*((_QWORD *)&v64 + 1))
    {
      v62 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
  }
}

void sub_206E1BD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ZinIrWeightBase::RemapData<std::vector<float>,ZinIrConstData_specialization<float>>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *__p;
  char *v31;
  char *v32;

  v4 = a2[2];
  v5 = a2[3];
  __p = 0;
  v31 = 0;
  v32 = 0;
  std::vector<float>::reserve(&__p, *(_QWORD *)(a1 + 64) * *(_QWORD *)(a1 + 56));
  v6 = *(_QWORD *)(a1 + 56);
  if (v6 >= 1)
  {
    v7 = 0;
    v8 = v5 * v4;
    v9 = *(_QWORD *)(a1 + 64);
    do
    {
      if (v9 >= 1)
      {
        v10 = 0;
        v11 = v7 / v8 + a2[1] * (v7 % v8);
        do
        {
          *(_QWORD *)&v26 = v11;
          *((_QWORD *)&v26 + 1) = v10;
          v28 = 0;
          v29 = 0;
          v27 = 0;
          ZinIrWeightBase::GetAt<float>(a1);
          v13 = v12;
          v14 = v31;
          if (v31 >= v32)
          {
            v16 = (char *)__p;
            v17 = (v31 - (_BYTE *)__p) >> 2;
            v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v19 = v32 - (_BYTE *)__p;
            if ((v32 - (_BYTE *)__p) >> 1 > v18)
              v18 = v19 >> 1;
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
              v20 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v20 = v18;
            if (v20)
            {
              v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v32, v20);
              v16 = (char *)__p;
              v14 = v31;
            }
            else
            {
              v21 = 0;
            }
            v22 = &v21[4 * v17];
            *(_DWORD *)v22 = v13;
            v15 = v22 + 4;
            while (v14 != v16)
            {
              v23 = *((_DWORD *)v14 - 1);
              v14 -= 4;
              *((_DWORD *)v22 - 1) = v23;
              v22 -= 4;
            }
            __p = v22;
            v31 = v15;
            v32 = &v21[4 * v20];
            if (v16)
              operator delete(v16);
          }
          else
          {
            *(_DWORD *)v31 = v12;
            v15 = v14 + 4;
          }
          v31 = v15;
          ++v10;
          v9 = *(_QWORD *)(a1 + 64);
        }
        while (v10 < v9);
        v6 = *(_QWORD *)(a1 + 56);
      }
      ++v7;
    }
    while (v6 > v7);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<float>,std::allocator<ZinIrConstData_specialization<float>>,std::vector<float>,void>((uint64_t)&__p, &v26);
  *a3 = v26;
  if (__p)
  {
    v31 = (char *)__p;
    operator delete(__p);
  }
}

void sub_206E1BF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::RemapData<std::vector<half>,ZinIrConstData_specialization<half>>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  __int16 v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int16 v23;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *__p;
  char *v31;
  char *v32;

  v4 = a2[2];
  v5 = a2[3];
  __p = 0;
  v31 = 0;
  v32 = 0;
  std::vector<half>::reserve(&__p, *(_QWORD *)(a1 + 64) * *(_QWORD *)(a1 + 56));
  v6 = *(_QWORD *)(a1 + 56);
  if (v6 >= 1)
  {
    v7 = 0;
    v8 = v5 * v4;
    v9 = *(_QWORD *)(a1 + 64);
    do
    {
      if (v9 >= 1)
      {
        v10 = 0;
        v11 = v7 / v8 + a2[1] * (v7 % v8);
        do
        {
          *(_QWORD *)&v26 = v11;
          *((_QWORD *)&v26 + 1) = v10;
          v28 = 0;
          v29 = 0;
          v27 = 0;
          ZinIrWeightBase::GetAt<half>(a1);
          v13 = v12;
          v14 = v31;
          if (v31 >= v32)
          {
            v16 = (char *)__p;
            v17 = v31 - (_BYTE *)__p;
            if (v31 - (_BYTE *)__p <= -3)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v18 = v17 >> 1;
            if (v32 - (_BYTE *)__p <= (unint64_t)((v17 >> 1) + 1))
              v19 = v18 + 1;
            else
              v19 = v32 - (_BYTE *)__p;
            if ((unint64_t)(v32 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
              v20 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v20 = v19;
            if (v20)
            {
              v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>((uint64_t)&v32, v20);
              v16 = (char *)__p;
              v14 = v31;
            }
            else
            {
              v21 = 0;
            }
            v22 = &v21[2 * v18];
            *(_WORD *)v22 = v13;
            v15 = v22 + 2;
            while (v14 != v16)
            {
              v23 = *((_WORD *)v14 - 1);
              v14 -= 2;
              *((_WORD *)v22 - 1) = v23;
              v22 -= 2;
            }
            __p = v22;
            v31 = v15;
            v32 = &v21[2 * v20];
            if (v16)
              operator delete(v16);
          }
          else
          {
            *(_WORD *)v31 = v12;
            v15 = v14 + 2;
          }
          v31 = v15;
          ++v10;
          v9 = *(_QWORD *)(a1 + 64);
        }
        while (v10 < v9);
        v6 = *(_QWORD *)(a1 + 56);
      }
      ++v7;
    }
    while (v6 > v7);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)&__p, &v26);
  *a3 = v26;
  if (__p)
  {
    v31 = (char *)__p;
    operator delete(__p);
  }
}

void sub_206E1C168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::RemapData<std::vector<e4m3_t>,ZinIrConstData_specialization<e4m3_t>>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v26;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *__p;
  char *v33;
  char *v34;

  v4 = a2[2];
  v5 = a2[3];
  __p = 0;
  v33 = 0;
  v34 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&__p, *(_QWORD *)(a1 + 64) * *(_QWORD *)(a1 + 56));
  v6 = *(_QWORD *)(a1 + 56);
  if (v6 >= 1)
  {
    v7 = 0;
    v26 = v5 * v4;
    v8 = *(_QWORD *)(a1 + 64);
    do
    {
      if (v8 >= 1)
      {
        v9 = 0;
        v10 = v7 / v26 + a2[1] * (v7 % v26);
        do
        {
          *(_QWORD *)&v28 = v10;
          *((_QWORD *)&v28 + 1) = v9;
          v30 = 0;
          v31 = 0;
          v29 = 0;
          v11 = ZinIrWeightBase::GetAt<e4m3_t>(a1);
          v12 = v11;
          v13 = v33;
          if (v33 >= v34)
          {
            v15 = (unint64_t)__p;
            v16 = v33 - (_BYTE *)__p;
            v17 = v33 - (_BYTE *)__p + 1;
            if (v17 < 0)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v18 = v34 - (_BYTE *)__p;
            if (2 * (v34 - (_BYTE *)__p) > (unint64_t)v17)
              v17 = 2 * v18;
            if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
              v19 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v19 = v17;
            if (v19)
              v20 = (char *)operator new(v19);
            else
              v20 = 0;
            v21 = &v20[v16];
            v22 = &v20[v16];
            *v22 = v12;
            v14 = v22 + 1;
            if (v13 != (char *)v15)
            {
              v23 = &v13[~v15];
              do
              {
                v24 = *--v13;
                (v23--)[(_QWORD)v20] = v24;
              }
              while (v13 != (char *)v15);
              v13 = (char *)__p;
              v21 = v20;
            }
            __p = v21;
            v33 = v14;
            v34 = &v20[v19];
            if (v13)
              operator delete(v13);
          }
          else
          {
            *v33 = v11;
            v14 = v13 + 1;
          }
          v33 = v14;
          ++v9;
          v8 = *(_QWORD *)(a1 + 64);
        }
        while (v9 < v8);
        v6 = *(_QWORD *)(a1 + 56);
      }
      ++v7;
    }
    while (v6 > v7);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<e4m3_t>,std::allocator<ZinIrConstData_specialization<e4m3_t>>,std::vector<e4m3_t>,void>((uint64_t)&__p, &v28);
  *a3 = v28;
  if (__p)
  {
    v33 = (char *)__p;
    operator delete(__p);
  }
}

void sub_206E1C360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::RemapData<std::vector<unsigned char>,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v26;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *__p;
  char *v33;
  char *v34;

  v4 = a2[2];
  v5 = a2[3];
  __p = 0;
  v33 = 0;
  v34 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&__p, *(_QWORD *)(a1 + 64) * *(_QWORD *)(a1 + 56));
  v6 = *(_QWORD *)(a1 + 56);
  if (v6 >= 1)
  {
    v7 = 0;
    v26 = v5 * v4;
    v8 = *(_QWORD *)(a1 + 64);
    do
    {
      if (v8 >= 1)
      {
        v9 = 0;
        v10 = v7 / v26 + a2[1] * (v7 % v26);
        do
        {
          *(_QWORD *)&v28 = v10;
          *((_QWORD *)&v28 + 1) = v9;
          v30 = 0;
          v31 = 0;
          v29 = 0;
          v11 = ZinIrWeightBase::GetAt<unsigned char>(a1);
          v12 = v11;
          v13 = v33;
          if (v33 >= v34)
          {
            v15 = (unint64_t)__p;
            v16 = v33 - (_BYTE *)__p;
            v17 = v33 - (_BYTE *)__p + 1;
            if (v17 < 0)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v18 = v34 - (_BYTE *)__p;
            if (2 * (v34 - (_BYTE *)__p) > (unint64_t)v17)
              v17 = 2 * v18;
            if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
              v19 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v19 = v17;
            if (v19)
              v20 = (char *)operator new(v19);
            else
              v20 = 0;
            v21 = &v20[v16];
            v22 = &v20[v16];
            *v22 = v12;
            v14 = v22 + 1;
            if (v13 != (char *)v15)
            {
              v23 = &v13[~v15];
              do
              {
                v24 = *--v13;
                (v23--)[(_QWORD)v20] = v24;
              }
              while (v13 != (char *)v15);
              v13 = (char *)__p;
              v21 = v20;
            }
            __p = v21;
            v33 = v14;
            v34 = &v20[v19];
            if (v13)
              operator delete(v13);
          }
          else
          {
            *v33 = v11;
            v14 = v13 + 1;
          }
          v33 = v14;
          ++v9;
          v8 = *(_QWORD *)(a1 + 64);
        }
        while (v9 < v8);
        v6 = *(_QWORD *)(a1 + 56);
      }
      ++v7;
    }
    while (v6 > v7);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)&__p, &v28);
  *a3 = v28;
  if (__p)
  {
    v33 = (char *)__p;
    operator delete(__p);
  }
}

void sub_206E1C558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::RemapData<std::vector<signed char>,ZinIrConstData_specialization<signed char>>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v26;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *__p;
  char *v33;
  char *v34;

  v4 = a2[2];
  v5 = a2[3];
  __p = 0;
  v33 = 0;
  v34 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&__p, *(_QWORD *)(a1 + 64) * *(_QWORD *)(a1 + 56));
  v6 = *(_QWORD *)(a1 + 56);
  if (v6 >= 1)
  {
    v7 = 0;
    v26 = v5 * v4;
    v8 = *(_QWORD *)(a1 + 64);
    do
    {
      if (v8 >= 1)
      {
        v9 = 0;
        v10 = v7 / v26 + a2[1] * (v7 % v26);
        do
        {
          *(_QWORD *)&v28 = v10;
          *((_QWORD *)&v28 + 1) = v9;
          v30 = 0;
          v31 = 0;
          v29 = 0;
          v11 = ZinIrWeightBase::GetAt<signed char>(a1);
          v12 = v11;
          v13 = v33;
          if (v33 >= v34)
          {
            v15 = (unint64_t)__p;
            v16 = v33 - (_BYTE *)__p;
            v17 = v33 - (_BYTE *)__p + 1;
            if (v17 < 0)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v18 = v34 - (_BYTE *)__p;
            if (2 * (v34 - (_BYTE *)__p) > (unint64_t)v17)
              v17 = 2 * v18;
            if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
              v19 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v19 = v17;
            if (v19)
              v20 = (char *)operator new(v19);
            else
              v20 = 0;
            v21 = &v20[v16];
            v22 = &v20[v16];
            *v22 = v12;
            v14 = v22 + 1;
            if (v13 != (char *)v15)
            {
              v23 = &v13[~v15];
              do
              {
                v24 = *--v13;
                (v23--)[(_QWORD)v20] = v24;
              }
              while (v13 != (char *)v15);
              v13 = (char *)__p;
              v21 = v20;
            }
            __p = v21;
            v33 = v14;
            v34 = &v20[v19];
            if (v13)
              operator delete(v13);
          }
          else
          {
            *v33 = v11;
            v14 = v13 + 1;
          }
          v33 = v14;
          ++v9;
          v8 = *(_QWORD *)(a1 + 64);
        }
        while (v9 < v8);
        v6 = *(_QWORD *)(a1 + 56);
      }
      ++v7;
    }
    while (v6 > v7);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<signed char>,std::allocator<ZinIrConstData_specialization<signed char>>,std::vector<signed char>,void>((uint64_t)&__p, &v28);
  *a3 = v28;
  if (__p)
  {
    v33 = (char *)__p;
    operator delete(__p);
  }
}

void sub_206E1C750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::RemapData<ZinIrWeightDataBitStream1,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *__p[2];
  __int128 v21;

  v6 = a2[2];
  v7 = a2[3];
  v21 = 0u;
  *(_OWORD *)__p = 0u;
  v19 = &unk_24C023888;
  std::vector<unsigned char>::reserve((unint64_t *)&__p[1], (unint64_t)(*(_QWORD *)(a1 + 64) * *(_QWORD *)(a1 + 56) + 7) >> 3);
  v8 = *(_QWORD *)(a1 + 56);
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = v7 * v6;
    v11 = *(_QWORD *)(a1 + 64);
    do
    {
      if (v11 >= 1)
      {
        v12 = 0;
        v13 = v9 / v10 + a2[1] * (v9 % v10);
        do
        {
          *(_QWORD *)&v15 = v13;
          *((_QWORD *)&v15 + 1) = v12;
          v17 = 0;
          v18 = 0;
          v16 = 0;
          v14 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>(a1);
          ZinIrWeightDataBitStream1::push_back((ZinIrWeightDataBitStream1 *)&v19, v14 & 1);
          ++v12;
          v11 = *(_QWORD *)(a1 + 64);
        }
        while (v12 < v11);
        v8 = *(_QWORD *)(a1 + 56);
      }
      ++v9;
    }
    while (v8 > v9);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream1,void>((uint64_t)&v19, &v15);
  *a3 = v15;
  v19 = &unk_24C024808;
  if (__p[1])
  {
    *(void **)&v21 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_206E1C8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::RemapData<ZinIrWeightDataBitStream2,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *__p[2];
  __int128 v21;

  v6 = a2[2];
  v7 = a2[3];
  v21 = 0u;
  *(_OWORD *)__p = 0u;
  v19 = &unk_24C0238B8;
  std::vector<unsigned char>::reserve((unint64_t *)&__p[1], (unint64_t)(2 * *(_QWORD *)(a1 + 56) * *(_QWORD *)(a1 + 64) + 7) >> 3);
  v8 = *(_QWORD *)(a1 + 56);
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = v7 * v6;
    v11 = *(_QWORD *)(a1 + 64);
    do
    {
      if (v11 >= 1)
      {
        v12 = 0;
        v13 = v9 / v10 + a2[1] * (v9 % v10);
        do
        {
          *(_QWORD *)&v15 = v13;
          *((_QWORD *)&v15 + 1) = v12;
          v17 = 0;
          v18 = 0;
          v16 = 0;
          v14 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>(a1);
          ZinIrWeightDataBitStream2::push_back((ZinIrWeightDataBitStream2 *)&v19, v14 & 3);
          ++v12;
          v11 = *(_QWORD *)(a1 + 64);
        }
        while (v12 < v11);
        v8 = *(_QWORD *)(a1 + 56);
      }
      ++v9;
    }
    while (v8 > v9);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream2,void>((uint64_t)&v19, &v15);
  *a3 = v15;
  v19 = &unk_24C024808;
  if (__p[1])
  {
    *(void **)&v21 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_206E1CA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::RemapData<ZinIrWeightDataBitStream3,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *__p[2];
  __int128 v20;

  v6 = a2[2];
  v7 = a2[3];
  v20 = 0u;
  *(_OWORD *)__p = 0u;
  v18 = &unk_24BFFE070;
  std::vector<unsigned char>::reserve((unint64_t *)&__p[1], (unint64_t)(3 * *(_QWORD *)(a1 + 56) * *(_QWORD *)(a1 + 64) + 7) >> 3);
  v8 = *(_QWORD *)(a1 + 56);
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = v7 * v6;
    v11 = *(_QWORD *)(a1 + 64);
    do
    {
      if (v11 >= 1)
      {
        v12 = 0;
        v13 = v9 / v10 + a2[1] * (v9 % v10);
        do
        {
          *(_QWORD *)&v14 = v13;
          *((_QWORD *)&v14 + 1) = v12;
          v16 = 0;
          v17 = 0;
          v15 = 0;
          ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>(a1);
          ZinIrWeightDataBitStream3::push_back((ZinIrWeightDataBitStream3 *)&v18);
          ++v12;
          v11 = *(_QWORD *)(a1 + 64);
        }
        while (v12 < v11);
        v8 = *(_QWORD *)(a1 + 56);
      }
      ++v9;
    }
    while (v8 > v9);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream3,void>((uint64_t)&v18, &v14);
  *a3 = v14;
  v18 = &unk_24C024808;
  if (__p[1])
  {
    *(void **)&v20 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_206E1CB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::RemapData<ZinIrWeightDataBitStream4,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *__p[2];
  __int128 v21;

  v6 = a2[2];
  v7 = a2[3];
  v21 = 0u;
  *(_OWORD *)__p = 0u;
  v19 = &unk_24C0238E8;
  std::vector<unsigned char>::reserve((unint64_t *)&__p[1], (unint64_t)(4 * *(_QWORD *)(a1 + 56) * *(_QWORD *)(a1 + 64) + 7) >> 3);
  v8 = *(_QWORD *)(a1 + 56);
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = v7 * v6;
    v11 = *(_QWORD *)(a1 + 64);
    do
    {
      if (v11 >= 1)
      {
        v12 = 0;
        v13 = v9 / v10 + a2[1] * (v9 % v10);
        do
        {
          *(_QWORD *)&v15 = v13;
          *((_QWORD *)&v15 + 1) = v12;
          v17 = 0;
          v18 = 0;
          v16 = 0;
          v14 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>(a1);
          ZinIrWeightDataBitStream4::push_back((ZinIrWeightDataBitStream4 *)&v19, v14 & 0xF);
          ++v12;
          v11 = *(_QWORD *)(a1 + 64);
        }
        while (v12 < v11);
        v8 = *(_QWORD *)(a1 + 56);
      }
      ++v9;
    }
    while (v8 > v9);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream4,void>((uint64_t)&v19, &v15);
  *a3 = v15;
  v19 = &unk_24C024808;
  if (__p[1])
  {
    *(void **)&v21 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_206E1CD00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::RemapData<ZinIrWeightDataBitStream6,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *__p[2];
  __int128 v21;

  v6 = a2[2];
  v7 = a2[3];
  v21 = 0u;
  *(_OWORD *)__p = 0u;
  v19 = &unk_24C023918;
  std::vector<unsigned char>::reserve((unint64_t *)&__p[1], (unint64_t)(6 * *(_QWORD *)(a1 + 56) * *(_QWORD *)(a1 + 64) + 7) >> 3);
  v8 = *(_QWORD *)(a1 + 56);
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = v7 * v6;
    v11 = *(_QWORD *)(a1 + 64);
    do
    {
      if (v11 >= 1)
      {
        v12 = 0;
        v13 = v9 / v10 + a2[1] * (v9 % v10);
        do
        {
          *(_QWORD *)&v15 = v13;
          *((_QWORD *)&v15 + 1) = v12;
          v17 = 0;
          v18 = 0;
          v16 = 0;
          v14 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>(a1);
          ZinIrWeightDataBitStream6::push_back((ZinIrWeightDataBitStream6 *)&v19, v14 & 0x3F);
          ++v12;
          v11 = *(_QWORD *)(a1 + 64);
        }
        while (v12 < v11);
        v8 = *(_QWORD *)(a1 + 56);
      }
      ++v9;
    }
    while (v8 > v9);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream6,void>((uint64_t)&v19, &v15);
  *a3 = v15;
  v19 = &unk_24C024808;
  if (__p[1])
  {
    *(void **)&v21 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_206E1CE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ZinIrWeight::RequiresDePalettizationForShuffleChannelsByType(uint64_t a1, uint64_t *a2)
{
  _BOOL8 result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD v13[2];
  int v14;

  result = ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8));
  if (!result)
    return result;
  v5 = *(_QWORD *)(a1 + 304);
  if (v5 < 2)
    return 0;
  memset(v13, 0, sizeof(v13));
  v14 = 1065353216;
  v6 = *(_QWORD *)(a1 + 56);
  if (v6 % v5)
  {
    v7 = *(_QWORD *)(a1 + 56);
    while (1)
    {
      v12 = v7;
      if (v7 >= ZinAlignPower2(v6, v5))
        break;
      std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>((uint64_t)v13, &v12, &v12);
      v7 = v12 + 1;
      v6 = *(_QWORD *)(a1 + 56);
      v5 = *(_QWORD *)(a1 + 304);
    }
    v5 = *(_QWORD *)(a1 + 304);
  }
  v8 = *a2;
  if (a2[1] == *a2)
  {
LABEL_16:
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v13);
    return 0;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  while (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v13, (unint64_t *)(v8 + v9)))
  {
    if (v10 % v5)
    {
      v8 = *a2;
      if (v10 % v5 + v11 != *(_QWORD *)(*a2 + 8 * v10))
        break;
    }
    else
    {
      v8 = *a2;
      v11 = *(_QWORD *)(*a2 + 8 * v10);
      if (v11 % v5)
        break;
    }
    ++v10;
    v9 += 8;
    if (v10 >= (a2[1] - v8) >> 3)
      goto LABEL_16;
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v13);
  return 1;
}

void sub_206E1CFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void ZinIrWeight::ShuffleChannelsByType(uint64_t a1@<X0>, uint64_t *a2@<X1>, const ZinIrVector *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  int64x2_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int64x2_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  int64x2_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  int64x2_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  int64x2_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  int64x2_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t *v40;
  _BOOL8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64x2_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  int64x2_t v61[2];
  uint64_t v62;
  int64x2_t v63;
  int64x2_t v64;

  if (ZinIrWeight::RequiresDePalettizationForShuffleChannelsByType(a1, a2))
  {
    ZinIrWeight::CreateDePalettizedWeight((ZinIrWeight *)a1, a3, v61[0].i64);
    v8 = v61[0].i64[0];
    (*(void (**)(uint64_t, uint64_t *, const ZinIrVector *))(*(_QWORD *)v61[0].i64[0] + 48))(v61[0].i64[0], a2, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  }
  else
  {
    if (a3 && (ZinKernelFormatIsQuantizationCompatible(*(_DWORD *)(a1 + 8)) & 1) == 0)
      ZinAssertImpl("kernel zero point is only supported for int8/uint8 kernels");
    if (*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280) >= 0x11uLL)
      ZinAssertImpl("Channel shuffling is not supported for per-channel palettized kernels yet");
    v63 = 0uLL;
    switch(*(_DWORD *)(a1 + 8))
    {
      case 1:
        ZinIrWeightBase::ShuffleChannelData<std::vector<signed char>,ZinIrConstData_specialization<signed char>>(a1, a2, (uint64_t)a3, *(_QWORD *)(a1 + 304), v61);
        goto LABEL_68;
      case 2:
      case 0x1B:
        ZinIrWeightBase::ShuffleChannelData<std::vector<unsigned char>,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)a3, *(_QWORD *)(a1 + 304), v61);
        v36 = v61[0];
        v61[0] = 0uLL;
        v37 = (std::__shared_weak_count *)v63.i64[1];
        v63 = v36;
        if (v37)
        {
          p_shared_owners = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(p_shared_owners);
          while (__stlxr(v39 - 1, p_shared_owners));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        v13 = (std::__shared_weak_count *)v61[0].i64[1];
        if (!v61[0].i64[1])
          break;
        v40 = (unint64_t *)(v61[0].i64[1] + 8);
        do
          v15 = __ldaxr(v40);
        while (__stlxr(v15 - 1, v40));
        goto LABEL_60;
      case 4:
        ZinIrWeightBase::ShuffleChannelData<std::vector<half>,ZinIrConstData_specialization<half>>(a1, a2, (uint64_t)a3, *(_QWORD *)(a1 + 304), v61);
        goto LABEL_68;
      case 5:
        ZinIrWeightBase::ShuffleChannelData<std::vector<e4m3_t>,ZinIrConstData_specialization<e4m3_t>>(a1, a2, (uint64_t)a3, *(_QWORD *)(a1 + 304), v61);
        goto LABEL_68;
      case 6:
        ZinIrWeightBase::ShuffleChannelData<std::vector<float>,ZinIrConstData_specialization<float>>(a1, a2, (uint64_t)a3, *(_QWORD *)(a1 + 304), v61);
LABEL_68:
        std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v63, (__int128 *)v61[0].i8);
        std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v61);
        break;
      case 7:
      case 8:
      case 9:
      case 0xA:
        ZinIrWeightBase::ShuffleChannelData<ZinIrWeightDataBitStream1,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)a3, *(_QWORD *)(a1 + 304), v61);
        v9 = v61[0];
        v61[0] = 0uLL;
        v10 = (std::__shared_weak_count *)v63.i64[1];
        v63 = v9;
        if (v10)
        {
          v11 = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v13 = (std::__shared_weak_count *)v61[0].i64[1];
        if (!v61[0].i64[1])
          break;
        v14 = (unint64_t *)(v61[0].i64[1] + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        goto LABEL_60;
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
        ZinIrWeightBase::ShuffleChannelData<ZinIrWeightDataBitStream2,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)a3, *(_QWORD *)(a1 + 304), v61);
        v16 = v61[0];
        v61[0] = 0uLL;
        v17 = (std::__shared_weak_count *)v63.i64[1];
        v63 = v16;
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v13 = (std::__shared_weak_count *)v61[0].i64[1];
        if (!v61[0].i64[1])
          break;
        v20 = (unint64_t *)(v61[0].i64[1] + 8);
        do
          v15 = __ldaxr(v20);
        while (__stlxr(v15 - 1, v20));
        goto LABEL_60;
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
        ZinIrWeightBase::ShuffleChannelData<ZinIrWeightDataBitStream3,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)a3, *(_QWORD *)(a1 + 304), v61);
        v21 = v61[0];
        v61[0] = 0uLL;
        v22 = (std::__shared_weak_count *)v63.i64[1];
        v63 = v21;
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v13 = (std::__shared_weak_count *)v61[0].i64[1];
        if (!v61[0].i64[1])
          break;
        v25 = (unint64_t *)(v61[0].i64[1] + 8);
        do
          v15 = __ldaxr(v25);
        while (__stlxr(v15 - 1, v25));
        goto LABEL_60;
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
        ZinIrWeightBase::ShuffleChannelData<ZinIrWeightDataBitStream4,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)a3, *(_QWORD *)(a1 + 304), v61);
        v26 = v61[0];
        v61[0] = 0uLL;
        v27 = (std::__shared_weak_count *)v63.i64[1];
        v63 = v26;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v13 = (std::__shared_weak_count *)v61[0].i64[1];
        if (!v61[0].i64[1])
          break;
        v30 = (unint64_t *)(v61[0].i64[1] + 8);
        do
          v15 = __ldaxr(v30);
        while (__stlxr(v15 - 1, v30));
        goto LABEL_60;
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
        ZinIrWeightBase::ShuffleChannelData<ZinIrWeightDataBitStream6,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)a3, *(_QWORD *)(a1 + 304), v61);
        v31 = v61[0];
        v61[0] = 0uLL;
        v32 = (std::__shared_weak_count *)v63.i64[1];
        v63 = v31;
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v13 = (std::__shared_weak_count *)v61[0].i64[1];
        if (!v61[0].i64[1])
          break;
        v35 = (unint64_t *)(v61[0].i64[1] + 8);
        do
          v15 = __ldaxr(v35);
        while (__stlxr(v15 - 1, v35));
LABEL_60:
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        v41 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v41)
          goto LABEL_78;
        ZinIrWeight::ShuffleChannelsByType(v41, v42, v43, v44, v45, v46, v47, v48);
        break;
    }
    if (v63.i64[0])
    {
      v49 = *(int64x2_t *)(a1 + 72);
      v61[0] = *(int64x2_t *)(a1 + 56);
      v61[1] = v49;
      v50 = (a2[1] - *a2) >> 3;
      v62 = *(_QWORD *)(a1 + 88);
      v61[0].i64[0] = v50;
      v51 = operator new();
      v52 = v51;
      v53 = (std::__shared_weak_count *)v63.i64[1];
      v64 = v63;
      if (v63.i64[1])
      {
        v54 = (unint64_t *)(v63.i64[1] + 8);
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      ZinIrWeight::ZinIrWeight(v51, v64.i64, (uint64_t **)(a1 + 280), *(_DWORD *)(a1 + 8), v61, *(_QWORD *)(a1 + 304), 1262703187, 0);
      *a4 = v52;
      if (v53)
      {
        v56 = (unint64_t *)&v53->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
    }
    else
    {
LABEL_78:
      *a4 = 0;
    }
    v58 = (std::__shared_weak_count *)v63.i64[1];
    if (v63.i64[1])
    {
      v59 = (unint64_t *)(v63.i64[1] + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
  }
}

void sub_206E1D594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ZinIrWeight::CreateDePalettizedWeight(ZinIrWeight *this@<X0>, const ZinIrVector *a2@<X1>, uint64_t *a3@<X8>)
{
  int v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  void **v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  int v36;
  uint64_t *v37;
  std::__shared_weak_count *v38;
  void **v39[3];

  v37 = 0;
  v38 = 0;
  v6 = *((_DWORD *)this + 2);
  v36 = 0;
  if (!ZinKernelFormatGetPaletteFormat(v6, &v36))
  {
    switch(v36)
    {
      case 1:
        ZinIrWeight::DePalettizeWeightData<signed char>((uint64_t)this, (uint64_t)a2, &v33);
        break;
      case 2:
        ZinIrWeight::DePalettizeWeightData<unsigned char>((uint64_t)this, (uint64_t)a2, &v33);
        break;
      case 4:
        ZinIrWeight::DePalettizeWeightData<half>((uint64_t)this, (uint64_t)a2, &v33);
        break;
      case 5:
        ZinIrWeight::DePalettizeWeightData<e4m3_t>((uint64_t)this, (uint64_t)a2, &v33);
        break;
      default:
        v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v15)
          ZinIrWeight::CreateDePalettizedWeight(v15, v16, v17, v18, v19, v20, v21, v22);
        goto LABEL_4;
    }
    v24 = v33;
    v23 = v34;
    v37 = (uint64_t *)v33;
    v38 = v34;
    if (v33)
    {
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v25 = operator new();
      v26 = v25;
      v39[0] = v24;
      v39[1] = (void **)&v23->__vftable;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      ZinIrWeight::ZinIrWeight(v25, (uint64_t *)v39, (uint64_t **)&v33, v36, (int64x2_t *)((char *)this + 56), 1, 1262703187, 0);
      *a3 = v26;
      if (v23)
      {
        v29 = (unint64_t *)&v23->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v39[0] = (void **)&v33;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v39);
      v23 = v38;
      if (!v38)
        return;
    }
    else
    {
      *a3 = 0;
      if (!v23)
        return;
    }
    v31 = (unint64_t *)&v23->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    return;
  }
  v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v7)
    ZinIrWeight::CreateDePalettizedWeight(v7, v8, v9, v10, v11, v12, v13, v14);
LABEL_4:
  *a3 = 0;
}

void sub_206E1D818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ZinIrWeightBase::ShuffleChannelData<std::vector<float>,ZinIrConstData_specialization<float>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t i;
  int v24;
  uint64_t v25;
  int v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  _OWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  void *__p;
  char *v45;
  char *v46;

  __p = 0;
  v45 = 0;
  v46 = 0;
  std::vector<float>::reserve(&__p, *(_QWORD *)(a1 + 72) * *(_QWORD *)(a1 + 64) * ((a2[1] - *a2) >> 3) * *(_QWORD *)(a1 + 80) * *(_QWORD *)(a1 + 88));
  if (a3 && ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("Padding a palettized weight with zero point is not supported.");
  if (a4 != 1 && !ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("Palette vector size can be more than 1 only for palettized kernels.");
  v37 = a5;
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  v11 = *a2;
  v10 = a2[1];
  if (v10 != *a2)
  {
    v12 = 0;
    v13 = *(_QWORD *)(a1 + 64);
    v14 = v13;
    v38 = a2;
    v39 = a4;
    do
    {
      *(_QWORD *)&v41 = *(_QWORD *)(v11 + 8 * v12);
      if (v14)
      {
        v15 = 0;
        v16 = *(_QWORD *)(a1 + 72);
        v17 = v16;
        do
        {
          *((_QWORD *)&v41 + 1) = v15;
          if (v17)
          {
            v18 = 0;
            v19 = *(_QWORD *)(a1 + 80);
            v20 = v19;
            do
            {
              *(_QWORD *)&v42 = v18;
              if (v20)
              {
                v21 = 0;
                v22 = *(_QWORD *)(a1 + 88);
                do
                {
                  *((_QWORD *)&v42 + 1) = v21;
                  if (v22)
                  {
                    for (i = 0; i < v22; ++i)
                    {
                      v43 = i;
                      v24 = 0;
                      if ((uint64_t)v41 < *(_QWORD *)(a1 + 56))
                      {
                        v25 = (**(uint64_t (***)(uint64_t, __int128 *))a1)(a1, &v41);
                        if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 136) + 168))(*(_QWORD *)(a1 + 136), v25) & 1) == 0)
                        {
                          ZinIrWeightBase::GetAt<float>(a1);
                          v24 = v26;
                        }
                      }
                      v27 = v45;
                      if (v45 >= v46)
                      {
                        v29 = (char *)__p;
                        v30 = (v45 - (_BYTE *)__p) >> 2;
                        v31 = v30 + 1;
                        if ((unint64_t)(v30 + 1) >> 62)
                          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                        v32 = v46 - (_BYTE *)__p;
                        if ((v46 - (_BYTE *)__p) >> 1 > v31)
                          v31 = v32 >> 1;
                        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                          v33 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v33 = v31;
                        if (v33)
                        {
                          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v46, v33);
                          v29 = (char *)__p;
                          v27 = v45;
                        }
                        else
                        {
                          v34 = 0;
                        }
                        v35 = &v34[4 * v30];
                        *(_DWORD *)v35 = v24;
                        v28 = v35 + 4;
                        while (v27 != v29)
                        {
                          v36 = *((_DWORD *)v27 - 1);
                          v27 -= 4;
                          *((_DWORD *)v35 - 1) = v36;
                          v35 -= 4;
                        }
                        __p = v35;
                        v45 = v28;
                        v46 = &v34[4 * v33];
                        if (v29)
                          operator delete(v29);
                      }
                      else
                      {
                        *(_DWORD *)v45 = v24;
                        v28 = v27 + 4;
                      }
                      v45 = v28;
                      v22 = *(_QWORD *)(a1 + 88);
                    }
                    v19 = *(_QWORD *)(a1 + 80);
                  }
                  ++v21;
                }
                while (v21 < v19);
                v16 = *(_QWORD *)(a1 + 72);
                v20 = v19;
              }
              ++v18;
            }
            while (v18 < v16);
            v13 = *(_QWORD *)(a1 + 64);
            v17 = v16;
          }
          ++v15;
        }
        while (v15 < v13);
        a4 = v39;
        v11 = *v38;
        v10 = v38[1];
        v14 = v13;
      }
      v12 += a4;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<float>,std::allocator<ZinIrConstData_specialization<float>>,std::vector<float>,void>((uint64_t)&__p, &v40);
  *v37 = v40;
  if (__p)
  {
    v45 = (char *)__p;
    operator delete(__p);
  }
}

void sub_206E1DB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::ShuffleChannelData<std::vector<half>,ZinIrConstData_specialization<half>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t i;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  __int16 v36;
  _OWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  void *__p;
  char *v45;
  char *v46;

  __p = 0;
  v45 = 0;
  v46 = 0;
  std::vector<half>::reserve(&__p, *(_QWORD *)(a1 + 72) * *(_QWORD *)(a1 + 64) * ((a2[1] - *a2) >> 3) * *(_QWORD *)(a1 + 80) * *(_QWORD *)(a1 + 88));
  if (a3 && ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("Padding a palettized weight with zero point is not supported.");
  if (a4 != 1 && !ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("Palette vector size can be more than 1 only for palettized kernels.");
  v37 = a5;
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  v11 = *a2;
  v10 = a2[1];
  if (v10 != *a2)
  {
    v12 = 0;
    v13 = *(_QWORD *)(a1 + 64);
    v14 = v13;
    v38 = a2;
    v39 = a4;
    do
    {
      *(_QWORD *)&v41 = *(_QWORD *)(v11 + 8 * v12);
      if (v14)
      {
        v15 = 0;
        v16 = *(_QWORD *)(a1 + 72);
        v17 = v16;
        do
        {
          *((_QWORD *)&v41 + 1) = v15;
          if (v17)
          {
            v18 = 0;
            v19 = *(_QWORD *)(a1 + 80);
            v20 = v19;
            do
            {
              *(_QWORD *)&v42 = v18;
              if (v20)
              {
                v21 = 0;
                v22 = *(_QWORD *)(a1 + 88);
                do
                {
                  *((_QWORD *)&v42 + 1) = v21;
                  if (v22)
                  {
                    for (i = 0; i < v22; ++i)
                    {
                      v43 = i;
                      v24 = 0;
                      if ((uint64_t)v41 < *(_QWORD *)(a1 + 56))
                      {
                        v25 = (**(uint64_t (***)(uint64_t, __int128 *))a1)(a1, &v41);
                        if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 136) + 168))(*(_QWORD *)(a1 + 136), v25) & 1) == 0)
                        {
                          ZinIrWeightBase::GetAt<half>(a1);
                          v24 = v26;
                        }
                      }
                      v27 = v45;
                      if (v45 >= v46)
                      {
                        v29 = (char *)__p;
                        v30 = v45 - (_BYTE *)__p;
                        if (v45 - (_BYTE *)__p <= -3)
                          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                        v31 = v30 >> 1;
                        if (v46 - (_BYTE *)__p <= (unint64_t)((v30 >> 1) + 1))
                          v32 = v31 + 1;
                        else
                          v32 = v46 - (_BYTE *)__p;
                        if ((unint64_t)(v46 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
                          v33 = 0x7FFFFFFFFFFFFFFFLL;
                        else
                          v33 = v32;
                        if (v33)
                        {
                          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>((uint64_t)&v46, v33);
                          v29 = (char *)__p;
                          v27 = v45;
                        }
                        else
                        {
                          v34 = 0;
                        }
                        v35 = &v34[2 * v31];
                        *(_WORD *)v35 = v24;
                        v28 = v35 + 2;
                        while (v27 != v29)
                        {
                          v36 = *((_WORD *)v27 - 1);
                          v27 -= 2;
                          *((_WORD *)v35 - 1) = v36;
                          v35 -= 2;
                        }
                        __p = v35;
                        v45 = v28;
                        v46 = &v34[2 * v33];
                        if (v29)
                          operator delete(v29);
                      }
                      else
                      {
                        *(_WORD *)v45 = v24;
                        v28 = v27 + 2;
                      }
                      v45 = v28;
                      v22 = *(_QWORD *)(a1 + 88);
                    }
                    v19 = *(_QWORD *)(a1 + 80);
                  }
                  ++v21;
                }
                while (v21 < v19);
                v16 = *(_QWORD *)(a1 + 72);
                v20 = v19;
              }
              ++v18;
            }
            while (v18 < v16);
            v13 = *(_QWORD *)(a1 + 64);
            v17 = v16;
          }
          ++v15;
        }
        while (v15 < v13);
        a4 = v39;
        v11 = *v38;
        v10 = v38[1];
        v14 = v13;
      }
      v12 += a4;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)&__p, &v40);
  *v37 = v40;
  if (__p)
  {
    v45 = (char *)__p;
    operator delete(__p);
  }
}

void sub_206E1DE70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::ShuffleChannelData<std::vector<e4m3_t>,ZinIrConstData_specialization<e4m3_t>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t i;
  uint64_t v22;
  char v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char v35;
  _OWORD *v36;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  void *__p;
  char *v47;
  char *v48;

  __p = 0;
  v47 = 0;
  v48 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&__p, *(_QWORD *)(a1 + 72) * *(_QWORD *)(a1 + 64) * ((a2[1] - *a2) >> 3) * *(_QWORD *)(a1 + 80) * *(_QWORD *)(a1 + 88));
  if (a3 && ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("Padding a palettized weight with zero point is not supported.");
  if (a4 != 1 && !ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("Palette vector size can be more than 1 only for palettized kernels.");
  v36 = a5;
  v45 = 0;
  v43 = 0u;
  v44 = 0u;
  v9 = *a2;
  v8 = a2[1];
  if (v8 != *a2)
  {
    v10 = 0;
    v11 = *(_QWORD *)(a1 + 64);
    v12 = v11;
    do
    {
      v39 = v10;
      *(_QWORD *)&v43 = *(_QWORD *)(v9 + 8 * v10);
      if (v12)
      {
        v13 = 0;
        v14 = *(_QWORD *)(a1 + 72);
        v15 = v14;
        do
        {
          *((_QWORD *)&v43 + 1) = v13;
          if (v15)
          {
            v16 = 0;
            v17 = *(_QWORD *)(a1 + 80);
            v18 = v17;
            v40 = v13;
            do
            {
              *(_QWORD *)&v44 = v16;
              if (v18)
              {
                v41 = v16;
                v19 = 0;
                v20 = *(_QWORD *)(a1 + 88);
                do
                {
                  *((_QWORD *)&v44 + 1) = v19;
                  if (v20)
                  {
                    for (i = 0; i < v20; ++i)
                    {
                      v45 = i;
                      if ((uint64_t)v43 >= *(_QWORD *)(a1 + 56)
                        || (v22 = (**(uint64_t (***)(uint64_t, __int128 *))a1)(a1, &v43),
                            ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 136) + 168))(*(_QWORD *)(a1 + 136), v22) & 1) != 0))
                      {
                        v23 = 0;
                      }
                      else
                      {
                        v23 = ZinIrWeightBase::GetAt<e4m3_t>(a1);
                      }
                      v24 = v47;
                      if (v47 >= v48)
                      {
                        v26 = (unint64_t)__p;
                        v27 = v47 - (_BYTE *)__p;
                        v28 = v47 - (_BYTE *)__p + 1;
                        if (v28 < 0)
                          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                        v29 = v48 - (_BYTE *)__p;
                        if (2 * (v48 - (_BYTE *)__p) > (unint64_t)v28)
                          v28 = 2 * v29;
                        if (v29 >= 0x3FFFFFFFFFFFFFFFLL)
                          v30 = 0x7FFFFFFFFFFFFFFFLL;
                        else
                          v30 = v28;
                        if (v30)
                          v31 = (char *)operator new(v30);
                        else
                          v31 = 0;
                        v32 = &v31[v27];
                        v33 = &v31[v27];
                        *v33 = v23;
                        v25 = v33 + 1;
                        if (v24 != (char *)v26)
                        {
                          v34 = &v24[~v26];
                          do
                          {
                            v35 = *--v24;
                            (v34--)[(_QWORD)v31] = v35;
                          }
                          while (v24 != (char *)v26);
                          v24 = (char *)__p;
                          v32 = v31;
                        }
                        __p = v32;
                        v47 = v25;
                        v48 = &v31[v30];
                        if (v24)
                          operator delete(v24);
                      }
                      else
                      {
                        *v47 = v23;
                        v25 = v24 + 1;
                      }
                      v47 = v25;
                      v20 = *(_QWORD *)(a1 + 88);
                    }
                    v17 = *(_QWORD *)(a1 + 80);
                  }
                  ++v19;
                }
                while (v19 < v17);
                v14 = *(_QWORD *)(a1 + 72);
                v18 = v17;
                v13 = v40;
                v16 = v41;
              }
              ++v16;
            }
            while (v16 < v14);
            v11 = *(_QWORD *)(a1 + 64);
            v15 = v14;
          }
          ++v13;
        }
        while (v13 < v11);
        v9 = *a2;
        v8 = a2[1];
        v12 = v11;
      }
      v10 = v39 + a4;
    }
    while (v39 + a4 < (unint64_t)((v8 - v9) >> 3));
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<e4m3_t>,std::allocator<ZinIrConstData_specialization<e4m3_t>>,std::vector<e4m3_t>,void>((uint64_t)&__p, &v42);
  *v36 = v42;
  if (__p)
  {
    v47 = (char *)__p;
    operator delete(__p);
  }
}

void sub_206E1E19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::ShuffleChannelData<std::vector<unsigned char>,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t i;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  size_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  void *__p;
  char *v50;
  char *v51;

  __p = 0;
  v50 = 0;
  v51 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&__p, *(_QWORD *)(a1 + 72) * *(_QWORD *)(a1 + 64) * ((a2[1] - *a2) >> 3) * *(_QWORD *)(a1 + 80) * *(_QWORD *)(a1 + 88));
  if (a3 && ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("Padding a palettized weight with zero point is not supported.");
  if (a4 != 1 && !ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("Palette vector size can be more than 1 only for palettized kernels.");
  v38 = a5;
  v48 = 0;
  v46 = 0u;
  v47 = 0u;
  v8 = *a2;
  if (a2[1] != *a2)
  {
    v9 = 0;
    v39 = a3;
    do
    {
      v42 = v9;
      v10 = *(_QWORD *)(v8 + 8 * v9);
      *(_QWORD *)&v46 = v10;
      if (a3)
      {
        v11 = *(_QWORD *)(a1 + 56);
        if (v10 >= v11)
          v12 = v11 - 1;
        else
          v12 = v10;
        v13 = ZinIrVector::GetAt<unsigned char>(a3, v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = *(_QWORD *)(a1 + 64);
      if (v14)
      {
        v15 = 0;
        v16 = *(_QWORD *)(a1 + 72);
        v17 = v16;
        do
        {
          *((_QWORD *)&v46 + 1) = v15;
          if (v17)
          {
            v18 = 0;
            v19 = *(_QWORD *)(a1 + 80);
            v20 = v19;
            v43 = v15;
            do
            {
              *(_QWORD *)&v47 = v18;
              if (v20)
              {
                v44 = v18;
                v21 = 0;
                v22 = *(_QWORD *)(a1 + 88);
                do
                {
                  *((_QWORD *)&v47 + 1) = v21;
                  if (v22)
                  {
                    for (i = 0; i < v22; ++i)
                    {
                      v48 = i;
                      v24 = v13;
                      if ((uint64_t)v46 < *(_QWORD *)(a1 + 56))
                      {
                        v25 = (**(uint64_t (***)(uint64_t, __int128 *))a1)(a1, &v46);
                        v24 = v13;
                        if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 136) + 168))(*(_QWORD *)(a1 + 136), v25) & 1) == 0)v24 = ZinIrWeightBase::GetAt<unsigned char>(a1);
                      }
                      v26 = v50;
                      if (v50 >= v51)
                      {
                        v28 = (unint64_t)__p;
                        v29 = v50 - (_BYTE *)__p;
                        v30 = v50 - (_BYTE *)__p + 1;
                        if (v30 < 0)
                          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                        v31 = v51 - (_BYTE *)__p;
                        if (2 * (v51 - (_BYTE *)__p) > (unint64_t)v30)
                          v30 = 2 * v31;
                        if (v31 >= 0x3FFFFFFFFFFFFFFFLL)
                          v32 = 0x7FFFFFFFFFFFFFFFLL;
                        else
                          v32 = v30;
                        if (v32)
                          v33 = (char *)operator new(v32);
                        else
                          v33 = 0;
                        v34 = &v33[v29];
                        v35 = &v33[v29];
                        *v35 = v24;
                        v27 = v35 + 1;
                        if (v26 != (char *)v28)
                        {
                          v36 = &v26[~v28];
                          do
                          {
                            v37 = *--v26;
                            (v36--)[(_QWORD)v33] = v37;
                          }
                          while (v26 != (char *)v28);
                          v26 = (char *)__p;
                          v34 = v33;
                        }
                        __p = v34;
                        v50 = v27;
                        v51 = &v33[v32];
                        if (v26)
                          operator delete(v26);
                      }
                      else
                      {
                        *v50 = v24;
                        v27 = v26 + 1;
                      }
                      v50 = v27;
                      v22 = *(_QWORD *)(a1 + 88);
                    }
                    v19 = *(_QWORD *)(a1 + 80);
                  }
                  ++v21;
                }
                while (v21 < v19);
                v16 = *(_QWORD *)(a1 + 72);
                v20 = v19;
                v15 = v43;
                v18 = v44;
              }
              ++v18;
            }
            while (v18 < v16);
            v14 = *(_QWORD *)(a1 + 64);
            v17 = v16;
          }
          ++v15;
        }
        while (v15 < v14);
      }
      v9 = v42 + a4;
      a3 = v39;
      v8 = *a2;
    }
    while (v42 + a4 < (unint64_t)((a2[1] - *a2) >> 3));
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)&__p, &v45);
  *v38 = v45;
  if (__p)
  {
    v50 = (char *)__p;
    operator delete(__p);
  }
}

void sub_206E1E4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::ShuffleChannelData<std::vector<signed char>,ZinIrConstData_specialization<signed char>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t i;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  size_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  void *__p;
  char *v50;
  char *v51;

  __p = 0;
  v50 = 0;
  v51 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&__p, *(_QWORD *)(a1 + 72) * *(_QWORD *)(a1 + 64) * ((a2[1] - *a2) >> 3) * *(_QWORD *)(a1 + 80) * *(_QWORD *)(a1 + 88));
  if (a3 && ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("Padding a palettized weight with zero point is not supported.");
  if (a4 != 1 && !ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("Palette vector size can be more than 1 only for palettized kernels.");
  v38 = a5;
  v48 = 0;
  v46 = 0u;
  v47 = 0u;
  v8 = *a2;
  if (a2[1] != *a2)
  {
    v9 = 0;
    v39 = a3;
    do
    {
      v42 = v9;
      v10 = *(_QWORD *)(v8 + 8 * v9);
      *(_QWORD *)&v46 = v10;
      if (a3)
      {
        v11 = *(_QWORD *)(a1 + 56);
        if (v10 >= v11)
          v12 = v11 - 1;
        else
          v12 = v10;
        v13 = ZinIrVector::GetAt<signed char>(a3, v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = *(_QWORD *)(a1 + 64);
      if (v14)
      {
        v15 = 0;
        v16 = *(_QWORD *)(a1 + 72);
        v17 = v16;
        do
        {
          *((_QWORD *)&v46 + 1) = v15;
          if (v17)
          {
            v18 = 0;
            v19 = *(_QWORD *)(a1 + 80);
            v20 = v19;
            v43 = v15;
            do
            {
              *(_QWORD *)&v47 = v18;
              if (v20)
              {
                v44 = v18;
                v21 = 0;
                v22 = *(_QWORD *)(a1 + 88);
                do
                {
                  *((_QWORD *)&v47 + 1) = v21;
                  if (v22)
                  {
                    for (i = 0; i < v22; ++i)
                    {
                      v48 = i;
                      v24 = v13;
                      if ((uint64_t)v46 < *(_QWORD *)(a1 + 56))
                      {
                        v25 = (**(uint64_t (***)(uint64_t, __int128 *))a1)(a1, &v46);
                        v24 = v13;
                        if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 136) + 168))(*(_QWORD *)(a1 + 136), v25) & 1) == 0)v24 = ZinIrWeightBase::GetAt<signed char>(a1);
                      }
                      v26 = v50;
                      if (v50 >= v51)
                      {
                        v28 = (unint64_t)__p;
                        v29 = v50 - (_BYTE *)__p;
                        v30 = v50 - (_BYTE *)__p + 1;
                        if (v30 < 0)
                          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                        v31 = v51 - (_BYTE *)__p;
                        if (2 * (v51 - (_BYTE *)__p) > (unint64_t)v30)
                          v30 = 2 * v31;
                        if (v31 >= 0x3FFFFFFFFFFFFFFFLL)
                          v32 = 0x7FFFFFFFFFFFFFFFLL;
                        else
                          v32 = v30;
                        if (v32)
                          v33 = (char *)operator new(v32);
                        else
                          v33 = 0;
                        v34 = &v33[v29];
                        v35 = &v33[v29];
                        *v35 = v24;
                        v27 = v35 + 1;
                        if (v26 != (char *)v28)
                        {
                          v36 = &v26[~v28];
                          do
                          {
                            v37 = *--v26;
                            (v36--)[(_QWORD)v33] = v37;
                          }
                          while (v26 != (char *)v28);
                          v26 = (char *)__p;
                          v34 = v33;
                        }
                        __p = v34;
                        v50 = v27;
                        v51 = &v33[v32];
                        if (v26)
                          operator delete(v26);
                      }
                      else
                      {
                        *v50 = v24;
                        v27 = v26 + 1;
                      }
                      v50 = v27;
                      v22 = *(_QWORD *)(a1 + 88);
                    }
                    v19 = *(_QWORD *)(a1 + 80);
                  }
                  ++v21;
                }
                while (v21 < v19);
                v16 = *(_QWORD *)(a1 + 72);
                v20 = v19;
                v15 = v43;
                v18 = v44;
              }
              ++v18;
            }
            while (v18 < v16);
            v14 = *(_QWORD *)(a1 + 64);
            v17 = v16;
          }
          ++v15;
        }
        while (v15 < v14);
      }
      v9 = v42 + a4;
      a3 = v39;
      v8 = *a2;
    }
    while (v42 + a4 < (unint64_t)((a2[1] - *a2) >> 3));
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<signed char>,std::allocator<ZinIrConstData_specialization<signed char>>,std::vector<signed char>,void>((uint64_t)&__p, &v45);
  *v38 = v45;
  if (__p)
  {
    v50 = (char *)__p;
    operator delete(__p);
  }
}

void sub_206E1E83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::ShuffleChannelData<ZinIrWeightDataBitStream1,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t i;
  unint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  void *v30;
  void *__p[2];
  __int128 v32;

  v32 = 0u;
  *(_OWORD *)__p = 0u;
  v30 = &unk_24C023888;
  std::vector<unsigned char>::reserve((unint64_t *)&__p[1], (unint64_t)(*(_QWORD *)(a1 + 72)* *(_QWORD *)(a1 + 64)* ((a2[1] - *a2) >> 3)* *(_QWORD *)(a1 + 80)* *(_QWORD *)(a1 + 88)+ 7) >> 3);
  if (a3 && ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("Padding a palettized weight with zero point is not supported.");
  if (a4 != 1 && !ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("Palette vector size can be more than 1 only for palettized kernels.");
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v11 = *a2;
  v10 = a2[1];
  if (v10 != *a2)
  {
    v12 = 0;
    v13 = *(_QWORD *)(a1 + 64);
    v14 = v13;
    do
    {
      *(_QWORD *)&v27 = *(_QWORD *)(v11 + 8 * v12);
      if (v14)
      {
        v15 = 0;
        v16 = *(_QWORD *)(a1 + 72);
        v17 = v16;
        do
        {
          *((_QWORD *)&v27 + 1) = v15;
          if (v17)
          {
            v18 = 0;
            v19 = *(_QWORD *)(a1 + 80);
            v20 = v19;
            do
            {
              *(_QWORD *)&v28 = v18;
              if (v20)
              {
                v21 = 0;
                v22 = *(_QWORD *)(a1 + 88);
                do
                {
                  *((_QWORD *)&v28 + 1) = v21;
                  if (v22)
                  {
                    for (i = 0; i < v22; ++i)
                    {
                      v29 = i;
                      if ((uint64_t)v27 >= *(_QWORD *)(a1 + 56)
                        || (v24 = (**(uint64_t (***)(uint64_t, __int128 *))a1)(a1, &v27),
                            ((*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 136) + 168))(*(_QWORD *)(a1 + 136), v24) & 1) != 0))
                      {
                        v25 = 0;
                      }
                      else
                      {
                        v25 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>(a1, v24);
                      }
                      ZinIrWeightDataBitStream1::push_back((ZinIrWeightDataBitStream1 *)&v30, v25 & 1);
                      v22 = *(_QWORD *)(a1 + 88);
                    }
                    v19 = *(_QWORD *)(a1 + 80);
                  }
                  ++v21;
                }
                while (v21 < v19);
                v16 = *(_QWORD *)(a1 + 72);
                v20 = v19;
              }
              ++v18;
            }
            while (v18 < v16);
            v13 = *(_QWORD *)(a1 + 64);
            v17 = v16;
          }
          ++v15;
        }
        while (v15 < v13);
        v11 = *a2;
        v10 = a2[1];
        v14 = v13;
      }
      v12 += a4;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream1,void>((uint64_t)&v30, &v26);
  *a5 = v26;
  v30 = &unk_24C024808;
  if (__p[1])
  {
    *(void **)&v32 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_206E1EAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::ShuffleChannelData<ZinIrWeightDataBitStream2,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t i;
  unint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  void *v30;
  void *__p[2];
  __int128 v32;

  v32 = 0u;
  *(_OWORD *)__p = 0u;
  v30 = &unk_24C0238B8;
  std::vector<unsigned char>::reserve((unint64_t *)&__p[1], (unint64_t)(2* *(_QWORD *)(a1 + 64)* *(_QWORD *)(a1 + 72)* ((a2[1] - *a2) >> 3)* *(_QWORD *)(a1 + 80)* *(_QWORD *)(a1 + 88)+ 7) >> 3);
  if (a3 && ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("Padding a palettized weight with zero point is not supported.");
  if (a4 != 1 && !ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("Palette vector size can be more than 1 only for palettized kernels.");
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v11 = *a2;
  v10 = a2[1];
  if (v10 != *a2)
  {
    v12 = 0;
    v13 = *(_QWORD *)(a1 + 64);
    v14 = v13;
    do
    {
      *(_QWORD *)&v27 = *(_QWORD *)(v11 + 8 * v12);
      if (v14)
      {
        v15 = 0;
        v16 = *(_QWORD *)(a1 + 72);
        v17 = v16;
        do
        {
          *((_QWORD *)&v27 + 1) = v15;
          if (v17)
          {
            v18 = 0;
            v19 = *(_QWORD *)(a1 + 80);
            v20 = v19;
            do
            {
              *(_QWORD *)&v28 = v18;
              if (v20)
              {
                v21 = 0;
                v22 = *(_QWORD *)(a1 + 88);
                do
                {
                  *((_QWORD *)&v28 + 1) = v21;
                  if (v22)
                  {
                    for (i = 0; i < v22; ++i)
                    {
                      v29 = i;
                      if ((uint64_t)v27 >= *(_QWORD *)(a1 + 56)
                        || (v24 = (**(uint64_t (***)(uint64_t, __int128 *))a1)(a1, &v27),
                            ((*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 136) + 168))(*(_QWORD *)(a1 + 136), v24) & 1) != 0))
                      {
                        v25 = 0;
                      }
                      else
                      {
                        v25 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>(a1, v24);
                      }
                      ZinIrWeightDataBitStream2::push_back((ZinIrWeightDataBitStream2 *)&v30, v25 & 3);
                      v22 = *(_QWORD *)(a1 + 88);
                    }
                    v19 = *(_QWORD *)(a1 + 80);
                  }
                  ++v21;
                }
                while (v21 < v19);
                v16 = *(_QWORD *)(a1 + 72);
                v20 = v19;
              }
              ++v18;
            }
            while (v18 < v16);
            v13 = *(_QWORD *)(a1 + 64);
            v17 = v16;
          }
          ++v15;
        }
        while (v15 < v13);
        v11 = *a2;
        v10 = a2[1];
        v14 = v13;
      }
      v12 += a4;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream2,void>((uint64_t)&v30, &v26);
  *a5 = v26;
  v30 = &unk_24C024808;
  if (__p[1])
  {
    *(void **)&v32 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_206E1ED54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::ShuffleChannelData<ZinIrWeightDataBitStream3,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t i;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  void *v29;
  void *__p[2];
  __int128 v31;

  v31 = 0u;
  *(_OWORD *)__p = 0u;
  v29 = &unk_24BFFE070;
  std::vector<unsigned char>::reserve((unint64_t *)&__p[1], (unint64_t)(3* *(_QWORD *)(a1 + 64)* *(_QWORD *)(a1 + 72)* ((a2[1] - *a2) >> 3)* *(_QWORD *)(a1 + 80)* *(_QWORD *)(a1 + 88)+ 7) >> 3);
  if (a3 && ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("Padding a palettized weight with zero point is not supported.");
  if (a4 != 1 && !ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("Palette vector size can be more than 1 only for palettized kernels.");
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v11 = *a2;
  v10 = a2[1];
  if (v10 != *a2)
  {
    v12 = 0;
    v13 = *(_QWORD *)(a1 + 64);
    v14 = v13;
    do
    {
      *(_QWORD *)&v26 = *(_QWORD *)(v11 + 8 * v12);
      if (v14)
      {
        v15 = 0;
        v16 = *(_QWORD *)(a1 + 72);
        v17 = v16;
        do
        {
          *((_QWORD *)&v26 + 1) = v15;
          if (v17)
          {
            v18 = 0;
            v19 = *(_QWORD *)(a1 + 80);
            v20 = v19;
            do
            {
              *(_QWORD *)&v27 = v18;
              if (v20)
              {
                v21 = 0;
                v22 = *(_QWORD *)(a1 + 88);
                do
                {
                  *((_QWORD *)&v27 + 1) = v21;
                  if (v22)
                  {
                    for (i = 0; i < v22; ++i)
                    {
                      v28 = i;
                      if ((uint64_t)v26 < *(_QWORD *)(a1 + 56))
                      {
                        v24 = (**(uint64_t (***)(uint64_t, __int128 *))a1)(a1, &v26);
                        if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 136) + 168))(*(_QWORD *)(a1 + 136), v24) & 1) == 0)ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>(a1, v24);
                      }
                      ZinIrWeightDataBitStream3::push_back((ZinIrWeightDataBitStream3 *)&v29);
                      v22 = *(_QWORD *)(a1 + 88);
                    }
                    v19 = *(_QWORD *)(a1 + 80);
                  }
                  ++v21;
                }
                while (v21 < v19);
                v16 = *(_QWORD *)(a1 + 72);
                v20 = v19;
              }
              ++v18;
            }
            while (v18 < v16);
            v13 = *(_QWORD *)(a1 + 64);
            v17 = v16;
          }
          ++v15;
        }
        while (v15 < v13);
        v11 = *a2;
        v10 = a2[1];
        v14 = v13;
      }
      v12 += a4;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream3,void>((uint64_t)&v29, &v25);
  *a5 = v25;
  v29 = &unk_24C024808;
  if (__p[1])
  {
    *(void **)&v31 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_206E1EFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::ShuffleChannelData<ZinIrWeightDataBitStream4,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t i;
  unint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  void *v30;
  void *__p[2];
  __int128 v32;

  v32 = 0u;
  *(_OWORD *)__p = 0u;
  v30 = &unk_24C0238E8;
  std::vector<unsigned char>::reserve((unint64_t *)&__p[1], (unint64_t)(4* *(_QWORD *)(a1 + 64)* *(_QWORD *)(a1 + 72)* ((a2[1] - *a2) >> 3)* *(_QWORD *)(a1 + 80)* *(_QWORD *)(a1 + 88)+ 7) >> 3);
  if (a3 && ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("Padding a palettized weight with zero point is not supported.");
  if (a4 != 1 && !ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("Palette vector size can be more than 1 only for palettized kernels.");
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v11 = *a2;
  v10 = a2[1];
  if (v10 != *a2)
  {
    v12 = 0;
    v13 = *(_QWORD *)(a1 + 64);
    v14 = v13;
    do
    {
      *(_QWORD *)&v27 = *(_QWORD *)(v11 + 8 * v12);
      if (v14)
      {
        v15 = 0;
        v16 = *(_QWORD *)(a1 + 72);
        v17 = v16;
        do
        {
          *((_QWORD *)&v27 + 1) = v15;
          if (v17)
          {
            v18 = 0;
            v19 = *(_QWORD *)(a1 + 80);
            v20 = v19;
            do
            {
              *(_QWORD *)&v28 = v18;
              if (v20)
              {
                v21 = 0;
                v22 = *(_QWORD *)(a1 + 88);
                do
                {
                  *((_QWORD *)&v28 + 1) = v21;
                  if (v22)
                  {
                    for (i = 0; i < v22; ++i)
                    {
                      v29 = i;
                      if ((uint64_t)v27 >= *(_QWORD *)(a1 + 56)
                        || (v24 = (**(uint64_t (***)(uint64_t, __int128 *))a1)(a1, &v27),
                            ((*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 136) + 168))(*(_QWORD *)(a1 + 136), v24) & 1) != 0))
                      {
                        v25 = 0;
                      }
                      else
                      {
                        v25 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>(a1, v24);
                      }
                      ZinIrWeightDataBitStream4::push_back((ZinIrWeightDataBitStream4 *)&v30, v25 & 0xF);
                      v22 = *(_QWORD *)(a1 + 88);
                    }
                    v19 = *(_QWORD *)(a1 + 80);
                  }
                  ++v21;
                }
                while (v21 < v19);
                v16 = *(_QWORD *)(a1 + 72);
                v20 = v19;
              }
              ++v18;
            }
            while (v18 < v16);
            v13 = *(_QWORD *)(a1 + 64);
            v17 = v16;
          }
          ++v15;
        }
        while (v15 < v13);
        v11 = *a2;
        v10 = a2[1];
        v14 = v13;
      }
      v12 += a4;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream4,void>((uint64_t)&v30, &v26);
  *a5 = v26;
  v30 = &unk_24C024808;
  if (__p[1])
  {
    *(void **)&v32 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_206E1F27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::ShuffleChannelData<ZinIrWeightDataBitStream6,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t i;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  void *v30;
  void *__p[2];
  __int128 v32;

  v32 = 0u;
  *(_OWORD *)__p = 0u;
  v30 = &unk_24C023918;
  std::vector<unsigned char>::reserve((unint64_t *)&__p[1], (unint64_t)(6* *(_QWORD *)(a1 + 64)* *(_QWORD *)(a1 + 72)* ((a2[1] - *a2) >> 3)* *(_QWORD *)(a1 + 80)* *(_QWORD *)(a1 + 88)+ 7) >> 3);
  if (a3 && ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("Padding a palettized weight with zero point is not supported.");
  if (a4 != 1 && !ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("Palette vector size can be more than 1 only for palettized kernels.");
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v11 = *a2;
  v10 = a2[1];
  if (v10 != *a2)
  {
    v12 = 0;
    v13 = *(_QWORD *)(a1 + 64);
    v14 = v13;
    do
    {
      *(_QWORD *)&v27 = *(_QWORD *)(v11 + 8 * v12);
      if (v14)
      {
        v15 = 0;
        v16 = *(_QWORD *)(a1 + 72);
        v17 = v16;
        do
        {
          *((_QWORD *)&v27 + 1) = v15;
          if (v17)
          {
            v18 = 0;
            v19 = *(_QWORD *)(a1 + 80);
            v20 = v19;
            do
            {
              *(_QWORD *)&v28 = v18;
              if (v20)
              {
                v21 = 0;
                v22 = *(_QWORD *)(a1 + 88);
                do
                {
                  *((_QWORD *)&v28 + 1) = v21;
                  if (v22)
                  {
                    for (i = 0; i < v22; ++i)
                    {
                      v29 = i;
                      if ((uint64_t)v27 >= *(_QWORD *)(a1 + 56)
                        || (v24 = (**(uint64_t (***)(uint64_t, __int128 *))a1)(a1, &v27),
                            ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 136) + 168))(*(_QWORD *)(a1 + 136), v24) & 1) != 0))
                      {
                        v25 = 0;
                      }
                      else
                      {
                        v25 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>(a1, v24);
                      }
                      ZinIrWeightDataBitStream6::push_back((ZinIrWeightDataBitStream6 *)&v30, v25 & 0x3F);
                      v22 = *(_QWORD *)(a1 + 88);
                    }
                    v19 = *(_QWORD *)(a1 + 80);
                  }
                  ++v21;
                }
                while (v21 < v19);
                v16 = *(_QWORD *)(a1 + 72);
                v20 = v19;
              }
              ++v18;
            }
            while (v18 < v16);
            v13 = *(_QWORD *)(a1 + 64);
            v17 = v16;
          }
          ++v15;
        }
        while (v15 < v13);
        v11 = *a2;
        v10 = a2[1];
        v14 = v13;
      }
      v12 += a4;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream6,void>((uint64_t)&v30, &v26);
  *a5 = v26;
  v30 = &unk_24C024808;
  if (__p[1])
  {
    *(void **)&v32 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_206E1F514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeight::ShuffleByType(uint64_t a1@<X0>, uint64_t a2@<X1>, int64x2_t *a3@<X2>, const ZinIrVector *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t *v42;
  _BOOL8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)) && *(_QWORD *)(a1 + 304) >= 2uLL)
  {
    ZinIrWeight::CreateDePalettizedWeight((ZinIrWeight *)a1, a4, (uint64_t *)&v62);
    v10 = v62;
    (*(void (**)(_QWORD, uint64_t, int64x2_t *, const ZinIrVector *))(*(_QWORD *)v62 + 56))(v62, a2, a3, a4);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  }
  else
  {
    if (*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280) >= 0x11uLL)
      ZinAssertImpl("Shuffling is not supported for per-channel palettized kernels yet");
    v61 = 0uLL;
    switch(*(_DWORD *)(a1 + 8))
    {
      case 1:
        ZinIrWeight::ShuffleWeightDataUsingScratchBuffer<ZinIrScratchBuffer<signed char>,ZinIrScratchBufferBackedConstData_specialization<signed char>>(a1, a2, (uint64_t)a4, &v62);
        goto LABEL_67;
      case 2:
      case 0x1B:
        ZinIrWeight::ShuffleWeightDataUsingScratchBuffer<ZinIrScratchBuffer<unsigned char>,ZinIrScratchBufferBackedConstData_specialization<unsigned char>>(a1, a2, (uint64_t)a4, &v62);
        v38 = v62;
        v62 = 0uLL;
        v39 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
        v61 = v38;
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldaxr(p_shared_owners);
          while (__stlxr(v41 - 1, p_shared_owners));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        v15 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        if (!*((_QWORD *)&v62 + 1))
          break;
        v42 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
        do
          v17 = __ldaxr(v42);
        while (__stlxr(v17 - 1, v42));
        goto LABEL_59;
      case 4:
        ZinIrWeight::ShuffleWeightDataUsingScratchBuffer<ZinIrScratchBuffer<half>,ZinIrScratchBufferBackedConstData_specialization<half>>(a1, a2, &v62);
        goto LABEL_67;
      case 5:
        ZinIrWeight::ShuffleWeightDataUsingScratchBuffer<ZinIrScratchBuffer<e4m3_t>,ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>(a1, a2, &v62);
        goto LABEL_67;
      case 6:
        ZinIrWeight::ShuffleWeightDataUsingScratchBuffer<ZinIrScratchBuffer<float>,ZinIrScratchBufferBackedConstData_specialization<float>>(a1, a2, &v62);
LABEL_67:
        std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v61, &v62);
        std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v62);
        break;
      case 7:
      case 8:
      case 9:
      case 0xA:
        ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream1,ZinIrConstData_specialization<unsigned char>>(a1, a2, &v62);
        v11 = v62;
        v62 = 0uLL;
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
        v61 = v11;
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        if (!*((_QWORD *)&v62 + 1))
          break;
        v16 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        goto LABEL_59;
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
        ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream2,ZinIrConstData_specialization<unsigned char>>(a1, a2, &v62);
        v18 = v62;
        v62 = 0uLL;
        v19 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
        v61 = v18;
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v15 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        if (!*((_QWORD *)&v62 + 1))
          break;
        v22 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
        do
          v17 = __ldaxr(v22);
        while (__stlxr(v17 - 1, v22));
        goto LABEL_59;
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
        ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream3,ZinIrConstData_specialization<unsigned char>>(a1, a2, &v62);
        v23 = v62;
        v62 = 0uLL;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
        v61 = v23;
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v15 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        if (!*((_QWORD *)&v62 + 1))
          break;
        v27 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
        do
          v17 = __ldaxr(v27);
        while (__stlxr(v17 - 1, v27));
        goto LABEL_59;
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
        ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream4,ZinIrConstData_specialization<unsigned char>>(a1, a2, &v62);
        v28 = v62;
        v62 = 0uLL;
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
        v61 = v28;
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v15 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        if (!*((_QWORD *)&v62 + 1))
          break;
        v32 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
        do
          v17 = __ldaxr(v32);
        while (__stlxr(v17 - 1, v32));
        goto LABEL_59;
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
        ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream6,ZinIrConstData_specialization<unsigned char>>(a1, a2, &v62);
        v33 = v62;
        v62 = 0uLL;
        v34 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
        v61 = v33;
        if (v34)
        {
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        v15 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        if (!*((_QWORD *)&v62 + 1))
          break;
        v37 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
        do
          v17 = __ldaxr(v37);
        while (__stlxr(v17 - 1, v37));
LABEL_59:
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        break;
      default:
        v43 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v43)
          goto LABEL_77;
        ZinIrWeight::ShuffleByType(v43, v44, v45, v46, v47, v48, v49, v50);
        break;
    }
    if ((_QWORD)v61)
    {
      v51 = operator new();
      v52 = v51;
      v53 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
      v62 = v61;
      if (*((_QWORD *)&v61 + 1))
      {
        v54 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      ZinIrWeight::ZinIrWeight(v51, (uint64_t *)&v62, (uint64_t **)(a1 + 280), *(_DWORD *)(a1 + 8), a3, *(_QWORD *)(a1 + 304), 1262703187, 0);
      *a5 = v52;
      if (v53)
      {
        v56 = (unint64_t *)&v53->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
    }
    else
    {
LABEL_77:
      *a5 = 0;
    }
    v58 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
    if (*((_QWORD *)&v61 + 1))
    {
      v59 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
  }
}

void sub_206E1FA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::ShuffleWeightDataUsingScratchBuffer<ZinIrScratchBuffer<float>,ZinIrScratchBufferBackedConstData_specialization<float>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  _BYTE v7[32];

  details::ZinIrMappedData_Impl<float>::ZinIrMappedData_Impl((uint64_t)v7, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
  ZinIrWeight::ShuffleWeightData<ZinIrScratchBuffer<float>,ZinIrScratchBufferBackedConstData_specialization<float>>(a1, a2, (uint64_t)v7, a3);
  return details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)v7);
}

void sub_206E1FB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::ShuffleWeightDataUsingScratchBuffer<ZinIrScratchBuffer<half>,ZinIrScratchBufferBackedConstData_specialization<half>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  _BYTE v7[32];

  details::ZinIrMappedData_Impl<half>::ZinIrMappedData_Impl((uint64_t)v7, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
  ZinIrWeight::ShuffleWeightData<ZinIrScratchBuffer<half>,ZinIrScratchBufferBackedConstData_specialization<half>>(a1, a2, (uint64_t)v7, a3);
  return details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)v7);
}

void sub_206E1FC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::ShuffleWeightDataUsingScratchBuffer<ZinIrScratchBuffer<e4m3_t>,ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  _BYTE v7[32];

  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v7, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
  ZinIrWeight::ShuffleWeightData<ZinIrScratchBuffer<e4m3_t>,ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>(a1, a2, (uint64_t)v7, a3);
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v7);
}

void sub_206E1FCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::ShuffleWeightDataUsingScratchBuffer<ZinIrScratchBuffer<unsigned char>,ZinIrScratchBufferBackedConstData_specialization<unsigned char>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  _BYTE v9[32];

  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v9, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
  ZinIrWeight::ShuffleWeightData<ZinIrScratchBuffer<unsigned char>,ZinIrScratchBufferBackedConstData_specialization<unsigned char>>(a1, a2, (uint64_t)v9, a3, a4);
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v9);
}

void sub_206E1FD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::ShuffleWeightDataUsingScratchBuffer<ZinIrScratchBuffer<signed char>,ZinIrScratchBufferBackedConstData_specialization<signed char>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  _BYTE v9[32];

  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v9, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
  ZinIrWeight::ShuffleWeightData<ZinIrScratchBuffer<signed char>,ZinIrScratchBufferBackedConstData_specialization<signed char>>(a1, a2, (uint64_t)v9, a3, a4);
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v9);
}

void sub_206E1FDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream1,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  void *v3;
  void *__p[2];
  __int128 v5;

  *(_OWORD *)__p = 0u;
  v5 = 0u;
  v3 = &unk_24C023888;
  ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream1,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)&v3, a3);
  v3 = &unk_24C024808;
  if (__p[1])
  {
    *(void **)&v5 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_206E1FE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream2,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  void *v3;
  void *__p[2];
  __int128 v5;

  *(_OWORD *)__p = 0u;
  v5 = 0u;
  v3 = &unk_24C0238B8;
  ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream2,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)&v3, a3);
  v3 = &unk_24C024808;
  if (__p[1])
  {
    *(void **)&v5 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_206E1FEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream3,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  void *v3;
  void *__p[2];
  __int128 v5;

  *(_OWORD *)__p = 0u;
  v5 = 0u;
  v3 = &unk_24BFFE070;
  ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream3,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)&v3, a3);
  v3 = &unk_24C024808;
  if (__p[1])
  {
    *(void **)&v5 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_206E1FF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream4,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  void *v3;
  void *__p[2];
  __int128 v5;

  *(_OWORD *)__p = 0u;
  v5 = 0u;
  v3 = &unk_24C0238E8;
  ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream4,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)&v3, a3);
  v3 = &unk_24C024808;
  if (__p[1])
  {
    *(void **)&v5 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_206E1FFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream6,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  void *v3;
  void *__p[2];
  __int128 v5;

  *(_OWORD *)__p = 0u;
  v5 = 0u;
  v3 = &unk_24C023918;
  ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream6,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)&v3, a3);
  v3 = &unk_24C024808;
  if (__p[1])
  {
    *(void **)&v5 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_206E20078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeight::Create4bitPalWeightFrom3bitPalWeight(ZinIrWeight *this@<X0>, uint64_t *a2@<X8>)
{
  ZinIrWeight *v2;
  size_t v4;
  int v5;
  int64_t SerializedCoutElementCount;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  char v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t i;
  char v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  int Upcasted4bitPaletteFormatFrom3bitPaletteFormat;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  __int128 v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  char *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  __int16 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _OWORD *v71;
  unint64_t *v72;
  unint64_t v73;
  __int128 v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  char v84;
  char v85;
  char *v86;
  char *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  size_t v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  _OWORD *v101;
  unint64_t *v102;
  unint64_t v103;
  __int128 v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  size_t v118;
  char *v119;
  char *v120;
  char *v121;
  char v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  _OWORD *v126;
  unint64_t *v127;
  unint64_t v128;
  __int128 v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  char *v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  size_t v143;
  char *v144;
  char *v145;
  char *v146;
  char v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  _OWORD *v151;
  unint64_t *v152;
  unint64_t v153;
  __int128 v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  _BOOL8 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  unint64_t v189;
  __int128 v190;
  __int128 v191;
  void *v192;
  char *v193;
  char *v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  void *__p;
  char *v202;
  char *v203;
  unint64_t SerializedWeightElementCount;
  void *v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  __int128 v211;

  v2 = this;
  if (Is3bitPaletteKernelFormat(*((_DWORD *)this + 2)))
  {
    v187 = a2;
    v211 = 0uLL;
    v208 = *(_OWORD *)((char *)v2 + 56);
    v209 = *(_OWORD *)((char *)v2 + 72);
    v210 = *((_QWORD *)v2 + 11);
    v207 = 0u;
    v206 = 0u;
    SerializedWeightElementCount = 0;
    v205 = &unk_24C0238E8;
    SerializedWeightElementCount = GetSerializedWeightElementCount(*((_DWORD *)v2 + 2), (unint64_t *)&v208, *((_QWORD *)v2 + 38));
    v188 = (uint64_t)v2;
    if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 17) + 184))(*((_QWORD *)v2 + 17)) & 1) != 0)
    {
      v192 = 0;
      v4 = ZinDivRoundUp(SerializedWeightElementCount, 8uLL);
      LOBYTE(v198) = 0;
      std::vector<unsigned char>::vector(&v190, v4, &v198);
      __p = 0;
      v202 = 0;
      v203 = 0;
      v5 = *((_DWORD *)v2 + 39);
      SerializedCoutElementCount = GetSerializedCoutElementCount(v208, *((_DWORD *)v2 + 2), *((_QWORD *)v2 + 38));
      *(_QWORD *)&v208 = SerializedCoutElementCount;
      if (v5 == 1145261902)
      {
        *(_QWORD *)&v208 = *((_QWORD *)&v208 + 1);
        *((_QWORD *)&v208 + 1) = SerializedCoutElementCount;
        SerializedCoutElementCount = v208;
      }
      if (SerializedCoutElementCount >= 1)
      {
        v7 = 0;
        v8 = *((_QWORD *)&v208 + 1);
        do
        {
          if (v8 >= 1)
          {
            v9 = 0;
            v10 = v209;
            do
            {
              if (v10 >= 1)
              {
                v11 = 0;
                v12 = *((_QWORD *)&v209 + 1);
                do
                {
                  if (v12 >= 1)
                  {
                    v13 = 0;
                    v14 = v210;
                    do
                    {
                      if (v14 >= 1)
                      {
                        v15 = 0;
                        do
                        {
                          *(_QWORD *)&v198 = v7;
                          *((_QWORD *)&v198 + 1) = v9;
                          *(_QWORD *)&v199 = v11;
                          *((_QWORD *)&v199 + 1) = v13;
                          v200 = v15;
                          if (v5 == 1145261902)
                          {
                            *(_QWORD *)&v198 = v9;
                            *((_QWORD *)&v198 + 1) = v7;
                            *(_QWORD *)&v199 = v209 + ~v11;
                            *((_QWORD *)&v199 + 1) = *((_QWORD *)&v209 + 1) + ~v13;
                            v200 = v14 + ~v15;
                          }
                          v16 = (**(uint64_t (***)(ZinIrWeight *, __int128 *))v2)(v2, &v198);
                          if (((*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v2 + 17) + 168))(*((_QWORD *)v2 + 17), v16) & 1) == 0)
                          {
                            v17 = v190;
                            v18 = v202;
                            if (v202 >= v203)
                            {
                              v20 = (char *)__p;
                              v21 = (v202 - (_BYTE *)__p) >> 3;
                              v22 = v21 + 1;
                              if ((unint64_t)(v21 + 1) >> 61)
                                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                              v23 = v203 - (_BYTE *)__p;
                              if ((v203 - (_BYTE *)__p) >> 2 > v22)
                                v22 = v23 >> 2;
                              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
                                v24 = 0x1FFFFFFFFFFFFFFFLL;
                              else
                                v24 = v22;
                              if (v24)
                              {
                                v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v203, v24);
                                v20 = (char *)__p;
                                v18 = v202;
                              }
                              else
                              {
                                v25 = 0;
                              }
                              v26 = (unint64_t *)&v25[8 * v21];
                              *v26 = v16;
                              v19 = (char *)(v26 + 1);
                              while (v18 != v20)
                              {
                                v27 = *((_QWORD *)v18 - 1);
                                v18 -= 8;
                                *--v26 = v27;
                              }
                              __p = v26;
                              v202 = v19;
                              v203 = &v25[8 * v24];
                              if (v20)
                                operator delete(v20);
                            }
                            else
                            {
                              *(_QWORD *)v202 = v16;
                              v19 = v18 + 8;
                            }
                            v202 = v19;
                            *(_BYTE *)(v17 + (v16 >> 3)) |= 1 << (v16 & 7);
                            v192 = (char *)v192 + 1;
                            v2 = (ZinIrWeight *)v188;
                          }
                          ++v15;
                          v14 = v210;
                        }
                        while (v210 > v15);
                        v12 = *((_QWORD *)&v209 + 1);
                      }
                      ++v13;
                    }
                    while (v12 > v13);
                    v10 = v209;
                  }
                  ++v11;
                }
                while (v10 > v11);
                v8 = *((_QWORD *)&v208 + 1);
              }
              ++v9;
            }
            while (v8 > v9);
            SerializedCoutElementCount = v208;
          }
          ++v7;
        }
        while (SerializedCoutElementCount > v7);
      }
      v28 = (uint64_t *)__p;
      v29 = (uint64_t *)v202;
      while (v28 != v29)
      {
        v30 = ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint3>((uint64_t)v2, *v28);
        ZinIrWeightDataBitStream4::push_back((ZinIrWeightDataBitStream4 *)&v205, v30 & 7);
        ++v28;
      }
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long &,void>((uint64_t)&v205, (uint64_t)&v190, (uint64_t *)&v192, &SerializedWeightElementCount, &v198);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v211, &v198);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v198);
      if (__p)
      {
        v202 = (char *)__p;
        operator delete(__p);
      }
      if ((_QWORD)v190)
      {
        *((_QWORD *)&v190 + 1) = v190;
        operator delete((void *)v190);
      }
    }
    else
    {
      if (SerializedWeightElementCount)
      {
        for (i = 0; i < SerializedWeightElementCount; ++i)
        {
          v40 = ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint3>(v188, i);
          ZinIrWeightDataBitStream4::push_back((ZinIrWeightDataBitStream4 *)&v205, v40 & 7);
        }
      }
      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream4,void>((uint64_t)&v205, &v198);
      v41 = v198;
      v198 = 0uLL;
      v42 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
      v211 = v41;
      if (v42)
      {
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(p_shared_owners);
        while (__stlxr(v44 - 1, p_shared_owners));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = (std::__shared_weak_count *)*((_QWORD *)&v198 + 1);
      if (*((_QWORD *)&v198 + 1))
      {
        v46 = (unint64_t *)(*((_QWORD *)&v198 + 1) + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v2 = (ZinIrWeight *)v188;
    }
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v211 + 16))(v211) & 1) != 0)
    {
      Upcasted4bitPaletteFormatFrom3bitPaletteFormat = GetUpcasted4bitPaletteFormatFrom3bitPaletteFormat(*((_DWORD *)v2 + 2));
      std::vector<std::shared_ptr<ZinIrConstData>>::vector(&__p, (uint64_t)(*((_QWORD *)v2 + 36) - *((_QWORD *)v2 + 35)) >> 4);
      v196 = 0;
      v197 = 0;
      if (ZinKernelFormatGetBitDepth(*((_DWORD *)v2 + 2), &v197))
        ZinAssertImpl("Faild to get pal3 format bit depth");
      if (ZinKernelFormatGetBitDepth(Upcasted4bitPaletteFormatFrom3bitPaletteFormat, &v196))
        ZinAssertImpl("Faild to get upcasted pal4 format bit depth");
      v49 = *((_QWORD *)v2 + 38);
      v198 = 0u;
      v199 = 0u;
      LODWORD(v200) = 1065353216;
      v50 = *((_QWORD *)v2 + 35);
      if (*((_QWORD *)v2 + 36) != v50)
      {
        v51 = 0;
        v189 = v49 * (1 << v197);
        v52 = v49 * (1 << v196);
        while (2)
        {
          v53 = *(_OWORD *)(v50 + 16 * v51);
          v195 = v53;
          if (*((_QWORD *)&v53 + 1))
          {
            v54 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
            do
              v55 = __ldxr(v54);
            while (__stxr(v55 + 1, v54));
          }
          switch(*(_DWORD *)(v188 + 8))
          {
            case 0xF:
              if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(&v198, &v195))
              {
                goto LABEL_84;
              }
              ZinIrConstData::GetStdVector<signed char>(v195, &v192);
              if (v189 < v52)
              {
                v111 = v193;
                v112 = v189;
                do
                {
                  if (v111 >= v194)
                  {
                    v114 = (unint64_t)v192;
                    v115 = v111 - (_BYTE *)v192;
                    v116 = v111 - (_BYTE *)v192 + 1;
                    if (v116 < 0)
                      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                    v117 = v194 - (_BYTE *)v192;
                    if (2 * (v194 - (_BYTE *)v192) > (unint64_t)v116)
                      v116 = 2 * v117;
                    if (v117 >= 0x3FFFFFFFFFFFFFFFLL)
                      v118 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v118 = v116;
                    if (v118)
                      v119 = (char *)operator new(v118);
                    else
                      v119 = 0;
                    v120 = &v119[v115];
                    v119[v115] = 0;
                    v113 = (uint64_t)&v119[v115 + 1];
                    if (v111 != (char *)v114)
                    {
                      v121 = &v111[~v114];
                      do
                      {
                        v122 = *--v111;
                        (v121--)[(_QWORD)v119] = v122;
                      }
                      while (v111 != (char *)v114);
                      v111 = (char *)v192;
                      v120 = v119;
                    }
                    v192 = v120;
                    v193 = &v119[v115 + 1];
                    v194 = &v119[v118];
                    if (v111)
                      operator delete(v111);
                  }
                  else
                  {
                    *v111 = 0;
                    v113 = (uint64_t)(v111 + 1);
                  }
                  v193 = (char *)v113;
                  ++v112;
                  v111 = (char *)v113;
                }
                while (v112 != v52);
              }
              std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<signed char>,std::allocator<ZinIrConstData_specialization<signed char>>,std::vector<signed char>,void>((uint64_t)&v192, &v190);
              std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)__p + 16 * v51, &v190);
              v123 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
              if (*((_QWORD *)&v190 + 1))
              {
                v124 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
                do
                  v125 = __ldaxr(v124);
                while (__stlxr(v125 - 1, v124));
                if (!v125)
                {
                  ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                  std::__shared_weak_count::__release_weak(v123);
                }
              }
              v126 = __p;
              v190 = v195;
              if (*((_QWORD *)&v195 + 1))
              {
                v127 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
                do
                  v128 = __ldxr(v127);
                while (__stxr(v128 + 1, v127));
              }
              v129 = v126[v51];
              v191 = v129;
              if (*((_QWORD *)&v129 + 1))
              {
                v130 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
                do
                  v131 = __ldxr(v130);
                while (__stxr(v131 + 1, v130));
              }
              std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::__unordered_map_hasher<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>>::__emplace_unique_key_args<std::shared_ptr<ZinIrConstData>,std::pair<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>((uint64_t)&v198, &v190, &v190);
              v132 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
              if (*((_QWORD *)&v191 + 1))
              {
                v133 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
                do
                  v134 = __ldaxr(v133);
                while (__stlxr(v134 - 1, v133));
                if (!v134)
                {
                  ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                  std::__shared_weak_count::__release_weak(v132);
                }
              }
              v80 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
              if (!*((_QWORD *)&v190 + 1))
                goto LABEL_246;
              v135 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
              do
                v82 = __ldaxr(v135);
              while (__stlxr(v82 - 1, v135));
              goto LABEL_244;
            case 0x10:
              if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(&v198, &v195))
              {
                goto LABEL_84;
              }
              ZinIrConstData::GetStdVector<unsigned char>(v195, &v192);
              if (v189 < v52)
              {
                v136 = v193;
                v137 = v189;
                do
                {
                  if (v136 >= v194)
                  {
                    v139 = (unint64_t)v192;
                    v140 = v136 - (_BYTE *)v192;
                    v141 = v136 - (_BYTE *)v192 + 1;
                    if (v141 < 0)
                      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                    v142 = v194 - (_BYTE *)v192;
                    if (2 * (v194 - (_BYTE *)v192) > (unint64_t)v141)
                      v141 = 2 * v142;
                    if (v142 >= 0x3FFFFFFFFFFFFFFFLL)
                      v143 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v143 = v141;
                    if (v143)
                      v144 = (char *)operator new(v143);
                    else
                      v144 = 0;
                    v145 = &v144[v140];
                    v144[v140] = 0;
                    v138 = (uint64_t)&v144[v140 + 1];
                    if (v136 != (char *)v139)
                    {
                      v146 = &v136[~v139];
                      do
                      {
                        v147 = *--v136;
                        (v146--)[(_QWORD)v144] = v147;
                      }
                      while (v136 != (char *)v139);
                      v136 = (char *)v192;
                      v145 = v144;
                    }
                    v192 = v145;
                    v193 = &v144[v140 + 1];
                    v194 = &v144[v143];
                    if (v136)
                      operator delete(v136);
                  }
                  else
                  {
                    *v136 = 0;
                    v138 = (uint64_t)(v136 + 1);
                  }
                  v193 = (char *)v138;
                  ++v137;
                  v136 = (char *)v138;
                }
                while (v137 != v52);
              }
              std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)&v192, &v190);
              std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)__p + 16 * v51, &v190);
              v148 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
              if (*((_QWORD *)&v190 + 1))
              {
                v149 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
                do
                  v150 = __ldaxr(v149);
                while (__stlxr(v150 - 1, v149));
                if (!v150)
                {
                  ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                  std::__shared_weak_count::__release_weak(v148);
                }
              }
              v151 = __p;
              v190 = v195;
              if (*((_QWORD *)&v195 + 1))
              {
                v152 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
                do
                  v153 = __ldxr(v152);
                while (__stxr(v153 + 1, v152));
              }
              v154 = v151[v51];
              v191 = v154;
              if (*((_QWORD *)&v154 + 1))
              {
                v155 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
                do
                  v156 = __ldxr(v155);
                while (__stxr(v156 + 1, v155));
              }
              std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::__unordered_map_hasher<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>>::__emplace_unique_key_args<std::shared_ptr<ZinIrConstData>,std::pair<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>((uint64_t)&v198, &v190, &v190);
              v157 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
              if (*((_QWORD *)&v191 + 1))
              {
                v158 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
                do
                  v159 = __ldaxr(v158);
                while (__stlxr(v159 - 1, v158));
                if (!v159)
                {
                  ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                  std::__shared_weak_count::__release_weak(v157);
                }
              }
              v80 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
              if (!*((_QWORD *)&v190 + 1))
                goto LABEL_246;
              v160 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
              do
                v82 = __ldaxr(v160);
              while (__stlxr(v82 - 1, v160));
              goto LABEL_244;
            case 0x11:
              if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(&v198, &v195))
              {
                goto LABEL_84;
              }
              ZinIrConstData::GetStdVector<half>(v195, &v192);
              if (v189 < v52)
              {
                v57 = v193;
                v58 = v189;
                do
                {
                  if (v57 >= v194)
                  {
                    v60 = (char *)v192;
                    v61 = v57 - (_BYTE *)v192;
                    if (v57 - (_BYTE *)v192 <= -3)
                      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                    v62 = v61 >> 1;
                    if (v194 - (_BYTE *)v192 <= (unint64_t)((v61 >> 1) + 1))
                      v63 = v62 + 1;
                    else
                      v63 = v194 - (_BYTE *)v192;
                    if ((unint64_t)(v194 - (_BYTE *)v192) >= 0x7FFFFFFFFFFFFFFELL)
                      v64 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v64 = v63;
                    if (v64)
                    {
                      v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>((uint64_t)&v194, v64);
                      v60 = (char *)v192;
                      v57 = v193;
                    }
                    else
                    {
                      v65 = 0;
                    }
                    v66 = &v65[2 * v62];
                    *(_WORD *)v66 = 0;
                    v59 = v66 + 2;
                    while (v57 != v60)
                    {
                      v67 = *((_WORD *)v57 - 1);
                      v57 -= 2;
                      *((_WORD *)v66 - 1) = v67;
                      v66 -= 2;
                    }
                    v192 = v66;
                    v193 = v59;
                    v194 = &v65[2 * v64];
                    if (v60)
                      operator delete(v60);
                  }
                  else
                  {
                    *(_WORD *)v57 = 0;
                    v59 = v57 + 2;
                  }
                  v193 = v59;
                  ++v58;
                  v57 = v59;
                }
                while (v58 != v52);
              }
              std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)&v192, &v190);
              std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)__p + 16 * v51, &v190);
              v68 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
              if (*((_QWORD *)&v190 + 1))
              {
                v69 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
                do
                  v70 = __ldaxr(v69);
                while (__stlxr(v70 - 1, v69));
                if (!v70)
                {
                  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                  std::__shared_weak_count::__release_weak(v68);
                }
              }
              v71 = __p;
              v190 = v195;
              if (*((_QWORD *)&v195 + 1))
              {
                v72 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
                do
                  v73 = __ldxr(v72);
                while (__stxr(v73 + 1, v72));
              }
              v74 = v71[v51];
              v191 = v74;
              if (*((_QWORD *)&v74 + 1))
              {
                v75 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
                do
                  v76 = __ldxr(v75);
                while (__stxr(v76 + 1, v75));
              }
              std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::__unordered_map_hasher<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>>::__emplace_unique_key_args<std::shared_ptr<ZinIrConstData>,std::pair<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>((uint64_t)&v198, &v190, &v190);
              v77 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
              if (*((_QWORD *)&v191 + 1))
              {
                v78 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 - 1, v78));
                if (!v79)
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                }
              }
              v80 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
              if (!*((_QWORD *)&v190 + 1))
                goto LABEL_246;
              v81 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
              do
                v82 = __ldaxr(v81);
              while (__stlxr(v82 - 1, v81));
              goto LABEL_244;
            case 0x12:
              if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(&v198, &v195))
              {
LABEL_84:
                v56 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(&v198, &v195);
                if (!v56)
                  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]((_QWORD *)__p + 2 * v51, v56 + 4);
              }
              else
              {
                ZinIrConstData::GetStdVector<e4m3_t>(v195, &v192);
                v83 = v189;
                if (v189 < v52)
                {
                  do
                  {
                    v84 = ZinF32ToE4M3(0.0, 1, 0);
                    v85 = v84;
                    v86 = v193;
                    if (v193 >= v194)
                    {
                      v88 = (unint64_t)v192;
                      v89 = v193 - (_BYTE *)v192;
                      v90 = v193 - (_BYTE *)v192 + 1;
                      if (v90 < 0)
                        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                      v91 = v194 - (_BYTE *)v192;
                      if (2 * (v194 - (_BYTE *)v192) > (unint64_t)v90)
                        v90 = 2 * v91;
                      if (v91 >= 0x3FFFFFFFFFFFFFFFLL)
                        v92 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v92 = v90;
                      if (v92)
                        v93 = (char *)operator new(v92);
                      else
                        v93 = 0;
                      v94 = &v93[v89];
                      v95 = &v93[v89];
                      *v95 = v85;
                      v87 = v95 + 1;
                      if (v86 != (char *)v88)
                      {
                        v96 = &v86[~v88];
                        do
                        {
                          v97 = *--v86;
                          (v96--)[(_QWORD)v93] = v97;
                        }
                        while (v86 != (char *)v88);
                        v86 = (char *)v192;
                        v94 = v93;
                      }
                      v192 = v94;
                      v193 = v87;
                      v194 = &v93[v92];
                      if (v86)
                        operator delete(v86);
                    }
                    else
                    {
                      *v193 = v84;
                      v87 = v86 + 1;
                    }
                    v193 = v87;
                    ++v83;
                  }
                  while (v83 != v52);
                }
                std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<e4m3_t>,std::allocator<ZinIrConstData_specialization<e4m3_t>>,std::vector<e4m3_t>,void>((uint64_t)&v192, &v190);
                std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)__p + 16 * v51, &v190);
                v98 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
                if (*((_QWORD *)&v190 + 1))
                {
                  v99 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
                  do
                    v100 = __ldaxr(v99);
                  while (__stlxr(v100 - 1, v99));
                  if (!v100)
                  {
                    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                    std::__shared_weak_count::__release_weak(v98);
                  }
                }
                v101 = __p;
                v190 = v195;
                if (*((_QWORD *)&v195 + 1))
                {
                  v102 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
                  do
                    v103 = __ldxr(v102);
                  while (__stxr(v103 + 1, v102));
                }
                v104 = v101[v51];
                v191 = v104;
                if (*((_QWORD *)&v104 + 1))
                {
                  v105 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
                  do
                    v106 = __ldxr(v105);
                  while (__stxr(v106 + 1, v105));
                }
                std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::__unordered_map_hasher<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>>::__emplace_unique_key_args<std::shared_ptr<ZinIrConstData>,std::pair<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>((uint64_t)&v198, &v190, &v190);
                v107 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
                if (*((_QWORD *)&v191 + 1))
                {
                  v108 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
                  do
                    v109 = __ldaxr(v108);
                  while (__stlxr(v109 - 1, v108));
                  if (!v109)
                  {
                    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                    std::__shared_weak_count::__release_weak(v107);
                  }
                }
                v80 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
                if (*((_QWORD *)&v190 + 1))
                {
                  v110 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
                  do
                    v82 = __ldaxr(v110);
                  while (__stlxr(v82 - 1, v110));
LABEL_244:
                  if (!v82)
                  {
                    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                    std::__shared_weak_count::__release_weak(v80);
                  }
                }
LABEL_246:
                if (v192)
                {
                  v193 = (char *)v192;
                  operator delete(v192);
                }
              }
              v161 = (std::__shared_weak_count *)*((_QWORD *)&v195 + 1);
              if (*((_QWORD *)&v195 + 1))
              {
                v162 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
                do
                  v163 = __ldaxr(v162);
                while (__stlxr(v163 - 1, v162));
                if (!v163)
                {
                  ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                  std::__shared_weak_count::__release_weak(v161);
                }
              }
              ++v51;
              v50 = *(_QWORD *)(v188 + 280);
              if (v51 >= (*(_QWORD *)(v188 + 288) - v50) >> 4)
                break;
              continue;
            default:
              v176 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v176)
                ZinIrWeight::Create4bitPalWeightFrom3bitPalWeight(v176, v177, v178, v179, v180, v181, v182, v183);
              *v187 = 0;
              v184 = (std::__shared_weak_count *)*((_QWORD *)&v195 + 1);
              if (*((_QWORD *)&v195 + 1))
              {
                v185 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
                do
                  v186 = __ldaxr(v185);
                while (__stlxr(v186 - 1, v185));
                if (!v186)
                {
                  ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                  std::__shared_weak_count::__release_weak(v184);
                }
              }
              goto LABEL_264;
          }
          break;
        }
      }
      *v187 = 0;
      v164 = *(_DWORD *)(v188 + 156);
      v165 = operator new();
      v166 = v165;
      v167 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
      v190 = v211;
      if (*((_QWORD *)&v211 + 1))
      {
        v168 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
        do
          v169 = __ldxr(v168);
        while (__stxr(v169 + 1, v168));
      }
      ZinIrWeight::ZinIrWeight(v165, (uint64_t *)&v190, (uint64_t **)&__p, Upcasted4bitPaletteFormatFrom3bitPaletteFormat, (int64x2_t *)(v188 + 56), *(_QWORD *)(v188 + 304), v164, 0);
      if (v167)
      {
        v170 = (unint64_t *)&v167->__shared_owners_;
        do
          v171 = __ldaxr(v170);
        while (__stlxr(v171 - 1, v170));
        if (!v171)
        {
          ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
          std::__shared_weak_count::__release_weak(v167);
        }
      }
      v172 = *v187;
      *v187 = v166;
      if (v172)
        (*(void (**)(uint64_t))(*(_QWORD *)v172 + 16))(v172);
LABEL_264:
      std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::__unordered_map_hasher<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>>::~__hash_table((uint64_t)&v198);
      *(_QWORD *)&v198 = &__p;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v198);
    }
    else
    {
      *v187 = 0;
    }
    v205 = &unk_24C024808;
    if (*((_QWORD *)&v206 + 1))
    {
      *(_QWORD *)&v207 = *((_QWORD *)&v206 + 1);
      operator delete(*((void **)&v206 + 1));
    }
    v173 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
    if (*((_QWORD *)&v211 + 1))
    {
      v174 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
      do
        v175 = __ldaxr(v174);
      while (__stlxr(v175 - 1, v174));
      if (!v175)
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
      }
    }
  }
  else
  {
    v31 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v31)
      ZinIrWeight::Create4bitPalWeightFrom3bitPalWeight(v31, v32, v33, v34, v35, v36, v37, v38);
    *a2 = 0;
  }
}

void sub_206E210DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  uint64_t v39;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  if (a38)
    operator delete(a38);
  v41 = *(std::__shared_weak_count **)(v39 - 136);
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightDataBitStream4::push_back(ZinIrWeightDataBitStream4 *this, char a2)
{
  char v2;
  uint64_t v3;
  _BYTE *v4;
  unint64_t v6;
  uint64_t v7;
  _BYTE **v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  _BYTE *v14;
  char *v15;
  _BYTE *v16;
  char v17;

  v2 = a2 & 0xF;
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v3 + 1;
  v4 = (_BYTE *)*((_QWORD *)this + 3);
  if ((v3 & 1) != 0)
  {
    *(v4 - 1) |= 16 * v2;
  }
  else
  {
    v6 = *((_QWORD *)this + 4);
    if ((unint64_t)v4 >= v6)
    {
      v8 = (_BYTE **)((char *)this + 16);
      v9 = *((_QWORD *)this + 2);
      v10 = &v4[-v9];
      v11 = (uint64_t)&v4[-v9 + 1];
      if (v11 < 0)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v12 = v6 - v9;
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
        v13 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
        v14 = operator new(v13);
      else
        v14 = 0;
      v15 = &v14[v13];
      v10[(_QWORD)v14] = v2;
      v7 = (uint64_t)&v10[(_QWORD)v14 + 1];
      if (v4 == (_BYTE *)v9)
      {
        v14 = &v10[(_QWORD)v14];
      }
      else
      {
        v16 = &v4[~v9];
        do
        {
          v17 = *--v4;
          (v16--)[(_QWORD)v14] = v17;
        }
        while (v4 != (_BYTE *)v9);
        v4 = *v8;
      }
      *((_QWORD *)this + 2) = v14;
      *((_QWORD *)this + 3) = v7;
      *((_QWORD *)this + 4) = v15;
      if (v4)
        operator delete(v4);
    }
    else
    {
      *v4 = v2;
      v7 = (uint64_t)(v4 + 1);
    }
    *((_QWORD *)this + 3) = v7;
  }
}

unint64_t ZinIrConstData::GetStdVector<e4m3_t>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  size_t v4;
  unint64_t i;
  unint64_t result;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  std::vector<e4m3_t>::vector(a2, v4);
  for (i = 0; ; ++i)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    if (result <= i)
      break;
    *(_BYTE *)(*a2 + i) = ZinIrConstData::GetDataAt<e4m3_t>(a1);
  }
  return result;
}

void sub_206E21410(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t ZinIrConstData::GetStdVector<half>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t i;
  unint64_t result;
  __int16 v7;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  std::vector<half>::vector(a2, v4);
  for (i = 0; ; ++i)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    if (result <= i)
      break;
    ZinIrConstData::GetDataAt<half>(a1);
    *(_WORD *)(*a2 + 2 * i) = v7;
  }
  return result;
}

void sub_206E214A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightDataBitStream4::~ZinIrWeightDataBitStream4(ZinIrWeightDataBitStream4 *this)
{
  void *v2;

  *(_QWORD *)this = &unk_24C024808;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &unk_24C024808;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

void ZinIrWeight::Dilate(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, int a5@<W4>, ZinIrWeight **a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  ZinIrWeight *v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  int64x2_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;

  v8 = *(_QWORD *)(a1 + 88);
  v9 = (*(_QWORD *)(a1 + 80) - 1) * a2 + 1;
  v10 = (*(_QWORD *)(a1 + 72) - 1) * a3 + 1;
  v60 = *(int64x2_t *)(a1 + 56);
  v62 = v9;
  v63 = v8;
  v61 = v10;
  if (a2 == 1 && a3 == 1)
  {
    v11 = (ZinIrWeight *)operator new();
    ZinIrWeight::ZinIrWeight(v11, (const ZinIrWeight *)a1);
  }
  else
  {
    if (a5)
    {
      v59 = 0uLL;
      switch(*(_DWORD *)(a1 + 8))
      {
        case 1:
          ZinIrWeight::DilateUnpalettizedWeightData<signed char>(a1, a2, a3, a4, &v64);
          goto LABEL_66;
        case 2:
          ZinIrWeight::DilateUnpalettizedWeightData<unsigned char>(a1, a2, a3, a4, &v64);
          goto LABEL_66;
        case 4:
          if (*a4)
            goto LABEL_86;
          ZinIrWeight::DilateUnpalettizedWeightData<half>(a1, a2, a3, a4, &v64);
          goto LABEL_66;
        case 5:
          if (*a4)
            goto LABEL_86;
          ZinIrWeight::DilateUnpalettizedWeightData<e4m3_t>(a1, a2, a3, a4, &v64);
          goto LABEL_66;
        case 6:
          if (*a4)
LABEL_86:
            ZinAssertImpl("Zero point only exists in asymmetrically quantized kernel.", (_QWORD)v59);
          ZinIrWeight::DilateUnpalettizedWeightData<float>(a1, a2, a3, a4, &v64);
          goto LABEL_66;
        case 7:
        case 8:
        case 9:
        case 0xA:
          ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream1>(a1, a2, a3, (uint64_t)&v64);
          v12 = v64;
          v64 = 0uLL;
          v13 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
          v59 = v12;
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldaxr(p_shared_owners);
            while (__stlxr(v15 - 1, p_shared_owners));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v16 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
          if (!*((_QWORD *)&v64 + 1))
            goto LABEL_67;
          v17 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          goto LABEL_53;
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
          ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream2>(a1, a2, a3, (uint64_t)&v64);
          v34 = v64;
          v64 = 0uLL;
          v35 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
          v59 = v34;
          if (v35)
          {
            v36 = (unint64_t *)&v35->__shared_owners_;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          v16 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
          if (!*((_QWORD *)&v64 + 1))
            goto LABEL_67;
          v38 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
          do
            v18 = __ldaxr(v38);
          while (__stlxr(v18 - 1, v38));
          goto LABEL_53;
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
          ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream3>(a1, a2, a3, (uint64_t)&v64);
          v29 = v64;
          v64 = 0uLL;
          v30 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
          v59 = v29;
          if (v30)
          {
            v31 = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          v16 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
          if (!*((_QWORD *)&v64 + 1))
            goto LABEL_67;
          v33 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
          do
            v18 = __ldaxr(v33);
          while (__stlxr(v18 - 1, v33));
          goto LABEL_53;
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
          ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream4>(a1, a2, a3, (uint64_t)&v64);
          v19 = v64;
          v64 = 0uLL;
          v20 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
          v59 = v19;
          if (v20)
          {
            v21 = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          v16 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
          if (!*((_QWORD *)&v64 + 1))
            goto LABEL_67;
          v23 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
          do
            v18 = __ldaxr(v23);
          while (__stlxr(v18 - 1, v23));
          goto LABEL_53;
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
          ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream6>(a1, a2, a3, (uint64_t)&v64);
          v24 = v64;
          v64 = 0uLL;
          v25 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
          v59 = v24;
          if (v25)
          {
            v26 = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          v16 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
          if (!*((_QWORD *)&v64 + 1))
            goto LABEL_67;
          v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
          do
            v18 = __ldaxr(v28);
          while (__stlxr(v18 - 1, v28));
LABEL_53:
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
          goto LABEL_67;
        case 0x1B:
          ZinIrWeight::DilatePalettizedWeightData<std::vector<unsigned char>>(a1, a2, a3, (uint64_t)&v64);
LABEL_66:
          std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v59, &v64);
          std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v64);
LABEL_67:
          if (!(_QWORD)v59)
            goto LABEL_81;
          v47 = operator new();
          v11 = (ZinIrWeight *)v47;
          v48 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
          v64 = v59;
          if (*((_QWORD *)&v59 + 1))
          {
            v49 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
            do
              v50 = __ldxr(v49);
            while (__stxr(v50 + 1, v49));
          }
          ZinIrWeight::ZinIrWeight(v47, (uint64_t *)&v64, (uint64_t **)(a1 + 280), *(_DWORD *)(a1 + 8), &v60, 1, 1262703187, 0);
          if (v48)
          {
            v51 = (unint64_t *)&v48->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          v53 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
          if (*((_QWORD *)&v59 + 1))
          {
            v54 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          goto LABEL_16;
        default:
          v39 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v39)
            ZinIrWeight::Dilate(v39, v40, v41, v42, v43, v44, v45, v46);
LABEL_81:
          *a6 = 0;
          v56 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
          if (*((_QWORD *)&v59 + 1))
          {
            v57 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          return;
      }
    }
    v11 = (ZinIrWeight *)operator new();
    ZinIrWeight::ZinIrWeight((uint64_t)v11, (uint64_t **)(a1 + 280), *(_DWORD *)(a1 + 8), &v60, 1, 1262703187, 0);
  }
LABEL_16:
  *a6 = v11;
}

void sub_206E21A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::DilateUnpalettizedWeightData<float>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  _DWORD *v28;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE v51[8];
  uint64_t v52;

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("wrong format type: expecting unpalettized format");
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 88);
  v46 = a1;
  v41 = a2;
  v39 = (*(_QWORD *)(a1 + 80) - 1) * a2;
  v11 = v39 + 1;
  v35 = (*(_QWORD *)(a1 + 72) - 1) * a3;
  v36 = *(_QWORD *)(a1 + 64);
  v12 = v35 + 1;
  v13 = *a4;
  details::ZinIrMappedData_Impl<float>::ZinIrMappedData_Impl((uint64_t)v51, v36 * v9 * v10 * (v39 + 1) * (v35 + 1));
  v32 = v9;
  if (v9 >= 1)
  {
    v14 = 0;
    if (v11 <= 1)
      v15 = 1;
    else
      v15 = v39 + 1;
    if (v12 <= 1)
      v16 = 1;
    else
      v16 = v35 + 1;
    v31 = 4 * v36 * v10 * v12 * v11;
    v33 = 0;
    v34 = 4 * v10 * v11 * v12;
    v38 = v16;
    v42 = v15;
    do
    {
      if (v36 >= 1)
      {
        v45 = 0;
        v37 = v33;
        do
        {
          if (v35 <= 0x7FFFFFFFFFFFFFFELL)
          {
            v17 = 0;
            v40 = v37;
            do
            {
              if (v39 <= 0x7FFFFFFFFFFFFFFELL)
              {
                v43 = v40;
                v44 = 0;
                do
                {
                  if (v10 >= 1)
                  {
                    v18 = 0;
                    v19 = v43;
                    do
                    {
                      if (v44 % v41 || v17 % a3)
                      {
                        if (v13)
                        {
                          ZinIrVector::GetAt<float>(*a4, v14);
                          v21 = v20;
                        }
                        else
                        {
                          v21 = 0;
                        }
                        v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        v23 = (_DWORD *)(v52 + v19);
                        if (!v22)
                          v23 = v51;
                        *v23 = v21;
                      }
                      else
                      {
                        *(_QWORD *)&v47 = v14;
                        *((_QWORD *)&v47 + 1) = v45;
                        v48 = v17 / a3;
                        v49 = v44 / v41;
                        v50 = v18;
                        v24 = (**(uint64_t (***)(uint64_t, __int128 *))v46)(v46, &v47);
                        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v46 + 136) + 168))(*(_QWORD *)(v46 + 136), v24)&& *a4)
                        {
                          ZinIrVector::GetAt<float>(*a4, v14);
                        }
                        else
                        {
                          ZinIrWeightBase::GetAt<float>(v46);
                        }
                        v26 = v25;
                        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        v28 = (_DWORD *)(v52 + v19);
                        if (!v27)
                          v28 = v51;
                        *v28 = v26;
                      }
                      ++v18;
                      v19 += 4;
                    }
                    while (v10 != v18);
                  }
                  v43 += 4 * v10;
                  ++v44;
                }
                while (v44 != v42);
              }
              ++v17;
              v40 += 4 * v10 * v11;
            }
            while (v17 != v38);
          }
          v37 += v34;
          ++v45;
        }
        while (v45 != v36);
      }
      ++v14;
      v33 += v31;
    }
    while (v14 != v32);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<float>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<float>>,ZinIrScratchBuffer<float>,void>((uint64_t)v51, &v47);
  *a5 = v47;
  return details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)v51);
}

void sub_206E21E08(_Unwind_Exception *a1)
{
  uint64_t v1;

  details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::DilateUnpalettizedWeightData<half>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  __int16 v21;
  int v22;
  _WORD *v23;
  uint64_t v24;
  __int16 v25;
  __int16 v26;
  int v27;
  _WORD *v28;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE v51[8];
  uint64_t v52;

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("wrong format type: expecting unpalettized format");
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 88);
  v46 = a1;
  v41 = a2;
  v39 = (*(_QWORD *)(a1 + 80) - 1) * a2;
  v11 = v39 + 1;
  v35 = (*(_QWORD *)(a1 + 72) - 1) * a3;
  v36 = *(_QWORD *)(a1 + 64);
  v12 = v35 + 1;
  v13 = *a4;
  details::ZinIrMappedData_Impl<half>::ZinIrMappedData_Impl((uint64_t)v51, v36 * v9 * v10 * (v39 + 1) * (v35 + 1));
  v32 = v9;
  if (v9 >= 1)
  {
    v14 = 0;
    if (v11 <= 1)
      v15 = 1;
    else
      v15 = v39 + 1;
    if (v12 <= 1)
      v16 = 1;
    else
      v16 = v35 + 1;
    v31 = 2 * v36 * v10 * v12 * v11;
    v33 = 0;
    v34 = 2 * v10 * v11 * v12;
    v38 = v16;
    v42 = v15;
    do
    {
      if (v36 >= 1)
      {
        v45 = 0;
        v37 = v33;
        do
        {
          if (v35 <= 0x7FFFFFFFFFFFFFFELL)
          {
            v17 = 0;
            v40 = v37;
            do
            {
              if (v39 <= 0x7FFFFFFFFFFFFFFELL)
              {
                v43 = v40;
                v44 = 0;
                do
                {
                  if (v10 >= 1)
                  {
                    v18 = 0;
                    v19 = v43;
                    do
                    {
                      if (v44 % v41 || v17 % a3)
                      {
                        if (v13)
                        {
                          ZinIrVector::GetAt<half>(*a4, v14);
                          v21 = v20;
                        }
                        else
                        {
                          v21 = 0;
                        }
                        v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        v23 = (_WORD *)(v52 + v19);
                        if (!v22)
                          v23 = v51;
                        *v23 = v21;
                      }
                      else
                      {
                        *(_QWORD *)&v47 = v14;
                        *((_QWORD *)&v47 + 1) = v45;
                        v48 = v17 / a3;
                        v49 = v44 / v41;
                        v50 = v18;
                        v24 = (**(uint64_t (***)(uint64_t, __int128 *))v46)(v46, &v47);
                        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v46 + 136) + 168))(*(_QWORD *)(v46 + 136), v24)&& *a4)
                        {
                          ZinIrVector::GetAt<half>(*a4, v14);
                        }
                        else
                        {
                          ZinIrWeightBase::GetAt<half>(v46);
                        }
                        v26 = v25;
                        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        v28 = (_WORD *)(v52 + v19);
                        if (!v27)
                          v28 = v51;
                        *v28 = v26;
                      }
                      ++v18;
                      v19 += 2;
                    }
                    while (v10 != v18);
                  }
                  v43 += 2 * v10;
                  ++v44;
                }
                while (v44 != v42);
              }
              ++v17;
              v40 += 2 * v10 * v11;
            }
            while (v17 != v38);
          }
          v37 += v34;
          ++v45;
        }
        while (v45 != v36);
      }
      ++v14;
      v33 += v31;
    }
    while (v14 != v32);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<half>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<half>>,ZinIrScratchBuffer<half>,void>((uint64_t)v51, &v47);
  *a5 = v47;
  return details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)v51);
}

void sub_206E22170(_Unwind_Exception *a1)
{
  uint64_t v1;

  details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::DilateUnpalettizedWeightData<e4m3_t>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t i;
  char v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  char v24;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _BYTE v47[8];
  uint64_t v48;

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("wrong format type: expecting unpalettized format");
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 88);
  v41 = a1;
  v42 = a4;
  v37 = a2;
  v35 = (*(_QWORD *)(a1 + 80) - 1) * a2;
  v11 = v35 + 1;
  v30 = (*(_QWORD *)(a1 + 72) - 1) * a3;
  v31 = *(_QWORD *)(a1 + 64);
  v12 = v30 + 1;
  v13 = *a4;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v47, v31 * v9 * v10 * (v35 + 1) * (v30 + 1));
  if (v9 >= 1)
  {
    v14 = 0;
    if (v11 <= 1)
      v15 = 1;
    else
      v15 = v35 + 1;
    v38 = v15;
    if (v12 <= 1)
      v16 = 1;
    else
      v16 = v30 + 1;
    v27 = v31 * v10 * v12 * v11;
    v33 = v10 * v11;
    v34 = v16;
    v28 = 0;
    v29 = v10 * v11 * v12;
    do
    {
      if (v31 >= 1)
      {
        v40 = 0;
        v32 = v28;
        do
        {
          if (v30 <= 0x7FFFFFFFFFFFFFFELL)
          {
            v17 = 0;
            v36 = v32;
            do
            {
              if (v35 <= 0x7FFFFFFFFFFFFFFELL)
              {
                v39 = 0;
                v18 = v36;
                do
                {
                  if (v10 >= 1)
                  {
                    for (i = 0; i != v10; ++i)
                    {
                      if (v39 % v37 || v17 % a3)
                      {
                        if (v13)
                          v20 = ZinIrVector::GetAt<e4m3_t>(*v42, v14);
                        else
                          v20 = 0;
                        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      }
                      else
                      {
                        *(_QWORD *)&v43 = v14;
                        *((_QWORD *)&v43 + 1) = v40;
                        v44 = v17 / a3;
                        v45 = v39 / v37;
                        v46 = i;
                        v23 = (**(uint64_t (***)(uint64_t, __int128 *))v41)(v41, &v43);
                        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v41 + 136) + 168))(*(_QWORD *)(v41 + 136), v23)&& *v42)
                        {
                          v24 = ZinIrVector::GetAt<e4m3_t>(*v42, v14);
                        }
                        else
                        {
                          v24 = ZinIrWeightBase::GetAt<e4m3_t>(v41);
                        }
                        v20 = v24;
                        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      }
                      v22 = (_BYTE *)(v48 + v18 + i);
                      if (!v21)
                        v22 = v47;
                      *v22 = v20;
                    }
                  }
                  v18 += v10;
                  ++v39;
                }
                while (v39 != v38);
              }
              ++v17;
              v36 += v33;
            }
            while (v17 != v34);
          }
          v32 += v29;
          ++v40;
        }
        while (v40 != v31);
      }
      ++v14;
      v28 += v27;
    }
    while (v14 != v9);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>,ZinIrScratchBuffer<e4m3_t>,void>((uint64_t)v47, &v43);
  *a5 = v43;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v47);
}

void sub_206E224A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl(v1 - 128);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::DilateUnpalettizedWeightData<signed char>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t i;
  char v21;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  char v25;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE v48[8];
  uint64_t v49;

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("wrong format type: expecting unpalettized format");
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 88);
  v43 = a1;
  v39 = a2;
  v37 = (*(_QWORD *)(a1 + 80) - 1) * a2;
  v11 = v37 + 1;
  v32 = (*(_QWORD *)(a1 + 72) - 1) * a3;
  v33 = *(_QWORD *)(a1 + 64);
  v12 = v32 + 1;
  v13 = a4;
  v14 = *a4;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v48, v33 * v9 * v10 * (v37 + 1) * (v32 + 1));
  v29 = v9;
  if (v9 >= 1)
  {
    v15 = 0;
    if (v11 <= 1)
      v16 = 1;
    else
      v16 = v37 + 1;
    v40 = v16;
    if (v12 <= 1)
      v17 = 1;
    else
      v17 = v32 + 1;
    v28 = v33 * v10 * v12 * v11;
    v35 = v10 * v11;
    v36 = v17;
    v30 = 0;
    v31 = v10 * v11 * v12;
    do
    {
      if (v33 >= 1)
      {
        v42 = 0;
        v34 = v30;
        do
        {
          if (v32 <= 0x7FFFFFFFFFFFFFFELL)
          {
            v18 = 0;
            v38 = v34;
            do
            {
              if (v37 <= 0x7FFFFFFFFFFFFFFELL)
              {
                v41 = 0;
                v19 = v38;
                do
                {
                  if (v10 >= 1)
                  {
                    for (i = 0; i != v10; ++i)
                    {
                      if (v41 % v39 || v18 % a3)
                      {
                        if (v14)
                          v21 = ZinIrVector::GetAt<signed char>(*v13, v15);
                        else
                          v21 = 0;
                        v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      }
                      else
                      {
                        *(_QWORD *)&v44 = v15;
                        *((_QWORD *)&v44 + 1) = v42;
                        v45 = v18 / a3;
                        v46 = v41 / v39;
                        v47 = i;
                        v24 = (**(uint64_t (***)(uint64_t, __int128 *))v43)(v43, &v44);
                        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v43 + 136) + 168))(*(_QWORD *)(v43 + 136), v24)&& *v13)
                        {
                          v25 = ZinIrVector::GetAt<signed char>(*v13, v15);
                        }
                        else
                        {
                          v25 = ZinIrWeightBase::GetAt<signed char>(v43);
                        }
                        v21 = v25;
                        v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      }
                      v23 = (_BYTE *)(v49 + v19 + i);
                      if (!v22)
                        v23 = v48;
                      *v23 = v21;
                    }
                  }
                  v19 += v10;
                  ++v41;
                }
                while (v41 != v40);
              }
              ++v18;
              v38 += v35;
            }
            while (v18 != v36);
          }
          v34 += v31;
          ++v42;
        }
        while (v42 != v33);
      }
      ++v15;
      v30 += v28;
    }
    while (v15 != v29);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<signed char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<signed char>>,ZinIrScratchBuffer<signed char>,void>((uint64_t)v48, &v44);
  *a5 = v44;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v48);
}

void sub_206E227CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl(v1 - 128);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::DilateUnpalettizedWeightData<unsigned char>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t i;
  char v21;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  char v25;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE v48[8];
  uint64_t v49;

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("wrong format type: expecting unpalettized format");
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 88);
  v43 = a1;
  v39 = a2;
  v37 = (*(_QWORD *)(a1 + 80) - 1) * a2;
  v11 = v37 + 1;
  v32 = (*(_QWORD *)(a1 + 72) - 1) * a3;
  v33 = *(_QWORD *)(a1 + 64);
  v12 = v32 + 1;
  v13 = a4;
  v14 = *a4;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v48, v33 * v9 * v10 * (v37 + 1) * (v32 + 1));
  v29 = v9;
  if (v9 >= 1)
  {
    v15 = 0;
    if (v11 <= 1)
      v16 = 1;
    else
      v16 = v37 + 1;
    v40 = v16;
    if (v12 <= 1)
      v17 = 1;
    else
      v17 = v32 + 1;
    v28 = v33 * v10 * v12 * v11;
    v35 = v10 * v11;
    v36 = v17;
    v30 = 0;
    v31 = v10 * v11 * v12;
    do
    {
      if (v33 >= 1)
      {
        v42 = 0;
        v34 = v30;
        do
        {
          if (v32 <= 0x7FFFFFFFFFFFFFFELL)
          {
            v18 = 0;
            v38 = v34;
            do
            {
              if (v37 <= 0x7FFFFFFFFFFFFFFELL)
              {
                v41 = 0;
                v19 = v38;
                do
                {
                  if (v10 >= 1)
                  {
                    for (i = 0; i != v10; ++i)
                    {
                      if (v41 % v39 || v18 % a3)
                      {
                        if (v14)
                          v21 = ZinIrVector::GetAt<unsigned char>(*v13, v15);
                        else
                          v21 = 0;
                        v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      }
                      else
                      {
                        *(_QWORD *)&v44 = v15;
                        *((_QWORD *)&v44 + 1) = v42;
                        v45 = v18 / a3;
                        v46 = v41 / v39;
                        v47 = i;
                        v24 = (**(uint64_t (***)(uint64_t, __int128 *))v43)(v43, &v44);
                        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v43 + 136) + 168))(*(_QWORD *)(v43 + 136), v24)&& *v13)
                        {
                          v25 = ZinIrVector::GetAt<unsigned char>(*v13, v15);
                        }
                        else
                        {
                          v25 = ZinIrWeightBase::GetAt<unsigned char>(v43);
                        }
                        v21 = v25;
                        v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      }
                      v23 = (_BYTE *)(v49 + v19 + i);
                      if (!v22)
                        v23 = v48;
                      *v23 = v21;
                    }
                  }
                  v19 += v10;
                  ++v41;
                }
                while (v41 != v40);
              }
              ++v18;
              v38 += v35;
            }
            while (v18 != v36);
          }
          v34 += v31;
          ++v42;
        }
        while (v42 != v33);
      }
      ++v15;
      v30 += v28;
    }
    while (v15 != v29);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<unsigned char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<unsigned char>>,ZinIrScratchBuffer<unsigned char>,void>((uint64_t)v48, &v44);
  *a5 = v44;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v48);
}

void sub_206E22AF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl(v1 - 128);
  _Unwind_Resume(a1);
}

void ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream1>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  _BYTE *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45[3];
  uint64_t v46;
  void *v47;
  __int128 v48;
  __int128 v49;

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)) && *(_QWORD *)(a1 + 304) >= 2uLL)
    ZinAssertImpl("Error: dilation is not supported for vector palettized kernels yet");
  if (!ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("wrong format type: expecting palettized format");
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 88);
  v31 = (*(_QWORD *)(a1 + 80) - 1) * a2;
  v10 = v31 + 1;
  v26 = (*(_QWORD *)(a1 + 72) - 1) * a3;
  v11 = v26 + 1;
  v48 = 0u;
  v49 = 0u;
  v23 = v7;
  v27 = v8;
  v46 = v8 * v7 * v9 * (v31 + 1) * (v26 + 1);
  v47 = &unk_24C023888;
  v12 = ZinDivRoundUp(v46, 8uLL);
  v38 = a1;
  v21 = a4;
  LOBYTE(v40) = 0;
  std::vector<unsigned char>::vector(v45, v12, &v40);
  v44 = 0;
  if (v23 >= 1)
  {
    *(_QWORD *)&v36 = 0;
    if (v10 <= 1)
      v13 = 1;
    else
      v13 = v31 + 1;
    v34 = v13;
    if (v11 <= 1)
      v14 = 1;
    else
      v14 = v26 + 1;
    v22 = v27 * v9 * v11 * v10;
    v29 = v9 * v10;
    v30 = v14;
    v24 = 0;
    v25 = v9 * v10 * v11;
    do
    {
      if (v27 >= 1)
      {
        *((_QWORD *)&v36 + 1) = 0;
        v28 = v24;
        do
        {
          if (v26 <= 0x7FFFFFFFFFFFFFFELL)
          {
            v15 = 0;
            v32 = v28;
            do
            {
              if (v31 <= 0x7FFFFFFFFFFFFFFELL)
              {
                v35 = 0;
                v16 = v32;
                do
                {
                  if (v9 >= 1)
                  {
                    for (i = 0; i != v9; ++i)
                    {
                      if (v16 + i >= 0)
                        v18 = v16 + i;
                      else
                        v18 = v16 + i + 7;
                      if (!(v35 % a2) && !(v15 % a3))
                      {
                        v37 = v45[0];
                        v40 = v36;
                        v41 = v15 / a3;
                        v42 = v35 / a2;
                        v43 = i;
                        v19 = (**(uint64_t (***)(uint64_t, __int128 *))v38)(v38, &v40);
                        if (((*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v38 + 136) + 168))(*(_QWORD *)(v38 + 136), v19) & 1) == 0)
                        {
                          v20 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>(v38, v19);
                          ZinIrWeightDataBitStream1::push_back((ZinIrWeightDataBitStream1 *)&v47, v20 & 1);
                          v37[v18 >> 3] |= 1 << (v16 + i - 8 * (v18 >> 3));
                          ++v44;
                        }
                      }
                    }
                  }
                  v16 += v9;
                  ++v35;
                }
                while (v35 != v34);
              }
              ++v15;
              v32 += v29;
            }
            while (v15 != v30);
          }
          v28 += v25;
          ++*((_QWORD *)&v36 + 1);
        }
        while (*((_QWORD *)&v36 + 1) != v27);
      }
      v24 += v22;
      *(_QWORD *)&v36 = v36 + 1;
    }
    while ((_QWORD)v36 != v23);
  }
  v40 = 0uLL;
  switch(*(_DWORD *)(v38 + 8))
  {
    case 7:
    case 8:
    case 9:
    case 0xA:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
      goto LABEL_38;
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
      goto LABEL_38;
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
      goto LABEL_38;
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
      goto LABEL_38;
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
      goto LABEL_38;
    case 0x1B:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
LABEL_38:
      (*(void (**)(_QWORD))(*(_QWORD *)v40 + 16))(v40);
      *(_OWORD *)v21 = v40;
      break;
    default:
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream1>();
      }
      else
      {
        *(_QWORD *)v21 = 0;
        *(_QWORD *)(v21 + 8) = 0;
      }
      break;
  }
  if (v45[0])
  {
    v45[1] = v45[0];
    operator delete(v45[0]);
  }
  v47 = &unk_24C024808;
  if (*((_QWORD *)&v48 + 1))
  {
    *(_QWORD *)&v49 = *((_QWORD *)&v48 + 1);
    operator delete(*((void **)&v48 + 1));
  }
}

void sub_206E23010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  void *v33;
  void *v34;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  v33 = *(void **)(v31 - 168);
  if (v33)
  {
    *(_QWORD *)(v31 - 160) = v33;
    operator delete(v33);
  }
  *(_QWORD *)(v31 - 136) = &unk_24C024808;
  v34 = *(void **)(v31 - 120);
  if (v34)
  {
    *(_QWORD *)(v31 - 112) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream2>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  _BYTE *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45[3];
  uint64_t v46;
  void *v47;
  __int128 v48;
  __int128 v49;

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)) && *(_QWORD *)(a1 + 304) >= 2uLL)
    ZinAssertImpl("Error: dilation is not supported for vector palettized kernels yet");
  if (!ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("wrong format type: expecting palettized format");
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 88);
  v31 = (*(_QWORD *)(a1 + 80) - 1) * a2;
  v10 = v31 + 1;
  v26 = (*(_QWORD *)(a1 + 72) - 1) * a3;
  v11 = v26 + 1;
  v48 = 0u;
  v49 = 0u;
  v23 = v7;
  v27 = v8;
  v46 = v8 * v7 * v9 * (v31 + 1) * (v26 + 1);
  v47 = &unk_24C0238B8;
  v12 = ZinDivRoundUp(v46, 8uLL);
  v38 = a1;
  v21 = a4;
  LOBYTE(v40) = 0;
  std::vector<unsigned char>::vector(v45, v12, &v40);
  v44 = 0;
  if (v23 >= 1)
  {
    *(_QWORD *)&v36 = 0;
    if (v10 <= 1)
      v13 = 1;
    else
      v13 = v31 + 1;
    v34 = v13;
    if (v11 <= 1)
      v14 = 1;
    else
      v14 = v26 + 1;
    v22 = v27 * v9 * v11 * v10;
    v29 = v9 * v10;
    v30 = v14;
    v24 = 0;
    v25 = v9 * v10 * v11;
    do
    {
      if (v27 >= 1)
      {
        *((_QWORD *)&v36 + 1) = 0;
        v28 = v24;
        do
        {
          if (v26 <= 0x7FFFFFFFFFFFFFFELL)
          {
            v15 = 0;
            v32 = v28;
            do
            {
              if (v31 <= 0x7FFFFFFFFFFFFFFELL)
              {
                v35 = 0;
                v16 = v32;
                do
                {
                  if (v9 >= 1)
                  {
                    for (i = 0; i != v9; ++i)
                    {
                      if (v16 + i >= 0)
                        v18 = v16 + i;
                      else
                        v18 = v16 + i + 7;
                      if (!(v35 % a2) && !(v15 % a3))
                      {
                        v37 = v45[0];
                        v40 = v36;
                        v41 = v15 / a3;
                        v42 = v35 / a2;
                        v43 = i;
                        v19 = (**(uint64_t (***)(uint64_t, __int128 *))v38)(v38, &v40);
                        if (((*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v38 + 136) + 168))(*(_QWORD *)(v38 + 136), v19) & 1) == 0)
                        {
                          v20 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>(v38, v19);
                          ZinIrWeightDataBitStream2::push_back((ZinIrWeightDataBitStream2 *)&v47, v20 & 3);
                          v37[v18 >> 3] |= 1 << (v16 + i - 8 * (v18 >> 3));
                          ++v44;
                        }
                      }
                    }
                  }
                  v16 += v9;
                  ++v35;
                }
                while (v35 != v34);
              }
              ++v15;
              v32 += v29;
            }
            while (v15 != v30);
          }
          v28 += v25;
          ++*((_QWORD *)&v36 + 1);
        }
        while (*((_QWORD *)&v36 + 1) != v27);
      }
      v24 += v22;
      *(_QWORD *)&v36 = v36 + 1;
    }
    while ((_QWORD)v36 != v23);
  }
  v40 = 0uLL;
  switch(*(_DWORD *)(v38 + 8))
  {
    case 7:
    case 8:
    case 9:
    case 0xA:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
      goto LABEL_38;
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
      goto LABEL_38;
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
      goto LABEL_38;
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
      goto LABEL_38;
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
      goto LABEL_38;
    case 0x1B:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
LABEL_38:
      (*(void (**)(_QWORD))(*(_QWORD *)v40 + 16))(v40);
      *(_OWORD *)v21 = v40;
      break;
    default:
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream1>();
      }
      else
      {
        *(_QWORD *)v21 = 0;
        *(_QWORD *)(v21 + 8) = 0;
      }
      break;
  }
  if (v45[0])
  {
    v45[1] = v45[0];
    operator delete(v45[0]);
  }
  v47 = &unk_24C024808;
  if (*((_QWORD *)&v48 + 1))
  {
    *(_QWORD *)&v49 = *((_QWORD *)&v48 + 1);
    operator delete(*((void **)&v48 + 1));
  }
}

void sub_206E23588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  void *v33;
  void *v34;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  v33 = *(void **)(v31 - 168);
  if (v33)
  {
    *(_QWORD *)(v31 - 160) = v33;
    operator delete(v33);
  }
  *(_QWORD *)(v31 - 136) = &unk_24C024808;
  v34 = *(void **)(v31 - 120);
  if (v34)
  {
    *(_QWORD *)(v31 - 112) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream3>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  _BYTE *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44[3];
  uint64_t v45;
  void *v46;
  __int128 v47;
  __int128 v48;

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)) && *(_QWORD *)(a1 + 304) >= 2uLL)
    ZinAssertImpl("Error: dilation is not supported for vector palettized kernels yet");
  if (!ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("wrong format type: expecting palettized format");
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 88);
  v30 = (*(_QWORD *)(a1 + 80) - 1) * a2;
  v10 = v30 + 1;
  v25 = (*(_QWORD *)(a1 + 72) - 1) * a3;
  v11 = v25 + 1;
  v47 = 0u;
  v48 = 0u;
  v22 = v7;
  v26 = v8;
  v45 = v8 * v7 * v9 * (v30 + 1) * (v25 + 1);
  v46 = &unk_24BFFE070;
  v12 = ZinDivRoundUp(v45, 8uLL);
  v37 = a1;
  v20 = a4;
  LOBYTE(v39) = 0;
  std::vector<unsigned char>::vector(v44, v12, &v39);
  v43 = 0;
  if (v22 >= 1)
  {
    *(_QWORD *)&v35 = 0;
    if (v10 <= 1)
      v13 = 1;
    else
      v13 = v30 + 1;
    v33 = v13;
    if (v11 <= 1)
      v14 = 1;
    else
      v14 = v25 + 1;
    v21 = v26 * v9 * v11 * v10;
    v28 = v9 * v10;
    v29 = v14;
    v23 = 0;
    v24 = v9 * v10 * v11;
    do
    {
      if (v26 >= 1)
      {
        *((_QWORD *)&v35 + 1) = 0;
        v27 = v23;
        do
        {
          if (v25 <= 0x7FFFFFFFFFFFFFFELL)
          {
            v15 = 0;
            v31 = v27;
            do
            {
              if (v30 <= 0x7FFFFFFFFFFFFFFELL)
              {
                v34 = 0;
                v16 = v31;
                do
                {
                  if (v9 >= 1)
                  {
                    for (i = 0; i != v9; ++i)
                    {
                      if (v16 + i >= 0)
                        v18 = v16 + i;
                      else
                        v18 = v16 + i + 7;
                      if (!(v34 % a2) && !(v15 % a3))
                      {
                        v36 = v44[0];
                        v39 = v35;
                        v40 = v15 / a3;
                        v41 = v34 / a2;
                        v42 = i;
                        v19 = (**(uint64_t (***)(uint64_t, __int128 *))v37)(v37, &v39);
                        if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v37 + 136) + 168))(*(_QWORD *)(v37 + 136), v19) & 1) == 0)
                        {
                          ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>(v37, v19);
                          ZinIrWeightDataBitStream3::push_back((ZinIrWeightDataBitStream3 *)&v46);
                          v36[v18 >> 3] |= 1 << (v16 + i - 8 * (v18 >> 3));
                          ++v43;
                        }
                      }
                    }
                  }
                  v16 += v9;
                  ++v34;
                }
                while (v34 != v33);
              }
              ++v15;
              v31 += v28;
            }
            while (v15 != v29);
          }
          v27 += v24;
          ++*((_QWORD *)&v35 + 1);
        }
        while (*((_QWORD *)&v35 + 1) != v26);
      }
      v23 += v21;
      *(_QWORD *)&v35 = v35 + 1;
    }
    while ((_QWORD)v35 != v22);
  }
  v39 = 0uLL;
  switch(*(_DWORD *)(v37 + 8))
  {
    case 7:
    case 8:
    case 9:
    case 0xA:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v46, (uint64_t)v44, &v43, (unint64_t *)&v45, &v38);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v39, &v38);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v38);
      goto LABEL_38;
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v46, (uint64_t)v44, &v43, (unint64_t *)&v45, &v38);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v39, &v38);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v38);
      goto LABEL_38;
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v46, (uint64_t)v44, &v43, (unint64_t *)&v45, &v38);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v39, &v38);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v38);
      goto LABEL_38;
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v46, (uint64_t)v44, &v43, (unint64_t *)&v45, &v38);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v39, &v38);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v38);
      goto LABEL_38;
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v46, (uint64_t)v44, &v43, (unint64_t *)&v45, &v38);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v39, &v38);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v38);
      goto LABEL_38;
    case 0x1B:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v46, (uint64_t)v44, &v43, (unint64_t *)&v45, &v38);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v39, &v38);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v38);
LABEL_38:
      (*(void (**)(_QWORD))(*(_QWORD *)v39 + 16))(v39);
      *(_OWORD *)v20 = v39;
      break;
    default:
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream1>();
      }
      else
      {
        *(_QWORD *)v20 = 0;
        *(_QWORD *)(v20 + 8) = 0;
      }
      break;
  }
  if (v44[0])
  {
    v44[1] = v44[0];
    operator delete(v44[0]);
  }
  v46 = &unk_24C024808;
  if (*((_QWORD *)&v47 + 1))
  {
    *(_QWORD *)&v48 = *((_QWORD *)&v47 + 1);
    operator delete(*((void **)&v47 + 1));
  }
}

void sub_206E23B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  void *v33;
  void *v34;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  v33 = *(void **)(v31 - 168);
  if (v33)
  {
    *(_QWORD *)(v31 - 160) = v33;
    operator delete(v33);
  }
  *(_QWORD *)(v31 - 136) = &unk_24C024808;
  v34 = *(void **)(v31 - 120);
  if (v34)
  {
    *(_QWORD *)(v31 - 112) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream4>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  _BYTE *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45[3];
  uint64_t v46;
  void *v47;
  __int128 v48;
  __int128 v49;

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)) && *(_QWORD *)(a1 + 304) >= 2uLL)
    ZinAssertImpl("Error: dilation is not supported for vector palettized kernels yet");
  if (!ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("wrong format type: expecting palettized format");
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 88);
  v31 = (*(_QWORD *)(a1 + 80) - 1) * a2;
  v10 = v31 + 1;
  v26 = (*(_QWORD *)(a1 + 72) - 1) * a3;
  v11 = v26 + 1;
  v48 = 0u;
  v49 = 0u;
  v23 = v7;
  v27 = v8;
  v46 = v8 * v7 * v9 * (v31 + 1) * (v26 + 1);
  v47 = &unk_24C0238E8;
  v12 = ZinDivRoundUp(v46, 8uLL);
  v38 = a1;
  v21 = a4;
  LOBYTE(v40) = 0;
  std::vector<unsigned char>::vector(v45, v12, &v40);
  v44 = 0;
  if (v23 >= 1)
  {
    *(_QWORD *)&v36 = 0;
    if (v10 <= 1)
      v13 = 1;
    else
      v13 = v31 + 1;
    v34 = v13;
    if (v11 <= 1)
      v14 = 1;
    else
      v14 = v26 + 1;
    v22 = v27 * v9 * v11 * v10;
    v29 = v9 * v10;
    v30 = v14;
    v24 = 0;
    v25 = v9 * v10 * v11;
    do
    {
      if (v27 >= 1)
      {
        *((_QWORD *)&v36 + 1) = 0;
        v28 = v24;
        do
        {
          if (v26 <= 0x7FFFFFFFFFFFFFFELL)
          {
            v15 = 0;
            v32 = v28;
            do
            {
              if (v31 <= 0x7FFFFFFFFFFFFFFELL)
              {
                v35 = 0;
                v16 = v32;
                do
                {
                  if (v9 >= 1)
                  {
                    for (i = 0; i != v9; ++i)
                    {
                      if (v16 + i >= 0)
                        v18 = v16 + i;
                      else
                        v18 = v16 + i + 7;
                      if (!(v35 % a2) && !(v15 % a3))
                      {
                        v37 = v45[0];
                        v40 = v36;
                        v41 = v15 / a3;
                        v42 = v35 / a2;
                        v43 = i;
                        v19 = (**(uint64_t (***)(uint64_t, __int128 *))v38)(v38, &v40);
                        if (((*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v38 + 136) + 168))(*(_QWORD *)(v38 + 136), v19) & 1) == 0)
                        {
                          v20 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>(v38, v19);
                          ZinIrWeightDataBitStream4::push_back((ZinIrWeightDataBitStream4 *)&v47, v20 & 0xF);
                          v37[v18 >> 3] |= 1 << (v16 + i - 8 * (v18 >> 3));
                          ++v44;
                        }
                      }
                    }
                  }
                  v16 += v9;
                  ++v35;
                }
                while (v35 != v34);
              }
              ++v15;
              v32 += v29;
            }
            while (v15 != v30);
          }
          v28 += v25;
          ++*((_QWORD *)&v36 + 1);
        }
        while (*((_QWORD *)&v36 + 1) != v27);
      }
      v24 += v22;
      *(_QWORD *)&v36 = v36 + 1;
    }
    while ((_QWORD)v36 != v23);
  }
  v40 = 0uLL;
  switch(*(_DWORD *)(v38 + 8))
  {
    case 7:
    case 8:
    case 9:
    case 0xA:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
      goto LABEL_38;
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
      goto LABEL_38;
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
      goto LABEL_38;
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
      goto LABEL_38;
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
      goto LABEL_38;
    case 0x1B:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
LABEL_38:
      (*(void (**)(_QWORD))(*(_QWORD *)v40 + 16))(v40);
      *(_OWORD *)v21 = v40;
      break;
    default:
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream1>();
      }
      else
      {
        *(_QWORD *)v21 = 0;
        *(_QWORD *)(v21 + 8) = 0;
      }
      break;
  }
  if (v45[0])
  {
    v45[1] = v45[0];
    operator delete(v45[0]);
  }
  v47 = &unk_24C024808;
  if (*((_QWORD *)&v48 + 1))
  {
    *(_QWORD *)&v49 = *((_QWORD *)&v48 + 1);
    operator delete(*((void **)&v48 + 1));
  }
}

void sub_206E24078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  void *v33;
  void *v34;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  v33 = *(void **)(v31 - 168);
  if (v33)
  {
    *(_QWORD *)(v31 - 160) = v33;
    operator delete(v33);
  }
  *(_QWORD *)(v31 - 136) = &unk_24C024808;
  v34 = *(void **)(v31 - 120);
  if (v34)
  {
    *(_QWORD *)(v31 - 112) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream6>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  _BYTE *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45[3];
  uint64_t v46;
  void *v47;
  __int128 v48;
  __int128 v49;

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)) && *(_QWORD *)(a1 + 304) >= 2uLL)
    ZinAssertImpl("Error: dilation is not supported for vector palettized kernels yet");
  if (!ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
    ZinAssertImpl("wrong format type: expecting palettized format");
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 88);
  v31 = (*(_QWORD *)(a1 + 80) - 1) * a2;
  v10 = v31 + 1;
  v26 = (*(_QWORD *)(a1 + 72) - 1) * a3;
  v11 = v26 + 1;
  v48 = 0u;
  v49 = 0u;
  v23 = v7;
  v27 = v8;
  v46 = v8 * v7 * v9 * (v31 + 1) * (v26 + 1);
  v47 = &unk_24C023918;
  v12 = ZinDivRoundUp(v46, 8uLL);
  v38 = a1;
  v21 = a4;
  LOBYTE(v40) = 0;
  std::vector<unsigned char>::vector(v45, v12, &v40);
  v44 = 0;
  if (v23 >= 1)
  {
    *(_QWORD *)&v36 = 0;
    if (v10 <= 1)
      v13 = 1;
    else
      v13 = v31 + 1;
    v34 = v13;
    if (v11 <= 1)
      v14 = 1;
    else
      v14 = v26 + 1;
    v22 = v27 * v9 * v11 * v10;
    v29 = v9 * v10;
    v30 = v14;
    v24 = 0;
    v25 = v9 * v10 * v11;
    do
    {
      if (v27 >= 1)
      {
        *((_QWORD *)&v36 + 1) = 0;
        v28 = v24;
        do
        {
          if (v26 <= 0x7FFFFFFFFFFFFFFELL)
          {
            v15 = 0;
            v32 = v28;
            do
            {
              if (v31 <= 0x7FFFFFFFFFFFFFFELL)
              {
                v35 = 0;
                v16 = v32;
                do
                {
                  if (v9 >= 1)
                  {
                    for (i = 0; i != v9; ++i)
                    {
                      if (v16 + i >= 0)
                        v18 = v16 + i;
                      else
                        v18 = v16 + i + 7;
                      if (!(v35 % a2) && !(v15 % a3))
                      {
                        v37 = v45[0];
                        v40 = v36;
                        v41 = v15 / a3;
                        v42 = v35 / a2;
                        v43 = i;
                        v19 = (**(uint64_t (***)(uint64_t, __int128 *))v38)(v38, &v40);
                        if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v38 + 136) + 168))(*(_QWORD *)(v38 + 136), v19) & 1) == 0)
                        {
                          v20 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>(v38, v19);
                          ZinIrWeightDataBitStream6::push_back((ZinIrWeightDataBitStream6 *)&v47, v20 & 0x3F);
                          v37[v18 >> 3] |= 1 << (v16 + i - 8 * (v18 >> 3));
                          ++v44;
                        }
                      }
                    }
                  }
                  v16 += v9;
                  ++v35;
                }
                while (v35 != v34);
              }
              ++v15;
              v32 += v29;
            }
            while (v15 != v30);
          }
          v28 += v25;
          ++*((_QWORD *)&v36 + 1);
        }
        while (*((_QWORD *)&v36 + 1) != v27);
      }
      v24 += v22;
      *(_QWORD *)&v36 = v36 + 1;
    }
    while ((_QWORD)v36 != v23);
  }
  v40 = 0uLL;
  switch(*(_DWORD *)(v38 + 8))
  {
    case 7:
    case 8:
    case 9:
    case 0xA:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
      goto LABEL_38;
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
      goto LABEL_38;
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
      goto LABEL_38;
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
      goto LABEL_38;
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
      goto LABEL_38;
    case 0x1B:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v47, (uint64_t)v45, &v44, (unint64_t *)&v46, &v39);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v40, &v39);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
LABEL_38:
      (*(void (**)(_QWORD))(*(_QWORD *)v40 + 16))(v40);
      *(_OWORD *)v21 = v40;
      break;
    default:
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream1>();
      }
      else
      {
        *(_QWORD *)v21 = 0;
        *(_QWORD *)(v21 + 8) = 0;
      }
      break;
  }
  if (v45[0])
  {
    v45[1] = v45[0];
    operator delete(v45[0]);
  }
  v47 = &unk_24C024808;
  if (*((_QWORD *)&v48 + 1))
  {
    *(_QWORD *)&v49 = *((_QWORD *)&v48 + 1);
    operator delete(*((void **)&v48 + 1));
  }
}

void sub_206E245F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  void *v33;
  void *v34;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  v33 = *(void **)(v31 - 168);
  if (v33)
  {
    *(_QWORD *)(v31 - 160) = v33;
    operator delete(v33);
  }
  *(_QWORD *)(v31 - 136) = &unk_24C024808;
  v34 = *(void **)(v31 - 120);
  if (v34)
  {
    *(_QWORD *)(v31 - 112) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void ZinIrWeight::DilatePalettizedWeightData<std::vector<unsigned char>>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  _BYTE *v43;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52[3];
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;

  v4 = a1;
  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)) && *(_QWORD *)(v4 + 304) >= 2uLL)
    ZinAssertImpl("Error: dilation is not supported for vector palettized kernels yet");
  if (!ZinKernelFormatIsPalette(*(_DWORD *)(v4 + 8)))
    ZinAssertImpl("wrong format type: expecting palettized format");
  v6 = *(_QWORD *)(v4 + 56);
  v7 = *(_QWORD *)(v4 + 88);
  v36 = (*(_QWORD *)(v4 + 80) - 1) * a2;
  v32 = (*(_QWORD *)(v4 + 72) - 1) * a3;
  v33 = *(_QWORD *)(v4 + 64);
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v30 = v6;
  v31 = v32 + 1;
  v34 = v36 + 1;
  v53 = v33 * v6 * v7 * (v36 + 1) * (v32 + 1);
  v8 = ZinDivRoundUp(v53, 8uLL);
  v29 = a4;
  LOBYTE(v47) = 0;
  std::vector<unsigned char>::vector(v52, v8, &v47);
  v51 = 0;
  if (v30 >= 1)
  {
    *(_QWORD *)&v42 = 0;
    v9 = v36 + 1;
    if (v34 <= 1)
      v9 = 1;
    v39 = v9;
    v40 = v4;
    v10 = v32 + 1;
    if (v31 <= 1)
      v10 = 1;
    v35 = v10;
    do
    {
      if (v33 >= 1)
      {
        *((_QWORD *)&v42 + 1) = 0;
        do
        {
          if (v32 <= 0x7FFFFFFFFFFFFFFELL)
          {
            v45 = 0;
            do
            {
              if (v36 <= 0x7FFFFFFFFFFFFFFELL)
              {
                v41 = 0;
                do
                {
                  if (v7 >= 1)
                  {
                    v11 = 0;
                    v12 = (v41 + (v45 + (*((_QWORD *)&v42 + 1) + v42 * v33) * v31) * v34) * v7;
                    do
                    {
                      if (v11 + v12 < 0 != __OFADD__(v11, v12))
                        v13 = v11 + v12 + 7;
                      else
                        v13 = v11 + v12;
                      if (!(v41 % a2) && !(v45 % a3))
                      {
                        v43 = v52[0];
                        v47 = v42;
                        v48 = v45 / a3;
                        v49 = v41 / a2;
                        v50 = v11;
                        v14 = (**(uint64_t (***)(uint64_t, __int128 *))v4)(v4, &v47);
                        if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 136) + 168))(*(_QWORD *)(v4 + 136), v14) & 1) == 0)
                        {
                          v15 = ZinIrWeightBase::GetAt<unsigned char>(v4);
                          v16 = v15;
                          v17 = v55;
                          if (v55 >= v56)
                          {
                            v19 = (unint64_t)v54;
                            v20 = v55 - v54;
                            v21 = v55 - v54 + 1;
                            if (v21 < 0)
                              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                            v22 = v56 - v54;
                            if (2 * (v56 - v54) > (unint64_t)v21)
                              v21 = 2 * v22;
                            if (v22 >= 0x3FFFFFFFFFFFFFFFLL)
                              v23 = 0x7FFFFFFFFFFFFFFFLL;
                            else
                              v23 = v21;
                            if (v23)
                            {
                              v38 = v23;
                              v24 = (char *)operator new(v23);
                              v23 = v38;
                            }
                            else
                            {
                              v24 = 0;
                            }
                            v25 = &v24[v20];
                            v26 = &v24[v20];
                            *v26 = v16;
                            v18 = v26 + 1;
                            if (v17 == (char *)v19)
                            {
                              v4 = v40;
                            }
                            else
                            {
                              v27 = &v17[~v19];
                              v4 = v40;
                              do
                              {
                                v28 = *--v17;
                                (v27--)[(_QWORD)v24] = v28;
                              }
                              while (v17 != (char *)v19);
                              v17 = v54;
                              v25 = v24;
                            }
                            v54 = v25;
                            v55 = v18;
                            v56 = &v24[v23];
                            if (v17)
                              operator delete(v17);
                          }
                          else
                          {
                            *v55 = v15;
                            v18 = v17 + 1;
                            v4 = v40;
                          }
                          v55 = v18;
                          v43[v13 >> 3] |= 1 << (v11 + v12 - 8 * (v13 >> 3));
                          ++v51;
                        }
                      }
                      ++v11;
                    }
                    while (v11 != v7);
                  }
                  ++v41;
                }
                while (v41 != v39);
              }
              ++v45;
            }
            while (v45 != v35);
          }
          ++*((_QWORD *)&v42 + 1);
        }
        while (*((_QWORD *)&v42 + 1) != v33);
      }
      *(_QWORD *)&v42 = v42 + 1;
    }
    while ((_QWORD)v42 != v30);
  }
  v47 = 0uLL;
  switch(*(_DWORD *)(v4 + 8))
  {
    case 7:
    case 8:
    case 9:
    case 0xA:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v54, (uint64_t)v52, &v51, (unint64_t *)&v53, &v46);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v47, &v46);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v46);
      goto LABEL_54;
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v54, (uint64_t)v52, &v51, (unint64_t *)&v53, &v46);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v47, &v46);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v46);
      goto LABEL_54;
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v54, (uint64_t)v52, &v51, (unint64_t *)&v53, &v46);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v47, &v46);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v46);
      goto LABEL_54;
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v54, (uint64_t)v52, &v51, (unint64_t *)&v53, &v46);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v47, &v46);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v46);
      goto LABEL_54;
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v54, (uint64_t)v52, &v51, (unint64_t *)&v53, &v46);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v47, &v46);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v46);
      goto LABEL_54;
    case 0x1B:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v54, (uint64_t)v52, &v51, (unint64_t *)&v53, &v46);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)&v47, &v46);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v46);
LABEL_54:
      (*(void (**)(_QWORD))(*(_QWORD *)v47 + 16))(v47);
      *(_OWORD *)v29 = v47;
      break;
    default:
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream1>();
      }
      else
      {
        *(_QWORD *)v29 = 0;
        *(_QWORD *)(v29 + 8) = 0;
      }
      break;
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
}

void sub_206E24BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  void *v35;
  void *v36;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  v35 = *(void **)(v33 - 152);
  if (v35)
  {
    *(_QWORD *)(v33 - 144) = v35;
    operator delete(v35);
  }
  v36 = *(void **)(v33 - 120);
  if (v36)
  {
    *(_QWORD *)(v33 - 112) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(a1);
}

void ZinIrWeight::HeightSplitDeconv(ZinIrWeight *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v16;
  void **v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35[3];
  int64x2_t v36;
  __int128 v37;
  uint64_t v38;
  int64x2_t v39;
  void **v40[3];

  v39 = 0uLL;
  v5 = *((_DWORD *)this + 2);
  if ((v5 - 7) >= 0x15)
  {
    switch(v5)
    {
      case 1:
        ZinIrWeight::HeightSplitDeconvData<ZinIrScratchBuffer<signed char>,ZinIrScratchBufferBackedConstData_specialization<signed char>>(this, a2, a3, &v36);
        break;
      case 2:
        ZinIrWeight::HeightSplitDeconvData<ZinIrScratchBuffer<unsigned char>,ZinIrScratchBufferBackedConstData_specialization<unsigned char>>(this, a2, a3, &v36);
        break;
      case 4:
        ZinIrWeight::HeightSplitDeconvData<ZinIrScratchBuffer<half>,ZinIrScratchBufferBackedConstData_specialization<half>>(this, a2, a3, &v36);
        break;
      case 5:
        ZinIrWeight::HeightSplitDeconvData<ZinIrScratchBuffer<e4m3_t>,ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>(this, a2, a3, &v36);
        break;
      case 6:
        ZinIrWeight::HeightSplitDeconvData<ZinIrScratchBuffer<float>,ZinIrScratchBufferBackedConstData_specialization<float>>(this, a2, a3, &v36);
        break;
      default:
        v27 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v27)
          ZinIrWeight::Dilate(v27, v28, v29, v30, v31, v32, v33, v34);
        goto LABEL_4;
    }
    v16 = (std::__shared_weak_count *)v36.i64[1];
    v17 = (void **)v36.i64[0];
    v39 = v36;
    if (v36.i64[0])
    {
      v18 = *(_OWORD *)((char *)this + 72);
      v36 = *(int64x2_t *)((char *)this + 56);
      v37 = v18;
      v38 = *((_QWORD *)this + 11);
      *(_QWORD *)&v37 = a3;
      memset(v35, 0, sizeof(v35));
      v19 = operator new();
      v20 = v19;
      v40[0] = v17;
      v40[1] = (void **)&v16->__vftable;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
      }
      ZinIrWeight::ZinIrWeight(v19, (uint64_t *)v40, v35, *((_DWORD *)this + 2), &v36, 0, 1145261902, 0);
      *a4 = v20;
      if (v16)
      {
        v23 = (unint64_t *)&v16->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v40[0] = (void **)v35;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v40);
      v16 = (std::__shared_weak_count *)v39.i64[1];
      if (!v39.i64[1])
        return;
    }
    else
    {
      *a4 = 0;
      if (!v16)
        return;
    }
    v25 = (unint64_t *)&v16->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    return;
  }
  v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v6)
    ZinIrWeight::HeightSplitDeconv(v6, v7, v8, v9, v10, v11, v12, v13);
LABEL_4:
  *a4 = 0;
}

void sub_206E24E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::HeightSplitDeconvData<ZinIrScratchBuffer<float>,ZinIrScratchBufferBackedConstData_specialization<float>>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  char *v30;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37[8];
  uint64_t v38;
  uint64_t v39;

  if (a1[9] <= a2)
    ZinAssertImpl("New weight should never expand beyond old weight.");
  v7 = a1[11];
  v8 = a1[7];
  v9 = a1[10] * a3;
  details::ZinIrMappedData_Impl<float>::ZinIrMappedData_Impl((uint64_t)v37, v9 * v8 * v7 * a1[8]);
  if (v39 != v38)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      v13 = v38;
      v14 = (char *)(v38 + v10);
      if (!v12)
        v14 = v37;
      *(_DWORD *)v14 = 0;
      ++v11;
      v10 += 4;
    }
    while (v11 < (v39 - v13) >> 2);
  }
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v15 = a1[8];
  if (v15 >= 1)
  {
    v16 = 0;
    v17 = v9 * v7;
    v18 = a1[7];
    do
    {
      *(_QWORD *)&v34 = 0;
      if (v18 >= 1)
      {
        for (i = 0; i < v18; *(_QWORD *)&v34 = i)
        {
          *(_QWORD *)&v35 = a2;
          if ((a2 & 0x8000000000000000) == 0)
          {
            v20 = v17 * (i + *((_QWORD *)&v34 + 1) * v8);
            v21 = a2;
            do
            {
              v22 = a1[10];
              v23 = v22 < 1;
              v24 = v22 - 1;
              *((_QWORD *)&v35 + 1) = v24;
              if (!v23)
              {
                do
                {
                  v25 = a1[11];
                  v36 = v25 - 1;
                  if (v25 >= 1)
                  {
                    v26 = 4 * v20;
                    do
                    {
                      ZinIrWeightBase::GetAt<float>((uint64_t)a1);
                      v28 = v27;
                      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                               + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      v30 = (char *)(v38 + v26);
                      if (!v29)
                        v30 = v37;
                      ++v20;
                      *(_DWORD *)v30 = v28;
                      v31 = v36--;
                      v26 += 4;
                    }
                    while (v31 > 0);
                    v24 = *((_QWORD *)&v35 + 1);
                  }
                  *((_QWORD *)&v35 + 1) = v24 - 1;
                  v23 = v24-- <= 0;
                }
                while (!v23);
                v21 = v35;
              }
              *(_QWORD *)&v35 = v21 - 2;
              v23 = v21 <= 1;
              v21 -= 2;
            }
            while (!v23);
            i = v34;
            v18 = a1[7];
          }
          ++i;
        }
        v16 = *((_QWORD *)&v34 + 1);
        v15 = a1[8];
      }
      *((_QWORD *)&v34 + 1) = ++v16;
    }
    while (v16 < v15);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<float>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<float>>,ZinIrScratchBuffer<float>,void>((uint64_t)v37, &v33);
  *a4 = v33;
  return details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)v37);
}

void sub_206E25120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::HeightSplitDeconvData<ZinIrScratchBuffer<half>,ZinIrScratchBufferBackedConstData_specialization<half>>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  int v29;
  char *v30;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37[8];
  uint64_t v38;
  uint64_t v39;

  if (a1[9] <= a2)
    ZinAssertImpl("New weight should never expand beyond old weight.");
  v7 = a1[11];
  v8 = a1[7];
  v9 = a1[10] * a3;
  details::ZinIrMappedData_Impl<half>::ZinIrMappedData_Impl((uint64_t)v37, v9 * v8 * v7 * a1[8]);
  if (v39 != v38)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      v13 = v38;
      v14 = (char *)(v38 + v10);
      if (!v12)
        v14 = v37;
      *(_WORD *)v14 = 0;
      ++v11;
      v10 += 2;
    }
    while (v11 < (v39 - v13) >> 1);
  }
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v15 = a1[8];
  if (v15 >= 1)
  {
    v16 = 0;
    v17 = v9 * v7;
    v18 = a1[7];
    do
    {
      *(_QWORD *)&v34 = 0;
      if (v18 >= 1)
      {
        for (i = 0; i < v18; *(_QWORD *)&v34 = i)
        {
          *(_QWORD *)&v35 = a2;
          if ((a2 & 0x8000000000000000) == 0)
          {
            v20 = v17 * (i + *((_QWORD *)&v34 + 1) * v8);
            v21 = a2;
            do
            {
              v22 = a1[10];
              v23 = v22 < 1;
              v24 = v22 - 1;
              *((_QWORD *)&v35 + 1) = v24;
              if (!v23)
              {
                do
                {
                  v25 = a1[11];
                  v36 = v25 - 1;
                  if (v25 >= 1)
                  {
                    v26 = 2 * v20;
                    do
                    {
                      ZinIrWeightBase::GetAt<half>((uint64_t)a1);
                      v28 = v27;
                      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                               + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      v30 = (char *)(v38 + v26);
                      if (!v29)
                        v30 = v37;
                      ++v20;
                      *(_WORD *)v30 = v28;
                      v31 = v36--;
                      v26 += 2;
                    }
                    while (v31 > 0);
                    v24 = *((_QWORD *)&v35 + 1);
                  }
                  *((_QWORD *)&v35 + 1) = v24 - 1;
                  v23 = v24-- <= 0;
                }
                while (!v23);
                v21 = v35;
              }
              *(_QWORD *)&v35 = v21 - 2;
              v23 = v21 <= 1;
              v21 -= 2;
            }
            while (!v23);
            i = v34;
            v18 = a1[7];
          }
          ++i;
        }
        v16 = *((_QWORD *)&v34 + 1);
        v15 = a1[8];
      }
      *((_QWORD *)&v34 + 1) = ++v16;
    }
    while (v16 < v15);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<half>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<half>>,ZinIrScratchBuffer<half>,void>((uint64_t)v37, &v33);
  *a4 = v33;
  return details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)v37);
}

void sub_206E2536C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::HeightSplitDeconvData<ZinIrScratchBuffer<e4m3_t>,ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  char *v26;
  uint64_t v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33[8];
  uint64_t v34;
  uint64_t v35;

  if (a1[9] <= a2)
    ZinAssertImpl("New weight should never expand beyond old weight.");
  v7 = a1[11];
  v8 = a1[7];
  v9 = a1[10] * a3;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v33, v9 * v8 * v7 * a1[8]);
  if (v35 != v34)
  {
    v10 = 0;
    do
    {
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      v12 = (char *)(v34 + v10);
      if (!v11)
        v12 = v33;
      *v12 = 0;
      ++v10;
    }
    while (v35 - v34 > v10);
  }
  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  v13 = a1[8];
  if (v13 >= 1)
  {
    v14 = 0;
    v15 = v9 * v7;
    v16 = a1[7];
    do
    {
      *(_QWORD *)&v30 = 0;
      if (v16 >= 1)
      {
        for (i = 0; i < v16; *(_QWORD *)&v30 = i)
        {
          *(_QWORD *)&v31 = a2;
          if ((a2 & 0x8000000000000000) == 0)
          {
            v18 = v15 * (i + *((_QWORD *)&v30 + 1) * v8);
            v19 = a2;
            do
            {
              v20 = a1[10];
              v21 = v20 < 1;
              v22 = v20 - 1;
              *((_QWORD *)&v31 + 1) = v22;
              if (!v21)
              {
                do
                {
                  v23 = a1[11];
                  v32 = v23 - 1;
                  if (v23 >= 1)
                  {
                    do
                    {
                      v24 = ZinIrWeightBase::GetAt<e4m3_t>((uint64_t)a1);
                      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                               + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      v26 = (char *)(v34 + v18);
                      if (!v25)
                        v26 = v33;
                      ++v18;
                      *v26 = v24;
                      v27 = v32--;
                    }
                    while (v27 > 0);
                    v22 = *((_QWORD *)&v31 + 1);
                  }
                  *((_QWORD *)&v31 + 1) = v22 - 1;
                  v21 = v22-- <= 0;
                }
                while (!v21);
                v19 = v31;
              }
              *(_QWORD *)&v31 = v19 - 2;
              v21 = v19 <= 1;
              v19 -= 2;
            }
            while (!v21);
            i = v30;
            v16 = a1[7];
          }
          ++i;
        }
        v14 = *((_QWORD *)&v30 + 1);
        v13 = a1[8];
      }
      *((_QWORD *)&v30 + 1) = ++v14;
    }
    while (v14 < v13);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>,ZinIrScratchBuffer<e4m3_t>,void>((uint64_t)v33, &v29);
  *a4 = v29;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v33);
}

void sub_206E2559C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::HeightSplitDeconvData<ZinIrScratchBuffer<signed char>,ZinIrScratchBufferBackedConstData_specialization<signed char>>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  char *v26;
  uint64_t v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33[8];
  uint64_t v34;
  uint64_t v35;

  if (a1[9] <= a2)
    ZinAssertImpl("New weight should never expand beyond old weight.");
  v7 = a1[11];
  v8 = a1[7];
  v9 = a1[10] * a3;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v33, v9 * v8 * v7 * a1[8]);
  if (v35 != v34)
  {
    v10 = 0;
    do
    {
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      v12 = (char *)(v34 + v10);
      if (!v11)
        v12 = v33;
      *v12 = 0;
      ++v10;
    }
    while (v35 - v34 > v10);
  }
  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  v13 = a1[8];
  if (v13 >= 1)
  {
    v14 = 0;
    v15 = v9 * v7;
    v16 = a1[7];
    do
    {
      *(_QWORD *)&v30 = 0;
      if (v16 >= 1)
      {
        for (i = 0; i < v16; *(_QWORD *)&v30 = i)
        {
          *(_QWORD *)&v31 = a2;
          if ((a2 & 0x8000000000000000) == 0)
          {
            v18 = v15 * (i + *((_QWORD *)&v30 + 1) * v8);
            v19 = a2;
            do
            {
              v20 = a1[10];
              v21 = v20 < 1;
              v22 = v20 - 1;
              *((_QWORD *)&v31 + 1) = v22;
              if (!v21)
              {
                do
                {
                  v23 = a1[11];
                  v32 = v23 - 1;
                  if (v23 >= 1)
                  {
                    do
                    {
                      v24 = ZinIrWeightBase::GetAt<signed char>((uint64_t)a1);
                      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                               + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      v26 = (char *)(v34 + v18);
                      if (!v25)
                        v26 = v33;
                      ++v18;
                      *v26 = v24;
                      v27 = v32--;
                    }
                    while (v27 > 0);
                    v22 = *((_QWORD *)&v31 + 1);
                  }
                  *((_QWORD *)&v31 + 1) = v22 - 1;
                  v21 = v22-- <= 0;
                }
                while (!v21);
                v19 = v31;
              }
              *(_QWORD *)&v31 = v19 - 2;
              v21 = v19 <= 1;
              v19 -= 2;
            }
            while (!v21);
            i = v30;
            v16 = a1[7];
          }
          ++i;
        }
        v14 = *((_QWORD *)&v30 + 1);
        v13 = a1[8];
      }
      *((_QWORD *)&v30 + 1) = ++v14;
    }
    while (v14 < v13);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<signed char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<signed char>>,ZinIrScratchBuffer<signed char>,void>((uint64_t)v33, &v29);
  *a4 = v29;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v33);
}

void sub_206E257CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::HeightSplitDeconvData<ZinIrScratchBuffer<unsigned char>,ZinIrScratchBufferBackedConstData_specialization<unsigned char>>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  char *v26;
  uint64_t v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33[8];
  uint64_t v34;
  uint64_t v35;

  if (a1[9] <= a2)
    ZinAssertImpl("New weight should never expand beyond old weight.");
  v7 = a1[11];
  v8 = a1[7];
  v9 = a1[10] * a3;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v33, v9 * v8 * v7 * a1[8]);
  if (v35 != v34)
  {
    v10 = 0;
    do
    {
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      v12 = (char *)(v34 + v10);
      if (!v11)
        v12 = v33;
      *v12 = 0;
      ++v10;
    }
    while (v35 - v34 > v10);
  }
  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  v13 = a1[8];
  if (v13 >= 1)
  {
    v14 = 0;
    v15 = v9 * v7;
    v16 = a1[7];
    do
    {
      *(_QWORD *)&v30 = 0;
      if (v16 >= 1)
      {
        for (i = 0; i < v16; *(_QWORD *)&v30 = i)
        {
          *(_QWORD *)&v31 = a2;
          if ((a2 & 0x8000000000000000) == 0)
          {
            v18 = v15 * (i + *((_QWORD *)&v30 + 1) * v8);
            v19 = a2;
            do
            {
              v20 = a1[10];
              v21 = v20 < 1;
              v22 = v20 - 1;
              *((_QWORD *)&v31 + 1) = v22;
              if (!v21)
              {
                do
                {
                  v23 = a1[11];
                  v32 = v23 - 1;
                  if (v23 >= 1)
                  {
                    do
                    {
                      v24 = ZinIrWeightBase::GetAt<unsigned char>((uint64_t)a1);
                      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                               + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      v26 = (char *)(v34 + v18);
                      if (!v25)
                        v26 = v33;
                      ++v18;
                      *v26 = v24;
                      v27 = v32--;
                    }
                    while (v27 > 0);
                    v22 = *((_QWORD *)&v31 + 1);
                  }
                  *((_QWORD *)&v31 + 1) = v22 - 1;
                  v21 = v22-- <= 0;
                }
                while (!v21);
                v19 = v31;
              }
              *(_QWORD *)&v31 = v19 - 2;
              v21 = v19 <= 1;
              v19 -= 2;
            }
            while (!v21);
            i = v30;
            v16 = a1[7];
          }
          ++i;
        }
        v14 = *((_QWORD *)&v30 + 1);
        v13 = a1[8];
      }
      *((_QWORD *)&v30 + 1) = ++v14;
    }
    while (v14 < v13);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<unsigned char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<unsigned char>>,ZinIrScratchBuffer<unsigned char>,void>((uint64_t)v33, &v29);
  *a4 = v29;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v33);
}

void sub_206E259FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

void ZinIrWeight::GetValueAsFloat(ZinIrWeight *a1)
{
  unint64_t v2;

  v2 = (**(uint64_t (***)(ZinIrWeight *))a1)(a1);
  ZinIrWeight::GetValueAsFloat(a1, v2);
}

void ZinIrWeight::GetValueAsFloat(ZinIrWeight *this, unint64_t a2)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v16;

  switch(*((_DWORD *)this + 2))
  {
    case 1:
      ZinIrWeightBase::GetAt<signed char>((uint64_t)this);
      break;
    case 2:
    case 0x1B:
      ZinIrWeightBase::GetAt<unsigned char>((uint64_t)this);
      break;
    case 4:
      ZinIrWeightBase::GetAt<half>((uint64_t)this);
      __asm { FCVT            S8, H0 }
      break;
    case 5:
      v16 = ZinIrWeightBase::GetAt<e4m3_t>((uint64_t)this);
      ZinE4M3ToF32(v16, 0);
      break;
    case 6:
      ZinIrWeightBase::GetAt<float>((uint64_t)this);
      break;
    case 7:
    case 8:
    case 9:
    case 0xA:
      ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>((uint64_t)this, a2);
      break;
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
      ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>((uint64_t)this, a2);
      break;
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>((uint64_t)this, a2);
      break;
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
      ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>((uint64_t)this, a2);
      break;
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
      ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>((uint64_t)this, a2);
      break;
    default:
      v2 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2)
        ZinIrWeight::GetValueAsFloat(v2, v3, v4, v5, v6, v7, v8, v9);
      break;
  }
}

float ZinIrWeight::GetWeightValueAsFloat(uint64_t a1, unint64_t *a2, int a3)
{
  unint64_t v6;
  float v7;
  float v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float result;

  v6 = (**(uint64_t (***)(uint64_t))a1)(a1);
  if (!(*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 136) + 168))(*(_QWORD *)(a1 + 136), v6))
  {
    ZinIrWeight::GetValueAsFloat((ZinIrWeight *)a1, v6);
    v7 = v8;
    if (!ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
      return v7;
    v9 = *a2;
    v10 = *(_QWORD **)(a1 + 280);
    v11 = *(_QWORD *)(a1 + 288) - (_QWORD)v10;
    if ((unint64_t)v11 >= 0x11)
    {
      if (v9 >= v11 >> 4)
        goto LABEL_14;
      v10 += 2 * v9;
    }
    v12 = v9 % *(_QWORD *)(a1 + 304) + *(_QWORD *)(a1 + 304) * (unint64_t)v7;
    if (v12 >= (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v10 + 24))(*v10))
      ZinAssertImpl("Palette LUT index out of range.");
    v13 = *(_QWORD **)(a1 + 280);
    v14 = *(_QWORD *)(a1 + 288) - (_QWORD)v13;
    if ((unint64_t)v14 < 0x11)
      goto LABEL_11;
    if (*a2 < v14 >> 4)
    {
      v13 += 2 * *a2;
LABEL_11:
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v13 + 40))(*v13, v12);
      return result;
    }
LABEL_14:
    ZinAssertImpl("GetPaletteData: out of bound access.");
  }
  return (float)a3;
}

uint64_t ZinIrWeight::GetPaletteData(ZinIrWeight *this, unint64_t a2)
{
  uint64_t result;
  char *v3;
  uint64_t v4;

  v3 = (char *)this + 280;
  result = *((_QWORD *)this + 35);
  v4 = *((_QWORD *)v3 + 1) - result;
  if ((unint64_t)v4 >= 0x11)
  {
    if (a2 >= v4 >> 4)
      ZinAssertImpl("GetPaletteData: out of bound access.");
    result += 16 * a2;
  }
  return result;
}

uint64_t ZinIrWeight::IsFirstPaletteLUTEntryNonZero(ZinIrWeight *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (!ZinKernelFormatIsPalette(*((_DWORD *)this + 2)))
    ZinAssertImpl("Weights must have a palette LUT to check the LUT entry.");
  v3 = *((_QWORD *)this + 35);
  v2 = *((_QWORD *)this + 36);
  if (v2 == v3)
    return 0;
  v4 = 0;
  v5 = *((_QWORD *)this + 38);
  while (!v5)
  {
LABEL_12:
    if (++v4 >= (v2 - v3) >> 4)
      return 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = (_QWORD *)*((_QWORD *)this + 35);
    v8 = *((_QWORD *)this + 36) - (_QWORD)v7;
    if ((unint64_t)v8 >= 0x11)
    {
      if (v4 >= v8 >> 4)
        ZinAssertImpl("GetPaletteData: out of bound access.");
      v7 += 2 * v4;
    }
    if (((*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)*v7 + 152))(*v7, v6) & 1) != 0)
      return 1;
    ++v6;
    v5 = *((_QWORD *)this + 38);
    if (v5 <= v6)
    {
      v3 = *((_QWORD *)this + 35);
      v2 = *((_QWORD *)this + 36);
      goto LABEL_12;
    }
  }
}

uint64_t ZinIrWeight::IsZeroPointAt(ZinIrWeight *this, unint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v24[4];
  int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  ZinIrWeight *v29;

  v5 = *((_DWORD *)this + 2);
  v24[0] = a4;
  v25 = a5;
  v26 = v5;
  v27 = a2;
  v28 = a3;
  v29 = this;
  switch(v5)
  {
    case 1:
      v9 = ZinIrWeightBase::GetAt<signed char>((uint64_t)this);
      return v9 == a5;
    case 2:
      v9 = ZinIrWeightBase::GetAt<unsigned char>((uint64_t)this);
      return v9 == a5;
    case 4:
    case 5:
      return (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 17) + 152))(*((_QWORD *)this + 17)) ^ 1;
    case 6:
      ZinIrWeightBase::GetAt<float>((uint64_t)this);
      __asm { FCVT            H0, S0 }
      if (a4)
        return (_H0 & 0x7C00) == 0;
      else
        return (_H0 & 0x7FFF) == 0;
    case 7:
    case 8:
    case 9:
    case 10:
      v7 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>((uint64_t)this, a2) & 1;
      goto LABEL_17;
    case 11:
    case 12:
    case 13:
    case 14:
      v7 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>((uint64_t)this, a2) & 3;
      goto LABEL_17;
    case 15:
    case 16:
    case 17:
    case 18:
      v7 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>((uint64_t)this, a2) & 7;
      goto LABEL_17;
    case 19:
    case 20:
    case 21:
    case 22:
      v7 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>((uint64_t)this, a2) & 0xF;
      goto LABEL_17;
    case 23:
    case 24:
    case 25:
    case 26:
      v7 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>((uint64_t)this, a2) & 0x3F;
      goto LABEL_17;
    case 27:
      v7 = ZinIrWeightBase::GetAt<unsigned char>((uint64_t)this);
LABEL_17:
      result = ZinIrWeight::IsZeroPointAt(long,long,BOOL,int)const::$_0::operator()((uint64_t)v24, v7);
      break;
    default:
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        ZinIrWeight::IsZeroPointAt(result, v10, v11, v12, v13, v14, v15, v16);
        result = 0;
      }
      break;
  }
  return result;
}

uint64_t ZinIrWeight::IsZeroPointAt(long,long,BOOL,int)const::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t i;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t j;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  BOOL v18;
  unint64_t v19;
  unint64_t k;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t m;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;

  v4 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 136) + 168))(*(_QWORD *)(v4 + 136), *(_QWORD *)(a1 + 16)) & 1) != 0)return 1;
  v32 = 0;
  ZinKernelFormatGetPaletteFormat(*(_DWORD *)(a1 + 8), &v32);
  v5 = 1;
  switch(v32)
  {
    case 1:
      v7 = *(_QWORD *)(v4 + 304);
      if (!v7)
        return v5;
      for (i = 0; i < v7; ++i)
      {
        v9 = *(_QWORD **)(v4 + 280);
        v10 = *(_QWORD *)(v4 + 288) - (_QWORD)v9;
        if ((unint64_t)v10 >= 0x11)
        {
          v11 = *(_QWORD *)(a1 + 24);
          if (v11 >= v10 >> 4)
            goto LABEL_51;
          v9 += 2 * v11;
        }
        v5 = v5 & (*(_DWORD *)(a1 + 4) == (*(unsigned int (**)(_QWORD, unint64_t))(*(_QWORD *)*v9 + 72))(*v9, i + v7 * a2));
        v7 = *(_QWORD *)(v4 + 304);
      }
      return v5;
    case 2:
      v12 = *(_QWORD *)(v4 + 304);
      if (!v12)
        return v5;
      for (j = 0; j < v12; ++j)
      {
        v14 = *(_QWORD **)(v4 + 280);
        v15 = *(_QWORD *)(v4 + 288) - (_QWORD)v14;
        if ((unint64_t)v15 >= 0x11)
        {
          v16 = *(_QWORD *)(a1 + 24);
          if (v16 >= v15 >> 4)
            goto LABEL_51;
          v14 += 2 * v16;
        }
        v17 = (*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)*v14 + 120))(*v14, j + v12 * a2);
        if ((_BYTE)v5)
          v18 = *(_DWORD *)(a1 + 4) == v17;
        else
          v18 = 0;
        v5 = v18;
        v12 = *(_QWORD *)(v4 + 304);
      }
      return v5;
    case 4:
      v19 = *(_QWORD *)(v4 + 304);
      if (!v19)
        return v5;
      for (k = 0; k < v19; ++k)
      {
        v21 = k + v19 * a2;
        v22 = *(_QWORD *)(a1 + 24);
        v23 = *(_QWORD **)(v4 + 280);
        v24 = *(_QWORD *)(v4 + 288) - (_QWORD)v23;
        if (*(_BYTE *)a1)
        {
          if ((unint64_t)v24 >= 0x11)
          {
            if (v22 >= v24 >> 4)
              goto LABEL_51;
            v23 += 2 * v22;
          }
          v25 = (((__n128 (*)(_QWORD, unint64_t))*(_QWORD *)(*(_QWORD *)*v23 + 56))(*v23, v21).n128_u32[0] & 0x7C00) == 0;
        }
        else
        {
          if ((unint64_t)v24 >= 0x11)
          {
            if (v22 >= v24 >> 4)
              goto LABEL_51;
            v23 += 2 * v22;
          }
          v25 = (*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)*v23 + 152))(*v23, v21) ^ 1;
        }
        if ((_BYTE)v5)
          v5 = v25;
        else
          v5 = 0;
        v19 = *(_QWORD *)(v4 + 304);
      }
      break;
    case 5:
      v26 = *(_QWORD *)(v4 + 304);
      if (!v26)
        return v5;
      for (m = 0; m < v26; ++m)
      {
        v28 = *(_QWORD **)(v4 + 280);
        v29 = *(_QWORD *)(v4 + 288) - (_QWORD)v28;
        if ((unint64_t)v29 >= 0x11)
        {
          v30 = *(_QWORD *)(a1 + 24);
          if (v30 >= v29 >> 4)
LABEL_51:
            ZinAssertImpl("GetPaletteData: out of bound access.");
          v28 += 2 * v30;
        }
        v31 = (*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)*v28 + 152))(*v28, m + v26 * a2) ^ 1;
        if ((_BYTE)v5)
          v5 = v31;
        else
          v5 = 0;
        v26 = *(_QWORD *)(v4 + 304);
      }
      break;
    default:
      return v5;
  }
  return v5;
}

uint64_t ZinIrWeight::IsElemZeroPointAt(ZinIrWeight *this, unint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  uint64_t v7;
  uint64_t result;
  int Elem;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v24[4];
  int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  ZinIrWeight *v29;

  v5 = *((_DWORD *)this + 2);
  v24[0] = a4;
  v25 = a5;
  v26 = v5;
  v27 = a2;
  v28 = a3;
  v29 = this;
  switch(v5)
  {
    case 1:
      Elem = ZinIrWeightBase::GetElemAt<signed char>((uint64_t)this);
      return Elem == a5;
    case 2:
      Elem = ZinIrWeightBase::GetElemAt<unsigned char>((uint64_t)this);
      return Elem == a5;
    case 4:
    case 5:
      return (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 17) + 160))(*((_QWORD *)this + 17)) ^ 1;
    case 6:
      ZinIrWeightBase::GetElemAt<float>((uint64_t)this);
      __asm { FCVT            H0, S0 }
      if (a4)
        return (_H0 & 0x7C00) == 0;
      else
        return (_H0 & 0x7FFF) == 0;
    case 7:
    case 8:
    case 9:
    case 10:
      v7 = ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint1>((uint64_t)this, a2) & 1;
      goto LABEL_17;
    case 11:
    case 12:
    case 13:
    case 14:
      v7 = ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint2>((uint64_t)this, a2) & 3;
      goto LABEL_17;
    case 15:
    case 16:
    case 17:
    case 18:
      v7 = ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint3>((uint64_t)this, a2) & 7;
      goto LABEL_17;
    case 19:
    case 20:
    case 21:
    case 22:
      v7 = ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint4>((uint64_t)this, a2) & 0xF;
      goto LABEL_17;
    case 23:
    case 24:
    case 25:
    case 26:
      v7 = ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint6>((uint64_t)this, a2) & 0x3F;
      goto LABEL_17;
    case 27:
      v7 = ZinIrWeightBase::GetElemAt<unsigned char>((uint64_t)this);
LABEL_17:
      result = ZinIrWeight::IsElemZeroPointAt(long,long,BOOL,int)const::$_0::operator()((uint64_t)v24, v7);
      break;
    default:
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        ZinIrWeight::IsElemZeroPointAt(result, v10, v11, v12, v13, v14, v15, v16);
        result = 0;
      }
      break;
  }
  return result;
}

uint64_t ZinIrWeight::IsElemZeroPointAt(long,long,BOOL,int)const::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t i;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t j;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  BOOL v18;
  unint64_t v19;
  unint64_t k;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t m;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;

  v4 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 136) + 176))(*(_QWORD *)(v4 + 136), *(_QWORD *)(a1 + 16)) & 1) != 0)return 1;
  v32 = 0;
  ZinKernelFormatGetPaletteFormat(*(_DWORD *)(a1 + 8), &v32);
  v5 = 1;
  switch(v32)
  {
    case 1:
      v7 = *(_QWORD *)(v4 + 304);
      if (!v7)
        return v5;
      for (i = 0; i < v7; ++i)
      {
        v9 = *(_QWORD **)(v4 + 280);
        v10 = *(_QWORD *)(v4 + 288) - (_QWORD)v9;
        if ((unint64_t)v10 >= 0x11)
        {
          v11 = *(_QWORD *)(a1 + 24);
          if (v11 >= v10 >> 4)
            goto LABEL_51;
          v9 += 2 * v11;
        }
        v5 = v5 & (*(_DWORD *)(a1 + 4) == (*(unsigned int (**)(_QWORD, unint64_t))(*(_QWORD *)*v9 + 80))(*v9, i + v7 * a2));
        v7 = *(_QWORD *)(v4 + 304);
      }
      return v5;
    case 2:
      v12 = *(_QWORD *)(v4 + 304);
      if (!v12)
        return v5;
      for (j = 0; j < v12; ++j)
      {
        v14 = *(_QWORD **)(v4 + 280);
        v15 = *(_QWORD *)(v4 + 288) - (_QWORD)v14;
        if ((unint64_t)v15 >= 0x11)
        {
          v16 = *(_QWORD *)(a1 + 24);
          if (v16 >= v15 >> 4)
            goto LABEL_51;
          v14 += 2 * v16;
        }
        v17 = (*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)*v14 + 128))(*v14, j + v12 * a2);
        if ((_BYTE)v5)
          v18 = *(_DWORD *)(a1 + 4) == v17;
        else
          v18 = 0;
        v5 = v18;
        v12 = *(_QWORD *)(v4 + 304);
      }
      return v5;
    case 4:
      v19 = *(_QWORD *)(v4 + 304);
      if (!v19)
        return v5;
      for (k = 0; k < v19; ++k)
      {
        v21 = k + v19 * a2;
        v22 = *(_QWORD *)(a1 + 24);
        v23 = *(_QWORD **)(v4 + 280);
        v24 = *(_QWORD *)(v4 + 288) - (_QWORD)v23;
        if (*(_BYTE *)a1)
        {
          if ((unint64_t)v24 >= 0x11)
          {
            if (v22 >= v24 >> 4)
              goto LABEL_51;
            v23 += 2 * v22;
          }
          v25 = (((__n128 (*)(_QWORD, unint64_t))*(_QWORD *)(*(_QWORD *)*v23 + 64))(*v23, v21).n128_u32[0] & 0x7C00) == 0;
        }
        else
        {
          if ((unint64_t)v24 >= 0x11)
          {
            if (v22 >= v24 >> 4)
              goto LABEL_51;
            v23 += 2 * v22;
          }
          v25 = (*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)*v23 + 160))(*v23, v21) ^ 1;
        }
        if ((_BYTE)v5)
          v5 = v25;
        else
          v5 = 0;
        v19 = *(_QWORD *)(v4 + 304);
      }
      break;
    case 5:
      v26 = *(_QWORD *)(v4 + 304);
      if (!v26)
        return v5;
      for (m = 0; m < v26; ++m)
      {
        v28 = *(_QWORD **)(v4 + 280);
        v29 = *(_QWORD *)(v4 + 288) - (_QWORD)v28;
        if ((unint64_t)v29 >= 0x11)
        {
          v30 = *(_QWORD *)(a1 + 24);
          if (v30 >= v29 >> 4)
LABEL_51:
            ZinAssertImpl("GetPaletteData: out of bound access.");
          v28 += 2 * v30;
        }
        v31 = (*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)*v28 + 160))(*v28, m + v26 * a2) ^ 1;
        if ((_BYTE)v5)
          v5 = v31;
        else
          v5 = 0;
        v26 = *(_QWORD *)(v4 + 304);
      }
      break;
    default:
      return v5;
  }
  return v5;
}

uint64_t ZinIrWeight::IsZeroPointAt(ZinIrWeight *a1, uint64_t *a2, int a3, int a4)
{
  unint64_t v8;

  v8 = (**(uint64_t (***)(ZinIrWeight *))a1)(a1);
  return ZinIrWeight::IsZeroPointAt(a1, v8, *a2, a3, a4);
}

uint64_t ZinIrWeight::CreatePalettizedUnityWeight@<X0>(int a1@<W0>, int64x2_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void *__p[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;

  if (!ZinKernelFormatIsUnity(a1))
    ZinAssertImpl("Invalid weight format");
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_QWORD *)v6 = &unk_24C0238E8;
  v7 = a2[1].i64[1];
  v8 = a2->i64[1] * a2->i64[0] * a2[1].i64[0];
  *(_OWORD *)(v6 + 16) = 0u;
  *(_QWORD *)(v6 + 32) = 0;
  if (v8 * v7 * a2[2].i64[0] >= 1)
  {
    v9 = 0;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, 1);
      ++v9;
    }
    while (a2->i64[1] * a2->i64[0] * a2[1].i64[0] * a2[1].i64[1] * a2[2].i64[0] > v9);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream4,void>(v6, __p);
  v48 = *(_OWORD *)__p;
  v47 = 0uLL;
  switch(a1)
  {
    case 28:
      LOBYTE(v49) = 1;
      std::vector<signed char>::vector(__p, 0x10uLL, &v49);
      *(_BYTE *)__p[0] = 0;
      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<signed char>,std::allocator<ZinIrConstData_specialization<signed char>>,std::vector<signed char>,void>((uint64_t)__p, &v49);
      v18 = v49;
      v49 = 0uLL;
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
      v47 = v18;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
      if (*((_QWORD *)&v49 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v17 = 19;
      break;
    case 29:
      LOBYTE(v49) = 1;
      std::vector<unsigned char>::vector(__p, 0x10uLL, &v49);
      *(_BYTE *)__p[0] = 0;
      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)__p, &v49);
      v25 = v49;
      v49 = 0uLL;
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
      v47 = v25;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
      if (*((_QWORD *)&v49 + 1))
      {
        v30 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v17 = 20;
      break;
    case 30:
      LOWORD(v49) = 15360;
      std::vector<half>::vector(__p, 16, &v49);
      *(_WORD *)__p[0] = 0;
      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)__p, &v49);
      v10 = v49;
      v49 = 0uLL;
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
      v47 = v10;
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
      if (*((_QWORD *)&v49 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v17 = 21;
      break;
    default:
      v17 = 0;
      break;
  }
  std::vector<std::shared_ptr<ZinIrConstData>>::vector(__p, 1uLL, &v47);
  v32 = operator new();
  v33 = v32;
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  v49 = v48;
  if (*((_QWORD *)&v48 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  ZinIrWeight::ZinIrWeight(v32, (uint64_t *)&v49, (uint64_t **)__p, v17, a2, 1, 1262703187, 0);
  *a3 = v33;
  if (v34)
  {
    v37 = (unint64_t *)&v34->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  *(_QWORD *)&v49 = __p;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void sub_206E26974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;

  if (__p)
    operator delete(__p);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

void ZinIrWeight::FillWeight(int a1@<W0>, int64x2_t *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>, float _S0@<S0>)
{
  uint64_t v8;
  std::__shared_weak_count *v14;
  void **v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  void **v29;
  uint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  size_t v35;
  std::__shared_weak_count *v36;
  void **v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  size_t v43;
  std::__shared_weak_count *v44;
  void **v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  void **v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  uint64_t *v54;
  std::__shared_weak_count *v55;
  void *__p[3];
  void **v57;
  std::__shared_weak_count *v58;

  *a4 = 0;
  if ((a1 & 0xFFFFFFFD) != 4)
  {
    if (a1 == 5)
    {
      v23 = a2->i64[0];
      v24 = a2->i64[1];
      v25 = a2[1].i64[0];
      v26 = a2[1].i64[1];
      v27 = a2[2].i64[0];
      LOBYTE(v51) = ZinF32ToE4M3(_S0, 0, 0);
      std::vector<e4m3_t>::vector(__p, v24 * v23 * v25 * v26 * v27, &v51);
      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<e4m3_t>,std::allocator<ZinIrConstData_specialization<e4m3_t>>,std::vector<e4m3_t>,void>((uint64_t)__p, &v51);
      v29 = v51;
      v28 = v52;
      v54 = (uint64_t *)v51;
      v55 = v52;
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v30 = operator new();
      v57 = v29;
      v58 = v28;
      v54 = 0;
      v55 = 0;
      ZinIrWeight::ZinIrWeight(v30, (uint64_t *)&v57, (uint64_t **)&v51, 5, a2, 0, a3, 0);
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v33 = *a4;
      *a4 = v30;
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
      v57 = (void **)&v51;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v57);
      v20 = v55;
      if (!v55)
        goto LABEL_50;
      v34 = (unint64_t *)&v55->__shared_owners_;
      do
        v22 = __ldaxr(v34);
      while (__stlxr(v22 - 1, v34));
    }
    else if ((a1 & 0xFFFFFFFD) == 1)
    {
      v35 = a2->i64[1] * a2->i64[0] * a2[1].i64[0] * a2[1].i64[1] * a2[2].i64[0];
      LOBYTE(v51) = (int)_S0;
      std::vector<signed char>::vector(__p, v35, &v51);
      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<signed char>,std::allocator<ZinIrConstData_specialization<signed char>>,std::vector<signed char>,void>((uint64_t)__p, &v51);
      v37 = v51;
      v36 = v52;
      v54 = (uint64_t *)v51;
      v55 = v52;
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v38 = operator new();
      v57 = v37;
      v58 = v36;
      v54 = 0;
      v55 = 0;
      ZinIrWeight::ZinIrWeight(v38, (uint64_t *)&v57, (uint64_t **)&v51, 1, a2, 0, a3, 0);
      if (v36)
      {
        v39 = (unint64_t *)&v36->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v41 = *a4;
      *a4 = v38;
      if (v41)
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
      v57 = (void **)&v51;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v57);
      v20 = v55;
      if (!v55)
        goto LABEL_50;
      v42 = (unint64_t *)&v55->__shared_owners_;
      do
        v22 = __ldaxr(v42);
      while (__stlxr(v22 - 1, v42));
    }
    else
    {
      if (a1 != 2)
        ZinAssertImpl("Invalid weight format\n");
      v43 = a2->i64[1] * a2->i64[0] * a2[1].i64[0] * a2[1].i64[1] * a2[2].i64[0];
      LOBYTE(v51) = (int)_S0;
      std::vector<unsigned char>::vector(__p, v43, &v51);
      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)__p, &v51);
      v45 = v51;
      v44 = v52;
      v54 = (uint64_t *)v51;
      v55 = v52;
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v46 = operator new();
      v57 = v45;
      v58 = v44;
      v54 = 0;
      v55 = 0;
      ZinIrWeight::ZinIrWeight(v46, (uint64_t *)&v57, (uint64_t **)&v51, 2, a2, 0, a3, 0);
      if (v44)
      {
        v47 = (unint64_t *)&v44->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v49 = *a4;
      *a4 = v46;
      if (v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
      v57 = (void **)&v51;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v57);
      v20 = v55;
      if (!v55)
        goto LABEL_50;
      v50 = (unint64_t *)&v55->__shared_owners_;
      do
        v22 = __ldaxr(v50);
      while (__stlxr(v22 - 1, v50));
    }
LABEL_48:
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    goto LABEL_50;
  }
  v8 = a2->i64[1] * a2->i64[0] * a2[1].i64[0] * a2[1].i64[1] * a2[2].i64[0];
  __asm { FCVT            H0, S0 }
  LOWORD(v51) = _H0;
  std::vector<half>::vector(__p, v8, &v51);
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)__p, &v51);
  v15 = v51;
  v14 = v52;
  v54 = (uint64_t *)v51;
  v55 = v52;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v16 = operator new();
  v57 = v15;
  v58 = v14;
  v54 = 0;
  v55 = 0;
  ZinIrWeight::ZinIrWeight(v16, (uint64_t *)&v57, (uint64_t **)&v51, 4, a2, 0, a3, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v19 = *a4;
  *a4 = v16;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  v57 = (void **)&v51;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v57);
  v20 = v55;
  if (v55)
  {
    v21 = (unint64_t *)&v55->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    goto LABEL_48;
  }
LABEL_50:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_206E26F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  MEMORY[0x20BD002F8](v19, 0x10B3C400FFB447ELL);
  *(_QWORD *)(v20 - 72) = &a10;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 72));
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  *v18 = 0;
  _Unwind_Resume(a1);
}

void ZinIrWeight::CreatePalettizedWeight(uint64_t a1@<X0>, float **a2@<X1>, unint64_t a3@<X2>, int64x2_t *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int Pow2Log2;
  uint64_t v22;
  int PalettizedKernelFormat;
  double v24;
  int v25;
  int v26;
  uint64_t v27;
  float *v28;
  float *v29;
  std::vector<char>::pointer begin;
  float v31;
  float *v32;
  float *v33;
  float *v34;
  _BYTE *v35;
  float v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char v40;
  char v41;
  void *v42;
  char v43;
  float *v44;
  float *v45;
  std::vector<char>::pointer v46;
  int v47;
  float *v53;
  float *v54;
  float *v55;
  const void *v56;
  _WORD *v57;
  int v58;
  uint64_t v60;
  __int16 *v61;
  __int16 *v62;
  char *v64;
  uint64_t v68;
  float *v69;
  float *v70;
  std::vector<char>::pointer v71;
  float v72;
  float *v73;
  float *v74;
  float *v75;
  _BYTE *v76;
  float v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char v81;
  char v82;
  void *v83;
  char v84;
  uint64_t v85;
  float *v86;
  float *v87;
  std::vector<char>::pointer v88;
  float *v89;
  float *v90;
  float *v91;
  _BYTE *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  unsigned __int8 *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  char *v101;
  char *v102;
  char *v103;
  char v104;
  char v105;
  void *v106;
  char v107;
  char v108;
  char *v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  size_t v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char v119;
  __int128 v120;
  unint64_t *p_shared_owners;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  __int128 v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  char v136;
  char v137;
  void *v138;
  char v139;
  char v140;
  char *v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  size_t v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char v151;
  __int128 v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  __int128 v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  __int16 *v165;
  __int16 *v166;
  char *v167;
  char *v169;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  size_t v179;
  char *v180;
  char *v181;
  char *v182;
  char v183;
  __int128 v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  __int128 v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t *v194;
  unsigned __int8 *v195;
  unsigned __int8 *v196;
  char *v197;
  unsigned __int8 *v198;
  char v199;
  char *v200;
  unint64_t v201;
  char *v202;
  uint64_t v203;
  unint64_t v204;
  size_t v205;
  char *v206;
  char *v207;
  char *v208;
  char *v209;
  char v210;
  __int128 v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  __int128 v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  int v236;
  int v237;
  int v238;
  void *v239;
  char *v240;
  uint64_t v241;
  void *v242;
  _BYTE *v243;
  uint64_t v244;
  void *__p;
  char *v246;
  uint64_t v247;
  void *v248;
  _BYTE *v249;
  uint64_t v250;
  void *v251;
  unsigned __int8 *v252;
  uint64_t v253;
  void *v254;
  unsigned __int8 *v255;
  uint64_t v256;
  void *v257;
  __int16 *v258;
  uint64_t v259;
  void *v260;
  char *v261;
  uint64_t v262;
  __int128 v263;
  _BYTE *v264;
  _BYTE *v265;
  std::vector<char> v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  char *v270;

  if (a3 > a2[1] - *a2)
  {
    v8 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v8)
      ZinIrWeight::CreatePalettizedWeight(v8, v9, v10, v11, v12, v13, v14, v15);
LABEL_25:
    *a7 = 0;
    return;
  }
  Pow2Log2 = ZinRoundUpToNextPow2Log2(a3);
  if (Pow2Log2 > 8)
  {
LABEL_8:
    v22 = -1;
  }
  else
  {
    v22 = Pow2Log2;
    while (1)
    {
      PalettizedKernelFormat = GetPalettizedKernelFormat(v22, a1);
      if (ZinIrHalParameters::IsSupportedPaletteFormat(a5, PalettizedKernelFormat))
        break;
      if (++v22 == 9)
        goto LABEL_8;
    }
  }
  v24 = exp2((double)v22);
  v25 = GetPalettizedKernelFormat(v22, a1);
  if (!v25)
    goto LABEL_25;
  v268 = 0uLL;
  v267 = 0uLL;
  v26 = v25;
  switch((int)a1)
  {
    case 1:
      memset(&v266, 0, sizeof(v266));
      v27 = (char *)a2[1] - (char *)*a2;
      if (v27)
      {
        std::vector<char>::__append(&v266, v27 >> 2);
        v28 = *a2;
        v29 = a2[1];
        if (*a2 != v29)
        {
          begin = v266.__begin_;
          do
          {
            v31 = *v28++;
            *begin++ = (int)v31;
          }
          while (v28 != v29);
        }
      }
      LOBYTE(v269) = 0;
      std::vector<signed char>::vector(&v264, (uint64_t)v24, &v269);
      std::__sort<std::__less<float,float> &,float *>();
      v32 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__equal_to &>(*a2, a2[1]);
      std::vector<float>::resize((uint64_t)a2, v32 - *a2);
      v33 = *a2;
      v34 = a2[1];
      if (*a2 != v34)
      {
        v35 = v264;
        do
        {
          v36 = *v33++;
          *v35++ = (int)v36;
        }
        while (v33 != v34);
      }
      v249 = 0;
      v250 = 0;
      v248 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v248, v264, (uint64_t)v265, v265 - v264);
      __p = 0;
      v246 = 0;
      v247 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v266.__begin_, (uint64_t)v266.__end_, v266.__end_ - v266.__begin_);
      ZinIrWeight::CreateWeightDataBitStream(v26, (uint64_t *)&v269);
      v37 = v269;
      if ((_QWORD)v269)
      {
        (*(void (**)(_QWORD, int64_t))(*(_QWORD *)v269 + 24))(v269, v246 - (_BYTE *)__p);
        v38 = (char *)__p;
        v39 = v246;
        while (v38 != v39)
        {
          v40 = (char)v248;
          v41 = (char)v249;
          v42 = memchr(v248, *v38, v249 - (_BYTE *)v248);
          if (v42)
            v43 = (char)v42;
          else
            v43 = v41;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 16))(v37, (v43 - v40));
          ++v38;
        }
        std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStreamBase,void>(v37, &v263);
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        v97 = 0;
      }
      else
      {
        v269 = 0uLL;
        v270 = 0;
        v101 = (char *)__p;
        v102 = v246;
        if (__p != v246)
        {
          v103 = 0;
          do
          {
            v105 = (char)v248;
            v104 = (char)v249;
            v106 = memchr(v248, *v101, v249 - (_BYTE *)v248);
            if (v106)
              v107 = (char)v106;
            else
              v107 = v104;
            v108 = v107 - v105;
            if (v103 >= v270)
            {
              v110 = v269;
              v111 = &v103[-v269];
              v112 = (uint64_t)&v103[-v269 + 1];
              if (v112 < 0)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v113 = (unint64_t)&v270[-v269];
              if (2 * (uint64_t)&v270[-v269] > (unint64_t)v112)
                v112 = 2 * v113;
              if (v113 >= 0x3FFFFFFFFFFFFFFFLL)
                v114 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v114 = v112;
              if (v114)
                v115 = (char *)operator new(v114);
              else
                v115 = 0;
              v116 = &v111[(_QWORD)v115];
              v117 = &v111[(_QWORD)v115];
              *v117 = v108;
              v109 = v117 + 1;
              if (v103 != (char *)v110)
              {
                v118 = &v103[~v110];
                do
                {
                  v119 = *--v103;
                  (v118--)[(_QWORD)v115] = v119;
                }
                while (v103 != (char *)v110);
                v103 = (char *)v269;
                v116 = v115;
              }
              *(_QWORD *)&v269 = v116;
              *((_QWORD *)&v269 + 1) = v109;
              v270 = &v115[v114];
              if (v103)
                operator delete(v103);
            }
            else
            {
              *v103 = v108;
              v109 = v103 + 1;
            }
            *((_QWORD *)&v269 + 1) = v109;
            ++v101;
            v103 = v109;
          }
          while (v101 != v102);
        }
        std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)&v269, &v263);
        if ((_QWORD)v269)
        {
          *((_QWORD *)&v269 + 1) = v269;
          operator delete((void *)v269);
        }
        v97 = (std::__shared_weak_count *)*((_QWORD *)&v267 + 1);
      }
      v120 = v263;
      v263 = 0uLL;
      v267 = v120;
      if (v97)
      {
        p_shared_owners = (unint64_t *)&v97->__shared_owners_;
        do
          v122 = __ldaxr(p_shared_owners);
        while (__stlxr(v122 - 1, p_shared_owners));
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      v123 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
      if (*((_QWORD *)&v263 + 1))
      {
        v124 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }
      if (__p)
      {
        v246 = (char *)__p;
        operator delete(__p);
      }
      if (v248)
      {
        v249 = v248;
        operator delete(v248);
      }
      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<signed char>,std::allocator<ZinIrConstData_specialization<signed char>>,std::vector<signed char>,void>((uint64_t)&v264, &v269);
      v126 = v269;
      v269 = 0uLL;
      v127 = (std::__shared_weak_count *)*((_QWORD *)&v268 + 1);
      v268 = v126;
      if (v127)
      {
        v128 = (unint64_t *)&v127->__shared_owners_;
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
      v130 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
      if (*((_QWORD *)&v269 + 1))
      {
        v131 = (unint64_t *)(*((_QWORD *)&v269 + 1) + 8);
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
      }
      if (v264)
      {
        v265 = v264;
        operator delete(v264);
      }
      if (v266.__begin_)
      {
        v266.__end_ = v266.__begin_;
        operator delete(v266.__begin_);
      }
      v26 = 7;
      goto LABEL_293;
    case 2:
      memset(&v266, 0, sizeof(v266));
      v68 = (char *)a2[1] - (char *)*a2;
      if (v68)
      {
        std::vector<char>::__append(&v266, v68 >> 2);
        v69 = *a2;
        v70 = a2[1];
        if (*a2 != v70)
        {
          v71 = v266.__begin_;
          do
          {
            v72 = *v69++;
            *v71++ = (int)v72;
          }
          while (v69 != v70);
        }
      }
      LOBYTE(v269) = 0;
      std::vector<unsigned char>::vector(&v264, (uint64_t)v24, &v269);
      std::__sort<std::__less<float,float> &,float *>();
      v73 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__equal_to &>(*a2, a2[1]);
      std::vector<float>::resize((uint64_t)a2, v73 - *a2);
      v74 = *a2;
      v75 = a2[1];
      if (*a2 != v75)
      {
        v76 = v264;
        do
        {
          v77 = *v74++;
          *v76++ = (int)v77;
        }
        while (v74 != v75);
      }
      v243 = 0;
      v244 = 0;
      v242 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v242, v264, (uint64_t)v265, v265 - v264);
      v239 = 0;
      v240 = 0;
      v241 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v239, v266.__begin_, (uint64_t)v266.__end_, v266.__end_ - v266.__begin_);
      ZinIrWeight::CreateWeightDataBitStream(v26, (uint64_t *)&v269);
      v78 = v269;
      if ((_QWORD)v269)
      {
        (*(void (**)(_QWORD, int64_t))(*(_QWORD *)v269 + 24))(v269, v240 - (_BYTE *)v239);
        v79 = (char *)v239;
        v80 = v240;
        while (v79 != v80)
        {
          v82 = (char)v242;
          v81 = (char)v243;
          v83 = memchr(v242, *v79, v243 - (_BYTE *)v242);
          if (v83)
            v84 = (char)v83;
          else
            v84 = v81;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v78 + 16))(v78, (v84 - v82));
          ++v79;
        }
        std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStreamBase,void>(v78, &v263);
        (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
        v98 = 0;
      }
      else
      {
        v236 = a6;
        v269 = 0uLL;
        v270 = 0;
        v133 = (char *)v239;
        v134 = v240;
        if (v239 != v240)
        {
          v135 = 0;
          do
          {
            v137 = (char)v242;
            v136 = (char)v243;
            v138 = memchr(v242, *v133, v243 - (_BYTE *)v242);
            if (v138)
              v139 = (char)v138;
            else
              v139 = v136;
            v140 = v139 - v137;
            if (v135 >= v270)
            {
              v142 = v269;
              v143 = &v135[-v269];
              v144 = (uint64_t)&v135[-v269 + 1];
              if (v144 < 0)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v145 = (unint64_t)&v270[-v269];
              if (2 * (uint64_t)&v270[-v269] > (unint64_t)v144)
                v144 = 2 * v145;
              if (v145 >= 0x3FFFFFFFFFFFFFFFLL)
                v146 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v146 = v144;
              if (v146)
                v147 = (char *)operator new(v146);
              else
                v147 = 0;
              v148 = &v143[(_QWORD)v147];
              v149 = &v143[(_QWORD)v147];
              *v149 = v140;
              v141 = v149 + 1;
              if (v135 != (char *)v142)
              {
                v150 = &v135[~v142];
                do
                {
                  v151 = *--v135;
                  (v150--)[(_QWORD)v147] = v151;
                }
                while (v135 != (char *)v142);
                v135 = (char *)v269;
                v148 = v147;
              }
              *(_QWORD *)&v269 = v148;
              *((_QWORD *)&v269 + 1) = v141;
              v270 = &v147[v146];
              if (v135)
                operator delete(v135);
            }
            else
            {
              *v135 = v140;
              v141 = v135 + 1;
            }
            *((_QWORD *)&v269 + 1) = v141;
            ++v133;
            v135 = v141;
          }
          while (v133 != v134);
        }
        std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)&v269, &v263);
        a6 = v236;
        if ((_QWORD)v269)
        {
          *((_QWORD *)&v269 + 1) = v269;
          operator delete((void *)v269);
        }
        v98 = (std::__shared_weak_count *)*((_QWORD *)&v267 + 1);
      }
      v152 = v263;
      v263 = 0uLL;
      v267 = v152;
      if (v98)
      {
        v153 = (unint64_t *)&v98->__shared_owners_;
        do
          v154 = __ldaxr(v153);
        while (__stlxr(v154 - 1, v153));
        if (!v154)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      v155 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
      if (*((_QWORD *)&v263 + 1))
      {
        v156 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
        do
          v157 = __ldaxr(v156);
        while (__stlxr(v157 - 1, v156));
        if (!v157)
        {
          ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
          std::__shared_weak_count::__release_weak(v155);
        }
      }
      if (v239)
      {
        v240 = (char *)v239;
        operator delete(v239);
      }
      if (v242)
      {
        v243 = v242;
        operator delete(v242);
      }
      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)&v264, &v269);
      v158 = v269;
      v269 = 0uLL;
      v159 = (std::__shared_weak_count *)*((_QWORD *)&v268 + 1);
      v268 = v158;
      if (v159)
      {
        v160 = (unint64_t *)&v159->__shared_owners_;
        do
          v161 = __ldaxr(v160);
        while (__stlxr(v161 - 1, v160));
        if (!v161)
        {
          ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
          std::__shared_weak_count::__release_weak(v159);
        }
      }
      v162 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
      if (!*((_QWORD *)&v269 + 1))
        goto LABEL_289;
      v163 = (unint64_t *)(*((_QWORD *)&v269 + 1) + 8);
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      goto LABEL_287;
    case 4:
      memset(&v266, 0, sizeof(v266));
      std::vector<half>::resize((uint64_t)&v266, a2[1] - *a2);
      v44 = *a2;
      v45 = a2[1];
      if (*a2 != v45)
      {
        v46 = v266.__begin_;
        do
        {
          v47 = *(_DWORD *)v44++;
          _S0 = v47;
          __asm { FCVT            H0, S0 }
          *(_WORD *)v46 = _S0;
          v46 += 2;
        }
        while (v44 != v45);
      }
      LOWORD(v269) = 0;
      std::vector<half>::vector(&v264, (uint64_t)v24, &v269);
      std::__sort<std::__less<float,float> &,float *>();
      v53 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__equal_to &>(*a2, a2[1]);
      std::vector<float>::resize((uint64_t)a2, v53 - *a2);
      v54 = *a2;
      v55 = a2[1];
      v56 = v264;
      if (*a2 != v55)
      {
        v57 = v264;
        do
        {
          v58 = *(_DWORD *)v54++;
          _S0 = v58;
          __asm { FCVT            H0, S0 }
          *v57++ = _S0;
        }
        while (v54 != v55);
      }
      v261 = 0;
      v262 = 0;
      v260 = 0;
      std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(&v260, v56, (uint64_t)v265, (v265 - (_BYTE *)v56) >> 1);
      v257 = 0;
      v258 = 0;
      v259 = 0;
      std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(&v257, v266.__begin_, (uint64_t)v266.__end_, (v266.__end_ - v266.__begin_) >> 1);
      ZinIrWeight::CreateWeightDataBitStream(v26, (uint64_t *)&v269);
      v60 = v269;
      if ((_QWORD)v269)
      {
        (*(void (**)(_QWORD, int64_t))(*(_QWORD *)v269 + 24))(v269, ((char *)v258 - (_BYTE *)v257) >> 1);
        v61 = (__int16 *)v257;
        v62 = v258;
        while (1)
        {
          if (v61 == v62)
          {
            std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStreamBase,void>(v60, &v263);
            (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
            v99 = 0;
            goto LABEL_213;
          }
          if (v260 == v261)
          {
            LODWORD(v64) = (_DWORD)v260;
          }
          else
          {
            _H0 = *v61;
            v64 = (char *)v260;
            do
            {
              _H1 = *(_WORD *)v64;
              __asm
              {
                FCVT            S2, H0
                FCVT            S1, H1
              }
              if (_S1 == _S2)
                goto LABEL_42;
              v64 += 2;
            }
            while (v64 != v261);
            LODWORD(v64) = (_DWORD)v261;
          }
LABEL_42:
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 16))(v60, (((_DWORD)v64 - (_DWORD)v260) >> 1));
          ++v61;
        }
      }
      v237 = a6;
      v269 = 0uLL;
      v270 = 0;
      v165 = (__int16 *)v257;
      v166 = v258;
      if (v257 == v258)
        goto LABEL_210;
      v167 = 0;
      do
      {
        if (v260 == v261)
        {
          v169 = (char *)v260;
        }
        else
        {
          _H0 = *v165;
          v169 = (char *)v260;
          while (1)
          {
            _H1 = *(_WORD *)v169;
            __asm
            {
              FCVT            S2, H0
              FCVT            S1, H1
            }
            if (_S1 == _S2)
              break;
            v169 += 2;
            if (v169 == v261)
            {
              v169 = v261;
              break;
            }
          }
        }
        v173 = v169 - (_BYTE *)v260;
        if (v167 >= v270)
        {
          v175 = v269;
          v176 = &v167[-v269];
          v177 = (uint64_t)&v167[-v269 + 1];
          if (v177 < 0)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v178 = (unint64_t)&v270[-v269];
          if (2 * (uint64_t)&v270[-v269] > (unint64_t)v177)
            v177 = 2 * v178;
          if (v178 >= 0x3FFFFFFFFFFFFFFFLL)
            v179 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v179 = v177;
          if (v179)
            v180 = (char *)operator new(v179);
          else
            v180 = 0;
          v181 = &v176[(_QWORD)v180];
          v176[(_QWORD)v180] = v173 >> 1;
          v174 = (uint64_t)&v176[(_QWORD)v180 + 1];
          if (v167 != (char *)v175)
          {
            v182 = &v167[~v175];
            do
            {
              v183 = *--v167;
              (v182--)[(_QWORD)v180] = v183;
            }
            while (v167 != (char *)v175);
            v167 = (char *)v269;
            v181 = v180;
          }
          *(_QWORD *)&v269 = v181;
          *((_QWORD *)&v269 + 1) = &v176[(_QWORD)v180 + 1];
          v270 = &v180[v179];
          if (v167)
            operator delete(v167);
        }
        else
        {
          *v167 = v173 >> 1;
          v174 = (uint64_t)(v167 + 1);
        }
        *((_QWORD *)&v269 + 1) = v174;
        ++v165;
        v167 = (char *)v174;
      }
      while (v165 != v166);
LABEL_210:
      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)&v269, &v263);
      a6 = v237;
      if ((_QWORD)v269)
      {
        *((_QWORD *)&v269 + 1) = v269;
        operator delete((void *)v269);
      }
      v99 = (std::__shared_weak_count *)*((_QWORD *)&v267 + 1);
LABEL_213:
      v184 = v263;
      v263 = 0uLL;
      v267 = v184;
      if (v99)
      {
        v185 = (unint64_t *)&v99->__shared_owners_;
        do
          v186 = __ldaxr(v185);
        while (__stlxr(v186 - 1, v185));
        if (!v186)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
      v187 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
      if (*((_QWORD *)&v263 + 1))
      {
        v188 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
        do
          v189 = __ldaxr(v188);
        while (__stlxr(v189 - 1, v188));
        if (!v189)
        {
          ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
          std::__shared_weak_count::__release_weak(v187);
        }
      }
      if (v257)
      {
        v258 = (__int16 *)v257;
        operator delete(v257);
      }
      if (v260)
      {
        v261 = (char *)v260;
        operator delete(v260);
      }
      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)&v264, &v269);
      v190 = v269;
      v269 = 0uLL;
      v191 = (std::__shared_weak_count *)*((_QWORD *)&v268 + 1);
      v268 = v190;
      if (v191)
      {
        v192 = (unint64_t *)&v191->__shared_owners_;
        do
          v193 = __ldaxr(v192);
        while (__stlxr(v193 - 1, v192));
        if (!v193)
        {
          ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
          std::__shared_weak_count::__release_weak(v191);
        }
      }
      v162 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
      if (!*((_QWORD *)&v269 + 1))
        goto LABEL_289;
      v194 = (unint64_t *)(*((_QWORD *)&v269 + 1) + 8);
      do
        v164 = __ldaxr(v194);
      while (__stlxr(v164 - 1, v194));
      goto LABEL_287;
    case 5:
      memset(&v266, 0, sizeof(v266));
      v85 = (char *)a2[1] - (char *)*a2;
      if (v85)
      {
        std::vector<char>::__append(&v266, v85 >> 2);
        v86 = *a2;
        v87 = a2[1];
        if (*a2 != v87)
        {
          v88 = v266.__begin_;
          do
            *v88++ = ZinF32ToE4M3(*v86++, 0, 0);
          while (v86 != v87);
        }
      }
      LOBYTE(v269) = ZinF32ToE4M3(0.0, 0, 0);
      std::vector<e4m3_t>::vector(&v264, (uint64_t)v24, &v269);
      std::__sort<std::__less<float,float> &,float *>();
      v89 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__equal_to &>(*a2, a2[1]);
      std::vector<float>::resize((uint64_t)a2, v89 - *a2);
      v90 = *a2;
      v91 = a2[1];
      if (*a2 != v91)
      {
        v92 = v264;
        do
          *v92++ = ZinF32ToE4M3(*v90++, 0, 0);
        while (v90 != v91);
      }
      v255 = 0;
      v256 = 0;
      v254 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v254, v264, (uint64_t)v265, v265 - v264);
      v251 = 0;
      v252 = 0;
      v253 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v251, v266.__begin_, (uint64_t)v266.__end_, v266.__end_ - v266.__begin_);
      ZinIrWeight::CreateWeightDataBitStream(v26, (uint64_t *)&v269);
      v93 = v269;
      if ((_QWORD)v269)
      {
        (*(void (**)(_QWORD, int64_t))(*(_QWORD *)v269 + 24))(v269, v252 - (_BYTE *)v251);
        v94 = (unsigned __int8 *)v251;
        v95 = v252;
        while (1)
        {
          if (v94 == v95)
          {
            std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStreamBase,void>(v93, &v263);
            (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
            v100 = 0;
            goto LABEL_265;
          }
          if (v254 == v255)
          {
            LOBYTE(v96) = (_BYTE)v254;
          }
          else
          {
            v96 = (unsigned __int8 *)v254;
            do
            {
              if (*v96 == *v94)
                goto LABEL_73;
              ++v96;
            }
            while (v96 != v255);
            LOBYTE(v96) = (_BYTE)v255;
          }
LABEL_73:
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v93 + 16))(v93, ((_BYTE)v96 - (_BYTE)v254));
          ++v94;
        }
      }
      v238 = a6;
      v269 = 0uLL;
      v270 = 0;
      v195 = (unsigned __int8 *)v251;
      v196 = v252;
      if (v251 == v252)
        goto LABEL_262;
      v197 = 0;
      break;
    default:
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrWeight::CreatePalettizedWeight(a1);
      goto LABEL_304;
  }
  do
  {
    if (v254 == v255)
    {
      LOBYTE(v198) = (_BYTE)v254;
    }
    else
    {
      v198 = (unsigned __int8 *)v254;
      while (*v198 != *v195)
      {
        if (++v198 == v255)
        {
          LOBYTE(v198) = (_BYTE)v255;
          break;
        }
      }
    }
    v199 = (_BYTE)v198 - (_BYTE)v254;
    if (v197 >= v270)
    {
      v201 = v269;
      v202 = &v197[-v269];
      v203 = (uint64_t)&v197[-v269 + 1];
      if (v203 < 0)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v204 = (unint64_t)&v270[-v269];
      if (2 * (uint64_t)&v270[-v269] > (unint64_t)v203)
        v203 = 2 * v204;
      if (v204 >= 0x3FFFFFFFFFFFFFFFLL)
        v205 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v205 = v203;
      if (v205)
        v206 = (char *)operator new(v205);
      else
        v206 = 0;
      v207 = &v202[(_QWORD)v206];
      v208 = &v202[(_QWORD)v206];
      *v208 = v199;
      v200 = v208 + 1;
      if (v197 != (char *)v201)
      {
        v209 = &v197[~v201];
        do
        {
          v210 = *--v197;
          (v209--)[(_QWORD)v206] = v210;
        }
        while (v197 != (char *)v201);
        v197 = (char *)v269;
        v207 = v206;
      }
      *(_QWORD *)&v269 = v207;
      *((_QWORD *)&v269 + 1) = v200;
      v270 = &v206[v205];
      if (v197)
        operator delete(v197);
    }
    else
    {
      *v197 = v199;
      v200 = v197 + 1;
    }
    *((_QWORD *)&v269 + 1) = v200;
    ++v195;
    v197 = v200;
  }
  while (v195 != v196);
LABEL_262:
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)&v269, &v263);
  a6 = v238;
  if ((_QWORD)v269)
  {
    *((_QWORD *)&v269 + 1) = v269;
    operator delete((void *)v269);
  }
  v100 = (std::__shared_weak_count *)*((_QWORD *)&v267 + 1);
LABEL_265:
  v211 = v263;
  v263 = 0uLL;
  v267 = v211;
  if (v100)
  {
    v212 = (unint64_t *)&v100->__shared_owners_;
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v214 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
  if (*((_QWORD *)&v263 + 1))
  {
    v215 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
  if (v251)
  {
    v252 = (unsigned __int8 *)v251;
    operator delete(v251);
  }
  if (v254)
  {
    v255 = (unsigned __int8 *)v254;
    operator delete(v254);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<e4m3_t>,std::allocator<ZinIrConstData_specialization<e4m3_t>>,std::vector<e4m3_t>,void>((uint64_t)&v264, &v269);
  v217 = v269;
  v269 = 0uLL;
  v218 = (std::__shared_weak_count *)*((_QWORD *)&v268 + 1);
  v268 = v217;
  if (v218)
  {
    v219 = (unint64_t *)&v218->__shared_owners_;
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }
  v162 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
  if (*((_QWORD *)&v269 + 1))
  {
    v221 = (unint64_t *)(*((_QWORD *)&v269 + 1) + 8);
    do
      v164 = __ldaxr(v221);
    while (__stlxr(v164 - 1, v221));
LABEL_287:
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
LABEL_289:
  if (v264)
  {
    v265 = v264;
    operator delete(v264);
  }
  if (v266.__begin_)
  {
    v266.__end_ = v266.__begin_;
    operator delete(v266.__begin_);
  }
LABEL_293:
  v222 = (char *)v267;
  if ((_QWORD)v267 && (_QWORD)v268)
  {
    std::vector<std::shared_ptr<ZinIrConstData>>::vector(&v269, 1uLL, &v268);
    v223 = operator new();
    v224 = v223;
    v225 = (std::__shared_weak_count *)*((_QWORD *)&v267 + 1);
    v266.__begin_ = v222;
    v266.__end_ = (std::vector<char>::pointer)*((_QWORD *)&v267 + 1);
    if (*((_QWORD *)&v267 + 1))
    {
      v226 = (unint64_t *)(*((_QWORD *)&v267 + 1) + 8);
      do
        v227 = __ldxr(v226);
      while (__stxr(v227 + 1, v226));
    }
    ZinIrWeight::ZinIrWeight(v223, (uint64_t *)&v266, (uint64_t **)&v269, v26, a4, 1, a6, 0);
    *a7 = v224;
    if (v225)
    {
      v228 = (unint64_t *)&v225->__shared_owners_;
      do
        v229 = __ldaxr(v228);
      while (__stlxr(v229 - 1, v228));
      if (!v229)
      {
        ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
        std::__shared_weak_count::__release_weak(v225);
      }
    }
    v266.__begin_ = (std::vector<char>::pointer)&v269;
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v266);
  }
  else
  {
LABEL_304:
    *a7 = 0;
  }
  v230 = (std::__shared_weak_count *)*((_QWORD *)&v267 + 1);
  if (*((_QWORD *)&v267 + 1))
  {
    v231 = (unint64_t *)(*((_QWORD *)&v267 + 1) + 8);
    do
      v232 = __ldaxr(v231);
    while (__stlxr(v232 - 1, v231));
    if (!v232)
    {
      ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
      std::__shared_weak_count::__release_weak(v230);
    }
  }
  v233 = (std::__shared_weak_count *)*((_QWORD *)&v268 + 1);
  if (*((_QWORD *)&v268 + 1))
  {
    v234 = (unint64_t *)(*((_QWORD *)&v268 + 1) + 8);
    do
      v235 = __ldaxr(v234);
    while (__stlxr(v235 - 1, v234));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
}

void sub_206E2825C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  void *v37;
  void *v38;
  void *v39;

  v37 = *(void **)(v35 - 144);
  if (v37)
  {
    *(_QWORD *)(v35 - 136) = v37;
    operator delete(v37);
  }
  if (__p)
    operator delete(__p);
  if (a28)
    operator delete(a28);
  v38 = *(void **)(v35 - 224);
  if (v38)
  {
    *(_QWORD *)(v35 - 216) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v35 - 200);
  if (v39)
  {
    *(_QWORD *)(v35 - 192) = v39;
    operator delete(v39);
  }
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v35 - 176);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v35 - 160);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::DePalettizeWeightData<signed char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char Data;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;
  _QWORD *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31[8];
  uint64_t v32;
  uint64_t v33;
  int v34;

  v6 = *(_DWORD *)(a1 + 8);
  v34 = 0;
  v33 = 0;
  result = ZinKernelFormatGetBitDepth(v6, &v33);
  if ((_DWORD)result || (result = ZinKernelFormatGetPaletteFormat(v6, &v34), (_DWORD)result))
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    if (a2 && (ZinKernelFormatIsQuantizationCompatible(*(_DWORD *)(a1 + 8)) & 1) == 0)
      ZinAssertImpl("incompatible format with zero point");
    details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v31, *(_QWORD *)(a1 + 64) * *(_QWORD *)(a1 + 56) * *(_QWORD *)(a1 + 72) * *(_QWORD *)(a1 + 80) * *(_QWORD *)(a1 + 88));
    v8 = *(_QWORD *)(a1 + 56);
    if (v8 >= 1)
    {
      v9 = 0;
      v10 = 0;
      v11 = *(_QWORD *)(a1 + 64);
      v26 = a3;
      do
      {
        if (v11 >= 1)
        {
          v12 = 0;
          v13 = *(_QWORD *)(a1 + 72);
          do
          {
            if (v13 >= 1)
            {
              v14 = 0;
              v15 = *(_QWORD *)(a1 + 80);
              do
              {
                if (v15 >= 1)
                {
                  v16 = 0;
                  v17 = *(_QWORD *)(a1 + 88);
                  do
                  {
                    if (v17 >= 1)
                    {
                      v18 = 0;
                      while (2)
                      {
                        switch(v33)
                        {
                          case 1:
                            *(_QWORD *)&v27 = v9;
                            *((_QWORD *)&v27 + 1) = v12;
                            v28 = v14;
                            v29 = v16;
                            v30 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>(a1);
                            goto LABEL_24;
                          case 2:
                            *(_QWORD *)&v27 = v9;
                            *((_QWORD *)&v27 + 1) = v12;
                            v28 = v14;
                            v29 = v16;
                            v30 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>(a1);
                            goto LABEL_24;
                          case 3:
                            *(_QWORD *)&v27 = v9;
                            *((_QWORD *)&v27 + 1) = v12;
                            v28 = v14;
                            v29 = v16;
                            v30 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>(a1);
                            goto LABEL_24;
                          case 4:
                            *(_QWORD *)&v27 = v9;
                            *((_QWORD *)&v27 + 1) = v12;
                            v28 = v14;
                            v29 = v16;
                            v30 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>(a1);
                            goto LABEL_24;
                          case 6:
                            *(_QWORD *)&v27 = v9;
                            *((_QWORD *)&v27 + 1) = v12;
                            v28 = v14;
                            v29 = v16;
                            v30 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>(a1);
                            goto LABEL_24;
                          case 8:
                            *(_QWORD *)&v27 = v9;
                            *((_QWORD *)&v27 + 1) = v12;
                            v28 = v14;
                            v29 = v16;
                            v30 = v18;
                            ZinIrWeightBase::GetAt<unsigned char>(a1);
LABEL_24:
                            v19 = *(uint64_t **)(a1 + 280);
                            v20 = *(_QWORD *)(a1 + 288) - (_QWORD)v19;
                            if ((unint64_t)v20 >= 0x11)
                            {
                              if (v9 >= (unint64_t)(v20 >> 4))
                                ZinAssertImpl("GetPaletteData: out of bound access.");
                              v19 += 2 * v9;
                            }
                            Data = ZinIrConstData::GetDataAt<signed char>(*v19);
                            if (a2)
                            {
                              v22 = *(_QWORD *)(a1 + 136);
                              *(_QWORD *)&v27 = v9;
                              *((_QWORD *)&v27 + 1) = v12;
                              v28 = v14;
                              v29 = v16;
                              v30 = v18;
                              v23 = (**(uint64_t (***)(uint64_t, __int128 *))a1)(a1, &v27);
                              if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 168))(v22, v23))
                                Data = ZinIrVector::GetAt<signed char>(a2, v9);
                            }
                            v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                     + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                            v25 = (char *)(v32 + v10 + v18);
                            if (!v24)
                              v25 = v31;
                            *v25 = Data;
                            ++v18;
                            v17 = *(_QWORD *)(a1 + 88);
                            if (v18 < v17)
                              continue;
                            v15 = *(_QWORD *)(a1 + 80);
                            v10 += v18;
                            break;
                          default:
                            *v26 = 0;
                            v26[1] = 0;
                            return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v31);
                        }
                        break;
                      }
                    }
                    ++v16;
                  }
                  while (v16 < v15);
                  v13 = *(_QWORD *)(a1 + 72);
                }
                ++v14;
              }
              while (v14 < v13);
              v11 = *(_QWORD *)(a1 + 64);
            }
            ++v12;
          }
          while (v12 < v11);
          v8 = *(_QWORD *)(a1 + 56);
          a3 = v26;
        }
        ++v9;
      }
      while (v9 < v8);
    }
    std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<signed char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<signed char>>,ZinIrScratchBuffer<signed char>,void>((uint64_t)v31, &v27);
    *(_OWORD *)a3 = v27;
    return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v31);
  }
  return result;
}

void sub_206E28828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::DePalettizeWeightData<unsigned char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char Data;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;
  _QWORD *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31[8];
  uint64_t v32;
  uint64_t v33;
  int v34;

  v6 = *(_DWORD *)(a1 + 8);
  v34 = 0;
  v33 = 0;
  result = ZinKernelFormatGetBitDepth(v6, &v33);
  if ((_DWORD)result || (result = ZinKernelFormatGetPaletteFormat(v6, &v34), (_DWORD)result))
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    if (a2 && (ZinKernelFormatIsQuantizationCompatible(*(_DWORD *)(a1 + 8)) & 1) == 0)
      ZinAssertImpl("incompatible format with zero point");
    details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v31, *(_QWORD *)(a1 + 64) * *(_QWORD *)(a1 + 56) * *(_QWORD *)(a1 + 72) * *(_QWORD *)(a1 + 80) * *(_QWORD *)(a1 + 88));
    v8 = *(_QWORD *)(a1 + 56);
    if (v8 >= 1)
    {
      v9 = 0;
      v10 = 0;
      v11 = *(_QWORD *)(a1 + 64);
      v26 = a3;
      do
      {
        if (v11 >= 1)
        {
          v12 = 0;
          v13 = *(_QWORD *)(a1 + 72);
          do
          {
            if (v13 >= 1)
            {
              v14 = 0;
              v15 = *(_QWORD *)(a1 + 80);
              do
              {
                if (v15 >= 1)
                {
                  v16 = 0;
                  v17 = *(_QWORD *)(a1 + 88);
                  do
                  {
                    if (v17 >= 1)
                    {
                      v18 = 0;
                      while (2)
                      {
                        switch(v33)
                        {
                          case 1:
                            *(_QWORD *)&v27 = v9;
                            *((_QWORD *)&v27 + 1) = v12;
                            v28 = v14;
                            v29 = v16;
                            v30 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>(a1);
                            goto LABEL_24;
                          case 2:
                            *(_QWORD *)&v27 = v9;
                            *((_QWORD *)&v27 + 1) = v12;
                            v28 = v14;
                            v29 = v16;
                            v30 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>(a1);
                            goto LABEL_24;
                          case 3:
                            *(_QWORD *)&v27 = v9;
                            *((_QWORD *)&v27 + 1) = v12;
                            v28 = v14;
                            v29 = v16;
                            v30 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>(a1);
                            goto LABEL_24;
                          case 4:
                            *(_QWORD *)&v27 = v9;
                            *((_QWORD *)&v27 + 1) = v12;
                            v28 = v14;
                            v29 = v16;
                            v30 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>(a1);
                            goto LABEL_24;
                          case 6:
                            *(_QWORD *)&v27 = v9;
                            *((_QWORD *)&v27 + 1) = v12;
                            v28 = v14;
                            v29 = v16;
                            v30 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>(a1);
                            goto LABEL_24;
                          case 8:
                            *(_QWORD *)&v27 = v9;
                            *((_QWORD *)&v27 + 1) = v12;
                            v28 = v14;
                            v29 = v16;
                            v30 = v18;
                            ZinIrWeightBase::GetAt<unsigned char>(a1);
LABEL_24:
                            v19 = *(uint64_t **)(a1 + 280);
                            v20 = *(_QWORD *)(a1 + 288) - (_QWORD)v19;
                            if ((unint64_t)v20 >= 0x11)
                            {
                              if (v9 >= (unint64_t)(v20 >> 4))
                                ZinAssertImpl("GetPaletteData: out of bound access.");
                              v19 += 2 * v9;
                            }
                            Data = ZinIrConstData::GetDataAt<unsigned char>(*v19);
                            if (a2)
                            {
                              v22 = *(_QWORD *)(a1 + 136);
                              *(_QWORD *)&v27 = v9;
                              *((_QWORD *)&v27 + 1) = v12;
                              v28 = v14;
                              v29 = v16;
                              v30 = v18;
                              v23 = (**(uint64_t (***)(uint64_t, __int128 *))a1)(a1, &v27);
                              if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 168))(v22, v23))
                                Data = ZinIrVector::GetAt<unsigned char>(a2, v9);
                            }
                            v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                     + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                            v25 = (char *)(v32 + v10 + v18);
                            if (!v24)
                              v25 = v31;
                            *v25 = Data;
                            ++v18;
                            v17 = *(_QWORD *)(a1 + 88);
                            if (v18 < v17)
                              continue;
                            v15 = *(_QWORD *)(a1 + 80);
                            v10 += v18;
                            break;
                          default:
                            *v26 = 0;
                            v26[1] = 0;
                            return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v31);
                        }
                        break;
                      }
                    }
                    ++v16;
                  }
                  while (v16 < v15);
                  v13 = *(_QWORD *)(a1 + 72);
                }
                ++v14;
              }
              while (v14 < v13);
              v11 = *(_QWORD *)(a1 + 64);
            }
            ++v12;
          }
          while (v12 < v11);
          v8 = *(_QWORD *)(a1 + 56);
          a3 = v26;
        }
        ++v9;
      }
      while (v9 < v8);
    }
    std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<unsigned char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<unsigned char>>,ZinIrScratchBuffer<unsigned char>,void>((uint64_t)v31, &v27);
    *(_OWORD *)a3 = v27;
    return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v31);
  }
  return result;
}

void sub_206E28BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::DePalettizeWeightData<e4m3_t>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char Data;
  int v22;
  char *v23;
  _QWORD *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29[8];
  uint64_t v30;
  uint64_t v31;
  int v32;

  v6 = *(_DWORD *)(a1 + 8);
  v32 = 0;
  v31 = 0;
  result = ZinKernelFormatGetBitDepth(v6, &v31);
  if ((_DWORD)result || (result = ZinKernelFormatGetPaletteFormat(v6, &v32), (_DWORD)result))
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    if (a2 && (ZinKernelFormatIsQuantizationCompatible(*(_DWORD *)(a1 + 8)) & 1) == 0)
      ZinAssertImpl("incompatible format with zero point");
    details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v29, *(_QWORD *)(a1 + 64) * *(_QWORD *)(a1 + 56) * *(_QWORD *)(a1 + 72) * *(_QWORD *)(a1 + 80) * *(_QWORD *)(a1 + 88));
    v8 = *(_QWORD *)(a1 + 56);
    if (v8 >= 1)
    {
      v9 = 0;
      v10 = 0;
      v11 = *(_QWORD *)(a1 + 64);
      v24 = a3;
      do
      {
        if (v11 >= 1)
        {
          v12 = 0;
          v13 = *(_QWORD *)(a1 + 72);
          do
          {
            if (v13 >= 1)
            {
              v14 = 0;
              v15 = *(_QWORD *)(a1 + 80);
              do
              {
                if (v15 >= 1)
                {
                  v16 = 0;
                  v17 = *(_QWORD *)(a1 + 88);
                  do
                  {
                    if (v17 >= 1)
                    {
                      v18 = 0;
                      while (2)
                      {
                        switch(v31)
                        {
                          case 1:
                            *(_QWORD *)&v25 = v9;
                            *((_QWORD *)&v25 + 1) = v12;
                            v26 = v14;
                            v27 = v16;
                            v28 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>(a1);
                            goto LABEL_24;
                          case 2:
                            *(_QWORD *)&v25 = v9;
                            *((_QWORD *)&v25 + 1) = v12;
                            v26 = v14;
                            v27 = v16;
                            v28 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>(a1);
                            goto LABEL_24;
                          case 3:
                            *(_QWORD *)&v25 = v9;
                            *((_QWORD *)&v25 + 1) = v12;
                            v26 = v14;
                            v27 = v16;
                            v28 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>(a1);
                            goto LABEL_24;
                          case 4:
                            *(_QWORD *)&v25 = v9;
                            *((_QWORD *)&v25 + 1) = v12;
                            v26 = v14;
                            v27 = v16;
                            v28 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>(a1);
                            goto LABEL_24;
                          case 6:
                            *(_QWORD *)&v25 = v9;
                            *((_QWORD *)&v25 + 1) = v12;
                            v26 = v14;
                            v27 = v16;
                            v28 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>(a1);
                            goto LABEL_24;
                          case 8:
                            *(_QWORD *)&v25 = v9;
                            *((_QWORD *)&v25 + 1) = v12;
                            v26 = v14;
                            v27 = v16;
                            v28 = v18;
                            ZinIrWeightBase::GetAt<unsigned char>(a1);
LABEL_24:
                            v19 = *(uint64_t **)(a1 + 280);
                            v20 = *(_QWORD *)(a1 + 288) - (_QWORD)v19;
                            if ((unint64_t)v20 >= 0x11)
                            {
                              if (v9 >= v20 >> 4)
                                ZinAssertImpl("GetPaletteData: out of bound access.");
                              v19 += 2 * v9;
                            }
                            Data = ZinIrConstData::GetDataAt<e4m3_t>(*v19);
                            v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                     + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                            v23 = (char *)(v30 + v10 + v18);
                            if (!v22)
                              v23 = v29;
                            *v23 = Data;
                            ++v18;
                            v17 = *(_QWORD *)(a1 + 88);
                            if (v18 < v17)
                              continue;
                            v15 = *(_QWORD *)(a1 + 80);
                            v10 += v18;
                            break;
                          default:
                            *v24 = 0;
                            v24[1] = 0;
                            return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v29);
                        }
                        break;
                      }
                    }
                    ++v16;
                  }
                  while (v16 < v15);
                  v13 = *(_QWORD *)(a1 + 72);
                }
                ++v14;
              }
              while (v14 < v13);
              v11 = *(_QWORD *)(a1 + 64);
            }
            ++v12;
          }
          while (v12 < v11);
          v8 = *(_QWORD *)(a1 + 56);
          a3 = v24;
        }
        ++v9;
      }
      while ((uint64_t)v9 < v8);
    }
    std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>,ZinIrScratchBuffer<e4m3_t>,void>((uint64_t)v29, &v25);
    *(_OWORD *)a3 = v25;
    return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v29);
  }
  return result;
}

void sub_206E28EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::DePalettizeWeightData<half>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  int v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32[8];
  uint64_t v33;
  uint64_t v34;
  int v35;

  v6 = *(_DWORD *)(a1 + 8);
  v35 = 0;
  v34 = 0;
  result = ZinKernelFormatGetBitDepth(v6, &v34);
  if ((_DWORD)result || (result = ZinKernelFormatGetPaletteFormat(v6, &v35), (_DWORD)result))
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    if (a2 && (ZinKernelFormatIsQuantizationCompatible(*(_DWORD *)(a1 + 8)) & 1) == 0)
      ZinAssertImpl("incompatible format with zero point");
    details::ZinIrMappedData_Impl<half>::ZinIrMappedData_Impl((uint64_t)v32, *(_QWORD *)(a1 + 64) * *(_QWORD *)(a1 + 56) * *(_QWORD *)(a1 + 72) * *(_QWORD *)(a1 + 80) * *(_QWORD *)(a1 + 88));
    v8 = *(_QWORD *)(a1 + 56);
    if (v8 >= 1)
    {
      v9 = 0;
      v10 = 0;
      v11 = *(_QWORD *)(a1 + 64);
      v26 = a3;
      do
      {
        if (v11 >= 1)
        {
          v12 = 0;
          v13 = *(_QWORD *)(a1 + 72);
          do
          {
            if (v13 >= 1)
            {
              v14 = 0;
              v15 = *(_QWORD *)(a1 + 80);
              do
              {
                if (v15 >= 1)
                {
                  v16 = 0;
                  v17 = *(_QWORD *)(a1 + 88);
                  do
                  {
                    if (v17 >= 1)
                    {
                      v18 = 0;
                      v27 = v10;
                      v19 = 2 * v10;
                      while (2)
                      {
                        switch(v34)
                        {
                          case 1:
                            *(_QWORD *)&v28 = v9;
                            *((_QWORD *)&v28 + 1) = v12;
                            v29 = v14;
                            v30 = v16;
                            v31 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>(a1);
                            goto LABEL_23;
                          case 2:
                            *(_QWORD *)&v28 = v9;
                            *((_QWORD *)&v28 + 1) = v12;
                            v29 = v14;
                            v30 = v16;
                            v31 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>(a1);
                            goto LABEL_23;
                          case 3:
                            *(_QWORD *)&v28 = v9;
                            *((_QWORD *)&v28 + 1) = v12;
                            v29 = v14;
                            v30 = v16;
                            v31 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>(a1);
                            goto LABEL_23;
                          case 4:
                            *(_QWORD *)&v28 = v9;
                            *((_QWORD *)&v28 + 1) = v12;
                            v29 = v14;
                            v30 = v16;
                            v31 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>(a1);
                            goto LABEL_23;
                          case 6:
                            *(_QWORD *)&v28 = v9;
                            *((_QWORD *)&v28 + 1) = v12;
                            v29 = v14;
                            v30 = v16;
                            v31 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>(a1);
                            goto LABEL_23;
                          case 8:
                            *(_QWORD *)&v28 = v9;
                            *((_QWORD *)&v28 + 1) = v12;
                            v29 = v14;
                            v30 = v16;
                            v31 = v18;
                            ZinIrWeightBase::GetAt<unsigned char>(a1);
LABEL_23:
                            v20 = *(uint64_t **)(a1 + 280);
                            v21 = *(_QWORD *)(a1 + 288) - (_QWORD)v20;
                            if ((unint64_t)v21 >= 0x11)
                            {
                              if (v9 >= v21 >> 4)
                                ZinAssertImpl("GetPaletteData: out of bound access.");
                              v20 += 2 * v9;
                            }
                            ZinIrConstData::GetDataAt<half>(*v20);
                            v23 = v22;
                            v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                     + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                            v25 = (char *)(v33 + v19);
                            if (!v24)
                              v25 = v32;
                            *(_WORD *)v25 = v23;
                            ++v18;
                            v17 = *(_QWORD *)(a1 + 88);
                            v19 += 2;
                            if (v18 < v17)
                              continue;
                            v15 = *(_QWORD *)(a1 + 80);
                            v10 = v27 + v18;
                            break;
                          default:
                            *v26 = 0;
                            v26[1] = 0;
                            return details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)v32);
                        }
                        break;
                      }
                    }
                    ++v16;
                  }
                  while (v16 < v15);
                  v13 = *(_QWORD *)(a1 + 72);
                }
                ++v14;
              }
              while (v14 < v13);
              v11 = *(_QWORD *)(a1 + 64);
            }
            ++v12;
          }
          while (v12 < v11);
          v8 = *(_QWORD *)(a1 + 56);
          a3 = v26;
        }
        ++v9;
      }
      while ((uint64_t)v9 < v8);
    }
    std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<half>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<half>>,ZinIrScratchBuffer<half>,void>((uint64_t)v32, &v28);
    *(_OWORD *)a3 = v28;
    return details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)v32);
  }
  return result;
}

void sub_206E29228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

void ZinIrWeight::CreateWeightWithNewPalette(uint64_t a1@<X0>, _QWORD *a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t *v19;
  void **v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26[3];
  int v27;
  void **v28[3];

  if (!ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8))
    || (v8 = *(_QWORD **)(a1 + 280), *(_QWORD *)(a1 + 288) - (_QWORD)v8 != 16))
  {
    ZinAssertImpl("Create weight with new palette is not supported for per-channel palettized kernels yet.");
  }
  if (!*a2
    || (v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 24))(*v8),
        v9 != (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2)))
  {
    ZinAssertImpl("wrong palette");
  }
  if (a3 > 5
    || ((1 << a3) & 0x36) == 0
    || (v27 = 0, ZinKernelFormatGetPaletteFormat(*(_DWORD *)(a1 + 8), &v27)))
  {
    ZinAssertImpl("wrong format");
  }
  v10 = *(_DWORD *)(a1 + 8);
  if (v27 != a3)
  {
    switch(v10)
    {
      case 7:
      case 8:
      case 9:
      case 10:
        v11 = a3 - 1;
        if (a3 == 1)
          v12 = 7;
        else
          v12 = 8;
        v13 = a3 == 5;
        v14 = 9;
        goto LABEL_30;
      case 11:
      case 12:
      case 13:
      case 14:
        v11 = a3 - 1;
        if (a3 == 1)
          v12 = 11;
        else
          v12 = 12;
        v13 = a3 == 5;
        v14 = 13;
        goto LABEL_30;
      case 15:
      case 16:
      case 17:
      case 18:
        v11 = a3 - 1;
        if (a3 == 1)
          v12 = 15;
        else
          v12 = 16;
        v13 = a3 == 5;
        v14 = 17;
        goto LABEL_30;
      case 19:
      case 20:
      case 21:
      case 22:
        v11 = a3 - 1;
        if (a3 == 1)
          v12 = 19;
        else
          v12 = 20;
        v13 = a3 == 5;
        v14 = 21;
        goto LABEL_30;
      case 23:
      case 24:
      case 25:
      case 26:
        v11 = a3 - 1;
        if (a3 == 1)
          v12 = 23;
        else
          v12 = 24;
        v13 = a3 == 5;
        v14 = 25;
LABEL_30:
        if (v13)
          ++v14;
        if (v11 >= 2)
          v10 = v14;
        else
          v10 = v12;
        if (((1 << a3) & 0x36) != 0)
          break;
        goto LABEL_47;
      case 27:
        if (a3 != 4)
          goto LABEL_47;
        v10 = 25;
        break;
      default:
LABEL_47:
        *a4 = 0;
        return;
    }
  }
  std::vector<std::shared_ptr<ZinIrConstData>>::vector(v26, 1uLL, a2);
  v15 = *(_QWORD *)(a1 + 304);
  v16 = *(_DWORD *)(a1 + 156);
  v17 = operator new();
  v18 = v17;
  v19 = (int64x2_t *)(a1 + 56);
  v20 = *(void ***)(a1 + 136);
  v21 = *(std::__shared_weak_count **)(a1 + 144);
  v28[0] = v20;
  v28[1] = (void **)&v21->__vftable;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  ZinIrWeight::ZinIrWeight(v17, (uint64_t *)v28, v26, v10, v19, v15, v16, 0);
  *a4 = v18;
  if (v21)
  {
    v24 = (unint64_t *)&v21->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v28[0] = (void **)v26;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v28);
}

void sub_206E294E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void **a16)
{
  uint64_t v16;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  MEMORY[0x20BD002F8](v16, 0x10B3C400FFB447ELL);
  a16 = (void **)&a10;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

void ZinIrWeight::PadWeight(uint64_t a1@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  int v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64x2_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64x2_t v43;
  uint64_t v44[2];

  v6 = *(_DWORD *)(a1 + 8);
  v43 = 0uLL;
  if ((v6 - 7) < 0x15)
  {
    v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v7)
      ZinIrWeight::PadWeight(v7, v8, v9, v10, v11, v12, v13, v14);
LABEL_4:
    *a5 = 0;
    return;
  }
  if (v6 <= 27)
  {
    switch(v6)
    {
      case 1:
        goto LABEL_15;
      case 2:
        goto LABEL_17;
      case 4:
        goto LABEL_13;
      case 5:
        ZinIrWeight::PadWeightDataAndChangeLayout<e4m3_t>(a1, a2, a3, a4, &v39);
        v18 = (std::__shared_weak_count *)v39.i64[1];
        v19 = v39.i64[0];
        v43 = v39;
        v20 = 5;
        if (!v39.i64[0])
          goto LABEL_29;
        goto LABEL_18;
      case 6:
        ZinIrWeight::PadWeightDataAndChangeLayout<float>(a1, a2, a3, a4, &v39);
        v18 = (std::__shared_weak_count *)v39.i64[1];
        v19 = v39.i64[0];
        v43 = v39;
        v20 = 6;
        if (!v39.i64[0])
          goto LABEL_29;
        goto LABEL_18;
      default:
        goto LABEL_34;
    }
  }
  switch(v6)
  {
    case 28:
LABEL_15:
      ZinIrWeight::PadWeightDataAndChangeLayout<signed char>(a1, a2, a3, a4, &v39);
      v18 = (std::__shared_weak_count *)v39.i64[1];
      v19 = v39.i64[0];
      v43 = v39;
      v20 = 1;
      if (!v39.i64[0])
        goto LABEL_29;
      break;
    case 29:
LABEL_17:
      ZinIrWeight::PadWeightDataAndChangeLayout<unsigned char>(a1, a2, a3, a4, &v39);
      v18 = (std::__shared_weak_count *)v39.i64[1];
      v19 = v39.i64[0];
      v43 = v39;
      v20 = 2;
      if (!v39.i64[0])
        goto LABEL_29;
      break;
    case 30:
LABEL_13:
      ZinIrWeight::PadWeightDataAndChangeLayout<half>(a1, a2, a3, a4, &v39);
      v18 = (std::__shared_weak_count *)v39.i64[1];
      v19 = v39.i64[0];
      v43 = v39;
      v20 = 4;
      if (!v39.i64[0])
      {
LABEL_29:
        *a5 = 0;
        if (!v18)
          return;
        goto LABEL_30;
      }
      break;
    default:
LABEL_34:
      v31 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v31)
        ZinIrWeight::PadWeight(v31, v32, v33, v34, v35, v36, v37, v38);
      goto LABEL_4;
  }
LABEL_18:
  v21 = *(_QWORD *)(a1 + 80) + *a2 + a2[1];
  v22 = *(_QWORD *)(a1 + 72) + a2[2] + a2[3];
  v39 = *(int64x2_t *)(a1 + 56);
  v40 = v22;
  v41 = v21;
  v42 = *(_QWORD *)(a1 + 88) + a2[4] + a2[5];
  v23 = operator new();
  v24 = v23;
  v44[0] = v19;
  v44[1] = (uint64_t)v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
  }
  ZinIrWeight::ZinIrWeight(v23, v44, (uint64_t **)(a1 + 280), v20, &v39, 0, a3, 0);
  *a5 = v24;
  if (v18)
  {
    v27 = (unint64_t *)&v18->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v18 = (std::__shared_weak_count *)v43.i64[1];
  if (v43.i64[1])
  {
LABEL_30:
    v29 = (unint64_t *)&v18->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_206E297E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::PadWeightDataAndChangeLayout<float>@<X0>(uint64_t a1@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t j;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  _DWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  _DWORD *v98;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v108;
  __int128 v109;
  _BYTE v110[8];
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;

  v115 = 0;
  v113 = 0u;
  v114 = 0u;
  v8 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v9 = *a4;
  if (*a4 && v8 != *(_QWORD *)(v9 + 56))
    ZinAssertImpl("kernel zero point must be per-cout");
  v104 = *(_QWORD *)(a1 + 88) + a2[4] + a2[5];
  v105 = *(_QWORD *)(a1 + 80) + *a2 + a2[1];
  v108 = v104 * v105 * (*(_QWORD *)(a1 + 72) + a2[2] + a2[3]);
  v102 = v108 * v7;
  details::ZinIrMappedData_Impl<float>::ZinIrMappedData_Impl((uint64_t)v110, v108 * v7 * v8);
  if (v112 != v111)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      if (v9)
      {
        if (a3 == 1145261902)
          v12 = v11 / v108 % v8;
        else
          v12 = v11 / v102;
        ZinIrVector::GetAt<float>(*a4, (int)v12);
        v14 = v15;
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      }
      else
      {
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
        v14 = 0;
      }
      v16 = v111;
      v17 = (_DWORD *)(v111 + v10);
      if (!v13)
        v17 = v110;
      *v17 = v14;
      ++v11;
      v10 += 4;
    }
    while (v11 < (unint64_t)((v112 - v16) >> 2));
  }
  v18 = (_QWORD *)a1;
  v101 = v8;
  if (*(_DWORD *)(a1 + 156) == a3)
  {
    *(_QWORD *)&v113 = 0;
    v19 = *(_QWORD *)(a1 + 56);
    if (a3 == 1145261902)
    {
      if (v19 >= 1)
      {
        v20 = 0;
        v21 = *(_QWORD *)(a1 + 64);
        do
        {
          *((_QWORD *)&v113 + 1) = 0;
          if (v21 >= 1)
          {
            for (i = 0; i < v21; *((_QWORD *)&v113 + 1) = i)
            {
              v23 = v18[9];
              v24 = v23 < 1;
              v25 = v23 - 1;
              *(_QWORD *)&v114 = v25;
              if (!v24)
              {
                do
                {
                  v26 = v18[10];
                  v24 = v26 < 1;
                  v27 = v26 - 1;
                  *((_QWORD *)&v114 + 1) = v27;
                  if (!v24)
                  {
                    do
                    {
                      v28 = v18[11];
                      v29 = v28 - 1;
                      v115 = v28 - 1;
                      if (v28 >= 1)
                      {
                        do
                        {
                          v30 = v113;
                          v31 = a2[3];
                          v32 = v114;
                          v33 = a2[1];
                          v34 = a2[5];
                          ZinIrWeightBase::GetAt<float>((uint64_t)v18);
                          v36 = v35;
                          v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          v38 = (_DWORD *)(v111
                                         + 4
                                         * (v29
                                          + (v30 + *((_QWORD *)&v30 + 1) * v101) * v108
                                          + v34
                                          + (*((_QWORD *)&v32 + 1) + v33 + (v32 + v31) * v105) * v104));
                          if (!v37)
                            v38 = v110;
                          *v38 = v36;
                          v39 = v115;
                          v29 = --v115;
                          v18 = (_QWORD *)a1;
                        }
                        while (v39 > 0);
                        v27 = *((_QWORD *)&v114 + 1);
                      }
                      *((_QWORD *)&v114 + 1) = v27 - 1;
                      v24 = v27-- <= 0;
                    }
                    while (!v24);
                    v25 = v114;
                  }
                  *(_QWORD *)&v114 = v25 - 1;
                  v24 = v25-- <= 0;
                }
                while (!v24);
                i = *((_QWORD *)&v113 + 1);
                v21 = v18[8];
              }
              ++i;
            }
            v20 = v113;
            v19 = v18[7];
          }
          *(_QWORD *)&v113 = ++v20;
        }
        while (v20 < v19);
      }
    }
    else if (v19 >= 1)
    {
      v61 = 0;
      v62 = *(_QWORD *)(a1 + 64);
      do
      {
        *((_QWORD *)&v113 + 1) = 0;
        if (v62 >= 1)
        {
          v63 = 0;
          v64 = v18[9];
          do
          {
            *(_QWORD *)&v114 = 0;
            if (v64 >= 1)
            {
              v65 = 0;
              v66 = v18[10];
              do
              {
                *((_QWORD *)&v114 + 1) = 0;
                if (v66 >= 1)
                {
                  v67 = 0;
                  v68 = v18[11];
                  do
                  {
                    v115 = 0;
                    if (v68 >= 1)
                    {
                      v69 = 0;
                      do
                      {
                        v70 = v113;
                        v71 = a2[2];
                        v72 = v114;
                        v73 = *a2;
                        v74 = a2[4];
                        ZinIrWeightBase::GetAt<float>((uint64_t)v18);
                        v76 = v75;
                        v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        v78 = (_DWORD *)(v111
                                       + 4
                                       * (v69
                                        + *((_QWORD *)&v70 + 1) * v108
                                        + v70 * v102
                                        + v74
                                        + (*((_QWORD *)&v72 + 1) + v73 + (v72 + v71) * v105) * v104));
                        if (!v77)
                          v78 = v110;
                        *v78 = v76;
                        v69 = v115 + 1;
                        v115 = v69;
                        v18 = (_QWORD *)a1;
                        v68 = *(_QWORD *)(a1 + 88);
                      }
                      while (v69 < v68);
                      v67 = *((_QWORD *)&v114 + 1);
                      v66 = *(_QWORD *)(a1 + 80);
                    }
                    *((_QWORD *)&v114 + 1) = ++v67;
                  }
                  while (v67 < v66);
                  v65 = v114;
                  v64 = v18[9];
                }
                *(_QWORD *)&v114 = ++v65;
              }
              while (v65 < v64);
              v63 = *((_QWORD *)&v113 + 1);
              v62 = v18[8];
            }
            *((_QWORD *)&v113 + 1) = ++v63;
          }
          while (v63 < v62);
          v61 = v113;
          v19 = v18[7];
        }
        *(_QWORD *)&v113 = ++v61;
      }
      while (v61 < v19);
    }
  }
  else
  {
    *(_QWORD *)&v113 = 0;
    v40 = *(_QWORD *)(a1 + 56);
    if (a3 == 1262703187)
    {
      if (v40 >= 1)
      {
        v41 = 0;
        v42 = *(_QWORD *)(a1 + 64);
        do
        {
          *((_QWORD *)&v113 + 1) = 0;
          if (v42 >= 1)
          {
            for (j = 0; j < v42; *((_QWORD *)&v113 + 1) = j)
            {
              v44 = v18[9];
              v24 = v44 < 1;
              v45 = v44 - 1;
              *(_QWORD *)&v114 = v45;
              if (!v24)
              {
                do
                {
                  v46 = v18[10];
                  v24 = v46 < 1;
                  v47 = v46 - 1;
                  *((_QWORD *)&v114 + 1) = v47;
                  if (!v24)
                  {
                    do
                    {
                      v48 = v18[11];
                      v115 = v48 - 1;
                      if (v48 >= 1)
                      {
                        do
                        {
                          v49 = v113;
                          v50 = a2[2];
                          v51 = v18[9];
                          v52 = v18[10];
                          v53 = v114;
                          v54 = *a2;
                          v55 = v18[11];
                          v56 = a2[4];
                          ZinIrWeightBase::GetAt<float>((uint64_t)v18);
                          v58 = v57;
                          v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          v60 = (_DWORD *)(v111
                                         + 4
                                         * (v49 * v102
                                          - v48
                                          + *((_QWORD *)&v49 + 1) * v108
                                          + v55
                                          + v56
                                          + (v52 + ~*((_QWORD *)&v53 + 1) + (v51 + v50 + ~(_QWORD)v53) * v105 + v54)
                                          * v104));
                          if (!v59)
                            v60 = v110;
                          *v60 = v58;
                          v48 = v115--;
                          v18 = (_QWORD *)a1;
                        }
                        while (v48 > 0);
                        v47 = *((_QWORD *)&v114 + 1);
                      }
                      *((_QWORD *)&v114 + 1) = v47 - 1;
                      v24 = v47-- <= 0;
                    }
                    while (!v24);
                    v45 = v114;
                  }
                  *(_QWORD *)&v114 = v45 - 1;
                  v24 = v45-- <= 0;
                }
                while (!v24);
                j = *((_QWORD *)&v113 + 1);
                v42 = v18[8];
              }
              ++j;
            }
            v41 = v113;
            v40 = v18[7];
          }
          *(_QWORD *)&v113 = ++v41;
        }
        while (v41 < v40);
      }
    }
    else if (v40 >= 1)
    {
      v79 = 0;
      v80 = *(_QWORD *)(a1 + 64);
      do
      {
        *((_QWORD *)&v113 + 1) = 0;
        if (v80 >= 1)
        {
          v81 = 0;
          v82 = v18[9];
          do
          {
            *(_QWORD *)&v114 = 0;
            if (v82 >= 1)
            {
              v83 = 0;
              v84 = v18[10];
              do
              {
                *((_QWORD *)&v114 + 1) = 0;
                if (v84 >= 1)
                {
                  v85 = 0;
                  v86 = v18[11];
                  do
                  {
                    v115 = 0;
                    if (v86 >= 1)
                    {
                      v87 = 0;
                      do
                      {
                        v103 = v86;
                        v88 = v113;
                        v89 = a2[3];
                        v91 = v18[9];
                        v90 = v18[10];
                        v92 = v114;
                        v93 = a2[1];
                        v94 = a2[5];
                        ZinIrWeightBase::GetAt<float>((uint64_t)v18);
                        v96 = v95;
                        v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        v98 = (_DWORD *)(v111
                                       + 4
                                       * (v103
                                        + ~v87
                                        + (v88 + *((_QWORD *)&v88 + 1) * v101) * v108
                                        + v94
                                        + (v90 + ~*((_QWORD *)&v92 + 1) + (v91 + v89 + ~(_QWORD)v92) * v105 + v93)
                                        * v104));
                        if (!v97)
                          v98 = v110;
                        *v98 = v96;
                        v87 = v115 + 1;
                        v115 = v87;
                        v18 = (_QWORD *)a1;
                        v86 = *(_QWORD *)(a1 + 88);
                      }
                      while (v87 < v86);
                      v85 = *((_QWORD *)&v114 + 1);
                      v84 = *(_QWORD *)(a1 + 80);
                    }
                    *((_QWORD *)&v114 + 1) = ++v85;
                  }
                  while (v85 < v84);
                  v83 = v114;
                  v82 = v18[9];
                }
                *(_QWORD *)&v114 = ++v83;
              }
              while (v83 < v82);
              v81 = *((_QWORD *)&v113 + 1);
              v80 = v18[8];
            }
            *((_QWORD *)&v113 + 1) = ++v81;
          }
          while (v81 < v80);
          v79 = v113;
          v40 = v18[7];
        }
        *(_QWORD *)&v113 = ++v79;
      }
      while (v79 < v40);
    }
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<float>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<float>>,ZinIrScratchBuffer<float>,void>((uint64_t)v110, &v109);
  *a5 = v109;
  return details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)v110);
}

void sub_206E29FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::PadWeightDataAndChangeLayout<half>@<X0>(uint64_t a1@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  _WORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  __int16 v36;
  int v37;
  _WORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t j;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  __int16 v58;
  int v59;
  _WORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  __int16 v76;
  int v77;
  _WORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  __int16 v95;
  __int16 v96;
  int v97;
  _WORD *v98;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v108;
  __int128 v109;
  _BYTE v110[8];
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;

  v115 = 0;
  v113 = 0u;
  v114 = 0u;
  v8 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v9 = *a4;
  if (*a4 && v8 != *(_QWORD *)(v9 + 56))
    ZinAssertImpl("kernel zero point must be per-cout");
  v104 = *(_QWORD *)(a1 + 88) + a2[4] + a2[5];
  v105 = *(_QWORD *)(a1 + 80) + *a2 + a2[1];
  v108 = v104 * v105 * (*(_QWORD *)(a1 + 72) + a2[2] + a2[3]);
  v102 = v108 * v7;
  details::ZinIrMappedData_Impl<half>::ZinIrMappedData_Impl((uint64_t)v110, v108 * v7 * v8);
  if (v112 != v111)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      if (v9)
      {
        if (a3 == 1145261902)
          v12 = v11 / v108 % v8;
        else
          v12 = v11 / v102;
        ZinIrVector::GetAt<half>(*a4, (int)v12);
        v14 = v15;
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      }
      else
      {
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
        v14 = 0;
      }
      v16 = v111;
      v17 = (_WORD *)(v111 + v10);
      if (!v13)
        v17 = v110;
      *v17 = v14;
      ++v11;
      v10 += 2;
    }
    while (v11 < (unint64_t)((v112 - v16) >> 1));
  }
  v18 = (_QWORD *)a1;
  v101 = v8;
  if (*(_DWORD *)(a1 + 156) == a3)
  {
    *(_QWORD *)&v113 = 0;
    v19 = *(_QWORD *)(a1 + 56);
    if (a3 == 1145261902)
    {
      if (v19 >= 1)
      {
        v20 = 0;
        v21 = *(_QWORD *)(a1 + 64);
        do
        {
          *((_QWORD *)&v113 + 1) = 0;
          if (v21 >= 1)
          {
            for (i = 0; i < v21; *((_QWORD *)&v113 + 1) = i)
            {
              v23 = v18[9];
              v24 = v23 < 1;
              v25 = v23 - 1;
              *(_QWORD *)&v114 = v25;
              if (!v24)
              {
                do
                {
                  v26 = v18[10];
                  v24 = v26 < 1;
                  v27 = v26 - 1;
                  *((_QWORD *)&v114 + 1) = v27;
                  if (!v24)
                  {
                    do
                    {
                      v28 = v18[11];
                      v29 = v28 - 1;
                      v115 = v28 - 1;
                      if (v28 >= 1)
                      {
                        do
                        {
                          v30 = v113;
                          v31 = a2[3];
                          v32 = v114;
                          v33 = a2[1];
                          v34 = a2[5];
                          ZinIrWeightBase::GetAt<half>((uint64_t)v18);
                          v36 = v35;
                          v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          v38 = (_WORD *)(v111
                                        + 2
                                        * (v29
                                         + (v30 + *((_QWORD *)&v30 + 1) * v101) * v108
                                         + v34
                                         + (*((_QWORD *)&v32 + 1) + v33 + (v32 + v31) * v105) * v104));
                          if (!v37)
                            v38 = v110;
                          *v38 = v36;
                          v39 = v115;
                          v29 = --v115;
                          v18 = (_QWORD *)a1;
                        }
                        while (v39 > 0);
                        v27 = *((_QWORD *)&v114 + 1);
                      }
                      *((_QWORD *)&v114 + 1) = v27 - 1;
                      v24 = v27-- <= 0;
                    }
                    while (!v24);
                    v25 = v114;
                  }
                  *(_QWORD *)&v114 = v25 - 1;
                  v24 = v25-- <= 0;
                }
                while (!v24);
                i = *((_QWORD *)&v113 + 1);
                v21 = v18[8];
              }
              ++i;
            }
            v20 = v113;
            v19 = v18[7];
          }
          *(_QWORD *)&v113 = ++v20;
        }
        while (v20 < v19);
      }
    }
    else if (v19 >= 1)
    {
      v61 = 0;
      v62 = *(_QWORD *)(a1 + 64);
      do
      {
        *((_QWORD *)&v113 + 1) = 0;
        if (v62 >= 1)
        {
          v63 = 0;
          v64 = v18[9];
          do
          {
            *(_QWORD *)&v114 = 0;
            if (v64 >= 1)
            {
              v65 = 0;
              v66 = v18[10];
              do
              {
                *((_QWORD *)&v114 + 1) = 0;
                if (v66 >= 1)
                {
                  v67 = 0;
                  v68 = v18[11];
                  do
                  {
                    v115 = 0;
                    if (v68 >= 1)
                    {
                      v69 = 0;
                      do
                      {
                        v70 = v113;
                        v71 = a2[2];
                        v72 = v114;
                        v73 = *a2;
                        v74 = a2[4];
                        ZinIrWeightBase::GetAt<half>((uint64_t)v18);
                        v76 = v75;
                        v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        v78 = (_WORD *)(v111
                                      + 2
                                      * (v69
                                       + *((_QWORD *)&v70 + 1) * v108
                                       + v70 * v102
                                       + v74
                                       + (*((_QWORD *)&v72 + 1) + v73 + (v72 + v71) * v105) * v104));
                        if (!v77)
                          v78 = v110;
                        *v78 = v76;
                        v69 = v115 + 1;
                        v115 = v69;
                        v18 = (_QWORD *)a1;
                        v68 = *(_QWORD *)(a1 + 88);
                      }
                      while (v69 < v68);
                      v67 = *((_QWORD *)&v114 + 1);
                      v66 = *(_QWORD *)(a1 + 80);
                    }
                    *((_QWORD *)&v114 + 1) = ++v67;
                  }
                  while (v67 < v66);
                  v65 = v114;
                  v64 = v18[9];
                }
                *(_QWORD *)&v114 = ++v65;
              }
              while (v65 < v64);
              v63 = *((_QWORD *)&v113 + 1);
              v62 = v18[8];
            }
            *((_QWORD *)&v113 + 1) = ++v63;
          }
          while (v63 < v62);
          v61 = v113;
          v19 = v18[7];
        }
        *(_QWORD *)&v113 = ++v61;
      }
      while (v61 < v19);
    }
  }
  else
  {
    *(_QWORD *)&v113 = 0;
    v40 = *(_QWORD *)(a1 + 56);
    if (a3 == 1262703187)
    {
      if (v40 >= 1)
      {
        v41 = 0;
        v42 = *(_QWORD *)(a1 + 64);
        do
        {
          *((_QWORD *)&v113 + 1) = 0;
          if (v42 >= 1)
          {
            for (j = 0; j < v42; *((_QWORD *)&v113 + 1) = j)
            {
              v44 = v18[9];
              v24 = v44 < 1;
              v45 = v44 - 1;
              *(_QWORD *)&v114 = v45;
              if (!v24)
              {
                do
                {
                  v46 = v18[10];
                  v24 = v46 < 1;
                  v47 = v46 - 1;
                  *((_QWORD *)&v114 + 1) = v47;
                  if (!v24)
                  {
                    do
                    {
                      v48 = v18[11];
                      v115 = v48 - 1;
                      if (v48 >= 1)
                      {
                        do
                        {
                          v49 = v113;
                          v50 = a2[2];
                          v51 = v18[9];
                          v52 = v18[10];
                          v53 = v114;
                          v54 = *a2;
                          v55 = v18[11];
                          v56 = a2[4];
                          ZinIrWeightBase::GetAt<half>((uint64_t)v18);
                          v58 = v57;
                          v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          v60 = (_WORD *)(v111
                                        + 2
                                        * (v49 * v102
                                         - v48
                                         + *((_QWORD *)&v49 + 1) * v108
                                         + v55
                                         + v56
                                         + (v52 + ~*((_QWORD *)&v53 + 1) + (v51 + v50 + ~(_QWORD)v53) * v105 + v54)
                                         * v104));
                          if (!v59)
                            v60 = v110;
                          *v60 = v58;
                          v48 = v115--;
                          v18 = (_QWORD *)a1;
                        }
                        while (v48 > 0);
                        v47 = *((_QWORD *)&v114 + 1);
                      }
                      *((_QWORD *)&v114 + 1) = v47 - 1;
                      v24 = v47-- <= 0;
                    }
                    while (!v24);
                    v45 = v114;
                  }
                  *(_QWORD *)&v114 = v45 - 1;
                  v24 = v45-- <= 0;
                }
                while (!v24);
                j = *((_QWORD *)&v113 + 1);
                v42 = v18[8];
              }
              ++j;
            }
            v41 = v113;
            v40 = v18[7];
          }
          *(_QWORD *)&v113 = ++v41;
        }
        while (v41 < v40);
      }
    }
    else if (v40 >= 1)
    {
      v79 = 0;
      v80 = *(_QWORD *)(a1 + 64);
      do
      {
        *((_QWORD *)&v113 + 1) = 0;
        if (v80 >= 1)
        {
          v81 = 0;
          v82 = v18[9];
          do
          {
            *(_QWORD *)&v114 = 0;
            if (v82 >= 1)
            {
              v83 = 0;
              v84 = v18[10];
              do
              {
                *((_QWORD *)&v114 + 1) = 0;
                if (v84 >= 1)
                {
                  v85 = 0;
                  v86 = v18[11];
                  do
                  {
                    v115 = 0;
                    if (v86 >= 1)
                    {
                      v87 = 0;
                      do
                      {
                        v103 = v86;
                        v88 = v113;
                        v89 = a2[3];
                        v91 = v18[9];
                        v90 = v18[10];
                        v92 = v114;
                        v93 = a2[1];
                        v94 = a2[5];
                        ZinIrWeightBase::GetAt<half>((uint64_t)v18);
                        v96 = v95;
                        v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        v98 = (_WORD *)(v111
                                      + 2
                                      * (v103
                                       + ~v87
                                       + (v88 + *((_QWORD *)&v88 + 1) * v101) * v108
                                       + v94
                                       + (v90 + ~*((_QWORD *)&v92 + 1) + (v91 + v89 + ~(_QWORD)v92) * v105 + v93) * v104));
                        if (!v97)
                          v98 = v110;
                        *v98 = v96;
                        v87 = v115 + 1;
                        v115 = v87;
                        v18 = (_QWORD *)a1;
                        v86 = *(_QWORD *)(a1 + 88);
                      }
                      while (v87 < v86);
                      v85 = *((_QWORD *)&v114 + 1);
                      v84 = *(_QWORD *)(a1 + 80);
                    }
                    *((_QWORD *)&v114 + 1) = ++v85;
                  }
                  while (v85 < v84);
                  v83 = v114;
                  v82 = v18[9];
                }
                *(_QWORD *)&v114 = ++v83;
              }
              while (v83 < v82);
              v81 = *((_QWORD *)&v113 + 1);
              v80 = v18[8];
            }
            *((_QWORD *)&v113 + 1) = ++v81;
          }
          while (v81 < v80);
          v79 = v113;
          v40 = v18[7];
        }
        *(_QWORD *)&v113 = ++v79;
      }
      while (v79 < v40);
    }
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<half>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<half>>,ZinIrScratchBuffer<half>,void>((uint64_t)v110, &v109);
  *a5 = v109;
  return details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)v110);
}

void sub_206E2A764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::PadWeightDataAndChangeLayout<e4m3_t>@<X0>(uint64_t a1@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  _BYTE *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t j;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  int v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  int v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  int v90;
  _BYTE *v91;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v104;
  __int128 v105;
  _BYTE v106[8];
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;

  v111 = 0;
  v109 = 0u;
  v110 = 0u;
  v8 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v9 = *a4;
  if (*a4 && v8 != *(_QWORD *)(v9 + 56))
    ZinAssertImpl("kernel zero point must be per-cout");
  v100 = *(_QWORD *)(a1 + 88) + a2[4] + a2[5];
  v101 = *(_QWORD *)(a1 + 80) + *a2 + a2[1];
  v104 = v100 * v101 * (*(_QWORD *)(a1 + 72) + a2[2] + a2[3]);
  v98 = v104 * v7;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v106, v104 * v7 * v8);
  if (v108 != v107)
  {
    v10 = 0;
    do
    {
      if (v9)
      {
        if (a3 == 1145261902)
          v11 = v10 / v104 % v8;
        else
          v11 = v10 / v98;
        v13 = ZinIrVector::GetAt<e4m3_t>(*a4, (int)v11);
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      }
      else
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
        v13 = 0;
      }
      v14 = (_BYTE *)(v107 + v10);
      if (!v12)
        v14 = v106;
      *v14 = v13;
      ++v10;
    }
    while (v108 - v107 > (unint64_t)v10);
  }
  v15 = (_QWORD *)a1;
  v96 = v8;
  if (*(_DWORD *)(a1 + 156) == a3)
  {
    *(_QWORD *)&v109 = 0;
    v16 = *(_QWORD *)(a1 + 56);
    if (a3 == 1145261902)
    {
      if (v16 >= 1)
      {
        v17 = 0;
        v18 = *(_QWORD *)(a1 + 64);
        do
        {
          *((_QWORD *)&v109 + 1) = 0;
          if (v18 >= 1)
          {
            for (i = 0; i < v18; *((_QWORD *)&v109 + 1) = i)
            {
              v20 = v15[9];
              v21 = v20 < 1;
              v22 = v20 - 1;
              *(_QWORD *)&v110 = v22;
              if (!v21)
              {
                do
                {
                  v23 = v15[10];
                  v21 = v23 < 1;
                  v24 = v23 - 1;
                  *((_QWORD *)&v110 + 1) = v24;
                  if (!v21)
                  {
                    do
                    {
                      v25 = v15[11];
                      v26 = v25 - 1;
                      v111 = v25 - 1;
                      if (v25 >= 1)
                      {
                        do
                        {
                          v27 = v109;
                          v28 = a2[3];
                          v29 = v110;
                          v30 = a2[1];
                          v31 = a2[5];
                          v32 = ZinIrWeightBase::GetAt<e4m3_t>((uint64_t)v15);
                          v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          v34 = (_BYTE *)(v107
                                        + v26
                                        + (v27 + *((_QWORD *)&v27 + 1) * v96) * v104
                                        + v31
                                        + (*((_QWORD *)&v29 + 1) + v30 + (v29 + v28) * v101) * v100);
                          if (!v33)
                            v34 = v106;
                          *v34 = v32;
                          v35 = v111;
                          v26 = --v111;
                          v15 = (_QWORD *)a1;
                        }
                        while (v35 > 0);
                        v24 = *((_QWORD *)&v110 + 1);
                      }
                      *((_QWORD *)&v110 + 1) = v24 - 1;
                      v21 = v24-- <= 0;
                    }
                    while (!v21);
                    v22 = v110;
                  }
                  *(_QWORD *)&v110 = v22 - 1;
                  v21 = v22-- <= 0;
                }
                while (!v21);
                i = *((_QWORD *)&v109 + 1);
                v18 = v15[8];
              }
              ++i;
            }
            v17 = v109;
            v16 = v15[7];
          }
          *(_QWORD *)&v109 = ++v17;
        }
        while (v17 < v16);
      }
    }
    else if (v16 >= 1)
    {
      v56 = 0;
      v57 = *(_QWORD *)(a1 + 64);
      do
      {
        *((_QWORD *)&v109 + 1) = 0;
        if (v57 >= 1)
        {
          v58 = 0;
          v59 = v15[9];
          do
          {
            *(_QWORD *)&v110 = 0;
            if (v59 >= 1)
            {
              v60 = 0;
              v61 = v15[10];
              do
              {
                *((_QWORD *)&v110 + 1) = 0;
                if (v61 >= 1)
                {
                  v62 = 0;
                  v63 = v15[11];
                  do
                  {
                    v111 = 0;
                    if (v63 >= 1)
                    {
                      v64 = 0;
                      do
                      {
                        v65 = v109;
                        v66 = a2[2];
                        v67 = v110;
                        v68 = *a2;
                        v69 = a2[4];
                        v70 = ZinIrWeightBase::GetAt<e4m3_t>((uint64_t)v15);
                        v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        v72 = (_BYTE *)(v107
                                      + v64
                                      + *((_QWORD *)&v65 + 1) * v104
                                      + v65 * v98
                                      + v69
                                      + (*((_QWORD *)&v67 + 1) + v68 + (v67 + v66) * v101) * v100);
                        if (!v71)
                          v72 = v106;
                        *v72 = v70;
                        v64 = v111 + 1;
                        v111 = v64;
                        v15 = (_QWORD *)a1;
                        v63 = *(_QWORD *)(a1 + 88);
                      }
                      while (v64 < v63);
                      v62 = *((_QWORD *)&v110 + 1);
                      v61 = *(_QWORD *)(a1 + 80);
                    }
                    *((_QWORD *)&v110 + 1) = ++v62;
                  }
                  while (v62 < v61);
                  v60 = v110;
                  v59 = v15[9];
                }
                *(_QWORD *)&v110 = ++v60;
              }
              while (v60 < v59);
              v58 = *((_QWORD *)&v109 + 1);
              v57 = v15[8];
            }
            *((_QWORD *)&v109 + 1) = ++v58;
          }
          while (v58 < v57);
          v56 = v109;
          v16 = v15[7];
        }
        *(_QWORD *)&v109 = ++v56;
      }
      while (v56 < v16);
    }
  }
  else
  {
    *(_QWORD *)&v109 = 0;
    v36 = *(_QWORD *)(a1 + 56);
    if (a3 == 1262703187)
    {
      if (v36 >= 1)
      {
        v37 = 0;
        v38 = *(_QWORD *)(a1 + 64);
        do
        {
          *((_QWORD *)&v109 + 1) = 0;
          if (v38 >= 1)
          {
            for (j = 0; j < v38; *((_QWORD *)&v109 + 1) = j)
            {
              v40 = v15[9];
              v21 = v40 < 1;
              v41 = v40 - 1;
              *(_QWORD *)&v110 = v41;
              if (!v21)
              {
                do
                {
                  v42 = v15[10];
                  v21 = v42 < 1;
                  v43 = v42 - 1;
                  *((_QWORD *)&v110 + 1) = v43;
                  if (!v21)
                  {
                    do
                    {
                      v44 = v15[11];
                      v111 = v44 - 1;
                      if (v44 >= 1)
                      {
                        do
                        {
                          v45 = v110;
                          v94 = *((_QWORD *)&v109 + 1);
                          v97 = v109;
                          v46 = a2[2];
                          v47 = v15[9];
                          v48 = v15[10];
                          v49 = *((_QWORD *)&v110 + 1);
                          v50 = *a2;
                          v51 = v15[11];
                          v52 = a2[4];
                          v53 = ZinIrWeightBase::GetAt<e4m3_t>((uint64_t)v15);
                          v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          v55 = (_BYTE *)(v107
                                        + v97 * v98
                                        - v44
                                        + v94 * v104
                                        + v51
                                        + v52
                                        + (v48 + ~v49 + (v47 + v46 + ~v45) * v101 + v50) * v100);
                          if (!v54)
                            v55 = v106;
                          *v55 = v53;
                          v44 = v111--;
                          v15 = (_QWORD *)a1;
                        }
                        while (v44 > 0);
                        v43 = *((_QWORD *)&v110 + 1);
                      }
                      *((_QWORD *)&v110 + 1) = v43 - 1;
                      v21 = v43-- <= 0;
                    }
                    while (!v21);
                    v41 = v110;
                  }
                  *(_QWORD *)&v110 = v41 - 1;
                  v21 = v41-- <= 0;
                }
                while (!v21);
                j = *((_QWORD *)&v109 + 1);
                v38 = v15[8];
              }
              ++j;
            }
            v37 = v109;
            v36 = v15[7];
          }
          *(_QWORD *)&v109 = ++v37;
        }
        while (v37 < v36);
      }
    }
    else if (v36 >= 1)
    {
      v73 = 0;
      v74 = *(_QWORD *)(a1 + 64);
      do
      {
        *((_QWORD *)&v109 + 1) = 0;
        if (v74 >= 1)
        {
          v75 = 0;
          v76 = v15[9];
          do
          {
            *(_QWORD *)&v110 = 0;
            if (v76 >= 1)
            {
              v77 = 0;
              v78 = v15[10];
              do
              {
                *((_QWORD *)&v110 + 1) = 0;
                if (v78 >= 1)
                {
                  v79 = 0;
                  v80 = v15[11];
                  do
                  {
                    v111 = 0;
                    if (v80 >= 1)
                    {
                      v81 = 0;
                      do
                      {
                        v99 = v80;
                        v82 = *((_QWORD *)&v109 + 1);
                        v95 = v109;
                        v83 = a2[3];
                        v84 = v15[9];
                        v85 = v15[10];
                        v86 = v110;
                        v87 = a2[1];
                        v88 = a2[5];
                        v89 = ZinIrWeightBase::GetAt<e4m3_t>((uint64_t)v15);
                        v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        v91 = (_BYTE *)(v107
                                      + v99
                                      + ~v81
                                      + (v95 + v82 * v96) * v104
                                      + v88
                                      + (v85 + ~*((_QWORD *)&v86 + 1) + (v84 + v83 + ~(_QWORD)v86) * v101 + v87) * v100);
                        if (!v90)
                          v91 = v106;
                        *v91 = v89;
                        v81 = v111 + 1;
                        v111 = v81;
                        v15 = (_QWORD *)a1;
                        v80 = *(_QWORD *)(a1 + 88);
                      }
                      while (v81 < v80);
                      v79 = *((_QWORD *)&v110 + 1);
                      v78 = *(_QWORD *)(a1 + 80);
                    }
                    *((_QWORD *)&v110 + 1) = ++v79;
                  }
                  while (v79 < v78);
                  v77 = v110;
                  v76 = v15[9];
                }
                *(_QWORD *)&v110 = ++v77;
              }
              while (v77 < v76);
              v75 = *((_QWORD *)&v109 + 1);
              v74 = v15[8];
            }
            *((_QWORD *)&v109 + 1) = ++v75;
          }
          while (v75 < v74);
          v73 = v109;
          v36 = v15[7];
        }
        *(_QWORD *)&v109 = ++v73;
      }
      while (v73 < v36);
    }
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>,ZinIrScratchBuffer<e4m3_t>,void>((uint64_t)v106, &v105);
  *a5 = v105;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v106);
}

void sub_206E2AF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::PadWeightDataAndChangeLayout<signed char>@<X0>(uint64_t a1@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  _BYTE *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t j;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  int v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  int v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  int v90;
  _BYTE *v91;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v104;
  __int128 v105;
  _BYTE v106[8];
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;

  v111 = 0;
  v109 = 0u;
  v110 = 0u;
  v8 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v9 = *a4;
  if (*a4 && v8 != *(_QWORD *)(v9 + 56))
    ZinAssertImpl("kernel zero point must be per-cout");
  v100 = *(_QWORD *)(a1 + 88) + a2[4] + a2[5];
  v101 = *(_QWORD *)(a1 + 80) + *a2 + a2[1];
  v104 = v100 * v101 * (*(_QWORD *)(a1 + 72) + a2[2] + a2[3]);
  v98 = v104 * v7;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v106, v104 * v7 * v8);
  if (v108 != v107)
  {
    v10 = 0;
    do
    {
      if (v9)
      {
        if (a3 == 1145261902)
          v11 = v10 / v104 % v8;
        else
          v11 = v10 / v98;
        v13 = ZinIrVector::GetAt<signed char>(*a4, (int)v11);
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      }
      else
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
        v13 = 0;
      }
      v14 = (_BYTE *)(v107 + v10);
      if (!v12)
        v14 = v106;
      *v14 = v13;
      ++v10;
    }
    while (v108 - v107 > (unint64_t)v10);
  }
  v15 = (_QWORD *)a1;
  v96 = v8;
  if (*(_DWORD *)(a1 + 156) == a3)
  {
    *(_QWORD *)&v109 = 0;
    v16 = *(_QWORD *)(a1 + 56);
    if (a3 == 1145261902)
    {
      if (v16 >= 1)
      {
        v17 = 0;
        v18 = *(_QWORD *)(a1 + 64);
        do
        {
          *((_QWORD *)&v109 + 1) = 0;
          if (v18 >= 1)
          {
            for (i = 0; i < v18; *((_QWORD *)&v109 + 1) = i)
            {
              v20 = v15[9];
              v21 = v20 < 1;
              v22 = v20 - 1;
              *(_QWORD *)&v110 = v22;
              if (!v21)
              {
                do
                {
                  v23 = v15[10];
                  v21 = v23 < 1;
                  v24 = v23 - 1;
                  *((_QWORD *)&v110 + 1) = v24;
                  if (!v21)
                  {
                    do
                    {
                      v25 = v15[11];
                      v26 = v25 - 1;
                      v111 = v25 - 1;
                      if (v25 >= 1)
                      {
                        do
                        {
                          v27 = v109;
                          v28 = a2[3];
                          v29 = v110;
                          v30 = a2[1];
                          v31 = a2[5];
                          v32 = ZinIrWeightBase::GetAt<signed char>((uint64_t)v15);
                          v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          v34 = (_BYTE *)(v107
                                        + v26
                                        + (v27 + *((_QWORD *)&v27 + 1) * v96) * v104
                                        + v31
                                        + (*((_QWORD *)&v29 + 1) + v30 + (v29 + v28) * v101) * v100);
                          if (!v33)
                            v34 = v106;
                          *v34 = v32;
                          v35 = v111;
                          v26 = --v111;
                          v15 = (_QWORD *)a1;
                        }
                        while (v35 > 0);
                        v24 = *((_QWORD *)&v110 + 1);
                      }
                      *((_QWORD *)&v110 + 1) = v24 - 1;
                      v21 = v24-- <= 0;
                    }
                    while (!v21);
                    v22 = v110;
                  }
                  *(_QWORD *)&v110 = v22 - 1;
                  v21 = v22-- <= 0;
                }
                while (!v21);
                i = *((_QWORD *)&v109 + 1);
                v18 = v15[8];
              }
              ++i;
            }
            v17 = v109;
            v16 = v15[7];
          }
          *(_QWORD *)&v109 = ++v17;
        }
        while (v17 < v16);
      }
    }
    else if (v16 >= 1)
    {
      v56 = 0;
      v57 = *(_QWORD *)(a1 + 64);
      do
      {
        *((_QWORD *)&v109 + 1) = 0;
        if (v57 >= 1)
        {
          v58 = 0;
          v59 = v15[9];
          do
          {
            *(_QWORD *)&v110 = 0;
            if (v59 >= 1)
            {
              v60 = 0;
              v61 = v15[10];
              do
              {
                *((_QWORD *)&v110 + 1) = 0;
                if (v61 >= 1)
                {
                  v62 = 0;
                  v63 = v15[11];
                  do
                  {
                    v111 = 0;
                    if (v63 >= 1)
                    {
                      v64 = 0;
                      do
                      {
                        v65 = v109;
                        v66 = a2[2];
                        v67 = v110;
                        v68 = *a2;
                        v69 = a2[4];
                        v70 = ZinIrWeightBase::GetAt<signed char>((uint64_t)v15);
                        v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        v72 = (_BYTE *)(v107
                                      + v64
                                      + *((_QWORD *)&v65 + 1) * v104
                                      + v65 * v98
                                      + v69
                                      + (*((_QWORD *)&v67 + 1) + v68 + (v67 + v66) * v101) * v100);
                        if (!v71)
                          v72 = v106;
                        *v72 = v70;
                        v64 = v111 + 1;
                        v111 = v64;
                        v15 = (_QWORD *)a1;
                        v63 = *(_QWORD *)(a1 + 88);
                      }
                      while (v64 < v63);
                      v62 = *((_QWORD *)&v110 + 1);
                      v61 = *(_QWORD *)(a1 + 80);
                    }
                    *((_QWORD *)&v110 + 1) = ++v62;
                  }
                  while (v62 < v61);
                  v60 = v110;
                  v59 = v15[9];
                }
                *(_QWORD *)&v110 = ++v60;
              }
              while (v60 < v59);
              v58 = *((_QWORD *)&v109 + 1);
              v57 = v15[8];
            }
            *((_QWORD *)&v109 + 1) = ++v58;
          }
          while (v58 < v57);
          v56 = v109;
          v16 = v15[7];
        }
        *(_QWORD *)&v109 = ++v56;
      }
      while (v56 < v16);
    }
  }
  else
  {
    *(_QWORD *)&v109 = 0;
    v36 = *(_QWORD *)(a1 + 56);
    if (a3 == 1262703187)
    {
      if (v36 >= 1)
      {
        v37 = 0;
        v38 = *(_QWORD *)(a1 + 64);
        do
        {
          *((_QWORD *)&v109 + 1) = 0;
          if (v38 >= 1)
          {
            for (j = 0; j < v38; *((_QWORD *)&v109 + 1) = j)
            {
              v40 = v15[9];
              v21 = v40 < 1;
              v41 = v40 - 1;
              *(_QWORD *)&v110 = v41;
              if (!v21)
              {
                do
                {
                  v42 = v15[10];
                  v21 = v42 < 1;
                  v43 = v42 - 1;
                  *((_QWORD *)&v110 + 1) = v43;
                  if (!v21)
                  {
                    do
                    {
                      v44 = v15[11];
                      v111 = v44 - 1;
                      if (v44 >= 1)
                      {
                        do
                        {
                          v45 = v110;
                          v94 = *((_QWORD *)&v109 + 1);
                          v97 = v109;
                          v46 = a2[2];
                          v47 = v15[9];
                          v48 = v15[10];
                          v49 = *((_QWORD *)&v110 + 1);
                          v50 = *a2;
                          v51 = v15[11];
                          v52 = a2[4];
                          v53 = ZinIrWeightBase::GetAt<signed char>((uint64_t)v15);
                          v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          v55 = (_BYTE *)(v107
                                        + v97 * v98
                                        - v44
                                        + v94 * v104
                                        + v51
                                        + v52
                                        + (v48 + ~v49 + (v47 + v46 + ~v45) * v101 + v50) * v100);
                          if (!v54)
                            v55 = v106;
                          *v55 = v53;
                          v44 = v111--;
                          v15 = (_QWORD *)a1;
                        }
                        while (v44 > 0);
                        v43 = *((_QWORD *)&v110 + 1);
                      }
                      *((_QWORD *)&v110 + 1) = v43 - 1;
                      v21 = v43-- <= 0;
                    }
                    while (!v21);
                    v41 = v110;
                  }
                  *(_QWORD *)&v110 = v41 - 1;
                  v21 = v41-- <= 0;
                }
                while (!v21);
                j = *((_QWORD *)&v109 + 1);
                v38 = v15[8];
              }
              ++j;
            }
            v37 = v109;
            v36 = v15[7];
          }
          *(_QWORD *)&v109 = ++v37;
        }
        while (v37 < v36);
      }
    }
    else if (v36 >= 1)
    {
      v73 = 0;
      v74 = *(_QWORD *)(a1 + 64);
      do
      {
        *((_QWORD *)&v109 + 1) = 0;
        if (v74 >= 1)
        {
          v75 = 0;
          v76 = v15[9];
          do
          {
            *(_QWORD *)&v110 = 0;
            if (v76 >= 1)
            {
              v77 = 0;
              v78 = v15[10];
              do
              {
                *((_QWORD *)&v110 + 1) = 0;
                if (v78 >= 1)
                {
                  v79 = 0;
                  v80 = v15[11];
                  do
                  {
                    v111 = 0;
                    if (v80 >= 1)
                    {
                      v81 = 0;
                      do
                      {
                        v99 = v80;
                        v82 = *((_QWORD *)&v109 + 1);
                        v95 = v109;
                        v83 = a2[3];
                        v84 = v15[9];
                        v85 = v15[10];
                        v86 = v110;
                        v87 = a2[1];
                        v88 = a2[5];
                        v89 = ZinIrWeightBase::GetAt<signed char>((uint64_t)v15);
                        v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        v91 = (_BYTE *)(v107
                                      + v99
                                      + ~v81
                                      + (v95 + v82 * v96) * v104
                                      + v88
                                      + (v85 + ~*((_QWORD *)&v86 + 1) + (v84 + v83 + ~(_QWORD)v86) * v101 + v87) * v100);
                        if (!v90)
                          v91 = v106;
                        *v91 = v89;
                        v81 = v111 + 1;
                        v111 = v81;
                        v15 = (_QWORD *)a1;
                        v80 = *(_QWORD *)(a1 + 88);
                      }
                      while (v81 < v80);
                      v79 = *((_QWORD *)&v110 + 1);
                      v78 = *(_QWORD *)(a1 + 80);
                    }
                    *((_QWORD *)&v110 + 1) = ++v79;
                  }
                  while (v79 < v78);
                  v77 = v110;
                  v76 = v15[9];
                }
                *(_QWORD *)&v110 = ++v77;
              }
              while (v77 < v76);
              v75 = *((_QWORD *)&v109 + 1);
              v74 = v15[8];
            }
            *((_QWORD *)&v109 + 1) = ++v75;
          }
          while (v75 < v74);
          v73 = v109;
          v36 = v15[7];
        }
        *(_QWORD *)&v109 = ++v73;
      }
      while (v73 < v36);
    }
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<signed char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<signed char>>,ZinIrScratchBuffer<signed char>,void>((uint64_t)v106, &v105);
  *a5 = v105;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v106);
}

void sub_206E2B6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::PadWeightDataAndChangeLayout<unsigned char>@<X0>(uint64_t a1@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  _BYTE *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t j;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  int v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  int v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  int v90;
  _BYTE *v91;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v104;
  __int128 v105;
  _BYTE v106[8];
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;

  v111 = 0;
  v109 = 0u;
  v110 = 0u;
  v8 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v9 = *a4;
  if (*a4 && v8 != *(_QWORD *)(v9 + 56))
    ZinAssertImpl("kernel zero point must be per-cout");
  v100 = *(_QWORD *)(a1 + 88) + a2[4] + a2[5];
  v101 = *(_QWORD *)(a1 + 80) + *a2 + a2[1];
  v104 = v100 * v101 * (*(_QWORD *)(a1 + 72) + a2[2] + a2[3]);
  v98 = v104 * v7;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v106, v104 * v7 * v8);
  if (v108 != v107)
  {
    v10 = 0;
    do
    {
      if (v9)
      {
        if (a3 == 1145261902)
          v11 = v10 / v104 % v8;
        else
          v11 = v10 / v98;
        v13 = ZinIrVector::GetAt<unsigned char>(*a4, (int)v11);
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      }
      else
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
        v13 = 0;
      }
      v14 = (_BYTE *)(v107 + v10);
      if (!v12)
        v14 = v106;
      *v14 = v13;
      ++v10;
    }
    while (v108 - v107 > (unint64_t)v10);
  }
  v15 = (_QWORD *)a1;
  v96 = v8;
  if (*(_DWORD *)(a1 + 156) == a3)
  {
    *(_QWORD *)&v109 = 0;
    v16 = *(_QWORD *)(a1 + 56);
    if (a3 == 1145261902)
    {
      if (v16 >= 1)
      {
        v17 = 0;
        v18 = *(_QWORD *)(a1 + 64);
        do
        {
          *((_QWORD *)&v109 + 1) = 0;
          if (v18 >= 1)
          {
            for (i = 0; i < v18; *((_QWORD *)&v109 + 1) = i)
            {
              v20 = v15[9];
              v21 = v20 < 1;
              v22 = v20 - 1;
              *(_QWORD *)&v110 = v22;
              if (!v21)
              {
                do
                {
                  v23 = v15[10];
                  v21 = v23 < 1;
                  v24 = v23 - 1;
                  *((_QWORD *)&v110 + 1) = v24;
                  if (!v21)
                  {
                    do
                    {
                      v25 = v15[11];
                      v26 = v25 - 1;
                      v111 = v25 - 1;
                      if (v25 >= 1)
                      {
                        do
                        {
                          v27 = v109;
                          v28 = a2[3];
                          v29 = v110;
                          v30 = a2[1];
                          v31 = a2[5];
                          v32 = ZinIrWeightBase::GetAt<unsigned char>((uint64_t)v15);
                          v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          v34 = (_BYTE *)(v107
                                        + v26
                                        + (v27 + *((_QWORD *)&v27 + 1) * v96) * v104
                                        + v31
                                        + (*((_QWORD *)&v29 + 1) + v30 + (v29 + v28) * v101) * v100);
                          if (!v33)
                            v34 = v106;
                          *v34 = v32;
                          v35 = v111;
                          v26 = --v111;
                          v15 = (_QWORD *)a1;
                        }
                        while (v35 > 0);
                        v24 = *((_QWORD *)&v110 + 1);
                      }
                      *((_QWORD *)&v110 + 1) = v24 - 1;
                      v21 = v24-- <= 0;
                    }
                    while (!v21);
                    v22 = v110;
                  }
                  *(_QWORD *)&v110 = v22 - 1;
                  v21 = v22-- <= 0;
                }
                while (!v21);
                i = *((_QWORD *)&v109 + 1);
                v18 = v15[8];
              }
              ++i;
            }
            v17 = v109;
            v16 = v15[7];
          }
          *(_QWORD *)&v109 = ++v17;
        }
        while (v17 < v16);
      }
    }
    else if (v16 >= 1)
    {
      v56 = 0;
      v57 = *(_QWORD *)(a1 + 64);
      do
      {
        *((_QWORD *)&v109 + 1) = 0;
        if (v57 >= 1)
        {
          v58 = 0;
          v59 = v15[9];
          do
          {
            *(_QWORD *)&v110 = 0;
            if (v59 >= 1)
            {
              v60 = 0;
              v61 = v15[10];
              do
              {
                *((_QWORD *)&v110 + 1) = 0;
                if (v61 >= 1)
                {
                  v62 = 0;
                  v63 = v15[11];
                  do
                  {
                    v111 = 0;
                    if (v63 >= 1)
                    {
                      v64 = 0;
                      do
                      {
                        v65 = v109;
                        v66 = a2[2];
                        v67 = v110;
                        v68 = *a2;
                        v69 = a2[4];
                        v70 = ZinIrWeightBase::GetAt<unsigned char>((uint64_t)v15);
                        v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        v72 = (_BYTE *)(v107
                                      + v64
                                      + *((_QWORD *)&v65 + 1) * v104
                                      + v65 * v98
                                      + v69
                                      + (*((_QWORD *)&v67 + 1) + v68 + (v67 + v66) * v101) * v100);
                        if (!v71)
                          v72 = v106;
                        *v72 = v70;
                        v64 = v111 + 1;
                        v111 = v64;
                        v15 = (_QWORD *)a1;
                        v63 = *(_QWORD *)(a1 + 88);
                      }
                      while (v64 < v63);
                      v62 = *((_QWORD *)&v110 + 1);
                      v61 = *(_QWORD *)(a1 + 80);
                    }
                    *((_QWORD *)&v110 + 1) = ++v62;
                  }
                  while (v62 < v61);
                  v60 = v110;
                  v59 = v15[9];
                }
                *(_QWORD *)&v110 = ++v60;
              }
              while (v60 < v59);
              v58 = *((_QWORD *)&v109 + 1);
              v57 = v15[8];
            }
            *((_QWORD *)&v109 + 1) = ++v58;
          }
          while (v58 < v57);
          v56 = v109;
          v16 = v15[7];
        }
        *(_QWORD *)&v109 = ++v56;
      }
      while (v56 < v16);
    }
  }
  else
  {
    *(_QWORD *)&v109 = 0;
    v36 = *(_QWORD *)(a1 + 56);
    if (a3 == 1262703187)
    {
      if (v36 >= 1)
      {
        v37 = 0;
        v38 = *(_QWORD *)(a1 + 64);
        do
        {
          *((_QWORD *)&v109 + 1) = 0;
          if (v38 >= 1)
          {
            for (j = 0; j < v38; *((_QWORD *)&v109 + 1) = j)
            {
              v40 = v15[9];
              v21 = v40 < 1;
              v41 = v40 - 1;
              *(_QWORD *)&v110 = v41;
              if (!v21)
              {
                do
                {
                  v42 = v15[10];
                  v21 = v42 < 1;
                  v43 = v42 - 1;
                  *((_QWORD *)&v110 + 1) = v43;
                  if (!v21)
                  {
                    do
                    {
                      v44 = v15[11];
                      v111 = v44 - 1;
                      if (v44 >= 1)
                      {
                        do
                        {
                          v45 = v110;
                          v94 = *((_QWORD *)&v109 + 1);
                          v97 = v109;
                          v46 = a2[2];
                          v47 = v15[9];
                          v48 = v15[10];
                          v49 = *((_QWORD *)&v110 + 1);
                          v50 = *a2;
                          v51 = v15[11];
                          v52 = a2[4];
                          v53 = ZinIrWeightBase::GetAt<unsigned char>((uint64_t)v15);
                          v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          v55 = (_BYTE *)(v107
                                        + v97 * v98
                                        - v44
                                        + v94 * v104
                                        + v51
                                        + v52
                                        + (v48 + ~v49 + (v47 + v46 + ~v45) * v101 + v50) * v100);
                          if (!v54)
                            v55 = v106;
                          *v55 = v53;
                          v44 = v111--;
                          v15 = (_QWORD *)a1;
                        }
                        while (v44 > 0);
                        v43 = *((_QWORD *)&v110 + 1);
                      }
                      *((_QWORD *)&v110 + 1) = v43 - 1;
                      v21 = v43-- <= 0;
                    }
                    while (!v21);
                    v41 = v110;
                  }
                  *(_QWORD *)&v110 = v41 - 1;
                  v21 = v41-- <= 0;
                }
                while (!v21);
                j = *((_QWORD *)&v109 + 1);
                v38 = v15[8];
              }
              ++j;
            }
            v37 = v109;
            v36 = v15[7];
          }
          *(_QWORD *)&v109 = ++v37;
        }
        while (v37 < v36);
      }
    }
    else if (v36 >= 1)
    {
      v73 = 0;
      v74 = *(_QWORD *)(a1 + 64);
      do
      {
        *((_QWORD *)&v109 + 1) = 0;
        if (v74 >= 1)
        {
          v75 = 0;
          v76 = v15[9];
          do
          {
            *(_QWORD *)&v110 = 0;
            if (v76 >= 1)
            {
              v77 = 0;
              v78 = v15[10];
              do
              {
                *((_QWORD *)&v110 + 1) = 0;
                if (v78 >= 1)
                {
                  v79 = 0;
                  v80 = v15[11];
                  do
                  {
                    v111 = 0;
                    if (v80 >= 1)
                    {
                      v81 = 0;
                      do
                      {
                        v99 = v80;
                        v82 = *((_QWORD *)&v109 + 1);
                        v95 = v109;
                        v83 = a2[3];
                        v84 = v15[9];
                        v85 = v15[10];
                        v86 = v110;
                        v87 = a2[1];
                        v88 = a2[5];
                        v89 = ZinIrWeightBase::GetAt<unsigned char>((uint64_t)v15);
                        v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        v91 = (_BYTE *)(v107
                                      + v99
                                      + ~v81
                                      + (v95 + v82 * v96) * v104
                                      + v88
                                      + (v85 + ~*((_QWORD *)&v86 + 1) + (v84 + v83 + ~(_QWORD)v86) * v101 + v87) * v100);
                        if (!v90)
                          v91 = v106;
                        *v91 = v89;
                        v81 = v111 + 1;
                        v111 = v81;
                        v15 = (_QWORD *)a1;
                        v80 = *(_QWORD *)(a1 + 88);
                      }
                      while (v81 < v80);
                      v79 = *((_QWORD *)&v110 + 1);
                      v78 = *(_QWORD *)(a1 + 80);
                    }
                    *((_QWORD *)&v110 + 1) = ++v79;
                  }
                  while (v79 < v78);
                  v77 = v110;
                  v76 = v15[9];
                }
                *(_QWORD *)&v110 = ++v77;
              }
              while (v77 < v76);
              v75 = *((_QWORD *)&v109 + 1);
              v74 = v15[8];
            }
            *((_QWORD *)&v109 + 1) = ++v75;
          }
          while (v75 < v74);
          v73 = v109;
          v36 = v15[7];
        }
        *(_QWORD *)&v109 = ++v73;
      }
      while (v73 < v36);
    }
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<unsigned char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<unsigned char>>,ZinIrScratchBuffer<unsigned char>,void>((uint64_t)v106, &v105);
  *a5 = v105;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v106);
}

void sub_206E2BE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

void ZinIrWeight::SliceWeight(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  int v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t v25;
  unsigned __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unsigned __int128 v36;

  v5 = *(_DWORD *)(a1 + 8);
  if ((v5 - 7) >= 0x15)
  {
    switch(v5)
    {
      case 1:
        ZinIrWeight::SliceWeightData<ZinIrScratchBuffer<signed char>,ZinIrScratchBufferBackedConstData_specialization<signed char>>(a1, (uint64_t *)a2, a3, &v36);
        goto LABEL_15;
      case 2:
        ZinIrWeight::SliceWeightData<ZinIrScratchBuffer<unsigned char>,ZinIrScratchBufferBackedConstData_specialization<unsigned char>>(a1, (uint64_t *)a2, a3, &v36);
        goto LABEL_15;
      case 3:
        goto LABEL_9;
      case 4:
        ZinIrWeight::SliceWeightData<ZinIrScratchBuffer<half>,ZinIrScratchBufferBackedConstData_specialization<half>>(a1, (uint64_t *)a2, a3, &v36);
        goto LABEL_15;
      case 5:
        ZinIrWeight::SliceWeightData<ZinIrScratchBuffer<e4m3_t>,ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>(a1, (uint64_t *)a2, a3, &v36);
        goto LABEL_15;
      case 6:
        ZinIrWeight::SliceWeightData<ZinIrScratchBuffer<float>,ZinIrScratchBufferBackedConstData_specialization<float>>(a1, (uint64_t *)a2, a3, &v36);
LABEL_15:
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
        v26 = v36;
        v35 = (std::__shared_weak_count *)(v26 >> 64);
        v25 = v26;
        if ((_QWORD)v36)
        {
          v27 = operator new();
          v28 = v27;
          v36 = __PAIR128__((unint64_t)v24, v25);
          if (v24)
          {
            p_shared_owners = (unint64_t *)&v24->__shared_owners_;
            do
              v30 = __ldxr(p_shared_owners);
            while (__stxr(v30 + 1, p_shared_owners));
          }
          ZinIrWeight::ZinIrWeight(v27, (uint64_t *)&v36, (uint64_t **)(a1 + 280), *(_DWORD *)(a1 + 8), (int64x2_t *)(a2 + 40), 1, 1262703187, 0);
          *a4 = v28;
          if (v24)
          {
            v31 = (unint64_t *)&v24->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          v24 = v35;
          if (!v35)
            return;
        }
        else
        {
          *a4 = 0;
          if (!v24)
            return;
        }
        v33 = (unint64_t *)&v24->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        return;
      default:
        if (v5 == 31)
          break;
LABEL_9:
        v16 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v16)
          ZinIrWeight::SliceWeight(v16, v17, v18, v19, v20, v21, v22, v23);
        goto LABEL_4;
    }
  }
  v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v6)
    ZinIrWeight::SliceWeight(v6, v7, v8, v9, v10, v11, v12, v13);
LABEL_4:
  *a4 = 0;
}

void sub_206E2C0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::SliceWeightData<ZinIrScratchBuffer<float>,ZinIrScratchBufferBackedConstData_specialization<float>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  _DWORD *v31;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _BYTE v37[8];
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;

  v7 = a2[8];
  v8 = a2[6] * a2[5] * a2[7];
  v41 = 0u;
  v40 = 0u;
  details::ZinIrMappedData_Impl<float>::ZinIrMappedData_Impl((uint64_t)v37, v8 * v7 * a2[9]);
  v9 = a2[6];
  v11 = a2[7];
  v10 = a2[8];
  v12 = a2[9];
  v14 = *a3;
  v13 = a3[1];
  v15 = *a3 * a2[5];
  v17 = a3[2];
  v16 = a3[3];
  v18 = a3[4];
  v19 = *a2;
  v39 = v19;
  v34 = v15;
  if (v19 < v15)
  {
    v20 = 0;
    v35 = v13 * v9;
    v21 = v17 * v11;
    v22 = v16 * v10;
    v23 = v18 * v12;
    do
    {
      v24 = a2[1];
      *(_QWORD *)&v40 = v24;
      if (v24 < v35)
      {
        do
        {
          v25 = a2[2];
          *((_QWORD *)&v40 + 1) = v25;
          if (v25 < v21)
          {
            do
            {
              v26 = a2[3];
              *(_QWORD *)&v41 = v26;
              if (v26 < v22)
              {
                do
                {
                  *((_QWORD *)&v41 + 1) = a2[4];
                  if (*((uint64_t *)&v41 + 1) < v23)
                  {
                    v27 = 4 * v20;
                    do
                    {
                      ZinIrWeightBase::GetAt<float>(a1);
                      v29 = v28;
                      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                               + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      v31 = (_DWORD *)(v38 + v27);
                      if (!v30)
                        v31 = v37;
                      ++v20;
                      *v31 = v29;
                      *((_QWORD *)&v41 + 1) += a3[4];
                      v27 += 4;
                    }
                    while (*((uint64_t *)&v41 + 1) < v23);
                    v16 = a3[3];
                    v26 = v41;
                  }
                  v26 += v16;
                  *(_QWORD *)&v41 = v26;
                }
                while (v26 < v22);
                v17 = a3[2];
                v25 = *((_QWORD *)&v40 + 1);
              }
              v25 += v17;
              *((_QWORD *)&v40 + 1) = v25;
            }
            while (v25 < v21);
            v13 = a3[1];
            v24 = v40;
          }
          v24 += v13;
          *(_QWORD *)&v40 = v24;
        }
        while (v24 < v35);
        v14 = *a3;
        v19 = v39;
      }
      v19 += v14;
      v39 = v19;
    }
    while (v19 < v34);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<float>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<float>>,ZinIrScratchBuffer<float>,void>((uint64_t)v37, &v36);
  *a4 = v36;
  return details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)v37);
}

void sub_206E2C2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::SliceWeightData<ZinIrScratchBuffer<half>,ZinIrScratchBufferBackedConstData_specialization<half>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  __int16 v29;
  int v30;
  _WORD *v31;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _BYTE v37[8];
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;

  v7 = a2[8];
  v8 = a2[6] * a2[5] * a2[7];
  v41 = 0u;
  v40 = 0u;
  details::ZinIrMappedData_Impl<half>::ZinIrMappedData_Impl((uint64_t)v37, v8 * v7 * a2[9]);
  v9 = a2[6];
  v11 = a2[7];
  v10 = a2[8];
  v12 = a2[9];
  v14 = *a3;
  v13 = a3[1];
  v15 = *a3 * a2[5];
  v17 = a3[2];
  v16 = a3[3];
  v18 = a3[4];
  v19 = *a2;
  v39 = v19;
  v34 = v15;
  if (v19 < v15)
  {
    v20 = 0;
    v35 = v13 * v9;
    v21 = v17 * v11;
    v22 = v16 * v10;
    v23 = v18 * v12;
    do
    {
      v24 = a2[1];
      *(_QWORD *)&v40 = v24;
      if (v24 < v35)
      {
        do
        {
          v25 = a2[2];
          *((_QWORD *)&v40 + 1) = v25;
          if (v25 < v21)
          {
            do
            {
              v26 = a2[3];
              *(_QWORD *)&v41 = v26;
              if (v26 < v22)
              {
                do
                {
                  *((_QWORD *)&v41 + 1) = a2[4];
                  if (*((uint64_t *)&v41 + 1) < v23)
                  {
                    v27 = 2 * v20;
                    do
                    {
                      ZinIrWeightBase::GetAt<half>(a1);
                      v29 = v28;
                      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                               + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      v31 = (_WORD *)(v38 + v27);
                      if (!v30)
                        v31 = v37;
                      ++v20;
                      *v31 = v29;
                      *((_QWORD *)&v41 + 1) += a3[4];
                      v27 += 2;
                    }
                    while (*((uint64_t *)&v41 + 1) < v23);
                    v16 = a3[3];
                    v26 = v41;
                  }
                  v26 += v16;
                  *(_QWORD *)&v41 = v26;
                }
                while (v26 < v22);
                v17 = a3[2];
                v25 = *((_QWORD *)&v40 + 1);
              }
              v25 += v17;
              *((_QWORD *)&v40 + 1) = v25;
            }
            while (v25 < v21);
            v13 = a3[1];
            v24 = v40;
          }
          v24 += v13;
          *(_QWORD *)&v40 = v24;
        }
        while (v24 < v35);
        v14 = *a3;
        v19 = v39;
      }
      v19 += v14;
      v39 = v19;
    }
    while (v19 < v34);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<half>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<half>>,ZinIrScratchBuffer<half>,void>((uint64_t)v37, &v36);
  *a4 = v36;
  return details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)v37);
}

void sub_206E2C514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::SliceWeightData<ZinIrScratchBuffer<e4m3_t>,ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  _BYTE *v29;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  _BYTE v35[8];
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;

  v7 = a2[8];
  v8 = a2[6] * a2[5] * a2[7];
  v39 = 0u;
  v38 = 0u;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v35, v8 * v7 * a2[9]);
  v9 = a2[6];
  v11 = a2[7];
  v10 = a2[8];
  v12 = a2[9];
  v14 = *a3;
  v13 = a3[1];
  v15 = *a3 * a2[5];
  v17 = a3[2];
  v16 = a3[3];
  v18 = a3[4];
  v19 = *a2;
  v37 = v19;
  v32 = v15;
  if (v19 < v15)
  {
    v20 = 0;
    v33 = v13 * v9;
    v21 = v17 * v11;
    v22 = v16 * v10;
    v23 = v18 * v12;
    do
    {
      v24 = a2[1];
      *(_QWORD *)&v38 = v24;
      if (v24 < v33)
      {
        do
        {
          v25 = a2[2];
          *((_QWORD *)&v38 + 1) = v25;
          if (v25 < v21)
          {
            do
            {
              v26 = a2[3];
              *(_QWORD *)&v39 = v26;
              if (v26 < v22)
              {
                do
                {
                  *((_QWORD *)&v39 + 1) = a2[4];
                  if (*((uint64_t *)&v39 + 1) < v23)
                  {
                    do
                    {
                      v27 = ZinIrWeightBase::GetAt<e4m3_t>(a1);
                      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                               + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      v29 = (_BYTE *)(v36 + v20);
                      if (!v28)
                        v29 = v35;
                      ++v20;
                      *v29 = v27;
                      *((_QWORD *)&v39 + 1) += a3[4];
                    }
                    while (*((uint64_t *)&v39 + 1) < v23);
                    v16 = a3[3];
                    v26 = v39;
                  }
                  v26 += v16;
                  *(_QWORD *)&v39 = v26;
                }
                while (v26 < v22);
                v17 = a3[2];
                v25 = *((_QWORD *)&v38 + 1);
              }
              v25 += v17;
              *((_QWORD *)&v38 + 1) = v25;
            }
            while (v25 < v21);
            v13 = a3[1];
            v24 = v38;
          }
          v24 += v13;
          *(_QWORD *)&v38 = v24;
        }
        while (v24 < v33);
        v14 = *a3;
        v19 = v37;
      }
      v19 += v14;
      v37 = v19;
    }
    while (v19 < v32);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>,ZinIrScratchBuffer<e4m3_t>,void>((uint64_t)v35, &v34);
  *a4 = v34;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v35);
}

void sub_206E2C720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::SliceWeightData<ZinIrScratchBuffer<signed char>,ZinIrScratchBufferBackedConstData_specialization<signed char>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  _BYTE *v29;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  _BYTE v35[8];
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;

  v7 = a2[8];
  v8 = a2[6] * a2[5] * a2[7];
  v39 = 0u;
  v38 = 0u;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v35, v8 * v7 * a2[9]);
  v9 = a2[6];
  v11 = a2[7];
  v10 = a2[8];
  v12 = a2[9];
  v14 = *a3;
  v13 = a3[1];
  v15 = *a3 * a2[5];
  v17 = a3[2];
  v16 = a3[3];
  v18 = a3[4];
  v19 = *a2;
  v37 = v19;
  v32 = v15;
  if (v19 < v15)
  {
    v20 = 0;
    v33 = v13 * v9;
    v21 = v17 * v11;
    v22 = v16 * v10;
    v23 = v18 * v12;
    do
    {
      v24 = a2[1];
      *(_QWORD *)&v38 = v24;
      if (v24 < v33)
      {
        do
        {
          v25 = a2[2];
          *((_QWORD *)&v38 + 1) = v25;
          if (v25 < v21)
          {
            do
            {
              v26 = a2[3];
              *(_QWORD *)&v39 = v26;
              if (v26 < v22)
              {
                do
                {
                  *((_QWORD *)&v39 + 1) = a2[4];
                  if (*((uint64_t *)&v39 + 1) < v23)
                  {
                    do
                    {
                      v27 = ZinIrWeightBase::GetAt<signed char>(a1);
                      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                               + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      v29 = (_BYTE *)(v36 + v20);
                      if (!v28)
                        v29 = v35;
                      ++v20;
                      *v29 = v27;
                      *((_QWORD *)&v39 + 1) += a3[4];
                    }
                    while (*((uint64_t *)&v39 + 1) < v23);
                    v16 = a3[3];
                    v26 = v39;
                  }
                  v26 += v16;
                  *(_QWORD *)&v39 = v26;
                }
                while (v26 < v22);
                v17 = a3[2];
                v25 = *((_QWORD *)&v38 + 1);
              }
              v25 += v17;
              *((_QWORD *)&v38 + 1) = v25;
            }
            while (v25 < v21);
            v13 = a3[1];
            v24 = v38;
          }
          v24 += v13;
          *(_QWORD *)&v38 = v24;
        }
        while (v24 < v33);
        v14 = *a3;
        v19 = v37;
      }
      v19 += v14;
      v37 = v19;
    }
    while (v19 < v32);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<signed char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<signed char>>,ZinIrScratchBuffer<signed char>,void>((uint64_t)v35, &v34);
  *a4 = v34;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v35);
}

void sub_206E2C92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::SliceWeightData<ZinIrScratchBuffer<unsigned char>,ZinIrScratchBufferBackedConstData_specialization<unsigned char>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  _BYTE *v29;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  _BYTE v35[8];
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;

  v7 = a2[8];
  v8 = a2[6] * a2[5] * a2[7];
  v39 = 0u;
  v38 = 0u;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v35, v8 * v7 * a2[9]);
  v9 = a2[6];
  v11 = a2[7];
  v10 = a2[8];
  v12 = a2[9];
  v14 = *a3;
  v13 = a3[1];
  v15 = *a3 * a2[5];
  v17 = a3[2];
  v16 = a3[3];
  v18 = a3[4];
  v19 = *a2;
  v37 = v19;
  v32 = v15;
  if (v19 < v15)
  {
    v20 = 0;
    v33 = v13 * v9;
    v21 = v17 * v11;
    v22 = v16 * v10;
    v23 = v18 * v12;
    do
    {
      v24 = a2[1];
      *(_QWORD *)&v38 = v24;
      if (v24 < v33)
      {
        do
        {
          v25 = a2[2];
          *((_QWORD *)&v38 + 1) = v25;
          if (v25 < v21)
          {
            do
            {
              v26 = a2[3];
              *(_QWORD *)&v39 = v26;
              if (v26 < v22)
              {
                do
                {
                  *((_QWORD *)&v39 + 1) = a2[4];
                  if (*((uint64_t *)&v39 + 1) < v23)
                  {
                    do
                    {
                      v27 = ZinIrWeightBase::GetAt<unsigned char>(a1);
                      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                               + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      v29 = (_BYTE *)(v36 + v20);
                      if (!v28)
                        v29 = v35;
                      ++v20;
                      *v29 = v27;
                      *((_QWORD *)&v39 + 1) += a3[4];
                    }
                    while (*((uint64_t *)&v39 + 1) < v23);
                    v16 = a3[3];
                    v26 = v39;
                  }
                  v26 += v16;
                  *(_QWORD *)&v39 = v26;
                }
                while (v26 < v22);
                v17 = a3[2];
                v25 = *((_QWORD *)&v38 + 1);
              }
              v25 += v17;
              *((_QWORD *)&v38 + 1) = v25;
            }
            while (v25 < v21);
            v13 = a3[1];
            v24 = v38;
          }
          v24 += v13;
          *(_QWORD *)&v38 = v24;
        }
        while (v24 < v33);
        v14 = *a3;
        v19 = v37;
      }
      v19 += v14;
      v37 = v19;
    }
    while (v19 < v32);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<unsigned char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<unsigned char>>,ZinIrScratchBuffer<unsigned char>,void>((uint64_t)v35, &v34);
  *a4 = v34;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v35);
}

void sub_206E2CB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::Transform(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _OWORD *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v30;
  int64x2_t v31;
  _QWORD v32[2];
  uint64_t v33;
  int64x2_t *v34;
  int64x2_t v35;
  uint64_t v36;
  _QWORD *v37;

  v33 = 0;
  v6 = *(_QWORD **)a2;
  v7 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = a1;
    do
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t *))(*(_QWORD *)*v6 + 32))(*v6, v8, &v33);
      v8 = v33;
      v6 += 2;
    }
    while (v6 != v7);
  }
  v33 = 0;
  v9 = *a3;
  *a3 = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  if (*(_BYTE *)(a1 + 152))
  {
    v31 = 0uLL;
    v32[0] = 0;
    v10 = *(_QWORD **)a2;
    v11 = *(_QWORD **)(a2 + 8);
    if (*(_QWORD **)a2 != v11)
    {
      v12 = 0;
      do
      {
        v13 = *(_OWORD *)v10;
        if (v10[1])
        {
          v14 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          v12 = (_OWORD *)v31.i64[1];
        }
        if ((unint64_t)v12 >= v32[0])
        {
          v30 = v13;
          v16 = ((uint64_t)v12 - v31.i64[0]) >> 4;
          if ((unint64_t)(v16 + 1) >> 60)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v17 = (v32[0] - v31.i64[0]) >> 3;
          if (v17 <= v16 + 1)
            v17 = v16 + 1;
          if (v32[0] - v31.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
            v18 = 0xFFFFFFFFFFFFFFFLL;
          else
            v18 = v17;
          v37 = v32;
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)v32, v18);
          v21 = &v19[16 * v16];
          *(_OWORD *)v21 = v30;
          v22 = (_QWORD *)v31.i64[1];
          v23 = (_QWORD *)v31.i64[0];
          if (v31.i64[1] == v31.i64[0])
          {
            v26 = vdupq_n_s64(v31.u64[1]);
            v24 = &v19[16 * v16];
          }
          else
          {
            v24 = &v19[16 * v16];
            do
            {
              v25 = *((_OWORD *)v22 - 1);
              v22 -= 2;
              *((_OWORD *)v24 - 1) = v25;
              v24 -= 16;
              *v22 = 0;
              v22[1] = 0;
            }
            while (v22 != v23);
            v26 = v31;
          }
          v12 = v21 + 16;
          v31.i64[0] = (uint64_t)v24;
          v31.i64[1] = (uint64_t)(v21 + 16);
          v35 = v26;
          v27 = v32[0];
          v32[0] = &v19[16 * v20];
          v36 = v27;
          v34 = (int64x2_t *)v26.i64[0];
          std::__split_buffer<std::shared_ptr<ZinIrConstData>>::~__split_buffer((uint64_t)&v34);
        }
        else
        {
          *v12++ = v13;
        }
        v31.i64[1] = (uint64_t)v12;
        v10 += 2;
      }
      while (v10 != v11);
    }
    ZinIrWeightBase::SetupMutableHistory(a1, *a3, (__int128 **)&v31);
    v34 = &v31;
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  }
  v28 = v33;
  v33 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
  return 0;
}

void sub_206E2CD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18;

  a11 = (void **)&a13;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&a11);
  v18 = a17;
  a17 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  _Unwind_Resume(a1);
}

void ZinIrWeight::MergeResizeNNConvWeight(uint64_t a1@<X0>, int *a2@<X1>, uint64_t *a3@<X8>)
{
  int *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  float v27;
  ZinIrConstData *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56[3];
  void *v57[3];
  int64x2_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void **v62[4];

  v3 = a2;
  v6 = *a2;
  v5 = a2[1];
  v7 = a2[2];
  v41 = *(_QWORD *)(a1 + 64);
  v42 = *(_QWORD *)(a1 + 56);
  v38 = v6 + *(_QWORD *)(a1 + 80) - 1;
  v39 = v5 + *(_QWORD *)(a1 + 72) - 1;
  v40 = v7 + *(_QWORD *)(a1 + 88) - 1;
  v58.i32[0] = 0;
  std::vector<float>::vector(v57, v41 * v42 * v39 * v38 * v40, &v58);
  if ((int)v7 >= 1)
  {
    v44 = 0;
    v8 = 0;
    v9 = v6;
    v10 = v5;
    v33 = v7;
    v34 = v5;
    v35 = v6;
    v36 = v3;
    do
    {
      v43 = v8;
      if (v10 >= 1)
      {
        v45 = 0;
        do
        {
          if (v9 >= 1)
          {
            v46 = 0;
            do
            {
              v11 = *(_QWORD *)v3;
              v12 = v3[2];
              if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)))
                ZinAssertImpl("invalid weight");
              v48 = *(_QWORD *)(a1 + 56);
              if (v48 >= 1)
              {
                v13 = 0;
                v15 = *(_QWORD *)(a1 + 80);
                v14 = *(_QWORD *)(a1 + 88);
                v54 = *(_QWORD *)(a1 + 72);
                v16 = v54 + (v11 >> 32) - 1;
                v17 = v15 + (int)v11 - 1;
                v18 = v12 + v14 - 1;
                v19 = 4 * v18;
                v20 = v16 * v18 * v17;
                v51 = *(_QWORD *)(a1 + 64);
                v47 = 4 * v20 * v51;
                v49 = v44 + 4 * v18 * (v46 + v45 * v17);
                v50 = 4 * v20;
                v53 = 4 * v18 * v17;
                do
                {
                  if (v51 >= 1)
                  {
                    v21 = 0;
                    v52 = v49;
                    do
                    {
                      if (v54 >= 1)
                      {
                        v22 = 0;
                        v55 = v52;
                        do
                        {
                          if (v15 >= 1)
                          {
                            v23 = 0;
                            v24 = v55;
                            do
                            {
                              if (v14 >= 1)
                              {
                                for (i = 0; i != v14; ++i)
                                {
                                  v58.i64[0] = v13;
                                  v58.i64[1] = v21;
                                  v59 = v22;
                                  v60 = v23;
                                  v61 = i;
                                  v26 = (**(uint64_t (***)(uint64_t, int64x2_t *))a1)(a1, &v58);
                                  ZinIrWeight::GetValueAsFloat((ZinIrWeight *)a1, v26);
                                  *(float *)((char *)v57[0] + 4 * i + v24) = v27
                                                                           + *(float *)((char *)v57[0] + 4 * i + v24);
                                }
                              }
                              ++v23;
                              v24 += v19;
                            }
                            while (v23 != v15);
                          }
                          ++v22;
                          v55 += v53;
                        }
                        while (v22 != v54);
                      }
                      ++v21;
                      v52 += v50;
                    }
                    while (v21 != v51);
                  }
                  ++v13;
                  v49 += v47;
                }
                while (v13 != v48);
              }
              v9 = v35;
              v3 = v36;
              ++v46;
            }
            while (v46 != v35);
          }
          v10 = v34;
          ++v45;
        }
        while (v45 != v34);
      }
      v8 = v43 + 1;
      v44 += 4;
    }
    while (v43 + 1 != v33);
  }
  v58.i64[0] = v42;
  v58.i64[1] = v41;
  v59 = v39;
  v60 = v38;
  v61 = v40;
  v28 = (ZinIrConstData *)operator new();
  ZinIrConstData_specialization<float>::ZinIrConstData_specialization(v28, (uint64_t)v57);
  memset(v56, 0, sizeof(v56));
  v29 = operator new();
  v62[0] = (void **)v28;
  v30 = (std::__shared_weak_count *)operator new();
  v30->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
  v30->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05CB80;
  v30->__shared_weak_owners_ = 0;
  v30[1].__vftable = (std::__shared_weak_count_vtbl *)v28;
  v62[1] = (void **)&v30->__vftable;
  ZinIrWeight::ZinIrWeight(v29, (uint64_t *)v62, v56, *(_DWORD *)(a1 + 8), &v58, 1, 1262703187, 0);
  *a3 = v29;
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  v62[0] = (void **)v56;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v62);
  if (v57[0])
  {
    v57[1] = v57[0];
    operator delete(v57[0]);
  }
}

void sub_206E2D1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;
  void *v35;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v33 - 112);
  MEMORY[0x20BD002F8](v32, 0x10B3C400FFB447ELL);
  *(_QWORD *)(v33 - 96) = &a32;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  v35 = *(void **)(v33 - 176);
  if (v35)
  {
    *(_QWORD *)(v33 - 168) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::GetElementIndex(_QWORD *a1, _QWORD *a2)
{
  return a1[12] * ((*a2 + a1[2]) / a1[38])
       + a1[13] * (a2[1] + a1[3])
       + a1[14] * (a2[2] + a1[4])
       + a1[15] * (a2[3] + a1[5])
       + a1[16] * (a2[4] + a1[6]);
}

void ZinIrWeightDataBitStream4::reserve(ZinIrWeightDataBitStream4 *this, uint64_t a2)
{
  std::vector<unsigned char>::reserve((unint64_t *)this + 2, (unint64_t)(4 * a2 + 7) >> 3);
}

_QWORD *std::vector<std::shared_ptr<ZinIrConstData>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<unsigned long,unsigned long>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_206E2D3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<e4m3_t>::vector(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    std::vector<signed char>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_206E2D420(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__equal_to &>(float *a1, float *a2)
{
  float *result;
  float *v4;
  float v5;
  float v6;
  float *v7;
  float v8;

  result = a2;
  if (a1 != a2)
  {
    v4 = a1 + 1;
    do
    {
      if (v4 == a2)
        return a2;
      v5 = *(v4 - 1);
      v6 = *v4++;
    }
    while (v5 != v6);
    v7 = v4 - 2;
    while (v4 != a2)
    {
      v8 = *v4;
      if (v5 != *v4)
      {
        v7[1] = v8;
        ++v7;
        v5 = v8;
      }
      ++v4;
    }
    return v7 + 1;
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStreamBase,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xA0uLL);
  result = std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStreamBase,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206E2D4E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStreamBase,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05BCA0;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStreamBase,ZinIrConstData_specialization<unsigned char>*>((ZinIrConstData *)(a1 + 3), a2);
  return a1;
}

void sub_206E2D530(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

ZinIrConstData *std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStreamBase,ZinIrConstData_specialization<unsigned char>*>(ZinIrConstData *a1, uint64_t a2)
{
  void *__p;
  void *v5;
  uint64_t v6;

  __p = 0;
  v5 = 0;
  v6 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrConstData_specialization<unsigned char>::ZinIrConstData_specialization(a1, (uint64_t)&__p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E2D5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrWeightDataBitStream1::push_back(ZinIrWeightDataBitStream1 *this, char a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE **v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  _BYTE *v15;
  char *v16;
  _BYTE *v17;
  char v18;

  v3 = a2 & 1;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v4 + 1;
  v5 = v4 & 7;
  if (v5)
  {
    *(_BYTE *)(*((_QWORD *)this + 3) - 1) |= v3 << v5;
  }
  else
  {
    v7 = (_BYTE *)*((_QWORD *)this + 3);
    v6 = *((_QWORD *)this + 4);
    if ((unint64_t)v7 >= v6)
    {
      v9 = (_BYTE **)((char *)this + 16);
      v10 = *((_QWORD *)this + 2);
      v11 = &v7[-v10];
      v12 = (uint64_t)&v7[-v10 + 1];
      if (v12 < 0)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v13 = v6 - v10;
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
        v15 = operator new(v14);
      else
        v15 = 0;
      v16 = &v15[v14];
      v11[(_QWORD)v15] = v3;
      v8 = (uint64_t)&v11[(_QWORD)v15 + 1];
      if (v7 == (_BYTE *)v10)
      {
        v15 = &v11[(_QWORD)v15];
      }
      else
      {
        v17 = &v7[~v10];
        do
        {
          v18 = *--v7;
          (v17--)[(_QWORD)v15] = v18;
        }
        while (v7 != (_BYTE *)v10);
        v7 = *v9;
      }
      *((_QWORD *)this + 2) = v15;
      *((_QWORD *)this + 3) = v8;
      *((_QWORD *)this + 4) = v16;
      if (v7)
        operator delete(v7);
    }
    else
    {
      *v7 = v3;
      v8 = (uint64_t)(v7 + 1);
    }
    *((_QWORD *)this + 3) = v8;
  }
}

void ZinIrWeightDataBitStream1::reserve(ZinIrWeightDataBitStream1 *this, uint64_t a2)
{
  std::vector<unsigned char>::reserve((unint64_t *)this + 2, (unint64_t)(a2 + 7) >> 3);
}

void ZinIrWeightDataBitStream2::push_back(ZinIrWeightDataBitStream2 *this, char a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE **v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  _BYTE *v15;
  char *v16;
  _BYTE *v17;
  char v18;

  v3 = a2 & 3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v4 + 1;
  v5 = v4 & 3;
  if (v5)
  {
    *(_BYTE *)(*((_QWORD *)this + 3) - 1) |= v3 << (2 * v5);
  }
  else
  {
    v7 = (_BYTE *)*((_QWORD *)this + 3);
    v6 = *((_QWORD *)this + 4);
    if ((unint64_t)v7 >= v6)
    {
      v9 = (_BYTE **)((char *)this + 16);
      v10 = *((_QWORD *)this + 2);
      v11 = &v7[-v10];
      v12 = (uint64_t)&v7[-v10 + 1];
      if (v12 < 0)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v13 = v6 - v10;
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
        v15 = operator new(v14);
      else
        v15 = 0;
      v16 = &v15[v14];
      v11[(_QWORD)v15] = v3;
      v8 = (uint64_t)&v11[(_QWORD)v15 + 1];
      if (v7 == (_BYTE *)v10)
      {
        v15 = &v11[(_QWORD)v15];
      }
      else
      {
        v17 = &v7[~v10];
        do
        {
          v18 = *--v7;
          (v17--)[(_QWORD)v15] = v18;
        }
        while (v7 != (_BYTE *)v10);
        v7 = *v9;
      }
      *((_QWORD *)this + 2) = v15;
      *((_QWORD *)this + 3) = v8;
      *((_QWORD *)this + 4) = v16;
      if (v7)
        operator delete(v7);
    }
    else
    {
      *v7 = v3;
      v8 = (uint64_t)(v7 + 1);
    }
    *((_QWORD *)this + 3) = v8;
  }
}

void ZinIrWeightDataBitStream2::reserve(ZinIrWeightDataBitStream2 *this, uint64_t a2)
{
  std::vector<unsigned char>::reserve((unint64_t *)this + 2, (unint64_t)(2 * a2 + 7) >> 3);
}

void ZinIrWeightDataBitStream3::push_back(ZinIrWeightDataBitStream3 *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v1 + 1;
  __asm { BR              X10 }
}

void sub_206E2D878()
{
  _QWORD *v0;
  char v1;
  unint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  _BYTE *v10;
  char *v11;
  _BYTE *v12;
  char v13;

  v3 = (_BYTE *)v0[3];
  v2 = v0[4];
  if ((unint64_t)v3 >= v2)
  {
    v5 = v0[2];
    v6 = &v3[-v5];
    v7 = (uint64_t)&v3[-v5 + 1];
    if (v7 < 0)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v8 = v2 - v5;
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
      v10 = operator new(v9);
    else
      v10 = 0;
    v11 = &v10[v9];
    v6[(_QWORD)v10] = v1;
    v4 = (uint64_t)&v6[(_QWORD)v10 + 1];
    if (v3 == (_BYTE *)v5)
    {
      v10 = &v6[(_QWORD)v10];
    }
    else
    {
      v12 = &v3[~v5];
      do
      {
        v13 = *--v3;
        (v12--)[(_QWORD)v10] = v13;
      }
      while (v3 != (_BYTE *)v5);
      v3 = (_BYTE *)v0[2];
    }
    v0[2] = v10;
    v0[3] = v4;
    v0[4] = v11;
    if (v3)
      operator delete(v3);
  }
  else
  {
    *v3 = v1;
    v4 = (uint64_t)(v3 + 1);
  }
  v0[3] = v4;
}

void ZinIrWeightDataBitStream3::reserve(ZinIrWeightDataBitStream3 *this, uint64_t a2)
{
  std::vector<unsigned char>::reserve((unint64_t *)this + 2, (unint64_t)(3 * a2 + 7) >> 3);
}

void ZinIrWeightDataBitStream6::push_back(ZinIrWeightDataBitStream6 *this, char a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unsigned int v9;
  unint64_t v10;
  _BYTE **v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  char *v31;
  _BYTE *v32;
  char v33;
  _BYTE *v34;
  char v35;
  _BYTE *v36;
  char v37;

  v3 = a2 & 0x3F;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v4 + 1;
  v5 = v4 & 3;
  if (v5 == 2)
  {
    *(_BYTE *)(*((_QWORD *)this + 3) - 1) |= 16 * a2;
    v9 = v3 >> 4;
    v7 = (_BYTE *)*((_QWORD *)this + 3);
    v10 = *((_QWORD *)this + 4);
    if ((unint64_t)v7 >= v10)
    {
      v11 = (_BYTE **)((char *)this + 16);
      v12 = *((_QWORD *)this + 2);
      v13 = &v7[-v12];
      v14 = (uint64_t)&v7[-v12 + 1];
      if (v14 >= 0)
      {
        v15 = v10 - v12;
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
          v16 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
          v17 = operator new(v16);
        else
          v17 = 0;
        v30 = &v13[(_QWORD)v17];
        v31 = (char *)v17 + v16;
        v13[(_QWORD)v17] = v9;
        v19 = (uint64_t)&v13[(_QWORD)v17 + 1];
        if (v7 != (_BYTE *)v12)
        {
          v34 = &v7[~v12];
          do
          {
            v35 = *--v7;
            (v34--)[(_QWORD)v17] = v35;
          }
          while (v7 != (_BYTE *)v12);
          goto LABEL_49;
        }
        goto LABEL_50;
      }
      goto LABEL_54;
    }
    goto LABEL_16;
  }
  if (v5 == 1)
  {
    *(_BYTE *)(*((_QWORD *)this + 3) - 1) |= a2 << 6;
    v9 = v3 >> 2;
    v7 = (_BYTE *)*((_QWORD *)this + 3);
    v18 = *((_QWORD *)this + 4);
    if ((unint64_t)v7 >= v18)
    {
      v11 = (_BYTE **)((char *)this + 16);
      v25 = *((_QWORD *)this + 2);
      v26 = &v7[-v25];
      v27 = (uint64_t)&v7[-v25 + 1];
      if (v27 >= 0)
      {
        v28 = v18 - v25;
        if (2 * v28 > v27)
          v27 = 2 * v28;
        if (v28 >= 0x3FFFFFFFFFFFFFFFLL)
          v29 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
          v17 = operator new(v29);
        else
          v17 = 0;
        v30 = &v26[(_QWORD)v17];
        v31 = (char *)v17 + v29;
        v26[(_QWORD)v17] = v9;
        v19 = (uint64_t)&v26[(_QWORD)v17 + 1];
        if (v7 != (_BYTE *)v25)
        {
          v32 = &v7[~v25];
          do
          {
            v33 = *--v7;
            (v32--)[(_QWORD)v17] = v33;
          }
          while (v7 != (_BYTE *)v25);
          goto LABEL_49;
        }
LABEL_50:
        v17 = v30;
LABEL_51:
        *((_QWORD *)this + 2) = v17;
        *((_QWORD *)this + 3) = v19;
        *((_QWORD *)this + 4) = v31;
        if (v7)
          operator delete(v7);
        goto LABEL_53;
      }
LABEL_54:
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
LABEL_16:
    *v7 = v9;
    v8 = v7 + 1;
    goto LABEL_17;
  }
  if (v5)
  {
    *(_BYTE *)(*((_QWORD *)this + 3) - 1) |= 4 * (_BYTE)v3;
    return;
  }
  v7 = (_BYTE *)*((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 4);
  if ((unint64_t)v7 >= v6)
  {
    v11 = (_BYTE **)((char *)this + 16);
    v20 = *((_QWORD *)this + 2);
    v21 = &v7[-v20];
    v22 = (uint64_t)&v7[-v20 + 1];
    if (v22 >= 0)
    {
      v23 = v6 - v20;
      if (2 * v23 > v22)
        v22 = 2 * v23;
      if (v23 >= 0x3FFFFFFFFFFFFFFFLL)
        v24 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
        v17 = operator new(v24);
      else
        v17 = 0;
      v30 = &v21[(_QWORD)v17];
      v31 = (char *)v17 + v24;
      v21[(_QWORD)v17] = v3;
      v19 = (uint64_t)&v21[(_QWORD)v17 + 1];
      if (v7 != (_BYTE *)v20)
      {
        v36 = &v7[~v20];
        do
        {
          v37 = *--v7;
          (v36--)[(_QWORD)v17] = v37;
        }
        while (v7 != (_BYTE *)v20);
LABEL_49:
        v7 = *v11;
        goto LABEL_51;
      }
      goto LABEL_50;
    }
    goto LABEL_54;
  }
  *v7 = v3;
  v8 = v7 + 1;
LABEL_17:
  v19 = (uint64_t)v8;
LABEL_53:
  *((_QWORD *)this + 3) = v19;
}

void ZinIrWeightDataBitStream6::reserve(ZinIrWeightDataBitStream6 *this, uint64_t a2)
{
  std::vector<unsigned char>::reserve((unint64_t *)this + 2, (unint64_t)(6 * a2 + 7) >> 3);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream1,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xA0uLL);
  result = std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206E2DDD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05BCA0;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStream1,ZinIrConstData_specialization<unsigned char>*>((ZinIrConstData *)(a1 + 3), a2);
  return a1;
}

void sub_206E2DE20(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

ZinIrConstData *std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStream1,ZinIrConstData_specialization<unsigned char>*>(ZinIrConstData *a1, uint64_t a2)
{
  void *__p;
  void *v5;
  uint64_t v6;

  __p = 0;
  v5 = 0;
  v6 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrConstData_specialization<unsigned char>::ZinIrConstData_specialization(a1, (uint64_t)&__p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E2DE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream2,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xA0uLL);
  result = std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206E2DEF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05BCA0;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStream2,ZinIrConstData_specialization<unsigned char>*>((ZinIrConstData *)(a1 + 3), a2);
  return a1;
}

void sub_206E2DF40(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

ZinIrConstData *std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStream2,ZinIrConstData_specialization<unsigned char>*>(ZinIrConstData *a1, uint64_t a2)
{
  void *__p;
  void *v5;
  uint64_t v6;

  __p = 0;
  v5 = 0;
  v6 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrConstData_specialization<unsigned char>::ZinIrConstData_specialization(a1, (uint64_t)&__p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E2DFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream3,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xA0uLL);
  result = std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206E2E014(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05BCA0;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStream3,ZinIrConstData_specialization<unsigned char>*>((ZinIrConstData *)(a1 + 3), a2);
  return a1;
}

void sub_206E2E060(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

ZinIrConstData *std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStream3,ZinIrConstData_specialization<unsigned char>*>(ZinIrConstData *a1, uint64_t a2)
{
  void *__p;
  void *v5;
  uint64_t v6;

  __p = 0;
  v5 = 0;
  v6 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrConstData_specialization<unsigned char>::ZinIrConstData_specialization(a1, (uint64_t)&__p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E2E0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream6,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xA0uLL);
  result = std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206E2E134(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05BCA0;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStream6,ZinIrConstData_specialization<unsigned char>*>((ZinIrConstData *)(a1 + 3), a2);
  return a1;
}

void sub_206E2E180(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

ZinIrConstData *std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStream6,ZinIrConstData_specialization<unsigned char>*>(ZinIrConstData *a1, uint64_t a2)
{
  void *__p;
  void *v5;
  uint64_t v6;

  __p = 0;
  v5 = 0;
  v6 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrConstData_specialization<unsigned char>::ZinIrConstData_specialization(a1, (uint64_t)&__p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E2E1F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double ZinIrWeight::ShuffleWeightData<ZinIrScratchBuffer<float>,ZinIrScratchBufferBackedConstData_specialization<float>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  _DWORD *v15;
  double result;
  double v17[3];

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)) && *(_QWORD *)(a1 + 304) >= 2uLL)
    ZinAssertImpl("Vector palettization is not supported for this transform.");
  if (*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280) >= 0x11uLL)
    ZinAssertImpl("Shuffling weight data is not supported for per-channel palettized kernels yet");
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_))
    v8 = *(_QWORD **)(a2 + 48);
  else
    v8 = (_QWORD *)a2;
  v9 = ZinIrScratchBuffer<ZinKernelPosition>::end(a2);
  if (v8 != (_QWORD *)v9)
  {
    v10 = (_QWORD *)v9;
    v11 = 0;
    do
    {
      v12 = 0;
      if (*v8 < *(_QWORD *)(a1 + 56)
        && v8[1] < *(_QWORD *)(a1 + 64)
        && v8[2] < *(_QWORD *)(a1 + 72)
        && v8[3] < *(_QWORD *)(a1 + 80)
        && v8[4] < *(_QWORD *)(a1 + 88))
      {
        ZinIrWeightBase::GetAt<float>(a1);
        v12 = v13;
      }
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      v15 = (_DWORD *)(*(_QWORD *)(a3 + 8) + v11);
      if (!v14)
        v15 = (_DWORD *)a3;
      *v15 = v12;
      v8 += 5;
      v11 += 4;
    }
    while (v8 != v10);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<float>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<float>>,ZinIrScratchBuffer<float>,void>(a3, v17);
  result = v17[0];
  *a4 = *(_OWORD *)v17;
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<float>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<float>>,ZinIrScratchBuffer<float>,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xA0uLL);
  result = std::__shared_ptr_emplace<ZinIrScratchBufferBackedConstData_specialization<float>>::__shared_ptr_emplace[abi:ne180100]<ZinIrScratchBuffer<float>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<float>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206E2E3D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrScratchBufferBackedConstData_specialization<float>>::__shared_ptr_emplace[abi:ne180100]<ZinIrScratchBuffer<float>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<float>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C170;
  a1[1] = 0;
  ZinIrScratchBufferBackedConstData_specialization<float>::ZinIrScratchBufferBackedConstData_specialization((ZinIrConstData *)(a1 + 3), a2);
  return a1;
}

void sub_206E2E41C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinIrScratchBufferBackedConstData_specialization<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinIrScratchBufferBackedConstData_specialization<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C170;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinIrScratchBufferBackedConstData_specialization<float>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

ZinIrConstData *ZinIrScratchBufferBackedConstData_specialization<float>::ZinIrScratchBufferBackedConstData_specialization(ZinIrConstData *a1, uint64_t a2)
{
  uint64_t v4;

  ZinIrConstData::ZinIrConstData(a1);
  *(_QWORD *)v4 = &unk_24C026EE8;
  details::ZinIrMappedData_Impl<float>::ZinIrMappedData_Impl((char *)(v4 + 104), a2);
  return a1;
}

void sub_206E2E4C8(_Unwind_Exception *a1)
{
  void **v1;

  ZinIrConstData::~ZinIrConstData(v1);
  _Unwind_Resume(a1);
}

void ZinIrScratchBufferBackedConstData_specialization<float>::~ZinIrScratchBufferBackedConstData_specialization(void **a1)
{
  *a1 = &unk_24C026EE8;
  details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)(a1 + 13));
  ZinIrConstData::~ZinIrConstData(a1);
}

{
  *a1 = &unk_24C026EE8;
  details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)(a1 + 13));
  ZinIrConstData::~ZinIrConstData(a1);
  JUMPOUT(0x20BD002F8);
}

double ZinIrWeight::ShuffleWeightData<ZinIrScratchBuffer<half>,ZinIrScratchBufferBackedConstData_specialization<half>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int16 v12;
  __int16 v13;
  int v14;
  _WORD *v15;
  double result;
  double v17[3];

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)) && *(_QWORD *)(a1 + 304) >= 2uLL)
    ZinAssertImpl("Vector palettization is not supported for this transform.");
  if (*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280) >= 0x11uLL)
    ZinAssertImpl("Shuffling weight data is not supported for per-channel palettized kernels yet");
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_))
    v8 = *(_QWORD **)(a2 + 48);
  else
    v8 = (_QWORD *)a2;
  v9 = ZinIrScratchBuffer<ZinKernelPosition>::end(a2);
  if (v8 != (_QWORD *)v9)
  {
    v10 = (_QWORD *)v9;
    v11 = 0;
    do
    {
      v12 = 0;
      if (*v8 < *(_QWORD *)(a1 + 56)
        && v8[1] < *(_QWORD *)(a1 + 64)
        && v8[2] < *(_QWORD *)(a1 + 72)
        && v8[3] < *(_QWORD *)(a1 + 80)
        && v8[4] < *(_QWORD *)(a1 + 88))
      {
        ZinIrWeightBase::GetAt<half>(a1);
        v12 = v13;
      }
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      v15 = (_WORD *)(*(_QWORD *)(a3 + 8) + v11);
      if (!v14)
        v15 = (_WORD *)a3;
      *v15 = v12;
      v8 += 5;
      v11 += 2;
    }
    while (v8 != v10);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<half>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<half>>,ZinIrScratchBuffer<half>,void>(a3, v17);
  result = v17[0];
  *a4 = *(_OWORD *)v17;
  return result;
}

double ZinIrWeight::ShuffleWeightData<ZinIrScratchBuffer<e4m3_t>,ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  int v13;
  _BYTE *v14;
  double result;
  double v16[3];

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)) && *(_QWORD *)(a1 + 304) >= 2uLL)
    ZinAssertImpl("Vector palettization is not supported for this transform.");
  if (*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280) >= 0x11uLL)
    ZinAssertImpl("Shuffling weight data is not supported for per-channel palettized kernels yet");
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_))
    v8 = *(_QWORD **)(a2 + 48);
  else
    v8 = (_QWORD *)a2;
  v9 = ZinIrScratchBuffer<ZinKernelPosition>::end(a2);
  if (v8 != (_QWORD *)v9)
  {
    v10 = (_QWORD *)v9;
    v11 = 0;
    do
    {
      if (*v8 >= *(_QWORD *)(a1 + 56)
        || v8[1] >= *(_QWORD *)(a1 + 64)
        || v8[2] >= *(_QWORD *)(a1 + 72)
        || v8[3] >= *(_QWORD *)(a1 + 80)
        || v8[4] >= *(_QWORD *)(a1 + 88))
      {
        v12 = 0;
      }
      else
      {
        v12 = ZinIrWeightBase::GetAt<e4m3_t>(a1);
      }
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      v14 = (_BYTE *)(*(_QWORD *)(a3 + 8) + v11);
      if (!v13)
        v14 = (_BYTE *)a3;
      *v14 = v12;
      v8 += 5;
      ++v11;
    }
    while (v8 != v10);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>,ZinIrScratchBuffer<e4m3_t>,void>(a3, v16);
  result = v16[0];
  *a4 = *(_OWORD *)v16;
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>,ZinIrScratchBuffer<e4m3_t>,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xA0uLL);
  result = std::__shared_ptr_emplace<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>::__shared_ptr_emplace[abi:ne180100]<ZinIrScratchBuffer<e4m3_t>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206E2E984(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>::__shared_ptr_emplace[abi:ne180100]<ZinIrScratchBuffer<e4m3_t>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C0C8;
  a1[1] = 0;
  ZinIrScratchBufferBackedConstData_specialization<e4m3_t>::ZinIrScratchBufferBackedConstData_specialization((ZinIrConstData *)(a1 + 3), a2);
  return a1;
}

void sub_206E2E9D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C0C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C0C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

ZinIrConstData *ZinIrScratchBufferBackedConstData_specialization<e4m3_t>::ZinIrScratchBufferBackedConstData_specialization(ZinIrConstData *a1, uint64_t a2)
{
  uint64_t v4;

  ZinIrConstData::ZinIrConstData(a1);
  *(_QWORD *)v4 = &unk_24C026C60;
  details::ZinIrMappedData_Impl<signed char>::ZinIrMappedData_Impl((char *)(v4 + 104), a2);
  return a1;
}

void sub_206E2EA7C(_Unwind_Exception *a1)
{
  void **v1;

  ZinIrConstData::~ZinIrConstData(v1);
  _Unwind_Resume(a1);
}

void ZinIrScratchBufferBackedConstData_specialization<e4m3_t>::~ZinIrScratchBufferBackedConstData_specialization(void **a1)
{
  *a1 = &unk_24C026C60;
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)(a1 + 13));
  ZinIrConstData::~ZinIrConstData(a1);
}

{
  *a1 = &unk_24C026C60;
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)(a1 + 13));
  ZinIrConstData::~ZinIrConstData(a1);
  JUMPOUT(0x20BD002F8);
}

double ZinIrWeight::ShuffleWeightData<ZinIrScratchBuffer<unsigned char>,ZinIrScratchBufferBackedConstData_specialization<unsigned char>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  _BYTE *v20;
  double result;
  double v22[3];

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)) && *(_QWORD *)(a1 + 304) >= 2uLL)
    ZinAssertImpl("Vector palettization is not supported for this transform.");
  if (*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280) >= 0x11uLL)
    ZinAssertImpl("Shuffling weight data is not supported for per-channel palettized kernels yet");
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_))
    v10 = *(uint64_t **)(a2 + 48);
  else
    v10 = (uint64_t *)a2;
  v11 = ZinIrScratchBuffer<ZinKernelPosition>::end(a2);
  if (v10 != (uint64_t *)v11)
  {
    v12 = (uint64_t *)v11;
    v13 = 0;
    do
    {
      v14 = *(_QWORD *)(a1 + 56);
      if (*v10 >= v14
        || v10[1] >= *(_QWORD *)(a1 + 64)
        || v10[2] >= *(_QWORD *)(a1 + 72)
        || v10[3] >= *(_QWORD *)(a1 + 80)
        || v10[4] >= *(_QWORD *)(a1 + 88))
      {
        if (!a4)
        {
          v18 = 0;
          goto LABEL_22;
        }
        v16 = v14 - 1;
        if (*v10 >= v16)
          v17 = v16;
        else
          v17 = *v10;
        v15 = ZinIrVector::GetAt<unsigned char>(a4, v17);
      }
      else
      {
        v15 = ZinIrWeightBase::GetAt<unsigned char>(a1);
      }
      v18 = v15;
LABEL_22:
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      v20 = (_BYTE *)(*(_QWORD *)(a3 + 8) + v13);
      if (!v19)
        v20 = (_BYTE *)a3;
      *v20 = v18;
      v10 += 5;
      ++v13;
    }
    while (v10 != v12);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<unsigned char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<unsigned char>>,ZinIrScratchBuffer<unsigned char>,void>(a3, v22);
  result = v22[0];
  *a5 = *(_OWORD *)v22;
  return result;
}

double ZinIrWeight::ShuffleWeightData<ZinIrScratchBuffer<signed char>,ZinIrScratchBufferBackedConstData_specialization<signed char>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  _BYTE *v20;
  double result;
  double v22[3];

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)) && *(_QWORD *)(a1 + 304) >= 2uLL)
    ZinAssertImpl("Vector palettization is not supported for this transform.");
  if (*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280) >= 0x11uLL)
    ZinAssertImpl("Shuffling weight data is not supported for per-channel palettized kernels yet");
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_))
    v10 = *(uint64_t **)(a2 + 48);
  else
    v10 = (uint64_t *)a2;
  v11 = ZinIrScratchBuffer<ZinKernelPosition>::end(a2);
  if (v10 != (uint64_t *)v11)
  {
    v12 = (uint64_t *)v11;
    v13 = 0;
    do
    {
      v14 = *(_QWORD *)(a1 + 56);
      if (*v10 >= v14
        || v10[1] >= *(_QWORD *)(a1 + 64)
        || v10[2] >= *(_QWORD *)(a1 + 72)
        || v10[3] >= *(_QWORD *)(a1 + 80)
        || v10[4] >= *(_QWORD *)(a1 + 88))
      {
        if (!a4)
        {
          v18 = 0;
          goto LABEL_22;
        }
        v16 = v14 - 1;
        if (*v10 >= v16)
          v17 = v16;
        else
          v17 = *v10;
        v15 = ZinIrVector::GetAt<signed char>(a4, v17);
      }
      else
      {
        v15 = ZinIrWeightBase::GetAt<signed char>(a1);
      }
      v18 = v15;
LABEL_22:
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      v20 = (_BYTE *)(*(_QWORD *)(a3 + 8) + v13);
      if (!v19)
        v20 = (_BYTE *)a3;
      *v20 = v18;
      v10 += 5;
      ++v13;
    }
    while (v10 != v12);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<signed char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<signed char>>,ZinIrScratchBuffer<signed char>,void>(a3, v22);
  result = v22[0];
  *a5 = *(_OWORD *)v22;
  return result;
}

double ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream1,ZinIrConstData_specialization<unsigned char>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  double result;
  double v13[3];

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)) && *(_QWORD *)(a1 + 304) >= 2uLL)
    ZinAssertImpl("Vector palettization is not supported for this transform.");
  if (*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280) >= 0x11uLL)
    ZinAssertImpl("Shuffling weight data is not supported for per-channel palettized kernels yet");
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_))
    v8 = *(_QWORD **)(a2 + 48);
  else
    v8 = (_QWORD *)a2;
  v9 = ZinIrScratchBuffer<ZinKernelPosition>::end(a2);
  if (v8 != (_QWORD *)v9)
  {
    v10 = (_QWORD *)v9;
    do
    {
      if (*v8 >= *(_QWORD *)(a1 + 56)
        || v8[1] >= *(_QWORD *)(a1 + 64)
        || v8[2] >= *(_QWORD *)(a1 + 72)
        || v8[3] >= *(_QWORD *)(a1 + 80)
        || v8[4] >= *(_QWORD *)(a1 + 88))
      {
        v11 = 0;
      }
      else
      {
        v11 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>(a1);
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v11 & 1);
      v8 += 5;
    }
    while (v8 != v10);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream1,void>(a3, v13);
  result = v13[0];
  *a4 = *(_OWORD *)v13;
  return result;
}

double ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream2,ZinIrConstData_specialization<unsigned char>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  double result;
  double v13[3];

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)) && *(_QWORD *)(a1 + 304) >= 2uLL)
    ZinAssertImpl("Vector palettization is not supported for this transform.");
  if (*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280) >= 0x11uLL)
    ZinAssertImpl("Shuffling weight data is not supported for per-channel palettized kernels yet");
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_))
    v8 = *(_QWORD **)(a2 + 48);
  else
    v8 = (_QWORD *)a2;
  v9 = ZinIrScratchBuffer<ZinKernelPosition>::end(a2);
  if (v8 != (_QWORD *)v9)
  {
    v10 = (_QWORD *)v9;
    do
    {
      if (*v8 >= *(_QWORD *)(a1 + 56)
        || v8[1] >= *(_QWORD *)(a1 + 64)
        || v8[2] >= *(_QWORD *)(a1 + 72)
        || v8[3] >= *(_QWORD *)(a1 + 80)
        || v8[4] >= *(_QWORD *)(a1 + 88))
      {
        v11 = 0;
      }
      else
      {
        v11 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>(a1);
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v11 & 3);
      v8 += 5;
    }
    while (v8 != v10);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream2,void>(a3, v13);
  result = v13[0];
  *a4 = *(_OWORD *)v13;
  return result;
}

double ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream3,ZinIrConstData_specialization<unsigned char>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  double result;
  double v13[3];

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)) && *(_QWORD *)(a1 + 304) >= 2uLL)
    ZinAssertImpl("Vector palettization is not supported for this transform.");
  if (*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280) >= 0x11uLL)
    ZinAssertImpl("Shuffling weight data is not supported for per-channel palettized kernels yet");
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_))
    v8 = *(_QWORD **)(a2 + 48);
  else
    v8 = (_QWORD *)a2;
  v9 = ZinIrScratchBuffer<ZinKernelPosition>::end(a2);
  if (v8 != (_QWORD *)v9)
  {
    v10 = (_QWORD *)v9;
    do
    {
      if (*v8 >= *(_QWORD *)(a1 + 56)
        || v8[1] >= *(_QWORD *)(a1 + 64)
        || v8[2] >= *(_QWORD *)(a1 + 72)
        || v8[3] >= *(_QWORD *)(a1 + 80)
        || v8[4] >= *(_QWORD *)(a1 + 88))
      {
        v11 = 0;
      }
      else
      {
        v11 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>(a1);
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v11 & 7);
      v8 += 5;
    }
    while (v8 != v10);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream3,void>(a3, v13);
  result = v13[0];
  *a4 = *(_OWORD *)v13;
  return result;
}

double ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream4,ZinIrConstData_specialization<unsigned char>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  double result;
  double v13[3];

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)) && *(_QWORD *)(a1 + 304) >= 2uLL)
    ZinAssertImpl("Vector palettization is not supported for this transform.");
  if (*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280) >= 0x11uLL)
    ZinAssertImpl("Shuffling weight data is not supported for per-channel palettized kernels yet");
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_))
    v8 = *(_QWORD **)(a2 + 48);
  else
    v8 = (_QWORD *)a2;
  v9 = ZinIrScratchBuffer<ZinKernelPosition>::end(a2);
  if (v8 != (_QWORD *)v9)
  {
    v10 = (_QWORD *)v9;
    do
    {
      if (*v8 >= *(_QWORD *)(a1 + 56)
        || v8[1] >= *(_QWORD *)(a1 + 64)
        || v8[2] >= *(_QWORD *)(a1 + 72)
        || v8[3] >= *(_QWORD *)(a1 + 80)
        || v8[4] >= *(_QWORD *)(a1 + 88))
      {
        v11 = 0;
      }
      else
      {
        v11 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>(a1);
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v11 & 0xF);
      v8 += 5;
    }
    while (v8 != v10);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream4,void>(a3, v13);
  result = v13[0];
  *a4 = *(_OWORD *)v13;
  return result;
}

double ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream6,ZinIrConstData_specialization<unsigned char>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  double result;
  double v13[3];

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)) && *(_QWORD *)(a1 + 304) >= 2uLL)
    ZinAssertImpl("Vector palettization is not supported for this transform.");
  if (*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280) >= 0x11uLL)
    ZinAssertImpl("Shuffling weight data is not supported for per-channel palettized kernels yet");
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_))
    v8 = *(_QWORD **)(a2 + 48);
  else
    v8 = (_QWORD *)a2;
  v9 = ZinIrScratchBuffer<ZinKernelPosition>::end(a2);
  if (v8 != (_QWORD *)v9)
  {
    v10 = (_QWORD *)v9;
    do
    {
      if (*v8 >= *(_QWORD *)(a1 + 56)
        || v8[1] >= *(_QWORD *)(a1 + 64)
        || v8[2] >= *(_QWORD *)(a1 + 72)
        || v8[3] >= *(_QWORD *)(a1 + 80)
        || v8[4] >= *(_QWORD *)(a1 + 88))
      {
        v11 = 0;
      }
      else
      {
        v11 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>(a1);
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v11 & 0x3F);
      v8 += 5;
    }
    while (v8 != v10);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream6,void>(a3, v13);
  result = v13[0];
  *a4 = *(_OWORD *)v13;
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long &,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E2F55C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long &,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05C020;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long &,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E2F5A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long &,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E2F63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>::ZinIrCompressedConstData_specialization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;

  ZinIrConstData::ZinIrConstData((ZinIrConstData *)a1);
  *(_QWORD *)v10 = &unk_24C026568;
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl((char *)(v10 + 104), a3);
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl((char *)(a1 + 136), a2);
  *(_WORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a5;
  if (a5 > 8 * (*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)))
    ZinAssertImpl("compressed mask is the wrong size");
  ZinIrCompressedConstData_specialization<float,(unsigned char)32>::VerifyMask(a1);
  return a1;
}

void sub_206E2F704(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl(v2);
  ZinIrConstData::~ZinIrConstData(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream4,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xA0uLL);
  result = std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206E2F784(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05BCA0;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStream4,ZinIrConstData_specialization<unsigned char>*>((ZinIrConstData *)(a1 + 3), a2);
  return a1;
}

void sub_206E2F7D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

ZinIrConstData *std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStream4,ZinIrConstData_specialization<unsigned char>*>(ZinIrConstData *a1, uint64_t a2)
{
  void *__p;
  void *v5;
  uint64_t v6;

  __p = 0;
  v5 = 0;
  v6 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrConstData_specialization<unsigned char>::ZinIrConstData_specialization(a1, (uint64_t)&__p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E2F844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::__unordered_map_hasher<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::__unordered_map_hasher<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::__unordered_map_hasher<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 4));
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::__unordered_map_hasher<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>>::__emplace_unique_key_args<std::shared_ptr<ZinIrConstData>,std::pair<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v12 = operator new(0x30uLL);
  *v12 = 0;
  v12[1] = v8;
  v15 = *a3;
  v16 = a3[1];
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *((_OWORD *)v12 + 1) = v15;
  *((_OWORD *)v12 + 2) = v16;
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v12 = *v24;
LABEL_38:
    *v24 = v12;
    goto LABEL_39;
  }
  *v12 = *v14;
  *v14 = v12;
  *(_QWORD *)(v23 + 8 * v3) = v14;
  if (*v12)
  {
    v25 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_206E2FB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)__p + 32);
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)__p + 16);
  }
  if (__p)
    operator delete(__p);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E2FC1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05BFB0;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E2FC68(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E2FCFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>::ZinIrCompressedConstData_specialization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;

  ZinIrConstData::ZinIrConstData((ZinIrConstData *)a1);
  *(_QWORD *)v10 = &unk_24C0263B8;
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl((char *)(v10 + 104), a3);
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl((char *)(a1 + 136), a2);
  *(_WORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a5;
  if (a5 > 8 * (*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)))
    ZinAssertImpl("compressed mask is the wrong size");
  ZinIrCompressedConstData_specialization<float,(unsigned char)32>::VerifyMask(a1);
  return a1;
}

void sub_206E2FDC4(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl(v2);
  ZinIrConstData::~ZinIrConstData(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E2FE64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05BFE8;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E2FEB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E2FF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>::ZinIrCompressedConstData_specialization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;

  ZinIrConstData::ZinIrConstData((ZinIrConstData *)a1);
  *(_QWORD *)v10 = &unk_24C026490;
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl((char *)(v10 + 104), a3);
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl((char *)(a1 + 136), a2);
  *(_WORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a5;
  if (a5 > 8 * (*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)))
    ZinAssertImpl("compressed mask is the wrong size");
  ZinIrCompressedConstData_specialization<float,(unsigned char)32>::VerifyMask(a1);
  return a1;
}

void sub_206E3000C(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl(v2);
  ZinIrConstData::~ZinIrConstData(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E300AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C005C60;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E300F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E3018C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>::ZinIrCompressedConstData_specialization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;

  ZinIrConstData::ZinIrConstData((ZinIrConstData *)a1);
  *(_QWORD *)v10 = &unk_24BFFE1D8;
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl((char *)(v10 + 104), a3);
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl((char *)(a1 + 136), a2);
  *(_WORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a5;
  if (a5 > 8 * (*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)))
    ZinAssertImpl("compressed mask is the wrong size");
  ZinIrCompressedConstData_specialization<float,(unsigned char)32>::VerifyMask(a1);
  return a1;
}

void sub_206E30254(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl(v2);
  ZinIrConstData::~ZinIrConstData(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E302F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05C020;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E30340(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E303D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E30454(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05C058;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E304A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E30534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>::ZinIrCompressedConstData_specialization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;

  ZinIrConstData::ZinIrConstData((ZinIrConstData *)a1);
  *(_QWORD *)v10 = &unk_24C026640;
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl((char *)(v10 + 104), a3);
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl((char *)(a1 + 136), a2);
  *(_WORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a5;
  if (a5 > 8 * (*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)))
    ZinAssertImpl("compressed mask is the wrong size");
  ZinIrCompressedConstData_specialization<float,(unsigned char)32>::VerifyMask(a1);
  return a1;
}

void sub_206E305FC(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl(v2);
  ZinIrConstData::~ZinIrConstData(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E3069C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05C090;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E306E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E3077C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>::ZinIrCompressedConstData_specialization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;

  ZinIrConstData::ZinIrConstData((ZinIrConstData *)a1);
  *(_QWORD *)v10 = &unk_24C026718;
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl((char *)(v10 + 104), a3);
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl((char *)(a1 + 136), a2);
  *(_WORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a5;
  if (a5 > 8 * (*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)))
    ZinAssertImpl("compressed mask is the wrong size");
  ZinIrCompressedConstData_specialization<float,(unsigned char)32>::VerifyMask(a1);
  return a1;
}

void sub_206E30844(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl(v2);
  ZinIrConstData::~ZinIrConstData(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E308E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05BFB0;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E30930(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E309C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E30A44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05BFE8;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E30A90(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E30B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E30BA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C005C60;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E30BF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E30C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E30D04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05C020;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E30D50(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E30DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E30E64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05C058;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E30EB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E30F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E30FC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05C090;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E31010(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E310A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E31124(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05BFB0;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E31170(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E31204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E31284(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05BFE8;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E312D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E31364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E313E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C005C60;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E31430(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E314C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E31544(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05C020;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E31590(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E31624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E316A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05C058;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E316F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E31784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E31804(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05C090;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E31850(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E318E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E31964(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05BFB0;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E319B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E31A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E31AC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05BFE8;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E31B10(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E31BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E31C24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C005C60;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E31C70(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E31D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E31D84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05C020;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E31DD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E31E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E31EE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05C058;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E31F30(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E31FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E32044(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05C090;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E32090(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E32124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E321A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05BFB0;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E321F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E32284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E32304(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05BFE8;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E32350(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E323E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E32464(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C005C60;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E324B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E32544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E325C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05C020;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E32610(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E326A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E32724(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05C058;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E32770(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E32804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E32884(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05C090;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_206E328D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_206E32964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E329E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05BFB0;
  a1[1] = 0;
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>::ZinIrCompressedConstData_specialization((uint64_t)(a1 + 3), a2, a3, *a4, *a5);
  return a1;
}

void sub_206E32A38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E32AB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05BFE8;
  a1[1] = 0;
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>::ZinIrCompressedConstData_specialization((uint64_t)(a1 + 3), a2, a3, *a4, *a5);
  return a1;
}

void sub_206E32B04(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E32B7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C005C60;
  a1[1] = 0;
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>::ZinIrCompressedConstData_specialization((uint64_t)(a1 + 3), a2, a3, *a4, *a5);
  return a1;
}

void sub_206E32BD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E32C48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05C020;
  a1[1] = 0;
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>::ZinIrCompressedConstData_specialization((uint64_t)(a1 + 3), a2, a3, *a4, *a5);
  return a1;
}

void sub_206E32C9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E32D14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05C058;
  a1[1] = 0;
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>::ZinIrCompressedConstData_specialization((uint64_t)(a1 + 3), a2, a3, *a4, *a5);
  return a1;
}

void sub_206E32D68(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_206E32DE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_24C05C090;
  a1[1] = 0;
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>::ZinIrCompressedConstData_specialization((uint64_t)(a1 + 3), a2, a3, *a4, *a5);
  return a1;
}

void sub_206E32E34(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_7_5()
{
  _QWORD *v0;

  *v0 = 0;
  v0[1] = 0;
}

void ZinIrWeight::CreateAlias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Aliasing is not supported for vector palettized kernels yet.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrWeight::RemapByType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Remapping is not supported for vector palettized kernels yet.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unsupported convolution kernel format while generating Unflatten layer\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrWeight::ShuffleChannelsByType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unsupported convolution kernel format in ShuffleChannelsByType\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrWeight::CreateDePalettizedWeight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Only Palettized weights can be depalettized\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid kernel format", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrWeight::ShuffleByType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unsupported convolution kernel format in ShuffleByType\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrWeight::Create4bitPalWeightFrom3bitPalWeight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Faild to upcast 3bit pal to 4bit pal weight", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Attempting to upcast non-3bit palettized weight.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrWeight::Dilate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unsupported convolution kernel format in DilateByType", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream1>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  int v8;
  uint8_t v9;

  OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], v1, "Unrecognized palettized format.", v2, v3, v4, v5, v9);
  OUTLINED_FUNCTION_7_5();
  if (v0)
  {
    v6 = (unint64_t *)(v0 + 8);
    do
      OUTLINED_FUNCTION_2_7(v6);
    while (v8);
    if (!v7)
    {
      OUTLINED_FUNCTION_0_3();
      OUTLINED_FUNCTION_3_1();
    }
  }
  OUTLINED_FUNCTION_3_4();
}

void ZinIrWeight::HeightSplitDeconv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Palette weight for Deconv height split is not supported.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrWeight::GetValueAsFloat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unsupported convolution kernel format in GetValueAsFloat\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrWeight::IsZeroPointAt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unsupported convolution kernel format in IsZeroPointAt\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrWeight::IsElemZeroPointAt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unsupported convolution kernel format in IsElemZeroPointAt\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrWeight::CreatePalettizedWeight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Weight vector array cant contain specified number of unique values\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrWeight::CreatePalettizedWeight(int a1)
{
  _DWORD v1[2];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Invalid format for weight %d\n", (uint8_t *)v1, 8u);
  OUTLINED_FUNCTION_1();
}

void ZinIrWeight::PadWeight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unsupported convolution kernel format in kernel weight padding", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Palette weight for Large stride convolution is not supported.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrWeight::SliceWeight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unsupported convolution kernel format in kernel weight slicing", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Palette weight slicing is not supported.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

CFMutableDictionaryRef ZinCreateRingBufferReaderUnit(const ZinIrUnitInfo *a1)
{
  const __CFAllocator *v2;
  __CFArray *Mutable;
  uint64_t *v4;
  const CFDictionaryKeyCallBacks *v5;
  const CFDictionaryValueCallBacks *v6;
  __CFDictionary *v7;
  CFNumberRef v8;
  const __CFString *v9;
  __CFDictionary *theDict;
  CFMutableDictionaryRef Unit;
  int valuePtr;

  Unit = ZinCreateUnit(a1);
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  ZinAddOffsetsToParamsDict(theDict, (uint64_t)a1 + 120, (uint64_t)a1 + 80, CFSTR("RingBufferReaderOffsetInfo"));
  Mutable = CFArrayCreateMutable(v2, 0, MEMORY[0x24BDBD690]);
  v4 = (uint64_t *)*((_QWORD *)a1 + 22);
  if (v4)
  {
    v5 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
    v6 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
    do
    {
      v7 = CFDictionaryCreateMutable(v2, 0, v5, v6);
      valuePtr = v4[3];
      v8 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
      v9 = ZinIrCoordinateToCFString((_DWORD *)v4 + 4);
      CFDictionaryAddValue(v7, CFSTR("Dimension"), v9);
      CFDictionaryAddValue(v7, CFSTR("Size"), v8);
      CFArrayAppendValue(Mutable, v7);
      CFRelease(v8);
      CFRelease(v7);
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  CFDictionaryAddValue(theDict, CFSTR("RingBufferReaderOutputSizeInfo"), Mutable);
  CFRelease(Mutable);
  CFDictionaryAddValue(Unit, CFSTR("Params"), theDict);
  CFRelease(theDict);
  return Unit;
}

void ZinIrAffineTransformInfo::ZinIrAffineTransformInfo(ZinIrAffineTransformInfo *this, const ZinIrAffineTransformUnitInfo *a2)
{
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v4 = (_QWORD *)ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)this, 62);
  *v4 = &unk_24C022D90;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)(v4 + 2), a2);
  *((_QWORD *)this + 2) = &unk_24C0246F0;
  v5 = *((_OWORD *)a2 + 10);
  v6 = *((_OWORD *)a2 + 11);
  v7 = *((_QWORD *)a2 + 24);
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 26) = v7;
  *((_OWORD *)this + 12) = v6;
  *((_OWORD *)this + 11) = v5;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  std::vector<ANEDebugInfo::DebugInfoInMem::Layer>::__init_with_size[abi:ne180100]<ANEDebugInfo::DebugInfoInMem::Layer*,ANEDebugInfo::DebugInfoInMem::Layer*>((_QWORD *)this + 27, *((const void **)a2 + 25), *((_QWORD *)a2 + 26), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 26) - *((_QWORD *)a2 + 25)) >> 2));
}

void sub_206E33550(_Unwind_Exception *a1)
{
  ZinIrHalH13g *v1;
  ZinIrTextureUnitInfo *v2;

  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v2);
  ZinIrHalH13g::~ZinIrHalH13g(v1);
  _Unwind_Resume(a1);
}

_QWORD *ZinAffineTransformLayer::ZinAffineTransformLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;

  v5 = *a2;
  *a2 = 0;
  v6 = a3[1];
  v14 = *a3;
  v15 = (std::__shared_weak_count *)v6;
  v16 = v5;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  ZinTextureLayer::ZinTextureLayer(a1, &v16, &v14, a4);
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  v16 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *a1 = &off_24C021DF8;
  return a1;
}

void sub_206E33638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

BOOL ZinAffineTransformLayer::IsSplitable(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 == 5)
    ZinAssertImpl("Invalid axis", v2, v3);
  return a2 < 2;
}

uint64_t ZinAffineTransformLayer::Lower(_QWORD *a1)
{
  uint64_t Hal;

  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(a1[2] + 160));
  if (!*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal) + 1893))
    ZinAssertImpl("Error: affine transform is not supported on this architecture");
  if (ZinTextureLayerUtils::IsInformationStoredInWidthDimension((uint64_t)a1, 0)
    && !ZinTextureLayerUtils::ReshapeIndexTensor(a1))
  {
    ZinAssertImpl("Error: fail to create the reshape layer for transform matrix");
  }
  return 0;
}

uint64_t ZinAffineTransformLayer::LowerEngineTexture(ZinIrOpLayerGraph *a1, uint64_t **a2, ZinANELayer *this, uint64_t **a4)
{
  uint64_t TextureIndexInput;
  ZinIrOpLayer *v9;
  uint64_t v10;
  ZinANELayer *v11;

  TextureIndexInput = ZinANELayer::GetTextureIndexInput(this);
  if (!TextureIndexInput)
    ZinAssertImpl("Error: fail to get the transform matrix");
  v9 = (ZinIrOpLayer *)TextureIndexInput;
  v10 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)TextureIndexInput + 32))(TextureIndexInput, 0, 0);
  if (!ZinTextureLayerUtils::EnforceIndexInterleave(a2, a1, v9, *(ZinIrOpLayer **)(v10 + 56), this, v11))
    ZinAssertImpl("Error: fail to insert the copy layer");
  ZinTextureLayerUtils::InputFP16CopyCastIfNeeded(a2, a1, **a4, this);
  return 0;
}

_QWORD *ZinAffineTransformLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *GroupId;
  uint64_t v19[2];
  uint64_t v20;

  v6 = (_QWORD *)operator new();
  v7 = *((_QWORD *)a1 + 8);
  v8 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((ZinIrOpLayerOpCode *)v8, (const ZinIrOpLayerOpCode *)v7);
  *(_QWORD *)v8 = &unk_24C022D90;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)(v8 + 16), (const ZinIrTextureUnitInfo *)(v7 + 16));
  *(_QWORD *)(v8 + 16) = &unk_24C0246F0;
  v9 = *(_OWORD *)(v7 + 176);
  v10 = *(_OWORD *)(v7 + 192);
  v11 = *(_QWORD *)(v7 + 208);
  *(_QWORD *)(v8 + 216) = 0;
  *(_QWORD *)(v8 + 208) = v11;
  *(_OWORD *)(v8 + 192) = v10;
  *(_OWORD *)(v8 + 176) = v9;
  *(_QWORD *)(v8 + 224) = 0;
  *(_QWORD *)(v8 + 232) = 0;
  std::vector<ANEDebugInfo::DebugInfoInMem::Layer>::__init_with_size[abi:ne180100]<ANEDebugInfo::DebugInfoInMem::Layer*,ANEDebugInfo::DebugInfoInMem::Layer*>((_QWORD *)(v8 + 216), *(const void **)(v7 + 216), *(_QWORD *)(v7 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 224) - *(_QWORD *)(v7 + 216)) >> 2));
  v20 = v8;
  v12 = (std::__shared_weak_count *)a2[1];
  v19[0] = *a2;
  v19[1] = (uint64_t)v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  ZinAffineTransformLayer::ZinAffineTransformLayer(v6, &v20, v19, a3);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_206E3393C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

uint64_t ZinAffineTransformLayer::GetTextureUnitInfo(ZinAffineTransformLayer *this)
{
  return *((_QWORD *)this + 8) + 16;
}

uint64_t ZinAffineTransformLayer::CreateTELayer(ZinAffineTransformLayer *this, const ZinIrHalParameters *a2)
{
  uint64_t v4;
  ZinIrTensor *v5;
  size_t v6;
  std::string *v7;
  char *v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  size_t v15;
  std::string *v16;
  char *v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::string v29;
  void *v30[2];
  int64_t v31;
  std::string v32;
  void *__p[2];
  std::string::size_type v34;
  std::string v35;
  void *v36[2];
  int64_t v37;
  std::string v38;
  __int128 v39;
  std::string::size_type v40;
  uint64_t v41;
  std::__shared_weak_count *v42;

  v4 = *((_QWORD *)this + 8);
  v5 = (ZinIrTensor *)(*(uint64_t (**)(ZinAffineTransformLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  if (*((char *)this + 47) >= 0)
    v6 = *((unsigned __int8 *)this + 47);
  else
    v6 = *((_QWORD *)this + 4);
  v7 = &v38;
  std::string::basic_string[abi:ne180100]((uint64_t)&v38, v6 + 1);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v38.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)this + 47) >= 0)
      v8 = (char *)this + 24;
    else
      v8 = (char *)*((_QWORD *)this + 3);
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v35, "affine_dma");
  v9 = std::string::append(&v35, "_xfm", 4uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v37 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v36 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v37 >= 0)
    v11 = v36;
  else
    v11 = (void **)v36[0];
  if (v37 >= 0)
    v12 = HIBYTE(v37);
  else
    v12 = (std::string::size_type)v36[1];
  v13 = std::string::append(&v38, (const std::string::value_type *)v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v40 = v13->__r_.__value_.__r.__words[2];
  v39 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  ZinIrTensor::CreateTensor(v5, &v39, &v41);
  if (*((char *)this + 47) >= 0)
    v15 = *((unsigned __int8 *)this + 47);
  else
    v15 = *((_QWORD *)this + 4);
  v16 = &v32;
  std::string::basic_string[abi:ne180100]((uint64_t)&v32, v15 + 1);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v16 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if (v15)
  {
    if (*((char *)this + 47) >= 0)
      v17 = (char *)this + 24;
    else
      v17 = (char *)*((_QWORD *)this + 3);
    memmove(v16, v17, v15);
  }
  *(_WORD *)((char *)&v16->__r_.__value_.__l.__data_ + v15) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v29, "affine_te");
  v18 = std::string::append(&v29, "_xfm", 4uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v31 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)v30 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (v31 >= 0)
    v20 = v30;
  else
    v20 = (void **)v30[0];
  if (v31 >= 0)
    v21 = HIBYTE(v31);
  else
    v21 = (std::string::size_type)v30[1];
  v22 = std::string::append(&v32, (const std::string::value_type *)v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v34 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = ZinTEAffineTransformFactory::Create(v4 + 16, &v41, (uint64_t)__p, (uint64_t)a2);
  if (SHIBYTE(v34) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v31) < 0)
    operator delete(v30[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  v25 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (SHIBYTE(v37) < 0)
    operator delete(v36[0]);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  return v24;
}

void sub_206E33CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a33 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v45 - 80);
  if (*(char *)(v45 - 89) < 0)
    operator delete(*(void **)(v45 - 112));
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v45 - 113) < 0)
    operator delete(*(void **)(v45 - 136));
  _Unwind_Resume(a1);
}

uint64_t ZinAffineTransformLayer::ComputeOutputDimensions(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  int8x16_t *v5;
  uint64_t v6;

  v3 = *(_OWORD *)*a2;
  v4 = *((_OWORD *)*a2 + 1);
  *(_QWORD *)(a3 + 32) = (*a2)[4];
  *(_OWORD *)a3 = v3;
  *(_OWORD *)(a3 + 16) = v4;
  v5 = *(int8x16_t **)(a1 + 64);
  v6 = (*a2)[5];
  if (**a2 > v6)
    v6 = **a2;
  *(_QWORD *)a3 = v6;
  *(int8x16_t *)(a3 + 16) = vextq_s8(v5[11], v5[11], 8uLL);
  return 0;
}

uint64_t ZinAffineTransformLayer::GetPaddingMode(ZinAffineTransformLayer *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 8) + 120);
  if (*(_QWORD *)(*((_QWORD *)this + 8) + 128) == v1)
    return 8;
  else
    return *(unsigned int *)(v1 + 4);
}

uint64_t ZinAffineTransformLayer::SetPaddingMode(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 64);
  v3 = *(_QWORD *)(v2 + 120);
  v4 = *(_QWORD *)(v2 + 128);
  while (v3 != v4)
  {
    *(_DWORD *)(v3 + 4) = a2;
    v3 += 8;
  }
  return result;
}

void ZinAffineTransformLayer::ValidateInOutputCoordinateConsistency(uint64_t a1, _QWORD *a2, int a3)
{
  _DWORD *v3;
  _DWORD *v4;
  const char *v5;
  _DWORD *v6;
  _DWORD *v7;
  const char *v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  const char *v12;
  _QWORD v13[2];
  char v14;

  v3 = (_DWORD *)a2[10];
  v4 = (_DWORD *)a2[11];
  if (v3 != v4)
  {
    while (*v3 != a3)
    {
      v3 += 3;
      if (v3 == v4)
        goto LABEL_4;
    }
  }
  if (v3 == v4)
  {
LABEL_4:
    DimensionToString(a3, v13);
    if (v14 >= 0)
      v5 = (const char *)v13;
    else
      v5 = (const char *)v13[0];
    ZinAssertImpl("Error: can not find the input coordinate info for axis %s", v5);
  }
  v7 = (_DWORD *)a2[25];
  v6 = (_DWORD *)a2[26];
  if (v7 != v6)
  {
    while (*v7 != a3)
    {
      v7 += 3;
      if (v7 == v6)
        goto LABEL_12;
    }
  }
  if (v7 == v6)
  {
LABEL_12:
    DimensionToString(a3, v13);
    if (v14 >= 0)
      v8 = (const char *)v13;
    else
      v8 = (const char *)v13[0];
    ZinAssertImpl("Error: can not find the input coordinate info for axis %s", v8);
  }
  v9 = v7[2];
  if (v9)
  {
    if (v3[2] != v9)
      ZinAssertImpl("Error: the input and output coordinate mode should be the same");
    if (v3[1] != v7[1])
      ZinAssertImpl("Error: the input and output coordinate range should be the same");
    v10 = (_DWORD *)a2[13];
    v11 = (_DWORD *)a2[14];
    if (v10 != v11)
    {
      while (*v10 != a3)
      {
        v10 += 2;
        if (v10 == v11)
          goto LABEL_23;
      }
    }
    if (v10 == v11)
    {
LABEL_23:
      DimensionToString(a3, v13);
      if (v14 >= 0)
        v12 = (const char *)v13;
      else
        v12 = (const char *)v13[0];
      ZinAssertImpl("Error: can not find the input coordinate info for axis %s", v12);
    }
    if (v9 == 2)
    {
      if (v10[1] == 5)
        ZinAssertImpl("Error: symmetric padding is invalid when the coordinate is reflective mode");
    }
    else if (v9 == 1 && v10[1] == 6)
    {
      ZinAssertImpl("Error: reflective padding is invalid when the coordinate is symmetric mode");
    }
  }
}

void sub_206E33FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinAffineTransformLayer::ValidateSemantics_Impl(uint64_t a1, char **a2, const ZinIrTextureUnitInfo *a3)
{
  char *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v10;
  int64x2_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  const char *v15;
  _QWORD v16[2];
  char v17;

  v3 = *a2;
  if (a2[1] - *a2 != 240)
    ZinAssertImpl("Error: affine transform layer can only have two bottoms");
  v5 = *((_DWORD *)v3 + 30);
  if (v5 != 3)
  {
    ZinTensorFormatToString(v5, v16);
    if (v17 >= 0)
      v15 = (const char *)v16;
    else
      v15 = (const char *)v16[0];
    ZinAssertImpl("Error: the format of affine transform matrix should be fp16 but get %s", v15);
  }
  v6 = *((_QWORD *)v3 + 16);
  v7 = *((_QWORD *)v3 + 1);
  if (v7 != 1 && v7 != v6)
    ZinAssertImpl("Error: invalid affine transform dimension. The batch size of the data tensor (%zd) should be the same as transform matrix (%zd) or 1", *((_QWORD *)v3 + 1), v6);
  v10 = (char *)operator new(0x50uLL);
  *(_QWORD *)v10 = v6;
  *(_OWORD *)(v10 + 8) = xmmword_207A80450;
  v11 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v10 + 24) = v11;
  *((_QWORD *)v10 + 5) = v6;
  *((int64x2_t *)v10 + 3) = v11;
  *((_OWORD *)v10 + 4) = xmmword_207A80450;
  if (!ZinTensorPosition::operator==((_QWORD *)v3 + 16, v10)
    && !ZinTensorPosition::operator==((_QWORD *)v3 + 16, (_QWORD *)v10 + 5))
  {
    ZinAssertImpl("Error: invalid affine transform matrix dimension N%zdC%zdH%zdW%zdD%zd. It should be either N%zdC6H1W1D1 or N%zdC1H1W6D1", *((_QWORD *)v3 + 16), *((_QWORD *)v3 + 17), *((_QWORD *)v3 + 18), *((_QWORD *)v3 + 19), *((_QWORD *)v3 + 20), *((_QWORD *)v3 + 16), *((_QWORD *)v3 + 16));
  }
  v12 = *(_QWORD *)(a1 + 64);
  ZinLayerValidationUtils::ValidateTextureUnitsCommonProperties((_QWORD *)(v12 + 16), (const ZinIrTextureUnitInfo *)*(unsigned int *)v3, a3);
  v13 = ZinLayerValidationUtils::ValidateCoordinateInfo((_QWORD *)(v12 + 216));
  ZinAffineTransformLayer::ValidateInOutputCoordinateConsistency((uint64_t)v13, (_QWORD *)(v12 + 16), 3);
  ZinAffineTransformLayer::ValidateInOutputCoordinateConsistency(v14, (_QWORD *)(v12 + 16), 4);
  operator delete(v10);
}

void sub_206E3417C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrAffineTransformInfo::~ZinIrAffineTransformInfo(ZinIrAffineTransformInfo *this)
{
  ZinIrTextureUnitInfo *v2;
  void *v3;

  *(_QWORD *)this = &unk_24C022D90;
  *((_QWORD *)this + 2) = &unk_24C0246F0;
  v2 = (ZinIrAffineTransformInfo *)((char *)this + 16);
  v3 = (void *)*((_QWORD *)this + 27);
  if (v3)
  {
    *((_QWORD *)this + 28) = v3;
    operator delete(v3);
  }
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v2);
  ZinIrHalH13g::~ZinIrHalH13g(this);
}

{
  ZinIrTextureUnitInfo *v2;
  void *v3;

  *(_QWORD *)this = &unk_24C022D90;
  *((_QWORD *)this + 2) = &unk_24C0246F0;
  v2 = (ZinIrAffineTransformInfo *)((char *)this + 16);
  v3 = (void *)*((_QWORD *)this + 27);
  if (v3)
  {
    *((_QWORD *)this + 28) = v3;
    operator delete(v3);
  }
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v2);
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

void DumpTask<8u>(_QWORD *a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int **a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  ZinAneTdHw_v8 *v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  int v30;
  unsigned int *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int *v44;
  _DWORD *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int *v50;
  __int128 v51;
  __int128 v52;
  unsigned int *v53;
  __int128 v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int AddressOfRelocationCommand;
  unsigned int RegisterValueFromAddress;
  unsigned int *v65;
  int v66;
  unsigned int v67;
  unsigned int *v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[32];
  __int128 v74;
  __int128 v75;
  _OWORD v76[2];
  std::string v77;
  std::string v78;
  void *v79[2];
  unsigned __int8 v80;
  std::string v81;
  __int128 v82;
  std::string::size_type v83;

  v15 = *(_QWORD *)(a3 + 200);
  std::string::basic_string[abi:ne180100]<0>(&v77, "__nid0__tid");
  v16 = (ZinAneTdHw_v8 *)(v15 + 8);
  std::to_string(&v81, *(unsigned __int16 *)(v15 + 8));
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v81;
  else
    v17 = (std::string *)v81.__r_.__value_.__r.__words[0];
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v81.__r_.__value_.__r.__words[2]);
  else
    size = v81.__r_.__value_.__l.__size_;
  v19 = std::string::append(&v77, (const std::string::value_type *)v17, size);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v78.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v79, "__");
  if ((v80 & 0x80u) == 0)
    v21 = (const std::string::value_type *)v79;
  else
    v21 = (const std::string::value_type *)v79[0];
  if ((v80 & 0x80u) == 0)
    v22 = v80;
  else
    v22 = (std::string::size_type)v79[1];
  v23 = std::string::append(&v78, v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(_QWORD *)&v73[16] = *((_QWORD *)&v23->__r_.__value_.__l + 2);
  *(_OWORD *)v73 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = *(char *)(a3 + 183);
  if (v25 >= 0)
    v26 = (const std::string::value_type *)(a3 + 160);
  else
    v26 = *(const std::string::value_type **)(a3 + 160);
  if (v25 >= 0)
    v27 = *(unsigned __int8 *)(a3 + 183);
  else
    v27 = *(_QWORD *)(a3 + 168);
  v28 = std::string::append((std::string *)v73, v26, v27);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v83 = v28->__r_.__value_.__r.__words[2];
  v82 = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if ((v73[23] & 0x80000000) != 0)
    operator delete(*(void **)v73);
  if ((char)v80 < 0)
    operator delete(v79[0]);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  v30 = *(_DWORD *)(a3 + 184);
  v31 = (unsigned int *)(a9 + (v30 & 0xFFFFFFFC));
  *a7 = v31;
  v32 = **a2;
  if (*(_BYTE *)(v32 + 2057))
  {
    if ((ZinAlignPower2(((*(_DWORD *)v16 >> 14) & 0x1FFCu) + v30, *(_QWORD *)(v32 + 504)) & 0x3F) == 0)
      ZinAssertImpl("aligned_td_end_addr is divisible by 64");
    v31 = *a7;
  }
  v33 = *(_DWORD *)(v15 + 8);
  *a7 = v31 + 1;
  *v31 = v33;
  v34 = *(_DWORD *)(v15 + 12);
  *a7 = v31 + 2;
  v31[1] = v34;
  v35 = *(_DWORD *)(v15 + 16);
  *a7 = v31 + 3;
  v31[2] = v35;
  v36 = *(_DWORD *)(v15 + 20);
  *a7 = v31 + 4;
  v31[3] = v36;
  v37 = *(_DWORD *)(v15 + 24);
  *a7 = v31 + 5;
  v31[4] = v37;
  v38 = *(_DWORD *)(v15 + 28);
  *a7 = v31 + 6;
  v31[5] = v38;
  v39 = *(_DWORD *)(v15 + 32);
  *a7 = v31 + 7;
  v31[6] = v39;
  v40 = *(_DWORD *)(v15 + 36);
  *a7 = v31 + 8;
  v31[7] = v40;
  if ((*(_BYTE *)(v15 + 36) & 2) != 0)
  {
    v41 = *(_DWORD *)(v15 + 40);
    *a7 = v31 + 9;
    v31[8] = v41;
  }
  GetRegistersProgrammedAsRelocationCommands((uint64_t *)(v15 + 1264), (uint64_t)&v78);
  ZinCodegen::GetDontCareRegisters<8u>((_DWORD *)v15, (uint64_t)&v77);
  v42 = (unsigned int *)v77.__r_.__value_.__r.__words[2];
  if (v77.__r_.__value_.__r.__words[2])
  {
    do
    {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v78, v42 + 4, v42 + 4);
      v42 = *(unsigned int **)v42;
    }
    while (v42);
  }
  v43 = *a7;
  memset(v73, 0, 24);
  v71 = a3;
  v44 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 44, 0x48uLL, 21760, v43, 1, a6, a1, &v78, 0, (__int32 **)v73)];
  *a7 = v44;
  if (*(_QWORD *)v73)
  {
    *(_QWORD *)&v73[8] = *(_QWORD *)v73;
    operator delete(*(void **)v73);
    v44 = *a7;
  }
  v45 = operator new(4uLL);
  *(_QWORD *)v73 = v45;
  *v45 = 60;
  *(_QWORD *)&v73[8] = v45 + 1;
  *(_QWORD *)&v73[16] = v45 + 1;
  v46 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 500, 0x13uLL, 0, v44, 1, a6, a1, &v78, 0, (__int32 **)v73)];
  *a7 = v46;
  if (*(_QWORD *)v73)
  {
    *(_QWORD *)&v73[8] = *(_QWORD *)v73;
    operator delete(*(void **)v73);
    v46 = *a7;
  }
  memset(v73, 0, 24);
  v47 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 584, 0x45uLL, 19712, v46, 1, a6, a1, &v78, 0, (__int32 **)v73)];
  *a7 = v47;
  if (*(_QWORD *)v73)
  {
    *(_QWORD *)&v73[8] = *(_QWORD *)v73;
    operator delete(*(void **)v73);
    v47 = *a7;
  }
  memset(v73, 0, 24);
  v48 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 868, 0x1EuLL, 16640, v47, 1, a6, a1, &v78, 0, (__int32 **)v73)];
  *a7 = v48;
  if (*(_QWORD *)v73)
  {
    *(_QWORD *)&v73[8] = *(_QWORD *)v73;
    operator delete(*(void **)v73);
    v48 = *a7;
  }
  memset(v73, 0, 24);
  v49 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 996, 0xEuLL, 17664, v48, 1, a6, a1, &v78, 0, (__int32 **)v73)];
  *a7 = v49;
  if (*(_QWORD *)v73)
  {
    *(_QWORD *)&v73[8] = *(_QWORD *)v73;
    operator delete(*(void **)v73);
    v49 = *a7;
  }
  memset(v73, 0, 24);
  v50 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 1060, 0xBuLL, 18688, v49, 1, a6, a1, &v78, 0, (__int32 **)v73)];
  *a7 = v50;
  if (*(_QWORD *)v73)
  {
    *(_QWORD *)&v73[8] = *(_QWORD *)v73;
    operator delete(*(void **)v73);
    v50 = *a7;
  }
  v51 = *(_OWORD *)(v15 + 1160);
  v74 = *(_OWORD *)(v15 + 1144);
  v75 = v51;
  v76[0] = *(_OWORD *)(v15 + 1176);
  v52 = *(_OWORD *)(v15 + 1128);
  *(_OWORD *)v73 = *(_OWORD *)(v15 + 1112);
  *(_OWORD *)&v73[16] = v52;
  *(_OWORD *)((char *)v76 + 12) = *(_OWORD *)(v15 + 1188);
  memset(&v81, 0, sizeof(v81));
  v53 = &(*a7)[ZinRegisterPacking::ProcessRegisters((uint64_t)v73, 0x15uLL, 20736, v50, 1, a6, a1, &v78, 0, (__int32 **)&v81)];
  *a7 = v53;
  if (v81.__r_.__value_.__r.__words[0])
  {
    v81.__r_.__value_.__l.__size_ = v81.__r_.__value_.__r.__words[0];
    operator delete(v81.__r_.__value_.__l.__data_);
    v53 = *a7;
  }
  v72 = a8;
  v54 = *(_OWORD *)(v15 + 1220);
  *(_OWORD *)v73 = *(_OWORD *)(v15 + 1204);
  *(_OWORD *)&v73[16] = v54;
  v74 = *(_OWORD *)(v15 + 1236);
  *(_QWORD *)&v75 = *(_QWORD *)(v15 + 1252);
  memset(&v81, 0, sizeof(v81));
  *a7 += ZinRegisterPacking::ProcessRegisters((uint64_t)v73, 0xCuLL, 22784, v53, 1, a6, a1, &v78, 0, (__int32 **)&v81);
  if (v81.__r_.__value_.__r.__words[0])
  {
    v81.__r_.__value_.__l.__size_ = v81.__r_.__value_.__r.__words[0];
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  v55 = *(_QWORD *)(v15 + 1312);
  *(_DWORD *)(v15 + 1196) = 57005;
  if (v55 >= 8)
  {
    v56 = v55 >> 3;
    do
    {
      v57 = *a7;
      memset(v73, 0, 24);
      *a7 += ZinRegisterPacking::ProcessRegisters(v15 + 1196, 1uLL, 20820, v57, 1, a6, a1, &v78, 0, (__int32 **)v73);
      if (*(_QWORD *)v73)
      {
        *(_QWORD *)&v73[8] = *(_QWORD *)v73;
        operator delete(*(void **)v73);
      }
      --v56;
    }
    while (v56);
  }
  v58 = *(_QWORD *)(v15 + 1264);
  v59 = *(_QWORD *)(v15 + 1272);
  if (v58 != v59)
  {
    v60 = *a7;
    do
    {
      v61 = *(_DWORD *)(v58 + 32);
      *v60 = v61;
      *a7 = v60 + 1;
      if (*(_BYTE *)v58)
      {
        v62 = (uint64_t)v60 - a9 + 4;
        if (*(_BYTE *)(v58 + 1))
          AddBARRelocation(v58 + 8, v72, v62, (v61 & 0x8000) != 0, a2[7], 8 * ((_QWORD)v60 - a9) + 22, 7);
        else
          AddRelocation(v58 + 8, v72, v62, (v61 & 0x8000) != 0, a2[7]);
      }
      AddressOfRelocationCommand = GetAddressOfRelocationCommand((_DWORD *)(v58 + 32));
      RegisterValueFromAddress = ZinAneTdHw_v8::GetRegisterValueFromAddress(v16, AddressOfRelocationCommand);
      v65 = *a7;
      *v65 = RegisterValueFromAddress;
      v60 = v65 + 1;
      *a7 = v60;
      if ((v61 & 0x8000) != 0)
      {
        v66 = GetAddressOfRelocationCommand((_DWORD *)(v58 + 32));
        v67 = ZinAneTdHw_v8::GetRegisterValueFromAddress(v16, v66 + 4);
        v68 = *a7;
        *v68 = v67;
        v60 = v68 + 1;
        *a7 = v60;
      }
      v58 += 40;
    }
    while (v58 != v59);
  }
  v69 = *(unsigned int *)(v71 + 184);
  v70 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v71 + 200) + 16))(*(_QWORD *)(v71 + 200));
  AddSymbol((uint64_t)&v82, v72, v69, 4 * v70, a2[7]);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v77);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v78);
  if (SHIBYTE(v83) < 0)
    operator delete((void *)v82);
}

void sub_206E349C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  void *v44;

  v44 = *(void **)(v42 - 136);
  if (v44)
  {
    *(_QWORD *)(v42 - 128) = v44;
    operator delete(v44);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v42 - 89) < 0)
    operator delete(*(void **)(v42 - 112));
  _Unwind_Resume(a1);
}

uint64_t ZinIrCodegenHandleTds<8u>(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int *a4, CFArrayRef *a5)
{
  __int128 *AddressDefaultValueMapping;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v21;
  void *v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *j;
  ZinAneInstruction *v40;
  uint64_t v41;
  uint64_t *i;
  ZinAneInstruction *v43;
  _QWORD v44[3];
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;

  v46 = (uint64_t)&v46;
  v47 = &v46;
  v48 = 0;
  AddressDefaultValueMapping = GetAddressDefaultValueMapping(*(_DWORD *)(a1 + 8));
  v11 = ZinIrCodegenHandleTdsMakeList<8u>((uint64_t **)a1, a2, a3, &v46, (uint64_t)a4, a5);
  if ((_DWORD)v11)
  {
    v12 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v12)
      ZinIrCodegenHandleTds<8u>(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  else
  {
    v21 = *a4;
    if ((_DWORD)v21)
    {
      v22 = malloc_type_calloc(v21, 4uLL, 0x100004052888210uLL);
      if (v22)
      {
        v11 = ZinIrCodegenValidateTds<8u>(*(uint64_t **)a1, *(_QWORD *)(a1 + 24), (uint64_t)&v46);
        if ((_DWORD)v11)
        {
          v23 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v23)
            ZinIrCodegenHandleTds<8u>(v23, v24, v25, v26, v27, v28, v29, v30);
          free(v22);
        }
        else
        {
          v45 = (uint64_t *)v22;
          ZinIrMemoryPool::GetSections(*(_QWORD *)(a1 + 24), 1, v44);
          v41 = *(_QWORD *)(v44[1] + 16);
          std::__list_imp<ZinIrSection *>::clear(v44);
          DumpSegment<8u>(AddressDefaultValueMapping, (uint64_t **)a1, (uint64_t)a4, (uint64_t)&v46, (uint64_t)a5, &v45, v41, (uint64_t)v22);
          for (i = v47; i != &v46; i = (uint64_t *)i[1])
          {
            v43 = (ZinAneInstruction *)i[2];
            if (v43)
            {
              ZinAneInstruction::~ZinAneInstruction(v43);
              MEMORY[0x20BD002F8]();
            }
          }
          v11 = 0;
          *(_QWORD *)(v41 + 24) = v22;
        }
      }
      else
      {
        v31 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v31)
          ZinIrCodegenHandleTds<8u>(v31, v32, v33, v34, v35, v36, v37, v38);
        for (j = v47; j != &v46; j = (uint64_t *)j[1])
        {
          v40 = (ZinAneInstruction *)j[2];
          if (v40)
          {
            ZinAneInstruction::~ZinAneInstruction(v40);
            MEMORY[0x20BD002F8]();
          }
        }
        ZinIrNetworkStatus::SetError(a5, CFSTR("MemoryAllocationFailure"));
        v11 = 3;
      }
    }
    else
    {
      v11 = 0;
    }
  }
  std::__list_imp<ZinIrSection *>::clear(&v46);
  return v11;
}

void sub_206E34CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::__list_imp<ZinIrSection *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCodegenHandleTdsMakeList<8u>(uint64_t **a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, CFArrayRef *a6)
{
  uint64_t *v8;
  ZinIrOpLayer **v9;
  ZinIrOpLayer **v10;
  ZinIrOpLayer **v11;
  ZinIrOpLayer **v12;
  ZinIrOpLayer **v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  ZinIrOpLayer **v18;
  ZinIrOpLayer **v19;
  ZinIrOpLayer *v20;
  ZinAneInstruction *v21;
  int v22;
  _QWORD *v23;
  unsigned int v24;
  int v25;
  _QWORD *v26;
  char v27;
  ZinAneInstruction *v28;
  const std::string *v29;
  ZinIrOpLayer *v30;
  BOOL v31;
  ZinAneInstruction *v32;
  ZinIrOpLayer **v33;
  ZinIrOpLayer **v34;
  _WORD *v35;
  _BOOL4 v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  ZinIrOpLayer *v43;
  _QWORD *v44;
  ZinAneInstruction *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int8x8_t *v49;
  __int32 v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  _BOOL8 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t i;
  ZinAneInstruction *v65;
  const __CFString *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  BOOL v77;
  _QWORD *j;
  _BYTE *v79;
  uint64_t *v80;
  uint64_t v81;
  _QWORD *v82;
  float *v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int8x8_t v89;
  unsigned int v90;
  int8x8_t v91;
  uint64_t v92;
  uint8x8_t v93;
  unsigned int v94;
  float v95;
  int v96;
  float v97;
  _QWORD *v98;
  _BOOL8 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t *v109;
  ZinIrOpLayer *v113;
  uint64_t v115;
  ZinIrCompilerParameters *v116;
  ZinIrOpLayer *v117;
  _BYTE v118[16];
  uint64_t v119;
  ZinIrTensor *v120;
  std::__shared_weak_count *v121;
  _QWORD *v122;
  ZinAneInstruction *v123;
  ZinIrOpLayer *v124;
  void *__p;
  ZinIrOpLayer **v126;
  uint64_t v127;
  _OWORD v128[2];
  int v129;
  _OWORD buf[2];
  int v131;
  _BYTE v132[22];
  __int16 v133;
  double v134;
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  v8 = a1[4];
  if (a4[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Warning: tds list is already populated\n", (uint8_t *)buf, 2u);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Clearing list contents without explicit deallocation\n", (uint8_t *)buf, 2u);
    }
  }
  std::__list_imp<ZinIrSection *>::clear(a4);
  v9 = (ZinIrOpLayer **)*v8;
  v10 = (ZinIrOpLayer **)v8[1];
  if ((ZinIrOpLayer **)*v8 == v10)
  {
    v12 = (ZinIrOpLayer **)*v8;
    v11 = (ZinIrOpLayer **)*v8;
  }
  else
  {
    while (!ZinIrOpLayer::IsANELayer(*v9))
    {
      if (++v9 == v10)
      {
        v9 = v10;
        break;
      }
    }
    v11 = v9;
    v9 = (ZinIrOpLayer **)*v8;
    v12 = (ZinIrOpLayer **)v8[1];
  }
  v113 = *v11;
  do
  {
    v13 = v12;
    if (v12 == v9)
      break;
    --v12;
  }
  while (!ZinIrOpLayer::IsANELayer(*(v13 - 1)));
  v115 = **a1;
  v116 = (ZinIrCompilerParameters *)(*a1)[1];
  v117 = *(v13 - 1);
  memset(buf, 0, sizeof(buf));
  v131 = 1065353216;
  memset(v128, 0, sizeof(v128));
  v129 = 1065353216;
  v14 = a1[5];
  v108 = (uint64_t)v8;
  v109 = a1[6];
  v16 = *v8;
  v15 = v8[1];
  v17 = (v15 - *v8) >> 3;
  __p = 0;
  v126 = 0;
  v127 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<ZinIrOpLayer * const*>>,std::reverse_iterator<std::__wrap_iter<ZinIrOpLayer * const*>>>((char *)&__p, v15, v15, v16, v16, v17);
  v18 = (ZinIrOpLayer **)__p;
  v19 = v126;
  if (__p != v126)
  {
    v20 = 0;
    do
    {
      v124 = 0;
      v124 = *v18;
      if (!ZinIrOpLayer::IsANELayer(v124))
        goto LABEL_49;
      v123 = 0;
      v21 = (ZinAneInstruction *)operator new();
      v22 = *((unsigned __int8 *)v116 + 366);
      v23 = (_QWORD *)operator new();
      v24 = *(_DWORD *)(v115 + 8);
      v25 = *((_DWORD *)a1 + 2);
      *v23 = &unk_24C0281F0;
      ZinAneTdHw_v8::ZinAneTdHw_v8((ZinAneTdHw_v8 *)(v23 + 1), v24, v22 == 0, v25);
      v23[162] = &target_hw_limits_v8;
      v23[164] = 0;
      v122 = v23;
      ZinAneInstruction::ZinAneInstruction(v21, &v122);
      v26 = v122;
      v122 = 0;
      if (v26)
        (*(void (**)(_QWORD *))(*v26 + 8))(v26);
      v123 = v21;
      v27 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v124 + 120))(v124);
      v28 = v123;
      v29 = (const std::string *)v124;
      *((_BYTE *)v123 + 24) = v27;
      std::string::operator=((std::string *)((char *)v28 + 160), v29 + 1);
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer *&,ZinAneInstruction *&>((uint64_t)buf, &v124, &v124, (uint64_t *)&v123);
      *(_QWORD *)v132 = v124;
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer *&,ZinAneInstruction *&>((uint64_t)v128, &v123, &v123, (uint64_t *)v132);
      v30 = v124;
      v31 = v124 == v117;
      v32 = v123;
      *((_BYTE *)v123 + 199) = v124 == v113;
      *((_BYTE *)v32 + 198) = v31;
      v34 = (ZinIrOpLayer **)*v14;
      v33 = (ZinIrOpLayer **)v14[1];
      if ((ZinIrOpLayer **)*v14 != v33)
      {
        while (*v34 != v30)
        {
          if (++v34 == v33)
          {
            v34 = (ZinIrOpLayer **)v14[1];
            break;
          }
        }
      }
      if (v34 != v33)
      {
        *((_BYTE *)v32 + 198) = 1;
        if (a4[2])
          *(_BYTE *)(*(_QWORD *)(a4[1] + 16) + 199) = 1;
      }
      if (*(_DWORD *)(*((_QWORD *)v30 + 8) + 8) == 82)
      {
        *((_BYTE *)v32 + 188) = 1;
        *((_DWORD *)v32 + 48) = *((_DWORD *)v30 + 98);
      }
      v35 = (_WORD *)*((_QWORD *)v32 + 25);
      v35[4] = *((_QWORD *)v30 + 45);
      if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)v30 + 120))(v30))
      {
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v124 + 128))(v132);
        if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)ZinIrTensor::GetRootTensor(*(ZinIrTensor **)v132) + 12) + 64) + 8) == 28)
        {
          v36 = 0;
        }
        else
        {
          (*(void (**)(ZinIrTensor **__return_ptr))(*(_QWORD *)v124 + 128))(&v120);
          v36 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)ZinIrTensor::GetRootTensor(v120) + 12) + 64) + 8) != 29;
          v37 = v121;
          if (v121)
          {
            p_shared_owners = (unint64_t *)&v121->__shared_owners_;
            do
              v39 = __ldaxr(p_shared_owners);
            while (__stlxr(v39 - 1, p_shared_owners));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
        }
        v40 = *(std::__shared_weak_count **)&v132[8];
        if (*(_QWORD *)&v132[8])
        {
          v41 = (unint64_t *)(*(_QWORD *)&v132[8] + 8);
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
            if (!v36)
              goto LABEL_43;
LABEL_42:
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v123 + 25) + 32))(*((_QWORD *)v123 + 25), 5, 1);
            goto LABEL_43;
          }
        }
        if (v36)
          goto LABEL_42;
      }
LABEL_43:
      v43 = v124;
      if (((*(uint64_t (**)(_QWORD, ZinIrOpLayer *, uint64_t, ZinAneInstruction *, uint64_t, uint64_t **, CFArrayRef *))(**((_QWORD **)v123 + 25) + 320))(*((_QWORD *)v123 + 25), v124, a2, v123, a3, a1, a6) & 1) == 0)
      {
        for (i = a4[1]; (_QWORD *)i != a4; i = *(_QWORD *)(i + 8))
        {
          v65 = *(ZinAneInstruction **)(i + 16);
          if (v65)
          {
            ZinAneInstruction::~ZinAneInstruction(v65);
            MEMORY[0x20BD002F8]();
          }
        }
        if (v123)
        {
          ZinAneInstruction::~ZinAneInstruction(v123);
          MEMORY[0x20BD002F8]();
        }
        std::__list_imp<ZinIrSection *>::clear(a4);
        goto LABEL_114;
      }
      if (((*(uint64_t (**)(_QWORD, ZinIrOpLayer *, _OWORD *, uint64_t *))(**((_QWORD **)v123 + 25) + 360))(*((_QWORD *)v123 + 25), v43, buf, a1[3]) & 1) == 0)
      {
        v66 = CFSTR("CodeGenerationFailure");
LABEL_71:
        ZinIrNetworkStatus::SetError(a6, v66);
        goto LABEL_114;
      }
      (*(void (**)(_WORD *, ZinIrOpLayer *))(*(_QWORD *)v35 + 40))(v35, v124);
      if (v30 != v117
        && !*((_BYTE *)v123 + 188)
        && !(*(unsigned int (**)(_QWORD, uint64_t *, ZinIrOpLayer *, ZinIrOpLayer *, uint64_t *, _OWORD *, _QWORD, _QWORD))(**((_QWORD **)v123 + 25) + 384))(*((_QWORD *)v123 + 25), *a1, v43, v20, v109, buf, *((_QWORD *)v116 + 17), *((_QWORD *)v116 + 18)))
      {
        v66 = CFSTR("MemoryDependencyFailure");
        goto LABEL_71;
      }
      v44 = operator new(0x18uLL);
      v45 = v123;
      v46 = (_QWORD *)a4[1];
      *v44 = a4;
      v44[1] = v46;
      v44[2] = v45;
      *v46 = v44;
      v47 = a4[2] + 1;
      a4[1] = v44;
      a4[2] = v47;
      v20 = v43;
LABEL_49:
      ++v18;
    }
    while (v18 != v19);
  }
  ReassignTaskIDs<17u>((uint64_t)a4);
  if (!ZinIrCompilerParameters::getEnableKernelRewind(v116) && !*(_BYTE *)(v115 + 2088)
    || (v48 = ZinCodegenEnableInterKernelReuse(8, a1, (uint64_t)a4), !(_DWORD)v48))
  {
    v49 = *(int8x8_t **)(*(_QWORD *)(a4[1] + 16) + 200);
    v50 = v49[115].i32[0];
    v49[109] = vorr_s8(v49[109], (int8x8_t)vdup_n_s32(0x500030u));
    v49[115].i32[0] = v50 | 0x500030;
    if ((_QWORD *)a4[1] != a4)
    {
      v51 = 0;
      v52 = a4;
      do
      {
        v53 = *(_QWORD *)(*(_QWORD *)(*v52 + 16) + 200);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 368))(v53, v51);
        v54 = *(_QWORD *)(*(_QWORD *)(*v52 + 16) + 200);
        v51 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54) - 1;
        v52 = (_QWORD *)*v52;
      }
      while (v52 != (_QWORD *)a4[1]);
    }
    v55 = ZinAlignPower2(2, *(_QWORD *)(v115 + 504));
    if (SetInstructionMemOffset<8u>((uint64_t)a4, v115, (*a1)[1], v55))
    {
      v56 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v56)
        ZinIrCodegenHandleTdsMakeList<8u>(v56, v57, v58, v59, v60, v61, v62, v63);
      goto LABEL_114;
    }
    LegalizeNetworks<8u>(a1, a4, (_DWORD *)a5, (uint64_t)a6, v128);
    v67 = *a1;
    std::unordered_map<ZinIrOpLayer *,ZinAneInstruction *>::unordered_map((uint64_t)v118, (uint64_t)buf);
    v68 = v67[1];
    v132[5] = *(_BYTE *)(v68 + 472);
    *(_WORD *)&v132[3] = *(_WORD *)(v68 + 100);
    v69 = *(unsigned __int8 *)(v68 + 95);
    v70 = (char)v69;
    if ((v69 & 0x80u) != 0)
      v69 = *(_QWORD *)(v68 + 80);
    if (v69 == 9)
    {
      v73 = *(_QWORD *)(v68 + 72);
      v71 = v68 + 72;
      v72 = v73;
      if (v70 < 0)
        v71 = v72;
      v74 = *(_QWORD *)v71;
      v75 = *(unsigned __int8 *)(v71 + 8);
      v77 = v74 == 0x30336E2E67343168 && v75 == 49;
    }
    else
    {
      v77 = 0;
    }
    v132[6] = v77;
    for (j = (_QWORD *)a4[1]; j != a4; j = (_QWORD *)j[1])
    {
      v79 = (_BYTE *)j[2];
      v80 = &v119;
      while (1)
      {
        v80 = (uint64_t *)*v80;
        if (!v80)
          break;
        if ((_BYTE *)v80[3] == v79)
        {
          v81 = v80[2];
          goto LABEL_90;
        }
      }
      v81 = 0;
LABEL_90:
      v132[0] = v79[199];
      v132[2] = v79[196];
      v132[1] = v79[198];
      ZinAneInstruction::HandleEventLogs((uint64_t)v79, v67, v81, (uint64_t)v132);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v118);
    v82 = (_QWORD *)a4[1];
    if (v82 == a4)
    {
LABEL_108:
      v48 = ZinIrContextSwitchValidator<8u>(a4);
      if ((_DWORD)v48)
      {
        v99 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v99)
          ZinIrCodegenHandleTdsMakeList<8u>(v99, v100, v101, v102, v103, v104, v105, v106);
      }
      else
      {
        v48 = SetTensorKernelDependency<8u>(v108, buf, a6);
        if (!(_DWORD)v48)
        {
          if ((*((_BYTE *)v116 + 97) & 0x20) != 0)
            ZinIrCodegen::PrintContextSwitchInfo((uint64_t)a4);
          v48 = 0;
        }
      }
    }
    else
    {
      v84 = **a1;
      v83 = (float *)(*a1)[1];
      v85 = MEMORY[0x24BDACB70];
      while (1)
      {
        v86 = v82[2];
        v87 = *(_QWORD *)(v86 + 200);
        v88 = 4 * (*(unsigned int (**)(uint64_t))(*(_QWORD *)v87 + 16))(v87);
        if (*(_QWORD *)(v84 + 296) > v88 || *(_QWORD *)(v84 + 304) < v88)
          break;
        v89.i32[0] = *(_DWORD *)(v87 + 24) & 0x3FFFFFF;
        v91 = vcnt_s8(v89);
        v91.i16[0] = vaddlv_u8((uint8x8_t)v91);
        v92 = *(_QWORD *)(a5 + 16);
        *(_QWORD *)(a5 + 8) += v91.u32[0];
        v91.i32[0] = *(_DWORD *)(v87 + 16) & 0x3FFFFFF;
        v93 = (uint8x8_t)vcnt_s8(v91);
        v93.i16[0] = vaddlv_u8(v93);
        *(_QWORD *)(a5 + 16) = v92 + v93.u32[0];
        v94 = *(unsigned __int16 *)(v87 + 12);
        if (*(_DWORD *)(a5 + 32) > v94)
          v94 = *(_DWORD *)(a5 + 32);
        *(_DWORD *)(a5 + 32) = v94;
        v95 = v83[97];
        if (v95 > 0.0)
        {
          LOWORD(v90) = *(_WORD *)(v87 + 12);
          if (v95 < (float)v90)
            ++*(_DWORD *)(a5 + 36);
        }
        LODWORD(v120) = 0;
        if (ZinIrCompilerParameters::getEnforcedTdLatency((ZinIrCompilerParameters *)v83, (float *)&v120))
        {
          v96 = *(unsigned __int16 *)(v87 + 12);
          v97 = *(float *)&v120;
          if (*(float *)&v120 < (float)v96 && os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
          {
            v98 = (_QWORD *)(v86 + 160);
            if (*(char *)(v86 + 183) < 0)
              v98 = (_QWORD *)*v98;
            *(_DWORD *)v132 = 136315650;
            *(_QWORD *)&v132[4] = v98;
            *(_WORD *)&v132[12] = 2048;
            *(double *)&v132[14] = v97;
            v133 = 2048;
            v134 = (double)v96;
            _os_log_error_impl(&dword_2069AB000, v85, OS_LOG_TYPE_ERROR, "Latency for Task %s is too large (>%.0f us) (%.0f)", v132, 0x20u);
          }
        }
        v82 = (_QWORD *)v82[1];
        if (v82 == a4)
          goto LABEL_108;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrCodegenHandleTdsMakeList<17u>();
      ZinIrNetworkStatus::SetError(a6, CFSTR("InvalidTotalTDSize"));
LABEL_114:
      v48 = 3;
    }
  }
  if (__p)
  {
    v126 = (ZinIrOpLayer **)__p;
    operator delete(__p);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v128);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)buf);
  return v48;
}

void sub_206E35798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  if (__p)
    operator delete(__p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v35 - 208);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCodegenValidateTds<8u>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BOOL8 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BOOL8 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v4 = *a1;
  v5 = *(_QWORD *)(a3 + 8);
  if (v5 == a3)
  {
LABEL_10:
    v15 = ZinIrTdValidationUtil::ValidateKernelCaching<8u>(v4, a3);
    if ((_DWORD)v15)
    {
      v16 = v15;
      v17 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v17)
        ZinIrCodegenValidateTds<8u>(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      v33 = ZinValidateTd<8u>::CheckPEReductionAccumulationRetention(a3);
      if ((_DWORD)v33)
      {
        v16 = v33;
        v34 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v34)
          ZinIrCodegenValidateTds<8u>(v34, v35, v36, v37, v38, v39, v40, v41);
      }
      else
      {
        v42 = ZinValidateTd<8u>::ValidateDepMode(a3);
        if ((_DWORD)v42)
        {
          v16 = v42;
          v43 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v43)
            ZinIrCodegenValidateTds<8u>(v43, v44, v45, v46, v47, v48, v49, v50);
        }
        else
        {
          v51 = ZinValidateTd<8u>::ValidateRCASDependency(a3);
          if ((_DWORD)v51)
          {
            v16 = v51;
            v52 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v52)
              ZinIrCodegenValidateTds<8u>(v52, v53, v54, v55, v56, v57, v58, v59);
          }
          else
          {
            v60 = ZinValidateTd<8u>::ValidateL2CircularBuffer(a3);
            if ((_DWORD)v60)
            {
              v16 = v60;
              v61 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v61)
                ZinIrCodegenValidateTds<8u>(v61, v62, v63, v64, v65, v66, v67, v68);
            }
            else
            {
              v69 = ZinValidateTd<8u>::ValidateCachePrefetchKernelTaskInterval(a3, *(_DWORD *)(v4 + 8));
              if ((_DWORD)v69)
              {
                v16 = v69;
                v70 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (v70)
                  ZinIrCodegenValidateTds<8u>(v70, v71, v72, v73, v74, v75, v76, v77);
              }
              else
              {
                v16 = ZinIrTdValidationUtil::ValidateDramCircularBuffer<8u>(*(_QWORD *)(v4 + 528), a3);
                if ((_DWORD)v16)
                {
                  v78 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (v78)
                    ZinIrCodegenValidateTds<8u>(v78, v79, v80, v81, v82, v83, v84, v85);
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v8 = 0;
    v9 = *(unsigned __int8 *)(a1[1] + 130);
    while (1)
    {
      v10 = *(_QWORD *)(v5 + 16);
      v11 = *(_QWORD *)(v10 + 200);
      v13 = *(unsigned __int16 *)(v11 + 8);
      v12 = v11 + 8;
      if (v13 != v8)
        break;
      if (!*(_BYTE *)(v10 + 188))
      {
        v14 = ZinValidateTd<8u>::Test(a1, a2, v12, *(unsigned __int8 *)(v10 + 198), v9 != 0);
        if ((_DWORD)v14)
        {
          v16 = v14;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinIrCodegenValidateTds<17u>();
          return v16;
        }
      }
      if (*(_BYTE *)(v10 + 198))
        v8 = 0;
      else
        ++v8;
      v5 = *(_QWORD *)(v5 + 8);
      if (v5 == a3)
        goto LABEL_10;
    }
    v25 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v25)
      ZinIrCodegenValidateTds<1u>(v25, v26, v27, v28, v29, v30, v31, v32);
    return 3;
  }
  return v16;
}

void DumpSegment<8u>(_QWORD *a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t **a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v8;
  uint64_t v9;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *__p;
  char v28;

  v8 = *(_BYTE *)((*a2)[1] + 366) == 0;
  v9 = *a2[8];
  if (a2[8][1] != v9)
  {
    v15 = 0;
    v26 = a4;
    do
    {
      v16 = (unsigned int *)(v9 + 80 * v15);
      v17 = *(_QWORD *)(a4 + 8);
      v18 = v16[11];
      if ((_DWORD)v18)
      {
        v19 = v18 + 1;
        do
        {
          v17 = *(_QWORD *)(v17 + 8);
          --v19;
        }
        while (v19 > 1);
      }
      v20 = *v16;
      v21 = v17;
      if ((_DWORD)v20)
      {
        v22 = v20 + 1;
        v21 = v17;
        do
        {
          v21 = *(_QWORD *)(v21 + 8);
          --v22;
        }
        while (v22 > 1);
      }
      *a6 = (uint64_t *)(a8 + (*(_DWORD *)(v9 + 80 * v15 + 36) & 0xFFFFFFFC));
      v23 = DumpSegmentHeader<17u,ZinAneSegmentHeader_V2>(v15, (uint64_t)v16, a4, a6);
      std::operator+<char>();
      AddSymbol((uint64_t)&__p, a7, 0, 4 * v23, a2[7]);
      if (v28 < 0)
        operator delete(__p);
      while (v17 != v21)
      {
        DumpTask<8u>(a1, a2, *(_QWORD *)(v17 + 16), v24, v25, v8, (unsigned int **)a6, a7, a8);
        v17 = *(_QWORD *)(v17 + 8);
      }
      ++v15;
      v9 = *a2[8];
      a4 = v26;
    }
    while (v15 < 0xCCCCCCCCCCCCCCCDLL * ((a2[8][1] - v9) >> 4));
  }
}

void sub_206E35C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<8u>::GetSizeInWords(uint64_t a1)
{
  int v2;
  __int128 *AddressDefaultValueMapping;
  int v4;
  unsigned int *i;
  int v6;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  void *__p;
  void *v24;
  _DWORD *v25;
  _BYTE v26[16];
  unsigned int *v27;
  _QWORD v28[5];

  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 5) == 1)
    v2 = 9;
  else
    v2 = 8;
  AddressDefaultValueMapping = GetAddressDefaultValueMapping(*(_DWORD *)(a1 + 1292));
  v4 = *(unsigned __int8 *)(a1 + 1288);
  GetRegistersProgrammedAsRelocationCommands((uint64_t *)(a1 + 1264), (uint64_t)v28);
  ZinCodegen::GetDontCareRegisters<8u>((_DWORD *)a1, (uint64_t)v26);
  for (i = v27; i; i = *(unsigned int **)i)
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v28, i + 4, i + 4);
  __p = 0;
  v24 = 0;
  v25 = 0;
  v6 = ZinRegisterPacking::ProcessRegisters(a1 + 44, 0x48uLL, 21760, 0, 0, v4, AddressDefaultValueMapping, v28, 0, (__int32 **)&__p);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  v7 = operator new(4uLL);
  __p = v7;
  *v7 = 60;
  v24 = v7 + 1;
  v25 = v7 + 1;
  v8 = ZinRegisterPacking::ProcessRegisters(a1 + 500, 0x13uLL, 0, 0, 0, v4, AddressDefaultValueMapping, v28, 0, (__int32 **)&__p);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  __p = 0;
  v24 = 0;
  v25 = 0;
  v9 = ZinRegisterPacking::ProcessRegisters(a1 + 584, 0x45uLL, 19712, 0, 0, v4, AddressDefaultValueMapping, v28, 0, (__int32 **)&__p);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  __p = 0;
  v24 = 0;
  v25 = 0;
  v10 = ZinRegisterPacking::ProcessRegisters(a1 + 868, 0x1EuLL, 16640, 0, 0, v4, AddressDefaultValueMapping, v28, 0, (__int32 **)&__p);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  __p = 0;
  v24 = 0;
  v25 = 0;
  v22 = ZinRegisterPacking::ProcessRegisters(a1 + 1060, 0xBuLL, 18688, 0, 0, v4, AddressDefaultValueMapping, v28, 0, (__int32 **)&__p);
  v11 = v9;
  v12 = v8;
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  v13 = v6;
  __p = 0;
  v24 = 0;
  v25 = 0;
  v14 = ZinRegisterPacking::ProcessRegisters(a1 + 1112, 0x15uLL, 20736, 0, 0, v4, AddressDefaultValueMapping, v28, 0, (__int32 **)&__p);
  v15 = v2;
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  __p = 0;
  v24 = 0;
  v25 = 0;
  v16 = ZinRegisterPacking::ProcessRegisters(a1 + 996, 0xEuLL, 17664, 0, 0, v4, AddressDefaultValueMapping, v28, 0, (__int32 **)&__p);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  __p = 0;
  v24 = 0;
  v25 = 0;
  v17 = v13
      + v15
      + v12
      + v11
      + v10
      + v22
      + v14
      + v16
      + ZinRegisterPacking::ProcessRegisters(a1 + 1204, 0xCuLL, 22784, 0, 0, v4, AddressDefaultValueMapping, v28, 0, (__int32 **)&__p);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  v18 = v17 + (*(_QWORD *)(a1 + 1312) >> 2);
  v19 = *(_QWORD *)(a1 + 1264);
  v20 = *(_QWORD *)(a1 + 1272);
  while (v19 != v20)
  {
    v18 = GetSizeInWordsOfRelocationCommand(v19 + 32) + v18;
    v19 += 40;
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v26);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v28);
  return v18;
}

void sub_206E3600C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
    operator delete(__p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a15);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t SetInstructionMemOffset<8u>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != a1)
  {
    v7 = a4;
    do
    {
      v8 = *(_QWORD *)(v4 + 16);
      v9 = *(_QWORD *)(v8 + 200);
      *(_DWORD *)(v8 + 184) = v7;
      if (*(_BYTE *)(a2 + 2057))
        AdjustTaskSizeForRdar107730882<8u>(v8, a2);
      v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, 25);
      v7 = ZinAlignPower2(v7 + (4 * v10), *(_QWORD *)(a2 + 504));
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != a1);
  }
  return 0;
}

uint64_t LegalizeNetworks<8u>(uint64_t **a1, _QWORD *a2, _DWORD *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unsigned int v18;
  __int16 v19;
  uint64_t v20;
  _WORD *v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t result;
  int v26;
  uint64_t v27;
  __int128 v30;
  uint64_t v31;
  void **v32;

  v7 = **a1;
  v8 = *(unsigned int *)((*a1)[1] + 544);
  if ((int)v8 < 1)
  {
    v10 = (unint64_t *)(v7 + 608);
  }
  else
  {
    *(_QWORD *)&v30 = *(unsigned int *)((*a1)[1] + 544);
    v9 = *(_QWORD *)(v7 + 608) >= v8;
    v10 = (unint64_t *)&v30;
    if (!v9)
      v10 = (unint64_t *)(v7 + 608);
  }
  v11 = *v10;
  v12 = ZinAlignPower2(2, *(_QWORD *)(v7 + 504));
  v13 = (_QWORD *)a2[1];
  if (v13 != a2)
  {
    v14 = v12;
    v15 = v12;
    do
    {
      v16 = v13[2];
      if (v15 == v14)
        *(_BYTE *)(v16 + 196) = 1;
      v17 = *(_WORD **)(v16 + 200);
      if (!v17[4])
        *(_BYTE *)(v16 + 199) = 1;
      v18 = (*(uint64_t (**)(_WORD *, uint64_t))(*(_QWORD *)v17 + 24))(v17, 25);
      v15 += ZinAlignPower2(4 * v18, *(_QWORD *)(v7 + 504));
      if (v15 <= v11)
      {
        if (*(_BYTE *)(v16 + 198))
        {
          *(_BYTE *)(v16 + 197) = 1;
          v15 = v14;
          if ((*(unsigned int (**)(_WORD *, uint64_t))(*(_QWORD *)v17 + 24))(v17, 4) != 1)
            ZinAssertImpl("Incorrect network boundary", a5);
        }
      }
      else
      {
        v19 = *(_WORD *)(*(_QWORD *)(v13[2] + 200) + 8);
        do
        {
          if (!v19)
            ZinAssertImpl("Cannot find valid segment boundary", a5);
          v13 = (_QWORD *)*v13;
          v20 = v13[2];
          v21 = *(_WORD **)(v20 + 200);
          v19 = v21[4];
        }
        while (!(*(unsigned int (**)(_WORD *, uint64_t))(*(_QWORD *)v21 + 24))(v21, 4));
        *(_BYTE *)(v20 + 197) = 1;
        v15 = v14;
      }
      v13 = (_QWORD *)v13[1];
    }
    while (v13 != a2);
  }
  *(_BYTE *)(*(_QWORD *)(*a2 + 16) + 197) = 1;
  CollectSegmentStats<8u>(**a1, (uint64_t)a2, a5, (uint64_t *)&v30);
  v22 = a1[8];
  std::vector<ZinIrCodegenTDPartitionStats>::__vdeallocate(v22);
  *(_OWORD *)v22 = v30;
  v22[2] = v31;
  v30 = 0uLL;
  v31 = 0;
  v32 = (void **)&v30;
  std::vector<ZinIrCodegenTDPartitionStats>::__destroy_vector::operator()[abi:ne180100](&v32);
  v23 = *(_QWORD *)(*a2 + 16);
  v24 = *(_DWORD *)(v23 + 184);
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v23 + 200) + 24))(*(_QWORD *)(v23 + 200), 25);
  v26 = result + (v24 >> 2);
  *a3 = v26;
  v27 = *a1[8];
  if (a1[8][1] - v27 == 80 && v26 != *(_DWORD *)(v27 + 12))
    ZinAssertImpl("Error");
  return result;
}

uint64_t ZinIrContextSwitchValidator<8u>(_QWORD *a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*a1 + 16);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 200) + 24))(*(_QWORD *)(v2 + 200), 4))
  {
    v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v11)
      ZinIrContextSwitchValidator<8u>(v11, v12, v13, v14, v15, v16, v17, v18);
    return 2;
  }
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 200) + 24))(*(_QWORD *)(v2 + 200), 49))
  {
    v3 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v3)
      ZinIrContextSwitchValidator<8u>(v3, v4, v5, v6, v7, v8, v9, v10);
    return 2;
  }
  v20 = (_QWORD *)a1[1];
  if (v20 != a1)
  {
    while (1)
    {
      v21 = v20[2];
      v22 = *(_QWORD *)(v21 + 200);
      if ((~*(_DWORD *)(v22 + 920) & 3) == 0)
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)v22 + 24))(*(_QWORD *)(v21 + 200), 4))
          break;
      }
      if ((*(_BYTE *)(v22 + 997) & 8) != 0
        && (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v21 + 200) + 24))(*(_QWORD *)(v21 + 200), 4))
      {
        v31 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v31)
          ZinIrContextSwitchValidator<8u>(v31, v32, v33, v34, v35, v36, v37, v38);
        return 2;
      }
      v20 = (_QWORD *)v20[1];
      if (v20 == a1)
        return 0;
    }
    v23 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v23)
      ZinIrContextSwitchValidator<8u>(v23, v24, v25, v26, v27, v28, v29, v30);
    return 2;
  }
  return 0;
}

uint64_t SetTensorKernelDependency<8u>(uint64_t a1, _QWORD *a2, CFArrayRef *a3)
{
  _QWORD **v3;
  _QWORD **v4;
  ZinIrTensor *RootTensor;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  ZinIrTensor **v17;
  char *v18;
  char *v19;
  ZinIrTensor *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  ZinIrTensor *v37;
  void *__p;
  void *v39;
  uint64_t v40;
  void *v41;
  char *v42;
  char *v43;
  ZinIrTensor *v44;
  _QWORD *v45;
  _OWORD v46[2];
  int v47;
  ZinIrTensor **v48;

  memset(v46, 0, sizeof(v46));
  v47 = 1065353216;
  v3 = *(_QWORD ***)a1;
  v4 = *(_QWORD ***)(a1 + 8);
  if (*(_QWORD ***)a1 == v4)
  {
LABEL_40:
    v26 = 0;
  }
  else
  {
    while (1)
    {
      v45 = *v3;
      if (((*(uint64_t (**)(_QWORD *))(*v45 + 120))(v45) & 1) != 0)
      {
        v44 = 0;
        (*(void (**)(ZinIrTensor **__return_ptr))(*v45 + 128))(&v37);
        RootTensor = ZinIrTensor::GetRootTensor(v37);
        v7 = (std::__shared_weak_count *)__p;
        if (__p)
        {
          v8 = (unint64_t *)((char *)__p + 8);
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 - 1, v8));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v44 = RootTensor;
        if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)RootTensor + 12) + 64) + 8) & 0xFFFFFFFE) != 0x1C)
        {
          v10 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v46, &v44);
          if (!v10)
          {
            ZinIrTensor::GetAllChildrenInTree(v44, (uint64_t *)&v37);
            ZinIrTensor::ConvertRawVectorFromPtrVector((uint64_t **)&v37, (char **)&v41);
            v48 = &v37;
            std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
            v11 = v42;
            if (v42 >= v43)
            {
              v13 = (v42 - (_BYTE *)v41) >> 3;
              if ((unint64_t)(v13 + 1) >> 61)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v14 = (v43 - (_BYTE *)v41) >> 2;
              if (v14 <= v13 + 1)
                v14 = v13 + 1;
              if ((unint64_t)(v43 - (_BYTE *)v41) >= 0x7FFFFFFFFFFFFFF8)
                v15 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v15 = v14;
              if (v15)
                v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v43, v15);
              else
                v16 = 0;
              v17 = (ZinIrTensor **)&v16[8 * v13];
              *v17 = v44;
              v12 = (uint64_t)(v17 + 1);
              v19 = (char *)v41;
              v18 = v42;
              if (v42 != v41)
              {
                do
                {
                  v20 = (ZinIrTensor *)*((_QWORD *)v18 - 1);
                  v18 -= 8;
                  *--v17 = v20;
                }
                while (v18 != v19);
                v18 = (char *)v41;
              }
              v41 = v17;
              v42 = (char *)v12;
              v43 = &v16[8 * v15];
              if (v18)
                operator delete(v18);
            }
            else
            {
              *(_QWORD *)v42 = v44;
              v12 = (uint64_t)(v11 + 8);
            }
            v42 = (char *)v12;
            v37 = v44;
            v39 = 0;
            v40 = 0;
            __p = 0;
            std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, v41, v12, (v12 - (uint64_t)v41) >> 3);
            v10 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::__emplace_unique_key_args<ZinIrTensor *,std::pair<ZinIrTensor * const,std::vector<ZinIrTensor *>>>((uint64_t)v46, &v37, (uint64_t)&v37);
            if (__p)
            {
              v39 = __p;
              operator delete(__p);
            }
            if (v41)
            {
              v42 = (char *)v41;
              operator delete(v41);
            }
          }
          v41 = 0;
          v22 = v10[3];
          v21 = v10[4];
          while (v22 != v21)
          {
            v23 = *(_QWORD **)(*(_QWORD *)v22 + 96);
            if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v23)
              && v23[45] <= v45[45]
              && (!v41 || *((_QWORD *)v41 + 6) < v23[6]))
            {
              v41 = v23;
            }
            v22 += 8;
          }
          v24 = *(_QWORD *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(a2, &v41)[3]+ 200);
          v37 = (ZinIrTensor *)&v45;
          v25 = std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)a2, &v45, (uint64_t)&std::piecewise_construct, (_QWORD **)&v37)[3];
          (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v25 + 200) + 32))(*(_QWORD *)(v25 + 200), 8, *(unsigned __int16 *)(v24 + 8));
          if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v25 + 200) + 24))(*(_QWORD *)(v25 + 200), 5) != 1)break;
        }
      }
      if (++v3 == v4)
        goto LABEL_40;
    }
    v28 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v28)
      SetTensorKernelDependency<8u>(v28, v29, v30, v31, v32, v33, v34, v35);
    ZinIrNetworkStatus::SetError(a3, CFSTR("InvalidHWHeader"));
    v26 = 3;
  }
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)v46);
  return v26;
}

void sub_206E367F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t ZinAneTd<8u>::GetField(uint64_t a1, int a2)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;

  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 10:
    case 11:
    case 13:
    case 23:
    case 24:
      v3 = *(_DWORD *)(a1 + 876);
      return (v3 >> 2) & 3;
    case 4:
      return *(_DWORD *)(a1 + 36) & 1;
    case 5:
      return (*(_DWORD *)(a1 + 36) >> 1) & 1;
    case 8:
      return *(unsigned __int16 *)(a1 + 40);
    case 9:
      return *(_WORD *)(a1 + 38) & 7;
    case 12:
      v3 = *(_DWORD *)(a1 + 872);
      return (v3 >> 2) & 3;
    case 14:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 45:
    case 46:
    case 47:
    case 48:
    case 50:
      return *(_DWORD *)(a1 + 16) & 0x3FFFFFF;
    case 15:
      v4 = *(_DWORD *)(a1 + 872);
      goto LABEL_28;
    case 16:
      v5 = *(_DWORD *)(a1 + 872);
      goto LABEL_30;
    case 17:
      v4 = *(_DWORD *)(a1 + 920);
      goto LABEL_28;
    case 18:
      v5 = *(_DWORD *)(a1 + 920);
      goto LABEL_30;
    case 19:
      v6 = *(_DWORD *)(a1 + 872);
      goto LABEL_32;
    case 20:
      v7 = *(_DWORD *)(a1 + 872);
      goto LABEL_34;
    case 21:
      v6 = *(_DWORD *)(a1 + 920);
      goto LABEL_32;
    case 22:
      v7 = *(_DWORD *)(a1 + 920);
      goto LABEL_34;
    case 25:
      return *(_WORD *)(a1 + 10) & 0x7FF;
    case 26:
      v8 = *(_DWORD *)(a1 + 964);
      return (v8 >> 2) & 0x1FFFFFFF;
    case 27:
      v8 = *(_DWORD *)(a1 + 968);
      return (v8 >> 2) & 0x1FFFFFFF;
    case 28:
      v9 = *(_DWORD *)(a1 + 964);
      goto LABEL_25;
    case 29:
      v9 = *(_DWORD *)(a1 + 968);
LABEL_25:
      result = v9 & 3;
      break;
    case 40:
      result = (*(_DWORD *)(a1 + 36) >> 3) & 1;
      break;
    case 41:
      v4 = *(_DWORD *)(a1 + 876);
LABEL_28:
      result = (v4 >> 4) & 1;
      break;
    case 42:
      v5 = *(_DWORD *)(a1 + 876);
LABEL_30:
      result = (v5 >> 5) & 1;
      break;
    case 43:
      v6 = *(_DWORD *)(a1 + 876);
LABEL_32:
      result = (v6 >> 20) & 1;
      break;
    case 44:
      v7 = *(_DWORD *)(a1 + 876);
LABEL_34:
      result = (v7 >> 22) & 1;
      break;
    case 49:
      result = *(unsigned int *)(a1 + 32);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetField(uint64_t result, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  switch(a2)
  {
    case 4:
      v3 = *(_DWORD *)(result + 36) & 0xFFFFFFFE | a3 & 1;
      goto LABEL_26;
    case 5:
      v3 = *(_DWORD *)(result + 36) & 0xFFFFFFFD | (2 * (a3 & 1));
      goto LABEL_26;
    case 8:
      *(_WORD *)(result + 40) = a3;
      return result;
    case 9:
      v3 = *(_DWORD *)(result + 36) & 0xFFF8FFFF | ((a3 & 7) << 16);
      goto LABEL_26;
    case 12:
      v4 = *(_DWORD *)(result + 872) & 0xFFFFFFF3 | (4 * (a3 & 3));
      goto LABEL_14;
    case 13:
      v5 = *(_DWORD *)(result + 876) & 0xFFFFFFF3 | (4 * (a3 & 3));
      goto LABEL_31;
    case 15:
      v4 = *(_DWORD *)(result + 872) & 0xFFFFFFEF | (16 * (a3 & 1));
      goto LABEL_14;
    case 16:
      v4 = *(_DWORD *)(result + 872) & 0xFFFFFFDF | (32 * (a3 & 1));
      goto LABEL_14;
    case 17:
      v6 = *(_DWORD *)(result + 920) & 0xFFFFFFEF | (16 * (a3 & 1));
      goto LABEL_17;
    case 18:
      v6 = *(_DWORD *)(result + 920) & 0xFFFFFFDF | (32 * (a3 & 1));
      goto LABEL_17;
    case 19:
      v4 = *(_DWORD *)(result + 872) & 0xFFEFFFFF | ((a3 & 1) << 20);
      goto LABEL_14;
    case 20:
      v4 = *(_DWORD *)(result + 872) & 0xFFBFFFFF | ((a3 & 1) << 22);
LABEL_14:
      *(_DWORD *)(result + 872) = v4;
      return result;
    case 21:
      v6 = *(_DWORD *)(result + 920) & 0xFFEFFFFF | ((a3 & 1) << 20);
      goto LABEL_17;
    case 22:
      v6 = *(_DWORD *)(result + 920) & 0xFFBFFFFF | ((a3 & 1) << 22);
LABEL_17:
      *(_DWORD *)(result + 920) = v6;
      return result;
    case 25:
      *(_DWORD *)(result + 8) = *(_DWORD *)(result + 8) & 0xF800FFFF | ((a3 & 0x7FF) << 16);
      return result;
    case 26:
      v7 = *(_DWORD *)(result + 964) & 0x80000003 | (4 * (a3 & 0x1FFFFFFF));
      goto LABEL_22;
    case 27:
      v8 = *(_DWORD *)(result + 968) & 0x80000003 | (4 * (a3 & 0x1FFFFFFF));
      goto LABEL_24;
    case 28:
      v7 = *(_DWORD *)(result + 964) & 0xFFFFFFFC | a3 & 3;
LABEL_22:
      *(_DWORD *)(result + 964) = v7;
      return result;
    case 29:
      v8 = *(_DWORD *)(result + 968) & 0xFFFFFFFC | a3 & 3;
LABEL_24:
      *(_DWORD *)(result + 968) = v8;
      return result;
    case 40:
      v3 = *(_DWORD *)(result + 36) & 0xFFFFFFF7 | (8 * (a3 & 1));
LABEL_26:
      *(_DWORD *)(result + 36) = v3;
      return result;
    case 41:
      v5 = *(_DWORD *)(result + 876) & 0xFFFFFFEF | (16 * (a3 & 1));
      goto LABEL_31;
    case 42:
      v5 = *(_DWORD *)(result + 876) & 0xFFFFFFDF | (32 * (a3 & 1));
      goto LABEL_31;
    case 43:
      v5 = *(_DWORD *)(result + 876) & 0xFFEFFFFF | ((a3 & 1) << 20);
      goto LABEL_31;
    case 44:
      v5 = *(_DWORD *)(result + 876) & 0xFFBFFFFF | ((a3 & 1) << 22);
LABEL_31:
      *(_DWORD *)(result + 876) = v5;
      break;
    case 49:
      *(_DWORD *)(result + 32) = a3;
      break;
    case 50:
      *(_DWORD *)(result + 16) = *(_DWORD *)(result + 16) & 0xFC000000 | a3 & 0x3FFFFFF;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<8u>::HandleUserTags(uint64_t a1, uint64_t a2)
{
  int v4;
  int IsCompressed;
  uint64_t result;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = ZinEngineLayerMirInfo::HasDmaRead(*(_QWORD *)(a2 + 264), 0);
  IsCompressed = 0;
  if (v4)
    IsCompressed = ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(*(_QWORD *)(a2 + 264)
                                                                                           + 712));
  result = ZinEngineLayerMirInfo::HasDmaRead(*(_QWORD *)(a2 + 264), 1);
  v7 = result;
  if (!(_DWORD)result)
  {
    v8 = 0;
    if (!*(_QWORD *)(a2 + 200))
      goto LABEL_9;
    goto LABEL_8;
  }
  result = ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(*(_QWORD *)(a2 + 264) + 808));
  v8 = result;
  if (!*(_QWORD *)(a2 + 200))
    goto LABEL_9;
  if (*(_QWORD *)(a2 + 192) != 1)
  {
LABEL_8:
    if (!*(_QWORD *)(a2 + 192))
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 496))(a2);
      v7 |= result;
      v9 = *(_DWORD *)(a2 + 360);
      if ((v4 & 1) == 0)
        goto LABEL_15;
      goto LABEL_12;
    }
LABEL_9:
    v9 = *(_DWORD *)(a2 + 360);
    if (!v4)
      goto LABEL_15;
    goto LABEL_12;
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 496))(a2);
  v9 = *(_DWORD *)(a2 + 360);
LABEL_12:
  result = ZinAneTd<8u>::SetTileDmaSrcDma1UserTag(a1, v9);
  if (IsCompressed)
  {
    result = ZinAneTd<8u>::SetTileDmaSrcCompressedMdUserTag(a1, v9);
    if ((v7 & 1) == 0)
      goto LABEL_18;
    goto LABEL_16;
  }
LABEL_15:
  if (!v7)
    goto LABEL_18;
LABEL_16:
  result = ZinAneTd<8u>::SetTileDmaSrcDma2UserTag(a1, v9);
  if (v8)
    result = ZinAneTd<8u>::SetTileDmaSrcCompressed2MdUserTag(a1, v9);
LABEL_18:
  if ((*(_DWORD *)(*(_QWORD *)(a2 + 264) + 1632) - 1) <= 1)
    result = ZinAneTd<8u>::SetTileDmaDstUserTag(a1, v9);
  v10 = *(_QWORD *)(a2 + 136);
  if (v10)
  {
    v11 = *(_QWORD **)(v10 + 784);
    if (v11)
    {
      v12 = v11[4];
      v13 = v11[2];
      v14 = v11[3];
      v15 = v11[1];
      if (v11[5])
        result = ZinAneTd<8u>::SetKernelDmaSrcCoeffUserTag(a1, v9);
      if (v14)
        result = ZinAneTd<8u>::SetKernelDmaSrcPostScaleUserTag(a1, v9);
      if (v12)
        result = ZinAneTd<8u>::SetKernelDmaSrcBiasUserTag(a1, v9);
      if (v15)
        result = ZinAneTd<8u>::SetKernelDmaSrcNonLinearLutUserTag(a1, v9);
      if (v13)
        result = ZinAneTd<8u>::SetKernelDmaSrcPaletteLutUserTag(a1, v9);
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(a2 + 264) + 1264))
    return ZinAneTd<8u>::SetCachePrefetchDmaUserTag(a1, v9);
  return result;
}

BOOL ZinAneTd<8u>::HandleEWCommon(uint64_t a1, ZinIrOpLayer *this)
{
  uint64_t InputTensor;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 result;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;

  InputTensor = ZinIrOpLayer::GetInputTensor(this, 0);
  v5 = *(_QWORD *)(*((_QWORD *)this + 57) + 64);
  v13 = 0;
  v6 = *(_QWORD *)(InputTensor + 48);
  result = ZinCodegenUtil::ValueToRegister(*(_QWORD *)(InputTensor + 56), (unsigned int *)(*(_QWORD *)(a1 + 1296) + 40), &v13);
  if (result)
  {
    *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 512) & 0xFFFE0000 | v13 & 0x1FFFF;
    *(_DWORD *)(a1 + 532) &= 0xF801FFFF;
    ZinAneTd<8u>::SetCommonConvCfgSx(a1, 1uLL);
    ZinAneTd<8u>::SetCommonConvCfgSy(a1, 1uLL);
    ZinAneTd<8u>::SetCommonConvCfgOx(a1, 1uLL);
    ZinAneTd<8u>::SetCommonConvCfgOy(a1, 1uLL);
    result = ZinAneTd<8u>::SetOrReturnNumGroups(a1, v6);
    if (result)
    {
      result = ZinAneTd<8u>::SetCommonConvCfgKw(a1, 1uLL);
      if (result)
      {
        result = ZinAneTd<8u>::SetCommonConvCfgKh(a1, 1uLL);
        if (result)
        {
          ZinAneTd<8u>::SetUnicastEn(a1, **((unsigned __int8 **)this + 33));
          if (*((_QWORD *)this + 12) - *((_QWORD *)this + 11) == 16)
          {
            v8 = 2;
            v9 = 2;
          }
          else
          {
            v10 = *((_QWORD *)this + 33);
            v8 = *(_QWORD *)(v10 + 80);
            v9 = *(_QWORD *)(v10 + 96);
          }
          v12 = 0;
          result = ZinCodegenUtil::ValueToRegister(v8, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 40), &v12);
          if (result)
          {
            *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 512) & 0xFFFE0000 | v12 & 0x1FFFF;
            ZinAneTd<8u>::SetUnicastCin(a1, v9);
            *(_DWORD *)(a1 + 540) = *(_DWORD *)(a1 + 540) & 0xFFFF7FFF | ((*(_DWORD *)(v5 + 12) == 2) << 15);
            v11 = *(_DWORD *)(v5 + 12);
            if (v11 >= 8)
              return 0;
            else
              return (0x9Eu >> v11) & 1;
          }
        }
      }
    }
  }
  return result;
}

BOOL ZinAneTd<8u>::HandleCommonMACBypassMode(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v2;
  uint64_t v5;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = (unsigned __int8 *)a2[33];
  if (v2)
  {
    ZinAneTd<8u>::SetUnicastEn(a1, *v2);
    *(_DWORD *)(a1 + 532) &= 0xF801FFFF;
    ZinAneTd<8u>::SetCommonConvCfgSx(a1, 1uLL);
    ZinAneTd<8u>::SetCommonConvCfgSy(a1, 1uLL);
    ZinAneTd<8u>::SetCommonConvCfgOx(a1, 1uLL);
    ZinAneTd<8u>::SetCommonConvCfgOy(a1, 1uLL);
    v5 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a2 + 32))(a2, 0, 0);
    if (ZinAneTd<8u>::SetOrReturnNumGroups(a1, *(_QWORD *)(v5 + 48))
      && ZinAneTd<8u>::SetCommonConvCfgKw(a1, 1uLL)
      && ZinAneTd<8u>::SetCommonConvCfgKh(a1, 1uLL))
    {
      return ZinAneTd<8u>::SetUnicastCin(a1, *(_QWORD *)(a2[33] + 96));
    }
  }
  else
  {
    v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v7)
      ZinAneTd<8u>::HandleCommonMACBypassMode(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  return 0;
}

uint64_t ZinAneTd<8u>::HandleCommonRCAS(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v4;
  int v5;

  v2 = a2;
  ZinAneTd<8u>::SetUnicastEn(a1, **(unsigned __int8 **)(a2 + 264));
  v4 = ZinAneTd<8u>::SetOrReturnNumGroups(a1, *(_QWORD *)(*(_QWORD *)(v2 + 264) + 104));
  v5 = v4 & ZinAneTd<8u>::SetUnicastCin(a1, *(_QWORD *)(*(_QWORD *)(v2 + 264) + 96));
  LODWORD(v2) = ZinAneTd<8u>::SetCommonConvCfgKw(a1, 1uLL);
  LODWORD(v2) = v2 & ZinAneTd<8u>::SetCommonConvCfgKh(a1, 1uLL);
  LODWORD(v2) = v2 & ZinAneTd<8u>::SetCommonConvCfgPadLeft(a1, 0);
  LODWORD(v2) = v2 & ZinAneTd<8u>::SetCommonConvCfgPadTop(a1, 0);
  LODWORD(v2) = v2 & ZinAneTd<8u>::SetCommonConvCfgSx(a1, 1uLL);
  LODWORD(v2) = v2 & ZinAneTd<8u>::SetCommonConvCfgSy(a1, 1uLL);
  LODWORD(v2) = v2 & ZinAneTd<8u>::SetCommonConvCfgOx(a1, 1uLL);
  return v5 & v2 & ZinAneTd<8u>::SetCommonConvCfgOy(a1, 1uLL);
}

BOOL ZinAneTd<8u>::HandleCommonArgMinMax(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v4 = *(_QWORD *)(a2 + 432);
  v5 = *(_QWORD *)(v4 + 64);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 376))(&v19, a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 384))(&v15, a2);
  if (*(_QWORD *)(a2 + 264))
  {
    v14 = 0;
    result = ZinCodegenUtil::ValueToRegister(*(int *)(v5 + 72), (unsigned int *)(*(_QWORD *)(a1 + 1296) + 104), &v14);
    if (result)
    {
      *(_DWORD *)(a1 + 532) = *(_DWORD *)(a1 + 532) & 0xFFC1FFFF | ((v14 & 0x1F) << 17);
      v14 = 0;
      result = ZinCodegenUtil::ValueToRegister(*(int *)(v5 + 64), (unsigned int *)(*(_QWORD *)(a1 + 1296) + 96), &v14);
      if (result)
      {
        *(_DWORD *)(a1 + 532) = *(_DWORD *)(a1 + 532) & 0xF83FFFFF | ((v14 & 0x1F) << 22);
        ZinAneTd<8u>::SetCommonConvCfgSx(a1, *(int *)(v5 + 40));
        ZinAneTd<8u>::SetCommonConvCfgSy(a1, *(int *)(v5 + 44));
        result = ZinAneTd<8u>::SetOrReturnNumGroups(a1, v19);
        if (result)
        {
          switch(*(_DWORD *)(*(_QWORD *)(v4 + 64) + 104))
          {
            case 6:
            case 8:
              result = ZinAneTd<8u>::SetOrReturnWin(a1, v22);
              if (result)
              {
                result = ZinAneTd<8u>::SetOrReturnHin(a1, v21);
                if (result)
                {
                  result = ZinAneTd<8u>::SetOrReturnWout(a1, v18);
                  if (result)
                  {
                    result = ZinAneTd<8u>::SetOrReturnHout(a1, v17);
                    if (result)
                    {
                      result = ZinAneTd<8u>::SetCommonConvCfgKw(a1, *(_QWORD *)(v5 + 16));
                      if (result)
                      {
                        result = ZinAneTd<8u>::SetCommonConvCfgKh(a1, *(_QWORD *)(v5 + 24));
                        if (result)
                        {
                          result = ZinAneTd<8u>::SetUnicastCin(a1, 1uLL);
                          if (result)
                          {
                            v14 = 0;
                            result = ZinCodegenUtil::ValueToRegister(v20, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 40), &v14);
                            if (result)
                            {
                              *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 512) & 0xFFFE0000 | v14 & 0x1FFFF;
                              v14 = 0;
                              result = ZinCodegenUtil::ValueToRegister(v16, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 48), &v14);
                              if (result)
                              {
                                *(_DWORD *)(a1 + 516) = *(_DWORD *)(a1 + 516) & 0xFFFE0000 | v14 & 0x1FFFF;
                                ZinAneTd<8u>::SetUnicastEn(a1, **(unsigned __int8 **)(a2 + 264));
                                goto LABEL_28;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              break;
            case 7:
            case 9:
              result = ZinAneTd<8u>::SetOrReturnWin(a1, v22);
              if (result)
              {
                result = ZinAneTd<8u>::SetOrReturnHin(a1, v21);
                if (result)
                {
                  result = ZinAneTd<8u>::SetOrReturnWout(a1, v18);
                  if (result)
                  {
                    result = ZinAneTd<8u>::SetOrReturnHout(a1, v17);
                    if (result)
                    {
                      v14 = 0;
                      result = ZinCodegenUtil::ValueToRegister(v20, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 40), &v14);
                      if (result)
                      {
                        *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 512) & 0xFFFE0000 | v14 & 0x1FFFF;
                        v14 = 0;
                        result = ZinCodegenUtil::ValueToRegister(v16, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 48), &v14);
                        if (result)
                        {
                          *(_DWORD *)(a1 + 516) = *(_DWORD *)(a1 + 516) & 0xFFFE0000 | v14 & 0x1FFFF;
                          ZinAneTd<8u>::SetUnicastEn(a1, **(unsigned __int8 **)(a2 + 264));
                          result = ZinAneTd<8u>::SetOrReturnNumGroups(a1, v19);
                          if (result)
                          {
                            result = ZinAneTd<8u>::SetCommonConvCfgKw(a1, 1uLL);
                            if (result)
                            {
                              result = ZinAneTd<8u>::SetCommonConvCfgKh(a1, 1uLL);
                              if (result)
                              {
                                if (!ZinAneTd<8u>::SetUnicastCin(a1, v20))
                                  return 0;
                                goto LABEL_28;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              break;
            default:
LABEL_28:
              result = 1;
              break;
          }
        }
      }
    }
  }
  else
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      ZinAneTd<8u>::HandleCommonArgMinMax(result, v7, v8, v9, v10, v11, v12, v13);
      return 0;
    }
  }
  return result;
}

BOOL ZinAneTd<8u>::HandleCommonPoolOpcode(uint64_t a1, unsigned __int8 **a2, unint64_t a3)
{
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15[3];
  uint64_t v16;
  int v17;

  if (!a2[33])
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ZinAneTd<8u>::HandleCommonPoolOpcode(result, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  v5 = *((_QWORD *)a2[54] + 8);
  result = ZinAneTd<8u>::SetOrReturnNumGroups(a1, a3);
  if (!result)
    return result;
  result = ZinAneTd<8u>::SetCommonConvCfgSx(a1, *(int *)(v5 + 40));
  if (!result)
    return result;
  result = ZinAneTd<8u>::SetCommonConvCfgSy(a1, *(int *)(v5 + 44));
  if (!result)
    return result;
  result = ZinAneTd<8u>::SetCommonConvCfgOx(a1, 1uLL);
  if (!result)
    return result;
  result = ZinAneTd<8u>::SetCommonConvCfgOy(a1, 1uLL);
  if (!result)
    return result;
  if (*(_DWORD *)(v5 + 104) != 2)
  {
    result = ZinAneTd<8u>::SetCommonConvCfgKw(a1, *(_QWORD *)(v5 + 16));
    if (!result)
      return result;
    result = ZinAneTd<8u>::SetCommonConvCfgKh(a1, *(_QWORD *)(v5 + 24));
    if (!result)
      return result;
    result = ZinAneTd<8u>::SetCommonConvCfgPadLeft(a1, *(int *)(v5 + 64));
    if (!result)
      return result;
    result = ZinAneTd<8u>::SetCommonConvCfgPadTop(a1, *(int *)(v5 + 72));
    if (!result)
      return result;
    goto LABEL_21;
  }
  (*((void (**)(uint64_t *__return_ptr, unsigned __int8 **))*a2 + 44))(&v16, a2);
  (*((void (**)(unint64_t *__return_ptr, unsigned __int8 **))*a2 + 41))(v15, a2);
  if (!ZinAneTd<8u>::SetCommonConvCfgKw(a1, v15[0])
    || !ZinAneTd<8u>::SetCommonConvCfgKh(a1, v15[1])
    || !ZinAneTd<8u>::SetCommonConvCfgPadLeft(a1, (int)v16)
    || !ZinAneTd<8u>::SetCommonConvCfgPadTop(a1, v17))
  {
    return 0;
  }
LABEL_21:
  ZinAneTd<8u>::SetUnicastEn(a1, *a2[33]);
  v14 = a2[33];
  if (!*v14)
    return 1;
  ZinAneTd<8u>::SetUnicastCin(a1, *((_QWORD *)v14 + 12));
  LODWORD(v16) = 0;
  result = ZinCodegenUtil::ValueToRegister(*((_QWORD *)a2[33] + 10), (unsigned int *)(*(_QWORD *)(a1 + 1296) + 40), &v16);
  if (result)
  {
    *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 512) & 0xFFFE0000 | v16 & 0x1FFFF;
    LODWORD(v16) = 0;
    result = ZinCodegenUtil::ValueToRegister(*((_QWORD *)a2[33] + 11), (unsigned int *)(*(_QWORD *)(a1 + 1296) + 48), &v16);
    if (result)
    {
      *(_DWORD *)(a1 + 516) = *(_DWORD *)(a1 + 516) & 0xFFFE0000 | v16 & 0x1FFFF;
      return 1;
    }
  }
  return result;
}

BOOL ZinAneTd<8u>::HandleCommonConvOpcode(uint64_t a1, _QWORD *a2)
{
  int *v4;
  unint64_t v5;
  _BOOL8 result;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17[3];
  uint64_t v18;
  int v19;

  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a2 + 352))(&v18, a2);
  (*(void (**)(unint64_t *__return_ptr, _QWORD *))(*a2 + 328))(v17, a2);
  if (a2[33])
  {
    v4 = (int *)a2[17];
    v5 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 368))(a2, 4);
    result = ZinAneTd<8u>::SetOrReturnWout(a1, v5);
    if (result)
    {
      result = ZinAneTd<8u>::SetCommonConvCfgKw(a1, v17[0]);
      if (result)
      {
        result = ZinAneTd<8u>::SetCommonConvCfgPadLeft(a1, (int)v18);
        if (result)
        {
          v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 368))(a2, 3);
          result = ZinAneTd<8u>::SetOrReturnHout(a1, v7);
          if (result)
          {
            result = ZinAneTd<8u>::SetCommonConvCfgKh(a1, v17[1]);
            if (result)
            {
              result = ZinAneTd<8u>::SetCommonConvCfgPadTop(a1, v19);
              if (result)
              {
                ZinAneTd<8u>::SetCommonConvCfgSx(a1, v4[82]);
                ZinAneTd<8u>::SetCommonConvCfgSy(a1, v4[83]);
                ZinAneTd<8u>::SetCommonConvCfgOx(a1, v4[85]);
                ZinAneTd<8u>::SetCommonConvCfgOy(a1, v4[86]);
                v16 = 0;
                result = ZinCodegenUtil::ValueToRegister(*(_QWORD *)(a2[33] + 80), (unsigned int *)(*(_QWORD *)(a1 + 1296) + 40), &v16);
                if (result)
                {
                  *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 512) & 0xFFFE0000 | v16 & 0x1FFFF;
                  v16 = 0;
                  result = ZinCodegenUtil::ValueToRegister(*(_QWORD *)(a2[33] + 88), (unsigned int *)(*(_QWORD *)(a1 + 1296) + 48), &v16);
                  if (result)
                  {
                    *(_DWORD *)(a1 + 516) = *(_DWORD *)(a1 + 516) & 0xFFFE0000 | v16 & 0x1FFFF;
                    result = ZinAneTd<8u>::SetOrReturnNumGroups(a1, *(_QWORD *)(a2[33] + 104));
                    if (result)
                    {
                      v8 = (unsigned __int8 *)a2[33];
                      if (*((_DWORD *)v8 + 28) == 2)
                      {
                        ZinAneTd<8u>::SetUnicastEn(a1, *v8);
                        ZinAneTd<8u>::SetUnicastCin(a1, *(_QWORD *)(a2[33] + 96));
                      }
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      ZinAneTd<8u>::HandleCommonConvOpcode(result, v9, v10, v11, v12, v13, v14, v15);
      return 0;
    }
  }
  return result;
}

uint64_t ZinAneTd<8u>::ForceHazardStalls(_DWORD *a1)
{
  a1[146] = a1[146] & 0xCFFFFFFF | 0x10000000;
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 15, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 16, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 17, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 18, 1);
  a1[139] |= 0x800000u;
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 19, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 20, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 21, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 22, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 41, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 42, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 43, 1);
  return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 44, 1);
}

uint64_t ZinAneTd<8u>::SetRAWdmaDependency(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if (a3 == 1)
  {
    ZinAneTd<8u>::SetRAWdmaDependencySrc2(a1, a2, a4, a5);
    return 1;
  }
  if (!a3)
  {
    ZinAneTd<8u>::SetRAWdmaDependencySrc1(a1, a2, a4, a5);
    return 1;
  }
  return 0;
}

uint64_t ZinAneTd<8u>::HasDmaConfigDependent(uint64_t a1)
{
  return *(_DWORD *)(a1 + 584) & ((*(_DWORD *)(a1 + 584) & 0x30000000) != 0);
}

uint64_t ZinAneTd<8u>::HandleDMADepErrata(_DWORD *a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 24))(a1, 1);
  if ((_DWORD)result == 1)
  {
    a1[146] = a1[146] & 0xCFFFFFFF | 0x10000000;
  }
  else
  {
    result = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 24))(a1, 0);
    if ((_DWORD)result != 1)
      return (a1[146] & 0x30000000) == 0x10000000;
  }
  return result;
}

uint64_t ZinAneTd<8u>::HandleCommonConfigFormatAndConvParams(uint64_t a1, int a2, unint64_t *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  int v12;

  result = ZinAneTd<8u>::SetOrReturnWin(a1, a3[3]);
  if ((_DWORD)result)
  {
    result = ZinAneTd<8u>::SetOrReturnHin(a1, a3[2]);
    if ((_DWORD)result)
    {
      v12 = 0;
      result = ZinCodegenUtil::ValueToRegister(a3[1], (unsigned int *)(*(_QWORD *)(a1 + 1296) + 40), &v12);
      if ((_DWORD)result)
      {
        *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 512) & 0xFFFE0000 | v12 & 0x1FFFF;
        ZinAneTd<8u>::SetCommonInFmt(a1, a2);
        ZinAneTd<8u>::SetCommonOutFmt(a1, a4);
        result = ZinAneTd<8u>::SetCommonConvCfgOx(a1, 1uLL);
        if ((_DWORD)result)
        {
          result = ZinAneTd<8u>::SetCommonConvCfgOy(a1, 1uLL);
          if ((_DWORD)result)
          {
            result = ZinAneTd<8u>::SetOrReturnNumGroups(a1, 1uLL);
            if ((_DWORD)result)
            {
              ZinAneTd<8u>::SetUnicastEn(a1, 0);
              ZinAneTd<8u>::SetUnicastCin(a1, 1uLL);
              return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, a6);
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL ZinAneTd<8u>::HandleCommonConfigOutputDimension(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 368))(a2, 2);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 368))(a2, 4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 368))(a2, 3);
  return ZinAneTd<8u>::SetOrReturnWout(a1, v5)
      && ZinAneTd<8u>::SetOrReturnHout(a1, v6)
      && ZinAneTd<8u>::SetOrReturnCout(a1, v4);
}

BOOL ZinAneTd<8u>::HandleCommonConfigTileAndTaskInfo(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  _BOOL8 result;
  MirInfoChannelAssignment *ChannelAssignment;
  uint64_t NumNeededNEs;
  int Pow2Log2;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  MirInfoChannelAssignment *v15;
  uint64_t v16;
  int v17;
  int v18;

  *(_DWORD *)(a1 + 544) = 0;
  v4 = ZinAneTd<8u>::SetTileHeight(a1, *(_QWORD *)(a2 + 200));
  result = 0;
  if (v4)
  {
    result = ZinAneTd<8u>::SetTileOverlap(a1, *(_QWORD *)(a2 + 216));
    if (result)
    {
      result = ZinAneTd<8u>::SetTileOverlapPadTop(a1, *(_QWORD *)(a2 + 208));
      if (result)
      {
        result = ZinAneTd<8u>::SetTileOverlapPadBottom(a1, *(_QWORD *)(a2 + 224));
        if (result)
        {
          *(_DWORD *)(a1 + 556) = 0;
          ZinAneTd<8u>::SetNESmallSourceMode(a1, *(_DWORD *)(a2 + 144));
          v18 = 0;
          ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)a2);
          NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment);
          Pow2Log2 = ZinRoundUpToNextPow2Log2(NumNeededNEs);
          result = ZinCodegenUtil::ValueToRegister(Pow2Log2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 256), &v18);
          if (result)
          {
            *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFC7FFFF | ((v18 & 7) << 19);
            v18 = 0;
            v9 = ZinRoundUpToNextPow2Log2(*(_QWORD *)(a2 + 136));
            v10 = v9 >= 4 ? 4 : v9;
            result = ZinCodegenUtil::ValueToRegister(v10, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 232), &v18);
            if (result)
            {
              *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFFFF8FF | ((v18 & 7) << 8);
              v18 = 0;
              v11 = ZinRoundUpToNextPow2Log2(*(_QWORD *)(a2 + 120));
              v12 = v11 >= 4 ? 4 : v11;
              result = ZinCodegenUtil::ValueToRegister(v12, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 240), &v18);
              if (result)
              {
                *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFFF8FFF | ((v18 & 7) << 12);
                v18 = 0;
                v13 = ZinRoundUpToNextPow2Log2(*(_QWORD *)(a2 + 128));
                if (v13 >= 4)
                  v14 = 4;
                else
                  v14 = v13;
                result = ZinCodegenUtil::ValueToRegister(v14, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 248), &v18);
                if (result)
                {
                  *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFF8FFFF | ((v18 & 7) << 16);
                  v18 = 0;
                  v15 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)a2);
                  v16 = MirInfoChannelAssignment::GetNumNeededNEs(v15);
                  v17 = ZinRoundUpToNextPow2Log2(v16);
                  result = ZinCodegenUtil::ValueToRegister(v17, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 256), &v18);
                  if (result)
                  {
                    *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFC7FFFF | ((v18 & 7) << 19);
                    *(_QWORD *)(a1 + 576) = 0;
                    *(_DWORD *)(a1 + 560) = 0x100000;
                    return 1;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL ZinAneTd<8u>::HandleCommonConfigPerArch(ZinIrHalH13g *a1, ZinEngineLayerMirInfo **a2, unint64_t a3)
{
  MirInfoChannelAssignment *ChannelAssignment;
  uint64_t OCGSize;
  char Pow2Log2;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  _BOOL8 result;
  int v16;
  ZinEngineLayerMirInfo *v17;
  unint64_t v18;
  ZinEngineLayerMirInfo *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  int v24;

  ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a2[33]);
  OCGSize = MirInfoChannelAssignment::GetOCGSize(ChannelAssignment);
  Pow2Log2 = ZinRoundUpToNextPow2Log2(OCGSize);
  ZinAneTd<8u>::SetNEOcgSize((uint64_t)a1, Pow2Log2);
  (*((void (**)(uint64_t *__return_ptr, ZinEngineLayerMirInfo **))*a2 + 44))(&v23, a2);
  (*((void (**)(_QWORD *__return_ptr, ZinEngineLayerMirInfo **))*a2 + 41))(v22, a2);
  (*((void (**)(ZinEngineLayerMirInfo **))*a2 + 42))(a2);
  v10 = v9;
  (*((void (**)(ZinEngineLayerMirInfo **))*a2 + 43))(a2);
  v12 = v11;
  v13 = (*((uint64_t (**)(ZinEngineLayerMirInfo **, uint64_t))*a2 + 45))(a2, 1);
  v14 = (*((uint64_t (**)(ZinEngineLayerMirInfo **, uint64_t))*a2 + 46))(a2, 1);
  ZinAneTd<8u>::SetCommonConvCfg3dKd((uint64_t)a1, v22[2]);
  ZinAneTd<8u>::SetCommonConvCfg3dPz((uint64_t)a1, v24);
  ZinAneTd<8u>::SetCommonConvCfg3dSz((uint64_t)a1, v10);
  ZinAneTd<8u>::SetCommonConvCfg3dOz((uint64_t)a1, v12);
  result = ZinAneTd<8u>::SetOrReturnDin((uint64_t)a1, v13);
  if (result)
  {
    result = ZinAneTd<8u>::SetOrReturnDout((uint64_t)a1, v14);
    if (result)
    {
      ZinIrHalH13g::~ZinIrHalH13g(a1);
      v16 = (*((uint64_t (**)(ZinEngineLayerMirInfo **))*a2 + 51))(a2);
      ZinAneTd<8u>::SetOutputTranspose((uint64_t)a1, v16);
      v17 = a2[33];
      if (*((_BYTE *)v17 + 8))
      {
        if (!*((_BYTE *)v17 + 40))
          ZinAssertImpl("kernel_group_stride should have value when kernel_stride_enable is set");
        v18 = ZinAlignPower2(*((_QWORD *)v17 + 4), a3);
        v19 = a2[33];
        if (!*((_BYTE *)v19 + 24))
          ZinAssertImpl("kernel_ocg_stride should have value when kernel_stride_enable is set");
        v20 = v18 / a3;
        v21 = ZinAlignPower2(*((_QWORD *)v19 + 2), a3);
        ZinAneTd<8u>::SetKernelStrideRegisters((uint64_t)a1, v20, v21 / a3);
        v17 = a2[33];
      }
      ZinAneTd<8u>::SetFillLowerNEFirst((uint64_t)a1, *((unsigned __int8 *)v17 + 2));
      ZinAneTd<1u>::Set1DWinogradMode((uint64_t)a1, *((unsigned __int8 *)a2[33] + 148));
      ZinAneTd<1u>::SetNEHalfWUMode((uint64_t)a1, *((_BYTE *)a2[33] + 149));
      return 1;
    }
  }
  return result;
}

uint64_t ZinAneTd<8u>::HandleTileDmaSrcConfig(uint64_t *a1, ZinIrOpLayer *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  ZinIrTensor *InputTensor;
  unint64_t *v11;
  unsigned int v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  unint64_t *v28;
  uint64_t v29;
  const void *v30;
  void *v31;
  ZinIrTensor *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;

  if (!ZinIrOpLayer::IsNELayer(this))
    ZinAssertImpl("Only NE layers allowed\n");
  if (*((_QWORD *)this + 12) - *((_QWORD *)this + 11) < 0x20uLL)
  {
    InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(this, 0);
    v37 = 0;
    v36 = 0;
    ZinMemSourceIndexTranslator::GetDMASrcIndex(this, 0, &v37, v11);
    if (ZinMemSourceIndexTranslator::GetL2SrcType(this, 0, &v36))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinAneTd<17u>::HandleTileDmaSrcConfig();
LABEL_6:
      v12 = 0;
      v13 = 1;
      goto LABEL_7;
    }
    v22 = v36 != 0;
    v23 = v37;
    v24 = *(_QWORD *)(*((_QWORD *)this + 33) + 96 * v37 + 752);
    if (!v24)
    {
      v13 = 1;
      v12 = 1;
      goto LABEL_7;
    }
    v25 = *((_QWORD *)this + 25);
    if (v25 && (v26 = *((_QWORD *)this + 24), v26 <= 1))
    {
      LOBYTE(v34) = v26 == 1;
      BYTE4(v34) = v26 != 1;
      LODWORD(v33) = 1;
      BYTE4(v33) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 304))(v25);
      v23 = v37;
    }
    else
    {
      v33 = 0;
      v34 = 0;
    }
    v27 = (void *)*((_QWORD *)this + (int)v23 + 30);
    if (v27)
    if (!ZinCodegen::SetPrimarySourceDMA<8u>(InputTensor, a1, *((_QWORD *)this + 33), v23, v22, a4, *(_QWORD *)(a3 + 528), *(_QWORD *)(a3 + 560), SBYTE4(v34), v34, SBYTE4(v33), (uint64_t)v27))goto LABEL_6;
    **(_QWORD **)(a5 + 128) = v24;
    v35 = 0;
    ZinMemSourceIndexTranslator::GetDMASrcIndex(this, (const ZinANELayer *)1, &v35, v28);
    v29 = *(_QWORD *)(*((_QWORD *)this + 33) + 96 * v35 + 752);
    if (v29)
    {
      if ((_DWORD)v33 && *((_QWORD *)this + 12) - *((_QWORD *)this + 11) >= 9uLL)
      {
        v30 = (const void *)*((_QWORD *)this + (int)v35 + 30);
        if (v30)
        else
          v31 = 0;
        v13 = 1;
        v32 = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(this, 1uLL);
        if (!ZinCodegen::SetSecondarySourceDMA<8u>(v32, (uint64_t)a1, *((_QWORD *)this + 33), v35, a4, *(_QWORD *)(a3 + 528), *(_QWORD *)(a3 + 560), SBYTE4(v34), v34, SBYTE4(v33), (uint64_t)v31))goto LABEL_32;
        v29 = *(_QWORD *)(*((_QWORD *)this + 33) + 96 * v35 + 752);
      }
      v13 = 0;
      *(_QWORD *)(*(_QWORD *)(a5 + 128) + 8) = v29;
    }
    else
    {
      v13 = 0;
    }
LABEL_32:
    v12 = 0;
LABEL_7:
    if (v13)
      return v12;
    else
      return 1;
  }
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    ZinAneTd<8u>::HandleTileDmaSrcConfig(result, v15, v16, v17, v18, v19, v20, v21);
    return 0;
  }
  return result;
}

BOOL ZinAneTd<8u>::HandleL2Config(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int L2RdMode;
  uint64_t v25;
  ZinIrSymbol *L2WrSymbol;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int16 OCGSize;
  __int16 NumNeededNEs;
  uint64_t *v73;
  _BOOL8 L2RowStride;
  uint64_t v76;
  __int128 v77;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v6 = *(_DWORD *)(a2[8] + 8);
  if (v6 == 85)
  {
    if (!a2[54])
      goto LABEL_28;
    v10 = a2[17];
    v9 = *(_DWORD *)(v10 + 376);
    v11 = (_DWORD *)a3[183];
    v12 = (_DWORD *)a3[184];
    if (v11 != v12)
    {
      while (*v11 != v9)
      {
        if (++v11 == v12)
        {
          v11 = (_DWORD *)a3[184];
          break;
        }
      }
    }
    if (v11 == v12 || v9 == 4 || v9 == 2)
    {
      v13 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v13)
        ZinAneTd<8u>::HandleL2Config(v13, v14, v15, v16, v17, v18, v19, v20);
      return 0;
    }
    v23 = *(_DWORD *)(v10 + 380);
    v22 = a1;
    goto LABEL_27;
  }
  if (v6 == 90)
  {
    v21 = *(_DWORD *)(*(_QWORD *)(a2[57] + 64) + 12);
    if (v21 == 8)
    {
      v22 = a1;
      v9 = 4;
    }
    else
    {
      if (v21 != 7)
        goto LABEL_28;
      v22 = a1;
      v9 = 2;
    }
    goto LABEL_26;
  }
  if (v6 != 89)
    goto LABEL_28;
  v7 = *(_QWORD *)(a2[54] + 64);
  v8 = *(_DWORD *)(v7 + 104);
  if (!v8)
  {
    if (*(_DWORD *)(v7 + 100) == 2)
    {
      v9 = 2;
      goto LABEL_24;
    }
LABEL_41:
    v63 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v63)
      ZinAneTd<8u>::HandleL2Config(v63, v64, v65, v66, v67, v68, v69, v70);
    return 0;
  }
  if (v8 != 1)
  {
    v9 = *(_DWORD *)(v7 + 100);
    goto LABEL_24;
  }
  if (*(_DWORD *)(v7 + 100) != 4)
    goto LABEL_41;
  v9 = 4;
LABEL_24:
  v22 = a1;
LABEL_26:
  v23 = 0;
LABEL_27:
  ZinAneTd<8u>::SetPaddingMode(v22, v9, v23);
LABEL_28:
  L2RdMode = ZinEngineLayerMirInfo::GetL2RdMode(a2[33], 0);
  ZinAneTd<8u>::SetL2Src1SourceType(a1, L2RdMode);
  if (!ZinCodegen::SetPrimaryL2SourceBuffer<8u>((uint64_t)a3, (uint64_t)a2, (ZinIrHalH13g *)a1))
  {
    v39 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v39)
      ZinAneTd<1u>::HandleNEControlCommon(v39, v40, v41, v42, v43, v44, v45, v46);
    return 0;
  }
  v25 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a2 + 32))(a2, 0, 0);
  L2WrSymbol = (ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2WrSymbol((ZinEngineLayerMirInfo *)a2[33]);
  if (!L2WrSymbol)
  {
    v47 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v47)
      ZinAneTd<8u>::HandleL2Config(v47, v48, v49, v50, v51, v52, v53, v54);
    return 0;
  }
  v27 = (uint64_t)L2WrSymbol;
  if (ZinIrSymbol::GetMemType(L2WrSymbol) != 2)
  {
    v55 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v55)
      ZinAneTd<17u>::HandleL2Config(v55, v56, v57, v58, v59, v60, v61, v62);
    return 0;
  }
  ZinAneTd<8u>::SetL2ResultType(a1, *(_DWORD *)(a2[33] + 1632));
  ZinAneTd<8u>::SetL2BfrMode(a1, *(unsigned __int8 *)(a2[33] + 312));
  ZinAneTd<8u>::SetL2ResultCfgDmaFmt(a1, *(_DWORD *)(v25 + 88));
  ZinAneTd<4u>::SetL2OutputCropOffsetXLSBs(a1, *(_QWORD *)(a2[33] + 320));
  v28 = a2[33];
  if ((*(_DWORD *)(v28 + 1632) - 1) > 1)
  {
    v30 = 1;
  }
  else
  {
    v29 = ZinTensorDescriptorDmaInterleave(*(_QWORD *)(v28 + 944) + 208);
    v30 = v29;
    if (!v29)
    {
      v31 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v31)
        ZinAneTd<6u>::HandleL2Config(v31, v32, v33, v34, v35, v36, v37, v38);
      return 0;
    }
  }
  ZinAneTd<8u>::SetL2ResultInterleave(a1, v30);
  ZinAneTd<8u>::SetL2ResultBaseAddr(a1, *(_QWORD *)(v27 + 16) % a3[51] / a3[52]);
  ZinAneTd<8u>::SetL2ResultChannelStride(a1, *(_DWORD *)(a2[33] + 280));
  v77 = *(_OWORD *)(v27 + 520);
  OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v77);
  NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v77);
  ZinAneTd<8u>::SetL2ResultWrapAddrOffset(a1, OCGSize);
  ZinAneTd<8u>::SetL2ResultWrapAddr(a1, NumNeededNEs);
  if ((ZinCodegen::SetL2ResultWrapInfo<8u>(a1, v27) & 1) == 0)
    return 0;
  v76 = 0;
  L2RowStride = ZinCodegen::GetL2RowStride((ZinCodegen *)(v25 + 48), *(const ZinTensorDimensions **)(a2[33] + 272), *(unsigned int *)(*(_QWORD *)(a1 + 1296) + 396), &v76, v73);
  if (L2RowStride)
  {
    ZinAneTd<8u>::SetL2ResultRowStride(a1, v76);
    ZinAneTd<8u>::SetL2ResultDepthStride(a1, *(_DWORD *)(a2[33] + 296));
    ZinAneTd<8u>::SetL2ResultGroupStride(a1, *(_DWORD *)(a2[33] + 288));
    if (a2[47])
      *(_DWORD *)(a1 + 868) |= 1u;
  }
  return L2RowStride;
}

BOOL ZinAneTd<8u>::HandleNEConfig(uint64_t a1, uint64_t a2, const ZinIrHalParameters *a3)
{
  uint64_t v6;
  ZinIrKernel **v7;
  unsigned int v8;
  int v9;
  int v10;
  _BOOL4 KernelGroupReuse;
  ZinIrKernel *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 ShouldUseSparseBinaryForCompression;
  int MacCfgOpMode;
  _BOOL8 result;
  int MacCfgKernelMode;
  _BOOL4 MacCfgPassthroughEnable;
  int KernelCfgKernelFmt;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ZinDeQuantLayer *v41;
  int ScalarZeroPoint;
  unint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  int HasZeroPoint;
  unsigned __int8 *v49;
  int v50;
  int v51;
  uint64_t v52;
  _BOOL4 v53;
  ZinIrKernel *v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v7 = (ZinIrKernel **)(a2 + 136);
  v6 = *(_QWORD *)(a2 + 136);
  if (!v6)
  {
    KernelGroupReuse = GetKernelGroupReuse((const ZinNELayer *)a2);
    v9 = 0;
    v10 = 0;
    goto LABEL_7;
  }
  v8 = *(unsigned __int8 *)(v6 + 448);
  v9 = (v8 >> 3) & 1;
  v10 = (v8 >> 4) & 1;
  KernelGroupReuse = GetKernelGroupReuse((const ZinNELayer *)a2);
  if ((v8 & 4) == 0)
  {
LABEL_7:
    ShouldUseSparseBinaryForCompression = 0;
    v16 = 0;
    v14 = 4;
    goto LABEL_8;
  }
  v12 = *v7;
  v13 = *(unsigned __int8 **)(*((_QWORD *)*v7 + 98) + 40);
  if (!v13)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    GetKernelCfgKernelFmt(result, v26, v27, v28, v29, v30, v31, v32);
    return 0;
  }
  v14 = *((_DWORD *)v12 + 44);
  v15 = *v13;
  v16 = v15 != 0;
  if (v15)
  {
    ShouldUseSparseBinaryForCompression = ZinIrKernel::ShouldUseSparseBinaryForCompression(v12);
    v12 = *v7;
  }
  else
  {
    ShouldUseSparseBinaryForCompression = 0;
  }
  if (ZinIrKernel::HasVectorPalettizedWeight(v12))
  {
    v33 = ZinLog2OfPow2(*((_QWORD *)*v7 + 52));
    ZinAneTd<4u>::SetPaletteBlockSize(a1, v33);
  }
LABEL_8:
  ZinAneTd<8u>::SetKernelPalettizedEn(a1, v14);
  ZinAneTd<8u>::SetKernelPalettizedBits(a1, v14);
  ZinAneTd<8u>::SetKernelSparseFmt(a1, v16);
  ZinAneTd<8u>::SetKernelSparseBinary(a1, ShouldUseSparseBinaryForCompression);
  ZinAneTd<8u>::SetGroupKernelReuse(a1, KernelGroupReuse);
  v65 = 0;
  MacCfgOpMode = GetMacCfgOpMode((ZinIrOpLayer *)a2, (uint64_t)a3, &v65);
  result = 0;
  if (!MacCfgOpMode)
  {
    ZinAneTd<8u>::SetOpMode(a1, v65);
    MacCfgKernelMode = GetMacCfgKernelMode(a2, (uint64_t)a3);
    ZinAneTd<8u>::SetKernelMode(a1, MacCfgKernelMode);
    MacCfgPassthroughEnable = GetMacCfgPassthroughEnable((const ZinNELayer *)a2, a3);
    ZinAneTd<8u>::SetPassthroughEnable(a1, MacCfgPassthroughEnable);
    v64 = 0;
    KernelCfgKernelFmt = GetKernelCfgKernelFmt((const ZinNELayer *)a2, a3, v65, &v64);
    result = 0;
    if (!KernelCfgKernelFmt)
    {
      ZinAneTd<8u>::SetKernelFmt(a1, v64);
      v23 = *(_QWORD *)(a2 + 420);
      if ((v23 & 0xFF00000000) == 0)
        ZinAssertImpl("Binary point is missing from NE layer.");
      ZinAneTd<8u>::SetNEBinaryPoint(a1, v23);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 296))(a1, a2) & 1) == 0)
      {
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
        ZinAneTd<8u>::HandleNEConfig(result, v34, v35, v36, v37, v38, v39, v40);
        return 0;
      }
      v24 = *(_QWORD *)(a2 + 392);
      if (v24)
        v25 = *(_DWORD *)(v24 + 192);
      else
        v25 = 0;
      ZinAneTd<8u>::SetNENonLinearMode(a1, v25, (uint64_t)a3 + 1536);
      v41 = *(ZinDeQuantLayer **)(a2 + 408);
      if (v41)
      {
        ScalarZeroPoint = ZinDeQuantLayer::GetScalarZeroPoint(v41);
        ZinAneTd<4u>::SetQuantizationOutputZeroOffset(a1, 1, ScalarZeroPoint);
      }
      if (v9)
      {
        v43 = *(_QWORD *)((char *)*v7 + 180);
        v44 = 1;
      }
      else
      {
        v43 = 0;
        v44 = 0;
      }
      ZinAneTd<8u>::SetNEPostScale(a1, v43, v44);
      if (v10)
      {
        v45 = *(_QWORD *)((char *)*v7 + 188);
        v46 = 1;
      }
      else
      {
        v46 = 0;
        v45 = 0;
      }
      ZinAneTd<8u>::SetNEBias(a1, v45, v46);
      if (*(_DWORD *)(*(_QWORD *)(a2 + 64) + 8) == 85)
        v47 = ZinPEElementWiseLayer::GetSecondOperandBroadcast((ZinPEElementWiseLayer *)a2) & 0xFFFFFFFFFFLL;
      else
        v47 = 0;
      ZinAneTd<8u>::SetNEMatrixVectorBias(a1, (ZinIrKernel **)(a2 + 136), v47);
      if (*v7)
        HasZeroPoint = ZinIrKernel::HasZeroPoint(*v7);
      else
        HasZeroPoint = 0;
      ZinAneTd<4u>::SetKernelAsymQuantEn(a1, HasZeroPoint);
      v50 = *v7 && (v49 = (unsigned __int8 *)*((_QWORD *)*v7 + 98)) != 0 && *v49 != 0;
      ZinAneTd<4u>::SetKernelDetectZeros(a1, v50);
      v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
      v52 = *(_QWORD *)(a2 + 136);
      if (v51)
      {
        if (*(_DWORD *)(v52 + 408) != 1)
          ZinAssertImpl("Tensor kernel is not using aligned format!");
        v53 = 0;
      }
      else if (v52)
      {
        v53 = *(_DWORD *)(v52 + 408) != 1;
      }
      else
      {
        v53 = 1;
      }
      ZinAneTd<8u>::SetKernelAlignmentFormat(a1, v53);
      ZinAneTd<4u>::SetDoubleInt8Enable(a1, *(unsigned __int8 *)(*(_QWORD *)(a2 + 264) + 1));
      ZinAneTd<8u>::SetKernelSparseBlockSize(a1, 0);
      v54 = *(ZinIrKernel **)(a2 + 136);
      if (v54 && ZinIrKernel::HasVectorPalettizedWeight(v54) && **(_BYTE **)(*((_QWORD *)*v7 + 98) + 40))
      {
        v55 = ZinLog2OfPow2(*((_QWORD *)*v7 + 52));
        ZinAneTd<8u>::SetKernelSparseBlockSize(a1, v55);
      }
      if (*(_DWORD *)(*(_QWORD *)(a2 + 64) + 8) == 89)
      {
        v56 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 432) + 64) + 104);
        ZinAneTd<8u>::SetArgOutputSelect(a1, v56);
        ZinAneTd<8u>::SetMaxPoolMode(a1, v56);
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 288))(a1, a2) & 1) != 0)
        return 1;
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (result)
      {
        ZinAneTd<8u>::HandleNEConfig(result, v57, v58, v59, v60, v61, v62, v63);
        return 0;
      }
    }
  }
  return result;
}

BOOL ZinAneTd<8u>::HandleNEConfigRCASCfg(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_DWORD *)(*(_QWORD *)(a2 + 64) + 8) != 93)
    return 1;
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 432) + 64);
  v4 = *(_QWORD **)(v3 + 48);
  if (v4 == (_QWORD *)(v3 + 56))
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = v4[4];
      if (v6 >= 8)
        std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v5 |= 1 << v6;
      v4 = v8;
    }
    while (v8 != (_QWORD *)(v3 + 56));
  }
  ZinAneTd<8u>::SetRcasKeyMask(a1, v5);
  ZinAneTd<8u>::SetRcasMode(a1, *(_DWORD *)(v3 + 12));
  ZinAneTd<8u>::SetRcasSenseBit(a1, *(_DWORD *)(v3 + 24));
  ZinAneTd<8u>::SetRcasSenseAxis(a1, *(_DWORD *)(v3 + 20));
  ZinAneTd<8u>::SetRcasCmpBit(a1, *(_DWORD *)(v3 + 40));
  v10 = *(_DWORD *)(v3 + 16);
  if (v10)
  {
    if (v10 == 1)
    {
      v11 = a1;
      v12 = 7;
    }
    else
    {
      if (v10 != 2)
        return 1;
      v11 = a1;
      v12 = 9;
    }
    ZinAneTd<8u>::SetMaxPoolMode(v11, v12);
    return 1;
  }
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<8u>::HandleNEConfigRCASCfg(result, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  return result;
}

uint64_t ZinAneTd<8u>::HandleNEConfigRoundCfg(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 584))(a2))
  {
    v4 = *(int **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 576))(a2) + 64);
    ZinAneTd<8u>::SetStochasticRoundMode(a1, v4[3]);
    v5 = 0;
    v8[0] = ZinIrStochasticRoundInfo::GetSeeds((ZinIrStochasticRoundInfo *)v4);
    v8[1] = v6;
    do
    {
      ZinAneTd<8u>::SetStochasticRoundSeed(a1, *((_DWORD *)v8 + v5), v5);
      ++v5;
    }
    while (v5 != 4);
    ZinAneTd<8u>::SetStochasticRoundIntegerBits(a1, v4[8]);
  }
  return 1;
}

BOOL ZinAneTd<8u>::HandleTileDmaDstConfig(int a1, ZinIrOpLayer *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  ZinIrTensor *v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;

  if (!ZinIrOpLayer::IsNELayer(this) && !ZinIrOpLayer::IsTransposeEngineLayer(this))
    ZinAssertImpl("Only NE and TransposeEngineLayer allowed\n");
  v9 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  v10 = *((_QWORD *)this + 32);
  if (v10)
    v11 = *(_DWORD *)(*(_QWORD *)(v10 + 64) + 8) == 102;
  else
    v11 = 0;
  v12 = *((_QWORD *)this + 33);
  return (*(_DWORD *)(v12 + 1632) - 1) > 1
      || ZinCodegen::SetResultDMA<8u>(v9, *(uint64_t **)(a5 + 200), v12, a4, *(_QWORD *)(a3 + 528), *(_QWORD *)(a3 + 560), v11);
}

uint64_t ZinAneTd<8u>::HandleKernelDmaSrcConfig(uint64_t *a1, uint64_t *a2, uint64_t *a3, ZinIrMemoryPool *a4, uint64_t a5)
{
  _BOOL8 v11;
  unint64_t v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  __int16 v16;
  __int128 __p;
  uint64_t v18;
  int v19;
  unsigned __int8 v20;
  char v21;

  (*(void (**)(uint64_t *, _QWORD))(*a1 + 64))(a1, *(int *)(*a3 + 8));
  ZinAneTd<8u>::InitializeKernelDmaSrcConfig((uint64_t)a1);
  ZinAneTd<8u>::HandleKernelDmaSrcConfigAligned(a1, (ZinIrOpLayer *)a2, a3, a4);
  v21 = 0;
  ZinAneTd<8u>::HandleKernelDmaSrcConfigCoeffBuffer((uint64_t)a1, (ZinEngineLayerMirInfo **)a2, a3, a5, a2 + 17, &v21);
  if (v21)
  {
    ZinAneTd<17u>::AddKernelSymbols((uint64_t)a1, (ZinIrKernel **)a2, (uint64_t)a3, a5);
    v20 = 0;
    if (ZinIrCodeGenGetBarIdForCoeffKDMABlock((const ZinIrOpLayer *)a2, a4, &v20))
      return 0;
    if (*(_BYTE *)(a3[1] + 378))
      v11 = *(_BYTE *)(a5 + 24) == 0;
    else
      v11 = 0;
    ZinAneRelocInfo::ZinAneRelocInfo(&v16, *(_QWORD *)(a5 + 8) - 24, 5444, v20, 1, 1, v11, 0);
    v12 = a1[159];
    if (v12 >= a1[160])
    {
      v15 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 158, (uint64_t)&v16);
    }
    else
    {
      *(_WORD *)v12 = v16;
      v13 = (std::string *)(v12 + 8);
      if (SHIBYTE(v18) < 0)
      {
        std::string::__init_copy_ctor_external(v13, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v14 = __p;
        *(_QWORD *)(v12 + 24) = v18;
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      *(_DWORD *)(v12 + 32) = v19;
      v15 = v12 + 40;
      a1[159] = v12 + 40;
    }
    a1[159] = v15;
    if (SHIBYTE(v18) < 0)
      operator delete((void *)__p);
    if (*(_BYTE *)(*a3 + 1271))
      ZinAneTd<8u>::SetKernelDmaSrcConfigPrefetch((uint64_t)a1, a2[33] + 1264);
  }
  return 1;
}

void sub_206E38E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 1272) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<8u>::HandleEngineLayer(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t **a6, CFArrayRef *a7)
{
  ZinIrSection *v14;
  const __CFString *v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD v25[3];

  if (!*(_QWORD *)(a2 + 264))
  {
    v16 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v16)
      ZinAneTd<8u>::HandleEngineLayer(v16, v17, v18, v19, v20, v21, v22, v23);
    v15 = CFSTR("CodeGenerationFailure");
    goto LABEL_10;
  }
  ZinIrMemoryPool::GetSections((uint64_t)a6[3], 1, v25);
  v14 = *(ZinIrSection **)(v25[1] + 16);
  std::__list_imp<ZinIrSection *>::clear(v25);
  if ((ZinAneInstruction::HandleTdHeader(a4, (ZinEngineLayerMirInfo **)a2, a3, *a6, v14) & 1) == 0)
  {
    v15 = CFSTR("InvalidHWHeader");
    goto LABEL_10;
  }
  (*(void (**)(uint64_t *))(*a1 + 416))(a1);
  if (ZinIrOpLayer::IsPELayer((ZinIrOpLayer *)a2))
  {
    if (!HandlePELayer<8u>((ZinIrOpLayer *)a2, a3, a4, **a6, a5))
    {
      v15 = CFSTR("PEConfigFailure");
LABEL_10:
      ZinIrNetworkStatus::SetError(a7, v15);
      return 0;
    }
  }
  else
  {
    if (!ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)a2))
      ZinAssertImpl("TransposeEngineLayer based graph should not need DMA buffer\n");
    if (!HandleNELayer<8u>((const ZinIrOpLayer *)a2, a3, (ZinAneInstruction *)a4, (int **)*a6, (ZinIrMemoryPool *)a6[3], a5, a7))return 0;
  }
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 328))(a1, **a6, a2);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 344))(a1, a2);
    if ((_DWORD)result)
    {
      (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*a1 + 352))(a1, a2, a6[2]);
      if ((ZinAneTd<8u>::CodegenIntermediateMCacheDSIDs(a1, a2, *a6, (uint64_t)a6[2]) & 1) != 0)
      {
        if ((ZinAneTd<8u>::CreateSeedRelocations(a1, (ZinIrOpLayer *)a2, (*a6)[1], (uint64_t)a6[2]) & 1) != 0)
        {
          if (*(_BYTE *)(a4 + 198))
            *(_DWORD *)(*(_QWORD *)(a4 + 200) + 44) |= 0x80u;
          return 1;
        }
        else
        {
          result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if ((_DWORD)result)
          {
            ZinAneTd<17u>::HandleEngineLayer();
            return 0;
          }
        }
      }
      else
      {
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if ((_DWORD)result)
        {
          ZinAneTd<17u>::HandleEngineLayer();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t ZinAneTd<8u>::HandleTextureConfig(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  void *__p[2];
  int v23;
  _OWORD v24[2];
  uint64_t v25;

  if (a3[25])
  {
    v5 = a3[24];
    if (v5)
    {
      if (v5 != 1)
        return 1;
      v6 = a3 + 31;
    }
    else
    {
      v6 = a3 + 30;
    }
    v7 = *v6;
    if (*v6)
    {
      if (v5)
      {
        (*(void (**)(void **__return_ptr, uint64_t *))(*a3 + 512))(__p, a3);
        v8 = __p[0];
        v9 = *((_QWORD *)__p[0] + 1);
      }
      else
      {
        (*(void (**)(void **__return_ptr, uint64_t *))(*a3 + 512))(__p, a3);
        v8 = __p[0];
        v9 = *(_QWORD *)__p[0];
      }
      v10 = *(_OWORD *)(v9 + 64);
      v24[0] = *(_OWORD *)(v9 + 48);
      v24[1] = v10;
      v25 = *(_QWORD *)(v9 + 80);
      __p[1] = v8;
      operator delete(v8);
      if (!ZinAneTd<8u>::SetTextureExtMax(a1, v24))
        ZinAssertImpl("Codegen Error: Invalid TexExt XY/GZ is given");
      *(_DWORD *)(a1 + 784) |= 0x100000u;
      LODWORD(__p[0]) = *(_DWORD *)(v7 + 192);
      ZinAneTd<8u>::SetTextureMode(a1, __p);
      v11 = *(void **)(v7 + 196);
      v21 = *(_QWORD *)(v7 + 232);
      __p[0] = v11;
      ZinAneTd<8u>::SetTextureNormalization(a1, (int *)__p, (int *)&v21);
      __p[0] = *(void **)(v7 + 204);
      ZinAneTd<8u>::SetTextureFilter(a1, __p);
      LOWORD(__p[0]) = *(_WORD *)(v7 + 212);
      ZinAneTd<8u>::SetTextureWrap(a1, (unsigned __int8 *)__p);
      ZinAneTd<8u>::SetTextureIndexTensorInterleave(a1, *(_QWORD *)(v7 + 224));
      ZinAneTd<8u>::SetTextureBackgroundEn(a1, *(unsigned __int8 *)(v7 + 214));
      if (*(_BYTE *)(v7 + 214))
        ZinAneTd<8u>::SetTextureBackgroundVal(a1, *(_WORD *)(v7 + 216));
      *(_DWORD *)(a1 + 872) = *(_DWORD *)(a1 + 872) & 0xFFFFF0FF | ((HIBYTE(*(unsigned __int16 *)(a1 + 690)) & 0xF) << 8);
      if (*(_BYTE *)(a2 + 1253) && *(_BYTE *)(v7 + 215))
      {
        ZinAneTd<8u>::SetTexturePreserveFraction(a1, 1);
        ZinAneTd<8u>::SetL2Src1DmaFormat(a1, 3);
      }
      else
      {
        ZinAneTd<8u>::SetTexturePreserveFraction(a1, 0);
        *(_DWORD *)(a1 + 872) = *(_DWORD *)(a1 + 872) & 0xFFFFFF3F | ((*(_DWORD *)(a1 + 688) & 3) << 6);
      }
      v12 = *(_DWORD *)(v7 + 192);
      if ((v12 - 1) <= 1)
      {
        *(_OWORD *)__p = *(_OWORD *)(v7 + 240);
        v23 = *(_DWORD *)(v7 + 256);
        ZinAneTd<8u>::SetTextureSrcPermute(a1, __p);
        *(_OWORD *)__p = *(_OWORD *)(v7 + 260);
        v23 = *(_DWORD *)(v7 + 276);
        ZinAneTd<8u>::SetTextureIndPermute(a1, __p);
        *(_OWORD *)__p = *(_OWORD *)(v7 + 280);
        v23 = *(_DWORD *)(v7 + 296);
        ZinAneTd<8u>::SetTextureIdxPermute(a1, __p);
        v12 = *(_DWORD *)(v7 + 192);
      }
      if ((v12 - 3) <= 1)
      {
        v13 = *(_QWORD *)(v7 + 264);
        v14 = *(_QWORD *)(v7 + 272);
        if (*(_QWORD *)(a2 + 2080) < (unint64_t)((v14 - v13) >> 5))
          ZinAssertImpl("Codegen Error: Invalid Texture CropCfg");
        if (v14 != v13)
        {
          v15 = 0;
          v16 = 0;
          do
          {
            ZinAneTd<8u>::SetTextureCropCfg(a1, (_DWORD *)(v13 + v15), v16++);
            v13 = *(_QWORD *)(v7 + 264);
            v15 += 32;
          }
          while (v16 < (*(_QWORD *)(v7 + 272) - v13) >> 5);
        }
        v17 = *(_QWORD *)(v7 + 240);
        v18 = *(_QWORD *)(v7 + 248);
        if (*(_QWORD *)(a2 + 2072) < (unint64_t)((v18 - v17) >> 2))
          ZinAssertImpl("Codegen Error: Invalid Texture CropCoeff");
        if (v18 != v17)
        {
          v19 = 0;
          do
          {
            ZinAneTd<8u>::SetTextureCropCoeff(a1, *(_DWORD *)(v17 + 4 * v19), v19);
            ++v19;
            v17 = *(_QWORD *)(v7 + 240);
          }
          while (v19 < (*(_QWORD *)(v7 + 248) - v17) >> 2);
        }
        LODWORD(__p[0]) = *(_DWORD *)(v7 + 288);
        ZinAneTd<8u>::SetTextureGroupValue(a1, __p);
        LODWORD(__p[0]) = *(_DWORD *)(v7 + 292);
        ZinAneTd<8u>::SetTextureDepthValue(a1, __p);
      }
    }
  }
  return 1;
}

uint64_t ZinAneTd<8u>::HandleL2Hazards(uint64_t a1, uint64_t a2, uint64_t a3, ZinIrOpLayer *a4, _QWORD *a5)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t InputTensor;
  _DWORD *L2SrcDep;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  ZinIrOpLayer *v21;
  _BYTE v22[44];
  unsigned int v23;

  v21 = a4;
  v6 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a5, &v21)[3];
  v7 = (unsigned __int8 *)*((_QWORD *)a4 + 33);
  if (*((_QWORD *)a4 + 12) != *((_QWORD *)a4 + 11))
  {
    v8 = 0;
    while (1)
    {
      InputTensor = ZinIrOpLayer::GetInputTensor(a4, v8);
      if (((*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)a4 + 200))(a4, InputTensor) & 1) != 0)
        goto LABEL_21;
      if (!ZinIrOpLayer::IsANELayer(a4))
        goto LABEL_21;
      v23 = 0;
      if (ZinMemSourceIndexTranslator::GetL2SrcType(a4, v8, (int *)&v23))
        goto LABEL_21;
      L2SrcDep = (_DWORD *)ZinMirL2Config::GetL2SrcDep((uint64_t)(v7 + 120), v23);
      LODWORD(v21) = *L2SrcDep;
      std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v22, (uint64_t)(L2SrcDep + 2));
      if (v23 > 2)
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
      }
      else
      {
        v11 = dword_207AA115C[v23];
        v12 = dword_207AA1168[v23];
        v13 = dword_207AA1174[v23];
      }
      if ((_DWORD)v21)
        break;
      if (v23 <= 2)
        goto LABEL_15;
LABEL_16:
      v20 = 0;
      if (GetProgrammedDependencyOffsetAndDimension((uint64_t)v22, &v20, (_DWORD *)&v20 + 1))
      {
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v22);
        return 0;
      }
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), v12, v20);
      if ((HIDWORD(v20) - 1) >= 3)
        v14 = 0;
      else
        v14 = HIDWORD(v20);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), v13, v14);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v22);
LABEL_21:
      if (++v8 >= (uint64_t)(*((_QWORD *)a4 + 12) - *((_QWORD *)a4 + 11)) >> 3)
        goto LABEL_22;
    }
    if ((_DWORD)v21 != 2 && (_DWORD)v21 != 1 || v23 >= 3)
      goto LABEL_16;
LABEL_15:
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), v11);
    goto LABEL_16;
  }
LABEL_22:
  if (!*(_BYTE *)(v6 + 188))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), 15, v7[328]);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), 16, v7[329]);
    if (v7[330])
      v15 = 1;
    else
      v15 = v7[332];
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), 41, v15);
    if (v7[331])
      v16 = 1;
    else
      v16 = v7[333];
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), 42, v16);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), 17, v7[334]);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), 18, v7[335]);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), 19, v7[336]);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), 20, v7[337]);
    if (v7[338])
      v17 = 1;
    else
      v17 = v7[340];
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), 43, v17);
    if (v7[339])
      v18 = 1;
    else
      v18 = v7[341];
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), 44, v18);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), 21, v7[342]);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), 22, v7[343]);
  }
  return 1;
}

void sub_206E396D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unint64_t ZinAneTd<8u>::SetRAWdmaDependencySrc1(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  ZinAneTd<8u>::SetTileDmaSrc1DependencyMode(a1, a2);
  if (a2 == 1)
    ZinAneTd<8u>::SetTileDmaSrc1DependencyOffset(a1, a4);
  return ZinAneTd<8u>::SetTileDmaSrc1DependencyInterval(a1, a3);
}

unint64_t ZinAneTd<8u>::SetRAWdmaDependencySrc2(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  ZinAneTd<8u>::SetTileDmaSrc2DependencyMode(a1, a2);
  if (a2 == 1)
    ZinAneTd<8u>::SetTileDmaSrc2DependencyOffset(a1, a4);
  return ZinAneTd<8u>::SetTileDmaSrc2DependencyInterval(a1, a3);
}

uint64_t ZinAneTd<8u>::InitializeKernelDmaSrcConfig(uint64_t a1)
{
  uint64_t i;

  for (i = 0; i != 16; ++i)
    ZinAneTd<8u>::SetKernelDmaSrcCoeffDmaCacheHint(a1, 1, i);
  ZinAneTd<8u>::SetKernelDmaSrcPostScaleDmaCacheHint(a1, 1);
  ZinAneTd<8u>::SetKernelDmaSrcBiasDmaCacheHint(a1, 1);
  ZinAneTd<8u>::SetKernelDmaSrcPaletteLutDmaCacheHint(a1, 1);
  return ZinAneTd<8u>::SetKernelDmaSrcNonLinearLutDmaCacheHint(a1, 1);
}

void ZinAneTd<8u>::HandleKernelDmaSrcConfigAligned(uint64_t *a1, ZinIrOpLayer *a2, _QWORD *a3, ZinIrMemoryPool *a4)
{
  uint64_t v4;
  __int128 *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  uint64_t v16;
  std::string::size_type size;
  std::string *v18;
  std::string *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  std::string::size_type v23;
  std::string *v24;
  std::string *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  std::string::size_type v29;
  std::string *v30;
  std::string *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  std::string::size_type v35;
  std::string *v36;
  std::string *v37;
  uint64_t v38;
  unint64_t v39;
  std::string v40;
  unsigned __int8 v41;
  std::string v42;

  v4 = *((_QWORD *)a2 + 17);
  if (v4 && *(_QWORD *)(v4 + 784))
  {
    v41 = 0;
    if (ZinIrCodeGenGetBarIdForNonCoeffKDMABlocks(a2, a4, &v41))
      ZinAssertImpl("Cannot get barid for kernels");
    v39 = *(_QWORD *)(*a3 + 528);
    v8 = (__int128 *)*((_QWORD *)a2 + 17);
    if (*(_BYTE *)(a3[1] + 132))
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        v40.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v9;
      }
    }
    else
    {
      ZinIrKernel::GetFinalHash((ZinIrKernel *)v8, &v42);
      v10 = std::string::insert(&v42, 0, "K", 1uLL);
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
    }
    v12 = *(_QWORD **)(v4 + 784);
    v13 = v12[1];
    v14 = v13 != 0;
    if (v13)
    {
      v15 = ZinDivRoundUp(v13, v39);
      v16 = v41;
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      else
        size = v40.__r_.__value_.__l.__size_;
      v18 = &v42;
      std::string::basic_string[abi:ne180100]((uint64_t)&v42, size + 7);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v18 = (std::string *)v42.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &v40;
        else
          v19 = (std::string *)v40.__r_.__value_.__r.__words[0];
        memmove(v18, v19, size);
      }
      strcpy((char *)v18 + size, "_actlut");
      ZinAneTd<8u>::SetAlignedKernelNonLinearLut((uint64_t)a1, v16, (uint64_t)&v42, v15);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
    }
    v20 = v12[2];
    if (v20)
    {
      v21 = ZinDivRoundUp(v20, v39);
      v22 = v41;
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      else
        v23 = v40.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v42, v23 + 7);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v42;
      else
        v24 = (std::string *)v42.__r_.__value_.__r.__words[0];
      if (v23)
      {
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &v40;
        else
          v25 = (std::string *)v40.__r_.__value_.__r.__words[0];
        memmove(v24, v25, v23);
      }
      strcpy((char *)v24 + v23, "_pallut");
      ZinAneTd<8u>::SetAlignedKernelPaletteLut((uint64_t)a1, v22, (uint64_t)&v42, v21);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      v14 = 1;
    }
    v26 = v12[3];
    if (v26)
    {
      v27 = ZinDivRoundUp(v26, v39);
      v28 = v41;
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      else
        v29 = v40.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v42, v29 + 6);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v42;
      else
        v30 = (std::string *)v42.__r_.__value_.__r.__words[0];
      if (v29)
      {
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v31 = &v40;
        else
          v31 = (std::string *)v40.__r_.__value_.__r.__words[0];
        memmove(v30, v31, v29);
      }
      strcpy((char *)v30 + v29, "_scale");
      ZinAneTd<8u>::SetAlignedKernelPostScale(a1, v28, (uint64_t)&v42, v27);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      v32 = v12[4];
      if (!v32)
        goto LABEL_68;
    }
    else
    {
      v32 = v12[4];
      if (!v32)
      {
        if (!v14)
        {
LABEL_72:
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v40.__r_.__value_.__l.__data_);
          return;
        }
LABEL_68:
        ZinAneTd<8u>::SetKernelDmaSrcEnable((uint64_t)a1);
        *((_DWORD *)a1 + 11) = *((_DWORD *)a1 + 11) & 0xFFFFFFDF | (32
                                                                  * **(unsigned __int8 **)(*(_QWORD *)(v4 + 784) + 40));
        if (*(_DWORD *)(*((_QWORD *)a2 + 17) + 176))
        {
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 784) + 40);
          if (!*(_BYTE *)v38)
            ZinAneTd<8u>::SetAlignedCoeffSizePerCh((uint64_t)a1, *(_QWORD *)(v38 + 8));
        }
        ZinAneTd<8u>::SetAlignedKernelRelocationCommand(a1, v12, v41, (const void **)&v40.__r_.__value_.__l.__data_, *(unsigned __int8 *)(a3[1] + 378));
        goto LABEL_72;
      }
    }
    v33 = ZinDivRoundUp(v32, v39);
    v34 = v41;
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    else
      v35 = v40.__r_.__value_.__l.__size_;
    v36 = &v42;
    std::string::basic_string[abi:ne180100]((uint64_t)&v42, v35 + 5);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v36 = (std::string *)v42.__r_.__value_.__r.__words[0];
    if (v35)
    {
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &v40;
      else
        v37 = (std::string *)v40.__r_.__value_.__r.__words[0];
      memmove(v36, v37, v35);
    }
    strcpy((char *)v36 + v35, "_bias");
    ZinAneTd<8u>::SetAlignedKernelBias(a1, v34, (uint64_t)&v42, v33);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    goto LABEL_68;
  }
}

void sub_206E39C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<8u>::HandleKernelDmaSrcConfigCoeffBuffer(uint64_t result, ZinEngineLayerMirInfo **a2, uint64_t *a3, uint64_t a4, uint64_t *a5, _BYTE *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  MirInfoChannelAssignment *ChannelAssignment;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  char v29;

  v9 = result;
  v10 = *a3;
  v11 = *a5;
  if (*a5 && (v12 = *(_QWORD *)(v11 + 784)) != 0)
  {
    v29 = 0;
    v28 = *(_QWORD *)(v11 + 784);
    v13 = *(_QWORD *)(v12 + 40);
  }
  else
  {
    v28 = 0;
    v13 = 0;
    v29 = 1;
  }
  if (v11)
    v14 = v13 == 0;
  else
    v14 = 1;
  v15 = !v14;
  if (*(_DWORD *)(v10 + 8))
  {
    v16 = 0;
    v17 = *(_QWORD *)(v10 + 528);
    v18 = 40;
    do
    {
      if (v15
        && (ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a2[33]),
            MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment) > v16))
      {
        v20 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + v18);
        v21 = v20 != 0;
        *a6 |= v21;
        ZinAneTd<8u>::SetKernelDmaSrcCoeffDmaEn(v9, v21, v16);
        if (v20)
        {
          ZinAneTd<8u>::SetKernelDmaSrcEnable(v9);
          v22 = *(_QWORD *)(v13 + 32);
          if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v13 + 40) - v22) >> 3) <= v16)
            ZinAssertImpl("Kernel DMA NE number greater than kernel data prepped\n");
          if (*(_BYTE *)(*a3 + 1255))
          {
            if (*((_BYTE *)a2[33] + 2))
            {
              if (((*((uint64_t (**)(ZinEngineLayerMirInfo **))*a2 + 15))(a2) & 1) != 0)
              {
                v23 = ZinDivRoundUp(*((_QWORD *)a2[33] + 6), v17);
                ZinAneTd<8u>::SetKernelDmaSrcCoeffMemBufferSize(v9, v23, v16);
                LODWORD(v24) = ZinDivRoundUp(*(_QWORD *)(*((_QWORD *)a2[33] + 7) + 8 * v16), v17);
                goto LABEL_32;
              }
              v22 = *(_QWORD *)(v13 + 32);
            }
            v26 = ZinDivRoundUp(*(_QWORD *)(v22 + v18), v17);
            ZinAneTd<8u>::SetKernelDmaSrcCoeffMemBufferSize(v9, v26, v16);
            if ((v29 & 1) != 0 || !*(_BYTE *)(v28 + 1))
              v27 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + v18 - 40);
            else
              v27 = **(_QWORD **)(v13 + 32);
            v24 = v27 / v17;
LABEL_32:
            ZinAneTd<8u>::SetKernelDmaSrcCoeffBaseOffset(v9, v24, v16);
          }
          else
          {
            v25 = ZinDivRoundUp(*(_QWORD *)(v22 + v18), v17);
            ZinAneTd<8u>::SetKernelDmaSrcCoeffMemBufferSize(v9, v25, v16);
          }
          result = ZinAneTd<8u>::SetKernelDmaSrcCoeffDmaCacheHint(v9, *((_DWORD *)a2[33] + 354), v16);
          goto LABEL_23;
        }
      }
      else
      {
        ZinAneTd<8u>::SetKernelDmaSrcCoeffDmaEn(v9, 0, v16);
      }
      result = ZinAneTd<8u>::SetKernelDmaSrcCoeffMemBufferSize(v9, 1u, v16);
LABEL_23:
      ++v16;
      v18 += 56;
    }
    while (v16 < *(unsigned int *)(*a3 + 8));
  }
  return result;
}

BOOL HandlePELayer<8u>(ZinIrOpLayer *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  ZinIrHalH13g *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  _BOOL8 result;
  uint64_t v15;
  ZinDeQuantLayer *v16;
  ZinDeQuantLayer *v17;
  char v18;
  char v19;
  ZinDeQuantLayer *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v9 = *(ZinIrHalH13g **)(a3 + 200);
  v10 = (_QWORD *)*((_QWORD *)a1 + 33);
  SetPatchSettings<8u>((uint64_t)v9, (uint64_t)(v10 + 15));
  v11 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD))(*(_QWORD *)a1 + 368))(a1, 0);
  ZinAneTd<8u>::SetOrReturnNumGroups((uint64_t)v9, v11);
  if ((PECodegenUtils::HandlePrimarySourceTensor<8u>(a1, a4, a5, v9) & 1) == 0)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    HandlePELayer<17u>();
    return 0;
  }
  if (!PECodegenUtils::HandleSecondarySourceTensor<8u>(a1, (uint64_t)v10, a4, a5, (uint64_t *)v9))
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    HandlePELayer<17u>();
    return 0;
  }
  if (!PECodegenUtils::HandleTernarySourceTensor<8u>(a1, (uint64_t)v10, a4, a5, v9))
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    HandlePELayer<17u>();
    return 0;
  }
  v12 = *((_QWORD *)a1 + 32);
  if (v12)
    v13 = *(_DWORD *)(*(_QWORD *)(v12 + 64) + 8) == 102;
  else
    v13 = 0;
  v15 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  if ((PECodegenUtils::HandleOutputTensor<8u>(v15, (uint64_t)v10, (_QWORD *)a4, a5, (uint64_t)v9, v13) & 1) != 0)
  {
    if (*(_BYTE *)(a4 + 1584))
    {
      if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 576))(a1))
      {
        v16 = (ZinDeQuantLayer *)(*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 584))(a1);
        ZinDeQuantLayer::GetScalarZeroPoint(v16);
        ZinAneTd<7u>::SetQuantizationSrc1InputOffset();
      }
      if (*(_BYTE *)(a4 + 1584) && (*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 592))(a1))
      {
        v17 = (ZinDeQuantLayer *)(*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 600))(a1);
        ZinDeQuantLayer::GetScalarZeroPoint(v17);
        ZinAneTd<7u>::SetQuantizationSrc2InputOffset();
      }
    }
    switch(*(_DWORD *)(*((_QWORD *)a1 + 8) + 8))
    {
      case 'Q':
        v18 = PECodegenUtils::HandlePEElementWiseLayer<8u>(a4, a1, v9);
        goto LABEL_29;
      case 'R':
        if (*(_BYTE *)(a3 + 188))
        {
          v18 = PECodegenUtils::HandlePESecureFlushLayer<8u>((uint64_t)v9, *(_DWORD *)(a3 + 192));
LABEL_29:
          v19 = v18;
LABEL_30:
          if (*(_BYTE *)(a4 + 1584) && (*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 672))(a1))
          {
            v20 = (ZinDeQuantLayer *)(*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 768))(a1);
            ZinDeQuantLayer::GetScalarZeroPoint(v20);
            ZinAneTd<7u>::SetPEOutputQuantization();
          }
          if ((v19 & 1) != 0)
          {
            if (!*(_BYTE *)(a4 + 1252))
            {
              if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 568))(a1))
              {
                ZinEngineLayerMirInfo::HasDmaRead((uint64_t)v10, 0);
                ZinEngineLayerMirInfo::HasDmaRead((uint64_t)v10, 1);
              }
              ZinIrHalH13g::~ZinIrHalH13g(v9);
            }
            **(_QWORD **)(a3 + 128) = v10[94];
            *(_QWORD *)(*(_QWORD *)(a3 + 128) + 8) = v10[106];
            *(_QWORD *)(a3 + 152) = v10[118];
            return 1;
          }
          result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!result)
            return result;
          HandlePELayer<17u>();
        }
        else
        {
          result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!result)
            return result;
          HandlePELayer<8u>(result, v21, v22, v23, v24, v25, v26, v27);
        }
        break;
      case 'S':
        v18 = PECodegenUtils::HandlePEPoolLayer<8u>(a4, a1, (uint64_t)v9);
        goto LABEL_29;
      case 'T':
        v18 = PECodegenUtils::HandlePEGOCLayer<8u>(a4, (uint64_t)a1, v9);
        goto LABEL_29;
      default:
        v19 = 0;
        goto LABEL_30;
    }
    return 0;
  }
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    HandlePELayer<17u>();
    return 0;
  }
  return result;
}

BOOL HandleNELayer<8u>(const ZinIrOpLayer *a1, int a2, ZinAneInstruction *a3, int **a4, ZinIrMemoryPool *a5, uint64_t a6, CFArrayRef *a7)
{
  ZinIrHalH13g *v13;
  const __CFString *v14;
  _BOOL8 result;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  ZinIrKernel *v23;
  uint64_t v24;
  ZinDynamicRange **v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  int v30;
  unsigned __int8 v31;
  unsigned __int8 v32;

  v13 = (ZinIrHalH13g *)*((_QWORD *)a3 + 25);
  v32 = 0;
  if (ZinIrCodeGenGetBarIdForCoeffKDMABlock(a1, a5, &v32)
    || (v31 = 0, ZinIrCodeGenGetBarIdForNonCoeffKDMABlocks(a1, a5, &v31)))
  {
LABEL_3:
    v14 = CFSTR("CodeGenerationFailure");
LABEL_4:
    ZinIrNetworkStatus::SetError(a7, v14);
    return 0;
  }
  v16 = *((_QWORD *)a1 + 17);
  if (v16 && *(_QWORD *)(v16 + 784))
  {
    ZinIrHalH13g::~ZinIrHalH13g(v13);
    v17 = *(_QWORD **)(*((_QWORD *)a1 + 17) + 784);
    if (v17[1])
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    if (v17[2])
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    if (v17[4])
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    if (v17[3])
      ZinIrHalH13g::~ZinIrHalH13g(v13);
  }
  if ((ZinAneInstruction::HandleCommonConfig(a3, a1, (const ZinIrHalParameters *)*a4, a7) & 1) != 0)
  {
    if (((*(uint64_t (**)(ZinIrHalH13g *, const ZinIrOpLayer *, int **, ZinIrMemoryPool *, ZinAneInstruction *))(*(_QWORD *)v13 + 312))(v13, a1, a4, a5, a3) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      v14 = CFSTR("KernelDMASourceAllocationFailure");
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(ZinIrHalH13g *, const ZinIrOpLayer *, int *, uint64_t, ZinAneInstruction *))(*(_QWORD *)v13 + 248))(v13, a1, *a4, a6, a3) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      v14 = CFSTR("TileDMASourceAllocationFailure");
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(_QWORD, const ZinIrOpLayer *, int *))(**((_QWORD **)a3 + 25) + 256))(*((_QWORD *)a3 + 25), a1, *a4) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      v14 = CFSTR("L2AllocationFailure");
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(_QWORD, const ZinIrOpLayer *, int *))(**((_QWORD **)a3 + 25) + 264))(*((_QWORD *)a3 + 25), a1, *a4) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      v14 = CFSTR("NEConfigFailure");
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(_QWORD, const ZinIrOpLayer *, int *, uint64_t, ZinAneInstruction *))(**((_QWORD **)a3 + 25) + 304))(*((_QWORD *)a3 + 25), a1, *a4, a6, a3) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      v14 = CFSTR("TileDMADestinationAllocationFailure");
      goto LABEL_4;
    }
    if (!ZinAneTd<8u>::ValidateOCGSizes(v13, (uint64_t)a1, *a4))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      goto LABEL_3;
    }
    ZinIrHalH13g::~ZinIrHalH13g(v13);
    if ((*((_DWORD *)v13 + 127) & 3) == 3
      || (v18 = *((_DWORD *)v13 + 266),
          v30 = dword_207AA1198[*((_DWORD *)v13 + 127) & 3],
          v19 = *((_DWORD *)v13 + 265) & 3,
          v19 == 3))
    {
      ZinIrNetworkStatus::SetError(a7, CFSTR("NEConfigFailure"));
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      return 0;
    }
    v20 = (char)(v18 >> 5) >> 3;
    v21 = ZinMirPrepareBinaryPoint::CalculateBinaryPointAdjustment(v19, &v30);
    v22 = *((_DWORD *)v13 + 269);
    if (ZinIrOpLayer::IsNELayer(a1) && v21 + v20 + (HIWORD(v22) & 0x1F) >= 0x20u)
    {
      ZinIrNetworkStatus::SetError(a7, CFSTR("NEConfigFailure"));
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      return 0;
    }
    v23 = (ZinIrKernel *)*((_QWORD *)a1 + 17);
    if (v23)
    {
      if (ZinIrKernel::HasBias(v23))
      {
        v24 = *((_QWORD *)a1 + 17);
        if (*(_QWORD *)(v24 + 576))
        {
          v25 = (ZinDynamicRange **)(v24 + 576);
          v26 = ldexp(1.0, v21 + v20 + ((int)(*((_DWORD *)v13 + 268) << 11) >> 27));
          if (!ZinIrCodegenValidBiasShift(v25, v26, v27, v28, v29))
          {
            ZinIrNetworkStatus::SetError(a7, CFSTR("NEConfigFailure"));
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              HandleNELayer<17u>();
            return 0;
          }
        }
      }
    }
    if (!*((_BYTE *)*a4 + 1243) || (ZinAneTd<8u>::SetDPE((uint64_t)v13, (uint64_t)a1) & 1) != 0)
      return 1;
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      HandleNELayer<17u>();
      return 0;
    }
  }
  else
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      HandleNELayer<17u>();
      return 0;
    }
  }
  return result;
}

uint64_t ZinAneTd<8u>::CodegenIntermediateMCacheDSIDs(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  _DWORD *v9;
  int v10;
  int DSIDFromPriorityHalAndSecureMode;
  int v12;
  uint64_t v13;
  unint64_t v14;
  std::string *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  std::string *v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v31;
  std::string *v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  _BOOL4 v41;
  unint64_t v42;
  uint64_t v43;
  MirInfoChannelAssignment *ChannelAssignment;
  int v45;
  uint64_t v46;
  unint64_t v47;
  std::string *v48;
  __int128 v49;
  uint64_t v50;
  void *v51[2];
  char v52;
  __int16 v53;
  __int128 __p;
  uint64_t v55;
  int v56;

  v7 = *a3;
  v8 = *(unsigned __int8 *)(a3[1] + 130);
  v9 = *(_DWORD **)(a2 + 264);
  v10 = v9[358];
  if (v10 == 2)
    goto LABEL_24;
  DSIDFromPriorityHalAndSecureMode = GetDSIDFromPriorityHalAndSecureMode(v10, v7, v8 != 0);
  ZinAneTd<8u>::SetTileDmaSrc1DataSetId((uint64_t)a1, DSIDFromPriorityHalAndSecureMode);
  if (*(_BYTE *)(v7 + 1248))
  {
    std::string::basic_string[abi:ne180100]<0>(v51, &byte_207AF6795);
    v12 = *(_DWORD *)(*(_QWORD *)(a2 + 264) + 1432);
    if (v12 == 1)
    {
      if (*(_BYTE *)(a4 + 10))
      {
        v13 = *(unsigned __int16 *)(a4 + 8);
        goto LABEL_13;
      }
    }
    else
    {
      if (v12)
      {
        v13 = 0;
        goto LABEL_13;
      }
      if (*(_BYTE *)(a4 + 6))
      {
        v13 = *(unsigned __int16 *)(a4 + 4);
LABEL_13:
        ZinAneRelocInfo::ZinAneRelocInfo(&v53, v51, 4928, v13, 0, 0, 0, 0);
        v14 = a1[159];
        if (v14 >= a1[160])
        {
          v17 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 158, (uint64_t)&v53);
        }
        else
        {
          *(_WORD *)v14 = v53;
          v15 = (std::string *)(v14 + 8);
          if (SHIBYTE(v55) < 0)
          {
            std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
          }
          else
          {
            v16 = __p;
            *(_QWORD *)(v14 + 24) = v55;
            *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
          }
          *(_DWORD *)(v14 + 32) = v56;
          v17 = v14 + 40;
          a1[159] = v14 + 40;
        }
        a1[159] = v17;
        if (SHIBYTE(v55) < 0)
          operator delete((void *)__p);
        if (v52 < 0)
          operator delete(v51[0]);
        v9 = *(_DWORD **)(a2 + 264);
        goto LABEL_24;
      }
    }
    ZinAssertImpl("Missing Bar for MCache");
  }
  v9 = *(_DWORD **)(a2 + 264);
  if (!DSIDFromPriorityHalAndSecureMode && v9[350] == 2)
    return 0;
LABEL_24:
  v18 = v9[359];
  if (v18 != 2)
  {
    v19 = GetDSIDFromPriorityHalAndSecureMode(v18, v7, v8 != 0);
    ZinAneTd<8u>::SetTileDmaSrc2DataSetId((uint64_t)a1, v19);
    if (*(_BYTE *)(v7 + 1248))
    {
      std::string::basic_string[abi:ne180100]<0>(v51, &byte_207AF6795);
      v20 = *(_DWORD *)(*(_QWORD *)(a2 + 264) + 1436);
      if (v20 == 1)
      {
        if (*(_BYTE *)(a4 + 10))
        {
          v21 = *(unsigned __int16 *)(a4 + 8);
          goto LABEL_36;
        }
      }
      else
      {
        if (v20)
        {
          v21 = 0;
          goto LABEL_36;
        }
        if (*(_BYTE *)(a4 + 6))
        {
          v21 = *(unsigned __int16 *)(a4 + 4);
LABEL_36:
          ZinAneRelocInfo::ZinAneRelocInfo(&v53, v51, 4929, v21, 0, 0, 0, 0);
          v22 = a1[159];
          if (v22 >= a1[160])
          {
            v25 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 158, (uint64_t)&v53);
          }
          else
          {
            *(_WORD *)v22 = v53;
            v23 = (std::string *)(v22 + 8);
            if (SHIBYTE(v55) < 0)
            {
              std::string::__init_copy_ctor_external(v23, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
            }
            else
            {
              v24 = __p;
              *(_QWORD *)(v22 + 24) = v55;
              *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
            }
            *(_DWORD *)(v22 + 32) = v56;
            v25 = v22 + 40;
            a1[159] = v22 + 40;
          }
          a1[159] = v25;
          if (SHIBYTE(v55) < 0)
            operator delete((void *)__p);
          if (v52 < 0)
            operator delete(v51[0]);
          v9 = *(_DWORD **)(a2 + 264);
          goto LABEL_47;
        }
      }
      ZinAssertImpl("Missing Bar for MCache");
    }
    v9 = *(_DWORD **)(a2 + 264);
    if (!v19 && v9[355] == 2)
      return 0;
  }
LABEL_47:
  v26 = v9[360];
  if (v26 != 2)
  {
    v27 = GetDSIDFromPriorityHalAndSecureMode(v26, v7, v8 != 0);
    ZinAneTd<8u>::SetTileDmaDstDataSetId((uint64_t)a1, v27);
    if (*(_BYTE *)(v7 + 1248))
    {
      std::string::basic_string[abi:ne180100]<0>(v51, &byte_207AF6795);
      v28 = *(_DWORD *)(*(_QWORD *)(a2 + 264) + 1440);
      if (v28 == 1)
      {
        if (*(_BYTE *)(a4 + 10))
        {
          v29 = *(unsigned __int16 *)(a4 + 8);
          goto LABEL_59;
        }
      }
      else
      {
        if (v28)
        {
          v29 = 0;
          goto LABEL_59;
        }
        if (*(_BYTE *)(a4 + 6))
        {
          v29 = *(unsigned __int16 *)(a4 + 4);
LABEL_59:
          ZinAneRelocInfo::ZinAneRelocInfo(&v53, v51, 5184, v29, 0, 0, 0, 0);
          v31 = a1[159];
          if (v31 >= a1[160])
          {
            v34 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 158, (uint64_t)&v53);
          }
          else
          {
            *(_WORD *)v31 = v53;
            v32 = (std::string *)(v31 + 8);
            if (SHIBYTE(v55) < 0)
            {
              std::string::__init_copy_ctor_external(v32, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
            }
            else
            {
              v33 = __p;
              *(_QWORD *)(v31 + 24) = v55;
              *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
            }
            *(_DWORD *)(v31 + 32) = v56;
            v34 = v31 + 40;
            a1[159] = v31 + 40;
          }
          a1[159] = v34;
          if (SHIBYTE(v55) < 0)
            operator delete((void *)__p);
          if (v52 < 0)
            operator delete(v51[0]);
          v9 = *(_DWORD **)(a2 + 264);
          goto LABEL_70;
        }
      }
      ZinAssertImpl("Missing Bar for MCache");
    }
    v9 = *(_DWORD **)(a2 + 264);
    if (!v27 && v9[353] == 2)
      return 0;
  }
LABEL_70:
  v35 = v9[361];
  if (v35 != 2)
  {
    v36 = GetDSIDFromPriorityHalAndSecureMode(v35, v7, v8 != 0);
    v37 = *(_QWORD *)(a2 + 136);
    if (v37 && (v38 = *(_QWORD *)(v37 + 784)) != 0)
      v39 = *(_QWORD *)(v38 + 40);
    else
      v39 = 0;
    v40 = !v37 || v39 == 0;
    v41 = !v40;
    if (*(_DWORD *)(v7 + 8))
    {
      v42 = 0;
      v43 = 40;
      do
      {
        if (v41)
        {
          ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a2 + 264));
          if (MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment) > v42)
          {
            if (*(_QWORD *)(*(_QWORD *)(v39 + 32) + v43))
            {
              ZinAneTd<8u>::SetKernelDmaSrcDataSetId((uint64_t)a1, v36, v42);
              if (*(_BYTE *)(v7 + 1248))
              {
                std::string::basic_string[abi:ne180100]<0>(v51, &byte_207AF6795);
                v45 = *(_DWORD *)(*(_QWORD *)(a2 + 264) + 1444);
                if (v45 == 1)
                {
                  if (!*(_BYTE *)(a4 + 10))
LABEL_107:
                    ZinAssertImpl("Missing Bar for MCache", &__p);
                  v46 = *(unsigned __int16 *)(a4 + 8);
                }
                else if (v45)
                {
                  v46 = 0;
                }
                else
                {
                  if (!*(_BYTE *)(a4 + 6))
                    goto LABEL_107;
                  v46 = *(unsigned __int16 *)(a4 + 4);
                }
                ZinAneRelocInfo::ZinAneRelocInfo(&v53, v51, ((_DWORD)v42 + 5448) & 0x3FFFFFFF, v46, 0, 0, 0, 0);
                v47 = a1[159];
                if (v47 >= a1[160])
                {
                  v50 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 158, (uint64_t)&v53);
                }
                else
                {
                  *(_WORD *)v47 = v53;
                  v48 = (std::string *)(v47 + 8);
                  if (SHIBYTE(v55) < 0)
                  {
                    std::string::__init_copy_ctor_external(v48, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
                  }
                  else
                  {
                    v49 = __p;
                    *(_QWORD *)(v47 + 24) = v55;
                    *(_OWORD *)&v48->__r_.__value_.__l.__data_ = v49;
                  }
                  *(_DWORD *)(v47 + 32) = v56;
                  v50 = v47 + 40;
                  a1[159] = v47 + 40;
                }
                a1[159] = v50;
                if (SHIBYTE(v55) < 0)
                  operator delete((void *)__p);
                if (v52 < 0)
                  operator delete(v51[0]);
              }
            }
          }
        }
        ++v42;
        v43 += 56;
      }
      while (v42 < *(unsigned int *)(v7 + 8));
    }
  }
  return 1;
}

void sub_206E3AD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v23 + 1272) = v24;
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<8u>::CreateSeedRelocations(uint64_t *a1, ZinIrOpLayer *this, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  int *v10;
  int v11;
  int v12;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v17;
  uint64_t v18;

  if (ZinIrOpLayer::IsNELayer(this))
  {
    if (*(_BYTE *)(a4 + 20))
    {
      v18 = *(_QWORD *)(a4 + 12);
      if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)this + 584))(this))
      {
        v8 = *(unsigned __int8 *)(a3 + 471);
        v9 = (char)v8;
        if ((v8 & 0x80u) != 0)
          v8 = *(_QWORD *)(a3 + 456);
        if (v8 == 7)
        {
          if (v9 >= 0)
            v10 = (int *)(a3 + 448);
          else
            v10 = *(int **)(a3 + 448);
          v11 = *v10;
          v12 = *(int *)((char *)v10 + 3);
          if (v11 == 1634629956 && v12 == 1667853665)
          {
            v14 = 0;
            v17 = a1;
            v15 = 18716;
            do
            {
              ZinAneTd<8u>::CreateSeedRelocations(ZinANELayer const*,ZinIrCompilerParameters const&,BarIdsForCodegen const&)::{lambda(unsigned int,unsigned short)#1}::operator()(&v17, v15, *(unsigned __int16 *)((char *)&v18 + v14));
              v15 += 4;
              v14 += 2;
            }
            while (v14 != 8);
          }
        }
      }
    }
  }
  return 1;
}

uint64_t SetPatchSettings<8u>(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  int v5;
  _BOOL4 v6;
  int v7;
  _BOOL4 v8;
  uint64_t v9;

  v4 = ZinAneTd<8u>::SetPatchHeight(a1, *(_QWORD *)(a2 + 128));
  v5 = v4 & ZinAneTd<8u>::SetPatchWidth(a1, *(_QWORD *)(a2 + 120));
  v6 = ZinAneTd<8u>::SetTileHeight(a1, *(_QWORD *)(a2 + 80));
  v7 = v5 & v6 & ZinAneTd<8u>::SetTileOverlap(a1, *(_QWORD *)(a2 + 96));
  v8 = ZinAneTd<8u>::SetTileOverlapPadBottom(a1, *(_QWORD *)(a2 + 104));
  v9 = v7 & v8 & ZinAneTd<8u>::SetTileOverlapPadTop(a1, *(_QWORD *)(a2 + 88));
  ZinAneTd<7u>::SetTileOverlapPadReflect(a1, *(unsigned __int8 *)(a2 + 112));
  return v9;
}

uint64_t PECodegenUtils::HandlePrimarySourceTensor<8u>(ZinIrOpLayer *a1, uint64_t a2, uint64_t a3, ZinIrHalH13g *a4)
{
  ZinIrTensor *InputTensor;
  unint64_t *v9;
  uint64_t result;
  _BOOL8 v11;
  int *TileSrc;
  int L2RdMode;
  uint64_t v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  const void *v18;
  void *v19;
  char v20;
  int v21;
  _QWORD v22[5];
  uint64_t v23;

  v23 = 0;
  InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a1, 0);
  (*(void (**)(_QWORD *__return_ptr, ZinIrOpLayer *))(*(_QWORD *)a1 + 376))(v22, a1);
  v21 = 0;
  if (ZinMemSourceIndexTranslator::GetL2SrcType(a1, 0, &v21))
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      PECodegenUtils::HandlePrimarySourceTensor<17u>();
      return 0;
    }
    return result;
  }
  v11 = v21 != 0;
  ZinMemSourceIndexTranslator::GetDMASrcIndex(a1, 0, &v23, v9);
  ZinAneTd<8u>::SetOrReturnWin((uint64_t)a4, v22[3]);
  ZinAneTd<8u>::SetOrReturnHin((uint64_t)a4, v22[2]);
  ZinAneTd<8u>::SetOrReturnDin((uint64_t)a4, v22[4]);
  ZinAneTd<8u>::SetOrReturnCin((uint64_t)a4, v22[1]);
  TileSrc = (int *)ZinMirL2Config::GetTileSrc(*((_QWORD *)a1 + 33) + 120, v21);
  ZinAneTd<8u>::SetCommonInFmt((uint64_t)a4, *TileSrc);
  L2RdMode = ZinEngineLayerMirInfo::GetL2RdMode(*((_QWORD *)a1 + 33), v21);
  ZinAneTd<8u>::SetL2Src1SourceType((uint64_t)a4, L2RdMode);
  if (!*((_QWORD *)a1 + 25))
  {
    v15 = 0;
    goto LABEL_8;
  }
  v14 = *((_QWORD *)a1 + 24);
  v15 = v14 == 0;
  if (v14 != 1)
  {
LABEL_8:
    v16 = 0;
    goto LABEL_9;
  }
  v16 = 1;
LABEL_9:
  if (!ZinEngineLayerMirInfo::HasDmaRead(*((_QWORD *)a1 + 33), v21))
    return ZinCodegen::SetPrimaryL2SourceBuffer<8u>(a2, (uint64_t)a1, a4);
  v17 = v23;
  v18 = (const void *)*((_QWORD *)a1 + (int)v23 + 30);
  v19 = v18
  if ((v15 | v16) == 1)
  {
    v20 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 25) + 304))(*((_QWORD *)a1 + 25));
    v17 = v23;
  }
  else
  {
    v20 = 0;
  }
  result = ZinCodegen::SetPrimarySourceDMA<8u>(InputTensor, (uint64_t *)a4, *((_QWORD *)a1 + 33), v17, v11, a3, *(_QWORD *)(a2 + 528), *(_QWORD *)(a2 + 560), v15, v16, v20, (uint64_t)v19);
  if ((_DWORD)result)
    return ZinCodegen::SetPrimaryL2SourceBuffer<8u>(a2, (uint64_t)a1, a4);
  return result;
}

BOOL PECodegenUtils::HandleSecondarySourceTensor<8u>(ZinIrOpLayer *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  _BOOL8 result;
  ZinIrTensor *InputTensor;
  unint64_t *v12;
  _BOOL8 v13;
  int v14;
  int *TileSrc;
  int L2RdMode;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  int v21;
  char v22;
  uint64_t v23;
  void *v24;
  _BOOL4 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;

  v29 = a5;
  if (*((_QWORD *)a1 + 12) - *((_QWORD *)a1 + 11) < 0x10uLL)
    return 1;
  v28 = 0;
  InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a1, 1uLL);
  v27 = 0;
  if (ZinMemSourceIndexTranslator::GetL2SrcType(a1, 1uLL, &v27))
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    PECodegenUtils::HandlePrimarySourceTensor<17u>();
    return 0;
  }
  v13 = v27 != 0;
  ZinMemSourceIndexTranslator::GetDMASrcIndex(a1, (const ZinANELayer *)1, &v28, v12);
  v14 = v27;
  if (v27 == 1)
  {
    TileSrc = (int *)ZinMirL2Config::GetTileSrc(a2 + 120, 1);
    ZinAneTd<8u>::SetCommonSrc2InFmt((uint64_t)a5, *TileSrc);
    ZinAneTd<8u>::SetPESecondSource((uint64_t)a5, 2);
    L2RdMode = ZinEngineLayerMirInfo::GetL2RdMode(a2, v27);
    ZinAneTd<8u>::SetL2Src2SourceType((uint64_t)a5, L2RdMode);
    v14 = v27;
  }
  if (v14 == 2)
    v17 = 0;
  else
    v17 = ZinEngineLayerMirInfo::HasDmaRead(a2, v14);
  v18 = *((_QWORD *)a1 + 25);
  if (!v18)
  {
    v20 = 0;
LABEL_16:
    v21 = 0;
    if (!v17)
      goto LABEL_28;
    goto LABEL_17;
  }
  v19 = *((_QWORD *)a1 + 24);
  v20 = v19 == 0;
  if (v19 != 1)
    goto LABEL_16;
  v21 = 1;
  if (!v17)
    goto LABEL_28;
LABEL_17:
  v26 = v13;
  if ((v20 | v21) == 1)
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 304))(v18);
  else
    v22 = 0;
  v23 = v28;
  v24 = (void *)*((_QWORD *)a1 + (int)v28 + 30);
  if (v21)
  {
    if (v24)
    if ((ZinCodegen::SetPrimarySourceDMA<8u>(InputTensor, a5, a2, v23, v26, a4, *(_QWORD *)(a3 + 528), *(_QWORD *)(a3 + 560), v20, 1, v22, (uint64_t)v24) & 1) == 0)return 0;
  }
  else
  {
    if (v24)
    v25 = ZinCodegen::SetSecondarySourceDMA<8u>(InputTensor, (uint64_t)a5, a2, v23, a4, *(_QWORD *)(a3 + 528), *(_QWORD *)(a3 + 560), v20, 0, v22, (uint64_t)v24);
    result = 0;
    if (!v25)
      return result;
  }
LABEL_28:
  if (v27 != 2)
    return v27 != 1 || ZinCodegen::SetSecondaryL2SourceBuffer<8u>(a3, a1, (ZinIrHalH13g *)a5);
  if (!*(_BYTE *)(a3 + 1130))
    ZinAssertImpl("Error: PE indexing is not supported");
  result = PECodegenUtils::HandlePEIndexingBuffer<8u>((uint64_t)InputTensor, a3, a2, (uint64_t *)&v29);
  if (result)
    return 1;
  return result;
}

BOOL PECodegenUtils::HandleTernarySourceTensor<8u>(ZinIrOpLayer *a1, uint64_t a2, uint64_t a3, uint64_t a4, ZinIrHalH13g *a5)
{
  _BOOL8 result;
  ZinIrTensor *InputTensor;
  unint64_t *v12;
  int *TileSrc;
  int L2RdMode;
  uint64_t v15;
  void *v16;
  BOOL v17;
  int v18;
  uint64_t v19;

  if (*((_QWORD *)a1 + 12) - *((_QWORD *)a1 + 11) < 0x18uLL)
    return 1;
  v19 = 0;
  InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a1, 2uLL);
  v18 = 0;
  if (ZinMemSourceIndexTranslator::GetL2SrcType(a1, 2uLL, &v18))
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      PECodegenUtils::HandlePrimarySourceTensor<17u>();
      return 0;
    }
  }
  else
  {
    ZinMemSourceIndexTranslator::GetDMASrcIndex(a1, (const ZinANELayer *)2, &v19, v12);
    if (v18 == 1)
    {
      TileSrc = (int *)ZinMirL2Config::GetTileSrc(a2 + 120, 1);
      ZinAneTd<8u>::SetCommonSrc2InFmt((uint64_t)a5, *TileSrc);
      L2RdMode = ZinEngineLayerMirInfo::GetL2RdMode(a2, v18);
      ZinAneTd<8u>::SetL2Src2SourceType((uint64_t)a5, L2RdMode);
    }
    if (*((_QWORD *)a1 + 25) && *((_QWORD *)a1 + 24) == 1)
    {
      v15 = v19;
      v16 = (void *)*((_QWORD *)a1 + (int)v19 + 30);
      if (v16)
      v17 = ZinCodegen::SetSecondarySourceDMA<8u>(InputTensor, (uint64_t)a5, a2, v15, a4, *(_QWORD *)(a3 + 528), *(_QWORD *)(a3 + 560), 0, 1, 1, (uint64_t)v16);
      result = 0;
      if (v17)
        return 1;
    }
    else
    {
      if (v18 != 1)
        return 1;
      result = ZinCodegen::SetSecondaryL2SourceBuffer<8u>(a3, a1, a5);
      if (result)
        return 1;
    }
  }
  return result;
}

uint64_t PECodegenUtils::HandleOutputTensor<8u>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6)
{
  int v12;
  unint64_t v13;
  uint64_t L2WrSymbol;
  __int16 NumNeededNEs;
  __int16 OCGSize;
  uint64_t v17;
  __int128 v19;

  v12 = *(_DWORD *)(a1 + 88);
  ZinAneTd<8u>::SetOrReturnWout(a5, *(_QWORD *)(a1 + 72));
  ZinAneTd<8u>::SetOrReturnHout(a5, *(_QWORD *)(a1 + 64));
  ZinAneTd<8u>::SetOrReturnDout(a5, *(_QWORD *)(a1 + 80));
  ZinAneTd<8u>::SetOrReturnCout(a5, *(_QWORD *)(a1 + 56));
  ZinAneTd<8u>::SetCommonOutFmt(a5, v12);
  ZinAneTd<8u>::SetL2ResultType(a5, *(_DWORD *)(a2 + 1632));
  if ((*(_DWORD *)(a2 + 1632) - 1) <= 1
    && !ZinCodegen::SetResultDMA<8u>((ZinIrTensor *)a1, (uint64_t *)a5, a2, a4, a3[66], a3[70], a6))
  {
    return 0;
  }
  v13 = *(_QWORD *)(ZinEngineLayerMirInfo::GetL2WrSymbol((ZinEngineLayerMirInfo *)a2) + 16) % a3[51] / a3[52];
  *(_DWORD *)(a5 + 924) = *(_DWORD *)(a5 + 924) & 0xFFE0000F | (16 * (v13 & 0x1FFFF));
  if (!CheckRegValueRange(v13, (unsigned int *)(*(_QWORD *)(a5 + 1296) + 376)))
    return 0;
  *(_DWORD *)(a5 + 928) = *(_DWORD *)(a5 + 928) & 0xFFE0000F | (16 * (*(_DWORD *)(a2 + 280) & 0x1FFFF));
  if (!CheckRegValueRange(*(_QWORD *)(a2 + 280), (unsigned int *)(*(_QWORD *)(a5 + 1296) + 384)))
    return 0;
  *(_DWORD *)(a5 + 940) = *(_DWORD *)(a5 + 940) & 0xFFE0000F | (16 * (*(_DWORD *)(a2 + 288) & 0x1FFFF));
  if (!CheckRegValueRange(*(_QWORD *)(a2 + 288), (unsigned int *)(*(_QWORD *)(a5 + 1296) + 408)))
    return 0;
  *(_DWORD *)(a5 + 936) = *(_DWORD *)(a5 + 936) & 0xFFE0000F | (16 * (*(_DWORD *)(a2 + 296) & 0x1FFFF));
  if (!CheckRegValueRange(*(_QWORD *)(a2 + 296), (unsigned int *)(*(_QWORD *)(a5 + 1296) + 400)))
    return 0;
  *(_DWORD *)(a5 + 932) = *(_DWORD *)(a5 + 932) & 0xFFE0000F | (16 * (*(_DWORD *)(a2 + 272) & 0x1FFFF));
  if (!CheckRegValueRange(*(_QWORD *)(a2 + 272), (unsigned int *)(*(_QWORD *)(a5 + 1296) + 392)))
    return 0;
  L2WrSymbol = ZinEngineLayerMirInfo::GetL2WrSymbol((ZinEngineLayerMirInfo *)a2);
  v19 = *(_OWORD *)(L2WrSymbol + 520);
  NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v19);
  ZinAneTd<8u>::SetL2ResultWrapAddr(a5, NumNeededNEs);
  OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v19);
  ZinAneTd<8u>::SetL2ResultWrapAddrOffset(a5, OCGSize);
  v17 = ZinCodegen::SetL2ResultWrapInfo<8u>(a5, L2WrSymbol);
  if ((_DWORD)v17)
    ZinAneTd<4u>::SetL2OutputCropOffsetXLSBs(a5, *(_QWORD *)(a2 + 320));
  return v17;
}

uint64_t PECodegenUtils::HandlePEElementWiseLayer<8u>(uint64_t a1, ZinCodegen *this, ZinIrHalH13g *a3)
{
  unsigned int HWTaskType;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int Win;
  int Wout;
  int Hin;
  int Hout;
  int Cin;
  int Cout;
  int Din;
  int Dout;
  BOOL v33;
  uint64_t v34;
  uint64_t v36;
  _BYTE v37[24];
  unint64_t v38;

  HWTaskType = ZinCodegen::GetHWTaskType(this, this);
  ZinAneTd<8u>::SetCommonTaskType((uint64_t)a3, HWTaskType);
  v7 = (*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)this + 608))(this);
  ZinAneTd<8u>::SetPESrc1ReLu((uint64_t)a3, v7);
  v8 = (*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)this + 616))(this);
  ZinAneTd<8u>::SetPESrc2ReLu((uint64_t)a3, v8);
  v9 = (*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)this + 640))(this);
  ZinAneTd<8u>::SetPESrc1Transpose((uint64_t)a3, v9);
  v10 = (*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)this + 648))(this);
  ZinAneTd<8u>::SetPESrc2Transpose((uint64_t)a3, v10);
  if ((*(unsigned int (**)(ZinCodegen *))(*(_QWORD *)this + 656))(this)
    && *(_QWORD *)((*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)this + 696))(this) + 64))
  {
    v11 = (*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)this + 696))(this);
    ZinAneTd<8u>::SetPESrc1Broadcast((uint64_t)a3, *(_QWORD *)(v11 + 64) + 16);
  }
  if ((*(unsigned int (**)(ZinCodegen *))(*(_QWORD *)this + 664))(this)
    && *(_QWORD *)((*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)this + 704))(this) + 64))
  {
    v12 = (*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)this + 704))(this);
    ZinAneTd<8u>::SetPESrc2Broadcast((uint64_t)a3, *(_QWORD *)(v12 + 64) + 16, 0);
  }
  v13 = *((_QWORD *)this + 57);
  if (v13)
  {
    ZinAneTd<8u>::SetPEIndexMode((uint64_t)a3, *(_DWORD *)(*(_QWORD *)(v13 + 64) + 12));
    ZinAneTd<8u>::SetPEIndexTranspose((uint64_t)a3, *((_QWORD *)this + 58) != 0);
    v14 = *((_QWORD *)this + 59);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 64);
      if (v15)
        ZinAneTd<8u>::SetPEIndexBroadcast((uint64_t)a3, v15 + 16);
    }
    ZinAneTd<8u>::SetPEMaxIndex((uint64_t)a3, *(_QWORD *)(*(_QWORD *)(v13 + 64) + 16));
  }
  ZinIrScaledEWInfo::ZinIrScaledEWInfo((uint64_t)&v36, 0, 0, 0, 1.0, 1.0, 0.0);
  v16 = *((_QWORD *)this + 60);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 64);
    *(_DWORD *)v37 = *(_DWORD *)(v17 + 8);
    v18 = *(_WORD *)(v17 + 28);
    *(_OWORD *)&v37[4] = *(_OWORD *)(v17 + 12);
    *(_WORD *)&v37[20] = v18;
    v19 = (*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)this + 568))(this);
  }
  else
  {
    v19 = 0;
  }
  ZinAneTd<8u>::SetPEBias((uint64_t)a3, *(float *)&v37[16]);
  ZinAneTd<8u>::SetPEScale((uint64_t)a3, *(float *)&v37[12]);
  ZinAneTd<8u>::SetPEPreScale((uint64_t)a3, *(float *)&v37[8]);
  if (!ZinAneTd<8u>::SetPEOperationMode((uint64_t)a3, *(int *)&v37[4]))
  {
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v36);
    return 0;
  }
  ZinAneTd<8u>::SetPEFirstSource((uint64_t)a3, v37[20] == 0);
  if (v37[21])
    v20 = 3;
  else
    v20 = 2;
  if (v19)
    v21 = v20;
  else
    v21 = 0;
  ZinAneTd<8u>::SetPESecondSource((uint64_t)a3, v21);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v36);
  if (!PECodegenUtils::HandlePECommonPostOps<8u>(a1, a3, this))
    return 0;
  (*(void (**)(uint64_t *__return_ptr, ZinCodegen *))(*(_QWORD *)this + 384))(&v36, this);
  ZinAneTd<8u>::SetOrReturnHout((uint64_t)a3, *(unint64_t *)&v37[8]);
  ZinAneTd<8u>::SetOrReturnWout((uint64_t)a3, *(unint64_t *)&v37[16]);
  ZinAneTd<8u>::SetOrReturnCout((uint64_t)a3, *(unint64_t *)v37);
  ZinAneTd<8u>::SetOrReturnDout((uint64_t)a3, v38);
  v22 = (uint64_t)a3 + 8;
  Win = ZinGetRegisterProgramming<8u>::GetWin(v22);
  Wout = ZinGetRegisterProgramming<8u>::GetWout(v22);
  Hin = ZinGetRegisterProgramming<8u>::GetHin(v22);
  Hout = ZinGetRegisterProgramming<8u>::GetHout(v22);
  Cin = ZinGetRegisterProgramming<8u>::GetCin(v22);
  Cout = ZinGetRegisterProgramming<8u>::GetCout(v22);
  Din = ZinGetRegisterProgramming<8u>::GetDin(v22);
  Dout = ZinGetRegisterProgramming<8u>::GetDout(v22);
  v33 = Win == Wout && Hin == Hout && Cin == Cout && Din == Dout;
  v34 = v33;
  if (!v33 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    PECodegenUtils::HandlePEElementWiseLayer<17u>();
  return v34;
}

void sub_206E3BBCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)va);
  _Unwind_Resume(a1);
}

uint64_t PECodegenUtils::HandlePEGOCLayer<8u>(uint64_t a1, uint64_t a2, ZinIrHalH13g *a3)
{
  const ZinANELayer *v6;
  uint64_t v7;
  unsigned int HWTaskType;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  int Win;
  int Wout;
  int Hin;
  int Hout;
  int Cin;
  int Cout;
  int Din;
  int Dout;
  BOOL v40;
  void *v42[5];
  void *__p;
  void *v44;
  uint64_t v45;

  __p = 0;
  v44 = 0;
  v45 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *(const void **)(a2 + 88), *(_QWORD *)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3);
  v7 = *(_QWORD *)(a2 + 440);
  if (v7)
  {
    HWTaskType = ZinCodegen::GetHWTaskType((ZinCodegen *)a2, v6);
    ZinAneTd<8u>::SetCommonTaskType((uint64_t)a3, HWTaskType);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 608))(a2);
    ZinAneTd<8u>::SetPESrc1ReLu((uint64_t)a3, v9);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 616))(a2);
    ZinAneTd<8u>::SetPESrc2ReLu((uint64_t)a3, v10);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 640))(a2);
    ZinAneTd<8u>::SetPESrc1Transpose((uint64_t)a3, v11);
    v12 = *(_QWORD *)(v7 + 64);
    ZinAneTd<8u>::SetPESrc2Transpose((uint64_t)a3, *(unsigned __int8 *)(v12 + 80));
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 656))(a2)
      && *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 696))(a2) + 64))
    {
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 696))(a2);
      ZinAneTd<8u>::SetPESrc1Broadcast((uint64_t)a3, *(_QWORD *)(v13 + 64) + 16);
    }
    if (*(_QWORD *)(v12 + 64))
      ZinAneTd<8u>::SetPESrc2Broadcast((uint64_t)a3, v12 + 40, 1);
    v14 = 0;
    v15 = *(_QWORD *)(a2 + 440);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 64);
      if (v16)
      {
        ZinAneTd<8u>::SetPEPreScale((uint64_t)a3, *(float *)(v16 + 12));
        ZinAneTd<8u>::SetPEFirstSource((uint64_t)a3, *(_BYTE *)(v16 + 16) == 0);
        if (*(_BYTE *)(v16 + 17))
          v17 = 3;
        else
          v17 = 2;
        ZinAneTd<8u>::SetPESecondSource((uint64_t)a3, v17);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 792))(a2) & 1) != 0)
        {
          v18 = 1;
        }
        else
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 800))(a2))
          {
LABEL_21:
            if (*(_BYTE *)(a1 + 1129))
              PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForActivationGOCOrGOCReLUAndQuantizationScale<8u>((uint64_t)a3, (ZinPELayer *)a2);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 680))(a2))
            {
              (*(void (**)(uint64_t))(*(_QWORD *)a2 + 776))(a2);
              ZinIrHalH13g::~ZinIrHalH13g(a3);
            }
            v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 408))(a2);
            ZinAneTd<8u>::SetPEOutputCtoW((uint64_t)a3, v28);
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 384))(v42, a2);
            ZinAneTd<8u>::SetOrReturnHout((uint64_t)a3, (unint64_t)v42[2]);
            ZinAneTd<8u>::SetOrReturnWout((uint64_t)a3, (unint64_t)v42[3]);
            ZinAneTd<8u>::SetOrReturnCout((uint64_t)a3, (unint64_t)v42[1]);
            ZinAneTd<8u>::SetOrReturnDout((uint64_t)a3, (unint64_t)v42[4]);
            v29 = (uint64_t)a3 + 8;
            Win = ZinGetRegisterProgramming<8u>::GetWin((uint64_t)a3 + 8);
            Wout = ZinGetRegisterProgramming<8u>::GetWout(v29);
            Hin = ZinGetRegisterProgramming<8u>::GetHin(v29);
            Hout = ZinGetRegisterProgramming<8u>::GetHout(v29);
            Cin = ZinGetRegisterProgramming<8u>::GetCin(v29);
            Cout = ZinGetRegisterProgramming<8u>::GetCout(v29);
            Din = ZinGetRegisterProgramming<8u>::GetDin(v29);
            Dout = ZinGetRegisterProgramming<8u>::GetDout(v29);
            v40 = Win == Wout && Hin == Hout && Cin == Cout && Din == Dout;
            v14 = v40;
            if (!v40 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              PECodegenUtils::HandlePEElementWiseLayer<17u>();
            goto LABEL_40;
          }
          v27 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 816))(a2) + 192) - 25;
          if (v27 >= 6)
            ZinAssertImpl("Error: Invalid non linear mode");
          v18 = dword_207AA1180[v27];
        }
        ZinAneTd<8u>::SetPECondition((uint64_t)a3, v18);
        goto LABEL_21;
      }
    }
  }
  else
  {
    v19 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v19)
      PECodegenUtils::HandlePEGOCLayer<8u>(v19, v20, v21, v22, v23, v24, v25, v26);
    v14 = 0;
  }
LABEL_40:
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_206E3BF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL PECodegenUtils::HandlePEPoolLayer<8u>(uint64_t a1, ZinCodegen *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  const ZinANELayer *v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int HWTaskType;
  int v13;
  unsigned int v14;
  int v15;
  _BOOL8 result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v6 = *(_QWORD *)(*((_QWORD *)a2 + 54) + 64);
  if (ZinAneTd<8u>::SetCommonConvCfgKw(a3, *(_QWORD *)(v6 + 16))
    && ZinAneTd<8u>::SetCommonConvCfgKh(a3, *(_QWORD *)(v6 + 24))
    && ZinAneTd<8u>::SetCommonConvCfgSx(a3, *(int *)(v6 + 40))
    && ZinAneTd<8u>::SetCommonConvCfgSy(a3, *(int *)(v6 + 44))
    && ZinAneTd<8u>::SetCommonConvCfgOx(a3, 1uLL)
    && ZinAneTd<8u>::SetCommonConvCfgOy(a3, 1uLL)
    && (*(_DWORD *)(a3 + 532) = *(_DWORD *)(a3 + 532) & 0xFFC1FFFF | ((*(_DWORD *)(v6 + 64) & 0x1F) << 17),
        CheckRegValueRange(*(int *)(v6 + 64), (unsigned int *)(*(_QWORD *)(a3 + 1296) + 104)))
    && (*(_DWORD *)(a3 + 532) = *(_DWORD *)(a3 + 532) & 0xF83FFFFF | ((*(_DWORD *)(v6 + 72) & 0x1F) << 22),
        CheckRegValueRange(*(int *)(v6 + 72), (unsigned int *)(*(_QWORD *)(a3 + 1296) + 96))))
  {
    if ((*(unsigned int (**)(ZinCodegen *))(*(_QWORD *)a2 + 608))(a2))
    {
      v7 = (*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)a2 + 608))(a2);
      ZinAneTd<8u>::SetPESrc1ReLu(a3, v7);
    }
    if ((*(unsigned int (**)(ZinCodegen *))(*(_QWORD *)a2 + 568))(a2))
    {
      v9 = (*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)a2 + 616))(a2);
      ZinAneTd<8u>::SetPESrc2ReLu(a3, v9);
      v10 = (*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)a2 + 648))(a2);
      ZinAneTd<8u>::SetPESrc2Transpose(a3, v10);
    }
    v11 = *(_QWORD *)(*((_QWORD *)a2 + 54) + 64);
    HWTaskType = ZinCodegen::GetHWTaskType(a2, v8);
    ZinAneTd<8u>::SetCommonTaskType(a3, HWTaskType);
    ZinAneTd<8u>::SetPEFirstSource(a3, 1);
    if (*(_BYTE *)(v11 + 116))
      ZinAneTd<8u>::SetPESecondSource(a3, 2);
    ZinAneTd<8u>::SetPEPreScale(a3, *(float *)(v11 + 112));
    v13 = *(_DWORD *)(v11 + 104);
    if (v13 == 2)
    {
      v14 = *(_DWORD *)(a3 + 996) & 0xFFFFFFFC | (*(_BYTE *)(v11 + 108) == 0);
      v15 = 1;
      goto LABEL_27;
    }
    if (v13 == 1)
    {
      if (*(_DWORD *)(v11 + 100) == 4)
      {
        v14 = *(_DWORD *)(a3 + 996) | 3;
        v15 = 4;
        goto LABEL_27;
      }
      v40 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v40)
        PECodegenUtils::HandlePEPoolLayer<8u>(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else if (v13)
    {
      v24 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v24)
        PECodegenUtils::HandlePEPoolLayer<8u>(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      if (*(_DWORD *)(v11 + 100) == 2)
      {
        v14 = *(_DWORD *)(a3 + 996) & 0xFFFFFFFC | 2;
        v15 = 2;
LABEL_27:
        *(_DWORD *)(a3 + 996) = v14;
        ZinAneTd<8u>::SetPaddingMode(a3, v15, 0);
        PECodegenUtils::HandlePECommonPostOps<8u>(a1, (ZinIrHalH13g *)a3, a2);
        return 1;
      }
      v32 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v32)
        PECodegenUtils::HandlePEPoolLayer<8u>(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      PECodegenUtils::HandlePEPoolLayer<8u>(result, v48, v49, v50, v51, v52, v53, v54);
      return 0;
    }
  }
  else
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      PECodegenUtils::HandlePEPoolLayer<8u>(result, v17, v18, v19, v20, v21, v22, v23);
      return 0;
    }
  }
  return result;
}

uint64_t PECodegenUtils::HandlePESecureFlushLayer<8u>(uint64_t a1, int a2)
{
  int8x16_t v4;
  uint64_t v5;

  *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFFFFF0F | 0x30;
  ZinAneTd<8u>::SetCommonSrc2InFmt(a1, 2);
  ZinAneTd<8u>::SetNEOcgSize(a1, 3);
  ZinAneTd<8u>::SetKernelDmaSrcKid(a1, 0);
  ZinAneTd<8u>::SetKernelDmaSrcNoReuseHint(a1, 0);
  ZinAneTd<8u>::SetL2Src1ChannelStride(a1, 0);
  ZinAneTd<8u>::SetL2Src1DepthStride(a1, 0);
  ZinAneTd<8u>::SetL2Src1GroupStride(a1, 0);
  *(_DWORD *)(a1 + 888) &= 0xFFE0000F;
  ZinAneTd<8u>::SetL2Src2ChannelStride(a1, 0);
  ZinAneTd<8u>::SetL2Src2DepthStride(a1, 0);
  ZinAneTd<8u>::SetL2Src2GroupStride(a1, 0);
  *(_DWORD *)(a1 + 908) &= 0xFFE0000F;
  ZinAneTd<8u>::SetKernelFmt(a1, 2);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)a1);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)a1);
  ZinAneTd<8u>::SetKernelMode(a1, 0);
  ZinAneTd<8u>::SetOpMode(a1, 0);
  ZinAneTd<8u>::SetNEPostScale(a1, 0, 1);
  *(_DWORD *)(a1 + 996) = *(_DWORD *)(a1 + 996) & 0xFFF3FFFF | 0x80000;
  ZinAneTd<8u>::SetPatchHeight(a1, 1uLL);
  ZinAneTd<8u>::SetTileDmaDstDepthStride(a1, 0);
  ZinAneTd<8u>::SetTileDmaDstGroupStride(a1, 0);
  ZinAneTd<8u>::SetTileDmaDstChannelStride(a1, 0);
  ZinAneTd<8u>::SetTileDmaDstRowStride(a1, 0);
  ZinAneTd<8u>::SetTileDmaSrc1CacheHint(a1, 1, 1, 1);
  ZinAneTd<8u>::SetTileDmaSrc2CacheHint(a1, 1, 1, 1);
  ZinAneTd<8u>::SetTileDmaSrc1DepthStride(a1, 0);
  ZinAneTd<8u>::SetTileDmaSrc1GroupStride(a1, 0);
  ZinAneTd<8u>::SetTileDmaSrc1ChannelStride(a1, 0);
  ZinAneTd<8u>::SetTileDmaSrc1RowStride(a1, 0);
  v4.i64[0] = 0x3F0000003FLL;
  v4.i64[1] = 0x3F0000003FLL;
  *(int8x16_t *)(a1 + 632) = vandq_s8(*(int8x16_t *)(a1 + 632), v4);
  *(_DWORD *)(a1 + 588) |= 1u;
  ZinAneTd<8u>::SetTileDmaSrc1Interleave(a1, 8u);
  *(_DWORD *)(a1 + 688) = *(_DWORD *)(a1 + 688) & 0xFFFFCFFF | 0x1000;
  ZinAneTd<8u>::SetTileDmaSrc2Interleave(a1, 8u);
  *(_DWORD *)(a1 + 692) = *(_DWORD *)(a1 + 692) & 0xFFFFCFFF | 0x1000;
  *(_DWORD *)(a1 + 1112) &= ~0x1000000u;
  *(_DWORD *)(a1 + 1168) = *(_DWORD *)(a1 + 1168) & 0xF0CFCFFF | 0x8100000;
  ZinAneTd<8u>::SetL2Src1Interleave(a1, 8u);
  ZinAneTd<8u>::SetL2Src1SourceType(a1, 2);
  ZinAneTd<8u>::SetL2Src2Interleave(a1, 8u);
  ZinAneTd<8u>::SetL2Src2SourceType(a1, 2);
  *(_DWORD *)(a1 + 920) = *(_DWORD *)(a1 + 920) & 0xFFFFFFFC | 1;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 18, 0);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 17, 0);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 22, 0);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 21, 0);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 16, 0);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 15, 0);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 20, 0);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 19, 0);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 42, 0);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 41, 0);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 44, 0);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 43, 0);
  if (a2 == 2)
  {
    ZinAneTd<8u>::SetOrReturnHin(a1, 4uLL);
    ZinAneTd<8u>::SetOrReturnWin(a1, 0x10uLL);
    ZinAneTd<8u>::SetOrReturnHout(a1, 4uLL);
    ZinAneTd<8u>::SetOrReturnWout(a1, 0x10uLL);
    ZinAneTd<8u>::SetPatchHeight(a1, 2uLL);
    ZinAneTd<8u>::SetTileHeight(a1, 4u);
    *(_DWORD *)(a1 + 920) = *(_DWORD *)(a1 + 920) & 0xFFFFF0F7 | 0x300;
    *(_DWORD *)(a1 + 932) = *(_DWORD *)(a1 + 932) & 0xFFE0000F | 0x10;
    ZinAneTd<8u>::SetL2Src1Interleave(a1, 3u);
    ZinAneTd<8u>::SetL2Src2Interleave(a1, 3u);
    *(_DWORD *)(a1 + 1168) = *(_DWORD *)(a1 + 1168) & 0xF0FFFFFF | 0x3000000;
    *(_DWORD *)(a1 + 1128) = *(_DWORD *)(a1 + 1128) & 0x3F | 0x40;
    ZinAneTd<8u>::SetTileDmaSrc1Interleave(a1, 3u);
    *(_DWORD *)(a1 + 688) &= 0xFFFFCFFF;
    *(_DWORD *)(a1 + 608) = *(_DWORD *)(a1 + 608) & 0x3F | 0x40;
    ZinAneTd<8u>::SetTileDmaSrc2Interleave(a1, 3u);
    *(_DWORD *)(a1 + 632) = *(_DWORD *)(a1 + 632) & 0x3F | 0x40;
    *(_DWORD *)(a1 + 692) &= 0xFFFFCFFF;
    return 1;
  }
  else if (a2 == 1)
  {
    v5 = 1;
    ZinAneTd<8u>::SetOrReturnHin(a1, 1uLL);
    ZinAneTd<8u>::SetOrReturnWin(a1, 0x10uLL);
    ZinAneTd<8u>::SetOrReturnHout(a1, 1uLL);
    ZinAneTd<8u>::SetOrReturnWout(a1, 0x10uLL);
    *(_DWORD *)(a1 + 920) &= 0xFFFFFFF4;
    ZinAneTd<8u>::SetL2Src1DmaFormat(a1, 3);
    ZinAneTd<8u>::SetL2Src2DmaFormat(a1, 3);
    *(_DWORD *)(a1 + 1112) &= ~1u;
    *(_DWORD *)(a1 + 1168) = *(_DWORD *)(a1 + 1168) & 0xF0EFFFFF | 0x1000000;
    *(_QWORD *)(a1 + 688) = *(_QWORD *)&vand_s8(*(int8x8_t *)(a1 + 688), (int8x8_t)vdup_n_s32(0xFFFFCFFC)) | 0x100000001;
  }
  else
  {
    v5 = 0;
    if (!a2)
    {
      ZinAneTd<8u>::SetCommonInFmt(a1, 3);
      ZinAneTd<8u>::SetCommonSrc2InFmt(a1, 3);
      *(_DWORD *)(a1 + 508) = *(_DWORD *)(a1 + 508) & 0xFFFFFFCF | 0x20;
      v5 = 1;
      ZinAneTd<8u>::SetOrReturnHin(a1, 1uLL);
      ZinAneTd<8u>::SetOrReturnWin(a1, 0x40uLL);
      ZinAneTd<8u>::SetOrReturnHout(a1, 1uLL);
      ZinAneTd<8u>::SetOrReturnWout(a1, 0x40uLL);
      ZinAneTd<8u>::SetTileDmaDstandL2DstFifoMode(a1, 0);
      ZinAneTd<8u>::SetTileDmaDstandL2DstInterleave(a1, 8u);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 18, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 17, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 22, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 21, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 16, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 15, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 20, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 19, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 42, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 41, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 44, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 43, 1);
      ZinAneTd<8u>::SetTileDmaSrc1Format(a1, 1, 0);
      ZinAneTd<8u>::SetTileDmaSrc2Format(a1, 1, 0);
      *(_DWORD *)(a1 + 1168) = *(_DWORD *)(a1 + 1168) & 0xFFFFCFFF | 0x1000;
    }
  }
  return v5;
}

BOOL PECodegenUtils::HandlePEIndexingBuffer<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  ZinIrSymbol *L2RdSymbol;
  ZinIrSymbol *v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t TileSrc;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;

  L2RdSymbol = (ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2RdSymbol(a3, 2);
  if (!L2RdSymbol)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ZinCodegen::SetPrimaryL2SourceBuffer<1u>(result, v20, v21, v22, v23, v24, v25, v26);
    return 0;
  }
  v9 = L2RdSymbol;
  if (ZinIrSymbol::GetMemType(L2RdSymbol) != 2)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ZinAneTd<17u>::HandleL2Config(result, v27, v28, v29, v30, v31, v32, v33);
    return 0;
  }
  v10 = *((_QWORD *)v9 + 2);
  v11 = *(_QWORD *)(a2 + 416);
  if (v10 % v11)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ZinCodegen::SetPrimaryL2SourceBuffer<1u>(result, v13, v14, v15, v16, v17, v18, v19);
    return 0;
  }
  ZinAneTd<8u>::SetL2Src2BaseAddress(*a4, v10 % *(_QWORD *)(a2 + 408) / v11);
  v34 = *a4;
  v35 = a3 + 120;
  TileSrc = ZinMirL2Config::GetTileSrc(v35, 2);
  ZinAneTd<8u>::SetL2Src2ChannelStride(v34, *(ZinCodegenUtil **)(TileSrc + 16));
  v37 = *a4;
  v38 = ZinMirL2Config::GetTileSrc(v35, 2);
  ZinAneTd<8u>::SetL2Src2GroupStride(v37, *(ZinCodegenUtil **)(v38 + 32));
  v39 = *a4;
  v40 = ZinMirL2Config::GetTileSrc(v35, 2);
  ZinAneTd<8u>::SetL2Src2RowStride(v39, (ZinCodegen *)(a1 + 48), *(ZinTensorDimensions **)(v40 + 8), v41, v42);
  v43 = *a4;
  v44 = ZinMirL2Config::GetTileSrc(v35, 2);
  ZinAneTd<8u>::SetL2Src2DepthStride(v43, *(ZinCodegenUtil **)(v44 + 24));
  return 1;
}

BOOL PECodegenUtils::HandlePECommonPostOps<8u>(uint64_t a1, ZinIrHalH13g *a2, ZinPELayer *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t OutputScale;
  uint64_t OutputBias;
  ZinDeQuantLayer *v11;
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  ZinQuantLayer *v16;
  int v17;
  _QWORD v18[5];

  (*(void (**)(_QWORD *__return_ptr, ZinPELayer *))(*(_QWORD *)a3 + 376))(v18, a3);
  if (((*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a3 + 792))(a3) & 1) != 0)
  {
    v6 = 1;
LABEL_6:
    ZinAneTd<8u>::SetPECondition((uint64_t)a2, v6);
    goto LABEL_7;
  }
  if ((*(unsigned int (**)(ZinPELayer *))(*(_QWORD *)a3 + 800))(a3))
  {
    v7 = *(_DWORD *)((*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a3 + 816))(a3) + 192) - 25;
    if (v7 >= 6)
      ZinAssertImpl("Error: Invalid non linear mode");
    v6 = dword_207AA1180[v7];
    goto LABEL_6;
  }
LABEL_7:
  if (*((_QWORD *)a3 + 63) && (CodegenReduction<8u>((uint64_t)a3, (uint64_t)v18, (uint64_t)a2) & 1) == 0)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      PECodegenUtils::HandlePECommonPostOps<17u>();
      return 0;
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 1129))
    {
      v8 = *((_QWORD *)a3 + 67);
      if (v8)
      {
        OutputScale = ZinPELayer::GetOutputScale(a3);
        OutputBias = ZinPELayer::GetOutputBias(a3);
        v11 = (ZinDeQuantLayer *)(*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a3 + 768))(a3);
        PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForAbsGOC<8u>((uint64_t)a2, v8, OutputScale, OutputBias, v11);
      }
      else
      {
        v13 = *((_QWORD *)a3 + 68);
        if (v13)
        {
          v14 = ZinPELayer::GetOutputScale(a3);
          v15 = ZinPELayer::GetOutputBias(a3);
          v16 = (ZinQuantLayer *)(*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a3 + 768))(a3);
          PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForZeroCompareGOC<8u>((uint64_t)a2, v13, v14, v15, v16);
        }
        else
        {
          PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForActivationGOCOrGOCReLUAndQuantizationScale<8u>((uint64_t)a2, a3);
        }
      }
    }
    if ((*(unsigned int (**)(ZinPELayer *))(*(_QWORD *)a3 + 680))(a3))
    {
      (*(void (**)(ZinPELayer *))(*(_QWORD *)a3 + 776))(a3);
      ZinIrHalH13g::~ZinIrHalH13g(a2);
    }
    v17 = (*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a3 + 408))(a3);
    ZinAneTd<8u>::SetPEOutputCtoW((uint64_t)a2, v17);
    return 1;
  }
  return result;
}

uint64_t CodegenReduction<8u>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  signed int v8;
  int OutputReductionFinalScaleValue;
  int OutputReductionEpsilonValue;
  uint64_t result;
  unsigned int v12;
  int v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 504) + 64);
  v7 = *(_DWORD *)(v6 + 12);
  v16 = 0;
  v8 = *(_DWORD *)(a1 + 528);
  OutputReductionFinalScaleValue = ZinPEElementWiseLayer::GetOutputReductionFinalScaleValue((ZinPEElementWiseLayer *)a1, (float *)&v16 + 1);
  OutputReductionEpsilonValue = ZinPEElementWiseLayer::GetOutputReductionEpsilonValue((ZinPEElementWiseLayer *)a1, (float *)&v16);
  result = 0;
  if (OutputReductionFinalScaleValue)
  {
    if (OutputReductionEpsilonValue)
    {
      v12 = *(_DWORD *)(a2 + 24) * *(_DWORD *)(a2 + 16) * *(_DWORD *)(a2 + 32);
      v13 = CodegenReductionMode<8u>(v7, a3);
      v14 = v13 & CodegenReductionPostProcess<8u>(v8, a3);
      v15 = CodegenReductionFinalScaleEpsilon<8u>(v7, v12, a3, *((float *)&v16 + 1), *(float *)&v16);
      LOBYTE(v12) = *(_DWORD *)(v6 + 40) == 1;
      result = v14 & v15 & CodegenReductionResult<8u>(v7, (_QWORD *)a2, a3);
      *(_DWORD *)(a3 + 996) = *(_DWORD *)(a3 + 996) & 0xFFFFF7FF | ((v12 & 1) << 11);
    }
  }
  return result;
}

float PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForAbsGOC<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ZinDeQuantLayer *a5)
{
  float v8;
  float v9;
  float v10;
  float v11;
  int v12;
  float v13;
  float result;

  if (*(_BYTE *)(a3 + 8))
    v8 = ZinIrVector::Unshift((ZinIrVector *)*(char *)(a3 + 4), *(float *)a3);
  else
    v8 = 1.0;
  if (*(_BYTE *)(a4 + 8))
    v9 = ZinIrVector::Unshift((ZinIrVector *)*(char *)(a4 + 4), *(float *)a4);
  else
    v9 = 0.0;
  v10 = 1.0;
  if (a5 && ZinQuantLayer::HasScale(a5))
    v10 = 1.0 / ZinDeQuantLayer::GetScalarScale(a5);
  v11 = v8 * v10;
  if ((float)(v8 * v10) <= 0.0)
    v12 = -8388608;
  else
    v12 = 2139095040;
  v13 = 0.0;
  if ((float)(v8 * v10) != 0.0 && v9 != 0.0)
    v13 = v9 * v11;
  *(_DWORD *)(a1 + 996) |= 0x20u;
  *(_DWORD *)(a1 + 1032) = 2139095040;
  *(float *)(a1 + 1044) = v11;
  *(float *)(a1 + 1048) = v13;
  *(_QWORD *)(a1 + 1020) = 0x7F800000FF800000;
  *(_DWORD *)(a1 + 1028) = v12;
  result = -(float)(v8 * v10);
  *(float *)(a1 + 1036) = result;
  *(float *)(a1 + 1040) = v13;
  return result;
}

void PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForZeroCompareGOC<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ZinQuantLayer *a5)
{
  float v9;
  float v10;
  float v11;
  float v12;
  unsigned int v13;
  float v14;
  float v15;
  int v17;
  int v18;
  float v19;
  float v20;
  float v21;
  _BOOL4 v23;
  _BOOL4 v24;
  float v25;
  float v26;
  float v27;
  BOOL v28;
  float v29;

  if (*(_BYTE *)(a3 + 8))
    v9 = ZinIrVector::Unshift((ZinIrVector *)*(char *)(a3 + 4), *(float *)a3);
  else
    v9 = 1.0;
  if (*(_BYTE *)(a4 + 8))
    v10 = ZinIrVector::Unshift((ZinIrVector *)*(char *)(a4 + 4), *(float *)a4);
  else
    v10 = 0.0;
  v11 = 1.0;
  v12 = 1.0;
  if (a5)
  {
    v13 = ZinQuantLayer::HasScale(a5);
    v12 = 1.0;
    if (v13)
      v12 = 1.0 / ZinDeQuantLayer::GetScalarScale(a5);
  }
  v14 = v9 * v12;
  v15 = 0.0;
  if (v14 != 0.0 && v10 != 0.0)
    v15 = v10 * v14;
  v17 = 2;
  v18 = 1;
  switch(*(_DWORD *)(a2 + 192))
  {
    case 0x19:
      goto LABEL_22;
    case 0x1A:
      goto LABEL_21;
    case 0x1B:
      v17 = 3;
      goto LABEL_21;
    case 0x1C:
      v18 = 4;
      goto LABEL_22;
    case 0x1D:
      v18 = 5;
      goto LABEL_22;
    case 0x1E:
      v17 = 6;
      goto LABEL_21;
    default:
      v17 = 0;
LABEL_21:
      v11 = 0.0;
      v18 = v17;
LABEL_22:
      v19 = 0.0;
      v20 = 1.0;
      if ((v18 - 2) >= 3)
        v21 = 0.0;
      else
        v21 = 1.0;
      if ((v18 - 5) >= 2 && v18 != 2)
        v20 = 0.0;
      v23 = v20 == 0.0;
      v24 = v21 == 0.0;
      *(_DWORD *)(a1 + 996) |= 0x20u;
      if (v14 == 0.0)
        v23 = 1;
      v25 = v20 * v14;
      if (v14 == 0.0)
        v24 = 1;
      if (v23)
        v25 = 0.0;
      *(float *)(a1 + 1032) = v15 + v25;
      *(_QWORD *)(a1 + 1020) = 0x33800000B3800000;
      v26 = v21 * v14;
      if (v24)
        v26 = 0.0;
      *(float *)(a1 + 1028) = v15 + v26;
      *(float *)(a1 + 1036) = v15;
      *(float *)(a1 + 1044) = v15;
      if (v11 == 0.0)
      {
        *(_DWORD *)(a1 + 1040) = 0;
      }
      else
      {
        v27 = v11 * v14;
        v28 = v14 == 0.0;
        if (v14 == 0.0)
          v29 = 0.0;
        else
          v29 = v11 * v14;
        *(float *)(a1 + 1040) = v29;
        if (!v28)
          v19 = v27;
      }
      *(float *)(a1 + 1048) = v19;
      return;
  }
}

void PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForActivationGOCOrGOCReLUAndQuantizationScale<8u>(uint64_t a1, ZinPELayer *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t OutputScale;
  uint64_t OutputBias;
  PiecewiseLinearFunctionParams *v8;
  BOOL v9;
  BOOL v10;
  _BOOL4 v11;
  _BOOL4 v12;
  float v13;
  float v14;
  float v15;
  int v16;
  int v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  int v24;
  float v25;
  float v26;
  _BOOL4 v27;
  _BOOL4 v28;
  float v29;
  float v30;
  float v31;
  float v32;
  BOOL v33;
  float v34;
  float v35;
  float v36;
  float v37;
  _BOOL4 v38;
  _BOOL4 v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  _BOOL4 v45;
  _BOOL4 v46;
  float v47;
  float v48;
  float v49;
  float v50;
  _BOOL4 v51;
  float v52;
  _BOOL4 v53;
  float v54;
  float v55;
  float v56;
  float v57;
  _BOOL4 v58;
  _BOOL4 v59;
  float v60;
  float v61;
  BOOL v62;
  BOOL v63;
  int v64;
  int v65;
  float v66;
  int v67;
  int v68;
  float v69;
  float v70;
  float v71;
  float *v72;
  float *v73;
  uint64_t v74;
  float v75;
  float v76;
  float *v77;
  uint64_t v78;
  float v79;
  float v80;
  float v81;
  float *v82;
  uint64_t v83;
  int v84;
  float v85;
  float v86;
  float v87;
  float v88;

  if (((*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a2 + 680))(a2) & 1) != 0
    || ZinPELayer::HasOutputScaleOrBias(a2)
    || (*(unsigned int (**)(ZinPELayer *))(*(_QWORD *)a2 + 672))(a2))
  {
    v4 = (*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a2 + 776))(a2);
    v5 = (*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a2 + 784))(a2);
    OutputScale = ZinPELayer::GetOutputScale(a2);
    OutputBias = ZinPELayer::GetOutputBias(a2);
    v8 = (PiecewiseLinearFunctionParams *)(*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a2 + 768))(a2);
    PiecewiseLinearFunctionParams::PiecewiseLinearFunctionParams((uint64_t)&v85, v4, OutputScale, OutputBias, v5, v8);
    if (*(_BYTE *)(OutputScale + 8)
      || (!v8 ? (v9 = *(_BYTE *)(OutputBias + 8) == 0) : (v9 = 0), v9 ? (v10 = v5 == 0) : (v10 = 0), !v10))
    {
      v11 = v87 == 0.0;
      v12 = v88 == 0.0;
      v13 = v86;
      if (v85 == 0.0)
        v11 = 1;
      v14 = v87 * v85;
      if (v85 == 0.0)
        v12 = 1;
      v15 = v85 * v88;
      if (v11)
        v14 = 0.0;
      if (v12)
        v15 = 0.0;
      *(_DWORD *)(a1 + 996) |= 0x20u;
      *(_QWORD *)(a1 + 1020) = 0x7F800000FF800000;
      if (v14 <= 0.0)
        v16 = 2139095040;
      else
        v16 = -8388608;
      *(_DWORD *)(a1 + 1028) = v16;
      if (v14 <= 0.0)
        v17 = -8388608;
      else
        v17 = 2139095040;
      *(_DWORD *)(a1 + 1032) = v17;
      *(float *)(a1 + 1036) = v14;
      v18 = v13 + v15;
      *(float *)(a1 + 1040) = v18;
      *(float *)(a1 + 1044) = v14;
      *(float *)(a1 + 1048) = v18;
    }
    v19 = v5 ? v5 : v4;
    if (v19)
    {
      switch(*(_DWORD *)(v19 + 192))
      {
        case 1:
          *(_DWORD *)(a1 + 996) |= 0x20u;
          v21 = v87;
          v20 = v88;
          v22 = (float)-v88 / v87;
          *(float *)(a1 + 1020) = v22;
          v23 = v86;
          *(float *)(a1 + 1028) = v86;
          *(_DWORD *)(a1 + 1024) = 2139095040;
          if (v21 <= 0.0)
            v24 = -8388608;
          else
            v24 = 2139095040;
          *(_DWORD *)(a1 + 1032) = v24;
          v25 = v23;
          if (v21 <= 0.0)
          {
            *(_DWORD *)(a1 + 1020) = -8388608;
            *(_DWORD *)(a1 + 1028) = 2139095040;
            *(float *)(a1 + 1024) = v22;
            *(float *)(a1 + 1032) = v23;
          }
          v26 = v85;
          v27 = v21 == 0.0;
          v28 = v20 == 0.0;
          if (v85 == 0.0)
            v27 = 1;
          v29 = v21 * v85;
          if (v85 == 0.0)
            v28 = 1;
          if (v27)
            v30 = 0.0;
          else
            v30 = v29;
          *(float *)(a1 + 1044) = v30;
          v31 = v20 * v26;
          if (v28)
            v31 = 0.0;
          *(float *)(a1 + 1048) = v31 + v25;
          if (v29 == 0.0)
            v32 = 0.0;
          else
            v32 = v29;
          *(float *)(a1 + 1036) = ZinF32ToNearestF19(v32);
          v33 = v85 == 0.0 || v88 == 0.0;
          v34 = v88 * v85;
          if (v33)
            v34 = 0.0;
          *(float *)(a1 + 1040) = v86 + v34;
          return;
        case 5:
          *(_DWORD *)(a1 + 996) |= 0x20u;
          *(float *)(a1 + 1020) = (float)(-2.5 - v88) / v87;
          *(float *)(a1 + 1028) = ZinF32ToNearestF19(0.0);
          *(float *)(a1 + 1024) = (float)(2.5 - v88) / v87;
          *(float *)(a1 + 1032) = ZinF32ToNearestF19(v85 + v86);
          v51 = v87 == 0.0;
          v52 = (float)(v88 * 0.2) + 0.5;
          v53 = v52 == 0.0;
          v54 = v86;
          if (v85 == 0.0)
            v51 = 1;
          v48 = (float)(v87 * v85) * 0.2;
          if (v85 == 0.0)
            v53 = 1;
          if (v51)
            v48 = 0.0;
          v55 = v85 * v52;
          if (v53)
            v55 = 0.0;
          *(float *)(a1 + 1036) = v48;
          v50 = v54 + v55;
          goto LABEL_81;
        case 7:
          *(_DWORD *)(a1 + 996) |= 0x20u;
          v35 = *(float *)(v19 + 204);
          v36 = *(float *)(v19 + 208);
          v37 = (float)(v35 - v88) / v87;
          v38 = v35 == 0.0;
          v39 = v36 == 0.0;
          if (v85 == 0.0)
            v38 = 1;
          v40 = v35 * v85;
          if (v85 == 0.0)
            v39 = 1;
          if (v38)
            v41 = 0.0;
          else
            v41 = v40;
          if (v39)
            v42 = 0.0;
          else
            v42 = v36 * v85;
          v43 = v86 + v41;
          v44 = v86 + v42;
          *(float *)(a1 + 1024) = ZinF32ToNearestF19((float)(v36 - v88) / v87);
          *(float *)(a1 + 1020) = ZinF32ToNearestF19(v37);
          *(float *)(a1 + 1032) = ZinF32ToNearestF19(v44);
          *(float *)(a1 + 1028) = ZinF32ToNearestF19(v43);
          v45 = v87 == 0.0;
          v46 = v88 == 0.0;
          v47 = v86;
          v48 = v87 * v85;
          v49 = v85 * v88;
          if (v85 == 0.0)
          {
            v45 = 1;
            v46 = 1;
          }
          if (v45)
            v48 = 0.0;
          if (v46)
            v49 = 0.0;
          *(float *)(a1 + 1036) = v48;
          v50 = v47 + v49;
LABEL_81:
          *(float *)(a1 + 1040) = v50;
          *(float *)(a1 + 1044) = v48;
          *(float *)(a1 + 1048) = v50;
          return;
        case 8:
          *(_DWORD *)(a1 + 996) |= 0x20u;
          *(_QWORD *)(a1 + 1020) = 0x7F800000FF800000;
          v57 = v87;
          v56 = v88;
          v58 = v87 == 0.0;
          v59 = v88 == 0.0;
          v61 = v85;
          v60 = v86;
          v62 = v85 == 0.0;
          v63 = v85 <= 0.0;
          if (v85 <= 0.0)
            v64 = 2139095040;
          else
            v64 = -8388608;
          *(_DWORD *)(a1 + 1028) = v64;
          if (v63)
            v65 = -8388608;
          else
            v65 = 2139095040;
          *(_DWORD *)(a1 + 1032) = v65;
          v66 = *(float *)(v19 + 216);
          v67 = v62 || v58;
          v68 = v62 || v59;
          v69 = 0.0;
          if (v67)
            v70 = 0.0;
          else
            v70 = v61 * v57;
          *(float *)(a1 + 1044) = v70;
          v71 = v61 * v56;
          if (v68)
            v71 = 0.0;
          *(float *)(a1 + 1048) = v60 + v71;
          v72 = (float *)operator new(0xCuLL);
          v73 = v72;
          v74 = 0;
          *v72 = v57;
          v72[1] = v61;
          v72[2] = v66;
          break;
        default:
          ZinAssertImpl("Unexpected activation function!!!");
      }
      while (v72[v74] != 0.0)
      {
        if (++v74 == 3)
        {
          v69 = v66 * (float)(v61 * v57);
          break;
        }
      }
      *(float *)(a1 + 1036) = ZinF32ToNearestF19(v69);
      operator delete(v73);
      v75 = v88;
      v76 = v85;
      v77 = (float *)operator new(0xCuLL);
      v78 = 0;
      *v77 = v75;
      v77[1] = v66;
      v77[2] = v76;
      while (v77[v78] != 0.0)
      {
        if (++v78 == 3)
        {
          v79 = (float)(v66 * v75) * v76;
          goto LABEL_108;
        }
      }
      v79 = 0.0;
LABEL_108:
      *(float *)(a1 + 1040) = v79 + v86;
      operator delete(v77);
      v80 = v87;
      v81 = v85;
      v82 = (float *)operator new(0xCuLL);
      v83 = 0;
      *v82 = v80;
      v82[1] = v81;
      v82[2] = v66;
      do
      {
        if (v82[v83] == 0.0)
        {
          v84 = 2139095040;
          goto LABEL_115;
        }
        ++v83;
      }
      while (v83 != 3);
      if ((float)(v66 * (float)(v80 * v81)) <= 0.0)
        v84 = 2139095040;
      else
        v84 = -8388608;
LABEL_115:
      *(_DWORD *)(a1 + 1028) = v84;
      operator delete(v82);
    }
  }
}

void sub_206E3D674(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t CodegenReductionMode<8u>(int a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v6;
  _QWORD **v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  _QWORD *v14[2];
  _OWORD v15[3];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v15[0] = xmmword_207AA1114;
  v15[1] = *(_OWORD *)algn_207AA1124;
  v15[2] = xmmword_207AA1134;
  std::map<ZinIrReductionType,BOOL CodegenReductionMode<8u>(ZinIrReductionType,ZinAneTd<8u> *)::ModeInfo,std::less<ZinIrReductionType>,std::allocator<std::pair<ZinIrReductionType const,BOOL CodegenReductionMode<8u>(ZinIrReductionType,ZinAneTd<8u> *)::ModeInfo>>>::map[abi:ne180100]((uint64_t)&v13, (int *)v15, 4);
  LODWORD(v15[0]) = 5;
  *(_QWORD *)((char *)v15 + 4) = 0x200000002;
  std::__tree<std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>,std::__map_value_compare<ZinIrReductionType,std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>,std::less<ZinIrReductionType>,true>,std::allocator<std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>>>::__emplace_unique_key_args<ZinIrReductionType,std::pair<ZinIrReductionType const,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>>(&v13, (int *)v15, (uint64_t)v15);
  LODWORD(v15[0]) = 4;
  *(_QWORD *)((char *)v15 + 4) = 0x400000003;
  std::__tree<std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>,std::__map_value_compare<ZinIrReductionType,std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>,std::less<ZinIrReductionType>,true>,std::allocator<std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>>>::__emplace_unique_key_args<ZinIrReductionType,std::pair<ZinIrReductionType const,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>>(&v13, (int *)v15, (uint64_t)v15);
  v4 = v14[0];
  if (!v14[0])
    goto LABEL_19;
  v5 = v14;
  do
  {
    v6 = v4;
    v7 = v5;
    v8 = *((_DWORD *)v4 + 7);
    if (v8 >= a1)
      v5 = (_QWORD **)v4;
    else
      ++v4;
    v4 = (_QWORD *)*v4;
  }
  while (v4);
  if (v5 != v14 && (v8 >= a1 ? (v9 = v6) : (v9 = v7), *((_DWORD *)v9 + 7) <= a1))
  {
    v12 = *((_DWORD *)v5 + 9);
    *(_DWORD *)(a2 + 996) = *(_DWORD *)(a2 + 996) & 0xFFFFFFFC | (_DWORD)v5[4] & 3;
    ZinAneTd<8u>::SetPaddingMode(a2, v12, 0);
    v10 = 1;
  }
  else
  {
LABEL_19:
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      CodegenReductionMode<17u>(a1);
    v10 = 0;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v13, v14[0]);
  return v10;
}

void sub_206E3D7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

BOOL CodegenReductionPostProcess<8u>(signed int a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v6;
  _QWORD **v7;
  signed int v8;
  _QWORD *v9;
  uint64_t v10;
  _BOOL8 v11;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15[2];
  char v16[16];
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v17 = xmmword_207AA1144;
  v18 = 0x200000010;
  std::map<ZinIrNonLinearMode,unsigned int>::map[abi:ne180100]((uint64_t)&v14, (int *)&v17, 3);
  *(_QWORD *)&v17 = 0x30000000FLL;
  std::__tree<std::__value_type<ZinIrNonLinearMode,unsigned int>,std::__map_value_compare<ZinIrNonLinearMode,std::__value_type<ZinIrNonLinearMode,unsigned int>,std::less<ZinIrNonLinearMode>,true>,std::allocator<std::__value_type<ZinIrNonLinearMode,unsigned int>>>::__emplace_unique_key_args<ZinIrNonLinearMode,std::pair<ZinIrNonLinearMode const,unsigned int>>(&v14, (int *)&v17, (uint64_t *)&v17);
  v4 = v15[0];
  if (!v15[0])
    goto LABEL_19;
  v5 = v15;
  do
  {
    v6 = v4;
    v7 = v5;
    v8 = *((_DWORD *)v4 + 7);
    if (v8 >= a1)
      v5 = (_QWORD **)v4;
    else
      ++v4;
    v4 = (_QWORD *)*v4;
  }
  while (v4);
  if (v5 != v15 && (v8 >= a1 ? (v9 = v6) : (v9 = v7), *((_DWORD *)v9 + 7) <= a1))
  {
    v13 = *((unsigned int *)v5 + 8);
    *(_DWORD *)(a2 + 996) = *(_DWORD *)(a2 + 996) & 0xFFFFCFFF | (((_DWORD)v5[4] & 3) << 12);
    v11 = CheckRegValueRange(v13, (unsigned int *)(*(_QWORD *)(a2 + 1296) + 608));
  }
  else
  {
LABEL_19:
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      ZinIrEnumToStringUtil::NonLinearModeToString(a1, &v17);
      CodegenReductionPostProcess<17u>((char *)&v17, (uint64_t)v16, v10);
    }
    v11 = 0;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v14, v15[0]);
  return v11;
}

void sub_206E3D990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

BOOL CodegenReductionFinalScaleEpsilon<8u>(int a1, unsigned int a2, uint64_t a3, float a4, float a5)
{
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 == 3)
    a4 = (float)(1.0 / (float)a2) * a4;
  if (a4 == 0.0 || (LODWORD(a4) & 0x7F800000) == 0)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      CodegenReductionFinalScaleEpsilon<8u>(result, v8, v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  else
  {
    ZinAneTd<8u>::SetPEFinalScale(a3, a4);
    *(float *)(a3 + 1008) = ZinF32ToNearestF19(a5);
    return 1;
  }
  return result;
}

uint64_t CodegenReductionResult<8u>(int a1, _QWORD *a2, uint64_t a3)
{
  _BOOL8 ReductionResultIndexGlobal;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;

  if ((a1 & 0xFFFFFFFE) != 4)
    return 1;
  v14 = 0;
  ReductionResultIndexGlobal = GetReductionResultIndexGlobalArg<8u>(a2, &v14);
  if (ReductionResultIndexGlobal)
  {
    *(_DWORD *)(a3 + 996) = *(_DWORD *)(a3 + 996) & 0xFFFFF9FF | ((v14 & 3) << 9);
  }
  else
  {
    v5 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v5)
      CodegenReductionResult<8u>(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  return ReductionResultIndexGlobal;
}

uint64_t std::map<ZinIrReductionType,BOOL CodegenReductionMode<8u>(ZinIrReductionType,ZinAneTd<8u> *)::ModeInfo,std::less<ZinIrReductionType>,std::allocator<std::pair<ZinIrReductionType const,BOOL CodegenReductionMode<8u>(ZinIrReductionType,ZinAneTd<8u> *)::ModeInfo>>>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 12 * a3;
    do
    {
      std::__tree<std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>,std::__map_value_compare<ZinIrReductionType,std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>,std::less<ZinIrReductionType>,true>,std::allocator<std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>>>::__emplace_hint_unique_key_args<ZinIrReductionType,std::pair<ZinIrReductionType const,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 12;
    }
    while (v6);
  }
  return a1;
}

void sub_206E3DB40(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL GetReductionResultIndexGlobalArg<8u>(_QWORD *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = a1[2];
  v2 = a1[3];
  if (v3 <= 1)
    v4 = v2 > 1;
  else
    v4 = (v2 > 1) + 1;
  v5 = a1[4];
  if (v5 > 1)
    ++v4;
  if (v4 >= 2)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      GetReductionResultIndexGlobalArg<8u>(result, v7, v8, v9, v10, v11, v12, v13);
      return 0;
    }
    return result;
  }
  if (v3 >= 2)
  {
    v14 = 2;
LABEL_14:
    *a2 = v14;
    return 1;
  }
  if (v5 > 1)
  {
    v14 = 3;
    goto LABEL_14;
  }
  if (v2 < 1)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      GetReductionResultIndexGlobalArg<8u>(result, v15, v16, v17, v18, v19, v20, v21);
      return 0;
    }
  }
  else
  {
    result = 1;
    *a2 = 1;
  }
  return result;
}

void PECodegenUtils::HandlePECommonPostOps<8u>(uint64_t a1, ZinIrHalH13g *a2, ZinPELayer *a3)
{
  int v6;
  unsigned int v7;
  ZinQuantLayer *v8;

  if (((*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a3 + 792))(a3) & 1) != 0)
  {
    v6 = 1;
LABEL_6:
    ZinAneTd<8u>::SetPECondition((uint64_t)a2, v6);
    goto LABEL_7;
  }
  if ((*(unsigned int (**)(ZinPELayer *))(*(_QWORD *)a3 + 800))(a3))
  {
    v7 = *(_DWORD *)((*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a3 + 816))(a3) + 192) - 25;
    if (v7 >= 6)
      ZinAssertImpl("Error: Invalid non linear mode");
    v6 = dword_207AA1180[v7];
    goto LABEL_6;
  }
LABEL_7:
  if (!*(_BYTE *)(a1 + 1584))
  {
    if ((*(unsigned int (**)(ZinPELayer *))(*(_QWORD *)a3 + 672))(a3))
    {
      v8 = (ZinQuantLayer *)(*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a3 + 768))(a3);
      if (ZinQuantLayer::HasZeroPoint(v8))
        ZinAssertImpl("Unexpected quantization zero_point\n");
    }
  }
  if (*(_BYTE *)(a1 + 1129))
    PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForActivationGOCOrGOCReLUAndQuantizationScale<8u>((uint64_t)a2, a3);
  if ((*(unsigned int (**)(ZinPELayer *))(*(_QWORD *)a3 + 680))(a3))
  {
    (*(void (**)(ZinPELayer *))(*(_QWORD *)a3 + 776))(a3);
    ZinIrHalH13g::~ZinIrHalH13g(a2);
  }
}

BOOL ZinAneTd<8u>::ValidateOCGSizes(_DWORD *a1, uint64_t a2, int *a3)
{
  unsigned int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64x2_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int NESmallSourceMode;
  __int16 v48;

  v5 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 8) - 85;
  v6 = v5 > 5;
  v7 = (1 << v5) & 0x31;
  v8 = v6 || v7 == 0;
  if (v8 && !*(_QWORD *)(a2 + 384))
    return 1;
  v9 = a1[132] & 7;
  v10 = a1[133];
  v11 = (v10 >> 28) & 3;
  v12 = v10 >> 30;
  v13 = a1[134];
  v14 = (v13 >> 13) & 3;
  if ((a1[139] & 0xC) == 4)
  {
    switch((_DWORD)v11 * (_DWORD)v12 * (_DWORD)v14)
    {
      case 1:
        if (v9 < 6)
          goto LABEL_56;
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (result)
          goto LABEL_62;
        break;
      case 2:
        if (v9 < 5)
          goto LABEL_56;
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (result)
          goto LABEL_62;
        break;
      case 4:
        if (v9 < 4)
          goto LABEL_56;
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (result)
          goto LABEL_62;
        break;
      case 8:
        if (v9 < 3)
          goto LABEL_56;
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (result)
          goto LABEL_62;
        break;
      default:
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (result)
          goto LABEL_51;
        break;
    }
  }
  else
  {
    v23 = a1[127] & 3;
    if (v23 > 1)
    {
      if (v23 == 2)
      {
        switch((_DWORD)v11 * (_DWORD)v12 * (_DWORD)v14)
        {
          case 1:
            if (v9 < 5)
              goto LABEL_56;
            result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (result)
              goto LABEL_62;
            break;
          case 2:
            if (v9 < 4)
              goto LABEL_56;
            result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (result)
              goto LABEL_62;
            break;
          case 4:
            if (v9 < 3)
              goto LABEL_56;
            result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (result)
              goto LABEL_62;
            break;
          case 8:
            if (v9 >= 2)
            {
              result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (result)
              {
LABEL_62:
                ZinAneTd<17u>::ValidateOCGSizes(result, v16, v17, v18, v19, v20, v21, v22);
                return 0;
              }
            }
            else
            {
LABEL_56:
              v39 = v13 & 0x1F;
              if ((a1[134] & 0x1Fu) < 2)
                return 1;
              v41.i64[1] = 1 << v9;
              NESmallSourceMode = ZinAneTd<8u>::GetNESmallSourceMode((uint64_t)a1);
              v48 = 0;
              v40 = a1[134] >> 6;
              v41.i64[0] = v39;
              v43 = v40;
              v44 = v11;
              v45 = v12;
              v46 = v14;
              if ((a1[127] & 3) == 3)
                ZinAssertImpl("Error: Invalid tensor format", *(_OWORD *)&v41);
              v42 = dword_207AA1198[a1[127] & 3];
              result = ZinMirConvUtils::Validate3DConvProgrammingConstraints(&v41, a3) == 0;
            }
            break;
          default:
            result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (result)
            {
LABEL_51:
              ZinAneTd<17u>::ValidateOCGSizes(result, v32, v33, v34, v35, v36, v37, v38);
              return 0;
            }
            break;
        }
      }
      else
      {
        v24 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v24)
          ZinAneTd<8u>::ValidateOCGSizes(v24, v25, v26, v27, v28, v29, v30, v31);
        return 0;
      }
    }
    else
    {
      switch((_DWORD)v11 * (_DWORD)v12 * (_DWORD)v14)
      {
        case 1:
          if (v9 < 4)
            goto LABEL_56;
          result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (result)
            goto LABEL_62;
          break;
        case 2:
          if (v9 < 3)
            goto LABEL_56;
          result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (result)
            goto LABEL_62;
          break;
        case 4:
          if (v9 < 2)
            goto LABEL_56;
          result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (result)
            goto LABEL_62;
          break;
        case 8:
          if (!v9)
            goto LABEL_56;
          result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (result)
            goto LABEL_62;
          break;
        default:
          result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (result)
            goto LABEL_51;
          break;
      }
    }
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetDPE(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;
  int v3;
  int v4;
  BOOL v5;
  int v6;

  v2 = (*(_BYTE *)(a1 + 508) & 0x22) == 0 && (*(_BYTE *)(a1 + 1060) & 2) == 0;
  if (*(_BYTE *)(*(_QWORD *)(a2 + 264) + 1504))
  {
    v3 = 7;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 1064);
    if ((v4 & 7) != 0)
    {
      if (v2)
        v3 = 5;
      else
        v3 = 2;
      if ((*(_DWORD *)(a1 + 1064) & 7u) >= 3)
        v3 = 0;
    }
    else
    {
      v5 = !v2;
      if (v2)
        v3 = 3;
      else
        v3 = 0;
      if (v5)
        v6 = 1;
      else
        v6 = 4;
      if ((v4 & 8) != 0)
        v3 = v6;
    }
  }
  *(_DWORD *)(a1 + 564) = *(_DWORD *)(a1 + 564) & 0xFFFFFFF0 | v3;
  return 1;
}

void ZinAneTd<8u>::CreateSeedRelocations(ZinANELayer const*,ZinIrCompilerParameters const&,BarIdsForCodegen const&)::{lambda(unsigned int,unsigned short)#1}::operator()(uint64_t **a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  __int16 v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  v4 = *a1;
  v5 = a2 >> 2;
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_207AF6795);
  ZinAneRelocInfo::ZinAneRelocInfo(&v12, __p, v5, a3, 0, 0, 1, 0);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v4[159];
  if (v6 >= v4[160])
  {
    v9 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(v4 + 158, (uint64_t)&v12);
  }
  else
  {
    *(_WORD *)v6 = v12;
    v7 = (std::string *)(v6 + 8);
    if (SHIBYTE(v14) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v13, *((std::string::size_type *)&v13 + 1));
    }
    else
    {
      v8 = v13;
      *(_QWORD *)(v6 + 24) = v14;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *(_DWORD *)(v6 + 32) = v15;
    v9 = v6 + 40;
    v4[159] = v6 + 40;
  }
  v4[159] = v9;
  if (SHIBYTE(v14) < 0)
    operator delete((void *)v13);
}

void sub_206E3E294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v22 + 1272) = v21;
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AdjustTaskSizeForRdar107730882<8u>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = *(_QWORD **)(a1 + 200);
  v5 = 4 * (*(unsigned int (**)(_QWORD *, uint64_t))(*v4 + 24))(v4, 25);
  v6 = *(unsigned int *)(a1 + 184) + v5;
  result = ZinAlignPower2(v6, *(_QWORD *)(a2 + 504));
  if ((result & 0x3F) == 0)
  {
    if ((unint64_t)(result - v6) >= 8)
      v8 = 16 * ((unint64_t)(result - v6) < 0x10);
    else
      v8 = 8;
    result = (*(uint64_t (**)(_QWORD *, uint64_t, unint64_t))(*v4 + 32))(v4, 25, (unint64_t)(v8 + v5) >> 2);
    v4[164] = v8;
  }
  return result;
}

void CollectSegmentStats<8u>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  char v50;
  __int16 v51;
  char v52;
  int v53;
  unsigned int v54;
  void *__p;
  char *v56;
  char *v57;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v47 = 0uLL;
  v48 = 0;
  v49 = xmmword_207A7FF30;
  v50 = 0;
  v53 = 0;
  v54 = 0;
  v56 = 0;
  v57 = 0;
  __p = 0;
  v7 = ZinAlignPower2(2, *(_QWORD *)(a1 + 504));
  v8 = *(_QWORD *)(a2 + 8);
  if (v8 != a2)
  {
    v44 = 0;
    v9 = 0;
    v42 = v7;
    v43 = v7 >> 2;
    do
    {
      v46 = *(_QWORD *)(v8 + 16);
      v10 = *(_QWORD *)(v46 + 200);
      v11 = *(unsigned __int16 *)(v10 + 8);
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &v46))ZinAssertImpl("Incorrect internal state: collect segment stats");
      v12 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &v46);
      v13 = v12;
      if (!v12)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v14 = v56;
      if (v56 >= v57)
      {
        v16 = (v56 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v17 = (v57 - (_BYTE *)__p) >> 2;
        if (v17 <= v16 + 1)
          v17 = v16 + 1;
        if ((unint64_t)(v57 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v57, v18);
        else
          v19 = 0;
        v20 = &v19[8 * v16];
        *(_QWORD *)v20 = v13[3];
        v15 = v20 + 8;
        v22 = (char *)__p;
        v21 = v56;
        if (v56 != __p)
        {
          do
          {
            v23 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *((_QWORD *)v20 - 1) = v23;
            v20 -= 8;
          }
          while (v21 != v22);
          v21 = (char *)__p;
        }
        __p = v20;
        v56 = v15;
        v57 = &v19[8 * v18];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *(_QWORD *)v56 = v12[3];
        v15 = v14 + 8;
      }
      v56 = v15;
      if ((_DWORD)v47)
      {
        v24 = v9;
      }
      else
      {
        HIDWORD(v49) = v9;
        v25 = *(_QWORD *)(a2 + 8);
        if (v25 == v8)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          do
          {
            ++v26;
            v25 = *(_QWORD *)(v25 + 8);
          }
          while (v25 != v8);
        }
        v24 = v9 + v42;
        v53 = v26;
        v44 = v9;
      }
      v27 = v46;
      *(_DWORD *)(v46 + 184) = v24;
      if (*(_BYTE *)(a1 + 2057))
      {
        if (a4[1] != *a4)
        {
          *(_QWORD *)(v10 + 1312) = 0;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 368))(v10, 0);
          v27 = v46;
        }
        AdjustTaskSizeForRdar107730882<8u>(v27, a1);
      }
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v9 = ZinAlignPower2(v24 + 4 * v28, *(_QWORD *)(a1 + 504));
      v29 = v47;
      if (!(_DWORD)v47)
      {
        DWORD2(v47) = v11;
        DWORD1(v47) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10) - 1;
        v29 = v47;
      }
      LODWORD(v47) = v29 + 1;
      if (*(_BYTE *)(v46 + 197))
      {
        v54 = *(_DWORD *)(v46 + 184);
        v30 = v54;
        v31 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, 25);
        HIDWORD(v47) += v31 + ((unint64_t)(v30 - v44) >> 2);
        LODWORD(v48) = v43;
        v32 = a4[1];
        if (v32 >= a4[2])
        {
          v33 = std::vector<ZinIrCodegenTDPartitionStats>::__push_back_slow_path<ZinIrCodegenTDPartitionStats const&>(a4, &v47);
        }
        else
        {
          std::vector<ZinIrCodegenTDPartitionStats>::__construct_one_at_end[abi:ne180100]<ZinIrCodegenTDPartitionStats const&>((uint64_t)a4, &v47);
          v33 = v32 + 80;
        }
        a4[1] = v33;
        v51 = 0;
        v52 = 0;
        v48 = 0;
        v47 = 0uLL;
        v49 = xmmword_207A7FF30;
        v50 = 0;
        v53 = 0;
        v54 = 0;
        if (__p)
        {
          v56 = (char *)__p;
          operator delete(__p);
        }
        __p = 0;
        v56 = 0;
        v57 = 0;
        v9 = ZinAlignPower2(v9, *(_QWORD *)(a1 + 616));
      }
      v8 = *(_QWORD *)(v8 + 8);
    }
    while (v8 != a2);
  }
  v34 = *a4;
  v35 = a4[1];
  v36 = v35 - *a4;
  if (v35 != *a4)
  {
    v37 = 0;
    LODWORD(v38) = 0;
    v39 = 0xCCCCCCCCCCCCCCCDLL * (v36 >> 4);
    while (1)
    {
      v40 = v34 + 80 * v37;
      *(_DWORD *)(v40 + 20) = 1;
      *(_DWORD *)(v40 + 24) = v38;
      v41 = (_DWORD *)(v40 + 20);
      v38 = (v38 + 1);
      v41[2] = v38;
      if (v39 - 1 == v37)
        break;
      if (!*(_DWORD *)(v34 + 80 * v38 + 8))
        goto LABEL_48;
LABEL_49:
      v37 = v38;
      if (v39 <= v38)
        goto LABEL_50;
    }
    *v41 = 0;
    v41[2] = -1;
LABEL_48:
    *(_BYTE *)(v34 + 80 * v37 + 40) = 1;
    goto LABEL_49;
  }
LABEL_50:
  if (__p)
  {
    v56 = (char *)__p;
    operator delete(__p);
  }
}

void sub_206E3E77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  std::vector<ZinIrCodegenTDPartitionStats>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

uint64_t ZinValidateTd<8u>::Test(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v34;
  unsigned int v35;
  unint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t WUCost;
  uint64_t v64;
  unsigned int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  int v70;
  unint64_t v71;
  int v72;
  int v73;
  int v74;
  _BOOL4 v75;
  unsigned int v76;
  int v77;
  int HasWorkUnitWidthOf8;
  _BOOL8 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BOOL8 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BOOL8 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BOOL8 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BOOL8 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  _BOOL8 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _BOOL8 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _BOOL8 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  _BOOL8 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _BOOL8 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _BOOL8 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _BOOL8 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _BOOL8 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _BOOL8 v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _BOOL8 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _BOOL8 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  _BOOL8 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  int v225;
  _BOOL8 v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _BOOL8 v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _BOOL8 v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _BOOL8 v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _BOOL8 v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _BOOL8 v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _BOOL8 v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  BOOL v282;
  _BOOL8 v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  _BOOL8 v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  _BOOL8 v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  _BOOL8 v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  _BOOL4 v316;
  unint64_t v317;
  uint64_t v318;
  unsigned int v319;
  int v320;
  char v321;
  int v322;
  _BOOL8 v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  _BOOL8 v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  _BOOL8 v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  _BOOL8 v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  _BOOL8 v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  _BOOL8 v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  _BOOL8 v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  _BOOL8 v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t v389;
  int64_t v390;
  unint64_t v391;
  _BOOL8 v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  _BOOL8 v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  _BOOL8 v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  _BOOL8 v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  _BOOL8 v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  _BOOL8 v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  _BOOL8 v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  _BOOL8 v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  _BOOL8 v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  _BOOL8 v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  _BOOL8 v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  _BOOL8 v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  _BOOL8 v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  _BOOL8 v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  _BOOL8 v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  unint64_t v512;
  _BOOL8 v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  _BOOL8 v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  _BOOL8 v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  _BOOL8 v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  _BOOL8 v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  _BOOL8 v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  _BOOL8 v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  _BOOL8 v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  _BOOL8 v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  _BOOL8 v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  _QWORD *v593;
  _BOOL8 v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  unsigned int v602;
  _BOOL8 v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  _BOOL8 v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  unint64_t v619;
  int v620;
  unsigned int v621;
  _BOOL8 v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  unsigned int v630;
  uint64_t v631;
  _BOOL8 v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  _BOOL8 v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  _BOOL8 v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  _BOOL8 v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  _BOOL8 v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  _BOOL8 v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  _BOOL8 v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  _BOOL8 v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  _BOOL8 v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  _BOOL8 v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  _BOOL8 v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  _BOOL8 v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  _BOOL8 v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  _BOOL8 v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  _BOOL8 v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  _BOOL8 v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  _BOOL8 v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  _BOOL8 v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  _BOOL8 v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  _BOOL8 v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  _BOOL8 v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  _BOOL8 v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  _BOOL8 v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  _BOOL8 v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  _BOOL8 v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  int v832;
  _BOOL8 v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  _BOOL8 v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  _BOOL8 v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  _BOOL8 v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  _BOOL8 v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  _BOOL8 v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  _BOOL8 v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  _BOOL8 v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  _BOOL8 v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  _BOOL8 v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  _BOOL8 v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  _BOOL8 v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  _BOOL8 v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  _BOOL8 v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  _BOOL8 v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  _BOOL8 v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  _BOOL8 v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  _BOOL8 v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  _BOOL8 v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  _BOOL8 v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  _BOOL8 v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  _BOOL8 v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  _BOOL8 v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  _BOOL8 v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  _BOOL8 v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  _BOOL8 v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  _BOOL8 v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  _BOOL8 v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  _BOOL8 v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  _BOOL8 v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  _BOOL8 v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  _BOOL8 v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  _BOOL8 v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  _BOOL8 v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  _BOOL8 v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  _BOOL8 v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  _BOOL8 v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  unsigned int v1129;
  int v1130;
  unsigned int v1131;
  _BOOL8 v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  _BOOL8 v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  _BOOL8 v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  _BOOL8 v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  _BOOL8 v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  _BOOL8 v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  _BOOL8 v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  _BOOL8 v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  _BOOL8 v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  _BOOL8 v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  _BOOL8 v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  _BOOL8 v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  int v1228;
  _BOOL8 v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  unint64_t v1237;
  _BOOL8 v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  _BOOL8 v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  unint64_t v1254;
  _BOOL8 v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  _BOOL8 v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  _BOOL8 v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  _BOOL8 v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  int v1287;
  float v1288;
  _BOOL8 v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  unint64_t v1297;
  BOOL v1298;
  uint64_t v1299;
  _BOOL8 v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  unsigned int v1308;
  uint64_t v1309;
  BOOL v1310;
  int v1311;
  unsigned int v1312;
  unint64_t v1313;
  unsigned int v1314;
  uint64_t v1315;
  uint64_t v1316;
  int64_t v1317;
  uint64_t v1318;
  _BOOL8 v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  unsigned int v1327;
  unsigned int v1328;
  _BOOL8 v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  _BOOL8 v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  _BOOL8 v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  _BOOL8 v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  _BOOL8 v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  _BOOL8 v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  _BOOL8 v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  _BOOL8 v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  unint64_t v1394;
  unint64_t v1395;
  int v1396;
  _BOOL8 v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  _BOOL8 v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  unsigned int v1413;
  unsigned int v1414;
  _BOOL8 v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  int v1423;
  _BOOL8 v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  _BOOL8 v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  _BOOL8 v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  _BOOL8 v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  unsigned int v1456;
  _BOOL8 v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  _BOOL8 v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  _BOOL8 v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  _BOOL8 v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  unsigned int v1489;
  int v1490;
  int v1491;
  int v1492;
  int v1493;
  int v1494;
  int v1495;
  int v1496;
  int v1497;
  int v1498;
  int v1499;
  int v1500;
  _BOOL8 v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  _BOOL8 v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  NSObject *v1518;
  int v1519;
  uint64_t v1523;
  _BOOL8 v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  int v1533;
  unsigned int v1534;
  _QWORD **v1535;
  _QWORD *v1536;
  _QWORD *v1537;
  _QWORD **v1538;
  unsigned int v1539;
  _QWORD *v1540;
  _BOOL8 v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  _BOOL8 v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  _BOOL8 v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  _BOOL8 v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  _BOOL8 v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  _BOOL8 v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  _BOOL8 v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  _BOOL8 v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  _BOOL8 v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  int v1613;
  unsigned int v1614;
  _QWORD **v1615;
  _QWORD *v1616;
  _QWORD *v1617;
  _QWORD **v1618;
  unsigned int v1619;
  _QWORD *v1620;
  _BOOL8 v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  _BOOL8 v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  _BOOL8 v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  _BOOL8 v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  _BOOL8 v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  int v1661;
  unsigned int v1662;
  _QWORD **v1663;
  _QWORD *v1664;
  _QWORD *v1665;
  _QWORD **v1666;
  unsigned int v1667;
  _QWORD *v1668;
  _BOOL8 v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  _BOOL8 v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  _BOOL8 v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  _BOOL8 v1693;
  uint64_t v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  _BOOL8 v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  _BOOL8 v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  _BOOL8 v1717;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  int v1725;
  unsigned int v1726;
  _QWORD **v1727;
  _QWORD *v1728;
  _QWORD *v1729;
  _QWORD **v1730;
  unsigned int v1731;
  _QWORD *v1732;
  _BOOL8 v1733;
  uint64_t v1734;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  uint64_t v1739;
  uint64_t v1740;
  _BOOL8 v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  _BOOL8 v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  _BOOL8 v1757;
  uint64_t v1758;
  uint64_t v1759;
  uint64_t v1760;
  uint64_t v1761;
  uint64_t v1762;
  uint64_t v1763;
  uint64_t v1764;
  int v1765;
  _BOOL8 v1766;
  uint64_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  uint64_t v1771;
  uint64_t v1772;
  uint64_t v1773;
  _BOOL8 v1774;
  uint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  _BOOL8 v1782;
  uint64_t v1783;
  uint64_t v1784;
  uint64_t v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  uint64_t v1789;
  int v1790;
  _BOOL8 v1791;
  uint64_t v1792;
  uint64_t v1793;
  uint64_t v1794;
  uint64_t v1795;
  uint64_t v1796;
  uint64_t v1797;
  uint64_t v1798;
  _BOOL8 v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  uint64_t v1803;
  uint64_t v1804;
  uint64_t v1805;
  uint64_t v1806;
  int v1807;
  _BOOL8 v1808;
  uint64_t v1809;
  uint64_t v1810;
  uint64_t v1811;
  uint64_t v1812;
  uint64_t v1813;
  uint64_t v1814;
  uint64_t v1815;
  _BOOL8 v1816;
  uint64_t v1817;
  uint64_t v1818;
  uint64_t v1819;
  uint64_t v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  _BOOL8 v1824;
  uint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  uint64_t v1829;
  uint64_t v1830;
  uint64_t v1831;
  _BOOL8 v1832;
  uint64_t v1833;
  uint64_t v1834;
  uint64_t v1835;
  uint64_t v1836;
  uint64_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  _BOOL8 v1840;
  uint64_t v1841;
  uint64_t v1842;
  uint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  uint64_t v1847;
  _BOOL8 v1848;
  uint64_t v1849;
  uint64_t v1850;
  uint64_t v1851;
  uint64_t v1852;
  uint64_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  _BOOL8 v1856;
  uint64_t v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  uint64_t v1862;
  uint64_t v1863;
  _BOOL8 v1864;
  uint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  _BOOL8 v1872;
  uint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  uint64_t v1877;
  uint64_t v1878;
  uint64_t v1879;
  _BOOL8 v1880;
  uint64_t v1881;
  uint64_t v1882;
  uint64_t v1883;
  uint64_t v1884;
  uint64_t v1885;
  uint64_t v1886;
  uint64_t v1887;
  _BOOL8 v1888;
  uint64_t v1889;
  uint64_t v1890;
  uint64_t v1891;
  uint64_t v1892;
  uint64_t v1893;
  uint64_t v1894;
  uint64_t v1895;
  _BOOL8 v1896;
  uint64_t v1897;
  uint64_t v1898;
  uint64_t v1899;
  uint64_t v1900;
  uint64_t v1901;
  uint64_t v1902;
  uint64_t v1903;
  _BOOL8 v1904;
  uint64_t v1905;
  uint64_t v1906;
  uint64_t v1907;
  uint64_t v1908;
  uint64_t v1909;
  uint64_t v1910;
  uint64_t v1911;
  _BOOL8 v1912;
  uint64_t v1913;
  uint64_t v1914;
  uint64_t v1915;
  uint64_t v1916;
  uint64_t v1917;
  uint64_t v1918;
  uint64_t v1919;
  _BOOL8 v1920;
  uint64_t v1921;
  uint64_t v1922;
  uint64_t v1923;
  uint64_t v1924;
  uint64_t v1925;
  uint64_t v1926;
  uint64_t v1927;
  _BOOL8 v1928;
  uint64_t v1929;
  uint64_t v1930;
  uint64_t v1931;
  uint64_t v1932;
  uint64_t v1933;
  uint64_t v1934;
  uint64_t v1935;
  int v1936;
  _BOOL8 v1937;
  uint64_t v1938;
  uint64_t v1939;
  uint64_t v1940;
  uint64_t v1941;
  uint64_t v1942;
  uint64_t v1943;
  uint64_t v1944;
  int v1945;
  _BOOL8 v1946;
  uint64_t v1947;
  uint64_t v1948;
  uint64_t v1949;
  uint64_t v1950;
  uint64_t v1951;
  uint64_t v1952;
  uint64_t v1953;
  int v1954;
  int v1955;
  _BOOL8 v1956;
  uint64_t v1957;
  uint64_t v1958;
  uint64_t v1959;
  uint64_t v1960;
  uint64_t v1961;
  uint64_t v1962;
  uint64_t v1963;
  _BOOL8 v1964;
  uint64_t v1965;
  uint64_t v1966;
  uint64_t v1967;
  uint64_t v1968;
  uint64_t v1969;
  uint64_t v1970;
  uint64_t v1971;
  _BOOL8 v1972;
  uint64_t v1973;
  uint64_t v1974;
  uint64_t v1975;
  uint64_t v1976;
  uint64_t v1977;
  uint64_t v1978;
  uint64_t v1979;
  _BOOL8 v1980;
  uint64_t v1981;
  uint64_t v1982;
  uint64_t v1983;
  uint64_t v1984;
  uint64_t v1985;
  uint64_t v1986;
  uint64_t v1987;
  int v1988;
  int v1989;
  _BOOL8 v1990;
  uint64_t v1991;
  uint64_t v1992;
  uint64_t v1993;
  uint64_t v1994;
  uint64_t v1995;
  uint64_t v1996;
  uint64_t v1997;
  _BOOL8 v1998;
  uint64_t v1999;
  uint64_t v2000;
  uint64_t v2001;
  uint64_t v2002;
  uint64_t v2003;
  uint64_t v2004;
  uint64_t v2005;
  _BOOL8 v2006;
  uint64_t v2007;
  uint64_t v2008;
  uint64_t v2009;
  uint64_t v2010;
  uint64_t v2011;
  uint64_t v2012;
  uint64_t v2013;
  _BOOL8 v2014;
  uint64_t v2015;
  uint64_t v2016;
  uint64_t v2017;
  uint64_t v2018;
  uint64_t v2019;
  uint64_t v2020;
  uint64_t v2021;
  int v2022;
  int v2023;
  uint64_t v2024;
  int v2025;
  int v2026;
  _BOOL8 v2027;
  uint64_t v2028;
  uint64_t v2029;
  uint64_t v2030;
  uint64_t v2031;
  uint64_t v2032;
  uint64_t v2033;
  uint64_t v2034;
  _BOOL8 v2035;
  uint64_t v2036;
  uint64_t v2037;
  uint64_t v2038;
  uint64_t v2039;
  uint64_t v2040;
  uint64_t v2041;
  uint64_t v2042;
  _BOOL8 v2043;
  uint64_t v2044;
  uint64_t v2045;
  uint64_t v2046;
  uint64_t v2047;
  uint64_t v2048;
  uint64_t v2049;
  uint64_t v2050;
  _BOOL8 v2051;
  uint64_t v2052;
  uint64_t v2053;
  uint64_t v2054;
  uint64_t v2055;
  uint64_t v2056;
  uint64_t v2057;
  uint64_t v2058;
  _BOOL8 v2059;
  uint64_t v2060;
  uint64_t v2061;
  uint64_t v2062;
  uint64_t v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  _BOOL8 v2067;
  uint64_t v2068;
  uint64_t v2069;
  uint64_t v2070;
  uint64_t v2071;
  uint64_t v2072;
  uint64_t v2073;
  uint64_t v2074;
  _BOOL8 v2075;
  uint64_t v2076;
  uint64_t v2077;
  uint64_t v2078;
  uint64_t v2079;
  uint64_t v2080;
  uint64_t v2081;
  uint64_t v2082;
  _BOOL8 v2083;
  uint64_t v2084;
  uint64_t v2085;
  uint64_t v2086;
  uint64_t v2087;
  uint64_t v2088;
  uint64_t v2089;
  uint64_t v2090;
  _BOOL8 v2091;
  uint64_t v2092;
  uint64_t v2093;
  uint64_t v2094;
  uint64_t v2095;
  uint64_t v2096;
  uint64_t v2097;
  uint64_t v2098;
  _BOOL8 v2099;
  uint64_t v2100;
  uint64_t v2101;
  uint64_t v2102;
  uint64_t v2103;
  uint64_t v2104;
  uint64_t v2105;
  uint64_t v2106;
  _BOOL8 v2107;
  uint64_t v2108;
  uint64_t v2109;
  uint64_t v2110;
  uint64_t v2111;
  uint64_t v2112;
  uint64_t v2113;
  uint64_t v2114;
  _BOOL8 v2115;
  uint64_t v2116;
  uint64_t v2117;
  uint64_t v2118;
  uint64_t v2119;
  uint64_t v2120;
  uint64_t v2121;
  uint64_t v2122;
  _BOOL8 v2123;
  uint64_t v2124;
  uint64_t v2125;
  uint64_t v2126;
  uint64_t v2127;
  uint64_t v2128;
  uint64_t v2129;
  uint64_t v2130;
  _BOOL8 v2131;
  uint64_t v2132;
  uint64_t v2133;
  uint64_t v2134;
  uint64_t v2135;
  uint64_t v2136;
  uint64_t v2137;
  uint64_t v2138;
  _BOOL8 v2139;
  uint64_t v2140;
  uint64_t v2141;
  uint64_t v2142;
  uint64_t v2143;
  uint64_t v2144;
  uint64_t v2145;
  uint64_t v2146;
  _BOOL8 v2147;
  uint64_t v2148;
  uint64_t v2149;
  uint64_t v2150;
  uint64_t v2151;
  uint64_t v2152;
  uint64_t v2153;
  uint64_t v2154;
  _BOOL8 v2155;
  uint64_t v2156;
  uint64_t v2157;
  uint64_t v2158;
  uint64_t v2159;
  uint64_t v2160;
  uint64_t v2161;
  uint64_t v2162;
  _BOOL8 v2163;
  uint64_t v2164;
  uint64_t v2165;
  uint64_t v2166;
  uint64_t v2167;
  uint64_t v2168;
  uint64_t v2169;
  uint64_t v2170;
  _BOOL8 v2171;
  uint64_t v2172;
  uint64_t v2173;
  uint64_t v2174;
  uint64_t v2175;
  uint64_t v2176;
  uint64_t v2177;
  uint64_t v2178;
  _BOOL8 v2179;
  uint64_t v2180;
  uint64_t v2181;
  uint64_t v2182;
  uint64_t v2183;
  uint64_t v2184;
  uint64_t v2185;
  uint64_t v2186;
  _BOOL8 v2187;
  uint64_t v2188;
  uint64_t v2189;
  uint64_t v2190;
  uint64_t v2191;
  uint64_t v2192;
  uint64_t v2193;
  uint64_t v2194;
  uint64_t i;
  unsigned int v2196;
  int v2197;
  unsigned int v2198;
  _BOOL8 v2199;
  uint64_t v2200;
  uint64_t v2201;
  uint64_t v2202;
  uint64_t v2203;
  uint64_t v2204;
  uint64_t v2205;
  uint64_t v2206;
  _BOOL8 v2207;
  uint64_t v2208;
  uint64_t v2209;
  uint64_t v2210;
  uint64_t v2211;
  uint64_t v2212;
  uint64_t v2213;
  uint64_t v2214;
  _BOOL8 v2215;
  uint64_t v2216;
  uint64_t v2217;
  uint64_t v2218;
  uint64_t v2219;
  uint64_t v2220;
  uint64_t v2221;
  uint64_t v2222;
  _BOOL8 v2223;
  uint64_t v2224;
  uint64_t v2225;
  uint64_t v2226;
  uint64_t v2227;
  uint64_t v2228;
  uint64_t v2229;
  uint64_t v2230;
  _BOOL8 v2231;
  uint64_t v2232;
  uint64_t v2233;
  uint64_t v2234;
  uint64_t v2235;
  uint64_t v2236;
  uint64_t v2237;
  uint64_t v2238;
  unsigned int v2239;
  _BOOL8 v2240;
  uint64_t v2241;
  uint64_t v2242;
  uint64_t v2243;
  uint64_t v2244;
  uint64_t v2245;
  uint64_t v2246;
  uint64_t v2247;
  _BOOL8 v2248;
  uint64_t v2249;
  uint64_t v2250;
  uint64_t v2251;
  uint64_t v2252;
  uint64_t v2253;
  uint64_t v2254;
  uint64_t v2255;
  _BOOL8 v2256;
  uint64_t v2257;
  uint64_t v2258;
  uint64_t v2259;
  uint64_t v2260;
  uint64_t v2261;
  uint64_t v2262;
  uint64_t v2263;
  unsigned int v2264;
  _BOOL8 v2265;
  uint64_t v2266;
  uint64_t v2267;
  uint64_t v2268;
  uint64_t v2269;
  uint64_t v2270;
  uint64_t v2271;
  uint64_t v2272;
  _BOOL8 v2273;
  uint64_t v2274;
  uint64_t v2275;
  uint64_t v2276;
  uint64_t v2277;
  uint64_t v2278;
  uint64_t v2279;
  uint64_t v2280;
  _BOOL8 v2281;
  uint64_t v2282;
  uint64_t v2283;
  uint64_t v2284;
  uint64_t v2285;
  uint64_t v2286;
  uint64_t v2287;
  uint64_t v2288;
  unsigned int v2289;
  _BOOL8 v2290;
  uint64_t v2291;
  uint64_t v2292;
  uint64_t v2293;
  uint64_t v2294;
  uint64_t v2295;
  uint64_t v2296;
  uint64_t v2297;
  _BOOL8 v2298;
  uint64_t v2299;
  uint64_t v2300;
  uint64_t v2301;
  uint64_t v2302;
  uint64_t v2303;
  uint64_t v2304;
  uint64_t v2305;
  _BOOL8 v2306;
  uint64_t v2307;
  uint64_t v2308;
  uint64_t v2309;
  uint64_t v2310;
  uint64_t v2311;
  uint64_t v2312;
  uint64_t v2313;
  int v2314;
  unsigned int v2315;
  _BOOL8 v2316;
  uint64_t v2317;
  uint64_t v2318;
  uint64_t v2319;
  uint64_t v2320;
  uint64_t v2321;
  uint64_t v2322;
  uint64_t v2323;
  _BOOL8 v2324;
  uint64_t v2325;
  uint64_t v2326;
  uint64_t v2327;
  uint64_t v2328;
  uint64_t v2329;
  uint64_t v2330;
  uint64_t v2331;
  _BOOL8 v2332;
  uint64_t v2333;
  uint64_t v2334;
  uint64_t v2335;
  uint64_t v2336;
  uint64_t v2337;
  uint64_t v2338;
  uint64_t v2339;
  _BOOL8 v2340;
  uint64_t v2341;
  uint64_t v2342;
  uint64_t v2343;
  uint64_t v2344;
  uint64_t v2345;
  uint64_t v2346;
  uint64_t v2347;
  int v2348;
  int v2349;
  _BOOL8 v2350;
  uint64_t v2351;
  uint64_t v2352;
  uint64_t v2353;
  uint64_t v2354;
  uint64_t v2355;
  uint64_t v2356;
  uint64_t v2357;
  _BOOL8 v2358;
  uint64_t v2359;
  uint64_t v2360;
  uint64_t v2361;
  uint64_t v2362;
  uint64_t v2363;
  uint64_t v2364;
  uint64_t v2365;
  _BOOL8 v2366;
  uint64_t v2367;
  uint64_t v2368;
  uint64_t v2369;
  uint64_t v2370;
  uint64_t v2371;
  uint64_t v2372;
  uint64_t v2373;
  _BOOL8 v2374;
  uint64_t v2375;
  uint64_t v2376;
  uint64_t v2377;
  uint64_t v2378;
  uint64_t v2379;
  uint64_t v2380;
  uint64_t v2381;
  _BOOL8 v2382;
  uint64_t v2383;
  uint64_t v2384;
  uint64_t v2385;
  uint64_t v2386;
  uint64_t v2387;
  uint64_t v2388;
  uint64_t v2389;
  _BOOL8 v2390;
  uint64_t v2391;
  uint64_t v2392;
  uint64_t v2393;
  uint64_t v2394;
  uint64_t v2395;
  uint64_t v2396;
  uint64_t v2397;
  _BOOL8 v2398;
  uint64_t v2399;
  uint64_t v2400;
  uint64_t v2401;
  uint64_t v2402;
  uint64_t v2403;
  uint64_t v2404;
  uint64_t v2405;
  _BOOL8 v2406;
  uint64_t v2407;
  uint64_t v2408;
  uint64_t v2409;
  uint64_t v2410;
  uint64_t v2411;
  uint64_t v2412;
  uint64_t v2413;
  _BOOL8 v2414;
  uint64_t v2415;
  uint64_t v2416;
  uint64_t v2417;
  uint64_t v2418;
  uint64_t v2419;
  uint64_t v2420;
  uint64_t v2421;
  _BOOL8 v2422;
  uint64_t v2423;
  uint64_t v2424;
  uint64_t v2425;
  uint64_t v2426;
  uint64_t v2427;
  uint64_t v2428;
  uint64_t v2429;
  _BOOL8 v2430;
  uint64_t v2431;
  uint64_t v2432;
  uint64_t v2433;
  uint64_t v2434;
  uint64_t v2435;
  uint64_t v2436;
  uint64_t v2437;
  _BOOL8 v2438;
  uint64_t v2439;
  uint64_t v2440;
  uint64_t v2441;
  uint64_t v2442;
  uint64_t v2443;
  uint64_t v2444;
  uint64_t v2445;
  _BOOL8 v2446;
  uint64_t v2447;
  uint64_t v2448;
  uint64_t v2449;
  uint64_t v2450;
  uint64_t v2451;
  uint64_t v2452;
  uint64_t v2453;
  _BOOL8 v2454;
  uint64_t v2455;
  uint64_t v2456;
  uint64_t v2457;
  uint64_t v2458;
  uint64_t v2459;
  uint64_t v2460;
  uint64_t v2461;
  _BOOL8 v2462;
  uint64_t v2463;
  uint64_t v2464;
  uint64_t v2465;
  uint64_t v2466;
  uint64_t v2467;
  uint64_t v2468;
  uint64_t v2469;
  _BOOL8 v2470;
  uint64_t v2471;
  uint64_t v2472;
  uint64_t v2473;
  uint64_t v2474;
  uint64_t v2475;
  uint64_t v2476;
  uint64_t v2477;
  _BOOL8 v2478;
  uint64_t v2479;
  uint64_t v2480;
  uint64_t v2481;
  uint64_t v2482;
  uint64_t v2483;
  uint64_t v2484;
  uint64_t v2485;
  _BOOL8 v2486;
  uint64_t v2487;
  uint64_t v2488;
  uint64_t v2489;
  uint64_t v2490;
  uint64_t v2491;
  uint64_t v2492;
  uint64_t v2493;
  _BOOL8 v2494;
  uint64_t v2495;
  uint64_t v2496;
  uint64_t v2497;
  uint64_t v2498;
  uint64_t v2499;
  uint64_t v2500;
  uint64_t v2501;
  _BOOL8 v2502;
  uint64_t v2503;
  uint64_t v2504;
  uint64_t v2505;
  uint64_t v2506;
  uint64_t v2507;
  uint64_t v2508;
  uint64_t v2509;
  _BOOL8 v2510;
  uint64_t v2511;
  uint64_t v2512;
  uint64_t v2513;
  uint64_t v2514;
  uint64_t v2515;
  uint64_t v2516;
  uint64_t v2517;
  _BOOL8 v2518;
  uint64_t v2519;
  uint64_t v2520;
  uint64_t v2521;
  uint64_t v2522;
  uint64_t v2523;
  uint64_t v2524;
  uint64_t v2525;
  _BOOL8 v2526;
  uint64_t v2527;
  uint64_t v2528;
  uint64_t v2529;
  uint64_t v2530;
  uint64_t v2531;
  uint64_t v2532;
  uint64_t v2533;
  _BOOL8 v2534;
  uint64_t v2535;
  uint64_t v2536;
  uint64_t v2537;
  uint64_t v2538;
  uint64_t v2539;
  uint64_t v2540;
  uint64_t v2541;
  _BOOL8 v2542;
  uint64_t v2543;
  uint64_t v2544;
  uint64_t v2545;
  uint64_t v2546;
  uint64_t v2547;
  uint64_t v2548;
  uint64_t v2549;
  _BOOL8 v2550;
  uint64_t v2551;
  uint64_t v2552;
  uint64_t v2553;
  uint64_t v2554;
  uint64_t v2555;
  uint64_t v2556;
  uint64_t v2557;
  unsigned int v2558;
  _BOOL8 v2559;
  uint64_t v2560;
  uint64_t v2561;
  uint64_t v2562;
  uint64_t v2563;
  uint64_t v2564;
  uint64_t v2565;
  uint64_t v2566;
  _BOOL8 v2567;
  uint64_t v2568;
  uint64_t v2569;
  uint64_t v2570;
  uint64_t v2571;
  uint64_t v2572;
  uint64_t v2573;
  uint64_t v2574;
  _BOOL8 v2575;
  uint64_t v2576;
  uint64_t v2577;
  uint64_t v2578;
  uint64_t v2579;
  uint64_t v2580;
  uint64_t v2581;
  uint64_t v2582;
  _BOOL8 v2583;
  uint64_t v2584;
  uint64_t v2585;
  uint64_t v2586;
  uint64_t v2587;
  uint64_t v2588;
  uint64_t v2589;
  uint64_t v2590;
  _BOOL8 v2591;
  uint64_t v2592;
  uint64_t v2593;
  uint64_t v2594;
  uint64_t v2595;
  uint64_t v2596;
  uint64_t v2597;
  uint64_t v2598;
  _BOOL8 v2599;
  uint64_t v2600;
  uint64_t v2601;
  uint64_t v2602;
  uint64_t v2603;
  uint64_t v2604;
  uint64_t v2605;
  uint64_t v2606;
  _BOOL8 v2607;
  uint64_t v2608;
  uint64_t v2609;
  uint64_t v2610;
  uint64_t v2611;
  uint64_t v2612;
  uint64_t v2613;
  uint64_t v2614;
  _BOOL8 v2615;
  uint64_t v2616;
  uint64_t v2617;
  uint64_t v2618;
  uint64_t v2619;
  uint64_t v2620;
  uint64_t v2621;
  uint64_t v2622;
  _BOOL8 v2623;
  uint64_t v2624;
  uint64_t v2625;
  uint64_t v2626;
  uint64_t v2627;
  uint64_t v2628;
  uint64_t v2629;
  uint64_t v2630;
  _BOOL8 v2631;
  uint64_t v2632;
  uint64_t v2633;
  uint64_t v2634;
  uint64_t v2635;
  uint64_t v2636;
  uint64_t v2637;
  uint64_t v2638;
  _BOOL8 v2639;
  uint64_t v2640;
  uint64_t v2641;
  uint64_t v2642;
  uint64_t v2643;
  uint64_t v2644;
  uint64_t v2645;
  uint64_t v2646;
  char v2647;
  _BOOL8 v2648;
  uint64_t v2649;
  uint64_t v2650;
  uint64_t v2651;
  uint64_t v2652;
  uint64_t v2653;
  uint64_t v2654;
  uint64_t v2655;
  unsigned int v2656;
  uint64_t v2657;
  uint64_t v2658;
  unint64_t v2659;
  unint64_t v2660;
  unint64_t v2661;
  uint64_t v2662;
  uint64_t v2663;
  int64_t v2664;
  int v2665;
  unsigned int v2666;
  int v2667;
  unsigned int v2668;
  uint64_t v2669;
  unint64_t v2670;
  unsigned int v2671;
  unint64_t v2672;
  unsigned int v2673;
  unint64_t v2674;
  unint64_t v2675;
  uint64_t v2676;
  int v2677;
  char v2678;
  uint64_t v2679;
  uint64_t v2680;
  uint64_t v2681;
  char v2682;
  char v2683;
  char v2684;
  unsigned int v2685;
  unsigned int v2686;
  int v2687;
  uint64_t v2688;
  uint64_t v2689;
  uint64_t v2690;
  uint64_t v2691;
  int v2692;
  int v2693;
  int v2694;
  __int16 v2695;
  __int16 v2696;
  __int16 v2697;
  unsigned int v2698;
  unsigned int v2699;
  unsigned int v2700;
  unsigned int v2701;
  int v2702;
  uint64_t v2703;
  uint64_t v2704;
  unint64_t v2705;
  uint64_t v2706;
  unsigned int v2707;
  int v2708;
  unsigned int v2709;
  unint64_t v2710;
  unint64_t v2711;
  unint64_t v2712;
  int v2713;
  int v2714;
  unsigned int v2715;
  char v2716;
  char v2717;
  char v2718;
  int v2719;
  int v2720;
  unint64_t v2721;
  uint64_t v2722;
  int v2723;
  int v2724;
  int v2725;
  unsigned int v2726;
  int v2727;
  int64_t v2728;
  unint64_t v2729;
  uint64_t v2730;
  uint64_t v2731;
  unint64_t v2732;
  unsigned int v2733;
  uint64_t v2734;
  int v2735;
  unint64_t v2736;
  int v2737;
  unint64_t v2738;
  unint64_t v2739;
  unsigned int v2740;
  int v2741;
  unint64_t v2742;
  unint64_t v2743;
  unint64_t v2744;
  unsigned int v2745;
  unsigned int v2746;
  _BOOL4 v2747;
  unsigned int v2748;
  uint64_t v2749;
  char v2750[8];
  _QWORD *v2751[2];
  __int128 v2752;
  uint8_t v2753[4];
  _QWORD v2754[3];

  *(_QWORD *)((char *)&v2754[1] + 4) = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD *)(a3 + 548);
  v6 = (v5 >> 8) & 7;
  v7 = (v5 >> 12) & 7;
  if (v7 > v6)
  {
    v8 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v8)
      ZinValidateTd<8u>::Test(v8, v9, v10, v11, v12, v13, v14, v15);
    return 3;
  }
  v16 = HIWORD(v5) & 7;
  if (v7 > v16)
  {
    v17 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v17)
      ZinValidateTd<8u>::Test(v17, v18, v19, v20, v21, v22, v23, v24);
    return 3;
  }
  if (v6 > v16)
  {
    v25 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v25)
      ZinValidateTd<8u>::Test(v25, v26, v27, v28, v29, v30, v31, v32);
    return 3;
  }
  v34 = (*(_DWORD *)(a3 + 1052) >> 10) & 1;
  if (v34 != ((*(_DWORD *)(a3 + 36) >> 4) & 1))
  {
    v45 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v45)
      ZinValidateTd<8u>::Test(v45, v46, v47, v48, v49, v50, v51, v52);
    return 3;
  }
  v35 = *(_DWORD *)(a3 + 500);
  v36 = v35 & 3;
  if ((v35 & 3) == 3)
  {
    v37 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v37)
      ZinValidateTd<8u>::Test(v37, v38, v39, v40, v41, v42, v43, v44);
    return 3;
  }
  v55 = *a1;
  v2729 = *(unsigned int *)(a3 + 492);
  v2731 = a1[1];
  v2727 = *(_DWORD *)(a3 + 496);
  v56 = *(unsigned int *)(a3 + 512);
  v2749 = (v56 >> 16) & 0x7FFF;
  v57 = v56 & 0x7FFF;
  v2725 = *(_DWORD *)(a3 + 516);
  v2737 = *(_DWORD *)(a3 + 504);
  v58 = *(_DWORD *)(a3 + 508);
  v2741 = *(_DWORD *)(a3 + 520);
  v59 = *(unsigned int *)(a3 + 524);
  v60 = (v59 >> 6) & 0x3F;
  v61 = v59 & 0x3F;
  v62 = (v59 >> 28) & 3;
  v2743 = v59;
  WUCost = v59 >> 30;
  v2739 = *(unsigned int *)(a3 + 528);
  v64 = (v2739 >> 13) & 3;
  v65 = *(_DWORD *)(a3 + 532);
  LODWORD(v66) = *(_DWORD *)(a3 + 912);
  v67 = *(unsigned int *)(a3 + 1160);
  LODWORD(v68) = *(_DWORD *)(a3 + 1056);
  v2724 = *(_DWORD *)(a3 + 540);
  v69 = *(_DWORD *)(a3 + 544);
  v2733 = *(_DWORD *)(a3 + 860);
  v70 = (v2733 >> 2) & 3;
  v2721 = *(unsigned int *)(a3 + 536);
  v71 = v2721 & 0x7FFF;
  v2723 = *(_DWORD *)(a3 + 988);
  v72 = dword_207A7FF60[(v5 >> 2) & 3];
  v2745 = dword_207AA1198[v36];
  v73 = *(_DWORD *)(a3 + 776);
  v2735 = v5 & 0xC;
  if (v2735 == 4)
  {
    if (v6 != v7 || v6 != v16)
    {
      v103 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v103)
        ZinValidateTd<8u>::Test(v103, v104, v105, v106, v107, v108, v109, v110);
      return 3;
    }
    if (v61 >= 9)
    {
      v129 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v129)
        ZinValidateTd<8u>::Test(v129, v130, v131, v132, v133, v134, v135, v136);
      return 3;
    }
    if (v6 >= 5)
    {
      v137 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v137)
        ZinValidateTd<8u>::Test(v137, v138, v139, v140, v141, v142, v143, v144);
      return 3;
    }
    v2708 = WUCost;
    if (v6 != 4)
    {
      if ((_DWORD)v61 != 1 || (_DWORD)v60 != 1)
      {
        v194 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v194)
          return 3;
        goto LABEL_80;
      }
      if ((_DWORD)v62 != 1 || (_DWORD)WUCost != 1 || (_DWORD)v64 != 1)
      {
        v266 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v266)
          return 3;
LABEL_733:
        ZinValidateTd<17u>::Test(v266, v267, v268, v269, v270, v271, v272, v273);
        return 3;
      }
      if (v70 == 2)
      {
        v154 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v154)
          return 3;
LABEL_731:
        ZinValidateTd<17u>::Test(v154, v155, v156, v157, v158, v159, v160, v161);
        return 3;
      }
    }
    v2677 = *(_DWORD *)(a3 + 776);
    v2679 = v55;
    v2710 = v67;
    v2713 = v62;
    v2682 = a5;
    v2685 = a4;
    v2703 = v61;
    v2674 = v60;
    v2719 = v58;
    v2688 = a2;
    v2698 = v65;
    v2716 = v66;
    LODWORD(v66) = v34;
    v2694 = *(_DWORD *)(a3 + 1056);
    v68 = v57;
    v74 = dword_207A7FF60[(v5 >> 2) & 3];
    WUCost = NERasterization::GetWUCost((1 << v6), (1 << v6), (1 << v6), v71, v72, 0, v57, v2749, 0, 0, v2745, v55);
    v72 = v74;
    v67 = v2710;
    LODWORD(v62) = v2713;
    v61 = v2703;
    v64 = (v2739 >> 13) & 3;
    v65 = v2698;
    v60 = v2674;
    v57 = v68;
    LOWORD(v68) = v2694;
    LOBYTE(v73) = v2677;
    a2 = v2688;
    LODWORD(v36) = v35 & 3;
    v34 = v66;
    LOBYTE(v66) = v2716;
    v71 = v2721 & 0x7FFF;
    v58 = v2719;
    a5 = v2682;
    a4 = v2685;
    v55 = v2679;
    v1298 = WUCost == 1;
    LODWORD(WUCost) = v2708;
    if (!v1298)
    {
      v186 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v186)
        ZinValidateTd<8u>::Test(v186, v187, v188, v189, v190, v191, v192, v193);
      return 3;
    }
  }
  v2707 = v64;
  v2709 = WUCost;
  v2678 = v73;
  v2673 = (v35 >> 4) & 3;
  v75 = v2673 != 2;
  if ((_DWORD)v36 == 2 && v2673 != 2)
  {
    v2711 = v67;
    v2714 = v62;
    v2683 = a5;
    v2686 = a4;
    v2680 = v55;
    v76 = v2745;
    v2704 = v61;
    v2675 = v60;
    v2689 = a2;
    v2692 = v36;
    v2699 = v65;
    v2717 = v66;
    v66 = v71;
    v2746 = v69;
    v77 = v34;
    v2695 = v68;
    v68 = v57;
    HasWorkUnitWidthOf8 = NERasterization::HasWorkUnitWidthOf8(v55, v76, (1 << (BYTE2(v5) & 7)), (1 << v7), (1 << v6), v72, 0, v2749, v57, 0, 0);
    v75 = v2673 != 2;
    v67 = v2711;
    LODWORD(v62) = v2714;
    v61 = v2704;
    v65 = v2699;
    v60 = v2675;
    v57 = v68;
    LOWORD(v68) = v2695;
    a2 = v2689;
    LODWORD(v36) = v2692;
    v34 = v77;
    v69 = v2746;
    v71 = v66;
    LOBYTE(v66) = v2717;
    a5 = v2683;
    a4 = v2686;
    v55 = v2680;
    if (HasWorkUnitWidthOf8)
    {
      v79 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v79)
        ZinValidateTd<8u>::Test(v79, v80, v81, v82, v83, v84, v85, v86);
      return 3;
    }
  }
  if ((*(_BYTE *)(a3 + 864) & 2) != 0
    && *(_QWORD *)(v55 + 416) * (((unint64_t)*(unsigned int *)(a3 + 876) >> 4) & 0x1FFFF) > *(_QWORD *)(v55 + 464))
  {
    v87 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v87)
      ZinValidateTd<8u>::Test(v87, v88, v89, v90, v91, v92, v93, v94);
    return 3;
  }
  if ((*(_BYTE *)(a3 + 868) & 2) != 0
    && *(_QWORD *)(v55 + 416) * (((unint64_t)*(unsigned int *)(a3 + 896) >> 4) & 0x1FFFF) > *(_QWORD *)(v55 + 464))
  {
    v95 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v95)
      ZinValidateTd<8u>::Test(v95, v96, v97, v98, v99, v100, v101, v102);
    return 3;
  }
  if ((*(_BYTE *)(a3 + 912) & 2) != 0
    && *(_QWORD *)(v55 + 416) * (((unint64_t)*(unsigned int *)(a3 + 920) >> 4) & 0x1FFFF) > *(_QWORD *)(v55 + 464))
  {
    v111 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v111)
      ZinValidateTd<8u>::Test(v111, v112, v113, v114, v115, v116, v117, v118);
    return 3;
  }
  v2720 = v58;
  v2718 = v66;
  v119 = v68 & 7;
  if (!(v5 >> 4))
  {
    if ((v68 & 7) != 0)
    {
      if (v119 == 3)
      {
        v145 = *(_DWORD *)(a3 + 1056);
        if ((v145 & 0x80000) != 0)
        {
          if ((v2733 & 8) == 0)
          {
            v250 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v250)
              ZinValidateTd<8u>::Test(v250, v251, v252, v253, v254, v255, v256, v257);
            return 3;
          }
        }
        else if ((v70 - 1) >= 2)
        {
          v146 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v146)
            ZinValidateTd<8u>::Test(v146, v147, v148, v149, v150, v151, v152, v153);
          return 3;
        }
        if ((v145 & 0x800000) != 0)
        {
          v282 = v60 >= 2 || v61 >= 2;
          if (v282 && v70 != 2)
          {
            v283 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v283)
              ZinValidateTd<8u>::Test(v283, v284, v285, v286, v287, v288, v289, v290);
            return 3;
          }
        }
      }
      else if (v70)
      {
        v178 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v178)
          return 3;
        goto LABEL_557;
      }
    }
    else if (((v2733 >> 2) & 1 | 2) != 2)
    {
      v170 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v170)
        ZinValidateTd<8u>::Test(v170, v171, v172, v173, v174, v175, v176, v177);
      return 3;
    }
    if (((v5 & 8) != 0 || v2735 == 4 && v6 <= 2) && v70 == 2)
    {
      v154 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v154)
        return 3;
      goto LABEL_731;
    }
  }
  v120 = v65 & 0x1FFF;
  if (v34)
  {
    if (v120 <= 1)
    {
      v162 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v162)
        ZinValidateTd<8u>::Test(v162, v163, v164, v165, v166, v167, v168, v169);
      return 3;
    }
    if ((*(_DWORD *)(a3 + 1056) & 7) != 0)
    {
      v121 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v121)
        ZinValidateTd<8u>::Test(v121, v122, v123, v124, v125, v126, v127, v128);
      return 3;
    }
    if ((*(_DWORD *)(a3 + 1056) & 0x4018) == 8)
    {
      v202 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v202)
        ZinValidateTd<8u>::Test(v202, v203, v204, v205, v206, v207, v208, v209);
      return 3;
    }
  }
  v2671 = v5 >> 4;
  v2712 = v67;
  v2715 = v62;
  v210 = (v2743 >> 13) & 3;
  v211 = v2739;
  v212 = *(_QWORD *)&v2737 & 0x1FFFFLL;
  v2734 = (v2743 >> 15) & 3;
  v213 = v58 & 0x1FFFF;
  v2676 = v2739 >> 6;
  v214 = v2741 & 7;
  v2742 = (v2743 >> 17) & 0x1F;
  v2738 = v2739 & 0x1F;
  v2744 = (v2743 >> 22) & 0x1F;
  v215 = (v2739 >> 8) & 0xF;
  v2740 = HIWORD(v65);
  if (v119 == 1)
  {
    if ((_DWORD)v212 != (_DWORD)v213)
    {
      v242 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v242)
        return 3;
      goto LABEL_104;
    }
    if ((_DWORD)v214)
    {
      v216 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v216)
        return 3;
LABEL_89:
      ZinValidateTd<17u>::Test(v216, v217, v218, v219, v220, v221, v222, v223);
      return 3;
    }
    v2706 = v61;
    if ((_DWORD)v61 == 1)
    {
      v2669 = (v211 >> 8) & 0xF;
      v2747 = v75;
      v2670 = v210;
      v2696 = v68;
      v2702 = v70;
      v299 = a2;
      if ((_DWORD)v60 == 1)
      {
        if ((_DWORD)v2738 == 1)
        {
          if ((_DWORD)v210 == 1)
          {
            if ((_DWORD)v2734 == 1)
            {
              if ((_DWORD)v2676 == 1)
              {
                if ((_DWORD)v2742)
                {
                  v300 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (!v300)
                    return 3;
LABEL_141:
                  ZinValidateTd<17u>::Test(v300, v301, v302, v303, v304, v305, v306, v307);
                  return 3;
                }
                if ((_DWORD)v2744)
                {
                  v432 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (!v432)
                    return 3;
LABEL_224:
                  ZinValidateTd<17u>::Test(v432, v433, v434, v435, v436, v437, v438, v439);
                  return 3;
                }
                if ((_DWORD)v2669)
                {
                  v448 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (!v448)
                    return 3;
LABEL_232:
                  ZinValidateTd<17u>::Test(v448, v449, v450, v451, v452, v453, v454, v455);
                  return 3;
                }
                if (v2715 == 1)
                {
                  if (v2709 == 1)
                  {
                    if (v2707 == 1)
                    {
                      if ((v65 & 0x4000) == 0)
                      {
                        v472 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (!v472)
                          return 3;
LABEL_246:
                        ZinValidateTd<10u>::Test(v472, v473, v474, v475, v476, v477, v478, v479);
                        return 3;
                      }
                      if (HIWORD(v65) != 1)
                      {
                        v577 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (v577)
                          ZinValidateTd<8u>::Test(v577, v578, v579, v580, v581, v582, v583, v584);
                        return 3;
                      }
                      if (v2735 == 4)
                      {
                        v553 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (!v553)
                          return 3;
LABEL_284:
                        ZinValidateTd<10u>::Test(v553, v554, v555, v556, v557, v558, v559, v560);
                        return 3;
                      }
                      LODWORD(v68) = v36;
                      v36 = v71;
                      v593 = (_QWORD *)v55;
                      if (((*(_DWORD *)(a3 + 1052) ^ *(_DWORD *)(a3 + 500)) & 3) != 0)
                      {
                        v594 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (!v594)
                          return 3;
LABEL_301:
                        ZinValidateTd<17u>::Test(v594, v595, v596, v597, v598, v599, v600, v601);
                        return 3;
                      }
                      if ((v2696 & 8) == 0)
                      {
                        v611 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (!v611)
                          return 3;
LABEL_312:
                        ZinValidateTd<8u>::Test(v611, v612, v613, v614, v615, v616, v617, v618);
                        return 3;
                      }
                      if ((v2696 & 0x10) == 0)
                      {
                        if ((v2696 & 0x4000) == 0)
                        {
                          v619 = v57;
                          v620 = v34;
                          v630 = *(_DWORD *)(a3 + 536) & 0x7FFF;
                          if (v630 != 1)
                            v630 = v2749 % v630 == 1;
                          if (!v16)
                            v630 = 1;
                          if (!v7 && v630)
                          {
                            if (v68 > 1)
                            {
                              if (v619 % v593[232] <= v593[234])
                              {
                                v776 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                if (!v776)
                                  return 3;
                                goto LABEL_428;
                              }
                            }
                            else if (v619 % v593[233] <= v593[232])
                            {
                              v622 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              if (!v622)
                                return 3;
LABEL_327:
                              ZinValidateTd<6u>::Test(v622, v623, v624, v625, v626, v627, v628, v629);
                              return 3;
                            }
                          }
                          if (!v7 && (*(_DWORD *)(a3 + 536) & 0x7FFF0000) != 0)
                          {
                            v672 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                            if (!v672)
                              return 3;
LABEL_362:
                            ZinValidateTd<10u>::Test(v672, v673, v674, v675, v676, v677, v678, v679);
                            return 3;
                          }
                          goto LABEL_368;
                        }
                        v648 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (!v648)
                          return 3;
LABEL_348:
                        ZinValidateTd<8u>::Test(v648, v649, v650, v651, v652, v653, v654, v655);
                        return 3;
                      }
                      v640 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      if (!v640)
                        return 3;
LABEL_344:
                      ZinValidateTd<8u>::Test(v640, v641, v642, v643, v644, v645, v646, v647);
                      return 3;
                    }
                    v537 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    if (!v537)
                      return 3;
LABEL_800:
                    ZinValidateTd<17u>::Test(v537, v538, v539, v540, v541, v542, v543, v544);
                    return 3;
                  }
                  v521 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (!v521)
                    return 3;
LABEL_791:
                  ZinValidateTd<17u>::Test(v521, v522, v523, v524, v525, v526, v527, v528);
                  return 3;
                }
                v496 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (!v496)
                  return 3;
LABEL_778:
                ZinValidateTd<17u>::Test(v496, v497, v498, v499, v500, v501, v502, v503);
                return 3;
              }
              v416 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (!v416)
                return 3;
LABEL_432:
              ZinValidateTd<17u>::Test(v416, v417, v418, v419, v420, v421, v422, v423);
              return 3;
            }
            v400 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (!v400)
              return 3;
LABEL_211:
            ZinValidateTd<17u>::Test(v400, v401, v402, v403, v404, v405, v406, v407);
            return 3;
          }
          v379 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v379)
            return 3;
LABEL_197:
          ZinValidateTd<17u>::Test(v379, v380, v381, v382, v383, v384, v385, v386);
          return 3;
        }
        v371 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v371)
          return 3;
LABEL_434:
        ZinValidateTd<17u>::Test(v371, v372, v373, v374, v375, v376, v377, v378);
        return 3;
      }
      v339 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v339)
        return 3;
LABEL_176:
      ZinValidateTd<17u>::Test(v339, v340, v341, v342, v343, v344, v345, v346);
      return 3;
    }
    v331 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v331)
      return 3;
LABEL_172:
    ZinValidateTd<17u>::Test(v331, v332, v333, v334, v335, v336, v337, v338);
    return 3;
  }
  if (v119 == 2)
  {
    if (v212 != 2 * v213)
    {
      v234 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v234)
        ZinValidateTd<8u>::Test(v234, v235, v236, v237, v238, v239, v240, v241);
      return 3;
    }
    if ((_DWORD)v214)
    {
      v216 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v216)
        return 3;
      goto LABEL_89;
    }
    v2706 = v61;
    if ((_DWORD)v61 == 1)
    {
      v2669 = (v211 >> 8) & 0xF;
      v2747 = v75;
      v2670 = v210;
      v2696 = v68;
      v2702 = v70;
      v299 = a2;
      if ((_DWORD)v60 == 1)
      {
        if ((_DWORD)v2738 == 1)
        {
          if ((_DWORD)v210 == 1)
          {
            if ((_DWORD)v2734 == 1)
            {
              if ((_DWORD)v2676 == 1)
              {
                if ((_DWORD)v2742)
                {
                  v300 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (!v300)
                    return 3;
                  goto LABEL_141;
                }
                if ((_DWORD)v2744)
                {
                  v432 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (!v432)
                    return 3;
                  goto LABEL_224;
                }
                if ((_DWORD)v2669)
                {
                  v448 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (!v448)
                    return 3;
                  goto LABEL_232;
                }
                if (v2715 == 1)
                {
                  if (v2709 == 1)
                  {
                    if (v2707 == 1)
                    {
                      if ((v65 & 0x4000) == 0)
                      {
                        v472 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (!v472)
                          return 3;
                        goto LABEL_246;
                      }
                      if (HIWORD(v65) != 2)
                      {
                        v569 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (v569)
                          ZinValidateTd<8u>::Test(v569, v570, v571, v572, v573, v574, v575, v576);
                        return 3;
                      }
                      if (v2735 == 4)
                      {
                        v553 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (!v553)
                          return 3;
                        goto LABEL_284;
                      }
                      LODWORD(v68) = v36;
                      v36 = v71;
                      v593 = (_QWORD *)v55;
                      if (((*(_DWORD *)(a3 + 1052) ^ *(_DWORD *)(a3 + 500)) & 3) != 0)
                      {
                        v594 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (!v594)
                          return 3;
                        goto LABEL_301;
                      }
                      if ((v2696 & 8) == 0)
                      {
                        v611 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (!v611)
                          return 3;
                        goto LABEL_312;
                      }
                      if ((v2696 & 0x10) == 0)
                      {
                        if ((v2696 & 0x4000) == 0)
                        {
                          v619 = v57;
                          v620 = v34;
                          v621 = *(_DWORD *)(a3 + 536) & 0x7FFF;
                          if (v621 != 1)
                            v621 = v2749 % v621 == 1;
                          if (!v16)
                            v621 = 1;
                          if (v7 || !v621)
                            goto LABEL_359;
                          if (v68 <= 1)
                          {
                            if (v619 % v593[233] <= v593[232])
                            {
                              v622 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              if (!v622)
                                return 3;
                              goto LABEL_327;
                            }
LABEL_359:
                            if (!v7 && (*(_DWORD *)(a3 + 536) & 0x7FFF0000) != 0)
                            {
                              v672 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              if (!v672)
                                return 3;
                              goto LABEL_362;
                            }
LABEL_368:
                            v224 = v119 - 3;
                            v55 = (uint64_t)v593;
                            v71 = v36;
                            v34 = v620;
                            a2 = v299;
                            LODWORD(v36) = v68;
                            v57 = v619;
                            v70 = v2702;
                            LOWORD(v68) = v2696;
                            v61 = v2706;
                            v75 = v2747;
                            v215 = v2669;
                            goto LABEL_96;
                          }
                          if (v619 % v593[232] > v593[234])
                            goto LABEL_359;
                          v776 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          if (!v776)
                            return 3;
LABEL_428:
                          ZinValidateTd<10u>::Test(v776, v777, v778, v779, v780, v781, v782, v783);
                          return 3;
                        }
                        v648 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (!v648)
                          return 3;
                        goto LABEL_348;
                      }
                      v640 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      if (!v640)
                        return 3;
                      goto LABEL_344;
                    }
                    v537 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    if (!v537)
                      return 3;
                    goto LABEL_800;
                  }
                  v521 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (!v521)
                    return 3;
                  goto LABEL_791;
                }
                v496 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (!v496)
                  return 3;
                goto LABEL_778;
              }
              v416 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (!v416)
                return 3;
              goto LABEL_432;
            }
            v400 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (!v400)
              return 3;
            goto LABEL_211;
          }
          v379 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v379)
            return 3;
          goto LABEL_197;
        }
        v371 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v371)
          return 3;
        goto LABEL_434;
      }
      v339 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v339)
        return 3;
      goto LABEL_176;
    }
    v331 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v331)
      return 3;
    goto LABEL_172;
  }
  v224 = v119 - 3;
  v2670 = v210;
  if ((v119 - 3) <= 1 && (_DWORD)v36 != (*(_DWORD *)(a3 + 1052) & 3))
  {
    v274 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v274)
      ZinValidateTd<8u>::Test(v274, v275, v276, v277, v278, v279, v280, v281);
    return 3;
  }
LABEL_96:
  v2705 = v61;
  v225 = (v5 >> 19) & 7;
  if ((v5 & 0x10000000) != 0)
  {
    if (*(_QWORD *)(v55 + 1088) < v57)
    {
      v258 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v258)
        ZinValidateTd<8u>::Test(v258, v259, v260, v261, v262, v263, v264, v265);
      return 3;
    }
    v2700 = v65;
    if (*(_QWORD *)(v55 + 1080) < v213)
    {
      v291 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v291)
        ZinValidateTd<8u>::Test(v291, v292, v293, v294, v295, v296, v297, v298);
      return 3;
    }
    v316 = v75;
    v2691 = a2;
    v317 = v71;
    v318 = v55;
    v319 = 1 << v214 << ((v5 >> 19) & 7);
    if (*(_BYTE *)(v2731 + 527) || (v320 = *(unsigned __int8 *)(v55 + 1270), *(_BYTE *)(v318 + 1270)))
      v320 = v319 >= v213;
    if (v2673 <= 1)
    {
      v321 = (v319 & 0xF) != 0 ? v320 : 1;
      if ((v321 & 1) == 0)
      {
        v363 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v363)
          ZinValidateTd<8u>::Test(v363, v364, v365, v366, v367, v368, v369, v370);
        return 3;
      }
    }
    v322 = (v319 & 7) == 0 || v316;
    if (((v322 | v320) & 1) == 0)
    {
      v347 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v347)
        ZinValidateTd<8u>::Test(v347, v348, v349, v350, v351, v352, v353, v354);
      return 3;
    }
    if (v2735 == 4 && v214 >= 5)
    {
      v323 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v323)
        ZinValidateTd<8u>::Test(v323, v324, v325, v326, v327, v328, v329, v330);
      return 3;
    }
    v55 = v318;
    v71 = v317;
    a2 = v2691;
    v65 = v2700;
    if (v2715 != 1 || v2709 != 1 || v2707 != 1)
    {
      v266 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v266)
        return 3;
      goto LABEL_733;
    }
  }
  if (v2742 >= v2705 || *(_QWORD *)(v55 + 144) < v2742)
  {
    v226 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v226)
      ZinValidateTd<8u>::Test(v226, v227, v228, v229, v230, v231, v232, v233);
    return 3;
  }
  v2701 = v65;
  v2697 = v68;
  v2690 = a2;
  v2693 = v36;
  v2736 = v212;
  v2748 = v69;
  v2667 = (v5 >> 19) & 7;
  v2668 = v214;
  v2732 = v2720 & 0x1FFFF;
  v2666 = v120;
  v2665 = v34;
  v2672 = v71;
  v2684 = a5;
  v2687 = a4;
  if (v2744 >= v60 || *(_QWORD *)(v55 + 152) < v2744)
  {
    v308 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v308)
      ZinValidateTd<8u>::Test(v308, v309, v310, v311, v312, v313, v314, v315);
    return 3;
  }
  v2681 = v55;
  if (v215 >= v2738 || *(_QWORD *)(v55 + 160) < v215)
  {
    v355 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v355)
      ZinValidateTd<8u>::Test(v355, v356, v357, v358, v359, v360, v361, v362);
    return 3;
  }
  v387 = v57;
  v2663 = ((int)v57 - 1) * (uint64_t)(int)v2670;
  v2664 = v2729 & 0x7FFF;
  v388 = v2663 - v2742;
  if ((uint64_t)(v2663 - v2742) >= v2664)
  {
    v408 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v408)
      ZinValidateTd<8u>::Test(v408, v409, v410, v411, v412, v413, v414, v415);
    return 3;
  }
  v2662 = ((int)v2749 - 1) * (uint64_t)(int)v2734;
  v389 = v2662 - v2744;
  v2730 = (v2729 >> 16) & 0x7FFF;
  if ((uint64_t)(v2662 - v2744) >= v2730)
  {
    v424 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v424)
      ZinValidateTd<8u>::Test(v424, v425, v426, v427, v428, v429, v430, v431);
    return 3;
  }
  v2726 = v2725 & 0x7FFF;
  v390 = (int)(v2726 - 1) * (uint64_t)(int)v2676 - v215;
  v2728 = v2727 & 0x7FFF;
  if (v390 >= v2728)
  {
    v440 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v440)
      ZinValidateTd<8u>::Test(v440, v441, v442, v443, v444, v445, v446, v447);
    return 3;
  }
  v391 = v60;
  if (v5 >> 4)
  {
    if ((v388 & 0x8000000000000000) != 0)
    {
      v464 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v464)
        ZinValidateTd<8u>::Test(v464, v465, v466, v467, v468, v469, v470, v471);
      return 3;
    }
    if ((v389 & 0x8000000000000000) != 0)
    {
      v480 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v480)
        ZinValidateTd<8u>::Test(v480, v481, v482, v483, v484, v485, v486, v487);
      return 3;
    }
    if (v390 < 0)
    {
      v504 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v504)
        ZinValidateTd<8u>::Test(v504, v505, v506, v507, v508, v509, v510, v511);
      return 3;
    }
  }
  if ((uint64_t)(v388 + ((v2705 - 1 + v2670) & -(uint64_t)v2670)) < v2664)
  {
    v392 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v392)
      ZinValidateTd<6u>::Test(v392, v393, v394, v395, v396, v397, v398, v399);
    return 3;
  }
  if ((uint64_t)(v389 + ((v2734 + v60 - 1) & -v2734)) < v2730)
  {
    v456 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v456)
      ZinValidateTd<6u>::Test(v456, v457, v458, v459, v460, v461, v462, v463);
    return 3;
  }
  if ((uint64_t)(v390 + ((v2738 + v2676 - 1) & -v2676)) < v2728)
  {
    v488 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v488)
      ZinValidateTd<8u>::Test(v488, v489, v490, v491, v492, v493, v494, v495);
    return 3;
  }
  v512 = *(_QWORD *)(v2681 + 368);
  v2661 = (v2676 * v212) * (unint64_t)(v2670 * v2734);
  if (v2661 > v512)
  {
    v513 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v513)
      ZinValidateTd<8u>::Test(v513, v514, v515, v516, v517, v518, v519, v520);
    return 3;
  }
  v2660 = v2707 * v213 * (unint64_t)(v2715 * v2709);
  if (v2660 > v512)
  {
    v529 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v529)
      ZinValidateTd<8u>::Test(v529, v530, v531, v532, v533, v534, v535, v536);
    return 3;
  }
  if (v2715 * (unint64_t)v57 > *(_QWORD *)(v2681 + 320))
  {
    v545 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v545)
      ZinValidateTd<8u>::Test(v545, v546, v547, v548, v549, v550, v551, v552);
    return 3;
  }
  if (v2709 * (unint64_t)v2749 > *(_QWORD *)(v2681 + 336))
  {
    v561 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v561)
      ZinValidateTd<8u>::Test(v561, v562, v563, v564, v565, v566, v567, v568);
    return 3;
  }
  if (v2707 * (unint64_t)v2726 > *(_QWORD *)(v2681 + 352))
  {
    v585 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v585)
      ZinValidateTd<8u>::Test(v585, v586, v587, v588, v589, v590, v591, v592);
    return 3;
  }
  if ((v5 & 0x20000000) == 0 && ((v65 >> 14) & 1) != 0)
  {
    v602 = v212 / v2740;
    if (v212 % v2740)
    {
      v603 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v603)
        ZinValidateTd<8u>::Test(v603, v604, v605, v606, v607, v608, v609, v610);
      return 3;
    }
    v631 = v213 / v602;
    if (v213 % v602)
    {
      v632 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v632)
        ZinValidateTd<8u>::Test(v632, v633, v634, v635, v636, v637, v638, v639);
      return 3;
    }
    if (v631 > 1 << v214)
    {
      v656 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v656)
        ZinValidateTd<8u>::Test(v656, v657, v658, v659, v660, v661, v662, v663);
      return 3;
    }
    if (v631 < 1 << v214 && v631 << v225 < v213)
    {
      v664 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v664)
        ZinValidateTd<8u>::Test(v664, v665, v666, v667, v668, v669, v670, v671);
      return 3;
    }
    if (v631 >= 2 && (v602 & ((1 << v225) + 0x1FFFF)) != 0)
    {
      v680 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v680)
        ZinValidateTd<8u>::Test(v680, v681, v682, v683, v684, v685, v686, v687);
      return 3;
    }
  }
  if ((_DWORD)v36 == 2)
  {
    if ((_DWORD)v2670 == 2)
    {
      if (*(_QWORD *)(v2681 + 80) < v2705)
      {
        v688 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v688)
          ZinValidateTd<6u>::Test(v688, v689, v690, v691, v692, v693, v694, v695);
        return 3;
      }
    }
    else if (*(_QWORD *)(v2681 + 88) < v2705)
    {
      v704 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v704)
        ZinValidateTd<8u>::Test(v704, v705, v706, v707, v708, v709, v710, v711);
      return 3;
    }
  }
  else if ((_DWORD)v2670 == 2)
  {
    if (*(_QWORD *)(v2681 + 56) < v2705)
    {
      v696 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v696)
        ZinValidateTd<6u>::Test(v696, v697, v698, v699, v700, v701, v702, v703);
      return 3;
    }
  }
  else if (*(_QWORD *)(v2681 + 64) < v2705)
  {
    v712 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v712)
      ZinValidateTd<8u>::Test(v712, v713, v714, v715, v716, v717, v718, v719);
    return 3;
  }
  if ((_DWORD)v2734 == 2)
  {
    if (*(_QWORD *)(v2681 + 104) < v60)
    {
      v720 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v720)
        ZinValidateTd<6u>::Test(v720, v721, v722, v723, v724, v725, v726, v727);
      return 3;
    }
  }
  else if (*(_QWORD *)(v2681 + 112) < v60)
  {
    v728 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v728)
      ZinValidateTd<8u>::Test(v728, v729, v730, v731, v732, v733, v734, v735);
    return 3;
  }
  if (v119)
  {
    if ((_DWORD)v2676 == 2)
    {
      if (*(_QWORD *)(v2681 + 176) < v2738)
      {
        v736 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v736)
          ZinValidateTd<8u>::Test(v736, v737, v738, v739, v740, v741, v742, v743);
        return 3;
      }
    }
    else if (*(_QWORD *)(v2681 + 168) < v2738)
    {
      v752 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v752)
        ZinValidateTd<8u>::Test(v752, v753, v754, v755, v756, v757, v758, v759);
      return 3;
    }
  }
  else if ((_DWORD)v2676 == 2)
  {
    if (*(_QWORD *)(v2681 + 120) < v2738)
    {
      v744 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v744)
        ZinValidateTd<8u>::Test(v744, v745, v746, v747, v748, v749, v750, v751);
      return 3;
    }
  }
  else if (*(_QWORD *)(v2681 + 128) < v2738)
  {
    v760 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v760)
      ZinValidateTd<8u>::Test(v760, v761, v762, v763, v764, v765, v766, v767);
    return 3;
  }
  v2658 = (v2721 >> 21) & 0x1F;
  v2659 = v2724 & 0xF;
  v2656 = v2671 - 7;
  v2657 = (v2721 >> 26) & 0x1F;
  v2722 = (v2721 >> 16) & 0x1F;
  if (!(v5 >> 4))
    goto LABEL_582;
  if ((*(_BYTE *)(a3 + 966) & 7) != 0 && ZinValidateTd<8u>::ValidatePEIndex(a3, (_QWORD *)v2681))
  {
    v768 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v768)
      ZinValidateTd<8u>::Test(v768, v769, v770, v771, v772, v773, v774, v775);
    return 3;
  }
  if (v2715 != 1 || v2709 != 1 || v2707 != 1)
  {
    v266 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v266)
      return 3;
    goto LABEL_733;
  }
  if ((_DWORD)v2676 != 1)
  {
    v416 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v416)
      return 3;
    goto LABEL_432;
  }
  if ((_DWORD)v2738 != 1)
  {
    v371 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v371)
      return 3;
    goto LABEL_434;
  }
  if ((_DWORD)v2736 != (_DWORD)v2732)
  {
    v242 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v242)
      return 3;
LABEL_104:
    ZinValidateTd<10u>::Test(v242, v243, v244, v245, v246, v247, v248, v249);
    return 3;
  }
  if ((_DWORD)v2728 != v2726)
  {
    v784 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v784)
      ZinValidateTd<8u>::Test(v784, v785, v786, v787, v788, v789, v790, v791);
    return 3;
  }
  if (v70 == 2)
  {
    v154 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v154)
      return 3;
    goto LABEL_731;
  }
  if (*(_QWORD *)(v2681 + 976) > v2659)
  {
    v792 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v792)
      ZinValidateTd<8u>::Test(v792, v793, v794, v795, v796, v797, v798, v799);
    return 3;
  }
  if (v2658 > v2722)
  {
    v800 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v800)
      ZinValidateTd<8u>::Test(v800, v801, v802, v803, v804, v805, v806, v807);
    return 3;
  }
  if (v2657 > v2722)
  {
    v808 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v808)
      ZinValidateTd<8u>::Test(v808, v809, v810, v811, v812, v813, v814, v815);
    return 3;
  }
  if (v2722 >= v2672)
  {
    v824 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v824)
      ZinValidateTd<8u>::Test(v824, v825, v826, v827, v828, v829, v830, v831);
    return 3;
  }
  if (v2749 - v2722 + v2658 + v2657 > *(_QWORD *)(v2681 + 1008) * (v2672 - v2722))
  {
    v816 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v816)
      ZinValidateTd<8u>::Test(v816, v817, v818, v819, v820, v821, v822, v823);
    return 3;
  }
  v832 = v2723 & 3;
  if (v2671 != 8 && v2671 != 1)
  {
    if (v2742 | v2744)
    {
      v865 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v865)
        ZinValidateTd<8u>::Test(v865, v866, v867, v868, v869, v870, v871, v872);
      return 3;
    }
    if ((_DWORD)v2705 == 1 && (_DWORD)v391 == 1)
    {
      if ((_DWORD)v2670 != 1)
      {
        v881 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v881)
          ZinValidateTd<8u>::Test(v881, v882, v883, v884, v885, v886, v887, v888);
        return 3;
      }
      if ((_DWORD)v2730 != (_DWORD)v2749)
      {
        v897 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v897)
          ZinValidateTd<8u>::Test(v897, v898, v899, v900, v901, v902, v903, v904);
        return 3;
      }
      if ((_DWORD)v2664 != (_DWORD)v387)
      {
        v913 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v913)
          ZinValidateTd<8u>::Test(v913, v914, v915, v916, v917, v918, v919, v920);
        return 3;
      }
      if ((v2748 & 0x100) != 0)
      {
        if ((v2748 & 1) == 0 && (_DWORD)v2664 != 1)
        {
          v929 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v929)
            ZinValidateTd<8u>::Test(v929, v930, v931, v932, v933, v934, v935, v936);
          return 3;
        }
        if ((v2748 & 2) == 0 && (_DWORD)v2730 != 1)
        {
          v953 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v953)
            ZinValidateTd<8u>::Test(v953, v954, v955, v956, v957, v958, v959, v960);
          return 3;
        }
      }
      if ((v2748 & 0x200) != 0)
      {
        if (v2671 != 4 && ((v2748 >> 4) & 1) == 0 && (_DWORD)v2664 != 1)
        {
          v945 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v945)
            ZinValidateTd<8u>::Test(v945, v946, v947, v948, v949, v950, v951, v952);
          return 3;
        }
        if (v2671 != 4 && ((v2748 >> 5) & 1) == 0 && (_DWORD)v2730 != 1)
        {
          v969 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v969)
            ZinValidateTd<8u>::Test(v969, v970, v971, v972, v973, v974, v975, v976);
          return 3;
        }
      }
      if (v2671 != 4)
        goto LABEL_511;
      if ((v2748 & 1) == 0)
      {
        if ((v2748 & 2) == 0)
        {
          if ((v2748 & 0x10) == 0)
          {
            if ((v2748 & 0x20) == 0)
              goto LABEL_555;
            v849 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (!v849)
              return 3;
LABEL_476:
            ZinValidateTd<17u>::Test(v849, v850, v851, v852, v853, v854, v855, v856);
            return 3;
          }
          v1001 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v1001)
            return 3;
LABEL_559:
          ZinValidateTd<17u>::Test(v1001, v1002, v1003, v1004, v1005, v1006, v1007, v1008);
          return 3;
        }
        v977 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v977)
          return 3;
LABEL_542:
        ZinValidateTd<17u>::Test(v977, v978, v979, v980, v981, v982, v983, v984);
        return 3;
      }
      v961 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v961)
        return 3;
LABEL_535:
      ZinValidateTd<17u>::Test(v961, v962, v963, v964, v965, v966, v967, v968);
      return 3;
    }
    v194 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v194)
      return 3;
LABEL_80:
    ZinValidateTd<19u>::Test(v194, v195, v196, v197, v198, v199, v200, v201);
    return 3;
  }
  if (*(_QWORD *)(v2681 + 144) < v2742)
  {
    v833 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v833)
      ZinValidateTd<8u>::Test(v833, v834, v835, v836, v837, v838, v839, v840);
    return 3;
  }
  if (*(_QWORD *)(v2681 + 152) < v2744)
  {
    v841 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v841)
      ZinValidateTd<8u>::Test(v841, v842, v843, v844, v845, v846, v847, v848);
    return 3;
  }
  if (*(_QWORD *)(v2681 + 1016) < v2705)
  {
    v857 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v857)
      ZinValidateTd<8u>::Test(v857, v858, v859, v860, v861, v862, v863, v864);
    return 3;
  }
  if (*(_QWORD *)(v2681 + 1024) < v391)
  {
    v873 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v873)
      ZinValidateTd<8u>::Test(v873, v874, v875, v876, v877, v878, v879, v880);
    return 3;
  }
  if ((uint64_t)(v2705 - v2742 + v2663) < v2664)
  {
    v889 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v889)
      ZinValidateTd<8u>::Test(v889, v890, v891, v892, v893, v894, v895, v896);
    return 3;
  }
  if ((uint64_t)(v391 - v2744 + v2662) < v2730)
  {
    v905 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v905)
      ZinValidateTd<8u>::Test(v905, v906, v907, v908, v909, v910, v911, v912);
    return 3;
  }
  if ((v2748 & 8) != 0)
  {
    v937 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v937)
      ZinValidateTd<8u>::Test(v937, v938, v939, v940, v941, v942, v943, v944);
    return 3;
  }
  if ((v2748 & 1) != 0)
  {
    v961 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v961)
      return 3;
    goto LABEL_535;
  }
  if ((v2748 & 2) != 0)
  {
    v977 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v977)
      return 3;
    goto LABEL_542;
  }
  if ((v2748 & 4) != 0)
  {
    v985 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v985)
      ZinValidateTd<8u>::Test(v985, v986, v987, v988, v989, v990, v991, v992);
    return 3;
  }
  if ((v2748 & 0x10) != 0)
  {
    v1001 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v1001)
      return 3;
    goto LABEL_559;
  }
  if ((v2748 & 0x20) != 0)
  {
    v849 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v849)
      return 3;
    goto LABEL_476;
  }
  if ((v2748 & 0x40) != 0)
  {
    v1685 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1685)
      ZinValidateTd<8u>::Test(v1685, v1686, v1687, v1688, v1689, v1690, v1691, v1692);
    return 3;
  }
  if (v2671 == 1)
  {
    if ((v2748 & 0x80) != 0)
    {
      v1717 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1717)
        ZinValidateTd<8u>::Test(v1717, v1718, v1719, v1720, v1721, v1722, v1723, v1724);
      return 3;
    }
    if ((v2748 & 0x200) != 0)
    {
      v1749 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1749)
        ZinValidateTd<8u>::Test(v1749, v1750, v1751, v1752, v1753, v1754, v1755, v1756);
      return 3;
    }
  }
  if ((v2748 & 0x100) != 0)
  {
    v1701 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1701)
      ZinValidateTd<8u>::Test(v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708);
    return 3;
  }
  if ((v2748 & 0x400) != 0)
  {
    v1741 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1741)
      ZinValidateTd<8u>::Test(v1741, v1742, v1743, v1744, v1745, v1746, v1747, v1748);
    return 3;
  }
LABEL_511:
  if (v2656 > 0xFFFFFFFD || v2671 == 8 || v2671 == 1)
  {
    if (v832 == 3)
    {
      if (v70 != 3)
      {
        v993 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v993)
          ZinValidateTd<8u>::Test(v993, v994, v995, v996, v997, v998, v999, v1000);
        return 3;
      }
      goto LABEL_565;
    }
    if (v832 == 2)
    {
      if (v70 != 1)
      {
        v921 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v921)
          ZinValidateTd<8u>::Test(v921, v922, v923, v924, v925, v926, v927, v928);
        return 3;
      }
      goto LABEL_565;
    }
    if (!v70)
    {
      if ((v2723 & 0x600) != 0)
      {
        v1009 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v1009)
          ZinValidateTd<8u>::Test(v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1016);
        return 3;
      }
      goto LABEL_565;
    }
    v178 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v178)
      return 3;
LABEL_557:
    ZinValidateTd<10u>::Test(v178, v179, v180, v181, v182, v183, v184, v185);
    return 3;
  }
LABEL_555:
  if (v70)
  {
    v178 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v178)
      return 3;
    goto LABEL_557;
  }
LABEL_565:
  if (v2656 >= 0xFFFFFFFE)
  {
    if (v832 == 1)
    {
      v1025 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1025)
        ZinValidateTd<8u>::Test(v1025, v1026, v1027, v1028, v1029, v1030, v1031, v1032);
      return 3;
    }
    if ((_DWORD)v2722)
    {
      v1645 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1645)
        ZinValidateTd<8u>::Test(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652);
      return 3;
    }
    if (*(_QWORD *)(v2681 + 960) < v2732
      && (v2664 > 1 << v2659
       || v2730 > 1 << (v2724 >> 4)
       || (_DWORD)v2728 != 1))
    {
      v1693 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1693)
        ZinValidateTd<8u>::Test(v1693, v1694, v1695, v1696, v1697, v1698, v1699, v1700);
      return 3;
    }
  }
  if ((v2748 & 0x100) != 0 && ((v2748 >> 9) & 1) != 0 && *(_QWORD *)(v2681 + 1064) < v2736)
  {
    v1017 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1017)
      ZinValidateTd<8u>::Test(v1017, v1018, v1019, v1020, v1021, v1022, v1023, v1024);
    return 3;
  }
  if ((v2748 & 0x400) != 0)
  {
    if (*(_QWORD *)(v2681 + 1072) < v2732)
    {
      v1653 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1653)
        ZinValidateTd<8u>::Test(v1653, v1654, v1655, v1656, v1657, v1658, v1659, v1660);
      return 3;
    }
    if (v2671 - 2 <= 2)
    {
      if ((_DWORD)v387 != 1)
      {
        v1709 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v1709)
          ZinValidateTd<8u>::Test(v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1716);
        return 3;
      }
      if ((_DWORD)v2749 != 1)
      {
        v1677 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v1677)
          ZinValidateTd<8u>::Test(v1677, v1678, v1679, v1680, v1681, v1682, v1683, v1684);
        return 3;
      }
    }
  }
  if (*(_BYTE *)(v2681 + 1336)
    && (v2748 & 1) != 0
    && ((v2748 >> 1) & 1) == 0
    && (*(_DWORD *)(a3 + 964) & 0x70000) == 0x40000
    && *(_QWORD *)(v2681 + 320) - 8 < (unint64_t)v2664)
  {
    v1033 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1033)
      ZinValidateTd<17u>::Test(v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040);
    return 3;
  }
LABEL_582:
  if (v119 == 5)
  {
    if (!*(_BYTE *)(v2681 + 1128))
    {
      v1049 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1049)
        ZinValidateTd<8u>::Test(v1049, v1050, v1051, v1052, v1053, v1054, v1055, v1056);
      return 3;
    }
    if (v2693 != 2)
    {
      v1057 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1057)
        ZinValidateTd<8u>::Test(v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064);
      return 3;
    }
    if (v2673 != 2)
    {
      v1065 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1065)
        ZinValidateTd<8u>::Test(v1065, v1066, v1067, v1068, v1069, v1070, v1071, v1072);
      return 3;
    }
    if (v16 != 4 || v7 != 4 || v6 != 4)
    {
      v1073 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1073)
        ZinValidateTd<8u>::Test(v1073, v1074, v1075, v1076, v1077, v1078, v1079, v1080);
      return 3;
    }
    if ((v2672 & 0xF) != 0 && (_DWORD)v2672 != 8)
    {
      v1041 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1041)
        ZinValidateTd<8u>::Test(v1041, v1042, v1043, v1044, v1045, v1046, v1047, v1048);
      return 3;
    }
    if ((_DWORD)v2722 || (_DWORD)v2658 || (_DWORD)v2657)
    {
      v1089 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1089)
        ZinValidateTd<8u>::Test(v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096);
      return 3;
    }
    if ((_DWORD)v2664 != (_DWORD)v387 || (_DWORD)v2730 != (_DWORD)v2749 || (_DWORD)v2728 != v2726)
    {
      v1097 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1097)
        ZinValidateTd<8u>::Test(v1097, v1098, v1099, v1100, v1101, v1102, v1103, v1104);
      return 3;
    }
    if ((v2736 & 1) != 0)
    {
      v1105 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1105)
        ZinValidateTd<8u>::Test(v1105, v1106, v1107, v1108, v1109, v1110, v1111, v1112);
      return 3;
    }
    if ((_DWORD)v2705 != 1 || (_DWORD)v391 != 1 || (_DWORD)v2738 != 1)
    {
      v1113 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v1113)
        return 3;
      goto LABEL_627;
    }
    if ((_DWORD)v2670 != 1 || (_DWORD)v2734 != 1 || (_DWORD)v2676 != 1)
    {
      v1121 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v1121)
        return 3;
      goto LABEL_629;
    }
    if (v2715 != 1 || v2709 != 1 || v2707 != 1)
    {
      v266 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v266)
        return 3;
      goto LABEL_733;
    }
    if ((*(_BYTE *)(a3 + 548) & 0xC) != 0)
    {
      v1081 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1081)
        ZinValidateTd<8u>::Test(v1081, v1082, v1083, v1084, v1085, v1086, v1087, v1088);
      return 3;
    }
    if (v2664 >= 9)
    {
      v1140 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1140)
        ZinValidateTd<8u>::Test(v1140, v1141, v1142, v1143, v1144, v1145, v1146, v1147);
      return 3;
    }
    v1129 = *(_DWORD *)(a3 + 1072);
    if (((v2701 >> 14) & 1) != 0)
      v1130 = 0;
    else
      v1130 = (v5 >> 19) & 7;
    v1131 = v1130 + v2668;
    if ((v1129 & 0x100000) != 0)
    {
      if (v2736 != 2 * v2732)
      {
        v1164 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v1164)
          ZinValidateTd<8u>::Test(v1164, v1165, v1166, v1167, v1168, v1169, v1170, v1171);
        return 3;
      }
      if (v2668 >= 4)
      {
        v1172 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v1172)
          ZinValidateTd<8u>::Test(v1172, v1173, v1174, v1175, v1176, v1177, v1178, v1179);
        return 3;
      }
      if ((v2701 & 0x4000) != 0 && v2740 != 2 << v2668)
      {
        v1148 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v1148)
          ZinValidateTd<8u>::Test(v1148, v1149, v1150, v1151, v1152, v1153, v1154, v1155);
        return 3;
      }
      if (v1131 < ((v1129 >> 8) & 7))
      {
        v1188 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v1188)
          ZinValidateTd<8u>::Test(v1188, v1189, v1190, v1191, v1192, v1193, v1194, v1195);
        return 3;
      }
    }
    else
    {
      if ((_DWORD)v2732 != (_DWORD)v2736)
      {
        v1156 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v1156)
          ZinValidateTd<8u>::Test(v1156, v1157, v1158, v1159, v1160, v1161, v1162, v1163);
        return 3;
      }
      if (v2668 >= 4 && (v2668 != 4 || (v1129 & 0x400) != 0))
      {
        v1204 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v1204)
          ZinValidateTd<8u>::Test(v1204, v1205, v1206, v1207, v1208, v1209, v1210, v1211);
        return 3;
      }
      if ((v2701 & 0x4000) != 0 && v2740 != 1 << v2668)
      {
        v1132 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v1132)
          ZinValidateTd<8u>::Test(v1132, v1133, v1134, v1135, v1136, v1137, v1138, v1139);
        return 3;
      }
      if (v1131 <= ((v1129 >> 8) & 7))
      {
        v1180 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v1180)
          ZinValidateTd<8u>::Test(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1187);
        return 3;
      }
    }
    if ((v2701 & 0x4000) != 0)
    {
      if ((v2720 & ~(-1 << v2668)) != 0)
      {
        v1212 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v1212)
          ZinValidateTd<8u>::Test(v1212, v1213, v1214, v1215, v1216, v1217, v1218, v1219);
        return 3;
      }
      if (v2740 != (_DWORD)v2736)
      {
        if ((*(_DWORD *)(a3 + 864) & 3) == 2
          && (_DWORD)v2736 != 1
          && 1 << v1131 < ((*(_DWORD *)(a3 + 864) >> 8) & 0xFu) << (v2736 >= v2740))
        {
          v1597 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v1597)
            ZinValidateTd<8u>::Test(v1597, v1598, v1599, v1600, v1601, v1602, v1603, v1604);
          return 3;
        }
        if ((*(_DWORD *)(a3 + 912) & 3) == 2
          && (_DWORD)v2732 != 1
          && 1 << v1131 < ((*(_DWORD *)(a3 + 912) >> 8) & 0xFu) << (v2736 >= v2740))
        {
          v1605 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v1605)
            ZinValidateTd<8u>::Test(v1605, v1606, v1607, v1608, v1609, v1610, v1611, v1612);
          return 3;
        }
      }
    }
    else if ((_DWORD)v2732 != 1 << v1131)
    {
      v1196 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1196)
        ZinValidateTd<8u>::Test(v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203);
      return 3;
    }
    if ((v2697 & 8) == 0)
    {
      v1220 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1220)
        ZinValidateTd<8u>::Test(v1220, v1221, v1222, v1223, v1224, v1225, v1226, v1227);
      return 3;
    }
    if ((v2697 & 0x10) != 0)
    {
      v1589 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1589)
        ZinValidateTd<8u>::Test(v1589, v1590, v1591, v1592, v1593, v1594, v1595, v1596);
      return 3;
    }
    if ((v2697 & 0x4000) != 0)
    {
      v1629 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1629)
        ZinValidateTd<8u>::Test(v1629, v1630, v1631, v1632, v1633, v1634, v1635, v1636);
      return 3;
    }
    if ((*(_DWORD *)(a3 + 1052) & 3) != 2)
    {
      v1637 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1637)
        ZinValidateTd<8u>::Test(v1637, v1638, v1639, v1640, v1641, v1642, v1643, v1644);
      return 3;
    }
  }
  v1228 = *(_DWORD *)(a3 + 1076) & 3;
  if (v224 <= 2 && v1228)
  {
    v1229 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1229)
      ZinValidateTd<8u>::Test(v1229, v1230, v1231, v1232, v1233, v1234, v1235, v1236);
    return 3;
  }
  if (v1228 && !ZinSeedUtils::ValidateHWSeeds((unsigned int *)(a3 + 1080), v214, v212, (unsigned int *)a4))
  {
    v1246 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1246)
      ZinValidateTd<8u>::Test(v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253);
    return 3;
  }
  if (*(_BYTE *)(v2681 + 1234))
  {
    v1237 = *(_QWORD *)(v2681 + 368);
    if (v2661 > v1237)
    {
      v1238 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1238)
        ZinValidateTd<8u>::Test(v1238, v1239, v1240, v1241, v1242, v1243, v1244, v1245);
      return 3;
    }
    if (v2660 > v1237)
    {
      v1263 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1263)
        ZinValidateTd<8u>::Test(v1263, v1264, v1265, v1266, v1267, v1268, v1269, v1270);
      return 3;
    }
  }
  else
  {
    v1254 = *(_QWORD *)(v2681 + 368);
    if ((v2670 * v2734 * v2736) * (unint64_t)v2666 > v1254)
    {
      v1255 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1255)
        ZinValidateTd<6u>::Test(v1255, v1256, v1257, v1258, v1259, v1260, v1261, v1262);
      return 3;
    }
    if (v2715 * v2709 * v2732 * (unint64_t)v2666 > v1254)
    {
      v1271 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1271)
        ZinValidateTd<6u>::Test(v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278);
      return 3;
    }
  }
  if ((v2718 & 8) != 0)
  {
    v1287 = v2712 & 3;
    if (v1287 == 2)
    {
      v1288 = 1.25;
    }
    else if (v1287 == 3)
    {
      v1288 = 4.0;
    }
    else
    {
      v1288 = 1.0;
      if (v1287 == 1)
        v1288 = 2.0;
    }
    v1297 = (v2712 >> 24) & 0xF;
    if (v5 >> 4)
    {
      v1298 = v1287 == 1 && v2673 == 2;
      if (v1298)
        v1288 = 2.0;
      v1299 = (1 << v2659) >> (v2693 == 2);
      if (((v2748 >> 10) & 1) != 0)
        v1299 = v2720 & 0x1FFFF;
      if ((((uint64_t)(float)(v1288 * (float)v1299) * v1297) & 0x3FLL) == 0
        || v2656 > 0xFFFFFFFD
        || v387 <= 1 << v2659)
      {
        goto LABEL_703;
      }
      v1300 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v1300)
        return 3;
    }
    else
    {
      v1308 = 0x100u >> (BYTE2(v5) & 7);
      v1309 = (1 << v2667 << v2668);
      if ((v5 & 0x10000000) != 0)
        v1310 = v2732 > v1309;
      else
        v1310 = (*(_BYTE *)(a3 + 548) & 0xC) == 0 && v387 > v1308;
      v1311 = !v1310;
      v1312 = v1308 >> (v2693 == 2);
      if ((v5 & 0x10000000) == 0)
        v1309 = v1312 * v2715;
      if ((uint64_t)(((uint64_t)(float)(v1288 * (float)v1309) * v1297) & 0x800000000000003FLL) < 1 || v1311)
      {
        v1313 = 0;
        v1314 = WORD1(v2712) & 7;
        v1315 = 1;
        v1316 = 4;
        do
        {
          if ((v1315 & (v2712 >> 28)) != 0)
            ++v1313;
          v1315 *= 2;
          --v1316;
        }
        while (v1316);
        v1310 = v1297 > v1313;
        v1317 = v1297 - v1313;
        if (!v1310)
        {
          v1337 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v1337)
            ZinValidateTd<6u>::Test(v1337, v1338, v1339, v1340, v1341, v1342, v1343, v1344);
          return 3;
        }
        if ((v5 & 0x10000000) != 0)
        {
          if (v387 > v1312 && (v1312 * v2715 % v1317 || v1314 != 0))
          {
            v1346 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v1346)
              ZinValidateTd<8u>::Test(v1346, v1347, v1348, v1349, v1350, v1351, v1352, v1353);
            return 3;
          }
        }
        else
        {
          v1318 = (1 << (v2667 + v2668));
          if (v2732 > v1318)
          {
            if (v1318 % v1317)
            {
              v1319 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v1319)
                ZinValidateTd<8u>::Test(v1319, v1320, v1321, v1322, v1323, v1324, v1325, v1326);
              return 3;
            }
            if (v1314)
            {
              v1386 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v1386)
                ZinValidateTd<8u>::Test(v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393);
              return 3;
            }
          }
        }
        goto LABEL_703;
      }
      v1300 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v1300)
        return 3;
    }
    ZinValidateTd<17u>::Test(v1300, v1301, v1302, v1303, v1304, v1305, v1306, v1307);
    return 3;
  }
LABEL_703:
  if ((*(_BYTE *)(a3 + 1056) & 0x40) != 0)
  {
    if (v2715 != 1 || v2709 != 1 || v2707 != 1)
    {
      v266 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v266)
        return 3;
      goto LABEL_733;
    }
    if ((_DWORD)v2670 == 1 && (_DWORD)v2734 == 1 && (_DWORD)v2676 == 1)
    {
      if ((_DWORD)v2705 == 1 && (_DWORD)v391 == 1 && (_DWORD)v2738 == 1)
      {
        if (v2736 <= 1)
        {
          v1354 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v1354)
            ZinValidateTd<8u>::Test(v1354, v1355, v1356, v1357, v1358, v1359, v1360, v1361);
          return 3;
        }
        if ((v2701 & 0x4000) != 0)
        {
          v1370 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v1370)
            ZinValidateTd<8u>::Test(v1370, v1371, v1372, v1373, v1374, v1375, v1376, v1377);
          return 3;
        }
        if ((*(_DWORD *)(a3 + 548) & 0xC) == 4)
        {
          v1289 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v1289)
            ZinValidateTd<8u>::Test(v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296);
          return 3;
        }
        if ((v2697 & 8) != 0)
        {
          v1405 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v1405)
            ZinValidateTd<8u>::Test(v1405, v1406, v1407, v1408, v1409, v1410, v1411, v1412);
          return 3;
        }
        if ((v5 & 8) == 0)
          goto LABEL_705;
        goto LABEL_728;
      }
      v1113 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v1113)
        return 3;
LABEL_627:
      ZinValidateTd<10u>::Test(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120);
      return 3;
    }
    v1121 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v1121)
      return 3;
LABEL_629:
    ZinValidateTd<10u>::Test(v1121, v1122, v1123, v1124, v1125, v1126, v1127, v1128);
    return 3;
  }
  if ((v5 & 8) == 0)
    goto LABEL_705;
  if (v2715 != 1)
  {
    v496 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v496)
      return 3;
    goto LABEL_778;
  }
  if (v2709 != 1)
  {
    v521 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v521)
      return 3;
    goto LABEL_791;
  }
  if (v2707 != 1)
  {
    v537 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v537)
      return 3;
    goto LABEL_800;
  }
LABEL_728:
  if ((v5 & 0x10000000) != 0)
  {
    v1362 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1362)
      ZinValidateTd<17u>::Test(v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1369);
    return 3;
  }
  if (v70 == 2)
  {
    v154 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v154)
      return 3;
    goto LABEL_731;
  }
  if ((v2693 == 2) != (v2673 == 2))
  {
    v1378 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1378)
      ZinValidateTd<8u>::Test(v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385);
    return 3;
  }
  v1394 = v387 << (v2693 == 2);
  v1395 = ((uint64_t)(double)(uint64_t)((v2705 - 1) / v2670) + v387) << (v2693 == 2);
  v1396 = (*(_DWORD *)(a3 + 548) >> 2) & 3;
  if (v1396 == 3)
  {
    if (v1394 <= *(_QWORD *)(v2681 + 1176))
    {
      v1465 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1465)
        ZinValidateTd<8u>::Test(v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472);
      return 3;
    }
    if (v1395 > *(_QWORD *)(v2681 + 1184))
    {
      v1432 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1432)
        ZinValidateTd<8u>::Test(v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439);
      return 3;
    }
  }
  else if (v1396 == 2)
  {
    if (v1394 <= *(_QWORD *)(v2681 + 1160))
    {
      v1473 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1473)
        ZinValidateTd<8u>::Test(v1473, v1474, v1475, v1476, v1477, v1478, v1479, v1480);
      return 3;
    }
    if (v1395 > *(_QWORD *)(v2681 + 1168))
    {
      v1397 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1397)
        ZinValidateTd<8u>::Test(v1397, v1398, v1399, v1400, v1401, v1402, v1403, v1404);
      return 3;
    }
  }
LABEL_705:
  if ((*(_BYTE *)(a3 + 1162) & 7) != 0)
  {
    v1279 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1279)
      ZinValidateTd<6u>::Test(v1279, v1280, v1281, v1282, v1283, v1284, v1285, v1286);
    return 3;
  }
  result = ZinValidateTd<8u>::CheckKMEMBufferSizes(v2681, a3);
  if ((_DWORD)result)
    return result;
  result = ZinValidateTd<8u>::VerifyL2InplaceAllocation((_DWORD *)a3);
  if ((_DWORD)result)
    return result;
  result = ZinValidateTd<8u>::CheckInRangeDmaAccess(v2681, v2690, a3);
  if ((_DWORD)result)
    return result;
  v1327 = *(_DWORD *)(a3 + 864);
  v1328 = (v1327 & 3) - 1;
  if (v1328 <= 1 && (*(_BYTE *)(a3 + 576) & 1) == 0)
  {
    v1329 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1329)
      ZinValidateTd<8u>::Test(v1329, v1330, v1331, v1332, v1333, v1334, v1335, v1336);
    return 3;
  }
  v1413 = *(_DWORD *)(a3 + 868);
  v1414 = (v1413 & 3) - 1;
  if (v1414 <= 1 && (*(_BYTE *)(a3 + 580) & 1) == 0)
  {
    v1415 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1415)
      ZinValidateTd<8u>::Test(v1415, v1416, v1417, v1418, v1419, v1420, v1421, v1422);
    return 3;
  }
  if ((v2678 & 7) != 0)
  {
    v1423 = *(unsigned __int8 *)(a3 + 683);
    if (v1328 > 1)
    {
      if (((v1423 ^ (v1413 >> 8)) & 0xF) != 0)
      {
        v1440 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v1440)
          ZinValidateTd<8u>::Test(v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447);
        return 3;
      }
    }
    else if (((v1423 ^ (v1327 >> 8)) & 0xF) != 0)
    {
      v1424 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v1424)
        return 3;
      goto LABEL_832;
    }
  }
  else
  {
    if (v1328 <= 1 && ((*(unsigned __int8 *)(a3 + 683) ^ (v1327 >> 8)) & 0xF) != 0)
    {
      v1424 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v1424)
        return 3;
LABEL_832:
      ZinValidateTd<17u>::Test(v1424, v1425, v1426, v1427, v1428, v1429, v1430, v1431);
      return 3;
    }
    if (v1414 <= 1 && ((*(unsigned __int8 *)(a3 + 687) ^ (v1413 >> 8)) & 0xF) != 0)
    {
      v1448 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1448)
        ZinValidateTd<8u>::Test(v1448, v1449, v1450, v1451, v1452, v1453, v1454, v1455);
      return 3;
    }
  }
  if (ZinExtractLSBs(*(unsigned __int16 *)(a3 + 708), 5) != v1327 >> 27)
  {
    v1481 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1481)
      ZinValidateTd<8u>::Test(v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488);
    return 3;
  }
  if ((v2678 & 7) != 0 && (*(_BYTE *)(a3 + 580) & 1) != 0)
  {
    v1489 = *(_DWORD *)(a3 + 868);
    if (ZinExtractLSBs(*(unsigned __int16 *)(a3 + 708), 5) != v1489 >> 27)
    {
      v1509 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1509)
        ZinValidateTd<8u>::Test(v1509, v1510, v1511, v1512, v1513, v1514, v1515, v1516);
      return 3;
    }
  }
  else
  {
    v1456 = *(_DWORD *)(a3 + 868);
    if (ZinExtractLSBs(*(unsigned __int16 *)(a3 + 724), 5) != v1456 >> 27)
    {
      v1457 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1457)
        ZinValidateTd<8u>::Test(v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464);
      return 3;
    }
  }
  v1490 = *(_DWORD *)(a3 + 576);
  if ((v1490 & 0xD0) != 0xC0)
  {
    v1491 = v1490 >> 4;
    if (v1491 != 2 && v1491 != 4)
    {
      v1525 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1525)
        ZinValidateTd<8u>::Test(v1525, v1526, v1527, v1528, v1529, v1530, v1531, v1532);
      return 3;
    }
  }
  v1492 = *(_DWORD *)(a3 + 584);
  if ((v1492 & 0xD0) != 0xC0)
  {
    v1493 = v1492 >> 4;
    if (v1493 != 2 && v1493 != 4)
    {
      v1549 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1549)
        ZinValidateTd<8u>::Test(v1549, v1550, v1551, v1552, v1553, v1554, v1555, v1556);
      return 3;
    }
  }
  if ((v1492 & 0xD) != 0xC)
  {
    v1494 = v1492 & 0xF;
    if (v1494 != 2 && v1494 != 4)
    {
      v1557 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1557)
        ZinValidateTd<8u>::Test(v1557, v1558, v1559, v1560, v1561, v1562, v1563, v1564);
      return 3;
    }
  }
  v1495 = *(_DWORD *)(a3 + 580);
  if ((v1495 & 0xD0) != 0xC0)
  {
    v1496 = v1495 >> 4;
    if (v1496 != 2 && v1496 != 4)
    {
      v1565 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1565)
        ZinValidateTd<8u>::Test(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572);
      return 3;
    }
  }
  v1497 = *(_DWORD *)(a3 + 588);
  if ((v1497 & 0xD0) != 0xC0)
  {
    v1498 = v1497 >> 4;
    if (v1498 != 2 && v1498 != 4)
    {
      v1573 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1573)
        ZinValidateTd<8u>::Test(v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580);
      return 3;
    }
  }
  if ((v1497 & 0xD) != 0xC)
  {
    v1499 = v1497 & 0xF;
    if (v1499 != 2 && v1499 != 4)
    {
      v1581 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1581)
        ZinValidateTd<8u>::Test(v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588);
      return 3;
    }
  }
  v1500 = *(_DWORD *)(a3 + 1104);
  if ((v1500 & 0xF0) != 0x30 && (v1500 & 0xD0) != 0xD0)
  {
    v1501 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1501)
      ZinValidateTd<8u>::Test(v1501, v1502, v1503, v1504, v1505, v1506, v1507, v1508);
    return 3;
  }
  v1517 = 68;
  v1518 = MEMORY[0x24BDACB70];
  do
  {
    v1519 = *(_DWORD *)(a3 + v1517) >> 4;
    if ((*(_DWORD *)(a3 + v1517) & 0xD0) != 0xC0 && v1519 != 2 && v1519 != 4)
    {
      if (os_log_type_enabled(v1518, OS_LOG_TYPE_ERROR))
        ZinValidateTd<8u>::Test(v2753, v2754, v1523);
      if (v1519 != 4 && v1519 != 2)
        return 3;
    }
    v1517 += 4;
  }
  while (v1517 != 132);
  v1533 = *(_DWORD *)(a3 + 276);
  v2752 = xmmword_207A7FF40;
  std::set<unsigned int>::set[abi:ne180100]((uint64_t)v2750, (unsigned int *)&v2752, 4);
  if (!v2751[0])
    goto LABEL_916;
  v1534 = v1533 >> 4;
  v1535 = v2751;
  v1536 = v2751[0];
  do
  {
    v1537 = v1536;
    v1538 = v1535;
    v1539 = *((_DWORD *)v1536 + 7);
    if (v1539 >= v1534)
      v1535 = (_QWORD **)v1536;
    else
      ++v1536;
    v1536 = (_QWORD *)*v1536;
  }
  while (v1536);
  if (v1535 == v2751 || (v1539 >= v1534 ? (v1540 = v1537) : (v1540 = v1538), v1534 < *((_DWORD *)v1540 + 7)))
  {
LABEL_916:
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v2750, v2751[0]);
    v1541 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1541)
      ZinValidateTd<8u>::Test(v1541, v1542, v1543, v1544, v1545, v1546, v1547, v1548);
    return 3;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v2750, v2751[0]);
  v1613 = *(_DWORD *)(a3 + 260);
  v2752 = xmmword_207A7FF40;
  std::set<unsigned int>::set[abi:ne180100]((uint64_t)v2750, (unsigned int *)&v2752, 4);
  if (!v2751[0])
    goto LABEL_951;
  v1614 = v1613 >> 4;
  v1615 = v2751;
  v1616 = v2751[0];
  do
  {
    v1617 = v1616;
    v1618 = v1615;
    v1619 = *((_DWORD *)v1616 + 7);
    if (v1619 >= v1614)
      v1615 = (_QWORD **)v1616;
    else
      ++v1616;
    v1616 = (_QWORD *)*v1616;
  }
  while (v1616);
  if (v1615 == v2751 || (v1619 >= v1614 ? (v1620 = v1617) : (v1620 = v1618), v1614 < *((_DWORD *)v1620 + 7)))
  {
LABEL_951:
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v2750, v2751[0]);
    v1621 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1621)
      ZinValidateTd<8u>::Test(v1621, v1622, v1623, v1624, v1625, v1626, v1627, v1628);
    return 3;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v2750, v2751[0]);
  v1661 = *(_DWORD *)(a3 + 292);
  v2752 = xmmword_207A7FF50;
  std::set<unsigned int>::set[abi:ne180100]((uint64_t)v2750, (unsigned int *)&v2752, 4);
  if (!v2751[0])
    goto LABEL_976;
  v1662 = v1661 >> 4;
  v1663 = v2751;
  v1664 = v2751[0];
  do
  {
    v1665 = v1664;
    v1666 = v1663;
    v1667 = *((_DWORD *)v1664 + 7);
    if (v1667 >= v1662)
      v1663 = (_QWORD **)v1664;
    else
      ++v1664;
    v1664 = (_QWORD *)*v1664;
  }
  while (v1664);
  if (v1663 == v2751 || (v1667 >= v1662 ? (v1668 = v1665) : (v1668 = v1666), v1662 < *((_DWORD *)v1668 + 7)))
  {
LABEL_976:
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v2750, v2751[0]);
    v1669 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1669)
      ZinValidateTd<8u>::Test(v1669, v1670, v1671, v1672, v1673, v1674, v1675, v1676);
    return 3;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v2750, v2751[0]);
  v1725 = *(_DWORD *)(a3 + 308);
  v2752 = xmmword_207A7FF50;
  std::set<unsigned int>::set[abi:ne180100]((uint64_t)v2750, (unsigned int *)&v2752, 4);
  if (!v2751[0])
    goto LABEL_1006;
  v1726 = v1725 >> 4;
  v1727 = v2751;
  v1728 = v2751[0];
  do
  {
    v1729 = v1728;
    v1730 = v1727;
    v1731 = *((_DWORD *)v1728 + 7);
    if (v1731 >= v1726)
      v1727 = (_QWORD **)v1728;
    else
      ++v1728;
    v1728 = (_QWORD *)*v1728;
  }
  while (v1728);
  if (v1727 == v2751 || (v1731 >= v1726 ? (v1732 = v1729) : (v1732 = v1730), v1726 < *((_DWORD *)v1732 + 7)))
  {
LABEL_1006:
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v2750, v2751[0]);
    v1733 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1733)
      ZinValidateTd<8u>::Test(v1733, v1734, v1735, v1736, v1737, v1738, v1739, v1740);
    return 3;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v2750, v2751[0]);
  if ((*(_BYTE *)(a3 + 696) & 1) != 0
    || (*(_BYTE *)(a3 + 776) & 7) != 0
    || (v2671 | 2) != 2
    && (v2730 >= 2 && *(_DWORD *)(a3 + 600) <= 0x3Fu && ((v2748 >> 1) & 1) == 0
     || v2736 >= 2 && *(_DWORD *)(a3 + 604) <= 0x3Fu && ((v2748 >> 3) & 1) == 0
     || v2728 >= 2 && *(_DWORD *)(a3 + 608) <= 0x3Fu && ((v2748 >> 2) & 1) == 0
     || v2666 >= 2 && *(_DWORD *)(a3 + 612) <= 0x3Fu))
  {
    if ((*(_DWORD *)(a3 + 576) & 0xF0) == 0x40)
    {
      v1757 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1757)
        ZinValidateTd<8u>::Test(v1757, v1758, v1759, v1760, v1761, v1762, v1763, v1764);
      return 3;
    }
    v1765 = *(_DWORD *)(a3 + 584);
    if ((v1765 & 0xF) == 4)
    {
      v1766 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1766)
        ZinValidateTd<8u>::Test(v1766, v1767, v1768, v1769, v1770, v1771, v1772, v1773);
      return 3;
    }
    if ((v1765 & 0xF0) == 0x40)
    {
      v1774 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1774)
        ZinValidateTd<8u>::Test(v1774, v1775, v1776, v1777, v1778, v1779, v1780, v1781);
      return 3;
    }
  }
  if ((*(_BYTE *)(a3 + 712) & 1) != 0 || (*(_BYTE *)(a3 + 776) & 7) != 0)
  {
LABEL_1052:
    if ((*(_DWORD *)(a3 + 580) & 0xF0) == 0x40)
    {
      v1782 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1782)
        ZinValidateTd<8u>::Test(v1782, v1783, v1784, v1785, v1786, v1787, v1788, v1789);
      return 3;
    }
    v1790 = *(_DWORD *)(a3 + 588);
    if ((v1790 & 0xF) == 4)
    {
      v1791 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1791)
        ZinValidateTd<8u>::Test(v1791, v1792, v1793, v1794, v1795, v1796, v1797, v1798);
      return 3;
    }
    if ((v1790 & 0xF0) == 0x40)
    {
      v1799 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1799)
        ZinValidateTd<8u>::Test(v1799, v1800, v1801, v1802, v1803, v1804, v1805, v1806);
      return 3;
    }
LABEL_1061:
    if (v2671 > 5 || ((1 << v2671) & 0x25) == 0)
      goto LABEL_1113;
    goto LABEL_1063;
  }
  if ((v2671 | 2) != 2)
  {
    if ((v2730 < 2 || *(_DWORD *)(a3 + 624) > 0x3Fu || ((v2748 >> 5) & 1) != 0)
      && (v2736 < 2 || *(_DWORD *)(a3 + 628) > 0x3Fu || ((v2748 >> 7) & 1) != 0)
      && (v2728 < 2 || *(_DWORD *)(a3 + 632) > 0x3Fu || ((v2748 >> 6) & 1) != 0)
      && (v2666 < 2 || *(_DWORD *)(a3 + 636) > 0x3Fu))
    {
      goto LABEL_1061;
    }
    goto LABEL_1052;
  }
LABEL_1063:
  if ((*(_BYTE *)(a3 + 966) & 7) == 0 && (*(_DWORD *)(a3 + 500) & 0xC) != 8)
  {
    v1816 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1816)
      ZinValidateTd<8u>::Test(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823);
    return 3;
  }
  if (!v2671)
  {
    v1807 = *(_DWORD *)(a3 + 540);
    if ((v1807 & 0xF0) != 0x10)
    {
      v1824 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1824)
        ZinValidateTd<8u>::Test(v1824, v1825, v1826, v1827, v1828, v1829, v1830, v1831);
      return 3;
    }
    if ((v1807 & 0xF) != 9)
    {
      v1832 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1832)
        ZinValidateTd<8u>::Test(v1832, v1833, v1834, v1835, v1836, v1837, v1838, v1839);
      return 3;
    }
    if (*(_DWORD *)(a3 + 996) != 1065353216)
    {
      v1840 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1840)
        ZinValidateTd<8u>::Test(v1840, v1841, v1842, v1843, v1844, v1845, v1846, v1847);
      return 3;
    }
    if (*(_DWORD *)(a3 + 1004) != 1065353216)
    {
      v1848 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1848)
        ZinValidateTd<8u>::Test(v1848, v1849, v1850, v1851, v1852, v1853, v1854, v1855);
      return 3;
    }
    if (*(_DWORD *)(a3 + 1008) != 1065353216)
    {
      v1856 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1856)
        ZinValidateTd<8u>::Test(v1856, v1857, v1858, v1859, v1860, v1861, v1862, v1863);
      return 3;
    }
    if (*(_DWORD *)(a3 + 1000))
    {
      v1808 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1808)
        ZinValidateTd<8u>::Test(v1808, v1809, v1810, v1811, v1812, v1813, v1814, v1815);
      return 3;
    }
    if (*(_DWORD *)(a3 + 1012) != -8388608)
    {
      v1872 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1872)
        ZinValidateTd<8u>::Test(v1872, v1873, v1874, v1875, v1876, v1877, v1878, v1879);
      return 3;
    }
    if (*(_DWORD *)(a3 + 1016) != 2139095040)
    {
      v1880 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1880)
        ZinValidateTd<8u>::Test(v1880, v1881, v1882, v1883, v1884, v1885, v1886, v1887);
      return 3;
    }
    if (*(_DWORD *)(a3 + 1020) != -8388608)
    {
      v1888 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1888)
        ZinValidateTd<8u>::Test(v1888, v1889, v1890, v1891, v1892, v1893, v1894, v1895);
      return 3;
    }
    if (*(_DWORD *)(a3 + 1024) != 2139095040)
    {
      v1896 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1896)
        ZinValidateTd<8u>::Test(v1896, v1897, v1898, v1899, v1900, v1901, v1902, v1903);
      return 3;
    }
    if (*(_DWORD *)(a3 + 1028) != 1065353216)
    {
      v1904 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1904)
        ZinValidateTd<8u>::Test(v1904, v1905, v1906, v1907, v1908, v1909, v1910, v1911);
      return 3;
    }
    if (*(_DWORD *)(a3 + 1036) != 1065353216)
    {
      v1912 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1912)
        ZinValidateTd<8u>::Test(v1912, v1913, v1914, v1915, v1916, v1917, v1918, v1919);
      return 3;
    }
    if (*(_DWORD *)(a3 + 992))
    {
      v1864 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1864)
        ZinValidateTd<8u>::Test(v1864, v1865, v1866, v1867, v1868, v1869, v1870, v1871);
      return 3;
    }
    if (*(_DWORD *)(a3 + 1032))
    {
      v1920 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1920)
        ZinValidateTd<8u>::Test(v1920, v1921, v1922, v1923, v1924, v1925, v1926, v1927);
      return 3;
    }
    if (*(_DWORD *)(a3 + 1040))
    {
      v1928 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1928)
        ZinValidateTd<8u>::Test(v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1935);
      return 3;
    }
  }
LABEL_1113:
  v1936 = *(_DWORD *)(a3 + 1052);
  if ((v1936 & 4) == 0 && (*(_DWORD *)(a3 + 1052) & 0xF0) != 0x80)
  {
    v1937 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1937)
      ZinValidateTd<8u>::Test(v1937, v1938, v1939, v1940, v1941, v1942, v1943, v1944);
    return 3;
  }
  v1945 = *(_DWORD *)(a3 + 1056);
  if ((v1945 & 7) != 3 && (v1945 & 0xF00000) != 0x100000)
  {
    v1946 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1946)
      ZinValidateTd<8u>::Test(v1946, v1947, v1948, v1949, v1950, v1951, v1952, v1953);
    return 3;
  }
  v1954 = *(_DWORD *)(a3 + 576);
  if ((v1954 & 1) == 0)
  {
    if ((*(_DWORD *)(a3 + 576) & 0xF0) != 0x20)
    {
      v1964 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1964)
        ZinValidateTd<8u>::Test(v1964, v1965, v1966, v1967, v1968, v1969, v1970, v1971);
      return 3;
    }
    v1955 = *(_DWORD *)(a3 + 584);
    if ((v1955 & 0xF0) != 0x20)
    {
      v1972 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1972)
        ZinValidateTd<8u>::Test(v1972, v1973, v1974, v1975, v1976, v1977, v1978, v1979);
      return 3;
    }
    if ((v1955 & 0xF) != 2)
    {
      v1980 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1980)
        ZinValidateTd<8u>::Test(v1980, v1981, v1982, v1983, v1984, v1985, v1986, v1987);
      return 3;
    }
    if ((v1954 & 0xFF00) != 0)
    {
      v1956 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1956)
        ZinValidateTd<8u>::Test(v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963);
      return 3;
    }
  }
  if ((*(_BYTE *)(a3 + 776) & 7) == 0)
  {
    v1988 = *(_DWORD *)(a3 + 580);
    if ((v1988 & 1) != 0)
      goto LABEL_1148;
    if ((*(_DWORD *)(a3 + 580) & 0xF0) == 0x20)
    {
      v1989 = *(_DWORD *)(a3 + 588);
      if ((v1989 & 0xF0) == 0x20)
      {
        if ((v1989 & 0xF) == 2)
        {
          if ((v1988 & 0xFF00) != 0)
          {
            v1990 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v1990)
              ZinValidateTd<8u>::Test(v1990, v1991, v1992, v1993, v1994, v1995, v1996, v1997);
            return 3;
          }
LABEL_1148:
          v2022 = *(_DWORD *)(a3 + 780);
          if ((v2022 & 0x7000) == 0x5000)
          {
            if ((v2022 & 0xE00) == 0xA00)
            {
              if ((v2022 & 0x1C0) == 0x140)
              {
                if ((v2022 & 0x38) == 0x28)
                {
                  if ((v2022 & 7) == 5)
                  {
                    v2023 = *(_DWORD *)(a3 + 784);
                    if ((v2023 & 0x70000000) == 0x50000000)
                    {
                      if ((v2023 & 0xE000000) == 0xA000000)
                      {
                        if ((v2023 & 0x1C00000) == 0x1400000)
                        {
                          if ((v2023 & 0x380000) == 0x280000)
                          {
                            if ((v2023 & 0x70000) == 0x50000)
                            {
                              if ((*(_DWORD *)(a3 + 784) & 0x7000) == 0x5000)
                              {
                                if ((*(_DWORD *)(a3 + 784) & 0xE00) == 0xA00)
                                {
                                  if ((*(_DWORD *)(a3 + 784) & 0x1C0) == 0x140)
                                  {
                                    if ((*(_DWORD *)(a3 + 784) & 0x38) == 0x28)
                                    {
                                      if ((*(_DWORD *)(a3 + 784) & 7) == 5)
                                      {
                                        v2024 = 0;
                                        while (1)
                                        {
                                          v2025 = *(_DWORD *)(a3 + 804 + v2024);
                                          if ((~v2025 & 0xF000000) != 0)
                                            break;
                                          if ((~v2025 & 0x70000) != 0)
                                          {
                                            v2163 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                            if (v2163)
                                              ZinValidateTd<8u>::Test(v2163, v2164, v2165, v2166, v2167, v2168, v2169, v2170);
                                            return 3;
                                          }
                                          if ((~v2025 & 0xF00) != 0)
                                          {
                                            v2171 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                            if (v2171)
                                              ZinValidateTd<8u>::Test(v2171, v2172, v2173, v2174, v2175, v2176, v2177, v2178);
                                            return 3;
                                          }
                                          if ((~v2025 & 7) != 0)
                                          {
                                            v2179 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                            if (v2179)
                                              ZinValidateTd<8u>::Test(v2179, v2180, v2181, v2182, v2183, v2184, v2185, v2186);
                                            return 3;
                                          }
                                          v2024 += 4;
                                          if (v2024 == 24)
                                            goto LABEL_1169;
                                        }
                                        v2155 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                        if (v2155)
                                          ZinValidateTd<8u>::Test(v2155, v2156, v2157, v2158, v2159, v2160, v2161, v2162);
                                      }
                                      else
                                      {
                                        v2147 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                        if (v2147)
                                          ZinValidateTd<8u>::Test(v2147, v2148, v2149, v2150, v2151, v2152, v2153, v2154);
                                      }
                                    }
                                    else
                                    {
                                      v2139 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                      if (v2139)
                                        ZinValidateTd<8u>::Test(v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146);
                                    }
                                  }
                                  else
                                  {
                                    v2131 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    if (v2131)
                                      ZinValidateTd<8u>::Test(v2131, v2132, v2133, v2134, v2135, v2136, v2137, v2138);
                                  }
                                }
                                else
                                {
                                  v2123 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                  if (v2123)
                                    ZinValidateTd<8u>::Test(v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130);
                                }
                              }
                              else
                              {
                                v2115 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                if (v2115)
                                  ZinValidateTd<8u>::Test(v2115, v2116, v2117, v2118, v2119, v2120, v2121, v2122);
                              }
                            }
                            else
                            {
                              v2107 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              if (v2107)
                                ZinValidateTd<8u>::Test(v2107, v2108, v2109, v2110, v2111, v2112, v2113, v2114);
                            }
                          }
                          else
                          {
                            v2099 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                            if (v2099)
                              ZinValidateTd<8u>::Test(v2099, v2100, v2101, v2102, v2103, v2104, v2105, v2106);
                          }
                        }
                        else
                        {
                          v2091 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          if (v2091)
                            ZinValidateTd<8u>::Test(v2091, v2092, v2093, v2094, v2095, v2096, v2097, v2098);
                        }
                      }
                      else
                      {
                        v2083 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (v2083)
                          ZinValidateTd<8u>::Test(v2083, v2084, v2085, v2086, v2087, v2088, v2089, v2090);
                      }
                    }
                    else
                    {
                      v2075 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      if (v2075)
                        ZinValidateTd<8u>::Test(v2075, v2076, v2077, v2078, v2079, v2080, v2081, v2082);
                    }
                  }
                  else
                  {
                    v2067 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    if (v2067)
                      ZinValidateTd<8u>::Test(v2067, v2068, v2069, v2070, v2071, v2072, v2073, v2074);
                  }
                }
                else
                {
                  v2059 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (v2059)
                    ZinValidateTd<8u>::Test(v2059, v2060, v2061, v2062, v2063, v2064, v2065, v2066);
                }
              }
              else
              {
                v2051 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (v2051)
                  ZinValidateTd<8u>::Test(v2051, v2052, v2053, v2054, v2055, v2056, v2057, v2058);
              }
            }
            else
            {
              v2043 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v2043)
                ZinValidateTd<8u>::Test(v2043, v2044, v2045, v2046, v2047, v2048, v2049, v2050);
            }
          }
          else
          {
            v2035 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v2035)
              ZinValidateTd<8u>::Test(v2035, v2036, v2037, v2038, v2039, v2040, v2041, v2042);
          }
          return 3;
        }
        v2014 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v2014)
          ZinValidateTd<8u>::Test(v2014, v2015, v2016, v2017, v2018, v2019, v2020, v2021);
      }
      else
      {
        v2006 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v2006)
          ZinValidateTd<8u>::Test(v2006, v2007, v2008, v2009, v2010, v2011, v2012, v2013);
      }
    }
    else
    {
      v1998 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1998)
        ZinValidateTd<8u>::Test(v1998, v1999, v2000, v2001, v2002, v2003, v2004, v2005);
    }
    return 3;
  }
LABEL_1169:
  v2026 = *(_DWORD *)(a3 + 1104);
  if ((v2026 & 1) == 0)
  {
    if ((*(_DWORD *)(a3 + 1104) & 0xF0) != 0x30)
    {
      v2187 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2187)
        ZinValidateTd<8u>::Test(v2187, v2188, v2189, v2190, v2191, v2192, v2193, v2194);
      return 3;
    }
    if ((v2026 & 0xFF00) != 0)
    {
      v2027 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2027)
        ZinValidateTd<8u>::Test(v2027, v2028, v2029, v2030, v2031, v2032, v2033, v2034);
      return 3;
    }
  }
  for (i = 0; i != 64; i += 4)
  {
    v2196 = *(_DWORD *)(a3 + i + 196);
    if (v2196 <= 0x3F)
    {
      v2207 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2207)
        ZinValidateTd<8u>::Test(v2207, v2208, v2209, v2210, v2211, v2212, v2213, v2214);
      return 3;
    }
    v2197 = *(_DWORD *)(a3 + i + 68);
    if ((v2197 & 1) == 0)
    {
      if ((*(_DWORD *)(a3 + i + 68) & 0xF0) != 0x20)
      {
        v2215 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v2215)
          ZinValidateTd<8u>::Test(v2215, v2216, v2217, v2218, v2219, v2220, v2221, v2222);
        return 3;
      }
      if ((v2196 & 0xFFFFFFC0) != 0x40)
      {
        v2223 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v2223)
          ZinValidateTd<8u>::Test(v2223, v2224, v2225, v2226, v2227, v2228, v2229, v2230);
        return 3;
      }
      if ((v2197 & 0xFF00) != 0)
      {
        v2231 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v2231)
          ZinValidateTd<8u>::Test(v2231, v2232, v2233, v2234, v2235, v2236, v2237, v2238);
        return 3;
      }
    }
  }
  v2198 = *(_DWORD *)(a3 + 280);
  if (v2198 <= 0x3F)
  {
    v2199 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2199)
      ZinValidateTd<8u>::Test(v2199, v2200, v2201, v2202, v2203, v2204, v2205, v2206);
    return 3;
  }
  if ((*(_DWORD *)(a3 + 276) & 1) == 0)
  {
    if ((*(_DWORD *)(a3 + 276) & 0xF0) == 0x20)
    {
      if ((v2198 & 0xFFFFFFC0) == 0x40)
        goto LABEL_1235;
      v2256 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2256)
        ZinValidateTd<8u>::Test(v2256, v2257, v2258, v2259, v2260, v2261, v2262, v2263);
    }
    else
    {
      v2248 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2248)
        ZinValidateTd<8u>::Test(v2248, v2249, v2250, v2251, v2252, v2253, v2254, v2255);
    }
    return 3;
  }
LABEL_1235:
  v2239 = *(_DWORD *)(a3 + 264);
  if (v2239 <= 0x3F)
  {
    v2240 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2240)
      ZinValidateTd<8u>::Test(v2240, v2241, v2242, v2243, v2244, v2245, v2246, v2247);
    return 3;
  }
  if ((*(_DWORD *)(a3 + 260) & 1) == 0)
  {
    if ((*(_DWORD *)(a3 + 260) & 0xF0) != 0x20)
    {
      v2273 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2273)
        ZinValidateTd<8u>::Test(v2273, v2274, v2275, v2276, v2277, v2278, v2279, v2280);
      return 3;
    }
    if ((v2239 & 0xFFFFFFC0) != 0x40)
    {
      v2281 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2281)
        ZinValidateTd<8u>::Test(v2281, v2282, v2283, v2284, v2285, v2286, v2287, v2288);
      return 3;
    }
  }
  v2264 = *(_DWORD *)(a3 + 296);
  if (v2264 <= 0x3F)
  {
    v2265 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2265)
      ZinValidateTd<8u>::Test(v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272);
    return 3;
  }
  if ((*(_DWORD *)(a3 + 292) & 1) == 0)
  {
    if ((*(_DWORD *)(a3 + 292) & 0xF0) != 0x20)
    {
      v2298 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2298)
        ZinValidateTd<8u>::Test(v2298, v2299, v2300, v2301, v2302, v2303, v2304, v2305);
      return 3;
    }
    if ((v2264 & 0xFFFFFFC0) != 0x40)
    {
      v2306 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2306)
        ZinValidateTd<8u>::Test(v2306, v2307, v2308, v2309, v2310, v2311, v2312, v2313);
      return 3;
    }
  }
  v2289 = *(_DWORD *)(a3 + 312);
  if (v2289 <= 0x3F)
  {
    v2290 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2290)
      ZinValidateTd<8u>::Test(v2290, v2291, v2292, v2293, v2294, v2295, v2296, v2297);
    return 3;
  }
  if ((*(_DWORD *)(a3 + 308) & 1) == 0)
  {
    if ((*(_DWORD *)(a3 + 308) & 0xF0) != 0x20)
    {
      v2324 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2324)
        ZinValidateTd<8u>::Test(v2324, v2325, v2326, v2327, v2328, v2329, v2330, v2331);
      return 3;
    }
    if ((v2289 & 0xFFFFFFC0) != 0x40)
    {
      v2332 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2332)
        ZinValidateTd<8u>::Test(v2332, v2333, v2334, v2335, v2336, v2337, v2338, v2339);
      return 3;
    }
  }
  v2314 = (*(_DWORD *)(a3 + 28) >> 3) & 1;
  v2315 = *(_DWORD *)(a3 + 1196);
  if (v2314 != ((v2315 >> 1) & 1))
  {
    v2340 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2340)
      ZinValidateTd<8u>::Test(v2340, v2341, v2342, v2343, v2344, v2345, v2346, v2347);
    return 3;
  }
  if ((~v2315 & 3) == 0)
  {
    v2316 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2316)
      ZinValidateTd<8u>::Test(v2316, v2317, v2318, v2319, v2320, v2321, v2322, v2323);
    return 3;
  }
  v2348 = *(_DWORD *)(a3 + 1204);
  if ((v2348 & 0xF0) != 0xE0)
  {
    v2358 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2358)
      ZinValidateTd<8u>::Test(v2358, v2359, v2360, v2361, v2362, v2363, v2364, v2365);
    return 3;
  }
  if (v2314)
  {
    if ((v2315 & 0x200) != 0)
      goto LABEL_1335;
  }
  else
  {
    if ((v2315 & 4) != 0)
    {
      v2366 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2366)
        ZinValidateTd<8u>::Test(v2366, v2367, v2368, v2369, v2370, v2371, v2372, v2373);
      return 3;
    }
    if ((v2315 & 8) != 0)
    {
      v2374 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v2374)
        return 3;
      goto LABEL_1295;
    }
    if ((v2315 & 0x10) != 0)
    {
      v2382 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2382)
        ZinValidateTd<8u>::Test(v2382, v2383, v2384, v2385, v2386, v2387, v2388, v2389);
      return 3;
    }
    if ((v2315 & 0x20) != 0)
    {
      v2390 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2390)
        ZinValidateTd<8u>::Test(v2390, v2391, v2392, v2393, v2394, v2395, v2396, v2397);
      return 3;
    }
    if ((v2315 & 0x40) != 0)
    {
      v2398 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2398)
        ZinValidateTd<8u>::Test(v2398, v2399, v2400, v2401, v2402, v2403, v2404, v2405);
      return 3;
    }
    if ((v2315 & 0x80) != 0)
    {
      v2406 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2406)
        ZinValidateTd<8u>::Test(v2406, v2407, v2408, v2409, v2410, v2411, v2412, v2413);
      return 3;
    }
    if ((v2315 & 0x100) != 0)
    {
      v2414 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2414)
        ZinValidateTd<8u>::Test(v2414, v2415, v2416, v2417, v2418, v2419, v2420, v2421);
      return 3;
    }
    if ((v2315 & 0x200) != 0)
    {
      v2422 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2422)
        ZinValidateTd<8u>::Test(v2422, v2423, v2424, v2425, v2426, v2427, v2428, v2429);
      return 3;
    }
    v2349 = *(_DWORD *)(a3 + 1200);
    if ((v2349 & 7) != 0)
    {
      v2350 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2350)
        ZinValidateTd<8u>::Test(v2350, v2351, v2352, v2353, v2354, v2355, v2356, v2357);
      return 3;
    }
    if ((v2349 & 0x1FF00) != 0x10000)
    {
      v2438 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2438)
        ZinValidateTd<8u>::Test(v2438, v2439, v2440, v2441, v2442, v2443, v2444, v2445);
      return 3;
    }
    if ((v2349 & 0xF00000) != 0)
    {
      v2430 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2430)
        ZinValidateTd<8u>::Test(v2430, v2431, v2432, v2433, v2434, v2435, v2436, v2437);
      return 3;
    }
    if ((v2348 & 0xC) != 0)
    {
      v2446 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2446)
        ZinValidateTd<8u>::Test(v2446, v2447, v2448, v2449, v2450, v2451, v2452, v2453);
      return 3;
    }
    if ((v2348 & 0xFF00) != 0)
    {
      v2454 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2454)
        ZinValidateTd<8u>::Test(v2454, v2455, v2456, v2457, v2458, v2459, v2460, v2461);
      return 3;
    }
    if (*(_DWORD *)(a3 + 1212) >= 0x80u)
    {
      v2470 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2470)
        ZinValidateTd<8u>::Test(v2470, v2471, v2472, v2473, v2474, v2475, v2476, v2477);
      return 3;
    }
    if ((*(_WORD *)(a3 + 1216) & 0x3FF) != 0)
    {
      v2462 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2462)
        ZinValidateTd<8u>::Test(v2462, v2463, v2464, v2465, v2466, v2467, v2468, v2469);
      return 3;
    }
    if ((*(_DWORD *)(a3 + 1220) & 0x3FFFFF80) != 0x80)
    {
      v2486 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2486)
        ZinValidateTd<8u>::Test(v2486, v2487, v2488, v2489, v2490, v2491, v2492, v2493);
      return 3;
    }
    if (*(_WORD *)(a3 + 1232))
    {
      v2478 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2478)
        ZinValidateTd<8u>::Test(v2478, v2479, v2480, v2481, v2482, v2483, v2484, v2485);
      return 3;
    }
    if ((*(_BYTE *)(a3 + 1240) & 1) != 0)
    {
      v2502 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2502)
        ZinValidateTd<8u>::Test(v2502, v2503, v2504, v2505, v2506, v2507, v2508, v2509);
      return 3;
    }
  }
  if (v2315 >= 0x10000)
  {
    v2510 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2510)
      ZinValidateTd<8u>::Test(v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517);
    return 3;
  }
  if ((*(_DWORD *)(a3 + 1224) & 0xFFE0000) != 0x20000)
  {
    v2518 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2518)
      ZinValidateTd<8u>::Test(v2518, v2519, v2520, v2521, v2522, v2523, v2524, v2525);
    return 3;
  }
LABEL_1335:
  if ((*(_DWORD *)(a3 + 1200) & 7) == 0 && (*(_DWORD *)(a3 + 1200) & 0xF0) != 0xA0)
  {
    v2494 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2494)
      ZinValidateTd<8u>::Test(v2494, v2495, v2496, v2497, v2498, v2499, v2500, v2501);
    return 3;
  }
  if ((v2315 & 0x20) == 0 && (unsigned __int16)*(_DWORD *)(a3 + 1228))
  {
    v2526 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2526)
      ZinValidateTd<8u>::Test(v2526, v2527, v2528, v2529, v2530, v2531, v2532, v2533);
    return 3;
  }
  if ((v2315 & 0x40) == 0 && *(_DWORD *)(a3 + 1228) >= 0x10000u)
  {
    v2534 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2534)
      ZinValidateTd<8u>::Test(v2534, v2535, v2536, v2537, v2538, v2539, v2540, v2541);
    return 3;
  }
  if ((v2315 & 0x80) == 0 && (*(_BYTE *)(a3 + 1240) & 1) == 0 && *(_BYTE *)(a3 + 1238))
  {
    v2542 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2542)
      ZinValidateTd<8u>::Test(v2542, v2543, v2544, v2545, v2546, v2547, v2548, v2549);
    return 3;
  }
  if ((v2315 & 0x100) == 0 && *(_BYTE *)(a3 + 1236))
  {
    v2550 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2550)
      ZinValidateTd<8u>::Test(v2550, v2551, v2552, v2553, v2554, v2555, v2556, v2557);
    return 3;
  }
  v2558 = *(_DWORD *)(a3 + 1240);
  if ((v2558 & 1) == 0)
  {
    if ((v2558 & 0xF0) != 0)
    {
      v2559 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2559)
        ZinValidateTd<8u>::Test(v2559, v2560, v2561, v2562, v2563, v2564, v2565, v2566);
      return 3;
    }
    if ((v2558 & 0xFF00) != 0)
    {
      v2567 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2567)
        ZinValidateTd<8u>::Test(v2567, v2568, v2569, v2570, v2571, v2572, v2573, v2574);
      return 3;
    }
    if ((v2558 & 0xFF0000) != 0)
    {
      v2575 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2575)
        ZinValidateTd<8u>::Test(v2575, v2576, v2577, v2578, v2579, v2580, v2581, v2582);
      return 3;
    }
    if (HIBYTE(v2558))
    {
      v2591 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2591)
        ZinValidateTd<8u>::Test(v2591, v2592, v2593, v2594, v2595, v2596, v2597, v2598);
      return 3;
    }
  }
  if (!v2665
    && (*(_DWORD *)(a3 + 548) & 0x20000000) != 0
    && v2666 >= 2
    && (uint64_t)((int)((v2732 >> (v2667 + v2668)) - 1) * (uint64_t)(*(_DWORD *)(a3 + 64) >> 6)
               + ((unint64_t)*(unsigned int *)(a3 + 196) >> 6)) > (uint64_t)((unint64_t)*(unsigned int *)(a3 + 60) >> 6)
    && (*(_BYTE *)(a3 + 44) & 2) != 0)
  {
    v2599 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2599)
      ZinValidateTd<8u>::Test(v2599, v2600, v2601, v2602, v2603, v2604, v2605, v2606);
    return 3;
  }
  if ((v2558 & (v2315 >> 7) & 1) != 0)
  {
    v2583 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2583)
      ZinValidateTd<8u>::Test(v2583, v2584, v2585, v2586, v2587, v2588, v2589, v2590);
    return 3;
  }
  if ((*(_DWORD *)(a3 + 1196) & 0x220) == 0x200)
  {
    v2607 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2607)
      ZinValidateTd<8u>::Test(v2607, v2608, v2609, v2610, v2611, v2612, v2613, v2614);
    return 3;
  }
  if ((*(_DWORD *)(a3 + 1196) & 0xA) == 2 && (v2687 & 1) == 0)
  {
    v2615 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2615)
      ZinValidateTd<8u>::Test(v2615, v2616, v2617, v2618, v2619, v2620, v2621, v2622);
    return 3;
  }
  if (v2687 && (v2684 & 1) == 0)
  {
    if ((v2315 & 2) == 0)
    {
      v2623 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v2623)
        ZinValidateTd<8u>::Test(v2623, v2624, v2625, v2626, v2627, v2628, v2629, v2630);
      return 3;
    }
    if ((v2315 & 8) != 0)
    {
      v2374 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v2374)
        return 3;
LABEL_1295:
      ZinValidateTd<19u>::Test(v2374, v2375, v2376, v2377, v2378, v2379, v2380, v2381);
      return 3;
    }
  }
  if (!(_DWORD)v2672)
  {
    v2639 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2639)
      ZinValidateTd<6u>::Test(v2639, v2640, v2641, v2642, v2643, v2644, v2645, v2646);
    return 3;
  }
  if ((*(_DWORD *)(a3 + 1056) & 7) != 5 && v2672 > v2749)
  {
    v2631 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2631)
      ZinValidateTd<6u>::Test(v2631, v2632, v2633, v2634, v2635, v2636, v2637, v2638);
    return 3;
  }
  if ((*(_DWORD *)(a3 + 1052) & 3) == 2)
    v2647 = v1936 >> 4;
  else
    v2647 = (v1936 >> 4) + 1;
  if (*(_QWORD *)(v2681 + 488) < (unint64_t)(1 << v2647))
  {
    v2648 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2648)
      ZinValidateTd<8u>::Test(v2648, v2649, v2650, v2651, v2652, v2653, v2654, v2655);
    return 3;
  }
  result = ZinValidateTd<8u>::ValidationForNonZeroFields(a3);
  if (!(_DWORD)result)
  {
    result = ZinValidateTd<8u>::CheckRedundantKDMARegisters(a3);
    if (!(_DWORD)result)
      return ZinValidateTd<8u>::ValidateFillLowerNEFirst(v2681, a3);
  }
  return result;
}

uint64_t ZinValidateTd<8u>::CheckPEReductionAccumulationRetention(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  unsigned int v8;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 == a1)
    return 0;
  LOBYTE(v2) = 0;
  v3 = 0;
  while (1)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 200);
    if ((v2 & 1) != 0)
      break;
    v5 = *(_DWORD *)(v4 + 996);
    v6 = v5 & 3;
LABEL_8:
    v8 = v5 & 0x800;
    v7 = v8 == 0;
    v2 = v8 >> 11;
    if (!v7)
      v3 = v6;
    v1 = *(_QWORD *)(v1 + 8);
    if (v1 == a1)
      return 0;
  }
  if ((*(_DWORD *)(v4 + 556) >> 4) - 7 >= 0xFFFFFFFE)
  {
    v5 = *(_DWORD *)(v4 + 996);
    v6 = v5 & 3;
    if (v6 == v3)
      goto LABEL_8;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinValidateTd<17u>::CheckPEReductionAccumulationRetention();
  return 3;
}

uint64_t ZinValidateTd<8u>::ValidateDepMode(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  _BYTE *v21;
  uint64_t v22;

  v1 = *(_QWORD *)(a1 + 8);
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (v1 == a1)
  {
    v2 = 0;
  }
  else
  {
    v2 = 0;
    v3 = v1;
    do
    {
      ++v2;
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != a1);
  }
  std::vector<ZinAneInstruction *>::__init_with_size[abi:ne180100]<std::__list_const_iterator<ZinAneInstruction *,void *>,std::__list_const_iterator<ZinAneInstruction *,void *>>((char *)&__p, v1, a1, v2);
  v4 = __p;
  if (v21 == __p)
  {
    v9 = 0;
    if (!__p)
      return v9;
    goto LABEL_25;
  }
  v5 = 0;
  while (1)
  {
    v6 = *(_QWORD *)(v4[v5] + 200);
    v7 = (*(_BYTE *)(v6 + 872) & 0xC) != 0;
    if ((*(_BYTE *)(v6 + 876) & 0xC) != 0)
      ++v7;
    if (v7 >= 2)
      break;
    v8 = *(unsigned int *)(v6 + 584);
    if ((v8 & 0x30000000) == 0x20000000)
    {
      v9 = ZinValidateTd<8u>::ValidateDepModeSrc1(*(_QWORD *)(v4[v5 - ((v8 >> 24) & 0xF) - 1] + 200) + 8, v6 + 8);
      if ((_DWORD)v9)
        goto LABEL_24;
      v4 = __p;
    }
    v10 = *(unsigned int *)(v6 + 588);
    if ((v10 & 0x30000000) == 0x20000000)
    {
      v9 = ZinValidateTd<8u>::ValidateDepModeSrc2(*(_QWORD *)(v4[v5 - ((v10 >> 24) & 0xF) - 1] + 200) + 8, v6 + 8);
      if ((_DWORD)v9)
        goto LABEL_24;
      v4 = __p;
    }
    if (++v5 >= (unint64_t)((v21 - (_BYTE *)v4) >> 3))
    {
      v9 = 0;
      goto LABEL_24;
    }
  }
  v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v11)
    ZinValidateTd<8u>::ValidateDepMode(v11, v12, v13, v14, v15, v16, v17, v18);
  v9 = 3;
LABEL_24:
  v4 = __p;
  if (__p)
  {
LABEL_25:
    v21 = v4;
    operator delete(v4);
  }
  return v9;
}

void sub_206E43680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinValidateTd<8u>::ValidateRCASDependency(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  BOOL v3;
  _DWORD *v4;
  int v5;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 == a1)
    return 0;
  v2 = 0;
  while (1)
  {
    v3 = v2;
    v4 = *(_DWORD **)(*(_QWORD *)(v1 + 16) + 200);
    v2 = (v4[266] & 7) == 5;
    if (!v3 || (v4[266] & 7) != 5)
      goto LABEL_10;
    v5 = v4[218];
    if ((v5 & 3) == 2)
      break;
    if ((v5 & 3) == 0 && (v5 & 0x20) == 0)
    {
      v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v7)
        ZinValidateTd<8u>::ValidateRCASDependency(v7, v8, v9, v10, v11, v12, v13, v14);
      return 3;
    }
LABEL_10:
    v1 = *(_QWORD *)(v1 + 8);
    if (v1 == a1)
      return 0;
  }
  if ((v4[146] & 0x30000001) != 1)
    goto LABEL_10;
  v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v15)
    ZinValidateTd<8u>::ValidateRCASDependency(v15, v16, v17, v18, v19, v20, v21, v22);
  return 3;
}

uint64_t ZinValidateTd<8u>::ValidateL2CircularBuffer(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 == a1)
    return 0;
  while (2)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 200);
    v3 = *(_DWORD *)(v2 + 948);
    switch(v3 & 7)
    {
      case 1u:
        v4 = *(_DWORD *)(v2 + 512) & 0x1FFFF;
        goto LABEL_9;
      case 2u:
        LOWORD(v5) = *(_WORD *)(v2 + 502);
        goto LABEL_7;
      case 3u:
        v5 = *(_DWORD *)(v2 + 504);
LABEL_7:
        v4 = v5 & 0x7FFF;
        goto LABEL_9;
      case 4u:
        v4 = *(_DWORD *)(v2 + 540) & 0x1FFF;
LABEL_9:
        if (!(unsigned __int16)*(_DWORD *)(v2 + 952)
          || v4 - (unsigned __int16)*(_DWORD *)(v2 + 952) <= (uint64_t)((unint64_t)*(unsigned int *)(v2 + 952) >> 16))
        {
          break;
        }
        v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v11)
          ZinValidateTd<8u>::ValidateL2CircularBuffer(v11, v12, v13, v14, v15, v16, v17, v18);
        return 3;
      default:
        v4 = 0;
        break;
    }
    v6 = 0;
    switch((v3 >> 4) & 7)
    {
      case 1u:
        v4 = *(_DWORD *)(v2 + 512) & 0x1FFFF;
        goto LABEL_17;
      case 2u:
        LOWORD(v7) = *(_WORD *)(v2 + 502);
        goto LABEL_15;
      case 3u:
        v7 = *(_DWORD *)(v2 + 504);
LABEL_15:
        v4 = v7 & 0x7FFF;
        goto LABEL_17;
      case 4u:
        v4 = *(_DWORD *)(v2 + 540) & 0x1FFF;
LABEL_17:
        if (!(unsigned __int16)*(_DWORD *)(v2 + 956)
          || v4 - (unsigned __int16)*(_DWORD *)(v2 + 956) <= (uint64_t)((unint64_t)*(unsigned int *)(v2 + 956) >> 16))
        {
          v6 = 1;
LABEL_20:
          switch((v3 >> 8) & 7)
          {
            case 0u:
              goto LABEL_30;
            case 1u:
              v4 = *(_DWORD *)(v2 + 516) & 0x1FFFFLL;
              goto LABEL_28;
            case 2u:
              LOWORD(v8) = *(_WORD *)(v2 + 522);
              goto LABEL_26;
            case 3u:
              v8 = *(_DWORD *)(v2 + 524);
LABEL_26:
              v4 = v8 & 0x7FFF;
              goto LABEL_28;
            case 4u:
              v4 = *(_DWORD *)(v2 + 540) & 0x1FFFLL;
              goto LABEL_28;
            default:
              if (!v6)
                goto LABEL_30;
LABEL_28:
              v9 = *(unsigned int *)(v2 + 960);
              if ((_WORD)v9 && v4 - (unsigned __int16)v9 > (uint64_t)(v9 >> 16))
              {
                v27 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (v27)
                  ZinValidateTd<8u>::ValidateL2CircularBuffer(v27, v28, v29, v30, v31, v32, v33, v34);
                return 3;
              }
LABEL_30:
              v1 = *(_QWORD *)(v1 + 8);
              if (v1 == a1)
                return 0;
              break;
          }
          continue;
        }
        v19 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v19)
          ZinValidateTd<8u>::ValidateL2CircularBuffer(v19, v20, v21, v22, v23, v24, v25, v26);
        return 3;
      default:
        goto LABEL_20;
    }
  }
}

uint64_t ZinValidateTd<8u>::ValidateCachePrefetchKernelTaskInterval(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint8_t buf[4];
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  v20 = 0;
  v21 = 0;
  v19 = 0;
  if (v3 == a1)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = v3;
    do
    {
      ++v4;
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != a1);
  }
  std::vector<ZinAneInstruction *>::__init_with_size[abi:ne180100]<std::__list_const_iterator<ZinAneInstruction *,void *>,std::__list_const_iterator<ZinAneInstruction *,void *>>((char *)&v19, v3, a1, v4);
  v6 = v19;
  if (v20 == v19)
  {
LABEL_27:
    v12 = 0;
    if (!v19)
      goto LABEL_32;
LABEL_31:
    v20 = v6;
    operator delete(v6);
    goto LABEL_32;
  }
  v7 = 0;
  v8 = 0;
  v9 = (v20 - v19) >> 3;
  if (a2 <= 1)
    v10 = 1;
  else
    v10 = a2;
  if (v9 <= 1)
    v11 = 1;
  else
    v11 = (v20 - v19) >> 3;
  v12 = 1;
  while (1)
  {
    v13 = *(_QWORD *)(*(_QWORD *)&v19[8 * v7] + 200);
    if ((*(_BYTE *)(v13 + 1205) & 2) != 0)
    {
      if (v8 <= v7)
      {
        v8 = v7;
        while (!a2)
        {
LABEL_25:
          if (++v8 == v9)
          {
            v8 = -1;
            goto LABEL_16;
          }
        }
        v14 = 0;
        v15 = *(_QWORD *)(*(_QWORD *)&v19[8 * v8] + 200);
        v16 = *(unsigned __int16 *)(v15 + 1206);
        v17 = v15 + 76;
        while (((v16 >> v14) & 1) == 0 || (*(_DWORD *)(v17 + 4 * v14) & 2) == 0)
        {
          if (v10 == ++v14)
            goto LABEL_25;
        }
      }
LABEL_16:
      if (v8 - v7 < *(unsigned __int16 *)(v13 + 1236))
        break;
    }
    v12 = ++v7 < v9;
    if (v7 == v11)
      goto LABEL_27;
  }
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    if (!v6)
      goto LABEL_32;
    goto LABEL_31;
  }
  *(_DWORD *)buf = 136315138;
  v23 = "cache_dma_pre_config.terminate_task_interval.kernel_task_interval <= find_next_terminating_kernel_src_dma_task_index(i) - i";
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s\n", buf, 0xCu);
  v6 = v19;
  if (v19)
    goto LABEL_31;
LABEL_32:
  if (v12)
    return 3;
  else
    return 0;
}

uint64_t ZinIrTdValidationUtil::ValidateDramCircularBuffer<8u>(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v5;
  int v6;
  int v7;
  int v8;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BOOL8 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BOOL8 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL8 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BOOL8 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  unsigned __int8 IsTileDmaSrc1Compressed;
  unsigned __int8 IsTileDmaSrc2Compressed;
  unsigned __int8 IsTileDmaDstCompressed;
  uint64_t v112;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 == a2)
    return 0;
  while (1)
  {
    v5 = *(_DWORD **)(*(_QWORD *)(v2 + 16) + 200);
    v112 = 0;
    v106 = (v5[148] >> 8) & 7;
    IsTileDmaSrc1Compressed = ZinGetRegisterProgramming<8u>::IsTileDmaSrc1Compressed((uint64_t)(v5 + 2));
    if ((IsTileDmaSrc1Compressed & 1) != 0)
    {
      v6 = 1;
    }
    else
    {
      if (ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaSrc1GranularityInX((uint64_t)(v5 + 2), a1, &v112))
      {
        v82 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v82)
          ZinIrTdValidationUtil::ValidateDramCircularBuffer<8u>(v82, v83, v84, v85, v86, v87, v88, v89);
        return 3;
      }
      v6 = IsTileDmaSrc1Compressed;
    }
    if (v106 == 1 && v6)
      break;
    if (v106 == 5)
    {
      v18 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v18)
        ZinIrTdValidationUtil::ValidateDramCircularBuffer<17u>(v18, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_29;
    }
    v112 = 0;
    v107 = (v5[149] >> 8) & 7;
    IsTileDmaSrc2Compressed = ZinGetRegisterProgramming<8u>::IsTileDmaSrc2Compressed((uint64_t)(v5 + 2));
    if ((IsTileDmaSrc2Compressed & 1) != 0)
    {
      v7 = 1;
    }
    else
    {
      if (ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaSrc2GranularityInX((uint64_t)(v5 + 2), a1, &v112))
      {
        v90 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v90)
          ZinIrTdValidationUtil::ValidateDramCircularBuffer<8u>(v90, v91, v92, v93, v94, v95, v96, v97);
        return 3;
      }
      v7 = IsTileDmaSrc2Compressed;
    }
    if (v107 == 1 && v7)
    {
      v34 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v34)
        ZinIrTdValidationUtil::ValidateDramCircularBuffer<17u>(v34, v35, v36, v37, v38, v39, v40, v41);
      goto LABEL_35;
    }
    if (v107 == 5)
    {
      v42 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v42)
        ZinIrTdValidationUtil::ValidateDramCircularBuffer<17u>(v42, v43, v44, v45, v46, v47, v48, v49);
LABEL_35:
      v50 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v50)
        ZinIrTdValidationUtil::ValidateDramCircularBuffer<8u>(v50, v51, v52, v53, v54, v55, v56, v57);
      return 3;
    }
    v112 = 0;
    v108 = (v5[279] >> 8) & 7;
    IsTileDmaDstCompressed = ZinGetRegisterProgramming<8u>::IsTileDmaDstCompressed((uint64_t)(v5 + 2));
    if ((IsTileDmaDstCompressed & 1) != 0)
    {
      v8 = 1;
    }
    else
    {
      if (ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaDstGranularityInX((uint64_t)(v5 + 2), a1, &v112))
      {
        v98 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v98)
          ZinIrTdValidationUtil::ValidateDramCircularBuffer<8u>(v98, v99, v100, v101, v102, v103, v104, v105);
        return 3;
      }
      v8 = IsTileDmaDstCompressed;
    }
    if (v108 == 1 && v8)
    {
      v58 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v58)
        ZinIrTdValidationUtil::ValidateDramCircularBuffer<17u>(v58, v59, v60, v61, v62, v63, v64, v65);
      goto LABEL_41;
    }
    if (v108 == 5)
    {
      v66 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v66)
        ZinIrTdValidationUtil::ValidateDramCircularBuffer<17u>(v66, v67, v68, v69, v70, v71, v72, v73);
LABEL_41:
      v74 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v74)
        ZinIrTdValidationUtil::ValidateDramCircularBuffer<8u>(v74, v75, v76, v77, v78, v79, v80, v81);
      return 3;
    }
    v2 = *(_QWORD *)(v2 + 8);
    if (v2 == a2)
      return 0;
  }
  v10 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v10)
    ZinIrTdValidationUtil::ValidateDramCircularBuffer<17u>(v10, v11, v12, v13, v14, v15, v16, v17);
LABEL_29:
  v26 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v26)
    ZinIrTdValidationUtil::ValidateDramCircularBuffer<8u>(v26, v27, v28, v29, v30, v31, v32, v33);
  return 3;
}

uint64_t ZinValidateTd<8u>::ValidatePEIndex(uint64_t a1, _QWORD *a2)
{
  unsigned int v2;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v2 = *(_DWORD *)(a1 + 548) >> 4;
  if (v2 <= 8 && ((1 << v2) & 0x112) != 0)
  {
    v4 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v4)
      ZinValidateTd<8u>::ValidatePEIndex(v4, v5, v6, v7, v8, v9, v10, v11);
    return 3;
  }
  if ((*(_BYTE *)(a1 + 864) & 3) != 0)
  {
    v13 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v13)
      ZinValidateTd<8u>::ValidatePEIndex(v13, v14, v15, v16, v17, v18, v19, v20);
    return 3;
  }
  if ((*(_BYTE *)(a1 + 868) & 3) != 0)
  {
    v21 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v21)
      ZinValidateTd<8u>::ValidatePEIndex(v21, v22, v23, v24, v25, v26, v27, v28);
    return 3;
  }
  if (v2 == 3 && ((*(_DWORD *)(a1 + 500) ^ (*(_DWORD *)(a1 + 500) >> 2)) & 3) != 0)
  {
    v29 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v29)
      ZinValidateTd<8u>::ValidatePEIndex(v29, v30, v31, v32, v33, v34, v35, v36);
    return 3;
  }
  v37 = *(_DWORD *)(a1 + 964);
  v38 = *(unsigned int *)(a1 + 512);
  v39 = v38 & 0x7FFF;
  v40 = *(_DWORD *)(a1 + 508) & 0x1FFFF;
  v41 = *(_DWORD *)(a1 + 544);
  switch(HIWORD(v37) & 7)
  {
    case 1:
      if (a2[48] > (unint64_t)(unsigned __int16)*(_DWORD *)(a1 + 964))
        return 0;
      v50 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v50)
        ZinValidateTd<8u>::ValidatePEIndex(v50, v51, v52, v53, v54, v55, v56, v57);
      return 3;
    case 2:
      v42 = HIBYTE(v37) & 1;
      v43 = (v41 >> 2) & 1;
      v39 = *(_DWORD *)(a1 + 516) & 0x7FFF;
      v44 = a2[44];
      goto LABEL_29;
    case 3:
      v45 = a2[42];
      if ((v41 & 2) != 0)
        return ZinValidateTd<8u>::ValidatePEIndexMaxIndexForNonBroadcastedIndex((unsigned __int16)*(_DWORD *)(a1 + 964), v45);
      v46 = (v38 >> 16) & 0x7FFF;
      v47 = (unsigned __int16)*(_DWORD *)(a1 + 964);
      return ZinValidateTd<8u>::ValidatePEIndexMaxIndexForBroadcastedIndex(v47, v46, v45);
    case 4:
      v45 = a2[40];
      if ((v41 & 0x100) != 0)
      {
        if ((v41 & 1) == 0)
        {
          v47 = (unsigned __int16)*(_DWORD *)(a1 + 964);
          v46 = v40;
          return ZinValidateTd<8u>::ValidatePEIndexMaxIndexForBroadcastedIndex(v47, v46, v45);
        }
      }
      else if ((v41 & 1) == 0)
      {
        v47 = (unsigned __int16)*(_DWORD *)(a1 + 964);
        v46 = v38 & 0x7FFF;
        return ZinValidateTd<8u>::ValidatePEIndexMaxIndexForBroadcastedIndex(v47, v46, v45);
      }
      return ZinValidateTd<8u>::ValidatePEIndexMaxIndexForNonBroadcastedIndex((unsigned __int16)*(_DWORD *)(a1 + 964), v45);
    case 5:
      v44 = a2[46];
      v42 = (v37 >> 25) & 1;
      v43 = (v41 >> 3) & 1;
      if ((v41 & 0x100) != 0)
      {
LABEL_29:
        v48 = (unsigned __int16)*(_DWORD *)(a1 + 964);
        v49 = v39;
      }
      else
      {
        v48 = (unsigned __int16)*(_DWORD *)(a1 + 964);
        v49 = v40;
      }
      return ZinValidateTd<8u>::ValidatePEIndexMaxIndex(v48, v49, v44, v43, v42);
    default:
      return 3;
  }
}

uint64_t ZinValidateTd<8u>::CheckKMEMBufferSizes(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  void *__p[3];

  v4 = ((unint64_t)*(unsigned int *)(a2 + 548) >> 19) & 7;
  v5 = 1 << v4;
  v6 = *(_DWORD *)(a2 + 1052);
  v38 = 0;
  std::vector<unsigned long>::vector(__p, 1 << v4, &v38);
  v7 = 0;
  v8 = (unint64_t *)__p[0];
  do
  {
    v8[v7] = (unint64_t)*(unsigned int *)(a2 + 196 + 4 * v7) >> 6;
    ++v7;
  }
  while (v5 != v7);
  v9 = *(int *)(a1 + 8);
  if (v5 < v9)
  {
    v10 = v9 - v5;
    v11 = (char *)(a2 + 4 * v5 + 68);
    while (1)
    {
      v12 = *v11;
      v11 += 4;
      if ((v12 & 1) != 0)
        break;
      if (!--v10)
        goto LABEL_7;
    }
    v21 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v21)
      ZinValidateTd<8u>::CheckKMEMBufferSizes(v21, v22, v23, v24, v25, v26, v27, v28);
    goto LABEL_19;
  }
LABEL_7:
  v13 = 0;
  if ((v6 & 0x100) == 0 && (_DWORD)v4)
  {
    v14 = 2;
    if (v5 > 2)
      v14 = 1 << v4;
    v17 = *v8;
    v15 = v8 + 1;
    v16 = v17;
    v18 = v14 - 1;
    while (1)
    {
      v20 = *v15++;
      v19 = v20;
      if (v20 > v16)
        break;
      v16 = v19;
      if (!--v18)
      {
        v13 = 0;
        goto LABEL_20;
      }
    }
    v29 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v29)
      ZinValidateTd<8u>::CheckKMEMBufferSizes(v29, v30, v31, v32, v33, v34, v35, v36);
LABEL_19:
    v13 = 3;
  }
LABEL_20:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v13;
}

uint64_t ZinValidateTd<8u>::VerifyL2InplaceAllocation(_DWORD *a1)
{
  int v1;
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BOOL8 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BOOL8 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL8 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BOOL8 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  _BOOL8 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BOOL8 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _BOOL8 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _BOOL8 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _BOOL8 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  _BOOL8 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t result;
  int v159;
  _BOOL8 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BOOL8 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _BOOL8 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _BOOL8 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _BOOL8 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _BOOL8 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _BOOL8 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _BOOL8 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _BOOL8 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _BOOL8 v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _BOOL8 v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _BOOL8 v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _BOOL8 v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  _BOOL8 v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;

  v1 = (a1[218] >> 4) & 0x1FFFF;
  v2 = a1[223];
  v3 = (a1[229] >> 4) & 0x1FFFF;
  v4 = a1[136];
  v5 = a1[137];
  v6 = v5 >> 4;
  if (v1 == v3)
  {
    v7 = a1[131];
    if ((v7 & 0x3F) != 1)
    {
      v18 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v18)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v18, v19, v20, v21, v22, v23, v24, v25);
      return 3;
    }
    if ((v7 & 0xFC0) != 0x40)
    {
      v26 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v26)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v26, v27, v28, v29, v30, v31, v32, v33);
      return 3;
    }
    v8 = a1[132];
    if ((v8 & 0x1F) != 1)
    {
      v34 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v34)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v34, v35, v36, v37, v38, v39, v40, v41);
      return 3;
    }
    if ((v7 & 0x30000000) != 0x10000000)
    {
      v42 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v42)
        ZinValidateTd<10u>::VerifyL2InplaceAllocation(v42, v43, v44, v45, v46, v47, v48, v49);
      return 3;
    }
    if (v7 >> 30 != 1)
    {
      v50 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v50)
        ZinValidateTd<10u>::VerifyL2InplaceAllocation(v50, v51, v52, v53, v54, v55, v56, v57);
      return 3;
    }
    if ((v8 & 0x6000) != 0x2000)
    {
      v58 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v58)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v58, v59, v60, v61, v62, v63, v64, v65);
      return 3;
    }
    if ((v7 & 0x6000) != 0x2000)
    {
      v66 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v66)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v66, v67, v68, v69, v70, v71, v72, v73);
      return 3;
    }
    if ((v7 & 0x18000) != 0x8000)
    {
      v74 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v74)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v74, v75, v76, v77, v78, v79, v80, v81);
      return 3;
    }
    if ((v8 & 0xC0) != 0x40)
    {
      v82 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v82)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v82, v83, v84, v85, v86, v87, v88, v89);
      return 3;
    }
    v9 = a1[134];
    if ((v9 & 0x1F0000) != 0)
    {
      v10 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v10)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v10, v11, v12, v13, v14, v15, v16, v17);
      return 3;
    }
    if ((v9 & 0x3E00000) != 0)
    {
      v90 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v90)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v90, v91, v92, v93, v94, v95, v96, v97);
      return 3;
    }
    if ((v9 & 0x7C000000) != 0)
    {
      v98 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v98)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v98, v99, v100, v101, v102, v103, v104, v105);
      return 3;
    }
    if (v6 >= 7)
    {
      v115 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v115)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v115, v116, v117, v118, v119, v120, v121, v122);
      return 3;
    }
    v106 = a1[128] ^ a1[123];
    if ((v106 & 0x7FFF) != 0)
    {
      v107 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v107)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v107, v108, v109, v110, v111, v112, v113, v114);
      return 3;
    }
    if ((v106 & 0x7FFF0000) != 0)
    {
      v123 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v123)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v123, v124, v125, v126, v127, v128, v129, v130);
      return 3;
    }
    if (((a1[129] ^ a1[124]) & 0x7FFF) != 0)
    {
      v131 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v131)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v131, v132, v133, v134, v135, v136, v137, v138);
      return 3;
    }
    if (!(v5 >> 4))
    {
      v147 = a1[133];
      v148 = v147 >> 16;
      if ((v147 & 0x4000) != 0
        && (a1[130] & 7) == 0
        && (a1[127] & 0x1FFFF) * (unint64_t)v148 != (a1[126] & 0x1FFFF))
      {
        v149 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v149)
          ZinValidateTd<8u>::VerifyL2InplaceAllocation(v149, v150, v151, v152, v153, v154, v155, v156);
        return 3;
      }
      if ((v5 & 0x10000000) != 0)
      {
        v224 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v224)
          ZinValidateTd<8u>::VerifyL2InplaceAllocation(v224, v225, v226, v227, v228, v229, v230, v231);
        return 3;
      }
      if (((a1[219] >> 4) & 0x1FFFF) * (unint64_t)v148 < (((unint64_t)a1[230] >> 4) & 0x1FFFF))
      {
        v208 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v208)
          ZinValidateTd<8u>::VerifyL2InplaceAllocation(v208, v209, v210, v211, v212, v213, v214, v215);
        return 3;
      }
      return 0;
    }
    if ((a1[137] & 0xE0) != 0x20 && v6 != 4)
    {
      v139 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v139)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v139, v140, v141, v142, v143, v144, v145, v146);
      return 3;
    }
    if ((v4 & 0x400) != 0)
    {
      v216 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v216)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v216, v217, v218, v219, v220, v221, v222, v223);
      return 3;
    }
    if ((v4 & 0x100) != 0)
    {
      v232 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v232)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v232, v233, v234, v235, v236, v237, v238, v239);
      return 3;
    }
    if ((v4 & 8) != 0)
    {
      v240 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v240)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v240, v241, v242, v243, v244, v245, v246, v247);
      return 3;
    }
    if ((v4 & 1) != 0)
    {
      v248 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v248)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v248, v249, v250, v251, v252, v253, v254, v255);
      return 3;
    }
    if ((v4 & 2) != 0)
    {
      v256 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v256)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v256, v257, v258, v259, v260, v261, v262, v263);
      return 3;
    }
    if ((v4 & 4) != 0)
    {
      v264 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v264)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v264, v265, v266, v267, v268, v269, v270, v271);
      return 3;
    }
  }
  if (v6 > 6 || ((1 << v6) & 0x58) == 0)
    return 0;
  result = 0;
  v159 = (v2 >> 4) & 0x1FFFF;
  if (v159 == v3 && v159 != v1)
  {
    if ((v4 & 0x200) != 0)
    {
      v160 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v160)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v160, v161, v162, v163, v164, v165, v166, v167);
      return 3;
    }
    if ((v4 & 0x80) != 0)
    {
      v168 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v168)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v168, v169, v170, v171, v172, v173, v174, v175);
      return 3;
    }
    if ((v4 & 0x10) != 0)
    {
      v176 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v176)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v176, v177, v178, v179, v180, v181, v182, v183);
      return 3;
    }
    if ((v4 & 0x20) != 0)
    {
      v184 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v184)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v184, v185, v186, v187, v188, v189, v190, v191);
      return 3;
    }
    if ((v4 & 0x40) != 0)
    {
      v192 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v192)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v192, v193, v194, v195, v196, v197, v198, v199);
      return 3;
    }
    if (v6 != 3)
    {
      v200 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v200)
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v200, v201, v202, v203, v204, v205, v206, v207);
      return 3;
    }
    return 0;
  }
  return result;
}

uint64_t ZinValidateTd<8u>::CheckInRangeDmaAccess(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  unsigned int v10;
  char *v11;
  _DWORD *v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  double v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int *v25;
  std::string::size_type v26;
  uint64_t v27;
  std::string::size_type v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  std::string::size_type v34;
  unsigned int v35;
  unsigned int v36;
  std::string::size_type size;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  std::string::size_type v58;
  unsigned int *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  unsigned int *v65;
  std::string::size_type v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int GatherModeIndexHeightDimension;
  int GatherModeIndexDepthDimension;
  double v73;
  double v74;
  int v75;
  double GatherModeIndexPlaneDimension;
  int GatherModeIndexGroupDimension;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int *v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int *v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  char *v88;
  unsigned int *v89;
  unsigned int *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  int v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  unsigned int *v129;
  uint64_t v130;
  unsigned int *v131;
  unsigned int *v132;
  uint64_t v133;
  int v134;
  unsigned int v135;
  char *v136;
  unsigned int *v137;
  unsigned int *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int *v147;
  unsigned int *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  int v155;
  unsigned int v156;
  unsigned int *v157;
  unsigned int *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  char *v173;
  unsigned int v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  int v178;
  char *v179;
  char *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  int v187;
  int v188;
  char *v189;
  char *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  char *v195;
  char *v196;
  char *v197;
  int v198;
  int v199;
  unsigned int v200;
  int v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  char *v210;
  char *v211;
  int v212;
  int v213;
  char *v214;
  char *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  char *v220;
  char *v221;
  int v222;
  int v223;
  char *v224;
  char *v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  char *v230;
  char *v231;
  char *v232;
  int v233;
  unsigned int v234;
  int v235;
  char *v236;
  char *v237;
  char *v238;
  char *v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  char *v244;
  char *v245;
  int v246;
  int v247;
  char *v248;
  char *v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  char *v254;
  char *v255;
  int v256;
  int v257;
  char *v258;
  char *v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  char *v264;
  char *v265;
  char *v266;
  int v267;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  int v273;
  int v274;
  uint64_t v275;
  void *v276;
  char *v277;
  unint64_t v278;
  void *v279;
  char *v280;
  unint64_t v281;
  void *v282;
  char *v283;
  unint64_t v284;
  void *v285;
  unsigned int *v286;
  unsigned int *v287;
  void *__p;
  unsigned int *v289;
  unsigned int *v290;
  unsigned int *v291;
  std::string v292;
  unsigned int v293;
  int v294;
  char v295;
  int v296;
  char v297;
  int v298;
  char v299;
  int v300;
  char v301;
  int v302;
  char v303;
  int v304;
  char v305;

  if (a2)
  {
    ZinIrMemoryPool::GetSections(a2, 4, &v291);
    v270 = *(_QWORD *)(v292.__r_.__value_.__r.__words[0] + 16);
    std::__list_imp<ZinIrSection *>::clear(&v291);
  }
  else
  {
    v270 = 0;
  }
  v269 = a1;
  v275 = *(_QWORD *)(a1 + 528);
  LOBYTE(v304) = 0;
  v305 = 0;
  LOBYTE(v302) = 0;
  v303 = 0;
  LOBYTE(v300) = 0;
  v301 = 0;
  LOBYTE(v298) = 0;
  v299 = 0;
  LOBYTE(v296) = 0;
  v297 = 0;
  LOBYTE(v294) = 0;
  v295 = 0;
  v5 = *(_QWORD *)(a3 + 1256);
  v271 = a3;
  v6 = *(_QWORD *)(a3 + 1264);
  if (v5 != v6)
  {
    v7 = (__int128 *)(v5 + 8);
    do
    {
      v8 = (uint64_t)v7 - 8;
      LOWORD(v291) = *((_WORD *)v7 - 4);
      if (*((char *)v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v292, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
      }
      else
      {
        v9 = *v7;
        v292.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
        *(_OWORD *)&v292.__r_.__value_.__l.__data_ = v9;
      }
      v293 = *((_DWORD *)v7 + 6);
      v10 = v293 & 0x7FFF;
      if (v10 > 0x1351)
      {
        switch(v10)
        {
          case 0x1352u:
            v296 = (v293 >> 22) & 0x7F;
            v11 = &v297;
            goto LABEL_22;
          case 0x1442u:
            v300 = (v293 >> 22) & 0x7F;
            v11 = &v301;
            goto LABEL_22;
          case 0x1448u:
            v294 = (v293 >> 22) & 0x7F;
            v11 = &v295;
            goto LABEL_22;
        }
      }
      else
      {
        switch(v10)
        {
          case 0x1344u:
            v304 = (v293 >> 22) & 0x7F;
            v11 = &v305;
            goto LABEL_22;
          case 0x134Au:
            v302 = (v293 >> 22) & 0x7F;
            v11 = &v303;
            goto LABEL_22;
          case 0x1350u:
            v298 = (v293 >> 22) & 0x7F;
            v11 = &v299;
LABEL_22:
            *v11 = 1;
            break;
        }
      }
      if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v292.__r_.__value_.__l.__data_);
      v7 = (__int128 *)((char *)v7 + 40);
    }
    while (v8 + 40 != v6);
  }
  v12 = (_DWORD *)v271;
  v13 = *(_DWORD *)(v271 + 544);
  v274 = *(_DWORD *)(v271 + 548);
  v14 = *(_BYTE *)(v271 + 683) & 0xF;
  if ((v13 & 2) != 0)
    v15 = 1;
  else
    v15 = HIWORD(*(_DWORD *)(v271 + 492)) & 0x7FFF;
  if ((v13 & 4) != 0)
    v16 = 1;
  else
    v16 = *(_DWORD *)(v271 + 496) & 0x7FFF;
  v17 = 1.0;
  if ((v13 & 8) == 0)
    v17 = (double)((*(_DWORD *)(v271 + 504) & 0x1FFFFu) / v14);
  if ((v13 & 0x100) != 0)
  {
    v18 = *(_DWORD *)(v271 + 492) & 0x7FFF;
    if ((v13 & 1) != 0)
      v18 = 1;
    v17 = (double)v18;
  }
  v19 = *(_DWORD *)(v271 + 776) & 7;
  if (v19)
  {
    v17 = (double)((*(unsigned __int16 *)(v271 + 800) + 1) / v14);
    v15 = *(unsigned __int16 *)(v271 + 798) + 1;
    v16 = HIWORD(*(_DWORD *)(v271 + 792)) + 1;
    v20 = (unsigned __int16)*(_DWORD *)(v271 + 792) + 1;
  }
  else
  {
    v20 = *(_DWORD *)(v271 + 532) & 0x1FFF;
  }
  v21 = *(_DWORD *)(v271 + 592) >> 6;
  v22 = *(_DWORD *)(v271 + 696);
  v291 = 0;
  *(_OWORD *)&v292.__r_.__value_.__l.__data_ = 0uLL;
  v23 = *(_DWORD *)(v271 + 600);
  v273 = v22;
  if ((v22 & 1) != 0)
  {
    v24 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v292.__r_.__value_.__l.__size_, 1uLL);
    if ((v273 & 4) != 0)
      v32 = 16;
    else
      v32 = 32;
    v33 = v21 + (v23 >> 6) * v275 * vcvtps_s32_f32((float)v15 / (float)v32);
    v25 = v291;
    v34 = v292.__r_.__value_.__r.__words[0];
    v28 = (std::string::size_type)&v24[v31];
    *v24 = v33;
    v29 = v24 + 1;
    while ((unsigned int *)v34 != v25)
    {
      v35 = *(_DWORD *)(v34 - 4);
      v34 -= 4;
      *--v24 = v35;
    }
  }
  else
  {
    v24 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v292.__r_.__value_.__l.__size_, 1uLL);
    v25 = v291;
    v26 = v292.__r_.__value_.__r.__words[0];
    v28 = (std::string::size_type)&v24[v27];
    *v24 = v21 + v15 * v275 * (v23 >> 6);
    v29 = v24 + 1;
    while ((unsigned int *)v26 != v25)
    {
      v30 = *(_DWORD *)(v26 - 4);
      v26 -= 4;
      *--v24 = v30;
    }
  }
  v291 = v24;
  v292.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  v292.__r_.__value_.__l.__size_ = v28;
  if (v25)
    operator delete(v25);
  v292.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  v36 = ((double)v21 + (double)(v275 * ((unint64_t)*(unsigned int *)(v271 + 604) >> 6)) * v17);
  size = v292.__r_.__value_.__l.__size_;
  if ((unint64_t)v29 >= v292.__r_.__value_.__l.__size_)
  {
    v39 = v291;
    v40 = v29 - v291;
    v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 62)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v42 = v292.__r_.__value_.__l.__size_ - (_QWORD)v291;
    if ((uint64_t)(v292.__r_.__value_.__l.__size_ - (_QWORD)v291) >> 1 > v41)
      v41 = v42 >> 1;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
      v43 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v43 = v41;
    if (v43)
    {
      v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v292.__r_.__value_.__l.__size_, v43);
      v39 = v291;
      v29 = (unsigned int *)v292.__r_.__value_.__r.__words[0];
    }
    else
    {
      v44 = 0;
    }
    v45 = (unsigned int *)&v44[4 * v40];
    size = (std::string::size_type)&v44[4 * v43];
    *v45 = v36;
    v38 = v45 + 1;
    while (v29 != v39)
    {
      v46 = *--v29;
      *--v45 = v46;
    }
    v291 = v45;
    v292.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    v292.__r_.__value_.__l.__size_ = size;
    if (v39)
    {
      operator delete(v39);
      size = v292.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    *v29 = v36;
    v38 = v29 + 1;
  }
  v292.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
  v47 = v21 + v16 * v275 * (*(_DWORD *)(v271 + 608) >> 6);
  if ((unint64_t)v38 >= size)
  {
    v49 = v291;
    v50 = v38 - v291;
    v51 = v50 + 1;
    if ((unint64_t)(v50 + 1) >> 62)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v52 = size - (_QWORD)v291;
    if (v52 >> 1 > v51)
      v51 = v52 >> 1;
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
      v53 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v53 = v51;
    if (v53)
    {
      v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v292.__r_.__value_.__l.__size_, v53);
      v49 = v291;
      v38 = (unsigned int *)v292.__r_.__value_.__r.__words[0];
    }
    else
    {
      v54 = 0;
    }
    v55 = (unsigned int *)&v54[4 * v50];
    size = (std::string::size_type)&v54[4 * v53];
    *v55 = v47;
    v48 = v55 + 1;
    while (v38 != v49)
    {
      v56 = *--v38;
      *--v55 = v56;
    }
    v291 = v55;
    v292.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
    v292.__r_.__value_.__l.__size_ = size;
    if (v49)
    {
      operator delete(v49);
      size = v292.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    *v38 = v47;
    v48 = v38 + 1;
  }
  v292.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
  v57 = v21 + v20 * v275 * (*(_DWORD *)(v271 + 612) >> 6);
  if ((unint64_t)v48 >= size)
  {
    v59 = v291;
    v60 = v48 - v291;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 62)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v62 = size - (_QWORD)v291;
    if (v62 >> 1 > v61)
      v61 = v62 >> 1;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
      v63 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    if (v63)
    {
      v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v292.__r_.__value_.__l.__size_, v63);
      v59 = v291;
      v48 = (unsigned int *)v292.__r_.__value_.__r.__words[0];
    }
    else
    {
      v64 = 0;
    }
    v65 = (unsigned int *)&v64[4 * v60];
    v66 = (std::string::size_type)&v64[4 * v63];
    *v65 = v57;
    v58 = (std::string::size_type)(v65 + 1);
    while (v48 != v59)
    {
      v67 = *--v48;
      *--v65 = v67;
    }
    v291 = v65;
    v292.__r_.__value_.__r.__words[0] = v58;
    v292.__r_.__value_.__l.__size_ = v66;
    if (v59)
      operator delete(v59);
  }
  else
  {
    *v48 = v57;
    v58 = (std::string::size_type)(v48 + 1);
  }
  v68 = v274 >> 4;
  v69 = *(_DWORD *)(v271 + 544);
  if (v68 == 4)
    v70 = 1;
  else
    v70 = (v69 >> 5) & 1;
  v292.__r_.__value_.__r.__words[0] = v58;
  if (v68 == 8)
    v70 = 1;
  if (v70)
    GatherModeIndexHeightDimension = 1;
  else
    GatherModeIndexHeightDimension = HIWORD(*(_DWORD *)(v271 + 492)) & 0x7FFF;
  if ((v69 & 0x40) != 0)
    GatherModeIndexDepthDimension = 1;
  else
    GatherModeIndexDepthDimension = *(_DWORD *)(v271 + 496) & 0x7FFF;
  v73 = 1.0;
  v74 = 1.0;
  if ((v69 & 0x80) == 0)
    v74 = (double)((*(_DWORD *)(v271 + 504) & 0x1FFFFu) / (*(_BYTE *)(v271 + 687) & 0xFu));
  v75 = (v69 >> 4) & 1;
  if (v68 == 4)
    v75 = 1;
  if (v68 == 8)
    v75 = 1;
  if (!v75)
    v73 = (double)(*(_DWORD *)(v271 + 492) & 0x7FFF);
  if ((v13 & 0x200) != 0)
    GatherModeIndexPlaneDimension = v73;
  else
    GatherModeIndexPlaneDimension = v74;
  GatherModeIndexGroupDimension = *(_DWORD *)(v271 + 532) & 0x1FFF;
  if (v19 == 2)
  {
    GatherModeIndexPlaneDimension = 1.0;
    GatherModeIndexHeightDimension = 1;
    GatherModeIndexDepthDimension = 1;
  }
  else if (v19 == 1)
  {
    GatherModeIndexGroupDimension = ZinValidateTd<8u>::GetGatherModeIndexGroupDimension(v271);
    GatherModeIndexDepthDimension = ZinValidateTd<8u>::GetGatherModeIndexDepthDimension(v271);
    GatherModeIndexPlaneDimension = (double)ZinValidateTd<8u>::GetGatherModeIndexPlaneDimension(v271);
    GatherModeIndexHeightDimension = ZinValidateTd<8u>::GetGatherModeIndexHeightDimension(v271);
  }
  v78 = *(_DWORD *)(v271 + 616) >> 6;
  v79 = *(_DWORD *)(v271 + 712);
  __p = 0;
  v289 = 0;
  v290 = 0;
  v80 = *(_DWORD *)(v271 + 624);
  v272 = v79;
  if ((v79 & 1) != 0)
  {
    v81 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v290, 1uLL);
    if ((v79 & 4) != 0)
      v86 = 16;
    else
      v86 = 32;
    v83 = &v81[v85];
    *v81 = v78 + (v80 >> 6) * v275 * vcvtps_s32_f32((float)GatherModeIndexHeightDimension / (float)v86);
    v84 = v81 + 1;
  }
  else
  {
    v81 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v290, 1uLL);
    v83 = &v81[v82];
    *v81 = v78 + GatherModeIndexHeightDimension * v275 * (v80 >> 6);
    v84 = v81 + 1;
  }
  __p = v81;
  v290 = v83;
  v289 = v84;
  v87 = ((double)v78
                     + (double)(v275 * ((unint64_t)*(unsigned int *)(v271 + 628) >> 6))
                     * GatherModeIndexPlaneDimension);
  v88 = (char *)v83;
  if (v84 >= v83)
  {
    v90 = (unsigned int *)__p;
    v91 = ((char *)v84 - (_BYTE *)__p) >> 2;
    v92 = v91 + 1;
    if ((unint64_t)(v91 + 1) >> 62)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v93 = (char *)v290 - (_BYTE *)__p;
    if (((char *)v290 - (_BYTE *)__p) >> 1 > v92)
      v92 = v93 >> 1;
    if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
      v94 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v94 = v92;
    if (v94)
    {
      v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v290, v94);
      v90 = (unsigned int *)__p;
      v84 = v289;
    }
    else
    {
      v95 = 0;
    }
    v96 = (unsigned int *)&v95[4 * v91];
    v88 = &v95[4 * v94];
    *v96 = v87;
    v89 = v96 + 1;
    while (v84 != v90)
    {
      v97 = *--v84;
      *--v96 = v97;
    }
    __p = v96;
    v289 = v89;
    v290 = (unsigned int *)v88;
    if (v90)
    {
      operator delete(v90);
      v88 = (char *)v290;
    }
  }
  else
  {
    *v84 = v87;
    v89 = v84 + 1;
  }
  v289 = v89;
  v98 = v78 + GatherModeIndexDepthDimension * v275 * (*(_DWORD *)(v271 + 632) >> 6);
  if (v89 >= (unsigned int *)v88)
  {
    v100 = (unsigned int *)__p;
    v101 = ((char *)v89 - (_BYTE *)__p) >> 2;
    v102 = v101 + 1;
    if ((unint64_t)(v101 + 1) >> 62)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v103 = v88 - (_BYTE *)__p;
    if (v103 >> 1 > v102)
      v102 = v103 >> 1;
    if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL)
      v104 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v104 = v102;
    if (v104)
    {
      v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v290, v104);
      v100 = (unsigned int *)__p;
      v89 = v289;
    }
    else
    {
      v105 = 0;
    }
    v106 = &v105[4 * v101];
    v88 = &v105[4 * v104];
    *(_DWORD *)v106 = v98;
    v99 = (unsigned int *)(v106 + 4);
    while (v89 != v100)
    {
      v107 = *--v89;
      *((_DWORD *)v106 - 1) = v107;
      v106 -= 4;
    }
    __p = v106;
    v289 = v99;
    v290 = (unsigned int *)v88;
    if (v100)
    {
      operator delete(v100);
      v88 = (char *)v290;
    }
  }
  else
  {
    *v89 = v98;
    v99 = v89 + 1;
  }
  v289 = v99;
  v108 = v78 + GatherModeIndexGroupDimension * v275 * (*(_DWORD *)(v271 + 636) >> 6);
  if (v99 >= (unsigned int *)v88)
  {
    v110 = (unsigned int *)__p;
    v111 = ((char *)v99 - (_BYTE *)__p) >> 2;
    v112 = v111 + 1;
    if ((unint64_t)(v111 + 1) >> 62)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v113 = v88 - (_BYTE *)__p;
    if (v113 >> 1 > v112)
      v112 = v113 >> 1;
    if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL)
      v114 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v114 = v112;
    if (v114)
    {
      v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v290, v114);
      v110 = (unsigned int *)__p;
      v99 = v289;
    }
    else
    {
      v115 = 0;
    }
    v116 = &v115[4 * v111];
    v117 = &v115[4 * v114];
    *(_DWORD *)v116 = v108;
    v109 = (unsigned int *)(v116 + 4);
    while (v99 != v110)
    {
      v118 = *--v99;
      *((_DWORD *)v116 - 1) = v118;
      v116 -= 4;
    }
    __p = v116;
    v289 = v109;
    v290 = (unsigned int *)v117;
    if (v110)
      operator delete(v110);
  }
  else
  {
    *v99 = v108;
    v109 = v99 + 1;
  }
  v119 = v68 - 5;
  v289 = v109;
  v120 = *(_BYTE *)(v271 + 1163) & 0xF;
  if ((v68 - 5) < 2)
    v121 = 1;
  else
    v121 = HIWORD(*(_DWORD *)(v271 + 512)) & 0x7FFF;
  if (v119 < 2)
    v122 = 1;
  else
    v122 = *(_DWORD *)(v271 + 516) & 0x7FFF;
  if (v119 < 2)
    v123 = 1;
  else
    v123 = *(_DWORD *)(v271 + 512) & 0x7FFF;
  v124 = v123 / v120;
  if (v13 & 0x400 | v274 & 0x10000000)
    v125 = v124;
  else
    v125 = (*(_DWORD *)(v271 + 508) & 0x1FFFFu) / v120;
  v126 = *(_DWORD *)(v271 + 1112) >> 6;
  v127 = *(_DWORD *)(v271 + 1168);
  v285 = 0;
  v286 = 0;
  v287 = 0;
  v128 = *(_DWORD *)(v271 + 1120);
  if ((v127 & 1) != 0)
  {
    v129 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v287, 1uLL);
    if ((v127 & 4) != 0)
      v134 = 16;
    else
      v134 = 32;
    v131 = &v129[v133];
    *v129 = v126 + (v128 >> 6) * v275 * vcvtps_s32_f32((float)v121 / (float)v134);
    v132 = v129 + 1;
  }
  else
  {
    v129 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v287, 1uLL);
    v131 = &v129[v130];
    *v129 = v126 + v121 * v275 * (v128 >> 6);
    v132 = v129 + 1;
  }
  v285 = v129;
  v287 = v131;
  v286 = v132;
  v135 = ((double)v126
                      + (double)(v275 * ((unint64_t)*(unsigned int *)(v271 + 1124) >> 6)) * (double)v125);
  v136 = (char *)v131;
  if (v132 >= v131)
  {
    v138 = (unsigned int *)v285;
    v139 = ((char *)v132 - (_BYTE *)v285) >> 2;
    v140 = v139 + 1;
    if ((unint64_t)(v139 + 1) >> 62)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v141 = (char *)v287 - (_BYTE *)v285;
    if (((char *)v287 - (_BYTE *)v285) >> 1 > v140)
      v140 = v141 >> 1;
    if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL)
      v142 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v142 = v140;
    if (v142)
    {
      v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v287, v142);
      v138 = (unsigned int *)v285;
      v132 = v286;
    }
    else
    {
      v143 = 0;
    }
    v144 = (unsigned int *)&v143[4 * v139];
    v136 = &v143[4 * v142];
    *v144 = v135;
    v137 = v144 + 1;
    while (v132 != v138)
    {
      v145 = *--v132;
      *--v144 = v145;
    }
    v285 = v144;
    v286 = v137;
    v287 = (unsigned int *)v136;
    if (v138)
    {
      operator delete(v138);
      v136 = (char *)v287;
    }
  }
  else
  {
    *v132 = v135;
    v137 = v132 + 1;
  }
  v286 = v137;
  v146 = v126 + v122 * v275 * (*(_DWORD *)(v271 + 1128) >> 6);
  if (v137 >= (unsigned int *)v136)
  {
    v148 = (unsigned int *)v285;
    v149 = ((char *)v137 - (_BYTE *)v285) >> 2;
    v150 = v149 + 1;
    if ((unint64_t)(v149 + 1) >> 62)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v151 = v136 - (_BYTE *)v285;
    if (v151 >> 1 > v150)
      v150 = v151 >> 1;
    if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL)
      v152 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v152 = v150;
    if (v152)
    {
      v153 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v287, v152);
      v148 = (unsigned int *)v285;
      v137 = v286;
    }
    else
    {
      v153 = 0;
    }
    v154 = &v153[4 * v149];
    v136 = &v153[4 * v152];
    *(_DWORD *)v154 = v146;
    v147 = (unsigned int *)(v154 + 4);
    while (v137 != v148)
    {
      v155 = *--v137;
      *((_DWORD *)v154 - 1) = v155;
      v154 -= 4;
    }
    v285 = v154;
    v286 = v147;
    v287 = (unsigned int *)v136;
    if (v148)
    {
      operator delete(v148);
      v136 = (char *)v287;
    }
  }
  else
  {
    *v137 = v146;
    v147 = v137 + 1;
  }
  v286 = v147;
  v156 = v126 + (*(_DWORD *)(v271 + 1132) >> 6) * v275 * (*(_DWORD *)(v271 + 532) & 0x1FFF);
  if (v147 >= (unsigned int *)v136)
  {
    v158 = (unsigned int *)v285;
    v159 = ((char *)v147 - (_BYTE *)v285) >> 2;
    v160 = v159 + 1;
    if ((unint64_t)(v159 + 1) >> 62)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v161 = v136 - (_BYTE *)v285;
    if (v161 >> 1 > v160)
      v160 = v161 >> 1;
    if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL)
      v162 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v162 = v160;
    if (v162)
    {
      v163 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v287, v162);
      v158 = (unsigned int *)v285;
      v147 = v286;
    }
    else
    {
      v163 = 0;
    }
    v164 = &v163[4 * v159];
    v165 = &v163[4 * v162];
    *(_DWORD *)v164 = v156;
    v157 = (unsigned int *)(v164 + 4);
    while (v147 != v158)
    {
      v166 = *--v147;
      *((_DWORD *)v164 - 1) = v166;
      v164 -= 4;
    }
    v285 = v164;
    v286 = v157;
    v287 = (unsigned int *)v165;
    if (v158)
      operator delete(v158);
  }
  else
  {
    *v147 = v156;
    v157 = v147 + 1;
  }
  v286 = v157;
  if (ZinIrTdValidationUtil::VerifyDmaAccess(v270, &v291, (uint64_t)&v304, (unsigned int **)&__p, (uint64_t)&v302, (unsigned int **)&v285, (uint64_t)&v300))
  {
    v167 = 3;
  }
  else
  {
    v168 = *(_QWORD *)(v269 + 560);
    v169 = *(_DWORD *)(v271 + 640);
    v282 = 0;
    v283 = 0;
    v284 = 0;
    v170 = *(_DWORD *)(v271 + 648);
    v279 = 0;
    v280 = 0;
    v281 = 0;
    v171 = *(_DWORD *)(v271 + 1136);
    v276 = 0;
    v277 = 0;
    v278 = 0;
    if ((v273 & 1) != 0)
    {
      v172 = *(_DWORD *)(v271 + 656);
      v173 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v284, 1uLL);
      v174 = v169 >> 6;
      v176 = (unint64_t)&v173[4 * v175];
      *(_DWORD *)v173 = (v169 >> 6) + (v172 >> 7) * v168;
      v177 = v173 + 4;
      v282 = v173;
      v284 = v176;
      v283 = v173 + 4;
      v178 = (v169 >> 6) + (*(_DWORD *)(v271 + 660) >> 7) * v168;
      if ((unint64_t)(v173 + 4) >= v176)
      {
        v180 = (char *)v282;
        v181 = (v177 - (_BYTE *)v282) >> 2;
        v182 = v181 + 1;
        if ((unint64_t)(v181 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v183 = v176 - (_QWORD)v282;
        if (v183 >> 1 > v182)
          v182 = v183 >> 1;
        if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFFCLL)
          v184 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v184 = v182;
        if (v184)
        {
          v185 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v284, v184);
          v180 = (char *)v282;
          v177 = v283;
        }
        else
        {
          v185 = 0;
        }
        v186 = &v185[4 * v181];
        v176 = (unint64_t)&v185[4 * v184];
        *(_DWORD *)v186 = v178;
        v179 = v186 + 4;
        while (v177 != v180)
        {
          v187 = *((_DWORD *)v177 - 1);
          v177 -= 4;
          *((_DWORD *)v186 - 1) = v187;
          v186 -= 4;
        }
        v282 = v186;
        v283 = v179;
        v284 = v176;
        if (v180)
        {
          operator delete(v180);
          v176 = v284;
        }
      }
      else
      {
        *((_DWORD *)v173 + 1) = v178;
        v179 = v173 + 8;
      }
      v283 = v179;
      v188 = v174 + (*(_DWORD *)(v271 + 664) >> 7) * v168;
      if ((unint64_t)v179 >= v176)
      {
        v190 = (char *)v282;
        v191 = (v179 - (_BYTE *)v282) >> 2;
        v192 = v191 + 1;
        if ((unint64_t)(v191 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v193 = v176 - (_QWORD)v282;
        if (v193 >> 1 > v192)
          v192 = v193 >> 1;
        if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFFCLL)
          v194 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v194 = v192;
        v12 = (_DWORD *)v271;
        if (v194)
        {
          v195 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v284, v194);
          v190 = (char *)v282;
          v179 = v283;
        }
        else
        {
          v195 = 0;
        }
        v196 = &v195[4 * v191];
        v197 = &v195[4 * v194];
        *(_DWORD *)v196 = v188;
        v189 = v196 + 4;
        while (v179 != v190)
        {
          v198 = *((_DWORD *)v179 - 1);
          v179 -= 4;
          *((_DWORD *)v196 - 1) = v198;
          v196 -= 4;
        }
        v282 = v196;
        v283 = v189;
        v284 = (unint64_t)v197;
        if (v190)
          operator delete(v190);
      }
      else
      {
        *(_DWORD *)v179 = v188;
        v189 = v179 + 4;
        v12 = (_DWORD *)v271;
      }
      v283 = v189;
    }
    v199 = v272;
    if ((v272 & 1) != 0)
    {
      v200 = v170 >> 6;
      v201 = (v170 >> 6) + (v12[167] >> 7) * v168;
      v203 = v280;
      v202 = (char *)v281;
      if ((unint64_t)v280 >= v281)
      {
        v205 = (char *)v279;
        v206 = (v280 - (_BYTE *)v279) >> 2;
        v207 = v206 + 1;
        if ((unint64_t)(v206 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v208 = v281 - (_QWORD)v279;
        if ((uint64_t)(v281 - (_QWORD)v279) >> 1 > v207)
          v207 = v208 >> 1;
        if ((unint64_t)v208 >= 0x7FFFFFFFFFFFFFFCLL)
          v209 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v209 = v207;
        if (v209)
        {
          v210 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v281, v209);
          v205 = (char *)v279;
          v203 = v280;
        }
        else
        {
          v210 = 0;
        }
        v211 = &v210[4 * v206];
        v202 = &v210[4 * v209];
        *(_DWORD *)v211 = v201;
        v204 = v211 + 4;
        while (v203 != v205)
        {
          v212 = *((_DWORD *)v203 - 1);
          v203 -= 4;
          *((_DWORD *)v211 - 1) = v212;
          v211 -= 4;
        }
        v279 = v211;
        v280 = v204;
        v281 = (unint64_t)v202;
        if (v205)
        {
          operator delete(v205);
          v202 = (char *)v281;
        }
      }
      else
      {
        *(_DWORD *)v280 = v201;
        v204 = v203 + 4;
      }
      v280 = v204;
      v213 = v200 + (v12[168] >> 7) * v168;
      if (v204 >= v202)
      {
        v215 = (char *)v279;
        v216 = (v204 - (_BYTE *)v279) >> 2;
        v217 = v216 + 1;
        if ((unint64_t)(v216 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v218 = v202 - (_BYTE *)v279;
        if (v218 >> 1 > v217)
          v217 = v218 >> 1;
        if ((unint64_t)v218 >= 0x7FFFFFFFFFFFFFFCLL)
          v219 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v219 = v217;
        if (v219)
        {
          v220 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v281, v219);
          v215 = (char *)v279;
          v204 = v280;
        }
        else
        {
          v220 = 0;
        }
        v221 = &v220[4 * v216];
        v202 = &v220[4 * v219];
        *(_DWORD *)v221 = v213;
        v214 = v221 + 4;
        while (v204 != v215)
        {
          v222 = *((_DWORD *)v204 - 1);
          v204 -= 4;
          *((_DWORD *)v221 - 1) = v222;
          v221 -= 4;
        }
        v279 = v221;
        v280 = v214;
        v281 = (unint64_t)v202;
        if (v215)
        {
          operator delete(v215);
          v202 = (char *)v281;
        }
      }
      else
      {
        *(_DWORD *)v204 = v213;
        v214 = v204 + 4;
      }
      v280 = v214;
      v223 = v200 + (v12[169] >> 7) * v168;
      if (v214 >= v202)
      {
        v225 = (char *)v279;
        v226 = (v214 - (_BYTE *)v279) >> 2;
        v227 = v226 + 1;
        if ((unint64_t)(v226 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v228 = v202 - (_BYTE *)v279;
        if (v228 >> 1 > v227)
          v227 = v228 >> 1;
        if ((unint64_t)v228 >= 0x7FFFFFFFFFFFFFFCLL)
          v229 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v229 = v227;
        if (v229)
        {
          v230 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v281, v229);
          v225 = (char *)v279;
          v214 = v280;
        }
        else
        {
          v230 = 0;
        }
        v231 = &v230[4 * v226];
        v232 = &v230[4 * v229];
        *(_DWORD *)v231 = v223;
        v224 = v231 + 4;
        if (v214 == v225)
        {
          v199 = v272;
        }
        else
        {
          v199 = v272;
          do
          {
            v233 = *((_DWORD *)v214 - 1);
            v214 -= 4;
            *((_DWORD *)v231 - 1) = v233;
            v231 -= 4;
          }
          while (v214 != v225);
        }
        v279 = v231;
        v280 = v224;
        v281 = (unint64_t)v232;
        if (v225)
          operator delete(v225);
      }
      else
      {
        *(_DWORD *)v214 = v223;
        v224 = v214 + 4;
        v199 = v272;
      }
      v280 = v224;
    }
    if ((v127 & 1) != 0)
    {
      v234 = v171 >> 6;
      v235 = (v171 >> 6) + (v12[286] >> 7) * v168;
      v237 = v277;
      v236 = (char *)v278;
      if ((unint64_t)v277 >= v278)
      {
        v239 = (char *)v276;
        v240 = (v277 - (_BYTE *)v276) >> 2;
        v241 = v240 + 1;
        if ((unint64_t)(v240 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v242 = v278 - (_QWORD)v276;
        if ((uint64_t)(v278 - (_QWORD)v276) >> 1 > v241)
          v241 = v242 >> 1;
        if ((unint64_t)v242 >= 0x7FFFFFFFFFFFFFFCLL)
          v243 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v243 = v241;
        if (v243)
        {
          v244 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v278, v243);
          v239 = (char *)v276;
          v237 = v277;
        }
        else
        {
          v244 = 0;
        }
        v245 = &v244[4 * v240];
        v236 = &v244[4 * v243];
        *(_DWORD *)v245 = v235;
        v238 = v245 + 4;
        while (v237 != v239)
        {
          v246 = *((_DWORD *)v237 - 1);
          v237 -= 4;
          *((_DWORD *)v245 - 1) = v246;
          v245 -= 4;
        }
        v276 = v245;
        v277 = v238;
        v278 = (unint64_t)v236;
        if (v239)
        {
          operator delete(v239);
          v236 = (char *)v278;
        }
      }
      else
      {
        *(_DWORD *)v277 = v235;
        v238 = v237 + 4;
      }
      v277 = v238;
      v247 = v234 + (v12[287] >> 7) * v168;
      if (v238 >= v236)
      {
        v249 = (char *)v276;
        v250 = (v238 - (_BYTE *)v276) >> 2;
        v251 = v250 + 1;
        if ((unint64_t)(v250 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v252 = v236 - (_BYTE *)v276;
        if (v252 >> 1 > v251)
          v251 = v252 >> 1;
        if ((unint64_t)v252 >= 0x7FFFFFFFFFFFFFFCLL)
          v253 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v253 = v251;
        if (v253)
        {
          v254 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v278, v253);
          v249 = (char *)v276;
          v238 = v277;
        }
        else
        {
          v254 = 0;
        }
        v255 = &v254[4 * v250];
        v236 = &v254[4 * v253];
        *(_DWORD *)v255 = v247;
        v248 = v255 + 4;
        while (v238 != v249)
        {
          v256 = *((_DWORD *)v238 - 1);
          v238 -= 4;
          *((_DWORD *)v255 - 1) = v256;
          v255 -= 4;
        }
        v276 = v255;
        v277 = v248;
        v278 = (unint64_t)v236;
        if (v249)
        {
          operator delete(v249);
          v236 = (char *)v278;
        }
      }
      else
      {
        *(_DWORD *)v238 = v247;
        v248 = v238 + 4;
      }
      v277 = v248;
      v257 = v234 + (v12[288] >> 7) * v168;
      if (v248 >= v236)
      {
        v259 = (char *)v276;
        v260 = (v248 - (_BYTE *)v276) >> 2;
        v261 = v260 + 1;
        if ((unint64_t)(v260 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v262 = v236 - (_BYTE *)v276;
        if (v262 >> 1 > v261)
          v261 = v262 >> 1;
        if ((unint64_t)v262 >= 0x7FFFFFFFFFFFFFFCLL)
          v263 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v263 = v261;
        if (v263)
        {
          v264 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v278, v263);
          v259 = (char *)v276;
          v248 = v277;
        }
        else
        {
          v264 = 0;
        }
        v265 = &v264[4 * v260];
        v266 = &v264[4 * v263];
        *(_DWORD *)v265 = v257;
        v258 = v265 + 4;
        while (v248 != v259)
        {
          v267 = *((_DWORD *)v248 - 1);
          v248 -= 4;
          *((_DWORD *)v265 - 1) = v267;
          v265 -= 4;
        }
        v276 = v265;
        v277 = v258;
        v278 = (unint64_t)v266;
        if (v259)
          operator delete(v259);
      }
      else
      {
        *(_DWORD *)v248 = v257;
        v258 = v248 + 4;
      }
      v277 = v258;
      v199 = v272;
    }
    if (((v199 | v273 | v127) & 1) != 0)
      v167 = ZinIrTdValidationUtil::VerifyDmaAccess(v270, (unsigned int **)&v282, (uint64_t)&v298, (unsigned int **)&v279, (uint64_t)&v296, (unsigned int **)&v276, (uint64_t)&v294);
    else
      v167 = 0;
    if (v276)
    {
      v277 = (char *)v276;
      operator delete(v276);
    }
    if (v279)
    {
      v280 = (char *)v279;
      operator delete(v279);
    }
    if (v282)
    {
      v283 = (char *)v282;
      operator delete(v282);
    }
  }
  if (v285)
  {
    v286 = (unsigned int *)v285;
    operator delete(v285);
  }
  if (__p)
  {
    v289 = (unsigned int *)__p;
    operator delete(__p);
  }
  if (v291)
  {
    v292.__r_.__value_.__r.__words[0] = (std::string::size_type)v291;
    operator delete(v291);
  }
  return v167;
}

void sub_206E45C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  uint64_t v33;
  void *v35;

  if (__p)
    operator delete(__p);
  if (a23)
    operator delete(a23);
  if (a26)
    operator delete(a26);
  if (a29)
    operator delete(a29);
  if (a32)
    operator delete(a32);
  v35 = *(void **)(v33 - 192);
  if (v35)
  {
    *(_QWORD *)(v33 - 184) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinValidateTd<8u>::ValidationForNonZeroFields(uint64_t a1)
{
  unsigned int v1;
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  _BOOL8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BOOL8 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BOOL8 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BOOL8 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BOOL8 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BOOL8 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BOOL8 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BOOL8 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BOOL8 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BOOL8 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _BOOL8 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _BOOL8 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _BOOL8 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _BOOL8 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _BOOL8 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _BOOL8 v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;

  if ((*(_WORD *)(a1 + 496) & 0x7FFF) != 0)
  {
    if ((*(_WORD *)(a1 + 516) & 0x7FFF) != 0)
    {
      v1 = *(_DWORD *)(a1 + 524);
      if ((v1 & 0x30000000) != 0)
      {
        if (v1 >> 30)
        {
          v34 = *(_DWORD *)(a1 + 528);
          if ((v34 & 0x6000) != 0)
          {
            if ((v1 & 0x6000) != 0)
            {
              if ((v1 & 0x18000) != 0)
              {
                if ((v34 & 0xC0) != 0)
                {
                  if ((v1 & 0x3F) != 0)
                  {
                    if ((v1 & 0xFC0) != 0)
                    {
                      if ((v34 & 0x1F) != 0)
                      {
                        v35 = *(_DWORD *)(a1 + 532);
                        if (HIWORD(v35))
                        {
                          if ((v35 & 0x1FFF) != 0)
                          {
                            if ((*(_WORD *)(a1 + 536) & 0x7FFF) != 0)
                            {
                              if ((*(_BYTE *)(a1 + 865) & 0xF) != 0)
                              {
                                if ((*(_BYTE *)(a1 + 869) & 0xF) != 0)
                                {
                                  if ((*(_BYTE *)(a1 + 913) & 0xF) != 0)
                                  {
                                    if ((*(_BYTE *)(a1 + 683) & 0xF) != 0)
                                    {
                                      if ((*(_BYTE *)(a1 + 687) & 0xF) != 0)
                                      {
                                        if ((*(_WORD *)(a1 + 696) & 0x3F0) != 0)
                                        {
                                          if ((*(_DWORD *)(a1 + 700) & 0x1FFFF) != 0)
                                          {
                                            if ((*(_DWORD *)(a1 + 704) & 0x1FFFF) != 0)
                                            {
                                              if ((*(_BYTE *)(a1 + 1163) & 0xF) != 0)
                                                return 0;
                                              v181 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                              if (v181)
                                                ZinValidateTd<8u>::ValidationForNonZeroFields(v181, v182, v183, v184, v185, v186, v187, v188);
                                            }
                                            else
                                            {
                                              v173 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                              if (v173)
                                                ZinValidateTd<8u>::ValidationForNonZeroFields(v173, v174, v175, v176, v177, v178, v179, v180);
                                            }
                                          }
                                          else
                                          {
                                            v165 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                            if (v165)
                                              ZinValidateTd<8u>::ValidationForNonZeroFields(v165, v166, v167, v168, v169, v170, v171, v172);
                                          }
                                        }
                                        else
                                        {
                                          v157 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                          if (v157)
                                            ZinValidateTd<8u>::ValidationForNonZeroFields(v157, v158, v159, v160, v161, v162, v163, v164);
                                        }
                                      }
                                      else
                                      {
                                        v149 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                        if (v149)
                                          ZinValidateTd<8u>::ValidationForNonZeroFields(v149, v150, v151, v152, v153, v154, v155, v156);
                                      }
                                    }
                                    else
                                    {
                                      v141 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                      if (v141)
                                        ZinValidateTd<8u>::ValidationForNonZeroFields(v141, v142, v143, v144, v145, v146, v147, v148);
                                    }
                                  }
                                  else
                                  {
                                    v133 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    if (v133)
                                      ZinValidateTd<8u>::ValidationForNonZeroFields(v133, v134, v135, v136, v137, v138, v139, v140);
                                  }
                                }
                                else
                                {
                                  v125 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                  if (v125)
                                    ZinValidateTd<8u>::ValidationForNonZeroFields(v125, v126, v127, v128, v129, v130, v131, v132);
                                }
                              }
                              else
                              {
                                v117 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                if (v117)
                                  ZinValidateTd<8u>::ValidationForNonZeroFields(v117, v118, v119, v120, v121, v122, v123, v124);
                              }
                            }
                            else
                            {
                              v109 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              if (v109)
                                ZinValidateTd<8u>::ValidationForNonZeroFields(v109, v110, v111, v112, v113, v114, v115, v116);
                            }
                          }
                          else
                          {
                            v101 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                            if (v101)
                              ZinValidateTd<8u>::ValidationForNonZeroFields(v101, v102, v103, v104, v105, v106, v107, v108);
                          }
                        }
                        else
                        {
                          v36 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          if (v36)
                            ZinValidateTd<8u>::ValidationForNonZeroFields(v36, v37, v38, v39, v40, v41, v42, v43);
                        }
                      }
                      else
                      {
                        v92 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (v92)
                          ZinValidateTd<8u>::ValidationForNonZeroFields(v92, v93, v94, v95, v96, v97, v98, v99);
                      }
                    }
                    else
                    {
                      v84 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      if (v84)
                        ZinValidateTd<8u>::ValidationForNonZeroFields(v84, v85, v86, v87, v88, v89, v90, v91);
                    }
                  }
                  else
                  {
                    v76 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    if (v76)
                      ZinValidateTd<8u>::ValidationForNonZeroFields(v76, v77, v78, v79, v80, v81, v82, v83);
                  }
                }
                else
                {
                  v68 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (v68)
                    ZinValidateTd<8u>::ValidationForNonZeroFields(v68, v69, v70, v71, v72, v73, v74, v75);
                }
              }
              else
              {
                v60 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (v60)
                  ZinValidateTd<8u>::ValidationForNonZeroFields(v60, v61, v62, v63, v64, v65, v66, v67);
              }
            }
            else
            {
              v52 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v52)
                ZinValidateTd<8u>::ValidationForNonZeroFields(v52, v53, v54, v55, v56, v57, v58, v59);
            }
          }
          else
          {
            v44 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v44)
              ZinValidateTd<8u>::ValidationForNonZeroFields(v44, v45, v46, v47, v48, v49, v50, v51);
          }
        }
        else
        {
          v2 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v2)
            ZinValidateTd<8u>::ValidationForNonZeroFields(v2, v3, v4, v5, v6, v7, v8, v9);
        }
      }
      else
      {
        v26 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v26)
          ZinValidateTd<8u>::ValidationForNonZeroFields(v26, v27, v28, v29, v30, v31, v32, v33);
      }
    }
    else
    {
      v18 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v18)
        ZinValidateTd<8u>::ValidationForNonZeroFields(v18, v19, v20, v21, v22, v23, v24, v25);
    }
  }
  else
  {
    v10 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v10)
      ZinValidateTd<8u>::ValidationForNonZeroFields(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return 3;
}

uint64_t ZinValidateTd<8u>::CheckRedundantKDMARegisters(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_DWORD *)(a1 + 1052);
  v2 = *(_DWORD *)(a1 + 36);
  if (((v2 ^ (v1 >> 19)) & 3) != 0)
  {
    v3 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v3)
      ZinValidateTd<8u>::CheckRedundantKDMARegisters(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  else if ((((v2 >> 2) ^ (v1 >> 17)) & 3) != 0)
  {
    v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v11)
      ZinValidateTd<8u>::CheckRedundantKDMARegisters(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  else if ((((v2 >> 5) ^ (v1 >> 8)) & 1) != 0)
  {
    v20 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v20)
      ZinValidateTd<8u>::CheckRedundantKDMARegisters(v20, v21, v22, v23, v24, v25, v26, v27);
  }
  else
  {
    if ((((v2 >> 4) ^ (v1 >> 10)) & 1) == 0)
      return 0;
    v28 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v28)
      ZinValidateTd<8u>::CheckRedundantKDMARegisters(v28, v29, v30, v31, v32, v33, v34, v35);
  }
  return 3;
}

uint64_t ZinValidateTd<8u>::ValidateFillLowerNEFirst(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unint64_t v4;
  int v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BOOL8 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  if ((*(_BYTE *)(a2 + 551) & 0x20) == 0)
    return 0;
  v3 = *(_DWORD *)(a2 + 524);
  if ((v3 & 0x30000000) != 0x10000000)
  {
    v14 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v14)
      ZinValidateTd<10u>::VerifyL2InplaceAllocation(v14, v15, v16, v17, v18, v19, v20, v21);
    return 3;
  }
  if (v3 >> 30 != 1)
  {
    v22 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v22)
      ZinValidateTd<10u>::VerifyL2InplaceAllocation(v22, v23, v24, v25, v26, v27, v28, v29);
    return 3;
  }
  if ((*(_DWORD *)(a2 + 528) & 0x6000) != 0x2000)
  {
    v30 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v30)
      ZinValidateTd<8u>::VerifyL2InplaceAllocation(v30, v31, v32, v33, v34, v35, v36, v37);
    return 3;
  }
  v4 = *(unsigned int *)(a2 + 532);
  if ((v4 & 0x4000) != 0)
  {
    if ((*(_DWORD *)(a2 + 1056) & 7) != 4)
    {
      v55 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v55)
        ZinValidateTd<8u>::ValidateFillLowerNEFirst(v55, v56, v57, v58, v59, v60, v61, v62);
      return 3;
    }
    v38 = v4 >> 16;
    if ((_DWORD)v38 != 1 << (*(_DWORD *)(a2 + 520) & 7))
    {
      v71 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v71)
        ZinValidateTd<8u>::ValidateFillLowerNEFirst(v71, v72, v73, v74, v75, v76, v77, v78);
      return 3;
    }
    if (*(_QWORD *)(a1 + 880) < v38)
    {
      v39 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v39)
        ZinValidateTd<8u>::ValidateFillLowerNEFirst(v39, v40, v41, v42, v43, v44, v45, v46);
      return 3;
    }
    return 0;
  }
  v5 = *(_DWORD *)(a2 + 1052);
  if ((v5 & 0x100) != 0)
  {
    v47 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v47)
      ZinValidateTd<8u>::ValidateFillLowerNEFirst(v47, v48, v49, v50, v51, v52, v53, v54);
    return 3;
  }
  if ((v5 & 0x10000) != 0)
  {
    if ((*(_BYTE *)(a2 + 1056) & 8) != 0)
    {
      v63 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v63)
        ZinValidateTd<8u>::ValidateFillLowerNEFirst(v63, v64, v65, v66, v67, v68, v69, v70);
      return 3;
    }
    return 0;
  }
  v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v6)
    ZinValidateTd<8u>::ValidateFillLowerNEFirst(v6, v7, v8, v9, v10, v11, v12, v13);
  return 3;
}

uint64_t ZinValidateTd<8u>::ValidatePEIndexMaxIndex(unsigned int a1, uint64_t a2, unint64_t a3, char a4, int a5)
{
  if (!a5 || (a4 & 1) != 0)
    return ZinValidateTd<8u>::ValidatePEIndexMaxIndexForNonBroadcastedIndex(a1, a3);
  else
    return ZinValidateTd<8u>::ValidatePEIndexMaxIndexForBroadcastedIndex(a1, a2, a3);
}

uint64_t ZinValidateTd<8u>::ValidatePEIndexMaxIndexForBroadcastedIndex(unsigned int a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 - a2 >= (unint64_t)a1)
    return 0;
  v3 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v3)
    ZinValidateTd<8u>::ValidatePEIndexMaxIndexForBroadcastedIndex(v3, v4, v5, v6, v7, v8, v9, v10);
  return 3;
}

uint64_t ZinValidateTd<8u>::ValidatePEIndexMaxIndexForNonBroadcastedIndex(unsigned int a1, unint64_t a2)
{
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 < a2)
    return 0;
  v3 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v3)
    ZinValidateTd<8u>::ValidatePEIndexMaxIndexForNonBroadcastedIndex(v3, v4, v5, v6, v7, v8, v9, v10);
  return 3;
}

uint64_t ZinValidateTd<8u>::GetGatherModeIndexGroupDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch((*(_DWORD *)(a1 + 780) >> 12) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 504) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 492);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 494);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 496);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 532) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinValidateTd<8u>::GetGatherModeIndexDepthDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch((*(_DWORD *)(a1 + 780) >> 9) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 504) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 492);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 494);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 496);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 532) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinValidateTd<8u>::GetGatherModeIndexPlaneDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch((*(_DWORD *)(a1 + 780) >> 6) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 504) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 492);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 494);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 496);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 532) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinValidateTd<8u>::GetGatherModeIndexHeightDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch((*(_DWORD *)(a1 + 780) >> 3) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 504) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 492);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 494);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 496);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 532) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinIrTdValidationUtil::ValidateKernelCaching<8u>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BOOL8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BOOL8 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83[3];
  char v84;
  char v85;
  void **v86[3];
  char v87;
  char v88;
  uint64_t *v89;
  _QWORD *v90[2];
  uint64_t v91;
  uint64_t v92;
  uint8_t v93[4];
  uint64_t v94;
  uint8_t v95[4];
  uint64_t v96;
  uint8_t v97[4];
  uint64_t v98;
  uint8_t v99[4];
  uint64_t v100;
  uint8_t v101[4];
  uint64_t v102;
  uint8_t v103[4];
  uint64_t v104;
  uint8_t v105[4];
  uint64_t v106;
  uint8_t v107[4];
  _QWORD v108[3];

  *(_QWORD *)((char *)&v108[1] + 4) = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 2088))
    return 0;
  ZinCodegenUtil::SplitInstructionListByHWNetwork(a2, &v91);
  v3 = v91;
  v82 = v92;
  if (v91 == v92)
    goto LABEL_85;
LABEL_3:
  v90[0] = 0;
  v90[1] = 0;
  v89 = (uint64_t *)v90;
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 == v3)
    goto LABEL_84;
  while (1)
  {
    v5 = *(_QWORD *)(v4 + 16);
    v6 = *(unsigned int *)(*(_QWORD *)(v5 + 200) + 44);
    LODWORD(v86[0]) = HIWORD(*(_DWORD *)(*(_QWORD *)(v5 + 200) + 44));
    if (*(_QWORD *)(a1 + 2096) < v6 >> 16)
      ZinAssertImpl("Invalid KID");
    if (v6 >= 0x10000)
    {
      v83[0] = v86;
      v7 = std::__tree<std::__value_type<unsigned int,std::vector<ZinAneInstruction *>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<ZinAneInstruction *>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<ZinAneInstruction *>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&v89, (unsigned int *)v86, (uint64_t)&std::piecewise_construct, v83);
      v8 = v7[6];
      v9 = v7[7];
      if (v8 >= v9)
      {
        v11 = v7[5];
        v12 = v8 - v11;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v13 = (char *)v9 - (char *)v11;
        v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v7 + 7), v15);
        else
          v16 = 0;
        v17 = (uint64_t *)&v16[8 * v12];
        *v17 = v5;
        v10 = v17 + 1;
        v19 = v7[5];
        v18 = v7[6];
        if (v18 != v19)
        {
          do
          {
            v20 = *--v18;
            *--v17 = v20;
          }
          while (v18 != v19);
          v18 = v7[5];
        }
        v7[5] = v17;
        v7[6] = v10;
        v7[7] = (uint64_t *)&v16[8 * v15];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v8 = v5;
        v10 = v8 + 1;
      }
      v7[6] = v10;
      goto LABEL_25;
    }
    if ((v6 & 0x40) != 0)
      break;
LABEL_25:
    v4 = *(_QWORD *)(v4 + 8);
    if (v4 == v3)
    {
      v21 = v89;
      if (v89 == (uint64_t *)v90)
        goto LABEL_84;
      while (1)
      {
        v22 = v21[5];
        v23 = v21[6] - v22;
        if (v23 < 9)
        {
          if (v23 != 8 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v22 + 200) + 44) & 0x240) != 0x40)
            goto LABEL_73;
          v74 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v74)
            ZinIrTdValidationUtil::ValidateKernelCaching<8u>(v74, v75, v76, v77, v78, v79, v80, v81);
          goto LABEL_89;
        }
        v24 = *(_QWORD *)(*(_QWORD *)v22 + 200);
        v25 = *(_DWORD *)(v24 + 44);
        if ((v25 & 0x40) == 0)
        {
          v58 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v58)
            ZinIrTdValidationUtil::ValidateKernelCaching<8u>(v58, v59, v60, v61, v62, v63, v64, v65);
          goto LABEL_89;
        }
        if ((v25 & 0x200) != 0)
        {
          v66 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v66)
            ZinIrTdValidationUtil::ValidateKernelCaching<8u>(v66, v67, v68, v69, v70, v71, v72, v73);
          goto LABEL_89;
        }
        FindRelocationInfo((uint64_t *)(v24 + 1264), 21776, v86);
        if (!v88)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v107, v108, v41);
            goto LABEL_67;
          }
          goto LABEL_89;
        }
        v26 = v21[5];
        v27 = v21[6] - v26;
        if ((unint64_t)v27 < 9)
        {
          v35 = 1;
          goto LABEL_69;
        }
        v28 = v27 >> 3;
        v29 = v24 + 140;
        v30 = 1;
        while (1)
        {
          v31 = *(_QWORD *)(*(_QWORD *)(v26 + 8 * v30) + 200);
          v32 = *(_DWORD *)(v31 + 44);
          if (v30 != v28 - 1)
            break;
          if ((v32 & 0x200) == 0)
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v105, &v106, v47);
            goto LABEL_67;
          }
LABEL_37:
          FindRelocationInfo((uint64_t *)(v31 + 1264), 21776, v83);
          if (v85)
          {
            if (ZinAneRelocInfo::operator==((unsigned __int8 *)v86, (unsigned __int8 *)v83))
            {
              v33 = v31 + 140;
              v34 = -64;
              while (((*(_DWORD *)(v33 + v34) ^ *(_DWORD *)(v29 + v34)) & 1) == 0)
              {
                if ((*(_DWORD *)(v33 + v34 + 64) ^ *(_DWORD *)(v29 + v34 + 64)) >= 0x40)
                {
                  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                    ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v95, &v96, v39);
                  goto LABEL_55;
                }
                if ((*(_DWORD *)(v33 + v34 + 128) ^ *(_DWORD *)(v29 + v34 + 128)) >= 0x40)
                {
                  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                    ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v93, &v94, v40);
                  goto LABEL_55;
                }
                v34 += 4;
                if (!v34)
                {
                  v35 = 1;
                  goto LABEL_56;
                }
              }
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v97, &v98, v38);
            }
            else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            {
              ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v99, &v100, v37);
            }
          }
          else
          {
            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              goto LABEL_67;
            ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v101, &v102, v36);
          }
LABEL_55:
          v35 = 0;
LABEL_56:
          if (v85 && v84 < 0)
            operator delete(v83[1]);
          if ((v35 & 1) != 0)
          {
            ++v30;
            v26 = v21[5];
            v28 = (v21[6] - v26) >> 3;
            if (v30 < v28)
              continue;
          }
          goto LABEL_69;
        }
        if ((v32 & 0x200) == 0)
          goto LABEL_37;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v103, &v104, v45);
LABEL_67:
        v35 = 0;
LABEL_69:
        if (v88 && v87 < 0)
          operator delete(v86[1]);
        if ((v35 & 1) == 0)
          goto LABEL_89;
LABEL_73:
        v42 = (uint64_t *)v21[1];
        if (v42)
        {
          do
          {
            v43 = v42;
            v42 = (uint64_t *)*v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            v43 = (uint64_t *)v21[2];
            v44 = *v43 == (_QWORD)v21;
            v21 = v43;
          }
          while (!v44);
        }
        v21 = v43;
        if (v43 == (uint64_t *)v90)
        {
LABEL_84:
          std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v89, v90[0]);
          v3 += 24;
          if (v3 == v82)
          {
LABEL_85:
            v48 = 0;
            goto LABEL_90;
          }
          goto LABEL_3;
        }
      }
    }
  }
  v49 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v49)
    ZinIrTdValidationUtil::ValidateKernelCaching<8u>(v49, v50, v51, v52, v53, v54, v55, v56);
LABEL_89:
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v89, v90[0]);
  v48 = 3;
LABEL_90:
  v86[0] = (void **)&v91;
  std::vector<std::list<ZinAneInstruction *>>::__destroy_vector::operator()[abi:ne180100](v86);
  return v48;
}

void sub_206E46B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,char *a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39,_QWORD *a40,uint64_t a41,char a42)
{
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&a37, a40);
  a27 = &a42;
  std::vector<std::list<ZinAneInstruction *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

uint64_t ZinValidateTd<8u>::ValidateDepModeSrc1(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  _BOOL8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BOOL8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL8 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BOOL8 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  _BOOL4 v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  _BOOL4 v108;
  unsigned int v109;
  unsigned int v110;
  _BOOL8 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  _BOOL8 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _BOOL8 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  _BOOL8 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _BOOL8 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _BOOL8 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  _BOOL8 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _BOOL8 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _BOOL8 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;

  v4 = *(_DWORD *)(a1 + 508);
  v5 = *(_DWORD *)(a2 + 504);
  if ((*(_DWORD *)(a2 + 768) & 3) == 1)
    v6 = ConvertCustomUnsignedTypeToInt32((*(_DWORD *)(a2 + 768) >> 2) & 0x1FFFFFFF, 0x1DuLL);
  else
    v6 = 0;
  v7 = *(_DWORD *)(a2 + 680);
  v8 = ZinCountOnes<unsigned int>(v7 >> 28);
  if ((*(_BYTE *)(a2 + 545) & 1) != 0)
  {
    v17 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v17)
      ZinValidateTd<8u>::ValidateDepModeSrc1(v17, v18, v19, v20, v21, v22, v23, v24);
    return 3;
  }
  if ((*(_BYTE *)(a2 + 776) & 7) != 0)
  {
    v9 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v9)
      ZinValidateTd<8u>::ValidateDepModeSrc1(v9, v10, v11, v12, v13, v14, v15, v16);
    return 3;
  }
  if ((*(_BYTE *)(a2 + 585) & 7) != 0)
  {
    v26 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v26)
      ZinValidateTd<8u>::ValidateDepModeSrc1(v26, v27, v28, v29, v30, v31, v32, v33);
    return 3;
  }
  if ((*(_BYTE *)(a1 + 545) & 4) != 0)
  {
    v42 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v42)
      ZinValidateTd<17u>::ValidateDepModeSrc1(v42, v43, v44, v45, v46, v47, v48, v49);
    return 3;
  }
  if ((*(_BYTE *)(a1 + 551) & 0x10) != 0)
  {
    v50 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v50)
      ZinValidateTd<17u>::ValidateDepModeSrc1(v50, v51, v52, v53, v54, v55, v56, v57);
    return 3;
  }
  if ((*(_BYTE *)(a1 + 1109) & 7) != 0)
  {
    v34 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v34)
      ZinValidateTd<8u>::ValidateDepModeSrc1(v34, v35, v36, v37, v38, v39, v40, v41);
    return 3;
  }
  v58 = *(_DWORD *)(a2 + 680);
  v59 = *(_DWORD *)(a1 + 1160);
  v60 = v59 ^ v58;
  if (((v59 ^ v58) & 0xF000000) != 0)
  {
    v61 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v61)
      ZinValidateTd<17u>::ValidateDepModeSrc1(v61, v62, v63, v64, v65, v66, v67, v68);
    return 3;
  }
  if ((v60 & 3) != 0)
  {
    v69 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v69)
      ZinValidateTd<8u>::ValidateDepModeSrc1(v69, v70, v71, v72, v73, v74, v75, v76);
    return 3;
  }
  if (v60 >> 28)
  {
    v85 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v85)
      ZinValidateTd<17u>::ValidateDepModeSrc1(v85, v86, v87, v88, v89, v90, v91, v92);
    return 3;
  }
  if ((v58 & 0x70000) != 0)
  {
    v77 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v77)
      ZinValidateTd<17u>::ValidateDepModeSrc1(v77, v78, v79, v80, v81, v82, v83, v84);
    return 3;
  }
  if ((v59 & 0x70000) != 0)
  {
    v93 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v93)
      ZinValidateTd<17u>::ValidateDepModeSrc1(v93, v94, v95, v96, v97, v98, v99, v100);
    return 3;
  }
  if ((*(_WORD *)(a1 + 514) & 0x7FFFu) * (*(_DWORD *)(a1 + 524) >> 30) >= 2
    && ((*(_WORD *)(a2 + 494) & 0x7FFE) != 0 || (*(_DWORD *)(a2 + 548) & 0xF0) == 0x40)
    && (*(_DWORD *)(a1 + 1120) ^ *(_DWORD *)(a2 + 600)) >= 0x40)
  {
    v129 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v129)
      ZinValidateTd<8u>::ValidateDepModeSrc1(v129, v130, v131, v132, v133, v134, v135, v136);
    return 3;
  }
  if (((*(_DWORD *)(a1 + 528) >> 13) & 3) * (*(_DWORD *)(a1 + 516) & 0x7FFFu) >= 2
    && (*(_WORD *)(a2 + 496) & 0x7FFE) != 0
    && (*(_DWORD *)(a1 + 1128) ^ *(_DWORD *)(a2 + 608)) >= 0x40)
  {
    v146 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v146)
      ZinValidateTd<8u>::ValidateDepModeSrc1(v146, v147, v148, v149, v150, v151, v152, v153);
    return 3;
  }
  v101 = v4 & 0x1FFFF;
  v102 = v5 & 0x1FFFF;
  v103 = (HIBYTE(v7) & 0xF) - v8;
  v104 = (v4 & 0x1FFFF) == (v5 & 0x1FFFF) && v6 % (int)v101 == 0;
  v105 = v101 / v103;
  v106 = v101 % v103;
  v107 = v102 / v103;
  v108 = !v106 && !(v102 % v103) && v6 % (int)v103 == 0;
  v109 = *(_DWORD *)(a1 + 1124) >> 6;
  v110 = *(_DWORD *)(a2 + 604) >> 6;
  if (v105 >= 2 && v107 >= 2 && v110 != v109)
  {
    v111 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v111)
      ZinValidateTd<17u>::ValidateDepModeSrc1(v111, v112, v113, v114, v115, v116, v117, v118);
    return 3;
  }
  v119 = *(_DWORD *)(a1 + 532) & 0x1FFF;
  v120 = *(_DWORD *)(a2 + 532) & 0x1FFF;
  if (v104)
  {
    result = 0;
    if (v119 >= 2 && v120 >= 2 && v119 != v120)
    {
      v121 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v121)
        ZinValidateTd<17u>::ValidateDepModeSrc1(v121, v122, v123, v124, v125, v126, v127, v128);
      return 3;
    }
  }
  else
  {
    if (!v108)
      return 0;
    v137 = *(_DWORD *)(a1 + 1132) >> 6;
    if (v119 >= 2)
    {
      if (v105 < 2)
      {
        if (v105 == 1 && v107 >= 2 && v137 != v110)
        {
          v154 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v154)
            ZinValidateTd<17u>::ValidateDepModeSrc1(v154, v155, v156, v157, v158, v159, v160, v161);
          return 3;
        }
      }
      else if ((double)v105 * (double)v109 != (double)v137)
      {
        v138 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v138)
          ZinValidateTd<17u>::ValidateDepModeSrc1(v138, v139, v140, v141, v142, v143, v144, v145);
        return 3;
      }
    }
    v162 = *(_DWORD *)(a2 + 612) >> 6;
    if (v120 >= 2)
    {
      if (v107 < 2)
      {
        if (v105 >= 2 && v107 == 1 && v162 != v109)
        {
          v171 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v171)
            ZinValidateTd<17u>::ValidateDepModeSrc1(v171, v172, v173, v174, v175, v176, v177, v178);
          return 3;
        }
      }
      else if ((double)v107 * (double)v110 != (double)v162)
      {
        v163 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v163)
          ZinValidateTd<17u>::ValidateDepModeSrc1(v163, v164, v165, v166, v167, v168, v169, v170);
        return 3;
      }
    }
    result = 0;
    if (v119 >= 2 && v105 == 1 && v120 >= 2 && v107 == 1 && v137 != v162)
    {
      v179 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v179)
        ZinValidateTd<17u>::ValidateDepModeSrc1(v179, v180, v181, v182, v183, v184, v185, v186);
      return 3;
    }
  }
  return result;
}

uint64_t ZinValidateTd<8u>::ValidateDepModeSrc2(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  _BOOL8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BOOL8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL8 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BOOL8 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  _BOOL4 v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  _BOOL4 v108;
  unsigned int v109;
  unsigned int v110;
  _BOOL8 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  _BOOL8 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _BOOL8 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  _BOOL8 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _BOOL8 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _BOOL8 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  _BOOL8 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _BOOL8 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _BOOL8 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;

  v4 = *(_DWORD *)(a1 + 508);
  v5 = *(_DWORD *)(a2 + 504);
  if ((*(_DWORD *)(a2 + 772) & 3) == 1)
    v6 = ConvertCustomUnsignedTypeToInt32((*(_DWORD *)(a2 + 772) >> 2) & 0x1FFFFFFF, 0x1DuLL);
  else
    v6 = 0;
  v7 = *(_DWORD *)(a2 + 684);
  v8 = ZinCountOnes<unsigned int>(v7 >> 28);
  if ((*(_BYTE *)(a2 + 545) & 2) != 0)
  {
    v17 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v17)
      ZinValidateTd<8u>::ValidateDepModeSrc2(v17, v18, v19, v20, v21, v22, v23, v24);
    return 3;
  }
  if ((*(_BYTE *)(a2 + 776) & 7) != 0)
  {
    v9 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v9)
      ZinValidateTd<8u>::ValidateDepModeSrc1(v9, v10, v11, v12, v13, v14, v15, v16);
    return 3;
  }
  if ((*(_BYTE *)(a2 + 589) & 7) != 0)
  {
    v26 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v26)
      ZinValidateTd<8u>::ValidateDepModeSrc2(v26, v27, v28, v29, v30, v31, v32, v33);
    return 3;
  }
  if ((*(_BYTE *)(a1 + 545) & 4) != 0)
  {
    v42 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v42)
      ZinValidateTd<17u>::ValidateDepModeSrc1(v42, v43, v44, v45, v46, v47, v48, v49);
    return 3;
  }
  if ((*(_BYTE *)(a1 + 551) & 0x10) != 0)
  {
    v50 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v50)
      ZinValidateTd<17u>::ValidateDepModeSrc1(v50, v51, v52, v53, v54, v55, v56, v57);
    return 3;
  }
  if ((*(_BYTE *)(a1 + 1109) & 7) != 0)
  {
    v34 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v34)
      ZinValidateTd<8u>::ValidateDepModeSrc1(v34, v35, v36, v37, v38, v39, v40, v41);
    return 3;
  }
  v58 = *(_DWORD *)(a2 + 684);
  v59 = *(_DWORD *)(a1 + 1160);
  v60 = v59 ^ v58;
  if (((v59 ^ v58) & 0xF000000) != 0)
  {
    v61 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v61)
      ZinValidateTd<17u>::ValidateDepModeSrc1(v61, v62, v63, v64, v65, v66, v67, v68);
    return 3;
  }
  if ((v60 & 3) != 0)
  {
    v69 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v69)
      ZinValidateTd<8u>::ValidateDepModeSrc2(v69, v70, v71, v72, v73, v74, v75, v76);
    return 3;
  }
  if (v60 >> 28)
  {
    v85 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v85)
      ZinValidateTd<17u>::ValidateDepModeSrc1(v85, v86, v87, v88, v89, v90, v91, v92);
    return 3;
  }
  if ((v58 & 0x70000) != 0)
  {
    v77 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v77)
      ZinValidateTd<17u>::ValidateDepModeSrc1(v77, v78, v79, v80, v81, v82, v83, v84);
    return 3;
  }
  if ((v59 & 0x70000) != 0)
  {
    v93 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v93)
      ZinValidateTd<17u>::ValidateDepModeSrc1(v93, v94, v95, v96, v97, v98, v99, v100);
    return 3;
  }
  if ((*(_WORD *)(a1 + 514) & 0x7FFFu) * (*(_DWORD *)(a1 + 524) >> 30) >= 2
    && ((*(_WORD *)(a2 + 494) & 0x7FFE) != 0 || (*(_DWORD *)(a2 + 548) & 0xF0) == 0x40)
    && (*(_DWORD *)(a1 + 1120) ^ *(_DWORD *)(a2 + 624)) >= 0x40)
  {
    v129 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v129)
      ZinValidateTd<8u>::ValidateDepModeSrc2(v129, v130, v131, v132, v133, v134, v135, v136);
    return 3;
  }
  if (((*(_DWORD *)(a1 + 528) >> 13) & 3) * (*(_DWORD *)(a1 + 516) & 0x7FFFu) >= 2
    && (*(_WORD *)(a2 + 496) & 0x7FFE) != 0
    && (*(_DWORD *)(a1 + 1128) ^ *(_DWORD *)(a2 + 632)) >= 0x40)
  {
    v146 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v146)
      ZinValidateTd<8u>::ValidateDepModeSrc2(v146, v147, v148, v149, v150, v151, v152, v153);
    return 3;
  }
  v101 = v4 & 0x1FFFF;
  v102 = v5 & 0x1FFFF;
  v103 = (HIBYTE(v7) & 0xF) - v8;
  v104 = (v4 & 0x1FFFF) == (v5 & 0x1FFFF) && v6 % (int)v101 == 0;
  v105 = v101 / v103;
  v106 = v101 % v103;
  v107 = v102 / v103;
  v108 = !v106 && !(v102 % v103) && v6 % (int)v103 == 0;
  v109 = *(_DWORD *)(a1 + 1124) >> 6;
  v110 = *(_DWORD *)(a2 + 628) >> 6;
  if (v105 >= 2 && v107 >= 2 && v110 != v109)
  {
    v111 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v111)
      ZinValidateTd<17u>::ValidateDepModeSrc1(v111, v112, v113, v114, v115, v116, v117, v118);
    return 3;
  }
  v119 = *(_DWORD *)(a1 + 532) & 0x1FFF;
  v120 = *(_DWORD *)(a2 + 532) & 0x1FFF;
  if (v104)
  {
    result = 0;
    if (v119 >= 2 && v120 >= 2 && v119 != v120)
    {
      v121 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v121)
        ZinValidateTd<17u>::ValidateDepModeSrc1(v121, v122, v123, v124, v125, v126, v127, v128);
      return 3;
    }
  }
  else
  {
    if (!v108)
      return 0;
    v137 = *(_DWORD *)(a1 + 1132) >> 6;
    if (v119 >= 2)
    {
      if (v105 < 2)
      {
        if (v105 == 1 && v107 >= 2 && v137 != v110)
        {
          v154 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v154)
            ZinValidateTd<17u>::ValidateDepModeSrc1(v154, v155, v156, v157, v158, v159, v160, v161);
          return 3;
        }
      }
      else if ((double)v105 * (double)v109 != (double)v137)
      {
        v138 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v138)
          ZinValidateTd<17u>::ValidateDepModeSrc1(v138, v139, v140, v141, v142, v143, v144, v145);
        return 3;
      }
    }
    v162 = *(_DWORD *)(a2 + 636) >> 6;
    if (v120 >= 2)
    {
      if (v107 < 2)
      {
        if (v105 >= 2 && v107 == 1 && v162 != v109)
        {
          v171 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v171)
            ZinValidateTd<17u>::ValidateDepModeSrc1(v171, v172, v173, v174, v175, v176, v177, v178);
          return 3;
        }
      }
      else if ((double)v107 * (double)v110 != (double)v162)
      {
        v163 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v163)
          ZinValidateTd<17u>::ValidateDepModeSrc1(v163, v164, v165, v166, v167, v168, v169, v170);
        return 3;
      }
    }
    result = 0;
    if (v119 >= 2 && v105 == 1 && v120 >= 2 && v107 == 1 && v137 != v162)
    {
      v179 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v179)
        ZinValidateTd<17u>::ValidateDepModeSrc1(v179, v180, v181, v182, v183, v184, v185, v186);
      return 3;
    }
  }
  return result;
}

void ZinIrCodegenHandleTds<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Out of memory during network codegen\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Invalid TD exists\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Error during network codegen\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrCodegenHandleTdsMakeList<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ZinIrContextSwitchValidator failed\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Instruction offset could not be calculated\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrCodegenValidateTds<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Validation for DRAM circular buffer failed.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Validation for CachePrefetchKernelTaskInterval failed.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Validation for L2 circular buffer failed.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Validation for RCAS failed.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Validation for DepMode failed.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Validation for PE Reduction Accumulation Retention failed.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Validation kernel caching failure.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrContextSwitchValidator<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Last task of every segment requires TSR to be set\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "TDs with PEAccKeep set cannot be context switch points\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Producing chained buffers cannot be context switch points\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Last task of the network should have no live outs set\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void SetTensorKernelDependency<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "invalid hw td_header\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<8u>::HandleCommonMACBypassMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing mir_info in NE Bypass layer.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<8u>::HandleCommonArgMinMax(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing mir_info in NEPoolLayer\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<8u>::HandleCommonPoolOpcode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing Mir Info in NEPool layer.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<8u>::HandleCommonConvOpcode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing mir info in a NE conv layer.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<8u>::HandleTileDmaSrcConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Oplayer shouldn't have more than 3 inputs at codegen\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<8u>::HandleL2Config(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Output missing L2 location\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Max/Min Pooling should always be used with negative/positive padding mode.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid Padding mode for Conv\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<8u>::HandleNEConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "HandleNEConfigRCASCfg failed./n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Failed to set NE Round Cfg registers", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<8u>::HandleNEConfigRCASCfg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unknown RCAS Direction.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<8u>::HandleEngineLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Oplayer does not have ANE kernel info\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void HandlePELayer<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Invalid PE Secure Flush", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void PECodegenUtils::HandlePEGOCLayer<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: PEGOC is binary, so it should encapsulate at least a Dynamic GOC layer.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void PECodegenUtils::HandlePEPoolLayer<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: DoPool failed", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: PE Pooling operation not supported.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: PE Max Pooling padding mode is not Negative\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: PE Min Pooling padding mode is not Positive\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: DoPoolKernel failed", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void CodegenReductionFinalScaleEpsilon<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Final scale of PE reduction should not be zero or subnormal.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void CodegenReductionResult<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Cannot codegen Reduction Result.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void GetReductionResultIndexGlobalArg<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Reduction cannot be performed on multiple spatial dimensions with more than one elementes for GlobalArgMinMax.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Reduction dimension index not supported.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<8u>::ValidateOCGSizes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "unexpected format\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinValidateTd<8u>::Test(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinValidateTd<8u>::Test(uint8_t *a1, _QWORD *a2, uint64_t a3)
{
  *(_DWORD *)a1 = 136315138;
  *a2 = "kernel_dma_src_coeff_cache_hint == ane_kernel_dma_src_coeff_dma_config_cache_hint_noalloc_v8 || kernel_dma_src_c"
        "oeff_cache_hint == ane_kernel_dma_src_coeff_dma_config_cache_hint_alloc_v8 || kernel_dma_src_coeff_cache_hint =="
        " ane_kernel_dma_src_coeff_dma_config_cache_hint_depri_v8 || kernel_dma_src_coeff_cache_hint == ane_kernel_dma_sr"
        "c_coeff_dma_config_cache_hint_drop_v8";
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a1);
}

void ZinValidateTd<8u>::ValidateDepMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinValidateTd<8u>::ValidateRCASDependency(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinValidateTd<8u>::ValidateL2CircularBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinIrTdValidationUtil::ValidateDramCircularBuffer<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinValidateTd<8u>::ValidatePEIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinValidateTd<8u>::CheckKMEMBufferSizes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinValidateTd<8u>::VerifyL2InplaceAllocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinValidateTd<8u>::ValidationForNonZeroFields(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinValidateTd<8u>::CheckRedundantKDMARegisters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinValidateTd<8u>::ValidateFillLowerNEFirst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinValidateTd<8u>::ValidatePEIndexMaxIndexForBroadcastedIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinValidateTd<8u>::ValidatePEIndexMaxIndexForNonBroadcastedIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinIrTdValidationUtil::ValidateKernelCaching<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinValidateTd<8u>::ValidateDepModeSrc1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinValidateTd<8u>::ValidateDepModeSrc2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

uint64_t ZinIrCrossProductUnit::TensorDimensions(ZinIrCrossProductUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)this + 1);
  v5 = *(_OWORD *)(v4 + 8);
  v6 = *(_OWORD *)(v4 + 24);
  *((_QWORD *)a3 + 4) = *(_QWORD *)(v4 + 40);
  *(_OWORD *)a3 = v5;
  *((_OWORD *)a3 + 1) = v6;
  return 0;
}

uint64_t ZinIrCrossProductUnit::CreateOpcode@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v4, 13);
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v4;
  return result;
}

void sub_206E52358(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x1081C409227ACB4);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCrossProductUnit::CreateLayer(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  int v17;
  uint64_t v18;

  ZinIrCrossProductUnit::CreateOpcode((uint64_t)&v17);
  if (v17)
  {
    v5 = 0;
  }
  else
  {
    v5 = operator new();
    v6 = (std::__shared_weak_count *)(*a3)[1];
    v15 = **a3;
    v16 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    ZinCrossProductLayer::ZinCrossProductLayer(v5, &v18, &v15, v9 + 8);
    v10 = v16;
    if (v16)
    {
      v11 = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    ZinIrOpLayer::ValidateSemantics(v5);
  }
  v13 = v18;
  v18 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return v5;
}

void sub_206E5249C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

void ZinIrCrossProductUnit::~ZinIrCrossProductUnit(void **this)
{
  *this = &off_24C020528;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
}

{
  *this = &off_24C020528;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
  JUMPOUT(0x20BD002F8);
}

void ZinIrIrObject::ZinIrIrObject(ZinIrIrObject *this, uint64_t a2)
{
  *(_QWORD *)this = &unk_24C017898;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = this;
}

uint64_t ZinPESecureFlushPerf::GetPECostPerPatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, unint64_t *a8)
{
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t v11;

  a8[3] = (a5 + a7 - 1) / a7 * ((a4 + a6 - 1) / a6);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  v10 = a8[3];
  v11 = 4;
  if ((v9 & (v10 < 4)) == 0)
    v11 = a8[3];
  a8[1] = v10;
  a8[2] = v11;
  *a8 = v10;
  return 0;
}

void RtProcedureGraphNode::~RtProcedureGraphNode(RtProcedureGraphNode *this)
{
  RtOperationGraph *v2;
  uint64_t v3;

  v2 = (RtOperationGraph *)*((_QWORD *)this + 3);
  if (v2)
  {
    RtOperationGraph::~RtOperationGraph(v2);
    MEMORY[0x20BD002F8]();
  }
  v3 = *((_QWORD *)this + 4);
  if (v3)
    MEMORY[0x20BD002F8](v3, 0x1000C40504FFAC1);
  RtOperationAdjacencies::~RtOperationAdjacencies((RtProcedureGraphNode *)((char *)this + 40));
}

ZinIrKernel *ValidateKernelQuantizationSemantics(ZinIrKernel **a1)
{
  ZinIrKernel *result;
  int ScaleFormat;
  double v4;
  BOOL HasPerCoutScale;
  float v6;
  int v7;
  uint64_t v8;
  unsigned int WeightFormat;
  const char *v10;
  const char *v11;
  _QWORD v12[2];
  char v13;
  int v14;
  float v15;

  result = *a1;
  if (*((_QWORD *)result + 73) || *((_QWORD *)result + 75))
  {
    v15 = 0.0;
    v14 = 0;
    ZinIrKernel::HasSingularScale(result, &v15);
    ZinIrKernel::HasSingularZeroPoint(*a1, &v14);
    if (ZinIrKernel::HasPerCoutScale(*a1))
    {
      ScaleFormat = ZinIrKernel::GetScaleFormat(*a1);
      if ((ScaleFormat & 0xFFFFFFFD) != 4)
      {
        ZinIrKernelFormatToString(ScaleFormat, v12);
        if (v13 >= 0)
          v10 = (const char *)v12;
        else
          v10 = (const char *)v12[0];
        ZinAssertImpl("Error: invalid format %s for per-cout scale. Only fp16 and fp32 are supported", v10);
      }
      *(float *)&v4 = v15;
      if (v15 != 0.0)
        ZinAssertImpl("Error: per-cout scale and scalar scale cannot be defined simultaneously", v4);
    }
    if (ZinIrKernel::HasPerCoutZeroPoint(*a1) && v14)
      ZinAssertImpl("Error: per-cout zero point and scalar zero point cannot be defined simultaneously");
    HasPerCoutScale = ZinIrKernel::HasPerCoutScale(*a1);
    v6 = v15;
    result = (ZinIrKernel *)ZinIrKernel::HasPerCoutZeroPoint(*a1);
    if (v14)
      v7 = 1;
    else
      v7 = (int)result;
    if (HasPerCoutScale || v6 != 0.0 || v7)
    {
      v8 = *((_QWORD *)*a1 + 73);
      if (v8)
      {
        if (*(_BYTE *)(v8 + 152))
          ZinAssertImpl("Error: mutable kernels are not supported with kernel quantization");
      }
    }
    if (v7)
    {
      WeightFormat = ZinIrKernel::GetWeightFormat(*a1);
      if ((ZinKernelFormatIsQuantizationCompatible(WeightFormat) & 1) == 0)
      {
        ZinIrKernelFormatToString(WeightFormat, v12);
        if (v13 >= 0)
          v11 = (const char *)v12;
        else
          v11 = (const char *)v12[0];
        ZinAssertImpl("Error: unsupported kernel format %s for kernel zero point. Only int8 and uint8 kernel formats are supported.", v11);
      }
      result = (ZinIrKernel *)ZinIrKernel::HasPerCoutZeroPoint(*a1);
      if ((result & 1) == 0)
      {
        if (WeightFormat == 1)
        {
          result = (ZinIrKernel *)ZinInRange<signed char>(v14);
          if ((result & 1) == 0)
            ZinAssertImpl("Error: scalar zero point = %d is out of bounds for int8 format", v14);
        }
        else
        {
          result = (ZinIrKernel *)ZinInRange<unsigned char>(v14);
          if ((result & 1) == 0)
            ZinAssertImpl("Error: scalar zero point = %d is out of bounds for uint8 format", v14);
        }
      }
    }
  }
  return result;
}

void sub_206E5281C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ValidateKernelFormatSemantics(ZinIrKernel **a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  const char *v5;
  _QWORD v6[2];
  char v7;

  result = ZinIrKernel::GetWeightFormat(*a1);
  v3 = *((_QWORD *)*a1 + 73);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 152))
    {
      v4 = result;
      result = FormatValidForMutableLayer(result);
      if ((result & 1) == 0)
      {
        ZinIrKernelFormatToString(v4, v6);
        if (v7 >= 0)
          v5 = (const char *)v6;
        else
          v5 = (const char *)v6[0];
        ZinAssertImpl("Error: invalid mutable kernel format %s for conv layer", v5);
      }
    }
  }
  return result;
}

void sub_206E528BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ZinIrKernel **ValidateKernelFootprint(ZinIrKernel **result, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5)
{
  ZinIrKernel *v5;
  uint64_t v6;
  BOOL v7;
  ZinIrKernel **v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  _BOOL8 HasPerCoutScale;
  int v17;
  int v18;
  _BOOL8 HasPerCoutZeroPoint;
  char v20;
  char v21;
  int v22;
  uint64_t v23;
  int *v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  char v32;
  int CanUseKernelStreaming;
  unint64_t EstimatedFootprintPerCoutElement;
  unsigned int v35;
  int v36;
  uint64_t v37[74];
  char v38;
  int v39[6];
  int8x16_t v40;
  uint64_t v41;

  v5 = *result;
  v6 = *((_QWORD *)*result + 73);
  if (v6)
  {
    v7 = *((int *)v5 + 96) <= 1 && *((_DWORD *)v5 + 97) <= 1;
    if (v7 && *((int *)v5 + 98) <= 1)
    {
      v12 = result;
      v13 = *((_QWORD *)v5 + 33);
      v40.i64[0] = *((_QWORD *)v5 + 34);
      v40.i64[1] = v13;
      v41 = *((_QWORD *)v5 + 35);
      v14 = *(_DWORD *)(v6 + 8);
      v15 = *((_BYTE *)v5 + 448);
      HasPerCoutScale = ZinIrKernel::HasPerCoutScale(v5);
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)HasPerCoutScale);
      v18 = v17;
      HasPerCoutZeroPoint = ZinIrKernel::HasPerCoutZeroPoint(*v12);
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)HasPerCoutZeroPoint);
      v21 = v20;
      v35 = v15 & 0x40;
      v22 = v35 >> 6;
      v36 = v22;
      v23 = *(_QWORD *)(*((_QWORD *)*v12 + 73) + 304);
      if ((v15 & 0x40) != 0)
        v24 = (int *)((char *)v5 + 340);
      else
        v24 = (int *)((char *)v5 + 328);
      EstimatedFootprintPerCoutElement = ZinKernelGetEstimatedFootprintPerCoutElement(*(_QWORD *)(a2 + 16) / *((_QWORD *)v5 + 50), v22, v24, &v40, *(_DWORD *)a2, v14, a5, v18, v20, v23);
      result = (ZinIrKernel **)ZinKernelFitsInKMEM(*(_QWORD *)(a2 + 16) / *((_QWORD *)v5 + 50), v36, 0, v24, &v40, *(_DWORD *)a2, v14, a5, v18, v21, v23);
      if ((result & 1) == 0)
      {
        ZinKernelComputeStrideExpansion(a5, v24, (unint64_t *)&v40, *(_DWORD *)a2, v36, v39);
        v25 = *((unsigned __int8 *)v5 + 448);
        v26 = *((_QWORD *)v5 + 50);
        v27 = a3[1];
        v29 = a3[4];
        v28 = a3[5];
        v30 = a3[3];
        v31 = *(_DWORD *)a2;
        v32 = *(_BYTE *)(a4 + 384);
        LOBYTE(v37[0]) = 0;
        v38 = 0;
        CanUseKernelStreaming = ZinMirConvUtils::CanUseKernelStreaming(v25 >> 7, v26, v41, v39[5], v27, v28, v30, v29, v31, (uint64_t)a5, v32, v37);
        std::__optional_destruct_base<ZinMirL2Config,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v37);
        if (!CanUseKernelStreaming
          || (result = (ZinIrKernel **)ZinKernelFitsInKMEM(*(_QWORD *)(a2 + 16) / *((_QWORD *)v5 + 50), v35 != 0, 1, v24, &v40, *(_DWORD *)a2, v14, a5, v18, v21, v23), !(_DWORD)result))
        {
          ZinAssertImpl("Error: Convolution configuration cannot fit in KMEM (Given: %zub, Max: %zub)", EstimatedFootprintPerCoutElement, a5[60]);
        }
      }
    }
  }
  return result;
}

void sub_206E52B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::__optional_destruct_base<ZinMirL2Config,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL ValidateKernelFormat(ZinIrKernel **a1, uint64_t a2)
{
  int WeightFormat;
  int v4;
  _BOOL8 result;
  int Upcasted4bitPaletteFormatFrom3bitPaletteFormat;
  const char *v7;
  _QWORD v8[2];
  char v9;

  WeightFormat = ZinIrKernel::GetWeightFormat(*a1);
  v4 = WeightFormat;
  if (!*(_BYTE *)(a2 + 1260) && ZinKernelFormatGetUnderlyingType(WeightFormat) == 5)
    ZinAssertImpl("E4M3 not supported as kernel format on this architecture");
  result = ZinKernelFormatIsPalette(v4);
  if (result)
  {
    result = ZinIrHalParameters::IsSupportedPaletteFormat(a2, v4);
    if (!result)
    {
      if (!Is3bitPaletteKernelFormat(v4)
        || (Upcasted4bitPaletteFormatFrom3bitPaletteFormat = GetUpcasted4bitPaletteFormatFrom3bitPaletteFormat(v4),
            !(result = ZinIrHalParameters::IsSupportedPaletteFormat(a2, Upcasted4bitPaletteFormatFrom3bitPaletteFormat))))
      {
        ZinIrKernelFormatToString(v4, v8);
        if (v9 >= 0)
          v7 = (const char *)v8;
        else
          v7 = (const char *)v8[0];
        ZinAssertImpl("Error: invalid palette kernel format %s for conv layer", v7);
      }
    }
  }
  return result;
}

void sub_206E52BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ValidatePaletteVectorSize(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int WeightFormat;
  uint64_t result;
  size_t v19;
  const char *v20;
  const char *v21;
  int v22;
  int v23;
  int v24;
  size_t v25;
  int v26;
  unint64_t v27[3];

  v8 = 0;
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 264);
  v27[0] = *(_QWORD *)(*a1 + 272);
  v27[1] = v10;
  v27[2] = *(_QWORD *)(v9 + 280);
  v11 = *(_QWORD *)(v9 + 584);
  v12 = *(_QWORD *)(v11 + 304);
  v13 = *(_QWORD *)(a4 + 1592);
  while (v12 != 1 << v8)
  {
    if (v13 + 1 == ++v8)
    {
      if (v12 == 1 || v13 > 1)
        ZinAssertImpl("Error: invalid kernel palette vector size %zu. It should be 2's power of 0 ~ %zu", *(_QWORD *)(v11 + 304), v13);
LABEL_6:
      ZinAssertImpl("Error: vector palettized weights are not supported");
    }
  }
  if (v12 != 1 && v13 <= 1)
    goto LABEL_6;
  v14 = *(_QWORD *)(v9 + 400);
  if (v14 >= 2 && *(_QWORD *)(a3 + 16) / v14 % v12)
    ZinAssertImpl("Error: invalid kernel palette vector size %zu for output channel = %zu, num_group = %zu", v12, *(_QWORD *)(a3 + 16), v14);
  if (v12 >= 2)
  {
    if (!*(_BYTE *)(a4 + 1590))
      ZinAssertImpl("Error: vector palettization with vector size = %zu > 1 is not supported", *(_QWORD *)(v11 + 304));
    if (v11 && *(_BYTE *)(v11 + 152))
      ZinAssertImpl("Error: mutable kernels are not supported with vector palettization");
    v15 = v9 + 340;
    v16 = *(_BYTE *)(v9 + 448) & 0x40;
    if ((*(_BYTE *)(v9 + 448) & 0x40) == 0)
      v15 = v9 + 328;
    v25 = *(_QWORD *)v15;
    v26 = *(_DWORD *)(v15 + 8);
    ZinKernelComputeStrideExpansion((_QWORD *)a4, (int *)&v25, v27, *(_DWORD *)a2, v16 >> 6, (int *)&v21);
    if (v23 * v22 * v24 != 1)
      ZinAssertImpl("Error: invalid output stride [%d, %d, %d]. Only support stride = 1 for vector palettization", v22, v23, v24);
    if ((*(_BYTE *)(v9 + 448) & 0x40) != 0)
      ZinAssertImpl("Error: deconv with vector palettization is not supported");
    if (ZinMirConvUtils::IsChannelwiseConvolution(*(ZinMirConvUtils **)(a2 + 16), *(ZinMirConvUtils **)(a3 + 16), *(ZinMirConvUtils **)(v9 + 400)))
    {
      ZinAssertImpl("Invalid kernel palette vector size.");
    }
    v9 = *a1;
  }
  v25 = 0;
  WeightFormat = ZinIrKernel::GetWeightFormat((ZinIrKernel *)v9);
  result = ZinKernelGetPaletteLUTSize(WeightFormat, v12, &v25);
  if ((_DWORD)result)
  {
    ZinIrKernelFormatToString(WeightFormat, &v21);
    if (v24 >= 0)
      v20 = (const char *)&v21;
    else
      v20 = v21;
    ZinAssertImpl("Error: failed to get palette LUT size due to invalid kernel format %s", v20);
  }
  v19 = *(_QWORD *)(a4 + 488);
  if (v25 > v19)
    ZinAssertImpl("Error: invalid palette LUT size = %zu bytes. It should not exceed %zu bytes", v25, v19);
  return result;
}

void sub_206E52E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__int128 *ZinIrHalH15c::GetParams(ZinIrHalH15c *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  void *v4;
  void *__p;
  _BYTE *v6;
  void *v7;
  _BYTE *v8;
  void *v9;
  _BYTE *v10;
  void *v11;
  _BYTE *v12;
  void *v13;
  _BYTE *v14;
  void *v15;
  _BYTE *v16;
  void *v17;
  _BYTE *v18;
  void *v19;
  _BYTE *v20;
  void *v21;
  _BYTE *v22;
  void *v23;
  _BYTE *v24;
  void *v25;
  _BYTE *v26;
  void *v27;
  _BYTE *v28;
  void *v29;
  _BYTE *v30;
  void *v31;
  _BYTE *v32;
  void *v33;
  _BYTE *v34;
  void *v35;
  _BYTE *v36;
  _OWORD v37[3];
  int v38;
  _OWORD v39[7];
  _OWORD v40[2];
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _OWORD v44[3];
  uint64_t v45;
  int v46;
  int64x2_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int64x2_t v51;
  uint64_t v52;
  int v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  int v58;
  int64x2_t v59;
  uint64_t v60;
  int v61;
  int v62;
  __int128 v63;
  uint64_t v64;
  int v65;
  int v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  int v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  int v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  int v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  int v82;
  int64x2_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int64x2_t v87;
  uint64_t v88;
  int v89;
  int v90;
  int64x2_t v91;
  uint64_t v92;
  int v93;
  int v94;
  int64x2_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int64x2_t v99;
  uint64_t v100;
  int v101;
  int v102;
  __int128 v103;
  uint64_t v104;
  int v105;
  int v106;
  __int128 v107;
  uint64_t v108;
  int v109;
  int v110;
  __int128 v111;
  uint64_t v112;
  int v113;
  int v114;
  __int128 v115;
  uint64_t v116;
  int v117;
  int64x2_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  int v122;
  _QWORD v123[3];
  int v124;
  _QWORD v125[3];
  int v126;
  _QWORD v127[3];
  int v128;
  _QWORD v129[3];
  int v130;
  _QWORD v131[3];
  int v132;
  _QWORD v133[3];
  int v134;
  _QWORD v135[3];
  int v136;
  _QWORD v137[3];
  int v138;
  _QWORD v139[3];
  int v140;
  _QWORD v141[3];
  int v142;
  _QWORD v143[3];
  int v144;
  _QWORD v145[3];
  int v146;
  _QWORD v147[3];
  int v148;
  _QWORD v149[3];
  _OWORD v150[9];
  _OWORD v151[2];
  _OWORD v152[6];
  _OWORD v153[2];
  _OWORD v154[2];
  _OWORD v155[2];
  __int128 v156;
  uint64_t v157;

  v157 = *MEMORY[0x24BDAC8D0];
  {
    ZinIrHalH15c::GetParams(void)const::ZinIrHalH15cParameters = xmmword_207A8AA00;
    dword_254525BB0 = 8;
    unk_254525BB8 = xmmword_207A8AA10;
    unk_254525BC8 = xmmword_207A7E070;
    unk_254525BD8 = xmmword_207A7E080;
    unk_254525BE8 = xmmword_207A7D4C0;
    unk_254525BF8 = xmmword_207A7E090;
    unk_254525C08 = xmmword_207A7E080;
    unk_254525C18 = xmmword_207A7D370;
    unk_254525C28 = xmmword_207A7E0A0;
    unk_254525C38 = xmmword_207A7E0B0;
    unk_254525C48 = xmmword_207A7D3A0;
    unk_254525C58 = vdupq_n_s64(4uLL);
    qword_254525C68 = 4;
    xmmword_254525C70 = xmmword_207AA11F0;
    unk_254525C80 = unk_207AA1200;
    xmmword_254525C90 = xmmword_207AA11F0;
    unk_254525CA0 = unk_207AA1200;
    qword_254525CC0 = 4;
    xmmword_254525CB0 = xmmword_207AA1210;
    xmmword_254525CC8 = xmmword_207A7D3B0;
    xmmword_254525CD8 = xmmword_207A7D3C0;
    xmmword_254525CE8 = xmmword_207A7D3C0;
    xmmword_254525CF8 = xmmword_207A7D3C0;
    xmmword_254525D08 = xmmword_207A7D3D0;
    xmmword_254525D18 = xmmword_207A7D3E0;
    xmmword_254525D28 = xmmword_207A7D3F0;
    xmmword_254525D38 = xmmword_207A7D400;
    xmmword_254525D48 = xmmword_207A7D410;
    xmmword_254525D58 = xmmword_207A7D4E0;
    xmmword_254525D68 = xmmword_207A7F3A0;
    xmmword_254525D78 = xmmword_207A7D440;
    xmmword_254525D88 = xmmword_207A7D450;
    xmmword_254525D98 = xmmword_207A7E0D0;
    xmmword_254525DA8 = (__int128)vdupq_n_s64(0x40uLL);
    xmmword_254525DB8 = xmmword_207A7E120;
    xmmword_254525DC8 = xmmword_207A7D480;
    xmmword_254525DD8 = xmmword_207A7D490;
    xmmword_254525DE8 = xmmword_207A7D4A0;
    xmmword_254525DF8 = xmmword_207A7E0E0;
    xmmword_254525E08 = xmmword_207A8AA20;
    qword_254525E18 = 0;
    word_254525E20 = 256;
    xmmword_254525E28 = xmmword_207A7D4C0;
    xmmword_254525E38 = xmmword_207A7D4D0;
    xmmword_254525E48 = xmmword_207A7D4E0;
    qword_254525E58 = 0x10000;
    byte_254525E60 = 122;
    xmmword_254525E68 = xmmword_207A7E100;
    dword_254525E78 = 520097776;
    qword_254525E7C = 0xFFFFFFEB0000000BLL;
    xmmword_254525E88 = xmmword_207A7D500;
    xmmword_254525E98 = xmmword_207A7D510;
    xmmword_254525EA8 = xmmword_207A7D520;
    v118 = vdupq_n_s64(8uLL);
    v119 = xmmword_207A7E110;
    v120 = xmmword_207A7E120;
    v121 = xmmword_207A7D490;
    std::vector<std::pair<unsigned long,unsigned long>>::vector[abi:ne180100](&qword_254525EB8, (uint64_t)&v118, 4uLL);
    xmmword_254525ED0 = xmmword_207A7E130;
    unk_254525EE0 = xmmword_207A7D540;
    xmmword_254525EF0 = (__int128)vdupq_n_s64(0x20uLL);
    unk_254525F00 = xmmword_207A7D370;
    unk_254525F10 = vdupq_n_s64(8uLL);
    unk_254525F20 = xmmword_207A7D550;
    unk_254525F30 = xmmword_207A7D560;
    unk_254525F40 = vdupq_n_s64(0x100uLL);
    unk_254525F50 = vdupq_n_s64(0x80uLL);
    unk_254525F60 = xmmword_207A7E140;
    unk_254525F70 = xmmword_207A7E150;
    unk_254525F80 = xmmword_207A7D590;
    unk_254525F90 = xmmword_207A7D5A0;
    unk_254525FA0 = xmmword_207A7D5B0;
    unk_254525FB0 = vdupq_n_s64(2uLL);
    unk_254525FC0 = xmmword_207A7D3C0;
    unk_254525FD0 = vdupq_n_s64(0x4000uLL);
    unk_254525FE0 = xmmword_207A7D5C0;
    unk_254525FF0 = 257;
    byte_254525FF6 = 0;
    unk_254525FF2 = 0;
    unk_254525FF7 = 1;
    unk_254525FFF = 0x101010101010101;
    unk_254525FF9 = 0x101010101010101;
    unk_254526007 = 16843008;
    byte_25452600F = 0;
    unk_254526010 = 16842753;
    word_254526014 = 1;
    qword_254526016 = 0x101010101010101;
    word_25452601E = 0;
    unk_254526020 = xmmword_207A7D4C0;
    unk_254526030 = xmmword_207A7D5E0;
    unk_254526040 = 40;
    unk_254526050 = 0;
    unk_254526048 = 0;
    word_254526058 = 1;
    *(int *)((char *)&dword_25452605A + 3) = 16843009;
    dword_25452605A = 16843009;
    unk_254526068 = 16;
    byte_254526070 = 0;
    unk_254526071 = 16843009;
    unk_254526079 = 0x101010100010000;
    unk_254526081 = 16844808;
    unk_254526085 = 0;
    unk_254526087 = 16843009;
    byte_25452608B = 1;
    unk_25452608C = 0x1010100010000;
    unk_254526094 = 16777472;
    word_254526098 = 2056;
    unk_2545260A0 = xmmword_207A7E180;
    unk_2545260B0 = 4;
    word_2545260B8 = 0;
    unk_2545260BC = 1;
    unk_2545260C0 = 0x10000;
    word_2545260C4 = 257;
    byte_2545260C6 = 1;
    unk_2545260C7 = 0;
    unk_2545260CB = 0x606000000010101;
    unk_2545260D3 = 65792;
    unk_2545260D7 = 256;
    byte_2545260D9 = 0;
    std::string::basic_string[abi:ne180100]<0>(&qword_2545260E0, "Simple");
    qword_2545260F8 = 50331648;
    dword_254526100 = 1071225242;
    *(_QWORD *)algn_254526104 = 0x230000000ELL;
    *(_OWORD *)&algn_254526104[12] = xmmword_207A7D5F0;
    *(int64x2_t *)&algn_254526104[28] = vdupq_n_s64(0x40uLL);
    *(_OWORD *)&algn_254526104[44] = xmmword_207A7D530;
    qword_254526140 = 8;
    byte_254526148 = 0;
    unk_25452614C = 0xF3E800000;
    byte_254526154 = 1;
    v156 = xmmword_207A7D610;
    std::vector<ZinIrPaddingMode>::vector[abi:ne180100](&qword_254526158, &v156, 4uLL);
    v154[0] = xmmword_207AA1228;
    v154[1] = unk_207AA1238;
    v155[0] = xmmword_207AA1248;
    *(_OWORD *)((char *)v155 + 12) = *(__int128 *)((char *)&xmmword_207AA1248 + 12);
    std::vector<ZinIrPoolingMode>::vector[abi:ne180100](&qword_254526170, v154, 0xFuLL);
    v152[4] = xmmword_207AA12A4;
    v152[5] = unk_207AA12B4;
    v153[0] = xmmword_207AA12C4;
    *(_OWORD *)((char *)v153 + 12) = *(__int128 *)((char *)&xmmword_207AA12C4 + 12);
    v152[0] = xmmword_207AA1264;
    v152[1] = unk_207AA1274;
    v152[2] = xmmword_207AA1284;
    v152[3] = unk_207AA1294;
    std::vector<ZinIrNeuronType>::vector[abi:ne180100](&qword_254526188, v152, 0x1FuLL);
    v150[7] = unk_207AA1350;
    v150[8] = xmmword_207AA1360;
    v151[0] = unk_207AA1370;
    *(_OWORD *)((char *)v151 + 12) = unk_207AA137C;
    v150[4] = xmmword_207AA1320;
    v150[5] = unk_207AA1330;
    v150[6] = xmmword_207AA1340;
    v150[0] = xmmword_207AA12E0;
    v150[1] = unk_207AA12F0;
    v150[2] = xmmword_207AA1300;
    v150[3] = unk_207AA1310;
    std::vector<ZinIrNonLinearMode>::vector[abi:ne180100](&qword_2545261A0, v150, 0x2BuLL);
    v114 = 2;
    v115 = xmmword_207A7D620;
    v116 = 0x1100000002;
    v117 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v35, &v114, 1uLL);
    v118.i32[0] = 641877825;
    v119 = 0uLL;
    v118.i64[1] = 0;
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(&v118.i64[1], v35, (uint64_t)v36, 0xCCCCCCCCCCCCCCCDLL * ((v36 - (_BYTE *)v35) >> 3));
    v110 = 2;
    v111 = xmmword_207A7D620;
    v112 = 0x1100000002;
    v113 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v33, &v110, 1uLL);
    LODWORD(v120) = 759318337;
    v121 = 0uLL;
    *((_QWORD *)&v120 + 1) = 0;
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>((_QWORD *)&v120 + 1, v33, (uint64_t)v34, 0xCCCCCCCCCCCCCCCDLL * ((v34 - (_BYTE *)v33) >> 3));
    v106 = 2;
    v107 = xmmword_207A7D620;
    v108 = 0x1100000002;
    v109 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v31, &v106, 1uLL);
    v122 = 792872769;
    memset(v123, 0, sizeof(v123));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v123, v31, (uint64_t)v32, 0xCCCCCCCCCCCCCCCDLL * ((v32 - (_BYTE *)v31) >> 3));
    v102 = 2;
    v103 = xmmword_207A7D620;
    v104 = 0x1100000002;
    v105 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v29, &v102, 1uLL);
    v124 = 2084718401;
    memset(v125, 0, sizeof(v125));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v125, v29, (uint64_t)v30, 0xCCCCCCCCCCCCCCCDLL * ((v30 - (_BYTE *)v29) >> 3));
    v98 = 10;
    v99 = vdupq_n_s64(1uLL);
    v100 = 0x800000001;
    v101 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v27, &v98, 1uLL);
    v126 = 642527542;
    memset(v127, 0, sizeof(v127));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v127, v27, (uint64_t)v28, 0xCCCCCCCCCCCCCCCDLL * ((v28 - (_BYTE *)v27) >> 3));
    v94 = 3;
    v95 = vdupq_n_s64(1uLL);
    v96 = 0x700000002;
    v97 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v25, &v94, 1uLL);
    v128 = 642527336;
    memset(v129, 0, sizeof(v129));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v129, v25, (uint64_t)v26, 0xCCCCCCCCCCCCCCCDLL * ((v26 - (_BYTE *)v25) >> 3));
    v90 = 3;
    v91 = vdupq_n_s64(1uLL);
    v92 = 0x700000002;
    v93 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v23, &v90, 1uLL);
    v130 = 759967848;
    memset(v131, 0, sizeof(v131));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v131, v23, (uint64_t)v24, 0xCCCCCCCCCCCCCCCDLL * ((v24 - (_BYTE *)v23) >> 3));
    v86 = 3;
    v87 = vdupq_n_s64(1uLL);
    v88 = 0x700000002;
    v89 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v21, &v86, 1uLL);
    v132 = 793522280;
    memset(v133, 0, sizeof(v133));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v133, v21, (uint64_t)v22, 0xCCCCCCCCCCCCCCCDLL * ((v22 - (_BYTE *)v21) >> 3));
    v82 = 3;
    v83 = vdupq_n_s64(1uLL);
    v84 = 0x700000002;
    v85 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v19, &v82, 1uLL);
    v134 = 2085367912;
    memset(v135, 0, sizeof(v135));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v135, v19, (uint64_t)v20, 0xCCCCCCCCCCCCCCCDLL * ((v20 - (_BYTE *)v19) >> 3));
    v78 = 3;
    v79 = xmmword_207A7D620;
    v80 = 0x1300000002;
    v81 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v17, &v78, 1uLL);
    v136 = 642934849;
    memset(v137, 0, sizeof(v137));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v137, v17, (uint64_t)v18, 0xCCCCCCCCCCCCCCCDLL * ((v18 - (_BYTE *)v17) >> 3));
    v74 = 3;
    v75 = xmmword_207A7D620;
    v76 = 0x1300000002;
    v77 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v15, &v74, 1uLL);
    v138 = 760375361;
    memset(v139, 0, sizeof(v139));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v139, v15, (uint64_t)v16, 0xCCCCCCCCCCCCCCCDLL * ((v16 - (_BYTE *)v15) >> 3));
    v70 = 3;
    v71 = xmmword_207A7D620;
    v72 = 0x1300000002;
    v73 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v13, &v70, 1uLL);
    v140 = 793929793;
    memset(v141, 0, sizeof(v141));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v141, v13, (uint64_t)v14, 0xCCCCCCCCCCCCCCCDLL * ((v14 - (_BYTE *)v13) >> 3));
    v66 = 3;
    v67 = xmmword_207A7D620;
    v68 = 0x1300000002;
    v69 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v11, &v66, 1uLL);
    v142 = 2085775425;
    memset(v143, 0, sizeof(v143));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v143, v11, (uint64_t)v12, 0xCCCCCCCCCCCCCCCDLL * ((v12 - (_BYTE *)v11) >> 3));
    v58 = 2;
    v59 = vdupq_n_s64(1uLL);
    v60 = 0x100000001;
    v61 = 0;
    v62 = 2;
    v63 = xmmword_207A7D4F0;
    v64 = 0x900000002;
    v65 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v9, &v58, 2uLL);
    v144 = 641230384;
    memset(v145, 0, sizeof(v145));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v145, v9, (uint64_t)v10, 0xCCCCCCCCCCCCCCCDLL * ((v10 - (_BYTE *)v9) >> 3));
    v50 = 2;
    v51 = vdupq_n_s64(1uLL);
    v52 = 0x100000001;
    v53 = 0;
    v54 = 2;
    v55 = xmmword_207A7D4F0;
    v56 = 0x900000002;
    v57 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v7, &v50, 2uLL);
    v146 = 641234480;
    memset(v147, 0, sizeof(v147));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v147, v7, (uint64_t)v8, 0xCCCCCCCCCCCCCCCDLL * ((v8 - (_BYTE *)v7) >> 3));
    v46 = 3;
    v47 = vdupq_n_s64(1uLL);
    v48 = 0x700000002;
    v49 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&__p, &v46, 1uLL);
    v148 = 707153000;
    memset(v149, 0, sizeof(v149));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v149, __p, (uint64_t)v6, 0xCCCCCCCCCCCCCCCDLL * ((v6 - (_BYTE *)__p) >> 3));
    std::map<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>::map[abi:ne180100]((uint64_t)&unk_2545261B8, (unsigned int *)&v118, 16);
    word_2545261D0 = 0;
    byte_2545261D2 = 1;
    *(_DWORD *)algn_2545261D3 = 0;
    qword_2545261D8 = 0;
    dword_2545261E0 = 0;
    unk_2545261E8 = 0u;
    word_254526208 = 257;
    qword_254526230 = 8;
    unk_2545261F8 = 0u;
    xmmword_254526210 = xmmword_207AA1390;
    unk_254526220 = unk_207AA13A0;
    unk_254526238 = xmmword_207AA11E0;
    v44[0] = xmmword_207AA13B8;
    v44[1] = unk_207AA13C8;
    v44[2] = xmmword_207AA13D8;
    v45 = 0x41E19CF8E0000000;
    std::vector<double>::vector[abi:ne180100](&qword_254526248, v44, 7uLL);
    v42 = xmmword_207AA13F0;
    v43 = 0x41CDEBE980000000;
    std::vector<double>::vector[abi:ne180100](&qword_254526260, &v42, 3uLL);
    v40[0] = xmmword_207AA1408;
    v40[1] = unk_207AA1418;
    v41 = 0x41E7D78400000000;
    std::vector<double>::vector[abi:ne180100](&qword_254526278, v40, 5uLL);
    v39[4] = xmmword_207AA1470;
    v39[5] = unk_207AA1480;
    v39[6] = xmmword_207AA1490;
    v39[0] = xmmword_207AA1430;
    v39[1] = unk_207AA1440;
    v39[2] = xmmword_207AA1450;
    v39[3] = unk_207AA1460;
    std::map<double,double>::map[abi:ne180100]((uint64_t)&unk_254526290, (double *)v39, 7);
    xmmword_2545262A8 = xmmword_207A7D640;
    v37[0] = xmmword_207AA14A0;
    v37[1] = unk_207AA14B0;
    v37[2] = xmmword_207AA14C0;
    v38 = 27;
    std::vector<ZinKernelFormat>::vector[abi:ne180100](qword_2545262B8, v37, 0xDuLL);
    xmmword_2545262D0 = xmmword_207A7E1A0;
    unk_2545262E0 = xmmword_207A7D650;
    qword_2545262F0 = 64;
    unk_2545262F8 = 0x101010101010101;
    unk_2545262FE = 0x101010101010101;
    unk_254526388 = 0u;
    *(_OWORD *)&algn_254526393[5] = 0u;
    unk_254526308 = 0u;
    unk_254526318 = 0u;
    unk_254526328 = 0u;
    unk_254526338 = 0u;
    unk_254526348 = 0u;
    unk_254526358 = 0u;
    unk_254526368 = 0u;
    unk_254526378 = 0u;
    word_254526390 = 257;
    byte_254526392 = 1;
    byte_2545263A0 = 0;
    dword_2545263A8 = 256;
    dword_2545263B0 = 0;
    word_2545263B4 = 256;
    unk_2545263B8 = xmmword_207A7F3E0;
    byte_2545263C8 = 1;
    qword_2545263D0 = 0xFFFFLL;
    byte_2545263D8 = 0;
    qword_2545263E0 = 0;
    word_2545263E8 = 257;
    v3 = 512;
    byte_2545263EA = 1;
    do
    {
      v4 = *(void **)((char *)&v115 + v3 + 8);
      if (v4)
      {
        *(uint64_t *)((char *)&v116 + v3) = (uint64_t)v4;
        operator delete(v4);
      }
      v3 -= 32;
    }
    while (v3);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
    if (v7)
    {
      v8 = v7;
      operator delete(v7);
    }
    if (v9)
    {
      v10 = v9;
      operator delete(v9);
    }
    if (v11)
    {
      v12 = v11;
      operator delete(v11);
    }
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
    if (v15)
    {
      v16 = v15;
      operator delete(v15);
    }
    if (v17)
    {
      v18 = v17;
      operator delete(v17);
    }
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
    if (v21)
    {
      v22 = v21;
      operator delete(v21);
    }
    if (v23)
    {
      v24 = v23;
      operator delete(v23);
    }
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
    if (v29)
    {
      v30 = v29;
      operator delete(v29);
    }
    if (v31)
    {
      v32 = v31;
      operator delete(v31);
    }
    if (v33)
    {
      v34 = v33;
      operator delete(v33);
    }
    if (v35)
    {
      v36 = v35;
      operator delete(v35);
    }
    __cxa_atexit((void (*)(void *))ZinIrHalParameters::~ZinIrHalParameters, &ZinIrHalH15c::GetParams(void)const::ZinIrHalH15cParameters, &dword_2069AB000);
  }
  return &ZinIrHalH15c::GetParams(void)const::ZinIrHalH15cParameters;
}

void sub_206E53F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32)
{
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v33, *(_QWORD **)(v33 + 8));
  if (qword_254526278)
  {
    qword_254526280 = qword_254526278;
    operator delete((void *)qword_254526278);
  }
  if (qword_254526260)
  {
    qword_254526268 = qword_254526260;
    operator delete((void *)qword_254526260);
  }
  if (qword_254526248)
  {
    qword_254526250 = qword_254526248;
    operator delete((void *)qword_254526248);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(v32, *(_QWORD **)(v32 + 8));
  v36 = 512;
  while (1)
  {
    v37 = *(void **)((char *)&STACK[0x5D0] + v36 - 24);
    if (v37)
    {
      *(unint64_t *)((char *)&STACK[0x5D0] + v36 - 16) = (unint64_t)v37;
      operator delete(v37);
    }
    v36 -= 32;
    if (!v36)
    {
      if (__p)
        operator delete(__p);
      if (a20)
        operator delete(a20);
      if (a23)
        operator delete(a23);
      if (a26)
        operator delete(a26);
      if (a29)
        operator delete(a29);
      if (a32)
      {
        v34[1] = a32;
        operator delete(a32);
      }
      v38 = (void *)v34[3];
      if (v38)
      {
        v34[4] = v38;
        operator delete(v38);
      }
      v39 = (void *)v34[6];
      if (v39)
      {
        v34[7] = v39;
        operator delete(v39);
      }
      v40 = (void *)v34[9];
      if (v40)
      {
        v34[10] = v40;
        operator delete(v40);
      }
      v41 = (void *)v34[12];
      if (v41)
      {
        v34[13] = v41;
        operator delete(v41);
      }
      v42 = (void *)v34[15];
      if (v42)
      {
        v34[16] = v42;
        operator delete(v42);
      }
      v43 = (void *)v34[18];
      if (v43)
      {
        v34[19] = v43;
        operator delete(v43);
      }
      v44 = (void *)v34[21];
      if (v44)
      {
        v34[22] = v44;
        operator delete(v44);
      }
      v45 = (void *)v34[24];
      if (v45)
      {
        v34[25] = v45;
        operator delete(v45);
      }
      v46 = (void *)v34[27];
      if (v46)
      {
        v34[28] = v46;
        operator delete(v46);
      }
      v47 = (void *)v34[30];
      if (v47)
      {
        v34[31] = v47;
        operator delete(v47);
      }
      if (qword_2545261A0)
      {
        qword_2545261A8 = qword_2545261A0;
        operator delete((void *)qword_2545261A0);
      }
      if (qword_254526188)
      {
        qword_254526190 = qword_254526188;
        operator delete((void *)qword_254526188);
      }
      if (qword_254526170)
      {
        qword_254526178 = qword_254526170;
        operator delete((void *)qword_254526170);
      }
      if (qword_254526158)
      {
        qword_254526160 = qword_254526158;
        operator delete((void *)qword_254526158);
      }
      if (byte_2545260F7 < 0)
        operator delete((void *)qword_2545260E0);
      if (qword_254525EB8)
      {
        qword_254525EC0 = qword_254525EB8;
        operator delete((void *)qword_254525EB8);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_206E54288()
{
  JUMPOUT(0x206E54114);
}

void sub_206E54298()
{
  JUMPOUT(0x206E54124);
}

void sub_206E542A8()
{
  JUMPOUT(0x206E54134);
}

void sub_206E542B8()
{
  JUMPOUT(0x206E54144);
}

void sub_206E542C8()
{
  JUMPOUT(0x206E54154);
}

void sub_206E542D8()
{
  JUMPOUT(0x206E54164);
}

void sub_206E542E8()
{
  JUMPOUT(0x206E54174);
}

void sub_206E542F8()
{
  JUMPOUT(0x206E54184);
}

void sub_206E54308()
{
  JUMPOUT(0x206E54194);
}

void sub_206E54318()
{
  JUMPOUT(0x206E541A4);
}

void sub_206E54330()
{
  JUMPOUT(0x206E541E4);
}

void sub_206E54338()
{
  JUMPOUT(0x206E541FCLL);
}

void sub_206E54340()
{
  JUMPOUT(0x206E54214);
}

void sub_206E54348()
{
  JUMPOUT(0x206E5422CLL);
}

void sub_206E54350()
{
  JUMPOUT(0x206E54244);
}

void sub_206E54358()
{
  JUMPOUT(0x206E5425CLL);
}

void sub_206E54360()
{
  JUMPOUT(0x206E54274);
}

uint64_t ZinParseCostVolumeUnit(const __CFDictionary *a1, float *a2, CFArrayRef *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  float v8;
  uint64_t result;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Params"));
  if (Value && (v6 = Value, v7 = CFGetTypeID(Value), v7 == CFDictionaryGetTypeID()))
  {
    if (!ZinParseCFNumberToken<(CFNumberType)3,int>(v6, CFSTR("DisparityDirection"), CFSTR("InvalidCostVolumeDisparityDirection"), a2 + 20, a3, 0)&& !ZinParseCFNumberToken<(CFNumberType)3,int>(v6, CFSTR("DisparityRange"), CFSTR("InvalidCostVolumeDisparityRange"), a2 + 21, a3, 0))
    {
      a2[22] = ParseScaleFactor(v6, CFSTR("Scale0"));
      v8 = ParseScaleFactor(v6, CFSTR("Scale1"));
      result = 0;
      a2[23] = v8;
      return result;
    }
  }
  else
  {
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidParamSyntax"));
  }
  return 3;
}

float ParseScaleFactor(const __CFDictionary *a1, const __CFString *a2)
{
  const __CFNumber *Value;
  const __CFNumber *v4;
  CFTypeID v5;
  __int16 valuePtr;

  Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  _S8 = 1.0;
  if (Value)
  {
    v4 = Value;
    v5 = CFGetTypeID(Value);
    if (v5 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      CFNumberGetValue(v4, kCFNumberSInt16Type, &valuePtr);
      _H0 = valuePtr;
      __asm { FCVT            S8, H0 }
    }
  }
  return _S8;
}

BOOL ZinOpLayerUtils::IsPEPool(ZinOpLayerUtils *this, const ZinIrOpLayer *a2)
{
  return *(_DWORD *)(*((_QWORD *)this + 8) + 8) == 83;
}

BOOL ZinOpLayerUtils::HasReductionLayer(ZinOpLayerUtils *this, const ZinIrOpLayer *a2)
{
  return *(_DWORD *)(*((_QWORD *)this + 8) + 8) == 81 && *((_QWORD *)this + 63) != 0;
}

BOOL ZinOpLayerUtils::IsPEDynamicGOC(ZinOpLayerUtils *this, const ZinIrOpLayer *a2)
{
  return *(_DWORD *)(*((_QWORD *)this + 8) + 8) == 84;
}

BOOL ZinOpLayerUtils::IsReLU(ZinOpLayerUtils *this, const ZinIrOpLayer *a2)
{
  return *(_DWORD *)(*((_QWORD *)this + 8) + 8) == 4 && *((_DWORD *)this + 48) == 1;
}

uint64_t ZinOpLayerUtils::IsCopy(ZinOpLayerUtils *this, const ZinIrOpLayer *a2)
{
  uint64_t result;

  if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) == 9)
    return 1;
  result = ZinIrOpLayer::IsANELayer(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(ZinOpLayerUtils *))(*(_QWORD *)this + 536))(this);
  return result;
}

BOOL ZinOpLayerUtils::HasSingleFanInSingleFanout(ZinOpLayerUtils *this, const ZinIrOpLayer *a2)
{
  return *((_QWORD *)this + 12) - *((_QWORD *)this + 11) == 8
      && *((_QWORD *)this + 15) - *((_QWORD *)this + 14) == 8;
}

BOOL ZinOpLayerUtils::IsConnectedToLiveOut(ZinOpLayerUtils *this, const ZinIrOpLayer *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 14);
  v3 = *((_QWORD *)this + 15);
  if (v2 != v3)
  {
    while (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 64) + 8) != 31)
    {
      v2 += 8;
      if (v2 == v3)
        return 0;
    }
  }
  return v2 != v3;
}

uint64_t ZinOpLayerUtils::GetConnectedLiveOut(ZinOpLayerUtils *this, const ZinIrOpLayer *a2, ZinIrOpLayer **a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 14);
  v4 = *((_QWORD *)this + 15);
  if (v3 != v4)
  {
    while (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 64) + 8) != 31)
    {
      v3 += 8;
      if (v3 == v4)
        return 0;
    }
  }
  if (v3 == v4)
    return 0;
  *(_QWORD *)a2 = *(_QWORD *)v3;
  return 1;
}

void ZinOpLayerUtils::GetTensorInfoFromLayers(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  _OWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::vector<ZinIrTensorInfo>::reserve((void **)a2, (uint64_t)(a1[1] - *a1) >> 3);
  v4 = (_QWORD *)*a1;
  v5 = (_QWORD *)a1[1];
  if ((_QWORD *)*a1 != v5)
  {
    do
    {
      if (!*v4)
        ZinAssertImpl("Failed to get tensor info from layers. Layer was null.");
      (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v4 + 80))(&v36, *v4, 0, 0);
      v7 = *(_OWORD **)(a2 + 8);
      v6 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v7 >= v6)
      {
        v15 = *(_OWORD **)a2;
        v16 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v7 - *(_QWORD *)a2) >> 3);
        v17 = v16 + 1;
        if (v16 + 1 > 0x222222222222222)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v18 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v6 - (_QWORD)v15) >> 3);
        if (2 * v18 > v17)
          v17 = 2 * v18;
        if (v18 >= 0x111111111111111)
          v19 = 0x222222222222222;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrTensorInfo>>(a2 + 16, v19);
          v15 = *(_OWORD **)a2;
          v7 = *(_OWORD **)(a2 + 8);
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[120 * v16];
        v22 = v36;
        v23 = v37;
        v24 = v39;
        *((_OWORD *)v21 + 2) = v38;
        *((_OWORD *)v21 + 3) = v24;
        *(_OWORD *)v21 = v22;
        *((_OWORD *)v21 + 1) = v23;
        v25 = v40;
        v26 = v41;
        v27 = v42;
        *((_QWORD *)v21 + 14) = v43;
        *((_OWORD *)v21 + 5) = v26;
        *((_OWORD *)v21 + 6) = v27;
        *((_OWORD *)v21 + 4) = v25;
        if (v7 == v15)
        {
          v35 = &v20[120 * v16];
        }
        else
        {
          v28 = &v20[120 * v16];
          do
          {
            v29 = *(_OWORD *)((char *)v7 - 120);
            v30 = *(_OWORD *)((char *)v7 - 104);
            v31 = *(_OWORD *)((char *)v7 - 88);
            *(_OWORD *)(v28 - 72) = *(_OWORD *)((char *)v7 - 72);
            *(_OWORD *)(v28 - 88) = v31;
            *(_OWORD *)(v28 - 104) = v30;
            *(_OWORD *)(v28 - 120) = v29;
            v32 = *(_OWORD *)((char *)v7 - 56);
            v33 = *(_OWORD *)((char *)v7 - 40);
            v34 = *(_OWORD *)((char *)v7 - 24);
            v35 = v28 - 120;
            *((_DWORD *)v28 - 2) = *((_DWORD *)v7 - 2);
            *(_OWORD *)(v28 - 24) = v34;
            *(_OWORD *)(v28 - 40) = v33;
            *(_OWORD *)(v28 - 56) = v32;
            v7 = (_OWORD *)((char *)v7 - 120);
            v28 -= 120;
          }
          while (v7 != v15);
        }
        v14 = v21 + 120;
        *(_QWORD *)a2 = v35;
        *(_QWORD *)(a2 + 8) = v21 + 120;
        *(_QWORD *)(a2 + 16) = &v20[120 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        v8 = v36;
        v9 = v37;
        v10 = v39;
        v7[2] = v38;
        v7[3] = v10;
        *v7 = v8;
        v7[1] = v9;
        v11 = v40;
        v12 = v41;
        v13 = v42;
        *((_QWORD *)v7 + 14) = v43;
        v7[5] = v12;
        v7[6] = v13;
        v7[4] = v11;
        v14 = (char *)v7 + 120;
      }
      *(_QWORD *)(a2 + 8) = v14;
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_206E5487C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<ZinIrTensorInfo>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xEEEEEEEEEEEEEEEFLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x222222222222223)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrTensorInfo>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[120 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 120);
        v14 = *(_OWORD *)(v10 - 104);
        v15 = *(_OWORD *)(v10 - 88);
        *(_OWORD *)(v12 - 72) = *(_OWORD *)(v10 - 72);
        *(_OWORD *)(v12 - 88) = v15;
        *(_OWORD *)(v12 - 104) = v14;
        *(_OWORD *)(v12 - 120) = v13;
        v16 = *(_OWORD *)(v10 - 56);
        v17 = *(_OWORD *)(v10 - 40);
        v18 = *(_OWORD *)(v10 - 24);
        *((_DWORD *)v12 - 2) = *((_DWORD *)v10 - 2);
        *(_OWORD *)(v12 - 24) = v18;
        *(_OWORD *)(v12 - 40) = v17;
        *(_OWORD *)(v12 - 56) = v16;
        v12 -= 120;
        v10 -= 120;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t CpGraph::CpGraph(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  std::string *v5;
  __int128 v6;

  v4 = ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::ZinIrNgraph(a1);
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_DWORD *)(v4 + 184) = 1065353216;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_DWORD *)(v4 + 224) = 1065353216;
  v5 = (std::string *)(v4 + 232);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_206E54A18(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table(v2);
  ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::~ZinIrNgraph(v1);
  _Unwind_Resume(a1);
}

void CpGraph::~CpGraph(void **this)
{
  void *v2;

  if (*((char *)this + 255) < 0)
    operator delete(this[29]);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)(this + 24));
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)(this + 19));
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  v2 = this[13];
  if (v2)
  {
    this[14] = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)(this + 8));
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)(this + 3));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this, this[1]);
}

uint64_t CpGraph::AddLayer(uint64_t result, unint64_t a2, const std::string *a3, uint64_t *a4, _QWORD *a5, unint64_t a6, const std::string *a7)
{
  std::string *v12;
  _QWORD *i;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v12 = (std::string *)result;
  v19 = a6;
  v20 = a2;
  for (i = *(_QWORD **)(result + 8); i; i = (_QWORD *)*i)
  {
    v14 = i[4];
    if (v14 <= a2)
    {
      if (v14 >= a2)
        return result;
      ++i;
    }
  }
  ZinIrNgraph<unsigned long long,std::less<unsigned long long>>::AddNode(result, &v20);
  CpGraph::SetLayerName((uint64_t)v12, v20, a3);
  v15 = *a4;
  if (a4[1] != *a4)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    do
    {
      CpGraph::AddTensor(v12, *(_QWORD *)(v15 + 8 * v18), (const std::string *)(*a5 + v17));
      ZinIrNgraph<unsigned long long,std::less<unsigned long long>>::AddEdge(v12, (unint64_t *)(*a4 + v16), &v20, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL);
      ++v18;
      v15 = *a4;
      v17 += 24;
      v16 += 8;
    }
    while (v18 < (a4[1] - *a4) >> 3);
  }
  CpGraph::AddTensor(v12, a6, a7);
  return ZinIrNgraph<unsigned long long,std::less<unsigned long long>>::AddEdge(v12, &v20, &v19, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL);
}

uint64_t ZinIrNgraph<unsigned long long,std::less<unsigned long long>>::AddNode(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
  {
LABEL_7:
    std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)a1, a2, (uint64_t *)a2);
    return 1;
  }
  v3 = *a2;
  while (1)
  {
    v4 = v2[4];
    if (v3 >= v4)
      break;
LABEL_6:
    v2 = (_QWORD *)*v2;
    if (!v2)
      goto LABEL_7;
  }
  if (v4 < v3)
  {
    ++v2;
    goto LABEL_6;
  }
  return 0;
}

std::string *CpGraph::SetLayerName(uint64_t a1, unint64_t a2, const std::string *a3)
{
  std::string *v4;
  unint64_t v6;
  unint64_t *v7;

  v6 = a2;
  v7 = &v6;
  v4 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1 + 152, &v6, (uint64_t)&std::piecewise_construct, (uint64_t **)&v7);
  return std::string::operator=(v4 + 1, a3);
}

std::string *CpGraph::AddTensor(std::string *result, unint64_t a2, const std::string *a3)
{
  uint64_t v4;
  _QWORD *i;
  unint64_t v6;
  unint64_t v7;

  v4 = (uint64_t)result;
  v7 = a2;
  for (i = (_QWORD *)result->__r_.__value_.__l.__size_; i; i = (_QWORD *)*i)
  {
    v6 = i[4];
    if (v6 <= a2)
    {
      if (v6 >= a2)
        return result;
      ++i;
    }
  }
  ZinIrNgraph<unsigned long long,std::less<unsigned long long>>::AddNode((uint64_t)result, &v7);
  return CpGraph::SetTensorName(v4, v7, a3);
}

uint64_t ZinIrNgraph<unsigned long long,std::less<unsigned long long>>::AddEdge(_QWORD *a1, unint64_t *a2, unint64_t *a3, unint64_t a4, unint64_t a5)
{
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t *v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t **v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t **v46;
  uint64_t **v47;
  uint64_t **v48;
  unint64_t **v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  unint64_t **v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  unint64_t *v65;
  unint64_t *v66;
  unint64_t **v67;

  v8 = a1 + 1;
  v9 = (_QWORD *)a1[1];
  if (!v9)
    goto LABEL_12;
  v10 = *a2;
  v11 = a1 + 1;
  v12 = (_QWORD *)a1[1];
  do
  {
    v13 = v12[4];
    v14 = v13 >= v10;
    if (v13 >= v10)
      v15 = v12;
    else
      v15 = v12 + 1;
    if (v14)
      v11 = v12;
    v12 = (_QWORD *)*v15;
  }
  while (*v15);
  if (v11 == v8 || v10 < v11[4])
LABEL_12:
    v11 = a1 + 1;
  if (!v9)
    return 0;
  v16 = *a3;
  v17 = a1 + 1;
  do
  {
    v18 = v9[4];
    v19 = v18 >= v16;
    if (v18 >= v16)
      v20 = v9;
    else
      v20 = v9 + 1;
    if (v19)
      v17 = v9;
    v9 = (_QWORD *)*v20;
  }
  while (*v20);
  if (v17 == v8)
    return 0;
  v22 = v17[4];
  v21 = v17 + 4;
  if (v16 < v22 || v11 == v8)
    return 0;
  v25 = v11 + 4;
  v67 = (unint64_t **)(v11 + 4);
  v26 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(a1 + 3, (unint64_t **)&v67);
  if (v26)
  {
    v27 = v26;
    v28 = v26 + 3;
    v29 = (uint64_t **)v26[4];
    if ((a4 & 0x8000000000000000) != 0)
    {
      v33 = (uint64_t)(v26 + 5);
      v34 = (unint64_t)v27[5];
      if ((unint64_t)v29 >= v34)
      {
        v36 = ((char *)v29 - (char *)*v28) >> 3;
        if ((unint64_t)(v36 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v37 = v34 - (_QWORD)*v28;
        v38 = v37 >> 2;
        if (v37 >> 2 <= (unint64_t)(v36 + 1))
          v38 = v36 + 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v33, v39);
        else
          v40 = 0;
        v41 = (uint64_t **)&v40[8 * v36];
        v42 = (uint64_t *)&v40[8 * v39];
        *v41 = v21;
        v35 = (uint64_t *)(v41 + 1);
        v44 = v27[3];
        v43 = v27[4];
        if (v43 != v44)
        {
          do
          {
            v45 = (uint64_t *)*--v43;
            *--v41 = v45;
          }
          while (v43 != v44);
          v43 = *v28;
        }
        v27[3] = (uint64_t *)v41;
        v27[4] = v35;
        v27[5] = v42;
        if (v43)
          operator delete(v43);
      }
      else
      {
        *v29 = v21;
        v35 = (uint64_t *)(v29 + 1);
      }
      v27[4] = v35;
    }
    else
    {
      v30 = (char *)*v28;
      if (a4 > ((char *)v29 - (char *)*v28) >> 3)
        return 0;
      v67 = (unint64_t **)v21;
      std::vector<std::reference_wrapper<unsigned long long const>>::insert((uint64_t)(v26 + 3), &v30[8 * a4], &v67);
    }
  }
  else
  {
    v31 = (char *)operator new(8uLL);
    *(_QWORD *)v31 = v21;
    v66 = v25;
    v67 = &v66;
    v32 = (char *)std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::__emplace_unique_key_args<std::reference_wrapper<unsigned long long const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<unsigned long long const>&&>,std::tuple<>>((uint64_t)(a1 + 3), &v66, (uint64_t)&std::piecewise_construct, (uint64_t **)&v67);
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>(v32 + 24, v31, (uint64_t)(v31 + 8), 1uLL);
    operator delete(v31);
  }
  v67 = (unint64_t **)v21;
  v46 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(a1 + 8, (unint64_t **)&v67);
  if (!v46)
  {
    v51 = (char *)operator new(8uLL);
    *(_QWORD *)v51 = v25;
    v66 = (unint64_t *)v21;
    v67 = &v66;
    v52 = (char *)std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::__emplace_unique_key_args<std::reference_wrapper<unsigned long long const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<unsigned long long const>&&>,std::tuple<>>((uint64_t)(a1 + 8), &v66, (uint64_t)&std::piecewise_construct, (uint64_t **)&v67);
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>(v52 + 24, v51, (uint64_t)(v51 + 8), 1uLL);
    operator delete(v51);
    return 1;
  }
  v47 = v46;
  v48 = v46 + 3;
  v49 = (unint64_t **)v46[4];
  if ((a5 & 0x8000000000000000) != 0)
  {
    v53 = (uint64_t)(v46 + 5);
    v54 = (unint64_t)v47[5];
    if ((unint64_t)v49 >= v54)
    {
      v56 = ((char *)v49 - (char *)*v48) >> 3;
      if ((unint64_t)(v56 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v57 = v54 - (_QWORD)*v48;
      v58 = v57 >> 2;
      if (v57 >> 2 <= (unint64_t)(v56 + 1))
        v58 = v56 + 1;
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
        v59 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v59 = v58;
      if (v59)
        v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v53, v59);
      else
        v60 = 0;
      v61 = (unint64_t **)&v60[8 * v56];
      v62 = (uint64_t *)&v60[8 * v59];
      *v61 = v25;
      v55 = (uint64_t *)(v61 + 1);
      v64 = v47[3];
      v63 = v47[4];
      if (v63 != v64)
      {
        do
        {
          v65 = (unint64_t *)*--v63;
          *--v61 = v65;
        }
        while (v63 != v64);
        v63 = *v48;
      }
      v47[3] = (uint64_t *)v61;
      v47[4] = v55;
      v47[5] = v62;
      if (v63)
        operator delete(v63);
    }
    else
    {
      *v49 = v25;
      v55 = (uint64_t *)(v49 + 1);
    }
    v47[4] = v55;
    return 1;
  }
  v50 = (char *)*v48;
  if (a5 <= ((char *)v49 - (char *)*v48) >> 3)
  {
    v67 = (unint64_t **)v25;
    std::vector<std::reference_wrapper<unsigned long long const>>::insert((uint64_t)(v46 + 3), &v50[8 * a5], &v67);
    return 1;
  }
  return 0;
}

void sub_206E55074(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *CpGraph::SetTensorName(uint64_t a1, unint64_t a2, const std::string *a3)
{
  std::string *v4;
  unint64_t v6;
  unint64_t *v7;

  v6 = a2;
  v7 = &v6;
  v4 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1 + 192, &v6, (uint64_t)&std::piecewise_construct, (uint64_t **)&v7);
  return std::string::operator=(v4 + 1, a3);
}

BOOL CpGraph::GetTensorName(uint64_t a1, unint64_t a2, std::string *a3)
{
  const std::string *v4;
  const std::string *v5;
  unint64_t v7;

  v7 = a2;
  v4 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((_QWORD *)(a1 + 192), &v7);
  v5 = v4;
  if (v4)
    std::string::operator=(a3, v4 + 1);
  return v5 != 0;
}

BOOL CpGraph::GetLayerName(uint64_t a1, unint64_t a2, std::string *a3)
{
  const std::string *v4;
  const std::string *v5;
  unint64_t v7;

  v7 = a2;
  v4 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((_QWORD *)(a1 + 152), &v7);
  v5 = v4;
  if (v4)
    std::string::operator=(a3, v4 + 1);
  return v5 != 0;
}

void CpGraph::GetLayers(CpGraph **this@<X0>, unint64_t **a2@<X8>)
{
  CpGraph **v2;
  CpGraph *v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  CpGraph *v19;
  CpGraph **v20;
  BOOL v21;
  unint64_t v22;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = this + 1;
  v3 = *this;
  if (*this != (CpGraph *)(this + 1))
  {
    v5 = this + 19;
    v6 = (uint64_t)(a2 + 2);
    do
    {
      v7 = *((_QWORD *)v3 + 4);
      v22 = v7;
      if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v5, &v22))
      {
        v9 = a2[1];
        v8 = (unint64_t)a2[2];
        if ((unint64_t)v9 >= v8)
        {
          v11 = *a2;
          v12 = v9 - *a2;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v14 = v8 - (_QWORD)v11;
          if (v14 >> 2 > v13)
            v13 = v14 >> 2;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v15);
            v11 = *a2;
            v9 = a2[1];
          }
          else
          {
            v16 = 0;
          }
          v17 = (unint64_t *)&v16[8 * v12];
          *v17 = v7;
          v10 = v17 + 1;
          while (v9 != v11)
          {
            v18 = *--v9;
            *--v17 = v18;
          }
          *a2 = v17;
          a2[1] = v10;
          a2[2] = (unint64_t *)&v16[8 * v15];
          if (v11)
            operator delete(v11);
        }
        else
        {
          *v9 = v7;
          v10 = v9 + 1;
        }
        a2[1] = v10;
      }
      v19 = (CpGraph *)*((_QWORD *)v3 + 1);
      if (v19)
      {
        do
        {
          v20 = (CpGraph **)v19;
          v19 = *(CpGraph **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (CpGraph **)*((_QWORD *)v3 + 2);
          v21 = *v20 == v3;
          v3 = (CpGraph *)v20;
        }
        while (!v21);
      }
      v3 = (CpGraph *)v20;
    }
    while (v20 != v2);
  }
}

void sub_206E552E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CpGraph::GetTensors(CpGraph **this@<X0>, unint64_t **a2@<X8>)
{
  CpGraph **v2;
  CpGraph *v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  CpGraph *v19;
  CpGraph **v20;
  BOOL v21;
  unint64_t v22;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = this + 1;
  v3 = *this;
  if (*this != (CpGraph *)(this + 1))
  {
    v5 = this + 24;
    v6 = (uint64_t)(a2 + 2);
    do
    {
      v7 = *((_QWORD *)v3 + 4);
      v22 = v7;
      if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v5, &v22))
      {
        v9 = a2[1];
        v8 = (unint64_t)a2[2];
        if ((unint64_t)v9 >= v8)
        {
          v11 = *a2;
          v12 = v9 - *a2;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v14 = v8 - (_QWORD)v11;
          if (v14 >> 2 > v13)
            v13 = v14 >> 2;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v15);
            v11 = *a2;
            v9 = a2[1];
          }
          else
          {
            v16 = 0;
          }
          v17 = (unint64_t *)&v16[8 * v12];
          *v17 = v7;
          v10 = v17 + 1;
          while (v9 != v11)
          {
            v18 = *--v9;
            *--v17 = v18;
          }
          *a2 = v17;
          a2[1] = v10;
          a2[2] = (unint64_t *)&v16[8 * v15];
          if (v11)
            operator delete(v11);
        }
        else
        {
          *v9 = v7;
          v10 = v9 + 1;
        }
        a2[1] = v10;
      }
      v19 = (CpGraph *)*((_QWORD *)v3 + 1);
      if (v19)
      {
        do
        {
          v20 = (CpGraph **)v19;
          v19 = *(CpGraph **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (CpGraph **)*((_QWORD *)v3 + 2);
          v21 = *v20 == v3;
          v3 = (CpGraph *)v20;
        }
        while (!v21);
      }
      v3 = (CpGraph *)v20;
    }
    while (v20 != v2);
  }
}

void sub_206E5546C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *CpGraph::GetOutputTensor(CpGraph *this, unint64_t *a2)
{
  _QWORD *result;
  uint64_t **v4;
  char *v5;
  unint64_t *v6;
  unint64_t *v7;

  v6 = a2;
  v7 = a2;
  result = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((_QWORD *)this + 19, (unint64_t *)&v7);
  if (result)
  {
    v7 = (unint64_t *)&v6;
    v4 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((_QWORD *)this + 3, &v7);
    v5 = (char *)this + 104;
    if (v4)
      v5 = (char *)(v4 + 3);
    return ***(_QWORD ****)v5;
  }
  return result;
}

char *CpGraph::GetInputTensors@<X0>(CpGraph *this@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char *result;
  uint64_t **v6;
  char *v7;
  _QWORD **v8;
  _QWORD **v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;

  v11 = a2;
  v12 = a2;
  result = (char *)std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((_QWORD *)this + 19, (unint64_t *)&v12);
  if (result)
  {
    v12 = (unint64_t *)&v11;
    v6 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((_QWORD *)this + 8, &v12);
    v7 = (char *)this + 104;
    if (v6)
      v7 = (char *)(v6 + 3);
    v8 = *(_QWORD ***)v7;
    v9 = (_QWORD **)*((_QWORD *)v7 + 1);
    v10 = ((uint64_t)v9 - *(_QWORD *)v7) >> 3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::reference_wrapper<unsigned long long const> const*>,std::__wrap_iter<std::reference_wrapper<unsigned long long const> const*>>((char *)a3, v8, v9, v10);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t CpGraph::CreateDotString@<X0>(CpGraph **this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  const std::locale::facet *v4;
  CpGraph *v5;
  unint64_t v6;
  char *p_p;
  char *v8;
  _BYTE *v9;
  _QWORD *v10;
  std::string *v11;
  std::string::size_type size;
  _QWORD *v13;
  _QWORD *v14;
  std::string *v15;
  std::string::size_type v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  std::string *v23;
  std::string::size_type v24;
  _QWORD *v25;
  CpGraph *v26;
  CpGraph *v27;
  BOOL v28;
  CpGraph *i;
  char *v30;
  char *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  std::string v37;
  uint64_t v38;
  std::string v39;
  std::string v40;
  void *__p;
  uint64_t v42;
  char v43;
  _QWORD v44[2];
  uint64_t v45;
  _QWORD v46[10];
  char v47;
  uint64_t v48;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v44);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"digraph D {", 11);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
  v4 = std::locale::use_facet((const std::locale *)&v37, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale((std::locale *)&v37);
  std::ostream::put();
  std::ostream::flush();
  v5 = *this;
  if (*this != (CpGraph *)(this + 1))
  {
    do
    {
      v6 = *((_QWORD *)v5 + 4);
      std::string::basic_string[abi:ne180100]<0>(&v37, &byte_207AF6795);
      std::string::basic_string[abi:ne180100]<0>(&__p, &byte_207AF6795);
      v40.__r_.__value_.__r.__words[0] = v6;
      if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(this + 19, (unint64_t *)&v40))
      {
        CpGraph::GetLayerName((uint64_t)this, v6, &v37);
        if (v43 < 0)
        {
          v42 = 5;
          p_p = (char *)__p;
        }
        else
        {
          v43 = 5;
          p_p = (char *)&__p;
        }
        p_p[4] = 114;
        *(_DWORD *)p_p = 1702453612;
        v9 = p_p + 5;
      }
      else
      {
        CpGraph::GetTensorName((uint64_t)this, v6, &v37);
        if (v43 < 0)
        {
          v42 = 6;
          v8 = (char *)__p;
        }
        else
        {
          v43 = 6;
          v8 = (char *)&__p;
        }
        *((_WORD *)v8 + 2) = 29295;
        *(_DWORD *)v8 = 1936614772;
        v9 = v8 + 6;
      }
      *v9 = 0;
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\t", 1);
      std::to_string(&v40, v6);
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v40;
      else
        v11 = (std::string *)v40.__r_.__value_.__r.__words[0];
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      else
        size = v40.__r_.__value_.__l.__size_;
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, size);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" [label=\"", 9);
      std::to_string(&v39, v6);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v39;
      else
        v15 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v16 = v39.__r_.__value_.__l.__size_;
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":", 1);
      if (v43 >= 0)
        v19 = &__p;
      else
        v19 = __p;
      if (v43 >= 0)
        v20 = v43;
      else
        v20 = v42;
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &v37;
      else
        v23 = (std::string *)v37.__r_.__value_.__r.__words[0];
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      else
        v24 = v37.__r_.__value_.__l.__size_;
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\"];\n", 4);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      if (v43 < 0)
        operator delete(__p);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      v26 = (CpGraph *)*((_QWORD *)v5 + 1);
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = *(CpGraph **)v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (CpGraph *)*((_QWORD *)v5 + 2);
          v28 = *(_QWORD *)v27 == (_QWORD)v5;
          v5 = v27;
        }
        while (!v28);
      }
      v5 = v27;
    }
    while (v27 != (CpGraph *)(this + 1));
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\n", 1);
  for (i = this[5]; i; i = *(CpGraph **)i)
  {
    v37.__r_.__value_.__r.__words[0] = *((_QWORD *)i + 2);
    v38 = 0;
    *(_OWORD *)&v37.__r_.__value_.__r.__words[1] = 0uLL;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v37.__r_.__value_.__l.__size_, *((const void **)i + 3), *((_QWORD *)i + 4), (uint64_t)(*((_QWORD *)i + 4) - *((_QWORD *)i + 3)) >> 3);
    v31 = (char *)v37.__r_.__value_.__r.__words[2];
    v30 = (char *)v37.__r_.__value_.__l.__size_;
    if (v37.__r_.__value_.__l.__size_ != v37.__r_.__value_.__r.__words[2])
    {
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\t", 1);
        v32 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" -> ", 4);
        v33 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)";\n", 2);
        v30 += 8;
      }
      while (v30 != v31);
      v30 = (char *)v37.__r_.__value_.__l.__size_;
    }
    if (v30)
    {
      v37.__r_.__value_.__r.__words[2] = (std::string::size_type)v30;
      operator delete(v30);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"}", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v46, a2);
  v44[0] = *MEMORY[0x24BEDB7F0];
  v34 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v44 + *(_QWORD *)(v44[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v45 = v34;
  v46[0] = MEMORY[0x24BEDB848] + 16;
  if (v47 < 0)
    operator delete((void *)v46[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v48);
}

void sub_206E55A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  std::locale::~locale(&a10);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a35);
  _Unwind_Resume(a1);
}

uint64_t CpGraph::IdentifyConnectedComponents(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t i;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  unint64_t **v20;
  unint64_t **v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t **v36;
  unint64_t **v37;
  unint64_t **v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  BOOL v54;
  _QWORD *v56;
  _QWORD *v57;
  char *v58;
  unint64_t *v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t *v62;
  uint64_t **v63;
  unint64_t v64;
  void *__p;
  unint64_t *v66;
  char *v67;
  void *v68;
  _OWORD v69[2];
  int v70;
  __int128 v71;
  __int128 v72;
  int v73;
  unint64_t v74[2];

  memset(v69, 0, sizeof(v69));
  v70 = 1065353216;
  v7 = *a3;
  for (i = a3[1];
        i != v7;
  a3[1] = v7;
  v8 = a1 + 1;
  v9 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    v10 = 0;
    v63 = (uint64_t **)(a1 + 13);
    v60 = a1 + 3;
    v61 = a1 + 8;
    v56 = a1 + 1;
    do
    {
      v68 = (void *)v9[4];
      if (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v69, (unint64_t *)&v68)&& !std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(a2, (unint64_t *)&v68))
      {
        v11 = (unint64_t)v68;
        v12 = (unint64_t *)operator new(8uLL);
        v57 = v9;
        *v12 = v11;
        v62 = v12 + 1;
        *(_QWORD *)&v71 = v11;
        *((_QWORD *)&v71 + 1) = v10;
        std::__hash_table<std::__hash_value_type<unsigned long,ZinIrOpLayer *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,ZinIrOpLayer *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,ZinIrOpLayer *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,ZinIrOpLayer *> const&>((uint64_t)v69, (unint64_t *)&v71, &v71);
        __p = v68;
        v13 = v10 + 1;
        if (0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3) >= v10 + 1)
        {
          std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>(*a3 + 40 * v10, (unint64_t *)&__p, &__p);
        }
        else
        {
          v71 = 0u;
          v72 = 0u;
          v73 = 1065353216;
          std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>((uint64_t)&v71, (unint64_t *)&__p, &__p);
          v14 = a3[1];
          if (v14 >= a3[2])
          {
            v15 = std::vector<std::unordered_set<unsigned long long>>::__push_back_slow_path<std::unordered_set<unsigned long long> const&>(a3, (uint64_t)&v71);
          }
          else
          {
            std::unordered_set<unsigned long long>::unordered_set(a3[1], (uint64_t)&v71);
            v15 = v14 + 40;
            a3[1] = v14 + 40;
          }
          a3[1] = v15;
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v71);
        }
        v16 = (char *)(v12 + 1);
        do
        {
          v58 = v16;
          v59 = v12;
          v17 = v12;
          __p = 0;
          v66 = 0;
          v67 = 0;
          do
          {
            v64 = 0;
            v64 = *v17;
            *(_QWORD *)&v71 = &v64;
            v18 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v61, (unint64_t **)&v71);
            v19 = v18 + 3;
            if (!v18)
              v19 = v63;
            v21 = (unint64_t **)*v19;
            v20 = (unint64_t **)v19[1];
            while (v21 != v20)
            {
              v22 = *v21;
              if (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v69, *v21))
              {
                if (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(a2, v22))
                {
                  v23 = v66;
                  if (v66 >= (unint64_t *)v67)
                  {
                    v25 = (unint64_t *)__p;
                    v26 = ((char *)v66 - (_BYTE *)__p) >> 3;
                    v27 = v26 + 1;
                    if ((unint64_t)(v26 + 1) >> 61)
                      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                    v28 = v67 - (_BYTE *)__p;
                    if ((v67 - (_BYTE *)__p) >> 2 > v27)
                      v27 = v28 >> 2;
                    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
                      v29 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v29 = v27;
                    if (v29)
                    {
                      v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v67, v29);
                      v25 = (unint64_t *)__p;
                      v23 = v66;
                    }
                    else
                    {
                      v30 = 0;
                    }
                    v31 = (unint64_t *)&v30[8 * v26];
                    *v31 = *v22;
                    v24 = v31 + 1;
                    while (v23 != v25)
                    {
                      v32 = *--v23;
                      *--v31 = v32;
                    }
                    __p = v31;
                    v66 = v24;
                    v67 = &v30[8 * v29];
                    if (v25)
                      operator delete(v25);
                  }
                  else
                  {
                    *v66 = *v22;
                    v24 = v23 + 1;
                  }
                  v66 = v24;
                  *(_QWORD *)&v71 = v22;
                  *((_QWORD *)&v71 + 1) = v10;
                  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_impl<std::pair<unsigned long long const&,unsigned long>>(v69, (uint64_t **)&v71);
                }
                v74[0] = *v22;
                if (0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3) >= v13)
                {
                  std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>(*a3 + 40 * v10, v74, v74);
                }
                else
                {
                  v71 = 0u;
                  v72 = 0u;
                  v73 = 1065353216;
                  std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>((uint64_t)&v71, v74, v74);
                  v33 = a3[1];
                  if (v33 >= a3[2])
                  {
                    v34 = std::vector<std::unordered_set<unsigned long long>>::__push_back_slow_path<std::unordered_set<unsigned long long> const&>(a3, (uint64_t)&v71);
                  }
                  else
                  {
                    std::unordered_set<unsigned long long>::unordered_set(a3[1], (uint64_t)&v71);
                    v34 = v33 + 40;
                    a3[1] = v33 + 40;
                  }
                  a3[1] = v34;
                  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v71);
                }
              }
              ++v21;
            }
            *(_QWORD *)&v71 = &v64;
            v35 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v60, (unint64_t **)&v71);
            v36 = v35 + 3;
            if (!v35)
              v36 = v63;
            v38 = (unint64_t **)*v36;
            v37 = (unint64_t **)v36[1];
            while (v38 != v37)
            {
              v39 = *v38;
              if (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v69, *v38))
              {
                if (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(a2, v39))
                {
                  v40 = v66;
                  if (v66 >= (unint64_t *)v67)
                  {
                    v42 = (unint64_t *)__p;
                    v43 = ((char *)v66 - (_BYTE *)__p) >> 3;
                    v44 = v43 + 1;
                    if ((unint64_t)(v43 + 1) >> 61)
                      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                    v45 = v67 - (_BYTE *)__p;
                    if ((v67 - (_BYTE *)__p) >> 2 > v44)
                      v44 = v45 >> 2;
                    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
                      v46 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v46 = v44;
                    if (v46)
                    {
                      v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v67, v46);
                      v42 = (unint64_t *)__p;
                      v40 = v66;
                    }
                    else
                    {
                      v47 = 0;
                    }
                    v48 = (unint64_t *)&v47[8 * v43];
                    *v48 = *v39;
                    v41 = v48 + 1;
                    while (v40 != v42)
                    {
                      v49 = *--v40;
                      *--v48 = v49;
                    }
                    __p = v48;
                    v66 = v41;
                    v67 = &v47[8 * v46];
                    if (v42)
                      operator delete(v42);
                  }
                  else
                  {
                    *v66 = *v39;
                    v41 = v40 + 1;
                  }
                  v66 = v41;
                  *(_QWORD *)&v71 = v39;
                  *((_QWORD *)&v71 + 1) = v10;
                  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_impl<std::pair<unsigned long long const&,unsigned long>>(v69, (uint64_t **)&v71);
                }
                v74[0] = *v39;
                if (0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3) >= v13)
                {
                  std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>(*a3 + 40 * v10, v74, v74);
                }
                else
                {
                  v71 = 0u;
                  v72 = 0u;
                  v73 = 1065353216;
                  std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>((uint64_t)&v71, v74, v74);
                  v50 = a3[1];
                  if (v50 >= a3[2])
                  {
                    v51 = std::vector<std::unordered_set<unsigned long long>>::__push_back_slow_path<std::unordered_set<unsigned long long> const&>(a3, (uint64_t)&v71);
                  }
                  else
                  {
                    std::unordered_set<unsigned long long>::unordered_set(a3[1], (uint64_t)&v71);
                    v51 = v50 + 40;
                    a3[1] = v50 + 40;
                  }
                  a3[1] = v51;
                  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v71);
                }
              }
              ++v38;
            }
            ++v17;
          }
          while (v17 != v62);
          v12 = (unint64_t *)__p;
          v62 = v66;
          v16 = v67;
          __p = v59;
          v67 = v58;
          if (v59)
          {
            v66 = v59;
            operator delete(v59);
          }
        }
        while (v62 != v12);
        if (v12)
          operator delete(v12);
        ++v10;
        v8 = v56;
        v9 = v57;
      }
      v52 = (_QWORD *)v9[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          v53 = (_QWORD *)v9[2];
          v54 = *v53 == (_QWORD)v9;
          v9 = v53;
        }
        while (!v54);
      }
      v9 = v53;
    }
    while (v53 != v8);
  }
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v69);
}

void sub_206E56080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;

  *(_QWORD *)(v23 + 8) = v24;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v26 - 144);
  operator delete(v25);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a23);
  _Unwind_Resume(a1);
}

char *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::reference_wrapper<unsigned long long const> const*>,std::__wrap_iter<std::reference_wrapper<unsigned long long const> const*>>(char *result, _QWORD **a2, _QWORD **a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  _QWORD *v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = *v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_206E56180(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::unordered_set<unsigned long long>>::__push_back_slow_path<std::unordered_set<unsigned long long> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[40 * v4];
  v16 = &v10[40 * v9];
  std::unordered_set<unsigned long long>::unordered_set((uint64_t)v14, a2);
  v15 = v14 + 40;
  std::vector<std::unordered_map<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<std::unordered_map<ZinIrOpLayer *,ZinIrOpLayer *>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_206E5628C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unordered_map<ZinIrOpLayer *,ZinIrOpLayer *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<unsigned long long>::unordered_set(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_206E562FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::reference_wrapper<unsigned long long const>>::insert(uint64_t a1, char *__src, _QWORD *a3)
{
  char *v4;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void *__p;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v14 = *(_BYTE **)a1;
    v15 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v15 >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v16 = (__src - v14) >> 3;
    v17 = v8 - (_QWORD)v14;
    if (v17 >> 2 > v15)
      v15 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    v25 = v7;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v18);
    else
      v19 = 0;
    __p = v19;
    v22 = &v19[8 * v16];
    v23 = v22;
    v24 = &v19[8 * v18];
    std::__split_buffer<unsigned long *>::push_back(&__p, a3);
    v4 = std::vector<ZinGOCLayer const*>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22)
      v23 += (v22 - v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v10 = __src + 8;
    v11 = v6 - 8;
    v12 = v6;
    while (v11 < v6)
    {
      v13 = *(_QWORD *)v11;
      v11 += 8;
      *(_QWORD *)v12 = v13;
      v12 += 8;
    }
    *(_QWORD *)(a1 + 8) = v12;
    if (v6 != v10)
      memmove(&v6[-8 * ((v6 - v10) >> 3)], __src, v6 - v10);
    *(_QWORD *)v4 = *a3;
  }
  return v4;
}

void sub_206E5647C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(_QWORD *a1, unint64_t **a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = **a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = **a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*result[2] == v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = **a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = **a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v3 == v8)
    {
      if (*result[2] == v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::__emplace_unique_key_args<std::reference_wrapper<unsigned long long const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<unsigned long long const>&&>,std::tuple<>>(uint64_t a1, unint64_t **a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = **a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = **a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*(_QWORD *)v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  v14 = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[2] = v14;
  v11[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v11 = *v22;
LABEL_38:
    *v22 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v21 + 8 * v4) = v13;
  if (*v11)
  {
    v23 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_206E567A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_206E569F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_impl<std::pair<unsigned long long const&,unsigned long>>(_QWORD *a1, uint64_t **a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *inserted;
  char v8;

  v4 = operator new(0x20uLL);
  *v4 = 0;
  v5 = a2[1];
  v6 = **a2;
  v4[2] = v6;
  v4[3] = v5;
  v4[1] = v6;
  inserted = std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__node_insert_unique(a1, v4);
  if ((v8 & 1) == 0)
    operator delete(v4);
  return inserted;
}

void sub_206E56B3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinParseMatrixDecompositionUnit(const __CFDictionary *a1, ZinIrMatrixDecompositionUnitInfo *a2, CFArrayRef *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  const __CFNumber *v8;
  const __CFNumber *v9;
  CFTypeID v10;
  const void *v17;
  _BOOL8 v18;
  CFTypeID v19;
  uint64_t result;
  const __CFArray *v21;
  CFTypeID v22;
  CFIndex v23;
  char *v24;
  char *v25;
  char *v26;
  const __CFString *v27;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v29;
  CFTypeID v30;
  CFIndex Count;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  char v50;
  char v51;
  __int16 valuePtr;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Params"));
  if (Value && (v6 = Value, v7 = CFGetTypeID(Value), v7 == CFDictionaryGetTypeID()))
  {
    v8 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("Epsilon"));
    if (v8)
    {
      v9 = v8;
      v10 = CFGetTypeID(v8);
      if (v10 == CFNumberGetTypeID())
      {
        valuePtr = 0;
        CFNumberGetValue(v9, kCFNumberSInt16Type, &valuePtr);
        _H0 = valuePtr;
        __asm { FCVT            S0, H0 }
        *((_DWORD *)a2 + 40) = _S0;
      }
    }
    v17 = CFDictionaryGetValue(v6, CFSTR("Type"));
    if (v17
      && (v18 = (_BOOL8)v17, v19 = CFGetTypeID(v17), v19 == CFStringGetTypeID())
      && !CFStringToMatrixDecompositionType(v18, (int *)a2 + 20))
    {
      v40 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v40)
        ZinParseMatrixDecompositionUnit(v40, v41, v42, v43, v44, v45, v46, v47);
      v27 = CFSTR("InvalidMatrixDecompositionType");
    }
    else
    {
      result = (uint64_t)CFDictionaryGetValue(v6, CFSTR("RotationAxis"));
      if (!result)
        return result;
      v21 = (const __CFArray *)result;
      v22 = CFGetTypeID((CFTypeRef)result);
      if (v22 != CFArrayGetTypeID() || CFArrayGetCount(v21) < 1)
        return 0;
      v23 = 0;
      v24 = (char *)a2 + 88;
      v25 = (char *)a2 + 112;
      v26 = (char *)a2 + 136;
      v27 = CFSTR("InvalidRotationAxis");
      while (1)
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v21, v23);
        if (!ValueAtIndex)
          break;
        v29 = ValueAtIndex;
        v30 = CFGetTypeID(ValueAtIndex);
        if (v30 != CFNumberGetTypeID())
          break;
        v51 = 0;
        CFNumberGetValue(v29, kCFNumberSInt8Type, &v51);
        v50 = v51 & 1;
        v49 = (v51 & 2) != 0;
        v48 = (v51 & 4) != 0;
        std::vector<BOOL>::push_back((uint64_t)v24, &v50);
        std::vector<BOOL>::push_back((uint64_t)v25, &v49);
        std::vector<BOOL>::push_back((uint64_t)v26, &v48);
        ++v23;
        Count = CFArrayGetCount(v21);
        result = 0;
        if (Count <= v23)
          return result;
      }
    }
  }
  else
  {
    v32 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v32)
      ZinParseMatrixDecompositionUnit(v32, v33, v34, v35, v36, v37, v38, v39);
    v27 = CFSTR("InvalidParamSyntax");
  }
  ZinIrUnitStatus::SetError(a3, v27);
  return 3;
}

void ZinParseMatrixDecompositionUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing matrix decomposition params.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid matrix decomposition type.\n", a5, a6, a7, a8, 0);
}

_QWORD *ZinLiveStateLayer::ZinLiveStateLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  ZinIrKernel *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  ZinIrKernel *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v5 = a3[1];
  v14 = *a3;
  v15 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v13 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, a2, &v14, a4, &v13);
  v8 = v13;
  v13 = 0;
  if (v8)
  {
    ZinIrKernel::~ZinIrKernel(v8);
    MEMORY[0x20BD002F8]();
  }
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = &off_24C01D100;
  return a1;
}

void sub_206E56ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  ZinIrKernel *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, ZinIrKernel *);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)va, 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t ZinLiveStateLayer::LowerEngine(uint64_t a1)
{
  if (*(_BYTE *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0) + 164))
    ZinAssertImpl("Compressed format unsupported for live states");
  return 0;
}

_QWORD *ZinLiveStateLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  const ZinIrOpLayerOpCode *v7;
  ZinIrOpLayerOpCode *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *GroupId;
  uint64_t v18[2];
  ZinIrOpLayerOpCode *v19;

  v6 = (_QWORD *)operator new();
  v7 = (const ZinIrOpLayerOpCode *)*((_QWORD *)a1 + 8);
  v8 = (ZinIrOpLayerOpCode *)operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v8, v7);
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  v18[0] = v9;
  v18[1] = (uint64_t)v10;
  v19 = v8;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  ZinLiveStateLayer::ZinLiveStateLayer(v6, (uint64_t *)&v19, v18, a3);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v15 = (uint64_t)v19;
  v19 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_206E57050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

uint64_t ZinL2Access::GetSymbol(ZinL2Access *this)
{
  if (*(_QWORD *)this == *((_QWORD *)this + 1))
    return 0;
  else
    return **(_QWORD **)this;
}

uint64_t ZinL2Access::SetSymbols(uint64_t a1, uint64_t a2, int a3)
{
  if (a1 != a2)
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_DWORD *)(a1 + 24) = a3;
  return 1;
}

uint64_t ZinL2Access::RemoveSymbol(uint64_t this)
{
  *(_QWORD *)(this + 8) = *(_QWORD *)this;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void ZinCreatePEUnit(uint64_t a1, uint64_t a2, __CFDictionary *a3)
{
  __int128 *v6;
  __int128 *v7;
  std::string *v12;
  __int128 v13;
  __int128 v14;
  size_t v15;
  std::string *p_str;
  const void *v17;
  __int128 *v18;
  __int128 v19;
  __CFDictionary *NeuronUnit;
  std::string *p_p;
  CFStringRef v22;
  __int128 v24;
  __int128 v25;
  size_t v26;
  std::string *v27;
  CFAllocatorRef *v28;
  const void *v29;
  uint64_t v30;
  __CFDictionary *v31;
  const char *size;
  CFStringRef v33;
  uint64_t v34;
  CFAllocatorRef *v35;
  size_t v36;
  std::string *v37;
  const void *v38;
  __CFDictionary *EWUnit;
  std::string *v40;
  CFStringRef v41;
  __int128 v42;
  __int128 v43;
  size_t v44;
  std::string *v45;
  const void *v46;
  __CFDictionary *v47;
  std::string *v48;
  CFStringRef v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  size_t v53;
  std::string *v54;
  const void *v55;
  __CFDictionary *GOCUnit;
  const char *v57;
  CFStringRef v58;
  __int128 v59;
  size_t v60;
  std::string *v61;
  const void *v62;
  __CFDictionary *v63;
  const char *v64;
  CFStringRef v65;
  __int128 v66;
  __int128 v67;
  size_t v68;
  std::string *v69;
  const void *v70;
  __CFDictionary *QuantUnit;
  const char *v72;
  CFStringRef v73;
  void *v74;
  std::string v75;
  int v76;
  __int128 v77;
  _BYTE v78[24];
  _BYTE v79[32];
  void (**v80)(ZinIrEWUnitInfo *__hidden);
  std::string v81;
  int v82;
  __int128 v83;
  _BYTE v84[24];
  int v85;
  void *v86;
  std::string __p;
  int v88;
  __int128 v89;
  _BYTE v90[24];
  _BYTE v91[32];
  std::vector<std::string> v92;
  std::string v93;
  __int128 v94;
  std::string v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  std::string v101;
  uint64_t v102;
  std::string __str;
  __int128 v104;
  __int128 v105;
  _BYTE v106[24];
  _BYTE v107[48];
  __int128 v108;
  uint64_t v109;
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  v6 = *(__int128 **)(a1 + 40);
  v7 = *(__int128 **)(a1 + 48);
  memset(&v92, 0, sizeof(v92));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((std::string *)&v92, v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
  v88 = 0;
  v89 = 0u;
  *(_OWORD *)v90 = 0u;
  *(_QWORD *)&v90[16] = -1;
  v86 = &unk_24C01EFE0;
  memset(&__p, 0, sizeof(__p));
  *(_OWORD *)&v91[4] = xmmword_207A8A4B0;
  __asm { FMOV            V8.2S, #1.0 }
  *(_QWORD *)&v91[20] = _D8;
  *(_DWORD *)v91 = 0;
  *(_DWORD *)&v91[28] = 0;
  v12 = (std::string *)(a1 + 80);
  if (*(_BYTE *)(a1 + 192))
  {
    std::string::operator=(&__p, (const std::string *)(a1 + 88));
    v88 = *(_DWORD *)(a1 + 112);
    if (&v86 != (void **)v12)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v89, *(std::string **)(a1 + 120), *(__int128 **)(a1 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3));
    v13 = *(_OWORD *)(a1 + 160);
    *(_OWORD *)&v90[8] = *(_OWORD *)(a1 + 144);
    v14 = *(_OWORD *)(a1 + 176);
    *(_OWORD *)v91 = v13;
    *(_OWORD *)&v91[16] = v14;
    if (*(char *)(a1 + 31) >= 0)
      v15 = *(unsigned __int8 *)(a1 + 31);
    else
      v15 = *(_QWORD *)(a1 + 16);
    p_str = &__str;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, v15 + 25);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (v15)
    {
      if (*(char *)(a1 + 31) >= 0)
        v17 = (const void *)(a1 + 8);
      else
        v17 = *(const void **)(a1 + 8);
      memmove(p_str, v17, v15);
    }
    strcpy((char *)p_str + v15, ".first_operand_input_relu");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __str;
    *(_QWORD *)&v90[8] = *(_QWORD *)(a1 + 64);
    *(_QWORD *)&v90[16] = *(_QWORD *)(a1 + 72);
    v18 = *(__int128 **)(a1 + 40);
    if (*((char *)v18 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
    }
    else
    {
      v19 = *v18;
      __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v18 + 2);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v19;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v89, &__str, &v104, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    NeuronUnit = ZinCreateNeuronUnit((const ZinIrNeuronUnitInfo *)&v86);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v22 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)p_p, 0x8000100u);
    CFDictionaryAddValue(a3, v22, NeuronUnit);
    CFRelease(v22);
    CFRelease(NeuronUnit);
    std::string::operator=(v92.__begin_, &__p);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_ - (char *)v92.__begin_) >> 3) >= 2 && *(_BYTE *)(a1 + 312) != 0)
  {
    DWORD2(v104) = 0;
    *(_QWORD *)&v104 = 0;
    v105 = 0u;
    *(_OWORD *)v106 = 0u;
    *(_QWORD *)&v106[16] = -1;
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C01EFE0;
    *(_OWORD *)&v107[4] = xmmword_207A8A4B0;
    *(_QWORD *)&v107[20] = _D8;
    *(_DWORD *)v107 = 0;
    *(_DWORD *)&v107[28] = 0;
    std::string::operator=((std::string *)&__str.__r_.__value_.__r.__words[1], (const std::string *)(a1 + 88));
    DWORD2(v104) = *(_DWORD *)(a1 + 112);
    if (&__str != v12)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v105, *(std::string **)(a1 + 120), *(__int128 **)(a1 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3));
    v24 = *(_OWORD *)(a1 + 160);
    *(_OWORD *)&v106[8] = *(_OWORD *)(a1 + 144);
    v25 = *(_OWORD *)(a1 + 176);
    *(_OWORD *)v107 = v24;
    *(_OWORD *)&v107[16] = v25;
    if (*(char *)(a1 + 31) >= 0)
      v26 = *(unsigned __int8 *)(a1 + 31);
    else
      v26 = *(_QWORD *)(a1 + 16);
    v27 = &v93;
    std::string::basic_string[abi:ne180100]((uint64_t)&v93, v26 + 26);
    if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)v93.__r_.__value_.__r.__words[0];
    v28 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
    if (v26)
    {
      if (*(char *)(a1 + 31) >= 0)
        v29 = (const void *)(a1 + 8);
      else
        v29 = *(const void **)(a1 + 8);
      memmove(v27, v29, v26);
    }
    strcpy((char *)v27 + v26, ".second_operand_input_relu");
    if (SBYTE7(v104) < 0)
      operator delete((void *)__str.__r_.__value_.__l.__size_);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)&v93.__r_.__value_.__l.__data_;
    *(_QWORD *)&v104 = *((_QWORD *)&v93.__r_.__value_.__l + 2);
    *(_QWORD *)&v106[8] = *(_QWORD *)(a1 + 64);
    *(_QWORD *)&v106[16] = *(_QWORD *)(a1 + 72);
    v30 = *(_QWORD *)(a1 + 40);
    if (*(char *)(v30 + 47) < 0)
      std::string::__init_copy_ctor_external(&v93, *(const std::string::value_type **)(v30 + 24), *(_QWORD *)(v30 + 32));
    else
      v93 = *(std::string *)(v30 + 24);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v105, &v93, &v94, 1uLL);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    v31 = ZinCreateNeuronUnit((const ZinIrNeuronUnitInfo *)&__str);
    if ((SBYTE7(v104) & 0x80u) == 0)
      size = &__str.__r_.__value_.__s.__data_[8];
    else
      size = (const char *)__str.__r_.__value_.__l.__size_;
    v33 = CFStringCreateWithCString(*v28, size, 0x8000100u);
    CFDictionaryAddValue(a3, v33, v31);
    CFRelease(v33);
    CFRelease(v31);
    std::string::operator=(v92.__begin_ + 1, (const std::string *)&__str.__r_.__value_.__r.__words[1]);
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&__str.__r_.__value_.__l.__data_);
  }
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v34 = *(_QWORD *)(a2 + 24);
  if (!v34)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t, std::vector<std::string> *, std::string *))(*(_QWORD *)v34 + 48))(v34, a1, &v92, &v93);
  v82 = 0;
  v83 = 0u;
  *(_OWORD *)v84 = 0u;
  *(_QWORD *)&v84[16] = -1;
  v80 = off_24C01A728;
  memset(&v81, 0, sizeof(v81));
  v85 = 0;
  v35 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (*(_BYTE *)(a1 + 408))
  {
    std::string::operator=(&v81, (const std::string *)(a1 + 328));
    v82 = *(_DWORD *)(a1 + 352);
    if (&v80 != (void (***)(ZinIrEWUnitInfo *__hidden))(a1 + 320))
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v83, *(std::string **)(a1 + 360), *(__int128 **)(a1 + 368), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 368) - *(_QWORD *)(a1 + 360)) >> 3));
    *(_OWORD *)&v84[8] = *(_OWORD *)(a1 + 384);
    v85 = *(_DWORD *)(a1 + 400);
    if (*(char *)(a1 + 31) >= 0)
      v36 = *(unsigned __int8 *)(a1 + 31);
    else
      v36 = *(_QWORD *)(a1 + 16);
    v37 = &__str;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, v36 + 4);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v37 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (v36)
    {
      if (*(char *)(a1 + 31) >= 0)
        v38 = (const void *)(a1 + 8);
      else
        v38 = *(const void **)(a1 + 8);
      memmove(v37, v38, v36);
    }
    strcpy((char *)v37 + v36, ".abs");
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    v81 = __str;
    *(_OWORD *)&v84[8] = *(_OWORD *)(a1 + 64);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v83, v92.__begin_, (__int128 *)v92.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_ - (char *)v92.__begin_) >> 3));
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__str, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
    else
      __str = v81;
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v92, &__str, &v104, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    EWUnit = ZinCreateEWUnit((const ZinIrEWUnitInfo *)&v80);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = &v81;
    else
      v40 = (std::string *)v81.__r_.__value_.__r.__words[0];
    v41 = CFStringCreateWithCString(*v35, (const char *)v40, 0x8000100u);
    CFDictionaryAddValue(a3, v41, EWUnit);
    CFRelease(v41);
    CFRelease(EWUnit);
  }
  v76 = 0;
  v77 = 0u;
  *(_OWORD *)v78 = 0u;
  *(_QWORD *)&v78[16] = -1;
  v74 = &unk_24C01EFE0;
  memset(&v75, 0, sizeof(v75));
  *(_DWORD *)v79 = 0;
  *(_OWORD *)&v79[4] = xmmword_207A8A4B0;
  *(_QWORD *)&v79[20] = _D8;
  *(_DWORD *)&v79[28] = 0;
  if (*(_BYTE *)(a1 + 528))
  {
    std::string::operator=(&v75, (const std::string *)(a1 + 424));
    v76 = *(_DWORD *)(a1 + 448);
    if (&v74 != (void **)(a1 + 416))
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v77, *(std::string **)(a1 + 456), *(__int128 **)(a1 + 464), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 464) - *(_QWORD *)(a1 + 456)) >> 3));
    v42 = *(_OWORD *)(a1 + 496);
    *(_OWORD *)&v78[8] = *(_OWORD *)(a1 + 480);
    v43 = *(_OWORD *)(a1 + 512);
    *(_OWORD *)v79 = v42;
    *(_OWORD *)&v79[16] = v43;
    if (*(char *)(a1 + 31) >= 0)
      v44 = *(unsigned __int8 *)(a1 + 31);
    else
      v44 = *(_QWORD *)(a1 + 16);
    v45 = &__str;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, v44 + 18);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v45 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (v44)
    {
      if (*(char *)(a1 + 31) >= 0)
        v46 = (const void *)(a1 + 8);
      else
        v46 = *(const void **)(a1 + 8);
      memmove(v45, v46, v44);
    }
    strcpy((char *)v45 + v44, ".output_activation");
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    v75 = __str;
    *(_QWORD *)&v78[8] = *(_QWORD *)(a1 + 64);
    *(_QWORD *)&v78[16] = *(_QWORD *)(a1 + 72);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v77, v92.__begin_, (__int128 *)v92.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_ - (char *)v92.__begin_) >> 3));
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__str, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
    else
      __str = v75;
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v92, &__str, &v104, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v47 = ZinCreateNeuronUnit((const ZinIrNeuronUnitInfo *)&v74);
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &v75;
    else
      v48 = (std::string *)v75.__r_.__value_.__r.__words[0];
    v49 = CFStringCreateWithCString(*v35, (const char *)v48, 0x8000100u);
    CFDictionaryAddValue(a3, v49, v47);
    CFRelease(v49);
    CFRelease(v47);
  }
  DWORD2(v104) = 0;
  *(_QWORD *)&v104 = 0;
  v105 = 0u;
  *(_OWORD *)v106 = 0u;
  *(_QWORD *)&v106[16] = -1;
  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C01BA60;
  *(_WORD *)v107 = 0;
  *(_QWORD *)&v107[4] = 1065353216;
  *(_WORD *)&v107[12] = 0;
  *(_QWORD *)&v107[16] = 0;
  v107[24] = 0;
  *(_QWORD *)&v107[28] = -1;
  *(_QWORD *)&v107[40] = -1;
  LOBYTE(v108) = 0;
  *(_QWORD *)((char *)&v108 + 4) = -1;
  v109 = -1;
  if (*(_BYTE *)(a1 + 688))
  {
    std::string::operator=((std::string *)&__str.__r_.__value_.__r.__words[1], (const std::string *)(a1 + 544));
    DWORD2(v104) = *(_DWORD *)(a1 + 568);
    if (&__str != (std::string *)(a1 + 536))
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v105, *(std::string **)(a1 + 576), *(__int128 **)(a1 + 584), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 584) - *(_QWORD *)(a1 + 576)) >> 3));
    v50 = *(_OWORD *)(a1 + 616);
    *(_OWORD *)&v106[8] = *(_OWORD *)(a1 + 600);
    v51 = *(_OWORD *)(a1 + 632);
    v52 = *(_OWORD *)(a1 + 664);
    *(_OWORD *)&v107[32] = *(_OWORD *)(a1 + 648);
    v108 = v52;
    v109 = *(_QWORD *)(a1 + 680);
    *(_OWORD *)v107 = v50;
    *(_OWORD *)&v107[16] = v51;
    if (*(char *)(a1 + 31) >= 0)
      v53 = *(unsigned __int8 *)(a1 + 31);
    else
      v53 = *(_QWORD *)(a1 + 16);
    v54 = &v93;
    std::string::basic_string[abi:ne180100]((uint64_t)&v93, v53 + 11);
    if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v54 = (std::string *)v93.__r_.__value_.__r.__words[0];
    if (v53)
    {
      if (*(char *)(a1 + 31) >= 0)
        v55 = (const void *)(a1 + 8);
      else
        v55 = *(const void **)(a1 + 8);
      memmove(v54, v55, v53);
    }
    strcpy((char *)v54 + v53, ".output_goc");
    if (SBYTE7(v104) < 0)
      operator delete((void *)__str.__r_.__value_.__l.__size_);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)&v93.__r_.__value_.__l.__data_;
    *(_QWORD *)&v104 = *((_QWORD *)&v93.__r_.__value_.__l + 2);
    *(_QWORD *)&v106[8] = *(_QWORD *)(a1 + 64);
    *(_QWORD *)&v106[16] = *(_QWORD *)(a1 + 72);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v105, v92.__begin_, (__int128 *)v92.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_ - (char *)v92.__begin_) >> 3));
    if (SBYTE7(v104) < 0)
    {
      std::string::__init_copy_ctor_external(&v93, (const std::string::value_type *)__str.__r_.__value_.__l.__size_, __str.__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = *(_OWORD *)&__str.__r_.__value_.__r.__words[1];
      v93.__r_.__value_.__r.__words[2] = v104;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v92, &v93, &v94, 1uLL);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    GOCUnit = ZinCreateGOCUnit((uint64_t)&__str);
    if ((SBYTE7(v104) & 0x80u) == 0)
      v57 = &__str.__r_.__value_.__s.__data_[8];
    else
      v57 = (const char *)__str.__r_.__value_.__l.__size_;
    v58 = CFStringCreateWithCString(*v35, v57, 0x8000100u);
    CFDictionaryAddValue(a3, v58, GOCUnit);
    CFRelease(v58);
    CFRelease(GOCUnit);
  }
  if (*(_BYTE *)(a1 + 808))
  {
    v93.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C017CA0;
    if (*(char *)(a1 + 727) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v93.__r_.__value_.__r.__words[1], *(const std::string::value_type **)(a1 + 704), *(_QWORD *)(a1 + 712));
    }
    else
    {
      *(_OWORD *)&v93.__r_.__value_.__r.__words[1] = *(_OWORD *)(a1 + 704);
      *(_QWORD *)&v94 = *(_QWORD *)(a1 + 720);
    }
    DWORD2(v94) = *(_DWORD *)(a1 + 728);
    memset(&v95, 0, sizeof(v95));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v95, *(__int128 **)(a1 + 736), *(__int128 **)(a1 + 744), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 744) - *(_QWORD *)(a1 + 736)) >> 3));
    v93.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C01EFE0;
    v59 = *(_OWORD *)(a1 + 776);
    v96 = *(_OWORD *)(a1 + 760);
    v97 = v59;
    v98 = *(_OWORD *)(a1 + 792);
    if (*(char *)(a1 + 31) >= 0)
      v60 = *(unsigned __int8 *)(a1 + 31);
    else
      v60 = *(_QWORD *)(a1 + 16);
    v61 = &v101;
    std::string::basic_string[abi:ne180100]((uint64_t)&v101, v60 + 20);
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v61 = (std::string *)v101.__r_.__value_.__r.__words[0];
    if (v60)
    {
      if (*(char *)(a1 + 31) >= 0)
        v62 = (const void *)(a1 + 8);
      else
        v62 = *(const void **)(a1 + 8);
      memmove(v61, v62, v60);
    }
    strcpy((char *)v61 + v60, ".post_goc_activation");
    if (SBYTE7(v94) < 0)
      operator delete((void *)v93.__r_.__value_.__l.__size_);
    *(_OWORD *)&v93.__r_.__value_.__r.__words[1] = *(_OWORD *)&v101.__r_.__value_.__l.__data_;
    *(_QWORD *)&v94 = *((_QWORD *)&v101.__r_.__value_.__l + 2);
    v96 = *(_OWORD *)(a1 + 64);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v95, v92.__begin_, (__int128 *)v92.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_ - (char *)v92.__begin_) >> 3));
    if (SBYTE7(v94) < 0)
    {
      std::string::__init_copy_ctor_external(&v101, (const std::string::value_type *)v93.__r_.__value_.__l.__size_, v93.__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_OWORD *)&v101.__r_.__value_.__l.__data_ = *(_OWORD *)&v93.__r_.__value_.__r.__words[1];
      v101.__r_.__value_.__r.__words[2] = v94;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v92, &v101, (__int128 *)&v102, 1uLL);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    v63 = ZinCreateNeuronUnit((const ZinIrNeuronUnitInfo *)&v93);
    if ((SBYTE7(v94) & 0x80u) == 0)
      v64 = &v93.__r_.__value_.__s.__data_[8];
    else
      v64 = (const char *)v93.__r_.__value_.__l.__size_;
    v65 = CFStringCreateWithCString(*v35, v64, 0x8000100u);
    CFDictionaryAddValue(a3, v65, v63);
    CFRelease(v65);
    CFRelease(v63);
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v93.__r_.__value_.__l.__data_);
  }
  if (*(_BYTE *)(a1 + 960))
  {
    v93.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C017CA0;
    if (*(char *)(a1 + 847) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v93.__r_.__value_.__r.__words[1], *(const std::string::value_type **)(a1 + 824), *(_QWORD *)(a1 + 832));
    }
    else
    {
      *(_OWORD *)&v93.__r_.__value_.__r.__words[1] = *(_OWORD *)(a1 + 824);
      *(_QWORD *)&v94 = *(_QWORD *)(a1 + 840);
    }
    DWORD2(v94) = *(_DWORD *)(a1 + 848);
    memset(&v95, 0, sizeof(v95));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v95, *(__int128 **)(a1 + 856), *(__int128 **)(a1 + 864), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 864) - *(_QWORD *)(a1 + 856)) >> 3));
    v93.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01E0C0;
    v66 = *(_OWORD *)(a1 + 896);
    v96 = *(_OWORD *)(a1 + 880);
    v97 = v66;
    v67 = *(_OWORD *)(a1 + 928);
    v98 = *(_OWORD *)(a1 + 912);
    v99 = v67;
    v100 = *(_OWORD *)(a1 + 944);
    if (*(char *)(a1 + 31) >= 0)
      v68 = *(unsigned __int8 *)(a1 + 31);
    else
      v68 = *(_QWORD *)(a1 + 16);
    v69 = &v101;
    std::string::basic_string[abi:ne180100]((uint64_t)&v101, v68 + 6);
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v69 = (std::string *)v101.__r_.__value_.__r.__words[0];
    if (v68)
    {
      if (*(char *)(a1 + 31) >= 0)
        v70 = (const void *)(a1 + 8);
      else
        v70 = *(const void **)(a1 + 8);
      memmove(v69, v70, v68);
    }
    strcpy((char *)v69 + v68, ".quant");
    if (SBYTE7(v94) < 0)
      operator delete((void *)v93.__r_.__value_.__l.__size_);
    *(_OWORD *)&v93.__r_.__value_.__r.__words[1] = *(_OWORD *)&v101.__r_.__value_.__l.__data_;
    *(_QWORD *)&v94 = *((_QWORD *)&v101.__r_.__value_.__l + 2);
    v96 = *(_OWORD *)(a1 + 64);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v95, v92.__begin_, (__int128 *)v92.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_ - (char *)v92.__begin_) >> 3));
    QuantUnit = ZinCreateQuantUnit((const ZinIrQuantUnitInfo *)&v93);
    if ((SBYTE7(v94) & 0x80u) == 0)
      v72 = &v93.__r_.__value_.__s.__data_[8];
    else
      v72 = (const char *)v93.__r_.__value_.__l.__size_;
    v73 = CFStringCreateWithCString(*v35, v72, 0x8000100u);
    CFDictionaryAddValue(a3, v73, QuantUnit);
    CFRelease(v73);
    CFRelease(QuantUnit);
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v93.__r_.__value_.__l.__data_);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&__str.__r_.__value_.__l.__data_);
  ZinIrUnitInfo::~ZinIrUnitInfo(&v74);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v80);
  ZinIrUnitInfo::~ZinIrUnitInfo(&v86);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v92;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
}

void sub_206E580FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&STACK[0x220]);
  ZinIrUnitInfo::~ZinIrUnitInfo(&a37);
  STACK[0x220] = (unint64_t)&a51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  _Unwind_Resume(a1);
}

void sub_206E58288()
{
  JUMPOUT(0x206E58254);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_206E582F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t CpAllocGraph::CpAllocGraph(uint64_t a1, uint64_t a2)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  CpGraph::CpGraph(a1, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  *(_QWORD *)(a1 + 296) = a1 + 304;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = a1 + 328;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 384) = a1 + 392;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 440) = 1065353216;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_DWORD *)(a1 + 480) = 1065353216;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 520) = 1065353216;
  return a1;
}

void sub_206E583E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CpAllocGraph::~CpAllocGraph(CpAllocGraph *this)
{
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)this + 488);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 448);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 408);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 384, *((_QWORD **)this + 49));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 344);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 320, *((_QWORD **)this + 41));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 296, *((_QWORD **)this + 38));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 256);
  CpGraph::~CpGraph((void **)this);
}

uint64_t CpAllocGraph::AddLayer(uint64_t result, unint64_t a2, const std::string *a3, uint64_t a4, uint64_t *a5, _QWORD *a6, unint64_t a7, const std::string *a8)
{
  std::string *v14;
  _QWORD *i;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;

  v14 = (std::string *)result;
  v21 = a7;
  v22 = a2;
  for (i = *(_QWORD **)(result + 8); i; i = (_QWORD *)*i)
  {
    v16 = i[4];
    if (v16 <= a2)
    {
      if (v16 >= a2)
        return result;
      ++i;
    }
  }
  ZinIrNgraph<unsigned long long,std::less<unsigned long long>>::AddNode(result, &v22);
  v23 = v22;
  v24 = &v23;
  std::__hash_table<std::__hash_value_type<unsigned long,ZinIrOpLayer *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,ZinIrOpLayer *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,ZinIrOpLayer *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)&v14[10].__r_.__value_.__r.__words[2], &v23, (uint64_t)&std::piecewise_construct, &v24)[3] = a4;
  CpGraph::SetLayerName((uint64_t)v14, v22, a3);
  v17 = *a5;
  if (a5[1] != *a5)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    do
    {
      CpGraph::AddTensor(v14, *(_QWORD *)(v17 + 8 * v20), (const std::string *)(*a6 + v19));
      ZinIrNgraph<unsigned long long,std::less<unsigned long long>>::AddEdge(v14, (unint64_t *)(*a5 + v18), &v22, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL);
      ++v20;
      v17 = *a5;
      v19 += 24;
      v18 += 8;
    }
    while (v20 < (a5[1] - *a5) >> 3);
  }
  CpGraph::AddTensor(v14, a7, a8);
  return ZinIrNgraph<unsigned long long,std::less<unsigned long long>>::AddEdge(v14, &v22, &v21, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL);
}

uint64_t *CpAllocGraph::SetChainableTensor(CpAllocGraph *this, uint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;

  v4 = a2;
  v5 = a2;
  result = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((_QWORD *)this + 24, (unint64_t *)&v5);
  if (result)
    return std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)this + 37, (unint64_t *)&v4, &v4);
  return result;
}

uint64_t *CpAllocGraph::SetL2DependentableTensor(CpAllocGraph *this, uint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;

  v4 = a2;
  v5 = a2;
  result = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((_QWORD *)this + 24, (unint64_t *)&v5);
  if (result)
    return std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)this + 40, (unint64_t *)&v4, &v4);
  return result;
}

_QWORD *CpAllocGraph::SetBoundaryTensor(CpAllocGraph *this, unint64_t a2)
{
  _QWORD *result;
  unint64_t v4;
  unint64_t v5;

  v4 = a2;
  v5 = a2;
  result = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((_QWORD *)this + 24, &v5);
  if (result)
    return std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>((uint64_t)this + 344, &v4, &v4);
  return result;
}

uint64_t *CpAllocGraph::SetL2CircularTensor(CpAllocGraph *this, uint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;

  v4 = a2;
  v5 = a2;
  result = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((_QWORD *)this + 24, (unint64_t *)&v5);
  if (result)
    return std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)this + 48, (unint64_t *)&v4, &v4);
  return result;
}

void CpAllocGraph::SetLayerBehavior(CpAllocGraph *this, uint64_t *a2, uint64_t **a3)
{
  unint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11[3];
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  void *__p;
  _BYTE *v18;

  v16 = a2;
  __p = a2;
  if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((_QWORD *)this + 19, (unint64_t *)&__p))
  {
    __p = &v16;
    v5 = 0;
    std::__hash_table<std::__hash_value_type<unsigned long,ZinIrOpLayer *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,ZinIrOpLayer *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,ZinIrOpLayer *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this + 448, (unint64_t *)&v16, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)[3] = a3;
    v14 = 0;
    v15 = 0;
    v13 = (uint64_t *)&v14;
    while (1)
    {
      v12 = v5;
      LayerCycleAndFootprintEstimator::GetReadBehaviors(a3, (char **)&__p);
      v6 = __p;
      v7 = v18;
      if (__p)
      {
        v18 = __p;
        operator delete(__p);
      }
      if (v5 >= (v7 - v6) >> 3)
        break;
      v8 = v12;
      LayerCycleAndFootprintEstimator::GetReadBehaviors(a3, (char **)&__p);
      v9 = *((_QWORD *)__p + v8);
      v18 = __p;
      operator delete(__p);
      if (*(_QWORD *)(v9 + 112))
        std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v13, &v12, (uint64_t *)&v12);
      v5 = v12 + 1;
    }
    if (v15)
    {
      v10 = v16;
      std::set<unsigned long>::set[abi:ne180100]((uint64_t *)v11, (uint64_t)&v13);
      CpAllocGraph::SetInPlacePorts((uint64_t)this, v10, v11);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v11, v11[1]);
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v13, v14);
  }
}

void sub_206E58828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

uint64_t **CpAllocGraph::SetInPlacePorts(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t **result;
  uint64_t *v6;
  unint64_t *v7;

  v6 = a2;
  v7 = (unint64_t *)a2;
  result = (uint64_t **)std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((_QWORD *)(a1 + 152), (unint64_t *)&v7);
  if (result)
  {
    v7 = (unint64_t *)&v6;
    result = (uint64_t **)(std::__hash_table<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::__unordered_map_hasher<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::__unordered_map_equal<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::allocator<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,std::piecewise_construct_t const&,std::tuple<ZinNamedType<unsigned long,AneIndexTag> const&>,std::tuple<>>(a1 + 488, (unint64_t *)&v6, (uint64_t)&std::piecewise_construct, (uint64_t **)&v7)+ 3);
    if (result != a3)
      return std::__tree<__CFString const*>::__assign_multi<std::__tree_const_iterator<__CFString const*,std::__tree_node<__CFString const*,void *> *,long>>(result, *a3, a3 + 1);
  }
  return result;
}

__n128 CpAllocGraph::SetTensorLiverange(uint64_t a1, unint64_t *a2, __n128 *a3)
{
  __n128 result;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t *v9;

  v8 = a2;
  v9 = a2;
  if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((_QWORD *)(a1 + 192), (unint64_t *)&v9))
  {
    v6 = (_QWORD *)(a1 + 408);
    if (!std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::find<long>(v6, (unint64_t *)&v8))
    {
      v9 = (unint64_t *)&v8;
      v7 = std::__hash_table<std::__hash_value_type<long,ZinLiverangeOverlapAccumulator::Allocation>,std::__unordered_map_hasher<long,std::__hash_value_type<long,ZinLiverangeOverlapAccumulator::Allocation>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,ZinLiverangeOverlapAccumulator::Allocation>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,ZinLiverangeOverlapAccumulator::Allocation>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t)v6, (unint64_t *)&v8, (uint64_t)&std::piecewise_construct, &v9);
      result = *a3;
      *(__n128 *)(v7 + 3) = *a3;
    }
  }
  return result;
}

uint64_t ZinMirMemCacheStrategyBase::NeedBarIdForIntermediateMemCache(ZinMirMemCacheStrategyBase *this)
{
  return 0;
}

void ZinMirMemCacheStrategyBase::ZinMirMemCacheStrategyBase(ZinMirMemCacheStrategyBase *this, uint64_t a2, uint64_t a3, char a4, BOOL a5, char a6, char a7)
{
  *(_QWORD *)this = &unk_24C023C68;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a3;
  *((_BYTE *)this + 24) = a6;
  *((_BYTE *)this + 25) = a4;
  *((_BYTE *)this + 26) = 0;
  *((_BYTE *)this + 27) = a7;
}

void ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrScheduleUtil *this@<X0>, uint64_t *a2@<X8>)
{
  ZinIrOpLayer **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  ZinIrOpLayer **v9;
  ZinIrOpLayer **v10;
  ZinIrOpLayer *v11;
  ZinIrOpLayer ***v12;
  void **v13;
  ZinIrOpLayer **v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  ZinIrOpLayer **v23;
  char *v24;
  char *v25;
  ZinIrOpLayer *v26;
  ZinIrOpLayer **v27;
  ZinIrOpLayer **v28;
  uint64_t v29;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  if ((ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::TopologicalSort(this, (uint64_t)&v27) & 1) == 0)
    ZinAssertImpl("Couldn't do topological sort");
  v4 = v28;
  if (v28 == v27)
  {
    v8 = 0;
  }
  else
  {
    v5 = -1;
    do
    {
      v6 = (uint64_t)*--v4;
      v7 = *(_QWORD *)(v6 + 48);
      if (v5 <= v7)
        v5 = v7;
    }
    while (v4 != v27);
    v8 = v5 + 1;
  }
  std::vector<std::vector<ZinANELayer *>>::resize(a2, v8);
  v9 = v27;
  v10 = v28;
  if (v27 != v28)
  {
    do
    {
      if (ZinIrOpLayer::IsANELayer(*v9))
      {
        v11 = *v9;
        v12 = (ZinIrOpLayer ***)(*a2 + 24 * *((_QWORD *)*v9 + 6));
        v13 = (void **)(v12 + 1);
        v14 = v12[1];
        v16 = v12 + 2;
        v15 = (unint64_t)v12[2];
        if ((unint64_t)v14 >= v15)
        {
          v18 = v14 - *v12;
          if ((unint64_t)(v18 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v19 = v15 - (_QWORD)*v12;
          v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1))
            v20 = v18 + 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          if (v21)
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v16, v21);
          else
            v22 = 0;
          v23 = (ZinIrOpLayer **)&v22[8 * v18];
          *v23 = v11;
          v17 = v23 + 1;
          v24 = (char *)*v13;
          v25 = (char *)*v12;
          if (*v13 != *v12)
          {
            do
            {
              v26 = (ZinIrOpLayer *)*((_QWORD *)v24 - 1);
              v24 -= 8;
              *--v23 = v26;
            }
            while (v24 != v25);
            v24 = (char *)*v12;
          }
          *v12 = v23;
          *v13 = v17;
          *v16 = &v22[8 * v21];
          if (v24)
            operator delete(v24);
        }
        else
        {
          *v14 = v11;
          v17 = v14 + 1;
        }
        *v13 = v17;
      }
      ++v9;
    }
    while (v9 != v10);
    v9 = v27;
  }
  if (v9)
  {
    v28 = v9;
    operator delete(v9);
  }
}

void sub_206E58B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::TopologicalSort(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;

  v7 = (uint64_t)&v7;
  v8 = &v7;
  v9 = 0;
  v3 = ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::TopologicalSortImpl<std::list<ZinIrOpLayer *>>(a1, &v7);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  std::vector<ZinIrOpLayer *>::reserve((void **)a2, v9);
  if (v8 == &v7)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = v8;
    do
    {
      ++v4;
      v5 = (uint64_t *)v5[1];
    }
    while (v5 != &v7);
  }
  std::vector<ZinIrOpLayer *>::__insert_with_size[abi:ne180100]<std::__list_iterator<ZinIrOpLayer *,void *>,std::__list_iterator<ZinIrOpLayer *,void *>>(a2, *(char **)(a2 + 8), v8, &v7, v4);
  std::__list_imp<ZinIrSection *>::clear(&v7);
  return v3;
}

void sub_206E58C28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<ZinIrSection *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<ZinANELayer *>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<ZinANELayer *>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

_QWORD *ZinIrScheduleUtil::GetEngineScheduledLayerGroups@<X0>(ZinIrScheduleUtil *this@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6[0] = &off_24C000E78;
  v6[1] = a2;
  v7 = v6;
  v3 = ZinIrControlFlowGraph::TraverseForward(this, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v5 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
LABEL_6:
  if (v3)
    ZinAssertImpl("error in getting scheduled layer groups");
  return result;
}

void sub_206E58D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrScheduleUtil *this@<X0>, const ZinIrOpLayerGraph *a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  uint64_t v6;
  ZinIrOpLayer **v7;
  ZinIrOpLayer **v8;
  ZinANELayer *v9;
  ZinBondedInfo *BondedInfo;
  ZinANELayer **v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  ZinANELayer **v16;
  ZinANELayer **v17;
  ZinANELayer *v18;
  ZinANELayer **v19;
  ZinANELayer **v20;
  ZinANELayer **v21;
  ZinANELayer *v22;
  ZinANELayer **v23;
  ZinANELayer *v24;
  ZinANELayer *v25;
  ZinANELayer *v26;
  char **v27;
  void **v28;
  ZinANELayer **v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  ZinANELayer **v43;
  ZinANELayer **v44;
  ZinANELayer **v45;
  void *__p;
  ZinIrOpLayer **v47;
  uint64_t v48;

  v3 = (int)a2;
  v42 = (int)a2;
  std::vector<std::vector<std::vector<ZinANELayer *>>>::vector(a3, (int)a2);
  __p = 0;
  v47 = 0;
  v48 = 0;
  if (!ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::TopologicalSort(this, (uint64_t)&__p))ZinAssertImpl("topological sorting failed");
  if (v3)
  {
    v6 = 0;
    do
    {
      std::vector<std::vector<ZinANELayer *>>::__assign_with_size[abi:ne180100]<std::vector<ZinANELayer *> const*,std::vector<ZinANELayer *> const*>(*a3 + 24 * v6, 0, 0, 0);
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v7 = (ZinIrOpLayer **)__p;
      v8 = v47;
      if (__p != v47)
      {
        do
        {
          v9 = *v7;
          if (ZinIrOpLayer::IsANELayer(*v7))
          {
            BondedInfo = (ZinBondedInfo *)ZinANELayer::GetBondedInfo(v9);
            if (*(_QWORD *)ZinBondedInfo::GetAneIndex(BondedInfo) == v6)
            {
              if (v44 >= v45)
              {
                v12 = v44 - v43;
                if ((unint64_t)(v12 + 1) >> 61)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v13 = ((char *)v45 - (char *)v43) >> 2;
                if (v13 <= v12 + 1)
                  v13 = v12 + 1;
                if ((unint64_t)((char *)v45 - (char *)v43) >= 0x7FFFFFFFFFFFFFF8)
                  v14 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v14 = v13;
                if (v14)
                  v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v45, v14);
                else
                  v15 = 0;
                v16 = (ZinANELayer **)&v15[8 * v12];
                *v16 = v9;
                v11 = v16 + 1;
                v17 = v44;
                if (v44 != v43)
                {
                  do
                  {
                    v18 = *--v17;
                    *--v16 = v18;
                  }
                  while (v17 != v43);
                  v17 = v43;
                }
                v43 = v16;
                v45 = (ZinANELayer **)&v15[8 * v14];
                if (v17)
                  operator delete(v17);
              }
              else
              {
                *v44 = v9;
                v11 = v44 + 1;
              }
              v44 = v11;
            }
          }
          ++v7;
        }
        while (v7 != v8);
        v19 = v43;
        v20 = v44;
        if (v43 != v44)
        {
          v21 = v43 + 1;
          if (v43 + 1 != v44)
          {
            v22 = *v43;
            v23 = v43 + 1;
            do
            {
              v25 = *v23++;
              v24 = v25;
              if (*((_QWORD *)v22 + 6) < *((_QWORD *)v25 + 6))
              {
                v22 = v24;
                v19 = v21;
              }
              v21 = v23;
            }
            while (v23 != v44);
          }
          std::vector<std::vector<ZinANELayer *>>::resize((uint64_t *)(*a3 + 24 * v6), *((_QWORD *)*v19 + 6) + 1);
          v20 = v43;
          if (v43 != v44)
          {
            do
            {
              v26 = *v20;
              v27 = (char **)(*(_QWORD *)(*a3 + 24 * v6) + 24 * *((_QWORD *)*v20 + 6));
              v28 = (void **)(v27 + 1);
              v29 = (ZinANELayer **)v27[1];
              v31 = v27 + 2;
              v30 = (unint64_t)v27[2];
              if ((unint64_t)v29 >= v30)
              {
                v33 = ((char *)v29 - *v27) >> 3;
                if ((unint64_t)(v33 + 1) >> 61)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v34 = v30 - (_QWORD)*v27;
                v35 = v34 >> 2;
                if (v34 >> 2 <= (unint64_t)(v33 + 1))
                  v35 = v33 + 1;
                if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                  v36 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v36 = v35;
                if (v36)
                  v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v31, v36);
                else
                  v37 = 0;
                v38 = &v37[8 * v33];
                *(_QWORD *)v38 = v26;
                v32 = v38 + 8;
                v39 = (char *)*v28;
                v40 = *v27;
                if (*v28 != *v27)
                {
                  do
                  {
                    v41 = *((_QWORD *)v39 - 1);
                    v39 -= 8;
                    *((_QWORD *)v38 - 1) = v41;
                    v38 -= 8;
                  }
                  while (v39 != v40);
                  v39 = *v27;
                }
                *v27 = v38;
                *v28 = v32;
                *v31 = &v37[8 * v36];
                if (v39)
                  operator delete(v39);
              }
              else
              {
                *v29 = v26;
                v32 = v29 + 1;
              }
              *v28 = v32;
              ++v20;
            }
            while (v20 != v44);
            v20 = v43;
          }
        }
        if (v20)
          operator delete(v20);
      }
      ++v6;
    }
    while (v6 != v42);
  }
  if (__p)
  {
    v47 = (ZinIrOpLayer **)__p;
    operator delete(__p);
  }
}

void sub_206E5911C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

_QWORD *ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups@<X0>(ZinIrScheduleUtil *this@<X0>, const ZinIrControlFlowGraph *a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  _QWORD *result;
  uint64_t v7;
  int v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v8 = (int)a2;
  std::vector<std::vector<std::vector<ZinANELayer *>>>::vector(a3, (int)a2);
  v9[0] = &off_24BFF4CC8;
  v9[1] = &v8;
  v9[2] = a3;
  v10 = v9;
  v5 = ZinIrControlFlowGraph::TraverseForward(this, (uint64_t)v9);
  result = v10;
  if (v10 == v9)
  {
    v7 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v7 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
LABEL_6:
  if (v5)
    ZinAssertImpl("error in getting per-ANE scheduled layer groups");
  return result;
}

void sub_206E59248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void ZinIrScheduleUtil::GetOrderedLayers(ZinIrScheduleUtil *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  int8x16_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *v10[3];
  _QWORD **v11;

  ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::GetTopologicalOrderMap(this, (uint64_t)v10);
  std::vector<ZinIrSymbol *>::vector<std::__tree_const_iterator<ZinIrSymbol *,std::__tree_node<ZinIrSymbol *,void *> *,long>,0>(a2, *(_QWORD **)this, (_QWORD *)this + 1);
  v5 = *a2;
  v6 = (int8x16_t *)a2[1];
  v7 = 126 - 2 * __clz(((uint64_t)v6->i64 - *a2) >> 3);
  v8 = v6 == (int8x16_t *)*a2;
  v11 = v10;
  if (v8)
    v9 = 0;
  else
    v9 = v7;
  std::__introsort<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **,false>(v5, v6, (uint64_t *)&v11, v9, 1);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v10, v10[1]);
}

void sub_206E5931C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void ZinIrScheduleUtil::GetOrderedLayersMap(ZinIrScheduleUtil **this@<X0>, uint64_t a2@<X8>)
{
  ZinIrScheduleUtil **v4;
  ZinIrScheduleUtil *v5;
  ZinIrScheduleUtil *Hal;
  uint64_t *v7;
  void *v8;
  ZinIrScheduleUtil *v9;
  ZinIrScheduleUtil **v10;
  BOOL v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v4 = this + 1;
  v5 = *this;
  if (*this != (ZinIrScheduleUtil *)(this + 1))
  {
    do
    {
      Hal = (ZinIrScheduleUtil *)ZinIrTarget::GetHal(*((ZinIrTarget **)v5 + 4));
      ZinIrScheduleUtil::GetOrderedLayers(Hal, (uint64_t *)&v12);
      v14 = (uint64_t *)((char *)v5 + 32);
      v7 = std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<ZinIrOpLayer *>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<ZinIrOpLayer *>>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<ZinIrOpLayer *>>>>::__emplace_unique_key_args<ZinIrBasicBlock *,std::piecewise_construct_t const&,std::tuple<ZinIrBasicBlock * const&>,std::tuple<>>((uint64_t **)a2, (uint64_t *)v5 + 4, (uint64_t)&std::piecewise_construct, &v14);
      v8 = (void *)v7[5];
      if (v8)
      {
        v7[6] = (uint64_t)v8;
        operator delete(v8);
        v7[5] = 0;
        v7[6] = 0;
        v7[7] = 0;
      }
      *(_OWORD *)(v7 + 5) = v12;
      v7[7] = v13;
      v9 = (ZinIrScheduleUtil *)*((_QWORD *)v5 + 1);
      if (v9)
      {
        do
        {
          v10 = (ZinIrScheduleUtil **)v9;
          v9 = *(ZinIrScheduleUtil **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (ZinIrScheduleUtil **)*((_QWORD *)v5 + 2);
          v11 = *v10 == v5;
          v5 = (ZinIrScheduleUtil *)v10;
        }
        while (!v11);
      }
      v5 = (ZinIrScheduleUtil *)v10;
    }
    while (v10 != v4);
  }
}

void sub_206E5943C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;

  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(v10, *(_QWORD **)(v10 + 8));
  _Unwind_Resume(a1);
}

void ZinIrScheduleUtil::GetOrderedLayers(ZinIrScheduleUtil **this@<X0>, _QWORD *a2@<X8>)
{
  char v4[8];
  _QWORD *v5;

  ZinIrScheduleUtil::GetOrderedLayersMap(this, (uint64_t)v4);
  ZinIrScheduleUtil::GetOrderedLayers(v4, a2);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)v4, v5);
}

void sub_206E594B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

char *ZinIrScheduleUtil::GetOrderedLayers@<X0>(char *result@<X0>, _QWORD *a2@<X8>)
{
  char *v2;
  char *v3;
  char *v5;
  char *v6;
  BOOL v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = result + 8;
  v3 = *(char **)result;
  if (*(char **)result != result + 8)
  {
    do
    {
      result = std::vector<ZinGOCLayer const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinGOCLayer const**>,std::__wrap_iter<ZinGOCLayer const**>>((uint64_t)a2, a2[1], *((char **)v3 + 5), *((char **)v3 + 6), (uint64_t)(*((_QWORD *)v3 + 6) - *((_QWORD *)v3 + 5)) >> 3);
      v5 = (char *)*((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v3 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v2);
  }
  return result;
}

void sub_206E59554(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<ZinANELayer *>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<ZinANELayer *>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<ZinIrOpLayer *>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_206E596C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<ZinIrOpLayer *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<std::vector<ZinANELayer *>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_206E59760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<ZinANELayer *>>::__assign_with_size[abi:ne180100]<std::vector<ZinANELayer *> const*,std::vector<ZinANELayer *> const*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<DimensionMapping>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinANELayer *>>,std::vector<ZinANELayer *> const*,std::vector<ZinANELayer *> const*,std::vector<ZinANELayer *>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<DimensionMapping> *,std::vector<DimensionMapping> *,std::vector<DimensionMapping> *>((int)&v20, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinANELayer *>>,std::vector<ZinANELayer *> const*,std::vector<ZinANELayer *> const*,std::vector<ZinANELayer *>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<DimensionMapping> *,std::vector<DimensionMapping> *,std::vector<DimensionMapping> *>((int)&v21, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    v17 = *(_QWORD *)(a1 + 8);
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_206E598EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_206E598F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinANELayer *>>,std::vector<ZinANELayer *> const*,std::vector<ZinANELayer *> const*,std::vector<ZinANELayer *>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinANELayer *>>,std::vector<ZinANELayer *>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_206E59998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinANELayer *>>,std::vector<ZinANELayer *>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **,false>(uint64_t result, int8x16_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  int8x16_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x16_t *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int8x16_t *v49;
  BOOL v50;
  char v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  int64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  int8x16_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  int8x16_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  int64_t v88;
  int8x16_t *v89;
  uint64_t *i64;
  int64_t v91;
  uint64_t v92;

  v9 = (int8x16_t *)result;
LABEL_2:
  v10 = &a2[-1].i64[1];
  v89 = a2;
  i64 = a2[-1].i64;
  v87 = &a2[-2].i64[1];
  v11 = (uint64_t *)v9;
  while (2)
  {
    v9 = (int8x16_t *)v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = ((char *)a2 - (char *)v11) >> 3;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, a2[-1].i64[1], v9->i64[0]);
        if ((_DWORD)result)
        {
          v40 = v9->i64[0];
          v9->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v40;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(v9->i64, &v9->i64[1], v10, a3);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(v9->i64, &v9->i64[1], v9[1].i64, v10, a3);
      case 5:
        v41 = v9[1].i64;
        v42 = &v9[1].i64[1];
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(v9->i64, &v9->i64[1], v9[1].i64, &v9[1].i64[1], a3);
        result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, a2[-1].i64[1], v9[1].i64[1]);
        if ((_DWORD)result)
        {
          v43 = *v42;
          *v42 = a2[-1].i64[1];
          a2[-1].i64[1] = v43;
          result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, *v42, *v41);
          if ((_DWORD)result)
          {
            v44 = *v41;
            v45 = *v42;
            *v41 = *v42;
            *v42 = v44;
            result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v45, v9->i64[1]);
            if ((_DWORD)result)
            {
              v47 = v9->i64[1];
              v46 = v9[1].i64[0];
              v48 = v9->i64[0];
              v9->i64[1] = v46;
              v9[1].i64[0] = v47;
              result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v46, v48);
              if ((_DWORD)result)
                *v9 = vextq_s8(*v9, *v9, 8uLL);
            }
          }
        }
        return result;
      default:
        if (v12 <= 191)
        {
          v49 = (int8x16_t *)&v9->u64[1];
          v50 = v9 == a2 || v49 == a2;
          v51 = v50;
          if ((a5 & 1) != 0)
          {
            if ((v51 & 1) == 0)
            {
              v52 = 0;
              v53 = (uint64_t *)v9;
              do
              {
                v55 = *v53;
                v54 = v53[1];
                v53 = (uint64_t *)v49;
                result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v54, v55);
                if ((_DWORD)result)
                {
                  v56 = *v53;
                  v57 = v52;
                  while (1)
                  {
                    *(uint64_t *)((char *)&v9->i64[1] + v57) = *(uint64_t *)((char *)v9->i64 + v57);
                    if (!v57)
                      break;
                    result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v56, *(uint64_t *)((char *)&v9->i64[-1] + v57));
                    v57 -= 8;
                    if ((result & 1) == 0)
                    {
                      v58 = (uint64_t *)((char *)&v9->i64[1] + v57);
                      goto LABEL_78;
                    }
                  }
                  v58 = (uint64_t *)v9;
LABEL_78:
                  *v58 = v56;
                }
                v49 = (int8x16_t *)(v53 + 1);
                v52 += 8;
              }
              while (v53 + 1 != (uint64_t *)a2);
            }
          }
          else if ((v51 & 1) == 0)
          {
            do
            {
              v82 = v9->i64[0];
              v81 = v9->i64[1];
              v9 = v49;
              result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v81, v82);
              if ((_DWORD)result)
              {
                v83 = v9->i64[0];
                v84 = (uint64_t *)v9;
                do
                {
                  v85 = v84;
                  v86 = *--v84;
                  *v85 = v86;
                  result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v83, *(v85 - 2));
                }
                while ((result & 1) != 0);
                *v84 = v83;
              }
              v49 = (int8x16_t *)&v9->u64[1];
            }
            while (&v9->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v59 = (unint64_t)(v13 - 2) >> 1;
            v91 = v59;
            do
            {
              v60 = v59;
              if (v91 >= v59)
              {
                v61 = (2 * v59) | 1;
                v62 = &v9->i64[v61];
                if (2 * v59 + 2 < v13
                  && ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, *v62, v62[1]))
                {
                  ++v62;
                  v61 = 2 * v60 + 2;
                }
                v63 = &v9->i64[v60];
                result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, *v62, *v63);
                if ((result & 1) == 0)
                {
                  v88 = v60;
                  v64 = *v63;
                  do
                  {
                    v65 = v62;
                    *v63 = *v62;
                    if (v91 < v61)
                      break;
                    v66 = (2 * v61) | 1;
                    v62 = &v9->i64[v66];
                    if (2 * v61 + 2 < v13
                      && ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, *v62, v62[1]))
                    {
                      ++v62;
                      v66 = 2 * v61 + 2;
                    }
                    result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, *v62, v64);
                    v63 = v65;
                    v61 = v66;
                  }
                  while (!(_DWORD)result);
                  *v65 = v64;
                  v60 = v88;
                  a2 = v89;
                }
              }
              v59 = v60 - 1;
            }
            while (v60);
            v67 = (unint64_t)v12 >> 3;
            do
            {
              v68 = a2;
              v69 = 0;
              v92 = v9->i64[0];
              v70 = (uint64_t *)v9;
              do
              {
                v71 = &v70[v69 + 1];
                v72 = (2 * v69) | 1;
                v73 = 2 * v69 + 2;
                if (v73 < v67)
                {
                  result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, *v71, v70[v69 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v71;
                    v72 = v73;
                  }
                }
                *v70 = *v71;
                v70 = v71;
                v69 = v72;
              }
              while (v72 <= (uint64_t)((unint64_t)(v67 - 2) >> 1));
              a2 = (int8x16_t *)((char *)v68 - 8);
              if (v71 == (uint64_t *)&v68[-1].u64[1])
              {
                *v71 = v92;
              }
              else
              {
                *v71 = a2->i64[0];
                a2->i64[0] = v92;
                v74 = (char *)v71 - (char *)v9 + 8;
                if (v74 >= 9)
                {
                  v75 = (((unint64_t)v74 >> 3) - 2) >> 1;
                  v76 = &v9->i64[v75];
                  result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, *v76, *v71);
                  if ((_DWORD)result)
                  {
                    v77 = (int8x16_t *)((char *)v68 - 8);
                    v78 = *v71;
                    do
                    {
                      v79 = v76;
                      *v71 = *v76;
                      if (!v75)
                        break;
                      v75 = (v75 - 1) >> 1;
                      v76 = &v9->i64[v75];
                      result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, *v76, v78);
                      v71 = v79;
                    }
                    while ((result & 1) != 0);
                    *v79 = v78;
                    a2 = v77;
                  }
                }
              }
            }
            while (v67-- > 2);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &v9->i64[(unint64_t)v13 >> 1];
        if ((unint64_t)v12 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(v15, v9->i64, v10, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(v9->i64, v15, v10, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(&v9->i64[1], v15 - 1, i64, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(v9[1].i64, &v9->i64[v14 + 1], v87, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(v15 - 1, v15, &v9->i64[v14 + 1], a3);
          v16 = v9->i64[0];
          v9->i64[0] = *v15;
          *v15 = v16;
        }
        --a4;
        if ((a5 & 1) == 0
          && !ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v9[-1].i64[1], v9->i64[0]))
        {
          v31 = v9->i64[0];
          result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v9->i64[0], *v10);
          if ((result & 1) != 0)
          {
            v11 = (uint64_t *)v9;
            do
            {
              v32 = v11[1];
              ++v11;
              result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v31, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v33 = &v9->i64[1];
            do
            {
              v11 = v33;
              if (v33 >= (uint64_t *)a2)
                break;
              ++v33;
              result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v31, *v11);
            }
            while (!(_DWORD)result);
          }
          v34 = (uint64_t *)a2;
          if (v11 < (uint64_t *)a2)
          {
            v34 = (uint64_t *)a2;
            do
            {
              v35 = *--v34;
              result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v31, v35);
            }
            while ((result & 1) != 0);
          }
          while (v11 < v34)
          {
            v36 = *v11;
            *v11 = *v34;
            *v34 = v36;
            do
            {
              v37 = v11[1];
              ++v11;
            }
            while (!ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v31, v37));
            do
            {
              v38 = *--v34;
              result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v31, v38);
            }
            while ((result & 1) != 0);
          }
          v39 = v11 - 1;
          if (v11 - 1 != (uint64_t *)v9)
            v9->i64[0] = *v39;
          a5 = 0;
          *v39 = v31;
          continue;
        }
        v17 = 0;
        v18 = v9->i64[0];
        while (ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v9->i64[++v17], v18))
          ;
        v20 = &v9->i64[v17];
        v21 = (uint64_t *)v89;
        v50 = v17 == 1;
        a2 = v89;
        if (v50)
        {
          v21 = (uint64_t *)v89;
          do
          {
            if (v20 >= v21)
              break;
            v23 = *--v21;
          }
          while (!ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v23, v18));
        }
        else
        {
          do
            v22 = *--v21;
          while (!ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v22, v18));
        }
        if (v20 >= v21)
        {
          v29 = (int8x16_t *)(v20 - 1);
        }
        else
        {
          v24 = v20;
          v25 = v21;
          do
          {
            v26 = *v24;
            *v24 = *v25;
            *v25 = v26;
            do
            {
              v27 = v24[1];
              ++v24;
            }
            while (ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v27, v18));
            do
              v28 = *--v25;
            while (!ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v28, v18));
          }
          while (v24 < v25);
          v29 = (int8x16_t *)(v24 - 1);
          a2 = v89;
        }
        if (v29 != v9)
          v9->i64[0] = v29->i64[0];
        v29->i64[0] = v18;
        if (v20 < v21)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **,false>(v9, v29, a3, a4, a5 & 1);
          a5 = 0;
          v11 = &v29->i64[1];
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(v9, v29, a3);
        v11 = &v29->i64[1];
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>((int8x16_t *)&v29->u64[1], a2, a3);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_32;
        }
        a2 = v29;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v15 = a3;
  v16 = a2;
  v3 = *(_QWORD *)(a2 + 48);
  if (a2 == a3)
  {
    v4 = *(_QWORD *)(a2 + 48);
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 48);
    if (v3 == v4)
    {
      v6 = *a1;
      if ((_QWORD *)(v6 + 8) == std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(*a1, &v16))
      {
        v13 = v16;
      }
      else
      {
        v7 = *a1;
        if ((_QWORD *)(v7 + 8) != std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(*a1, &v15))
        {
          v8 = (uint64_t **)*a1;
          v17 = &v16;
          v9 = std::__tree<std::__value_type<ZinIrOpLayer *,long>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,long>,ZinIrIdComparator<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,long>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(v8, &v16, (uint64_t)&std::piecewise_construct, &v17)[5];
          v10 = (uint64_t **)*a1;
          v17 = &v15;
          return v9 < std::__tree<std::__value_type<ZinIrOpLayer *,long>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,long>,ZinIrIdComparator<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,long>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(v10, &v15, (uint64_t)&std::piecewise_construct, &v17)[5];
        }
        v13 = v15;
      }
      v14 = (const char *)(v13 + 24);
      if (*(char *)(v13 + 47) < 0)
        v14 = *(const char **)v14;
      ZinAssertImpl("Error: layer (%s) not found in topologically sorted list.", v14);
    }
  }
  return v3 < v4;
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a4, *a2, *a1);
  result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a4, *a3, *a2);
  if (v8)
  {
    v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a4, *a3, v10);
      if (result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a4, *a2, *a1);
    if (result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(int8x16_t *a1, int8x16_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int8 *v15;
  uint64_t *v16;
  uint64_t *i64;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, a2[-1].i64[1], a1->i64[0]))
      {
        v8 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(a1->i64, &a1->i64[1], &a2[-1].i64[1], a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(a1->i64, &a1->i64[1], a1[1].i64, &a2[-1].i64[1], a3);
      return 1;
    case 5:
      i64 = a1[1].i64;
      v18 = &a1[1].i64[1];
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], a3);
      if (ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, a2[-1].i64[1], a1[1].i64[1]))
      {
        v19 = *v18;
        *v18 = a2[-1].i64[1];
        a2[-1].i64[1] = v19;
        if (ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, *v18, *i64))
        {
          v20 = *i64;
          v21 = *v18;
          *i64 = *v18;
          *v18 = v20;
          if (ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v21, a1->i64[1]))
          {
            v23 = a1->i64[1];
            v22 = a1[1].i64[0];
            v24 = a1->i64[0];
            a1->i64[1] = v22;
            a1[1].i64[0] = v23;
            if (ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v22, v24))
              *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    default:
      v9 = a1[1].i64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(a1->i64, &a1->i64[1], a1[1].i64, a3);
      v10 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, *v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = &a1->i8[v14];
        *(uint64_t *)((char *)&a1[1].i64[1] + v14) = *(uint64_t *)((char *)a1[1].i64 + v14);
        if (v14 == -16)
          break;
        v14 -= 8;
        if (!ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v13, *((_QWORD *)v15 + 1)))
        {
          v16 = (uint64_t *)((char *)&a1[1].i64[1] + v14);
          goto LABEL_13;
        }
      }
      v16 = (uint64_t *)a1;
LABEL_13:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == (uint64_t *)a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == (uint64_t *)a2)
      return 1;
  }
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(a1, a2, a3, a5);
  result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a5, *a4, *a3);
  if (result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a5, *a3, *a2);
    if (result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a5, *a2, *a1);
      if (result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

void std::__function::__func<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0,std::allocator<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0,std::allocator<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C000E78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0,std::allocator<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C000E78;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0,std::allocator<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::operator()(uint64_t a1, ZinIrTarget **a2)
{
  ZinIrScheduleUtil *Hal;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  Hal = (ZinIrScheduleUtil *)ZinIrTarget::GetHal(*a2);
  ZinIrScheduleUtil::GetEngineScheduledLayerGroups(Hal, &v5);
  std::vector<std::vector<ZinANELayer *>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<ZinANELayer *>*>,std::__wrap_iter<std::vector<ZinANELayer *>*>>(*(uint64_t **)(a1 + 8), *(__n128 **)(*(_QWORD *)(a1 + 8) + 8), v5, v6, 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3));
  v7 = (void **)&v5;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&v7);
  return 0;
}

void sub_206E5A708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0,std::allocator<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0,std::allocator<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target_type()
{
}

__n128 *std::vector<std::vector<ZinANELayer *>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<ZinANELayer *>*>,std::__wrap_iter<std::vector<ZinANELayer *>*>>(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 3)) >= a5)
      {
        v21 = a3 + 24 * a5;
      }
      else
      {
        v21 = a3 + 8 * ((uint64_t)(v12 - (_QWORD)a2) >> 3);
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinANELayer *>>,std::vector<ZinANELayer *>*,std::vector<ZinANELayer *>*,std::vector<ZinANELayer *>*>(v9, v21, a4, *(_QWORD **)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<std::vector<DimensionMapping>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)v5 + 24 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<DimensionMapping> *,std::vector<DimensionMapping> *,std::vector<DimensionMapping> *>((int)&v23, a3, v21, (char *)v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      v27 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9, v18);
      else
        v19 = 0;
      v23 = v19;
      v24 = &v19[24 * v15];
      v25 = v24;
      v26 = &v19[24 * v18];
      std::__split_buffer<std::vector<DimensionMapping>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<DimensionMapping>*>>(&v23, a3, a5);
      v5 = (__n128 *)std::vector<std::vector<ZinANELayer *>>::__swap_out_circular_buffer(a1, &v23, v5);
      std::__split_buffer<std::vector<ZinIrOpLayer *>>::~__split_buffer((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_206E5A90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<ZinANELayer *>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<ZinANELayer *>>,std::reverse_iterator<std::vector<ZinANELayer *>*>,std::reverse_iterator<std::vector<ZinANELayer *>*>,std::reverse_iterator<std::vector<ZinANELayer *>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (_QWORD *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<ZinANELayer *>>,std::vector<ZinANELayer *>*,std::vector<ZinANELayer *>*,std::vector<ZinANELayer *>*>(v7, (uint64_t)a3, a1[1], (_QWORD *)a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

_QWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<ZinANELayer *>>,std::vector<ZinANELayer *>*,std::vector<ZinANELayer *>*,std::vector<ZinANELayer *>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD v6[3];
  char v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = a4;
  v9 = a4;
  v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)v4 = *(_OWORD *)a2;
      v4[2] = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v4 += 3;
      a2 += 24;
    }
    while (a2 != a3);
    v9 = v4;
  }
  v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinANELayer *>>,std::vector<ZinANELayer *>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

void std::__function::__func<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0,std::allocator<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0,std::allocator<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24BFF4CC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0,std::allocator<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFF4CC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0,std::allocator<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::operator()(uint64_t a1, ZinIrTarget **a2)
{
  ZinIrScheduleUtil *Hal;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  Hal = (ZinIrScheduleUtil *)ZinIrTarget::GetHal(*a2);
  ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(Hal, (const ZinIrOpLayerGraph *)**(unsigned int **)(a1 + 8), &v8);
  v4 = v8;
  if (v9 != v8)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::vector<ZinANELayer *> *>,std::__wrap_iter<std::vector<ZinANELayer *> *>,std::back_insert_iterator<std::vector<std::vector<ZinANELayer *>>>,0>(*(_QWORD *)(v4 + v5), *(_QWORD *)(v4 + v5 + 8), (uint64_t *)(v5 + **(_QWORD **)(a1 + 16)));
      ++v6;
      v4 = v8;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3));
  }
  v10 = (void **)&v8;
  std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  return 0;
}

void sub_206E5AB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0,std::allocator<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0,std::allocator<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target_type()
{
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::vector<ZinANELayer *> *>,std::__wrap_iter<std::vector<ZinANELayer *> *>,std::back_insert_iterator<std::vector<std::vector<ZinANELayer *>>>,0>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<std::vector<ZinANELayer *>>>::operator=[abi:ne180100](&v6, v3);
    v3 += 24;
  }
  while (v3 != v4);
  return v4;
}

uint64_t **std::back_insert_iterator<std::vector<std::vector<ZinANELayer *>>>::operator=[abi:ne180100](uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = *a1;
  v5 = (*a1)[1];
  v4 = (*a1)[2];
  v6 = *a1;
  if (v5 >= v4)
  {
    v7 = std::vector<std::vector<ZinANELayer *>>::__push_back_slow_path<std::vector<ZinANELayer *> const&>(v6, a2);
  }
  else
  {
    std::vector<std::vector<DimensionMapping>>::__construct_one_at_end[abi:ne180100]<std::vector<DimensionMapping> const&>((uint64_t)v6, a2);
    v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

uint64_t ZinMirConvUtils::Validate3DConvProgrammingConstraints(int64x2_t *a1, int *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t NumOutputChannelsPerAccumulator;
  uint64_t v9;
  uint64_t NumRequiredAccumulatorsPerDepthSubChannel;
  int v11;
  int32x2_t v13;
  int v14;

  v2 = a1->i64[0];
  if (a1->i64[0] == 1)
    return 0;
  v6 = a1[1].u64[1];
  v13.i32[0] = 0;
  v7 = (v2 % v6 + v2) / v6;
  NumOutputChannelsPerAccumulator = ZinNEPerfUtils::GetNumOutputChannelsPerAccumulator((uint64_t)a2, &v13, (int64x2_t *)a1[1].i32, a1[3].i32[2], a1[3].i8[13]);
  v9 = a1->i64[1];
  v13 = vmovn_s64(a1[2]);
  v14 = a1[3].i64[0];
  NumRequiredAccumulatorsPerDepthSubChannel = ZinNEPerfUtils::GetNumRequiredAccumulatorsPerDepthSubChannel((int *)&v13, v9, NumOutputChannelsPerAccumulator, 1uLL);
  v11 = a1[3].u8[12];
  v3 = 3;
  if ((NumRequiredAccumulatorsPerDepthSubChannel * v7) << v11 <= (unint64_t)a2[4])
  {
    if (a1->i64[1] <= ComputeMaxOcg((const ZinIrHalParameters *)a2, NumRequiredAccumulatorsPerDepthSubChannel, v7, NumOutputChannelsPerAccumulator, a1[2].i64[0], a1[2].i64[1], a1[3].i64[0], v11 != 0))return 0;
    else
      return 3;
  }
  return v3;
}

unint64_t ComputeMaxOcg(const ZinIrHalParameters *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  _BOOL4 HasAccDoubleBuffering;
  unint64_t Pow2;
  unint64_t v17;
  int v19;

  v19 = 0;
  HasAccDoubleBuffering = ZinNEPerfUtils::HasAccDoubleBuffering((uint64_t)&v19, (uint64_t)a1, a3, a2, a8);
  Pow2 = ZinRoundDownToNextPow2(*((int *)a1 + 4) / ((a3 + (unint64_t)HasAccDoubleBuffering) << a8));
  v17 = a6 * a5 * a7;
  if (v17 <= Pow2 * a4)
    return Pow2 * a4 / v17;
  else
    return 1;
}

uint64_t ZinMirConvUtils::CheckForHWLimits(uint64_t a1, uint64_t a2, unsigned int a3, int8x16_t *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, unint64_t a9, uint64_t *a10, char a11, char a12, unint64_t a13, char a14)
{
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  int v25;
  _BOOL4 v26;
  unint64_t v27;
  int v28;
  __int128 v30;
  int v31;
  int64x2_t v33;
  unsigned int v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  char v39;
  char v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  int64x2_t v50;
  int8x16_t v51;
  uint64_t v52;
  int64x2_t v53;
  int64x2_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  __int128 v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;

  v18 = a3;
  v19 = *a10;
  v47 = 0u;
  v48 = 0u;
  v20 = a4[1].i64[0];
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v41 = 0;
  v42 = 0;
  v50 = vdupq_n_s64(1uLL);
  v51 = vextq_s8(*a4, *a4, 8uLL);
  v49 = 0;
  v52 = v20;
  v53 = v50;
  v54 = v50;
  v21 = *(_QWORD *)a5;
  v22 = *(_DWORD *)(a5 + 8);
  v55 = 1;
  v56 = v21;
  v58 = *(_QWORD *)a6;
  LODWORD(v21) = a6[2];
  v57 = v22;
  v59 = v21;
  v60 = *(_OWORD *)a7;
  v61 = *(_QWORD *)(a7 + 16);
  v62 = *a8;
  v63 = xmmword_207AA1730;
  v64 = 1;
  v65 = 0;
  v70 = 0;
  v66 = 1;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  if (*(_BYTE *)(v19 + 1148))
  {
    v23 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)(a1 + 8) == v23 && v23 == a9)
      v25 = 1;
    else
      v25 = 2;
    if (a9 == 1)
      v25 = 0;
    if (v25 == 2)
      v26 = v23 / a9 == 1;
    else
      v26 = v25 == 1;
  }
  else
  {
    v26 = 0;
  }
  v27 = a13;
  v28 = ZinMirConvUtils::ComputeSmallSourceMode(v19, a3, (int *)&v41, a2, a11, v26, a12, 0, 0x10uLL);
  if (a14
    && a13 > ZinMirConvUtils::ComputeMaxOcgSize(v18, (uint64_t)a4, a5, a6, a7, v19, v28, 0, 0, 0, *(_BYTE *)(a10[1] + 376)))
  {
    return 3;
  }
  if (a4[1].i64[0] == 1)
    return 0;
  if (IsFormatDMAConvertibleToFP16(v18))
    v18 = 3;
  v33.i64[0] = details::ZinGetProgrammedKernelDimension(*(int *)(a5 + 8), a6[2], a4[1].i64[0], *(_DWORD *)(a7 + 16));
  v35 = *(int *)(a5 + 8);
  *(_QWORD *)&v30 = (int)*(_QWORD *)a6;
  *((_QWORD *)&v30 + 1) = (int)HIDWORD(*(_QWORD *)a6);
  v36 = v30;
  v37 = a6[2];
  v34 = v18;
  v40 = 0;
  if (!a14)
    v27 = ZinMirConvUtils::ComputeOcgSize((uint64_t)a4, a5, a6, a7, a9, v19, a2, v18, v26, v28, 0, v31, 0, 0, *(_BYTE *)(a10[1] + 376));
  v33.i64[1] = v27;
  v38 = v28;
  v39 = 0;
  return ZinMirConvUtils::Validate3DConvProgrammingConstraints(&v33, (int *)v19);
}

BOOL ZinMirConvUtils::UsesUnicast(ZinMirConvUtils *this, const ZinIrHalParameters *a2, const ZinIrHalParameters *a3, const ZinIrHalParameters *a4)
{
  int v5;

  if (!*((_BYTE *)this + 1148))
    return 0;
  if (a3 == a4 && a2 == a3)
    v5 = 1;
  else
    v5 = 2;
  if (a4 == (const ZinIrHalParameters *)1)
    v5 = 0;
  if (v5 == 2)
    return (unint64_t)a3 / (unint64_t)a4 == 1;
  else
    return v5 == 1;
}

uint64_t ZinMirConvUtils::ComputeSmallSourceMode(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, char a5, int a6, char a7, char a8, unint64_t a9)
{
  unint64_t ProgrammedOutputTensorDimension;
  unint64_t v18;

  ProgrammedOutputTensorDimension = details::ZinGetProgrammedOutputTensorDimension(*(_QWORD *)(a4 + 24), a3[38], a3[41]);
  v18 = details::ZinGetProgrammedOutputTensorDimension(*(_QWORD *)(a4 + 16), a3[39], a3[42]);
  return ZinMirConvUtils::ComputeSmallSourceMode(a1, a2, (uint64_t)a3, v18, ProgrammedOutputTensorDimension, a5, a6, a7, a8, a9);
}

unint64_t ZinMirConvUtils::ComputeMaxOcgSize(unsigned int a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, int a7, char a8, char a9, int a10, char a11)
{
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t NumOutputChannelsPerAccumulator;
  unint64_t Pow2;
  unint64_t result;
  int v26;
  unsigned int v27;

  v27 = a1;
  if (a11)
    v17 = 0;
  else
    v17 = a7;
  if (v17 == 1)
  {
    v18 = a4[2];
    v19 = *(_QWORD *)(a6 + 856) / (unint64_t)(a4[1] * *a4 * v18);
  }
  else
  {
    if (!IsPrimaryFormat(a1) && (IsFormatDMAConvertibleToFP16(a1) & 1) == 0)
      ZinAssertImpl("Error: NEConv's input format is invalid to compute MaxOcgSize.");
    v18 = a4[2];
    if (a1 == 3)
      v21 = *(_QWORD *)(a6 + 864);
    else
      v21 = *(_QWORD *)(a6 + 872);
    v19 = v21 / (a4[1] * *a4 * v18);
  }
  v22 = details::ZinIrSubchannelKernelDimension(*(int *)(a3 + 8), v18, *(_QWORD *)(a2 + 16), *(_DWORD *)(a5 + 16));
  v26 = 0;
  NumOutputChannelsPerAccumulator = ZinNEPerfUtils::GetNumOutputChannelsPerAccumulator(a6, &v26, &v27, v17, a9);
  Pow2 = ZinRoundDownToNextPow2((unint64_t)(float)((float)(*(int *)(a6 + 16) >> a8) / (float)v22));
  result = ComputeMaxOcg((const ZinIrHalParameters *)a6, Pow2, v22, NumOutputChannelsPerAccumulator, *a4, a4[1], a4[2], a8);
  if (result >= v19)
    return v19;
  return result;
}

unint64_t ZinMirConvUtils::ComputeOcgSize(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, char a9, int a10, char a11, int a12, char a13, int a14, char a15)
{
  unint64_t result;
  unint64_t v19;

  result = ZinMirConvUtils::ComputeMaxOcgSize(a8, a1, a2, a3, a4, a6, a10, a11, a13, 0, a15);
  if (a5 == 1)
  {
    if (result >= (*(_QWORD *)(a7 + 8) + *(int *)(a6 + 8) - 1) / *(int *)(a6 + 8))
      return (*(_QWORD *)(a7 + 8) + *(int *)(a6 + 8) - 1) / *(int *)(a6 + 8);
  }
  else if ((a9 & 1) != 0)
  {
    return 1;
  }
  else
  {
    v19 = ((a5 + *(_QWORD *)(a7 + 8) - 1) / a5 + *(int *)(a6 + 8) - 1) / *(int *)(a6 + 8);
    if ((int)result < (int)v19)
      LODWORD(v19) = result;
    return (int)v19;
  }
  return result;
}

BOOL ZinMirConvUtils::IsValidShPrefForTinySourceMode(ZinMirConvUtils *this, const ZinIrHalParameters *a2, unint64_t a3)
{
  unint64_t Pow2;
  unint64_t v7;

  if ((unint64_t)a2 < 2)
    return 0;
  Pow2 = ZinRoundDownToNextPow2((unint64_t)a2 - 1);
  v7 = *((_QWORD *)this + 97);
  if (v7 >= Pow2)
    v7 = Pow2;
  return v7 >= a3;
}

uint64_t ZinMirConvUtils::ComputeSmallSourceMode(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, char a6, int a7, char a8, char a9, unint64_t a10)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t ProgrammedKernelDimension;
  int v25;
  int v26;
  unint64_t Pow2;
  unint64_t v28;
  char v29;
  int32x4_t v30;

  result = 0;
  if ((a8 & 1) != 0 || (a9 & 1) != 0)
    return result;
  v16 = *(_QWORD *)(a3 + 88);
  v15 = *(_QWORD *)(a3 + 96);
  v17 = *(_QWORD *)(a3 + 104);
  if (a7 && !*(_BYTE *)(a1 + 1144) || !*(_BYTE *)(a1 + 1142) && (a6 & 1) != 0)
    return 0;
  if (!*(_BYTE *)(a1 + 1143))
  {
    result = 0;
    if (*(_DWORD *)(a3 + 164) != 1 || *(_DWORD *)(a3 + 168) != 1 || *(_DWORD *)(a3 + 172) != 1)
      return result;
  }
  v18 = *(unint64_t **)(a1 + 792);
  v19 = *(unint64_t **)(a1 + 800);
  if (v18 == v19)
    return 0;
  while (1)
  {
    v20 = *v18;
    if (*v18 >= a5)
    {
      v21 = v18[1];
      if (v21 >= a4)
        break;
    }
    v18 += 2;
    if (v18 == v19)
      return 0;
  }
  ProgrammedKernelDimension = details::ZinGetProgrammedKernelDimension(*(int *)(a3 + 152), *(int *)(a3 + 164), *(_QWORD *)(a3 + 96), *(_DWORD *)(a3 + 176));
  if ((v21 != 8 || v20 != 8) && ProgrammedKernelDimension <= 8)
  {
    result = 0;
    if (*(_DWORD *)(a3 + 164) != 1)
      return result;
    if (*(_DWORD *)(a3 + 168) != 1)
      return result;
    result = 0;
    v25 = *(_DWORD *)(a3 + 200);
    if (v25 == 6 || v15 != 1 || v16 != 1 || *(_DWORD *)(a3 + 172) != 1 || v25 == 3)
      return result;
    goto LABEL_34;
  }
  if (ProgrammedKernelDimension > 8)
    return 0;
  if (!*(_BYTE *)(a1 + 1133))
    return 1;
  if (a2 == 3)
    LOBYTE(v26) = 0;
  else
    v26 = IsFormatDMAConvertibleToFP16(a2) ^ 1;
  if (a10 < 2)
    return 1;
LABEL_34:
  Pow2 = ZinRoundDownToNextPow2(a10 - 1);
  v28 = *(_QWORD *)(a1 + 776);
  if (v28 >= Pow2)
    v28 = Pow2;
  v29 = v28 < a4 ? 1 : v26;
  if ((v29 & 1) != 0)
    return 1;
  result = 1;
  if (v15 == 1 && v16 == 1 && v17 == 1)
  {
    v30.i64[0] = 0x100000001;
    v30.i64[1] = 0x100000001;
    if (((*(_DWORD *)(a3 + 168) == 1) & ~vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(a3 + 152), v30)))) & (*(_DWORD *)(a3 + 172) == 1)) != 0)
      return 2;
    else
      return 1;
  }
  return result;
}

BOOL ZinMirConvUtils::CanUseWinogradMode(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unsigned int a7, int a8, unsigned __int8 a9, int a10, char a11, int a12, char a13, char a14, char a15, unint64_t a16, char a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 result;
  int UnderlyingType;
  int v29;
  char v30;
  int v31;
  uint64_t v32;
  char v34;
  unint64_t v35;
  int v37;
  int v38;
  unint64_t v39;
  BOOL v40;
  int v41;
  int v42;
  char v43;
  _QWORD v45[3];

  v17 = *a1;
  v19 = *(_QWORD *)(a6 + 88);
  v18 = *(_QWORD *)(a6 + 96);
  v45[0] = v18;
  v45[1] = v19;
  v20 = *(_QWORD *)(a6 + 104);
  v45[2] = v20;
  if ((a15 & 1) != 0)
    return 0;
  result = 0;
  if (a7 != 12)
  {
    if (*(_BYTE *)(v17 + 1600))
    {
      v43 = *(_BYTE *)(a6 + 272);
      UnderlyingType = ZinKernelFormatGetUnderlyingType(*(_DWORD *)a6);
      result = 0;
      if (UnderlyingType != 5 && !a11)
      {
        if (ZinKernelFormatGetUnderlyingType(*(_DWORD *)a6) != 2
          && !ZinKernelFormatIsUnity(*(_DWORD *)a6))
        {
          v29 = IsFloatFormat(a7);
          if (a8)
          {
            result = 0;
            if ((a8 - 5) < 0xFFFFFFFE)
              v30 = 1;
            else
              v30 = v29;
            if ((v30 & 1) != 0 || (v43 & 2) != 0)
              return result;
            goto LABEL_18;
          }
          if ((v43 & 2) == 0)
          {
LABEL_18:
            if (a7 == 3)
              v31 = 1;
            else
              v31 = a9;
            if (v31 == 1 && a14 && !a13)
              return 0;
            v42 = v29;
            if (details::ZinIrSubchannelKernelDimension(*(int *)(a6 + 152), *(int *)(a6 + 164), v18, *(_DWORD *)(a6 + 176)) != 3)return 0;
            if (details::ZinIrSubchannelKernelDimension(*(int *)(a6 + 156), *(int *)(a6 + 168), v19, *(_DWORD *)(a6 + 184)) > 5)return 0;
            v32 = details::ZinIrSubchannelKernelDimension(*(int *)(a6 + 160), *(int *)(a6 + 172), v20, *(_DWORD *)(a6 + 192));
            if (v32 != 1 && (a9 & 1) != 0)
              return 0;
            v34 = *(_BYTE *)(v17 + 1148);
            if (v34)
            {
              v35 = *(_QWORD *)(a4 + 8);
              if (*(_QWORD *)(a3 + 8) == v35 && v35 == a5)
                v37 = 1;
              else
                v37 = 2;
              if (a5 == 1)
                v37 = 0;
              v38 = a8;
              if (v37 == 2)
                v34 = v35 / a5 == 1;
              else
                v34 = v37 == 1;
            }
            else
            {
              v38 = a8;
            }
            if (!a17)
            {
              a16 = ZinMirConvUtils::ComputeOcgSize((uint64_t)v45, a6 + 152, (int *)(a6 + 164), a6 + 176, a5, v17, a4, a7, v34, v38, 1, v41, 0, 0, *(_BYTE *)(a1[1] + 376));
              v38 = a8;
            }
            v39 = 2 * v32 * a16 * *(int *)(a6 + 164) * *(int *)(a6 + 168) * *(int *)(a6 + 172);
            if ((v38 - 1) > 1)
            {
              if (v42)
                v40 = v39 >= 0x11;
              else
                v40 = v39 >= 9;
            }
            else
            {
              v40 = v39 >= 0x21;
            }
            return !v40;
          }
        }
        return 0;
      }
    }
  }
  return result;
}

BOOL ZinMirConvUtils::IsChannelwiseConvolution(ZinMirConvUtils *this, ZinMirConvUtils *a2, ZinMirConvUtils *a3)
{
  return this == a2 && a2 == a3;
}

BOOL ZinMirConvUtils::CheckFor3DMathHWBug(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, char a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ProgrammedKernelDimension;
  uint64_t ProgrammedPadDimension;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t NumOutputChannelsPerAccumulator;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL8 result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v61;
  int v62;
  unsigned int v63[3];

  v63[0] = a3;
  if (!*(_BYTE *)(a5 + 1899))
    return 1;
  v10 = *(_QWORD *)(a4 + 104);
  v49 = *(_QWORD *)(a4 + 96);
  v57 = *(_QWORD *)(a4 + 88);
  v11 = *(_QWORD *)(a1 + 32);
  v61 = *(_QWORD *)(a1 + 8);
  v46 = *(_QWORD *)(a2 + 8);
  v50 = *(_QWORD *)(a2 + 32);
  v12 = *(int *)(a4 + 152);
  v59 = *(int *)(a4 + 156);
  v13 = *(int *)(a4 + 160);
  v14 = *(int *)(a4 + 172);
  v56 = *(int *)(a4 + 168);
  v52 = *(_DWORD *)(a4 + 176);
  v54 = *(int *)(a4 + 164);
  v55 = *(_DWORD *)(a4 + 184);
  v15 = *(int *)(a4 + 192);
  ProgrammedKernelDimension = details::ZinGetProgrammedKernelDimension(v13, v14, v10, *(_DWORD *)(a4 + 192));
  ProgrammedPadDimension = details::ZinGetProgrammedPadDimension(v13, v14, v15);
  v18 = 3;
  if (v11 > 3)
    v18 = v11;
  v19 = 2 - v18;
  v47 = ProgrammedKernelDimension;
  v20 = ProgrammedKernelDimension == 3 && v13 == 1;
  v58 = v11;
  v21 = (ProgrammedPadDimension + v11) % v13 + v11 + (int)v15 % (int)v13;
  if (v20)
    v22 = v19;
  else
    v22 = -1;
  v53 = v22;
  v45 = details::ZinIrSubchannelKernelDimension(v12, v14, v10, v15);
  if (!*(_BYTE *)(a5 + 1148))
  {
LABEL_22:
    v26 = ZinMirConvUtils::ComputeSmallSourceMode(a5, a3, (int *)a4, a2, a6, 0, a7, 0, 0x10uLL);
    v27 = v49;
    v28 = v50;
    v29 = v47;
LABEL_23:
    v61 /= *(_QWORD *)(a4 + 224);
    goto LABEL_24;
  }
  v23 = *(_QWORD *)(a4 + 224);
  if (v46 == v23 && v61 == v46)
    v25 = 1;
  else
    v25 = 2;
  if (v23 == 1)
    v25 = 0;
  if (v25 != 2)
  {
    if (v25 == 1)
    {
      v26 = ZinMirConvUtils::ComputeSmallSourceMode(a5, a3, (int *)a4, a2, a6, 1, a7, 0, 0x10uLL);
      v27 = v49;
      v28 = v50;
      v29 = v47;
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  v44 = v46 / v23;
  v26 = ZinMirConvUtils::ComputeSmallSourceMode(a5, a3, (int *)a4, a2, a6, v46 / v23 == 1, a7, 0, 0x10uLL);
  v27 = v49;
  v28 = v50;
  v29 = v47;
  if (v44 != 1)
    goto LABEL_23;
LABEL_24:
  v30 = (v13 + v29 - 1) & -(int)v13;
  v62 = 0;
  NumOutputChannelsPerAccumulator = ZinNEPerfUtils::GetNumOutputChannelsPerAccumulator(a5, &v62, v63, v26, 0);
  if (2 * (int)v54 * (uint64_t)(int)v56 * v14 / NumOutputChannelsPerAccumulator <= 1)
    v32 = 1;
  else
    v32 = 2 * (int)v54 * (uint64_t)(int)v56 * v14 / NumOutputChannelsPerAccumulator;
  v33 = details::ZinIrSubchannelKernelDimension(v12, v54, v27, v52);
  v34 = details::ZinIrSubchannelKernelDimension(v59, v56, v57, v55);
  if (a6)
    v35 = (int)v13 * (uint64_t)(int)v12 * v45 * v61 * v32 * v33;
  else
    v35 = v61;
  if (v32
     + v34 * v59 * v35
     + ((v32 + v34 * v59 * v35 - 4 * (int)v13) & ~((v32 + v34 * v59 * v35 - 4 * (int)v13) >> 63)) * (v21 / v13 - 1) >= v53 + 4 * ((v28 - 1) * v13 - (v58 + v15) + v30))
    return 1;
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinMirConvUtils::CheckFor3DMathHWBug(result, v37, v38, v39, v40, v41, v42, v43);
    return 0;
  }
  return result;
}

BOOL ZinMirConvUtils::CalculateGroupConvUnicastCin(unint64_t this, uint64_t *a2, const ZinTensorDimensions *a3, const ZinTensorDimensions *a4, unint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *a2;
  if (*a2 == 1)
  {
    if (*((_QWORD *)a3 + 1) / this == 1)
      v6 = a2[1] / this;
    else
      v6 = 1;
    *(_QWORD *)a4 = v6;
  }
  else
  {
    v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v7)
      ZinMirConvUtils::CalculateGroupConvUnicastCin(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  return v5 == 1;
}

uint64_t ZinMirConvUtils::CanUseKernelStreaming(char a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8, unsigned int a9, uint64_t a10, char a11, uint64_t *a12)
{
  uint64_t result;
  int v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  char v27;
  char Pow2Log2;
  char v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;

  result = 0;
  if ((a11 & 1) == 0)
  {
    if (*(_BYTE *)(a10 + 1116))
    {
      if (IsPrimaryFormat(a9) || (result = IsFormatDMAConvertibleToFP16(a9), (_DWORD)result))
      {
        result = 0;
        if (a5 <= 1 && (a1 & 1) == 0 && a3 == 1 && a4 == 1 && a6 == 1)
        {
          if (!*((_BYTE *)a12 + 592))
            goto LABEL_42;
          if (a12[10] < a7 || a12[12] || a12[11] || a12[13])
            return 0;
          v20 = *((_DWORD *)a12 + 6);
          v21 = *a12;
          v22 = a12[1];
          if (a7 <= 0xA && v20 == 4 || a8 <= 6 && v20 == 3)
            return 1;
          v23 = v21 == v22 && v21 == a12[2];
          v24 = !v23;
          v25 = ZinLog2OfPow2(*(_QWORD *)(a10 + 680));
          if (a9 == 3)
            LOBYTE(v26) = -1;
          else
            v26 = IsFormatDMAConvertibleToFP16(a9) << 63 >> 63;
          v27 = *((_BYTE *)a12 + 29);
          Pow2Log2 = ZinRoundUpToNextPow2Log2(v22);
          v29 = v22 < a7 || v24;
          if ((v29 & 1) != 0 || (v30 = v26 + v25 - (v27 + Pow2Log2), result = 1, 1 << v30 < a8))
          {
LABEL_42:
            if (*(_QWORD *)(a10 + 656) < a7)
              return 0;
            v31 = ZinRoundUpToNextPow2Log2(a7);
            v32 = ZinLog2OfPow2(*(_QWORD *)(a10 + 680));
            if (a9 == 3)
              LOBYTE(v33) = -1;
            else
              v33 = IsFormatDMAConvertibleToFP16(a9) << 63 >> 63;
            result = 1;
            if (1 << (v33 + v32 - v31) < a8)
              return 0;
          }
        }
      }
    }
  }
  return result;
}

BOOL ZinMirConvUtils::CanUseHalfWorkUnitMode(uint64_t a1, int a2, int a3, char a4, char a5, uint64_t a6, unint64_t a7, char a8)
{
  BOOL v15;
  _BOOL8 result;
  BOOL v17;
  unsigned int v18;

  if (!*(_BYTE *)(a1 + 1134))
    return 0;
  v18 = 0;
  if (GetHWChannelFormat(a2, (int *)&v18))
    ZinAssertImpl("Invalid input tensor format");
  v15 = v18 > 4 || ((1 << v18) & 0x13) == 0;
  if (v15 || a3 != 3 && a3)
    return 0;
  result = 0;
  if (!a6 && (a5 & 1) == 0 && (a4 & 1) == 0)
  {
    if (a8)
      v17 = a7 > *(_QWORD *)(a1 + 664);
    else
      v17 = 0;
    return !v17;
  }
  return result;
}

BOOL ZinMirConvUtils::IsHalfWUBeneficial(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, int *a7, unint64_t a8, int a9)
{
  BOOL v10;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;

  if (a2 < 0x21)
    return 0;
  if (a9)
    v10 = a9 == 3;
  else
    v10 = 1;
  if (!v10)
    ZinAssertImpl("Error: NP2_10/SSM Small source mode is not supported together with Half workunit mode");
  v16 = *a7;
  v17 = a7[1];
  if (a6 * a5 <= (*(_QWORD *)(a1 + 680) >> 1) / v16 / v17 && *(_QWORD *)(a1 + 664) * v17 >= a5)
    return 1;
  if (a9 == 3)
  {
    if (*(_QWORD *)(a1 + 1192) >= a6 || *(_QWORD *)(a1 + 1200) < a3)
      return 0;
    v18 = *(_QWORD *)(a1 + 824);
    v19 = (v18 * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64;
    v20 = v18 / 6;
    v21 = v18 / 0xC;
    v36 = ZinDivRoundUp(a6, v18 / 6);
    v22 = 6;
    v23 = ZinDivRoundUp(a5, 6uLL);
    v34 = *(_QWORD *)(a1 + 432);
    v35 = *(_QWORD *)(a1 + 592);
    if (v20 >= a6)
      v24 = a6;
    else
      v24 = v20;
    if (a5 < 6)
      v22 = a5;
    v25 = (float)(v24 * v22) / (float)(2 * (2 * v20 + (v19 >> 2)));
    v26 = ZinDivRoundUp(a6, v21);
    v27 = ZinDivRoundUp(a5, 6uLL);
    v28 = v21 >= a6 ? a6 : v21;
    if (v25 >= (float)((float)(v28 * v22) / (float)(2 * (2 * v21 + (v19 >> 3))))
      || ((v27 * v26 * *(_QWORD *)(a1 + 592)) >> 1) / *(_QWORD *)(a1 + 432) > v23 * v36 * v35 / v34)
    {
      return 0;
    }
  }
  else
  {
    if (a5 / v17 != a8)
      return 0;
    v29 = *(_QWORD *)(a1 + 592) / a8;
    if (!(a6 / v16 % v29))
      return 0;
    v30 = v29 >> 1;
    v31 = ZinDivRoundUp(a6 / v16, v29);
    if (ZinDivRoundUp(a6 / *a7, v30) >= 2 * v31)
      return 0;
  }
  v32 = *(int *)(a1 + 8);
  v33 = (int)v32 * (uint64_t)*(int *)(a1 + 16);
  if (v33 < a4)
    return 1;
  if ((uint64_t)(int)(3 * v33 + (3 * (int)v33 < 0 ? 3 : 0)) >> 2 >= a4)
    return a4 > 2 * v32;
  return a7[1] * *a7 == 1;
}

uint64_t ZinMirConvUtils::GetConvKind(ZinMirConvUtils *this, ZinMirConvUtils *a2, ZinMirConvUtils *a3)
{
  unsigned int v4;

  if (a2 == a3 && this == a2)
    v4 = 1;
  else
    v4 = 2;
  if (a3 == (ZinMirConvUtils *)1)
    return 0;
  else
    return v4;
}

BOOL ZinMirConvUtils::ZinConvertProgrammedToLogicalKernelStrides@<W0>(int *a1@<X0>, int *a2@<X1>, int *a3@<X8>)
{
  int v3;
  int v4;
  _BOOL4 v5;
  int v6;
  int v7;
  _BOOL4 v8;
  int v9;
  _BOOL8 result;
  int v11;
  _BOOL4 v12;
  int v13;
  int v14;
  int v15;
  int v16;

  v3 = *a1;
  v4 = a1[1];
  v5 = *a1 == 2;
  v6 = *a2;
  v7 = a2[1];
  v8 = *a2 == 2;
  v9 = a1[2];
  result = v9 == 2;
  v11 = a2[2];
  v12 = v11 == 2;
  if (v5 && v8)
  {
    v3 = 1;
    v13 = 1;
  }
  else
  {
    v13 = v6;
  }
  if (v4 == 2 && v7 == 2)
  {
    v4 = 1;
    v14 = 1;
  }
  else
  {
    v14 = v7;
  }
  *a3 = v3;
  a3[1] = v4;
  if (result && v12)
    v15 = 1;
  else
    v15 = v9;
  a3[2] = v15;
  a3[3] = v13;
  if (result && v12)
    v16 = 1;
  else
    v16 = v11;
  a3[4] = v14;
  a3[5] = v16;
  return result;
}

BOOL ZinMirConvUtils::MustEnableFillLowerNEFirst(ZinMirConvUtils *this)
{
  return (unint64_t)this > 1;
}

void ZinMirConvUtils::CheckFor3DMathHWBug(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Kd Math constraints are violated\n", a5, a6, a7, a8, 0);
}

void ZinMirConvUtils::CalculateGroupConvUnicastCin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "We can't do batched group convolution\n", a5, a6, a7, a8, 0);
}

void NoOpTransposeAtom::NoOpTransposeAtom(std::string *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::string __p;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v10[0] = &off_24C058AB0;
  v10[1] = a3;
  v11 = v10;
  ZinPatternAtom::ZinPatternAtom(this, (const ZinPatternAtomDesc *)&__p);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_9;
    v8 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v7 + 8 * v8))(v7, v5, v6);
LABEL_9:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_206E5C414(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void AllTransposeAtom::AllTransposeAtom(std::string *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::string __p;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v10[0] = &off_24C058A58;
  v10[1] = a3;
  v11 = v10;
  ZinPatternAtom::ZinPatternAtom(this, (const ZinPatternAtomDesc *)&__p);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_9;
    v8 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v7 + 8 * v8))(v7, v5, v6);
LABEL_9:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_206E5C51C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void ActivationAtom::ActivationAtom(std::string *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::string __p;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v8[0] = &off_24C055E00;
  v9 = v8;
  ZinPatternAtom::ZinPatternAtom(this, (const ZinPatternAtomDesc *)&__p);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_9;
    v6 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v5 + 8 * v6))(v5, v3, v4);
LABEL_9:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_206E5C618(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void ZinMirHoistLayersinPEEW::InitializePatterns(ZinMirHoistLayersinPEEW *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  void **v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  _BYTE *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t i;
  uint64_t v58;
  void **v59;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void **v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  void **v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::string *v137;
  uint64_t v138;
  int64x2_t *v139;
  unint64_t v140;
  uint64_t *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t *v148;
  std::string *v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  int64x2_t v153;
  std::string *v154;
  uint64_t v155;
  uint64_t v156;
  std::string *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t *v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  uint64_t *v167;
  std::string *v168;
  _QWORD *v169;
  _QWORD *v170;
  uint64_t v171;
  int64x2_t v172;
  std::string *v173;
  uint64_t v174;
  uint64_t v175;
  std::string *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t *v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  uint64_t *v186;
  std::string *v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  int64x2_t v191;
  std::string *v192;
  _QWORD *v193;
  uint64_t v194;
  int64x2_t *v195;
  uint64_t v196;
  void *__p[2];
  char v198;
  void *v199[2];
  char v200;
  void *v201[2];
  char v202;
  void *v203[2];
  char v204;
  void *v205[2];
  char v206;
  void *v207[2];
  char v208;
  void *v209[2];
  char v210;
  int v211;
  void *v212[2];
  char v213;
  void *v214[2];
  char v215;
  char *v216;
  uint64_t v217;
  char *v218;
  int v219;
  void *v220[2];
  char v221;
  void *v222;
  char v223;
  char v224;
  char *v225;
  uint64_t v226;
  char *v227;
  int v228;
  void *v229[2];
  char v230;
  void *v231[2];
  char v232;
  void *v233[2];
  char v234;
  void *v235[2];
  char v236;
  int v237;
  void *v238[2];
  char v239;
  void *v240[2];
  char v241;
  void *v242[2];
  char v243;
  _BYTE v244[23];
  char v245;
  _BYTE v246[23];
  char v247;
  _QWORD *v248;
  _QWORD *v249;
  _QWORD *v250;
  void **v251;
  char v252;
  std::string v253;
  std::string *v254;
  int64x2_t *v255;
  std::string **v256;
  _BYTE v257[40];
  std::string v258;
  _BYTE v259[24];
  _BYTE *v260;
  _BYTE v261[40];
  std::string v262;
  _BYTE v263[24];
  _BYTE *v264;
  _BYTE v265[40];
  std::string v266;
  _BYTE v267[24];
  _BYTE *v268;
  _BYTE v269[40];
  std::string v270;
  _BYTE v271[24];
  _BYTE *v272;
  _BYTE v273[40];
  std::string v274;
  _BYTE v275[24];
  _BYTE *v276;
  _BYTE v277[40];
  std::string v278;
  _BYTE v279[24];
  _BYTE *v280;
  _BYTE v281[40];
  std::string v282;
  _BYTE v283[24];
  _BYTE *v284;
  _BYTE v285[40];
  std::string v286;
  _BYTE v287[24];
  _BYTE *v288;
  _BYTE v289[40];
  std::string v290;
  uint64_t v291;
  uint64_t *v292;
  uint64_t v293;
  std::string v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  std::string v298;
  uint64_t v299;
  uint64_t *v300;
  uint64_t v301;
  std::string v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  std::string v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  std::string v310;
  uint64_t v311;
  uint64_t *v312;
  uint64_t v313;
  std::string v314;
  uint64_t v315;
  uint64_t *v316;
  uint64_t v317;
  uint64_t v318;
  std::string v319;
  _QWORD v320[3];
  _QWORD *v321;
  std::string v322;
  _QWORD v323[3];
  _QWORD *v324;
  std::string v325;
  _QWORD v326[3];
  _QWORD *v327;
  std::string v328;
  _QWORD v329[3];
  _QWORD *v330;
  std::string v331;
  _QWORD v332[3];
  _QWORD *v333;
  std::string v334;
  _QWORD v335[3];
  _QWORD *v336;
  std::string v337;
  _QWORD v338[3];
  _QWORD *v339;
  std::string v340;
  _QWORD v341[3];
  _QWORD *v342;
  std::string v343;
  _QWORD v344[3];
  _QWORD *v345;
  std::string v346;
  _QWORD v347[3];
  _QWORD *v348;
  std::string v349;
  _QWORD v350[3];
  _QWORD *v351;
  std::string v352;
  _QWORD v353[3];
  _QWORD *v354;
  uint64_t v355;
  std::string v356;
  _BYTE v357[24];
  _BYTE *v358;
  _BYTE v359[40];
  std::string v360;
  _QWORD v361[3];
  _QWORD *v362;
  std::string v363;
  _QWORD v364[3];
  _QWORD *v365;
  std::string v366;
  _QWORD v367[3];
  _QWORD *v368;
  std::string v369;
  _QWORD v370[3];
  _QWORD *v371;
  std::string v372;
  _QWORD v373[3];
  _QWORD *v374;
  uint64_t v375;
  std::string v376;
  uint64_t v377;
  uint64_t *v378;
  uint64_t v379;
  std::string v380;
  uint64_t v381;
  uint64_t *v382;
  uint64_t v383;
  std::string v384;
  uint64_t v385;
  uint64_t *v386;
  uint64_t v387;
  uint64_t v388;
  std::string v389;
  _QWORD v390[3];
  _QWORD *v391;
  std::string v392;
  _QWORD v393[3];
  _QWORD *v394;
  std::string v395;
  _QWORD v396[3];
  _QWORD *v397;
  std::string v398;
  _QWORD v399[3];
  _QWORD *v400;
  std::string __s;
  _QWORD v402[3];
  _QWORD *v403;
  std::string v404;
  _QWORD v405[3];
  _QWORD *v406;
  uint64_t v407;
  std::string v408;
  uint64_t v409;
  uint64_t *v410;
  uint64_t v411;
  std::string v412;
  uint64_t v413;
  uint64_t *v414;
  uint64_t v415;
  std::string v416;
  uint64_t v417;
  uint64_t *v418;
  uint64_t v419;
  std::string v420;
  uint64_t v421;
  uint64_t *v422;
  uint64_t v423;
  uint64_t v424;
  char *v425;
  char *v426;
  char *v427;
  char *v428;
  uint64_t v429;
  char *v430;
  _QWORD **v431;
  uint64_t v432;
  void **v433;
  void **v434;
  _BYTE v435[24];
  _BYTE *v436;
  uint64_t v437;

  v5 = MEMORY[0x24BDAC7A8](this, a2, a3, a4, a5);
  v437 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v246, "irelu1");
  ZinPEAtoms::InputReLUAtom::InputReLUAtom(&__s, v246, v5 + 24);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v404, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v404 = __s;
  v6 = (uint64_t)v403;
  if (!v403)
    goto LABEL_7;
  if (v403 != v402)
  {
    v6 = (*(uint64_t (**)(void))(*v403 + 16))();
LABEL_7:
    v406 = (_QWORD *)v6;
    goto LABEL_9;
  }
  v406 = v405;
  (*(void (**)(_QWORD *))(v402[0] + 24))(v402);
LABEL_9:
  LODWORD(v253.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v407, (int *)&v253, 1);
  std::string::basic_string[abi:ne180100]<0>(v244, "prescale1");
  ZinPEAtoms::PreScaleSrc1Atom::PreScaleSrc1Atom(&v398, v244, v5 + 24);
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v408, v398.__r_.__value_.__l.__data_, v398.__r_.__value_.__l.__size_);
  else
    v408 = v398;
  v7 = (uint64_t)v400;
  if (!v400)
    goto LABEL_15;
  if (v400 != v399)
  {
    v7 = (*(uint64_t (**)(void))(*v400 + 16))();
LABEL_15:
    v410 = (uint64_t *)v7;
    goto LABEL_17;
  }
  v410 = &v409;
  (*(void (**)(_QWORD *))(v399[0] + 24))(v399);
LABEL_17:
  LODWORD(v253.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v411, (int *)&v253, 1);
  std::string::basic_string[abi:ne180100]<0>(v242, "itranspose1");
  ZinPEAtoms::InputTransposeAtom::InputTransposeAtom(&v395, v242, v5 + 24);
  if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v412, v395.__r_.__value_.__l.__data_, v395.__r_.__value_.__l.__size_);
  else
    v412 = v395;
  v8 = (uint64_t)v397;
  if (!v397)
    goto LABEL_23;
  if (v397 != v396)
  {
    v8 = (*(uint64_t (**)(void))(*v397 + 16))();
LABEL_23:
    v414 = (uint64_t *)v8;
    goto LABEL_25;
  }
  v414 = &v413;
  (*(void (**)(_QWORD *))(v396[0] + 24))(v396);
LABEL_25:
  LODWORD(v253.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v415, (int *)&v253, 1);
  std::string::basic_string[abi:ne180100]<0>(v240, "broadcast1");
  ZinCommonAtoms::BroadcastAtom::BroadcastAtom(&v392, v240, v5 + 24);
  if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v416, v392.__r_.__value_.__l.__data_, v392.__r_.__value_.__l.__size_);
  else
    v416 = v392;
  v9 = (uint64_t)v394;
  if (!v394)
    goto LABEL_31;
  if (v394 != v393)
  {
    v9 = (*(uint64_t (**)(void))(*v394 + 16))();
LABEL_31:
    v418 = (uint64_t *)v9;
    goto LABEL_33;
  }
  v418 = &v417;
  (*(void (**)(_QWORD *))(v393[0] + 24))(v393);
LABEL_33:
  LODWORD(v253.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v419, (int *)&v253, 1);
  std::string::basic_string[abi:ne180100]<0>(v238, "activations1");
  ActivationAtom::ActivationAtom(&v389, (uint64_t)v238);
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v420, v389.__r_.__value_.__l.__data_, v389.__r_.__value_.__l.__size_);
  else
    v420 = v389;
  v10 = (uint64_t)v391;
  if (!v391)
    goto LABEL_39;
  if (v391 != v390)
  {
    v10 = (*(uint64_t (**)(void))(*v391 + 16))();
LABEL_39:
    v422 = (uint64_t *)v10;
    goto LABEL_41;
  }
  v422 = &v421;
  (*(void (**)(_QWORD *))(v390[0] + 24))(v390);
LABEL_41:
  v237 = 2;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v423, &v237, 1);
  v425 = 0;
  v426 = 0;
  v427 = 0;
  v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&v425;
  v253.__r_.__value_.__s.__data_[8] = 0;
  v425 = (char *)operator new(0x1E0uLL);
  v426 = v425;
  v427 = v425 + 480;
  v426 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem const>,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>((uint64_t)&v427, (uint64_t)&v404, (uint64_t)&v424, (uint64_t)v425);
  std::string::basic_string[abi:ne180100]<0>(v235, "irelu2");
  ZinPEAtoms::InputReLUAtom::InputReLUAtom(&v369, v235, v5 + 24);
  if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v372, v369.__r_.__value_.__l.__data_, v369.__r_.__value_.__l.__size_);
  else
    v372 = v369;
  v11 = (uint64_t)v371;
  if (!v371)
    goto LABEL_47;
  if (v371 != v370)
  {
    v11 = (*(uint64_t (**)(void))(*v371 + 16))();
LABEL_47:
    v374 = (_QWORD *)v11;
    goto LABEL_49;
  }
  v374 = v373;
  (*(void (**)(_QWORD *))(v370[0] + 24))(v370);
LABEL_49:
  LODWORD(v253.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v375, (int *)&v253, 1);
  std::string::basic_string[abi:ne180100]<0>(v233, "itranspose2");
  ZinPEAtoms::InputTransposeAtom::InputTransposeAtom(&v366, v233, v5 + 24);
  if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v376, v366.__r_.__value_.__l.__data_, v366.__r_.__value_.__l.__size_);
  else
    v376 = v366;
  v12 = (uint64_t)v368;
  if (!v368)
    goto LABEL_55;
  if (v368 != v367)
  {
    v12 = (*(uint64_t (**)(void))(*v368 + 16))();
LABEL_55:
    v378 = (uint64_t *)v12;
    goto LABEL_57;
  }
  v378 = &v377;
  (*(void (**)(_QWORD *))(v367[0] + 24))(v367);
LABEL_57:
  LODWORD(v253.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v379, (int *)&v253, 1);
  std::string::basic_string[abi:ne180100]<0>(v231, "broadcast2");
  ZinCommonAtoms::BroadcastAtom::BroadcastAtom(&v363, v231, v5 + 24);
  if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v380, v363.__r_.__value_.__l.__data_, v363.__r_.__value_.__l.__size_);
  else
    v380 = v363;
  v13 = (uint64_t)v365;
  if (!v365)
    goto LABEL_63;
  if (v365 != v364)
  {
    v13 = (*(uint64_t (**)(void))(*v365 + 16))();
LABEL_63:
    v382 = (uint64_t *)v13;
    goto LABEL_65;
  }
  v382 = &v381;
  (*(void (**)(_QWORD *))(v364[0] + 24))(v364);
LABEL_65:
  LODWORD(v253.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v383, (int *)&v253, 1);
  std::string::basic_string[abi:ne180100]<0>(v229, "activations2");
  ActivationAtom::ActivationAtom(&v360, (uint64_t)v229);
  if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v384, v360.__r_.__value_.__l.__data_, v360.__r_.__value_.__l.__size_);
  else
    v384 = v360;
  v14 = (uint64_t)v362;
  if (!v362)
    goto LABEL_71;
  if (v362 != v361)
  {
    v14 = (*(uint64_t (**)(void))(*v362 + 16))();
LABEL_71:
    v386 = (uint64_t *)v14;
    goto LABEL_73;
  }
  v386 = &v385;
  (*(void (**)(_QWORD *))(v361[0] + 24))(v361);
LABEL_73:
  v228 = 2;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v387, &v228, 1);
  v428 = 0;
  v429 = 0;
  v430 = 0;
  v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&v428;
  v253.__r_.__value_.__s.__data_[8] = 0;
  v428 = (char *)operator new(0x180uLL);
  v429 = (uint64_t)v428;
  v430 = v428 + 384;
  v429 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem const>,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>((uint64_t)&v430, (uint64_t)&v372, (uint64_t)&v388, (uint64_t)v428);
  v250 = 0;
  v248 = 0;
  v249 = 0;
  v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&v248;
  v253.__r_.__value_.__s.__data_[8] = 0;
  v248 = operator new(0x30uLL);
  v249 = v248;
  v250 = v248 + 6;
  v249 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinLinearPattern::AtomItem const>>,std::vector<ZinLinearPattern::AtomItem const> const*,std::vector<ZinLinearPattern::AtomItem const> const*,std::vector<ZinLinearPattern::AtomItem const>*>((uint64_t)&v250, (uint64_t *)&v425, (uint64_t *)&v431, v248);
  v431 = &v248;
  v432 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v222, "scaled_ew");
  ZinPEAtoms::ScaledEWAtom::ScaledEWAtom(&v349, &v222, v5 + 24);
  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v352, v349.__r_.__value_.__l.__data_, v349.__r_.__value_.__l.__size_);
  else
    v352 = v349;
  v15 = (uint64_t)v351;
  if (!v351)
    goto LABEL_79;
  if (v351 != v350)
  {
    v15 = (*(uint64_t (**)(void))(*v351 + 16))();
LABEL_79:
    v354 = (_QWORD *)v15;
    goto LABEL_81;
  }
  v354 = v353;
  (*(void (**)(_QWORD *))(v350[0] + 24))(v350);
LABEL_81:
  LODWORD(v253.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v355, (int *)&v253, 1);
  std::string::basic_string[abi:ne180100]<0>(v220, "goc");
  ZinPEAtoms::PEEWGOCAtom::PEEWGOCAtom(&v346, v220, v5 + 24);
  if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v356, v346.__r_.__value_.__l.__data_, v346.__r_.__value_.__l.__size_);
  else
    v356 = v346;
  v16 = (uint64_t)v348;
  if (!v348)
    goto LABEL_87;
  if (v348 != v347)
  {
    v16 = (*(uint64_t (**)(void))(*v348 + 16))();
LABEL_87:
    v358 = (_BYTE *)v16;
    goto LABEL_89;
  }
  v358 = v357;
  (*(void (**)(_QWORD *))(v347[0] + 24))(v347);
LABEL_89:
  v219 = 2;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v359, &v219, 1);
  v225 = 0;
  v226 = 0;
  v227 = 0;
  v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&v225;
  v253.__r_.__value_.__s.__data_[8] = 0;
  v225 = (char *)operator new(0xC0uLL);
  v226 = (uint64_t)v225;
  v227 = v225 + 192;
  v226 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem const>,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>((uint64_t)&v227, (uint64_t)&v352, (uint64_t)&v360, (uint64_t)v225);
  v433 = (void **)&v225;
  std::string::basic_string[abi:ne180100]<0>(v214, "abs_or_zero_compare");
  ZinPEAtoms::AbsOrZeroCompareAtom::AbsOrZeroCompareAtom(&v343, v214, v5 + 24);
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v253, v343.__r_.__value_.__l.__data_, v343.__r_.__value_.__l.__size_);
  else
    v253 = v343;
  v17 = (uint64_t)v345;
  if (!v345)
    goto LABEL_95;
  if (v345 != v344)
  {
    v17 = (*(uint64_t (**)(void))(*v345 + 16))();
LABEL_95:
    v256 = (std::string **)v17;
    goto LABEL_97;
  }
  v256 = &v254;
  (*(void (**)(_QWORD *))(v344[0] + 24))(v344);
LABEL_97:
  LODWORD(v340.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v257, (int *)&v340, 1);
  std::string::basic_string[abi:ne180100]<0>(v212, "pre_reduction_transpose");
  AllTransposeAtom::AllTransposeAtom(&v340, (uint64_t)v212, v5 + 24);
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v258, v340.__r_.__value_.__l.__data_, v340.__r_.__value_.__l.__size_);
  else
    v258 = v340;
  v18 = (uint64_t)v342;
  if (!v342)
    goto LABEL_103;
  if (v342 != v341)
  {
    v18 = (*(uint64_t (**)(void))(*v342 + 16))();
LABEL_103:
    v260 = (_BYTE *)v18;
    goto LABEL_105;
  }
  v260 = v259;
  (*(void (**)(_QWORD *))(v341[0] + 24))(v341);
LABEL_105:
  v211 = 2;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v261, &v211, 1);
  std::string::basic_string[abi:ne180100]<0>(v209, "reduction");
  ZinPEAtoms::ReductionAtom::ReductionAtom(&v337, v209, v5 + 24);
  if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v262, v337.__r_.__value_.__l.__data_, v337.__r_.__value_.__l.__size_);
  else
    v262 = v337;
  v19 = (uint64_t)v339;
  if (!v339)
    goto LABEL_111;
  if (v339 != v338)
  {
    v19 = (*(uint64_t (**)(void))(*v339 + 16))();
LABEL_111:
    v264 = (_BYTE *)v19;
    goto LABEL_113;
  }
  v264 = v263;
  (*(void (**)(_QWORD *))(v338[0] + 24))(v338);
LABEL_113:
  LODWORD(v334.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v265, (int *)&v334, 1);
  std::string::basic_string[abi:ne180100]<0>(v207, "final_scale");
  ZinPEAtoms::ReductionFinalScaleAtom::ReductionFinalScaleAtom(&v334, v207, v5 + 24);
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v266, v334.__r_.__value_.__l.__data_, v334.__r_.__value_.__l.__size_);
  else
    v266 = v334;
  v20 = (uint64_t)v336;
  if (!v336)
    goto LABEL_119;
  if (v336 != v335)
  {
    v20 = (*(uint64_t (**)(void))(*v336 + 16))();
LABEL_119:
    v268 = (_BYTE *)v20;
    goto LABEL_121;
  }
  v268 = v267;
  (*(void (**)(_QWORD *))(v335[0] + 24))(v335);
LABEL_121:
  LODWORD(v331.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v269, (int *)&v331, 1);
  std::string::basic_string[abi:ne180100]<0>(v205, "epsilon");
  ZinPEAtoms::ReductionEpsilonAtom::ReductionEpsilonAtom(&v331, v205, v5 + 24);
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v270, v331.__r_.__value_.__l.__data_, v331.__r_.__value_.__l.__size_);
  else
    v270 = v331;
  v21 = (uint64_t)v333;
  if (!v333)
    goto LABEL_127;
  if (v333 != v332)
  {
    v21 = (*(uint64_t (**)(void))(*v333 + 16))();
LABEL_127:
    v272 = (_BYTE *)v21;
    goto LABEL_129;
  }
  v272 = v271;
  (*(void (**)(_QWORD *))(v332[0] + 24))(v332);
LABEL_129:
  LODWORD(v328.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v273, (int *)&v328, 1);
  std::string::basic_string[abi:ne180100]<0>(v203, "post_process");
  ZinPEAtoms::ReductionPostProcessAtom::ReductionPostProcessAtom(&v328, v203, v5 + 24);
  if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v274, v328.__r_.__value_.__l.__data_, v328.__r_.__value_.__l.__size_);
  else
    v274 = v328;
  v22 = (uint64_t)v330;
  if (!v330)
    goto LABEL_135;
  if (v330 != v329)
  {
    v22 = (*(uint64_t (**)(void))(*v330 + 16))();
LABEL_135:
    v276 = (_BYTE *)v22;
    goto LABEL_137;
  }
  v276 = v275;
  (*(void (**)(_QWORD *))(v329[0] + 24))(v329);
LABEL_137:
  LODWORD(v325.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v277, (int *)&v325, 1);
  std::string::basic_string[abi:ne180100]<0>(v201, "post_reduction_transpose");
  NoOpTransposeAtom::NoOpTransposeAtom(&v325, (uint64_t)v201, v5 + 24);
  v196 = v5 + 24;
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v278, v325.__r_.__value_.__l.__data_, v325.__r_.__value_.__l.__size_);
  else
    v278 = v325;
  v23 = v326;
  v24 = (uint64_t)v327;
  if (!v327)
    goto LABEL_143;
  if (v327 != v326)
  {
    v24 = (*(uint64_t (**)(void))(*v327 + 16))();
LABEL_143:
    v280 = (_BYTE *)v24;
    goto LABEL_145;
  }
  v280 = v279;
  (*(void (**)(_QWORD *))(v326[0] + 24))(v326);
LABEL_145:
  LODWORD(v322.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v281, (int *)&v322, 1);
  std::string::basic_string[abi:ne180100]<0>(v199, "orelu");
  ZinPEAtoms::OutputReLUAtom::OutputReLUAtom(&v322, v199, v196);
  v195 = (int64x2_t *)v5;
  if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v282, v322.__r_.__value_.__l.__data_, v322.__r_.__value_.__l.__size_);
  else
    v282 = v322;
  v25 = v323;
  v26 = (uint64_t)v324;
  if (!v324)
    goto LABEL_151;
  if (v324 != v323)
  {
    v26 = (*(uint64_t (**)(void))(*v324 + 16))();
LABEL_151:
    v284 = (_BYTE *)v26;
    goto LABEL_153;
  }
  v284 = v283;
  (*(void (**)(_QWORD *))(v323[0] + 24))(v323);
LABEL_153:
  LODWORD(v319.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v285, (int *)&v319, 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "otranspose");
  ZinPEAtoms::OutputTransposeAtom::OutputTransposeAtom(&v319, __p, v196);
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v286, v319.__r_.__value_.__l.__data_, v319.__r_.__value_.__l.__size_);
  else
    v286 = v319;
  v27 = v320;
  v28 = (uint64_t)v321;
  if (v321)
  {
    if (v321 == v320)
    {
      v288 = v287;
      (*(void (**)(_QWORD *))(v320[0] + 24))(v320);
      goto LABEL_161;
    }
    v28 = (*(uint64_t (**)(void))(*v321 + 16))();
  }
  v288 = (_BYTE *)v28;
LABEL_161:
  LODWORD(v251) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v289, (int *)&v251, 1);
  v217 = 0;
  v218 = 0;
  v216 = 0;
  v251 = (void **)&v216;
  v252 = 0;
  v216 = (char *)operator new(0x360uLL);
  v217 = (uint64_t)v216;
  v218 = v216 + 864;
  v217 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem const>,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>((uint64_t)&v218, (uint64_t)&v253, (uint64_t)&v290, (uint64_t)v216);
  v434 = (void **)&v216;
  v436 = 0;
  v29 = 864;
  v30 = v402;
  do
  {
    v31 = (void **)((char *)&v253.__r_.__value_.__l.__data_ + v29);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&(&v248)[v29 / 8]);
    v32 = *(char **)&v246[v29 + 16];
    if (&v244[v29 + 16] == v32)
    {
      v32 = (char *)(v31 - 9);
      v33 = 4;
    }
    else
    {
      if (!v32)
        goto LABEL_167;
      v33 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_167:
    if ((char)v244[v29 + 15] < 0)
      operator delete(*(v31 - 12));
    v29 -= 96;
  }
  while (v29);
  if (v321 == v320)
  {
    v35 = 4;
    v34 = v344;
LABEL_174:
    (*(void (**)(_QWORD *))(*v27 + 8 * v35))(v27);
  }
  else
  {
    v34 = v344;
    if (v321)
    {
      v35 = 5;
      v27 = v321;
      goto LABEL_174;
    }
  }
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v319.__r_.__value_.__l.__data_);
  if (v198 < 0)
    operator delete(__p[0]);
  if (v324 == v323)
  {
    v36 = 4;
LABEL_183:
    (*(void (**)(_QWORD *))(*v25 + 8 * v36))(v25);
  }
  else if (v324)
  {
    v36 = 5;
    v25 = v324;
    goto LABEL_183;
  }
  if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v322.__r_.__value_.__l.__data_);
  if (v200 < 0)
    operator delete(v199[0]);
  if (v327 == v326)
  {
    v37 = 4;
LABEL_192:
    (*(void (**)(_QWORD *))(*v23 + 8 * v37))(v23);
  }
  else if (v327)
  {
    v37 = 5;
    v23 = v327;
    goto LABEL_192;
  }
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v325.__r_.__value_.__l.__data_);
  if (v202 < 0)
    operator delete(v201[0]);
  v38 = v329;
  if (v330 == v329)
  {
    v39 = 4;
LABEL_201:
    (*(void (**)(void))(*v38 + 8 * v39))();
  }
  else if (v330)
  {
    v39 = 5;
    v38 = v330;
    goto LABEL_201;
  }
  if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v328.__r_.__value_.__l.__data_);
  if (v204 < 0)
    operator delete(v203[0]);
  v40 = v332;
  if (v333 == v332)
  {
    v41 = 4;
LABEL_210:
    (*(void (**)(void))(*v40 + 8 * v41))();
  }
  else if (v333)
  {
    v41 = 5;
    v40 = v333;
    goto LABEL_210;
  }
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v331.__r_.__value_.__l.__data_);
  if (v206 < 0)
    operator delete(v205[0]);
  v42 = v335;
  if (v336 == v335)
  {
    v43 = 4;
LABEL_219:
    (*(void (**)(void))(*v42 + 8 * v43))();
  }
  else if (v336)
  {
    v43 = 5;
    v42 = v336;
    goto LABEL_219;
  }
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v334.__r_.__value_.__l.__data_);
  if (v208 < 0)
    operator delete(v207[0]);
  v44 = v338;
  if (v339 == v338)
  {
    v45 = 4;
LABEL_228:
    (*(void (**)(void))(*v44 + 8 * v45))();
  }
  else if (v339)
  {
    v45 = 5;
    v44 = v339;
    goto LABEL_228;
  }
  if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v337.__r_.__value_.__l.__data_);
  if (v210 < 0)
    operator delete(v209[0]);
  v46 = v341;
  if (v342 == v341)
  {
    v47 = 4;
LABEL_237:
    (*(void (**)(void))(*v46 + 8 * v47))();
  }
  else if (v342)
  {
    v47 = 5;
    v46 = v342;
    goto LABEL_237;
  }
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v340.__r_.__value_.__l.__data_);
  if (v213 < 0)
    operator delete(v212[0]);
  if (v345 == v344)
  {
    v48 = 4;
LABEL_246:
    (*(void (**)(_QWORD *))(*v34 + 8 * v48))(v34);
  }
  else if (v345)
  {
    v48 = 5;
    v34 = v345;
    goto LABEL_246;
  }
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v343.__r_.__value_.__l.__data_);
  if (v215 < 0)
    operator delete(v214[0]);
  v49 = 0;
  while (2)
  {
    v50 = (char *)&v352 + v49;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v359[v49]);
    v51 = *(_BYTE **)&v359[v49 - 8];
    if (&v357[v49] == v51)
    {
      v51 = v50 + 120;
      v52 = 4;
LABEL_256:
      (*(void (**)(void))(*(_QWORD *)v51 + 8 * v52))();
    }
    else if (v51)
    {
      v52 = 5;
      goto LABEL_256;
    }
    if (SHIBYTE(v356.__r_.__value_.__r.__words[v49 / 8 + 2]) < 0)
      operator delete(*((void **)v50 + 12));
    v49 -= 96;
    if (v49 != -192)
      continue;
    break;
  }
  v53 = v347;
  if (v348 == v347)
  {
    v55 = 4;
    v54 = v350;
LABEL_264:
    (*(void (**)(void))(*v53 + 8 * v55))();
  }
  else
  {
    v54 = v350;
    if (v348)
    {
      v55 = 5;
      v53 = v348;
      goto LABEL_264;
    }
  }
  if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v346.__r_.__value_.__l.__data_);
  if (v221 < 0)
    operator delete(v220[0]);
  if (v351 == v350)
  {
    v56 = 4;
LABEL_273:
    (*(void (**)(_QWORD *))(*v54 + 8 * v56))(v54);
  }
  else if (v351)
  {
    v56 = 5;
    v54 = v351;
    goto LABEL_273;
  }
  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v349.__r_.__value_.__l.__data_);
  if (v224 < 0)
    operator delete(v222);
  for (i = 3; i != -3; i -= 3)
  {
    v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&(&v425)[i];
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v253);
  }
  v58 = 48;
  while (2)
  {
    v59 = (void **)((char *)&v372.__r_.__value_.__l.__data_ + v58 * 8);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v369.__r_.__value_.__r.__words[v58 + 2]);
    v60 = (char *)v369.__r_.__value_.__r.__words[v58 + 1];
    if (&v367[v58 + 2] == (_QWORD *)v60)
    {
      v60 = (char *)(v59 - 9);
      v61 = 4;
LABEL_285:
      (*(void (**)(void))(*(_QWORD *)v60 + 8 * v61))();
    }
    else if (v60)
    {
      v61 = 5;
      goto LABEL_285;
    }
    if (SHIBYTE(v367[v58 + 1]) < 0)
      operator delete(*(v59 - 12));
    v58 -= 12;
    if (v58 * 8)
      continue;
    break;
  }
  v62 = v361;
  if (v362 == v361)
  {
    v66 = 4;
    v64 = v367;
    v63 = v370;
    v65 = v364;
LABEL_293:
    (*(void (**)(void))(*v62 + 8 * v66))();
  }
  else
  {
    v64 = v367;
    v63 = v370;
    v65 = v364;
    if (v362)
    {
      v66 = 5;
      v62 = v362;
      goto LABEL_293;
    }
  }
  if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v360.__r_.__value_.__l.__data_);
  if (v230 < 0)
    operator delete(v229[0]);
  if (v365 == v364)
  {
    v67 = 4;
LABEL_302:
    (*(void (**)(_QWORD *))(*v65 + 8 * v67))(v65);
  }
  else if (v365)
  {
    v67 = 5;
    v65 = v365;
    goto LABEL_302;
  }
  if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v363.__r_.__value_.__l.__data_);
  if (v232 < 0)
    operator delete(v231[0]);
  if (v368 == v367)
  {
    v68 = 4;
LABEL_311:
    (*(void (**)(_QWORD *))(*v64 + 8 * v68))(v64);
  }
  else if (v368)
  {
    v68 = 5;
    v64 = v368;
    goto LABEL_311;
  }
  if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v366.__r_.__value_.__l.__data_);
  if (v234 < 0)
    operator delete(v233[0]);
  if (v371 == v370)
  {
    v69 = 4;
LABEL_320:
    (*(void (**)(_QWORD *))(*v63 + 8 * v69))(v63);
  }
  else if (v371)
  {
    v69 = 5;
    v63 = v371;
    goto LABEL_320;
  }
  if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v369.__r_.__value_.__l.__data_);
  if (v236 < 0)
    operator delete(v235[0]);
  v70 = 60;
  while (2)
  {
    v71 = (void **)((char *)&v404.__r_.__value_.__l.__data_ + v70 * 8);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&__s.__r_.__value_.__r.__words[v70 + 2]);
    v72 = (char *)__s.__r_.__value_.__r.__words[v70 + 1];
    if (&v399[v70 + 2] == (_QWORD *)v72)
    {
      v72 = (char *)(v71 - 9);
      v73 = 4;
LABEL_330:
      (*(void (**)(void))(*(_QWORD *)v72 + 8 * v73))();
    }
    else if (v72)
    {
      v73 = 5;
      goto LABEL_330;
    }
    if (SHIBYTE(v399[v70 + 1]) < 0)
      operator delete(*(v71 - 12));
    v70 -= 12;
    if (v70 * 8)
      continue;
    break;
  }
  v74 = v390;
  if (v391 == v390)
  {
    v76 = 4;
    v75 = v399;
LABEL_338:
    (*(void (**)(void))(*v74 + 8 * v76))();
  }
  else
  {
    v75 = v399;
    if (v391)
    {
      v76 = 5;
      v74 = v391;
      goto LABEL_338;
    }
  }
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v389.__r_.__value_.__l.__data_);
  if (v239 < 0)
    operator delete(v238[0]);
  v77 = v393;
  if (v394 == v393)
  {
    v78 = 4;
LABEL_347:
    (*(void (**)(void))(*v77 + 8 * v78))();
  }
  else if (v394)
  {
    v78 = 5;
    v77 = v394;
    goto LABEL_347;
  }
  if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v392.__r_.__value_.__l.__data_);
  if (v241 < 0)
    operator delete(v240[0]);
  v79 = v396;
  if (v397 == v396)
  {
    v80 = 4;
LABEL_356:
    (*(void (**)(void))(*v79 + 8 * v80))();
  }
  else if (v397)
  {
    v80 = 5;
    v79 = v397;
    goto LABEL_356;
  }
  if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v395.__r_.__value_.__l.__data_);
  if (v243 < 0)
    operator delete(v242[0]);
  if (v400 == v399)
  {
    v81 = 4;
LABEL_365:
    (*(void (**)(_QWORD *))(*v75 + 8 * v81))(v75);
  }
  else if (v400)
  {
    v81 = 5;
    v75 = v400;
    goto LABEL_365;
  }
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v398.__r_.__value_.__l.__data_);
  if (v245 < 0)
    operator delete(*(void **)v244);
  if (v403 == v402)
  {
    v82 = 4;
LABEL_374:
    (*(void (**)(_QWORD *))(*v30 + 8 * v82))(v30);
  }
  else if (v403)
  {
    v82 = 5;
    v30 = v403;
    goto LABEL_374;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (v247 < 0)
    operator delete(*(void **)v246);
  std::string::basic_string[abi:ne180100]<0>(&v334, "irelu1");
  ZinPEAtoms::InputReLUAtom::InputReLUAtom(&v404, &v334, v196);
  if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v253, v404.__r_.__value_.__l.__data_, v404.__r_.__value_.__l.__size_);
  else
    v253 = v404;
  v83 = (uint64_t)v406;
  if (v406)
  {
    if (v406 != v405)
    {
      v83 = (*(uint64_t (**)(void))(*v406 + 16))();
      goto LABEL_385;
    }
    v256 = &v254;
    (*(void (**)(_QWORD *))(v405[0] + 24))(v405);
  }
  else
  {
LABEL_385:
    v256 = (std::string **)v83;
  }
  LODWORD(v372.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v257, (int *)&v372, 1);
  std::string::basic_string[abi:ne180100]<0>(&v331, "prescale1");
  ZinPEAtoms::PreScaleSrc1Atom::PreScaleSrc1Atom(&v372, &v331, v196);
  if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v258, v372.__r_.__value_.__l.__data_, v372.__r_.__value_.__l.__size_);
  else
    v258 = v372;
  v84 = (uint64_t)v374;
  if (v374)
  {
    if (v374 != v373)
    {
      v84 = (*(uint64_t (**)(void))(*v374 + 16))();
      goto LABEL_393;
    }
    v260 = v259;
    (*(void (**)(_QWORD *))(v373[0] + 24))(v373);
  }
  else
  {
LABEL_393:
    v260 = (_BYTE *)v84;
  }
  LODWORD(v352.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v261, (int *)&v352, 1);
  std::string::basic_string[abi:ne180100]<0>(&v328, "itranspose1");
  ZinPEAtoms::InputTransposeAtom::InputTransposeAtom(&v352, &v328, v196);
  if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v262, v352.__r_.__value_.__l.__data_, v352.__r_.__value_.__l.__size_);
  else
    v262 = v352;
  v85 = (uint64_t)v354;
  if (v354)
  {
    if (v354 != v353)
    {
      v85 = (*(uint64_t (**)(void))(*v354 + 16))();
      goto LABEL_401;
    }
    v264 = v263;
    (*(void (**)(_QWORD *))(v353[0] + 24))(v353);
  }
  else
  {
LABEL_401:
    v264 = (_BYTE *)v85;
  }
  LODWORD(__s.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v265, (int *)&__s, 1);
  std::string::basic_string[abi:ne180100]<0>(&v325, "broadcast1");
  ZinCommonAtoms::BroadcastAtom::BroadcastAtom(&__s, &v325, v196);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v266, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v266 = __s;
  v86 = (uint64_t)v403;
  if (v403)
  {
    if (v403 != v402)
    {
      v86 = (*(uint64_t (**)(void))(*v403 + 16))();
      goto LABEL_409;
    }
    v268 = v267;
    (*(void (**)(_QWORD *))(v402[0] + 24))(v402);
  }
  else
  {
LABEL_409:
    v268 = (_BYTE *)v86;
  }
  LODWORD(v398.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v269, (int *)&v398, 1);
  std::string::basic_string[abi:ne180100]<0>(&v322, "activations1");
  ActivationAtom::ActivationAtom(&v398, (uint64_t)&v322);
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v270, v398.__r_.__value_.__l.__data_, v398.__r_.__value_.__l.__size_);
  else
    v270 = v398;
  v87 = (uint64_t)v400;
  if (v400)
  {
    if (v400 != v399)
    {
      v87 = (*(uint64_t (**)(void))(*v400 + 16))();
      goto LABEL_417;
    }
    v272 = v271;
    (*(void (**)(_QWORD *))(v399[0] + 24))(v399);
  }
  else
  {
LABEL_417:
    v272 = (_BYTE *)v87;
  }
  LODWORD(v220[0]) = 2;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v273, (int *)v220, 1);
  std::string::basic_string[abi:ne180100]<0>(&v319, "scaled_ew");
  ZinPEAtoms::ScaledEWAtom::ScaledEWAtom(&v395, &v319, v196);
  if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v274, v395.__r_.__value_.__l.__data_, v395.__r_.__value_.__l.__size_);
  else
    v274 = v395;
  v88 = (uint64_t)v397;
  if (v397)
  {
    if (v397 != v396)
    {
      v88 = (*(uint64_t (**)(void))(*v397 + 16))();
      goto LABEL_425;
    }
    v276 = v275;
    (*(void (**)(_QWORD *))(v396[0] + 24))(v396);
  }
  else
  {
LABEL_425:
    v276 = (_BYTE *)v88;
  }
  LODWORD(v392.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v277, (int *)&v392, 1);
  std::string::basic_string[abi:ne180100]<0>(&v425, "goc");
  ZinPEAtoms::PEEWGOCAtom::PEEWGOCAtom(&v392, &v425, v196);
  if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v278, v392.__r_.__value_.__l.__data_, v392.__r_.__value_.__l.__size_);
  else
    v278 = v392;
  v89 = (uint64_t)v394;
  if (v394)
  {
    if (v394 != v393)
    {
      v89 = (*(uint64_t (**)(void))(*v394 + 16))();
      goto LABEL_433;
    }
    v280 = v279;
    (*(void (**)(_QWORD *))(v393[0] + 24))(v393);
  }
  else
  {
LABEL_433:
    v280 = (_BYTE *)v89;
  }
  LODWORD(v214[0]) = 2;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v281, (int *)v214, 1);
  std::string::basic_string[abi:ne180100]<0>(v246, "abs_or_zero_compare");
  ZinPEAtoms::AbsOrZeroCompareAtom::AbsOrZeroCompareAtom(&v389, v246, v196);
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v282, v389.__r_.__value_.__l.__data_, v389.__r_.__value_.__l.__size_);
  else
    v282 = v389;
  v90 = (uint64_t)v391;
  if (v391)
  {
    if (v391 != v390)
    {
      v90 = (*(uint64_t (**)(void))(*v391 + 16))();
      goto LABEL_441;
    }
    v284 = v283;
    (*(void (**)(_QWORD *))(v390[0] + 24))(v390);
  }
  else
  {
LABEL_441:
    v284 = (_BYTE *)v90;
  }
  LODWORD(v369.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v285, (int *)&v369, 1);
  std::string::basic_string[abi:ne180100]<0>(v244, "pre_reduction_transpose");
  AllTransposeAtom::AllTransposeAtom(&v369, (uint64_t)v244, v196);
  if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v286, v369.__r_.__value_.__l.__data_, v369.__r_.__value_.__l.__size_);
  else
    v286 = v369;
  v91 = (uint64_t)v371;
  if (v371)
  {
    if (v371 != v370)
    {
      v91 = (*(uint64_t (**)(void))(*v371 + 16))();
      goto LABEL_449;
    }
    v288 = v287;
    (*(void (**)(_QWORD *))(v370[0] + 24))(v370);
  }
  else
  {
LABEL_449:
    v288 = (_BYTE *)v91;
  }
  LODWORD(v212[0]) = 2;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v289, (int *)v212, 1);
  std::string::basic_string[abi:ne180100]<0>(v242, "reduction");
  ZinPEAtoms::ReductionAtom::ReductionAtom(&v366, v242, v196);
  if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v290, v366.__r_.__value_.__l.__data_, v366.__r_.__value_.__l.__size_);
  else
    v290 = v366;
  v92 = (uint64_t)v368;
  if (v368)
  {
    if (v368 != v367)
    {
      v92 = (*(uint64_t (**)(void))(*v368 + 16))();
      goto LABEL_457;
    }
    v292 = &v291;
    (*(void (**)(_QWORD *))(v367[0] + 24))(v367);
  }
  else
  {
LABEL_457:
    v292 = (uint64_t *)v92;
  }
  LODWORD(v363.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v293, (int *)&v363, 1);
  std::string::basic_string[abi:ne180100]<0>(v240, "final_scale");
  ZinPEAtoms::ReductionFinalScaleAtom::ReductionFinalScaleAtom(&v363, v240, v196);
  if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v294, v363.__r_.__value_.__l.__data_, v363.__r_.__value_.__l.__size_);
  else
    v294 = v363;
  v93 = (uint64_t)v365;
  if (v365)
  {
    if (v365 != v364)
    {
      v93 = (*(uint64_t (**)(void))(*v365 + 16))();
      goto LABEL_465;
    }
    v296 = &v295;
    (*(void (**)(_QWORD *))(v364[0] + 24))(v364);
  }
  else
  {
LABEL_465:
    v296 = (uint64_t *)v93;
  }
  LODWORD(v360.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v297, (int *)&v360, 1);
  std::string::basic_string[abi:ne180100]<0>(v238, "epsilon");
  ZinPEAtoms::ReductionEpsilonAtom::ReductionEpsilonAtom(&v360, v238, v196);
  if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v298, v360.__r_.__value_.__l.__data_, v360.__r_.__value_.__l.__size_);
  else
    v298 = v360;
  v94 = (uint64_t)v362;
  if (v362)
  {
    if (v362 != v361)
    {
      v94 = (*(uint64_t (**)(void))(*v362 + 16))();
      goto LABEL_473;
    }
    v300 = &v299;
    (*(void (**)(_QWORD *))(v361[0] + 24))(v361);
  }
  else
  {
LABEL_473:
    v300 = (uint64_t *)v94;
  }
  LODWORD(v349.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v301, (int *)&v349, 1);
  std::string::basic_string[abi:ne180100]<0>(v235, "post_process");
  ZinPEAtoms::ReductionPostProcessAtom::ReductionPostProcessAtom(&v349, v235, v196);
  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v302, v349.__r_.__value_.__l.__data_, v349.__r_.__value_.__l.__size_);
  else
    v302 = v349;
  v95 = v350;
  v96 = (uint64_t)v351;
  if (v351)
  {
    if (v351 != v350)
    {
      v96 = (*(uint64_t (**)(void))(*v351 + 16))();
      goto LABEL_481;
    }
    v304 = &v303;
    (*(void (**)(_QWORD *))(v350[0] + 24))(v350);
  }
  else
  {
LABEL_481:
    v304 = (uint64_t *)v96;
  }
  LODWORD(v346.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v305, (int *)&v346, 1);
  std::string::basic_string[abi:ne180100]<0>(v233, "post_reduction_transpose");
  NoOpTransposeAtom::NoOpTransposeAtom(&v346, (uint64_t)v233, v196);
  if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v306, v346.__r_.__value_.__l.__data_, v346.__r_.__value_.__l.__size_);
  else
    v306 = v346;
  v97 = v347;
  v98 = (uint64_t)v348;
  if (v348)
  {
    if (v348 != v347)
    {
      v98 = (*(uint64_t (**)(void))(*v348 + 16))();
      goto LABEL_489;
    }
    v308 = &v307;
    (*(void (**)(_QWORD *))(v347[0] + 24))(v347);
  }
  else
  {
LABEL_489:
    v308 = (uint64_t *)v98;
  }
  LODWORD(v343.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v309, (int *)&v343, 1);
  std::string::basic_string[abi:ne180100]<0>(v231, "orelu");
  ZinPEAtoms::OutputReLUAtom::OutputReLUAtom(&v343, v231, v196);
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v310, v343.__r_.__value_.__l.__data_, v343.__r_.__value_.__l.__size_);
  else
    v310 = v343;
  v99 = v344;
  v100 = (uint64_t)v345;
  if (v345)
  {
    if (v345 != v344)
    {
      v100 = (*(uint64_t (**)(void))(*v345 + 16))();
      goto LABEL_497;
    }
    v312 = &v311;
    (*(void (**)(_QWORD *))(v344[0] + 24))(v344);
  }
  else
  {
LABEL_497:
    v312 = (uint64_t *)v100;
  }
  v101 = v364;
  v102 = v373;
  LODWORD(v340.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v313, (int *)&v340, 1);
  std::string::basic_string[abi:ne180100]<0>(v229, "otranspose");
  ZinPEAtoms::OutputTransposeAtom::OutputTransposeAtom(&v340, v229, v196);
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v314, v340.__r_.__value_.__l.__data_, v340.__r_.__value_.__l.__size_);
  else
    v314 = v340;
  v103 = v341;
  v104 = (uint64_t)v342;
  if (v342)
  {
    if (v342 != v341)
    {
      v104 = (*(uint64_t (**)(void))(*v342 + 16))();
      goto LABEL_505;
    }
    v316 = &v315;
    (*(void (**)(_QWORD *))(v341[0] + 24))(v341);
  }
  else
  {
LABEL_505:
    v316 = (uint64_t *)v104;
  }
  LODWORD(v222) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v317, (int *)&v222, 1);
  memset(&v337, 0, sizeof(v337));
  v222 = &v337;
  v223 = 0;
  v337.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x600uLL);
  v337.__r_.__value_.__l.__size_ = v337.__r_.__value_.__r.__words[0];
  v337.__r_.__value_.__r.__words[2] = v337.__r_.__value_.__r.__words[0] + 1536;
  v337.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem const>,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>((uint64_t)&v337.__r_.__value_.__r.__words[2], (uint64_t)&v253, (uint64_t)&v318, (uint64_t)v337.__r_.__value_.__l.__data_);
  v105 = 1536;
  while (2)
  {
    v106 = (void **)((char *)&v253.__r_.__value_.__l.__data_ + v105);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&(&v248)[v105 / 8]);
    v107 = *(char **)&v246[v105 + 16];
    if (&v244[v105 + 16] == v107)
    {
      v107 = (char *)(v106 - 9);
      v108 = 4;
LABEL_512:
      (*(void (**)(void))(*(_QWORD *)v107 + 8 * v108))();
    }
    else if (v107)
    {
      v108 = 5;
      goto LABEL_512;
    }
    if ((char)v244[v105 + 15] < 0)
      operator delete(*(v106 - 12));
    v105 -= 96;
    if (v105)
      continue;
    break;
  }
  if (v342 == v341)
  {
    v109 = 4;
LABEL_520:
    (*(void (**)(_QWORD *))(*v103 + 8 * v109))(v103);
  }
  else if (v342)
  {
    v109 = 5;
    v103 = v342;
    goto LABEL_520;
  }
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v340.__r_.__value_.__l.__data_);
  v110 = v405;
  if (v230 < 0)
    operator delete(v229[0]);
  if (v345 == v344)
  {
    v112 = 4;
    v111 = v361;
LABEL_529:
    (*(void (**)(_QWORD *))(*v99 + 8 * v112))(v99);
  }
  else
  {
    v111 = v361;
    if (v345)
    {
      v112 = 5;
      v99 = v345;
      goto LABEL_529;
    }
  }
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v343.__r_.__value_.__l.__data_);
  v113 = v353;
  if (v232 < 0)
    operator delete(v231[0]);
  if (v348 == v347)
  {
    v114 = 4;
LABEL_538:
    (*(void (**)(_QWORD *))(*v97 + 8 * v114))(v97);
  }
  else if (v348)
  {
    v114 = 5;
    v97 = v348;
    goto LABEL_538;
  }
  if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v346.__r_.__value_.__l.__data_);
  if (v234 < 0)
    operator delete(v233[0]);
  if (v351 == v350)
  {
    v115 = 4;
LABEL_547:
    (*(void (**)(_QWORD *))(*v95 + 8 * v115))(v95);
  }
  else if (v351)
  {
    v115 = 5;
    v95 = v351;
    goto LABEL_547;
  }
  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v349.__r_.__value_.__l.__data_);
  if (v236 < 0)
    operator delete(v235[0]);
  if (v362 == v361)
  {
    v116 = 4;
LABEL_556:
    (*(void (**)(_QWORD *))(*v111 + 8 * v116))(v111);
  }
  else if (v362)
  {
    v116 = 5;
    v111 = v362;
    goto LABEL_556;
  }
  if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v360.__r_.__value_.__l.__data_);
  v117 = v402;
  if (v239 < 0)
    operator delete(v238[0]);
  if (v365 == v364)
  {
    v118 = 4;
LABEL_565:
    (*(void (**)(_QWORD *))(*v101 + 8 * v118))(v101);
  }
  else if (v365)
  {
    v118 = 5;
    v101 = v365;
    goto LABEL_565;
  }
  if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v363.__r_.__value_.__l.__data_);
  if (v241 < 0)
    operator delete(v240[0]);
  v119 = v367;
  if (v368 == v367)
  {
    v120 = 4;
LABEL_574:
    (*(void (**)(void))(*v119 + 8 * v120))();
  }
  else if (v368)
  {
    v120 = 5;
    v119 = v368;
    goto LABEL_574;
  }
  if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v366.__r_.__value_.__l.__data_);
  if (v243 < 0)
    operator delete(v242[0]);
  v121 = v370;
  if (v371 == v370)
  {
    v122 = 4;
LABEL_583:
    (*(void (**)(void))(*v121 + 8 * v122))();
  }
  else if (v371)
  {
    v122 = 5;
    v121 = v371;
    goto LABEL_583;
  }
  if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v369.__r_.__value_.__l.__data_);
  if (v245 < 0)
    operator delete(*(void **)v244);
  v123 = v390;
  if (v391 == v390)
  {
    v124 = 4;
LABEL_592:
    (*(void (**)(void))(*v123 + 8 * v124))();
  }
  else if (v391)
  {
    v124 = 5;
    v123 = v391;
    goto LABEL_592;
  }
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v389.__r_.__value_.__l.__data_);
  if (v247 < 0)
    operator delete(*(void **)v246);
  v125 = v393;
  if (v394 == v393)
  {
    v126 = 4;
LABEL_601:
    (*(void (**)(void))(*v125 + 8 * v126))();
  }
  else if (v394)
  {
    v126 = 5;
    v125 = v394;
    goto LABEL_601;
  }
  if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v392.__r_.__value_.__l.__data_);
  if (SHIBYTE(v427) < 0)
    operator delete(v425);
  v127 = v396;
  if (v397 == v396)
  {
    v128 = 4;
LABEL_610:
    (*(void (**)(void))(*v127 + 8 * v128))();
  }
  else if (v397)
  {
    v128 = 5;
    v127 = v397;
    goto LABEL_610;
  }
  if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v395.__r_.__value_.__l.__data_);
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v319.__r_.__value_.__l.__data_);
  v129 = v399;
  if (v400 == v399)
  {
    v130 = 4;
LABEL_619:
    (*(void (**)(void))(*v129 + 8 * v130))();
  }
  else if (v400)
  {
    v130 = 5;
    v129 = v400;
    goto LABEL_619;
  }
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v398.__r_.__value_.__l.__data_);
  if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v322.__r_.__value_.__l.__data_);
  if (v403 == v402)
  {
    v131 = 4;
LABEL_628:
    (*(void (**)(_QWORD *))(*v117 + 8 * v131))(v117);
  }
  else if (v403)
  {
    v131 = 5;
    v117 = v403;
    goto LABEL_628;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v325.__r_.__value_.__l.__data_);
  if (v354 == v353)
  {
    v132 = 4;
LABEL_637:
    (*(void (**)(_QWORD *))(*v113 + 8 * v132))(v113);
  }
  else if (v354)
  {
    v132 = 5;
    v113 = v354;
    goto LABEL_637;
  }
  if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v352.__r_.__value_.__l.__data_);
  if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v328.__r_.__value_.__l.__data_);
  if (v374 == v373)
  {
    v133 = 4;
LABEL_646:
    (*(void (**)(_QWORD *))(*v102 + 8 * v133))(v102);
  }
  else if (v374)
  {
    v133 = 5;
    v102 = v374;
    goto LABEL_646;
  }
  if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v372.__r_.__value_.__l.__data_);
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v331.__r_.__value_.__l.__data_);
  if (v406 == v405)
  {
    v134 = 4;
LABEL_655:
    (*(void (**)(_QWORD *))(*v110 + 8 * v134))(v110);
  }
  else if (v406)
  {
    v134 = 5;
    v110 = v406;
    goto LABEL_655;
  }
  if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v404.__r_.__value_.__l.__data_);
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v334.__r_.__value_.__l.__data_);
  v432 = 0;
  v135 = v195[1].i64[0];
  v136 = operator new();
  v254 = 0;
  ZinManyToOnePattern::ZinManyToOnePattern(v136, &v431, v135, 0, &v253, 0);
  v137 = v254;
  if (v254 == &v253)
  {
    v138 = 4;
    v137 = &v253;
LABEL_664:
    (*(void (**)(void))(v137->__r_.__value_.__r.__words[0] + 8 * v138))();
  }
  else if (v254)
  {
    v138 = 5;
    goto LABEL_664;
  }
  v139 = v195 + 4;
  v140 = v195[5].u64[0];
  v141 = (uint64_t *)v195[4].i64[1];
  if ((unint64_t)v141 >= v140)
  {
    v143 = ((uint64_t)v141 - v139->i64[0]) >> 3;
    if ((unint64_t)(v143 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v144 = v140 - v139->i64[0];
    v145 = v144 >> 2;
    if (v144 >> 2 <= (unint64_t)(v143 + 1))
      v145 = v143 + 1;
    if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF8)
      v146 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v146 = v145;
    v255 = v195 + 5;
    if (v146)
      v147 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v195[5].i64, v146);
    else
      v147 = 0;
    v148 = (uint64_t *)&v147[8 * v143];
    v149 = (std::string *)&v147[8 * v146];
    v254 = v149;
    *v148 = v136;
    v142 = v148 + 1;
    v253.__r_.__value_.__r.__words[2] = (std::string::size_type)(v148 + 1);
    v151 = (_QWORD *)v195[4].i64[0];
    v150 = (_QWORD *)v195[4].i64[1];
    if (v150 == v151)
    {
      v153 = vdupq_n_s64((unint64_t)v150);
    }
    else
    {
      do
      {
        v152 = *--v150;
        *v150 = 0;
        *--v148 = v152;
      }
      while (v150 != v151);
      v153 = *v139;
      v142 = (_QWORD *)v253.__r_.__value_.__r.__words[2];
      v149 = v254;
    }
    v195[4].i64[0] = (uint64_t)v148;
    v195[4].i64[1] = (uint64_t)v142;
    *(int64x2_t *)&v253.__r_.__value_.__r.__words[1] = v153;
    v154 = (std::string *)v195[5].i64[0];
    v195[5].i64[0] = (uint64_t)v149;
    v254 = v154;
    v253.__r_.__value_.__r.__words[0] = v153.i64[0];
    std::__split_buffer<std::unique_ptr<ZinPattern>>::~__split_buffer((uint64_t)&v253);
  }
  else
  {
    *v141 = v136;
    v142 = v141 + 1;
  }
  v195[4].i64[1] = (uint64_t)v142;
  v432 = 1;
  v155 = v195[1].i64[0];
  v156 = operator new();
  v254 = 0;
  ZinManyToOnePattern::ZinManyToOnePattern(v156, &v431, v155, 0, &v253, 0);
  v157 = v254;
  if (v254 == &v253)
  {
    v158 = 4;
    v157 = &v253;
LABEL_685:
    (*(void (**)(void))(v157->__r_.__value_.__r.__words[0] + 8 * v158))();
  }
  else if (v254)
  {
    v158 = 5;
    goto LABEL_685;
  }
  v160 = (uint64_t *)v195[4].i64[1];
  v159 = v195[5].u64[0];
  if ((unint64_t)v160 >= v159)
  {
    v162 = ((uint64_t)v160 - v139->i64[0]) >> 3;
    if ((unint64_t)(v162 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v163 = v159 - v139->i64[0];
    v164 = v163 >> 2;
    if (v163 >> 2 <= (unint64_t)(v162 + 1))
      v164 = v162 + 1;
    if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8)
      v165 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v165 = v164;
    v255 = v195 + 5;
    if (v165)
      v166 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v195[5].i64, v165);
    else
      v166 = 0;
    v167 = (uint64_t *)&v166[8 * v162];
    v168 = (std::string *)&v166[8 * v165];
    v254 = v168;
    *v167 = v156;
    v161 = v167 + 1;
    v253.__r_.__value_.__r.__words[2] = (std::string::size_type)(v167 + 1);
    v170 = (_QWORD *)v195[4].i64[0];
    v169 = (_QWORD *)v195[4].i64[1];
    if (v169 == v170)
    {
      v172 = vdupq_n_s64((unint64_t)v169);
    }
    else
    {
      do
      {
        v171 = *--v169;
        *v169 = 0;
        *--v167 = v171;
      }
      while (v169 != v170);
      v172 = *v139;
      v161 = (_QWORD *)v253.__r_.__value_.__r.__words[2];
      v168 = v254;
    }
    v195[4].i64[0] = (uint64_t)v167;
    v195[4].i64[1] = (uint64_t)v161;
    *(int64x2_t *)&v253.__r_.__value_.__r.__words[1] = v172;
    v173 = (std::string *)v195[5].i64[0];
    v195[5].i64[0] = (uint64_t)v168;
    v254 = v173;
    v253.__r_.__value_.__r.__words[0] = v172.i64[0];
    std::__split_buffer<std::unique_ptr<ZinPattern>>::~__split_buffer((uint64_t)&v253);
  }
  else
  {
    *v160 = v156;
    v161 = v160 + 1;
  }
  v195[4].i64[1] = (uint64_t)v161;
  v174 = v195[1].i64[0];
  v175 = operator new();
  v254 = 0;
  ZinLinearPattern::ZinLinearPattern(v175, &v337, v174, 0, &v253, 0);
  v176 = v254;
  if (v254 == &v253)
  {
    v177 = 4;
    v176 = &v253;
LABEL_706:
    (*(void (**)(void))(v176->__r_.__value_.__r.__words[0] + 8 * v177))();
  }
  else if (v254)
  {
    v177 = 5;
    goto LABEL_706;
  }
  v179 = (uint64_t *)v195[4].i64[1];
  v178 = v195[5].u64[0];
  if ((unint64_t)v179 >= v178)
  {
    v181 = ((uint64_t)v179 - v139->i64[0]) >> 3;
    if ((unint64_t)(v181 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v182 = v178 - v139->i64[0];
    v183 = v182 >> 2;
    if (v182 >> 2 <= (unint64_t)(v181 + 1))
      v183 = v181 + 1;
    if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFF8)
      v184 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v184 = v183;
    v255 = v195 + 5;
    if (v184)
      v185 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v195[5].i64, v184);
    else
      v185 = 0;
    v186 = (uint64_t *)&v185[8 * v181];
    v187 = (std::string *)&v185[8 * v184];
    v254 = v187;
    *v186 = v175;
    v180 = v186 + 1;
    v253.__r_.__value_.__r.__words[2] = (std::string::size_type)(v186 + 1);
    v189 = (_QWORD *)v195[4].i64[0];
    v188 = (_QWORD *)v195[4].i64[1];
    if (v188 == v189)
    {
      v191 = vdupq_n_s64((unint64_t)v188);
    }
    else
    {
      do
      {
        v190 = *--v188;
        *v188 = 0;
        *--v186 = v190;
      }
      while (v188 != v189);
      v191 = *v139;
      v180 = (_QWORD *)v253.__r_.__value_.__r.__words[2];
      v187 = v254;
    }
    v195[4].i64[0] = (uint64_t)v186;
    v195[4].i64[1] = (uint64_t)v180;
    *(int64x2_t *)&v253.__r_.__value_.__r.__words[1] = v191;
    v192 = (std::string *)v195[5].i64[0];
    v195[5].i64[0] = (uint64_t)v187;
    v254 = v192;
    v253.__r_.__value_.__r.__words[0] = v191.i64[0];
    std::__split_buffer<std::unique_ptr<ZinPattern>>::~__split_buffer((uint64_t)&v253);
  }
  else
  {
    *v179 = v175;
    v180 = v179 + 1;
  }
  v195[4].i64[1] = (uint64_t)v180;
  v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&v337;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v253);
  v193 = v435;
  if (v436 == v435)
  {
    v194 = 4;
LABEL_727:
    (*(void (**)(void))(*v193 + 8 * v194))();
  }
  else if (v436)
  {
    v194 = 5;
    v193 = v436;
    goto LABEL_727;
  }
  v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&v216;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v253);
  v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&v225;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v253);
  v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&v248;
  std::vector<std::vector<ZinLinearPattern::AtomItemDesc const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v253);
}

void sub_206E5F434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a66;
  void *__p;
  char a72;
  ZinLinearPattern::AtomItemDesc *v72;
  uint64_t v73;
  _QWORD *v75;
  uint64_t v76;

  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xA80]);
  if (a72 < 0)
    operator delete(__p);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xAB8]);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xAF0]);
  if (SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xB28]);
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xC20]);
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xC58]);
  if (SLOBYTE(STACK[0x27F]) < 0)
    operator delete((void *)STACK[0x268]);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xC90]);
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xCC8]);
  if (SLOBYTE(STACK[0x2AF]) < 0)
    operator delete((void *)STACK[0x298]);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xE88]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
    operator delete((void *)STACK[0x2B0]);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xEC0]);
  if (SLOBYTE(STACK[0x119F]) < 0)
    operator delete(*(void **)(v73 - 216));
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xEF8]);
  if (SLOBYTE(STACK[0x90F]) < 0)
    operator delete((void *)STACK[0x8F8]);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xF30]);
  if (SLOBYTE(STACK[0x947]) < 0)
    operator delete((void *)STACK[0x930]);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xF68]);
  if (SLOBYTE(STACK[0x97F]) < 0)
    operator delete((void *)STACK[0x968]);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xB60]);
  if (SLOBYTE(STACK[0x9B7]) < 0)
    operator delete((void *)STACK[0x9A0]);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xD00]);
  if (SLOBYTE(STACK[0x9EF]) < 0)
    operator delete((void *)STACK[0x9D8]);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xFA0]);
  if (SLOBYTE(STACK[0xA27]) < 0)
    operator delete((void *)STACK[0xA10]);
  while (v72 != (ZinLinearPattern::AtomItemDesc *)&STACK[0x2F0])
  {
    v72 = (ZinLinearPattern::AtomItemDesc *)((char *)v72 - 96);
    ZinLinearPattern::AtomItemDesc::~AtomItemDesc(v72);
  }
  v75 = *(_QWORD **)(v73 - 112);
  if (v75 == a24)
  {
    v76 = 4;
  }
  else
  {
    if (!v75)
      goto LABEL_40;
    v76 = 5;
    a24 = *(_QWORD **)(v73 - 112);
  }
  (*(void (**)(void))(*a24 + 8 * v76))();
LABEL_40:
  STACK[0xFA0] = (unint64_t)&a56;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xFA0]);
  STACK[0xFA0] = (unint64_t)&a66;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xFA0]);
  STACK[0xFA0] = (unint64_t)&STACK[0x2C8];
  std::vector<std::vector<ZinLinearPattern::AtomItemDesc const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xFA0]);
  _Unwind_Resume(a1);
}

void sub_206E6028C()
{
  JUMPOUT(0x206E5FFB0);
}

void sub_206E602A0()
{
  ZinPatternAtomDesc *v0;

  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  JUMPOUT(0x206E602ACLL);
}

void sub_206E602B4()
{
  JUMPOUT(0x206E5FFC8);
}

void sub_206E602C8()
{
  ZinPatternAtomDesc *v0;

  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  JUMPOUT(0x206E602D4);
}

void sub_206E602DC()
{
  JUMPOUT(0x206E5FFE0);
}

void sub_206E602E8()
{
  JUMPOUT(0x206E5FFF0);
}

void sub_206E602F0()
{
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0x2F0]);
  JUMPOUT(0x206E60300);
}

void sub_206E60308()
{
  JUMPOUT(0x206E5FFF8);
}

void sub_206E60318()
{
  JUMPOUT(0x206E60030);
}

void sub_206E60320()
{
  JUMPOUT(0x206E60038);
}

void sub_206E6032C()
{
  JUMPOUT(0x206E60038);
}

void sub_206E60334()
{
  ZinPatternAtomDesc *v0;

  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  JUMPOUT(0x206E60340);
}

void sub_206E60348()
{
  JUMPOUT(0x206E60068);
}

void sub_206E60354()
{
  JUMPOUT(0x206E60078);
}

void sub_206E6035C()
{
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xB60]);
  JUMPOUT(0x206E6036CLL);
}

void sub_206E60374()
{
  JUMPOUT(0x206E60080);
}

void sub_206E60384()
{
  JUMPOUT(0x206E600B8);
}

void sub_206E6038C()
{
  unint64_t v0;

  STACK[0x2D0] = v0;
  JUMPOUT(0x206E600C0);
}

void sub_206E60398()
{
  JUMPOUT(0x206E600C0);
}

void sub_206E603A0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 184) = v0;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
  JUMPOUT(0x206E600F0);
}

void sub_206E603C0()
{
  ZinPatternAtomDesc *v0;

  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  JUMPOUT(0x206E603CCLL);
}

void sub_206E603D8()
{
  JUMPOUT(0x206E60118);
}

void sub_206E603F0()
{
  ZinPatternAtomDesc *v0;

  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  JUMPOUT(0x206E603FCLL);
}

void sub_206E60408()
{
  JUMPOUT(0x206E60130);
}

void sub_206E60420()
{
  ZinPatternAtomDesc *v0;

  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  JUMPOUT(0x206E6042CLL);
}

void sub_206E60438()
{
  JUMPOUT(0x206E60148);
}

void sub_206E60448()
{
  JUMPOUT(0x206E60158);
}

void sub_206E60450()
{
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xD00]);
  JUMPOUT(0x206E60460);
}

void sub_206E6046C()
{
  JUMPOUT(0x206E60160);
}

void sub_206E60480()
{
  JUMPOUT(0x206E60198);
}

void sub_206E604AC()
{
  ZinPatternAtomDesc *v0;

  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  JUMPOUT(0x206E604B8);
}

void sub_206E604C8()
{
  JUMPOUT(0x206E601C0);
}

void sub_206E604E4()
{
  ZinPatternAtomDesc *v0;

  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  JUMPOUT(0x206E604F0);
}

void sub_206E60500()
{
  JUMPOUT(0x206E601D8);
}

void sub_206E6051C()
{
  ZinPatternAtomDesc *v0;

  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  JUMPOUT(0x206E60528);
}

void sub_206E60538()
{
  JUMPOUT(0x206E601F0);
}

void sub_206E60554()
{
  ZinPatternAtomDesc *v0;

  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  JUMPOUT(0x206E60560);
}

void sub_206E60570()
{
  JUMPOUT(0x206E60208);
}

void sub_206E60584()
{
  JUMPOUT(0x206E605A0);
}

void sub_206E605AC()
{
  JUMPOUT(0x206E60220);
}

void sub_206E605C4()
{
  JUMPOUT(0x206E60284);
}

uint64_t ZinMirHoistLayersinPEEW::Analyze(ZinMirHoistLayersinPEEW *this, const ZinPattern *a2)
{
  unsigned __int8 *v3;
  char v4;
  uint64_t v5;
  ZinMirHoistLayersinPEEW *v7;
  ZinMirHoistLayersinPEEW *v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  char *v19;
  int v20;
  char v21;
  void *v22;
  int v23;
  char v24;
  char *v25;
  unint64_t v26;

  std::string::basic_string[abi:ne180100]<0>(&v22, "irelu1");
  LOBYTE(v13[0]) = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)&v22);
  std::string::basic_string[abi:ne180100]<0>(&v19, "itranspose1");
  BYTE1(v13[0]) = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)&v19);
  std::string::basic_string[abi:ne180100]<0>(v17, "irelu2");
  BYTE2(v13[0]) = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v17);
  std::string::basic_string[abi:ne180100]<0>(__p, "itranspose2");
  BYTE3(v13[0]) = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)__p);
  std::vector<BOOL>::vector(&v25, v13, 4);
  if (v16 < 0)
    operator delete(__p[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v21 < 0)
    operator delete(v19);
  if (v24 < 0)
    operator delete(v22);
  LOBYTE(__p[0]) = 1;
  v22 = v25;
  v23 = 0;
  v19 = &v25[8 * (v26 >> 6)];
  v20 = v26 & 0x3F;
  if (std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,false,BOOL,std::__identity,0>((uint64_t *)&v22, (uint64_t)&v19, __p))
  {
    goto LABEL_36;
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "scaled_ew");
  v3 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)&v22);
  if ((v3 & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "goc");
    v3 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)&v19);
    if ((v3 & 1) != 0)
    {
      v4 = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "abs_or_zero_compare");
      v3 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v17);
      if ((v3 & 1) != 0)
      {
        v4 = 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "reduction");
        v3 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)__p);
        if ((v3 & 1) != 0)
        {
          v4 = 0;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v13, "final_scale");
          v3 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v13);
          if ((v3 & 1) != 0)
          {
            v4 = 0;
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(v11, "epsilon");
            v3 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v11);
            if ((v3 & 1) != 0)
            {
              v4 = 0;
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v9, "post_process");
              v3 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v9);
              v4 = v3 ^ 1;
              if (v10 < 0)
                operator delete(v9[0]);
            }
            if (v12 < 0)
              operator delete(v11[0]);
          }
          if (v14 < 0)
            operator delete(v13[0]);
        }
        if (v16 < 0)
          operator delete(__p[0]);
      }
      if (v18 < 0)
        operator delete(v17[0]);
    }
    if (v21 < 0)
      operator delete(v19);
  }
  if (v24 < 0)
  {
    operator delete(v22);
    if ((v4 & 1) != 0)
      goto LABEL_36;
LABEL_41:
    v7 = (ZinMirHoistLayersinPEEW *)ZinMirHoistLayersinPEEW::AnalyzePreReductionTranspose((ZinMirHoistLayersinPEEW *)v3, a2);
    if ((v7 & 1) != 0
      || (v8 = (ZinMirHoistLayersinPEEW *)ZinMirHoistLayersinPEEW::AnalyzePostReductionTranspose(v7, a2),
          (v8 & 1) != 0))
    {
      v5 = 1;
    }
    else
    {
      v5 = ZinMirHoistLayersinPEEW::AnalyzeHoistActivations(v8, a2);
    }
    goto LABEL_37;
  }
  if ((v4 & 1) == 0)
    goto LABEL_41;
LABEL_36:
  v5 = 0;
LABEL_37:
  if (v25)
    operator delete(v25);
  return v5;
}

void sub_206E608CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  void *v40;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  if (*(char *)(v38 - 65) < 0)
    operator delete(*(void **)(v38 - 88));
  if (*(char *)(v38 - 41) < 0)
    operator delete(*(void **)(v38 - 64));
  v40 = *(void **)(v38 - 40);
  if (v40)
    operator delete(v40);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirHoistLayersinPEEW::AnalyzePreReductionTranspose(ZinMirHoistLayersinPEEW *this, const ZinPattern *a2)
{
  ZinIrOpLayer **v3;
  ZinIrOpLayer *v4;
  ZinReshapeLayer **v5;
  int v6;
  uint64_t ReshapeInfo;
  uint64_t SingleMatch;
  _BOOL4 v9;
  uint64_t v10;
  char v11;
  _BOOL4 v12;
  unsigned __int8 v13;
  uint64_t InputTensor;
  unsigned int v15;
  ZinIrOpLayer *v16;
  uint64_t v17;
  __int128 v18;
  unsigned int v19;
  ZinIrOpLayer *v20;
  uint64_t v21;
  __int128 v22;
  unsigned __int8 v23;
  void *__p[2];
  __int128 v26;
  uint64_t v27;
  void *v28[2];
  char v29;
  void *v30[2];
  char v31;
  ZinIrOpLayer **v32;
  ZinIrOpLayer **v33;

  std::string::basic_string[abi:ne180100]<0>(__p, "pre_reduction_transpose");
  ZinPattern::GetMatch((uint64_t)a2, (unsigned __int8 *)__p, &v32);
  if (SBYTE7(v26) < 0)
    operator delete(__p[0]);
  v3 = v32;
  if (v33 == v32)
  {
    v10 = 0;
    if (!v32)
      return v10;
    goto LABEL_65;
  }
  v4 = *v32;
  if (v4 == (ZinIrOpLayer *)ZinPattern::GetFirstMatch(a2))
    goto LABEL_30;
  v5 = v32;
  if (v32 == v33)
    goto LABEL_63;
  v6 = 0;
  do
  {
    ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(*v5);
    v6 |= ZinIrTransposeInfo::HasDimension(ReshapeInfo, 4);
    ++v5;
  }
  while (v5 != v33);
  if ((v6 & 1) == 0)
    goto LABEL_63;
  std::string::basic_string[abi:ne180100]<0>(__p, "scaled_ew");
  if (ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)__p))
  {
    std::string::basic_string[abi:ne180100]<0>(v30, "scaled_ew");
    SingleMatch = ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)v30);
    v9 = *(_QWORD *)(SingleMatch + 96) - *(_QWORD *)(SingleMatch + 88) == 16;
    if (v31 < 0)
      operator delete(v30[0]);
  }
  else
  {
    v9 = 0;
  }
  if ((SBYTE7(v26) & 0x80000000) == 0)
  {
    if (!v9)
      goto LABEL_63;
LABEL_19:
    std::string::basic_string[abi:ne180100]<0>(__p, "broadcast1");
    if ((ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)__p) & 1) != 0)
    {
      v11 = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v30, "broadcast2");
      if ((ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v30) & 1) != 0)
      {
        v11 = 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v28, "reduction");
        v11 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v28) ^ 1;
        if (v29 < 0)
          operator delete(v28[0]);
      }
      if (v31 < 0)
        operator delete(v30[0]);
    }
    if (SBYTE7(v26) < 0)
      operator delete(__p[0]);
    if ((v11 & 1) != 0)
      goto LABEL_30;
    std::string::basic_string[abi:ne180100]<0>(__p, "reduction");
    if ((ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)__p) & 1) != 0)
    {
      v12 = 0;
      goto LABEL_42;
    }
    std::string::basic_string[abi:ne180100]<0>(v30, "broadcast1");
    v13 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v30);
    if ((v13 & 1) != 0
      || (std::string::basic_string[abi:ne180100]<0>(v28, "broadcast2"),
          ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v28)))
    {
      InputTensor = ZinIrOpLayer::GetInputTensor(*v32, 0);
      v12 = !IsVector((const ZinTensorDimensions *)(InputTensor + 48));
      if ((v13 & 1) != 0)
      {
LABEL_40:
        if (v31 < 0)
          operator delete(v30[0]);
LABEL_42:
        if (SBYTE7(v26) < 0)
          operator delete(__p[0]);
        if (v12)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "broadcast1");
          v15 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)__p);
          if (SBYTE7(v26) < 0)
            operator delete(__p[0]);
          if (v15)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "broadcast1");
            v16 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)__p);
            if (SBYTE7(v26) < 0)
              operator delete(__p[0]);
            v17 = ZinIrOpLayer::GetInputTensor(v16, 0);
            v18 = *(_OWORD *)(v17 + 64);
            *(_OWORD *)__p = *(_OWORD *)(v17 + 48);
            v26 = v18;
            v27 = *(_QWORD *)(v17 + 80);
            v15 = IsVector((const ZinTensorDimensions *)__p);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "broadcast2");
          v19 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)__p);
          if (SBYTE7(v26) < 0)
            operator delete(__p[0]);
          if (v19)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "broadcast2");
            v20 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)__p);
            if (SBYTE7(v26) < 0)
              operator delete(__p[0]);
            v21 = ZinIrOpLayer::GetInputTensor(v20, 0);
            v22 = *(_OWORD *)(v21 + 64);
            *(_OWORD *)__p = *(_OWORD *)(v21 + 48);
            v26 = v22;
            v27 = *(_QWORD *)(v21 + 80);
            if (((IsVector((const ZinTensorDimensions *)__p) | v15) & 1) == 0)
              goto LABEL_30;
          }
          else if (!v15)
          {
            goto LABEL_30;
          }
        }
        if (*(uint64_t *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*(v33 - 1) + 32))(*(v33 - 1), 0, 0)+ 64) > 1)goto LABEL_63;
        std::string::basic_string[abi:ne180100]<0>(__p, "reduction");
        v23 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)__p);
        if (SBYTE7(v26) < 0)
          operator delete(__p[0]);
        if ((v23 & 1) != 0)
          goto LABEL_63;
LABEL_30:
        v10 = 0;
        goto LABEL_64;
      }
    }
    else
    {
      v12 = 0;
    }
    if (v29 < 0)
      operator delete(v28[0]);
    goto LABEL_40;
  }
  operator delete(__p[0]);
  if (v9)
    goto LABEL_19;
LABEL_63:
  v10 = 1;
LABEL_64:
  v3 = v32;
  if (v32)
  {
LABEL_65:
    v33 = v3;
    operator delete(v3);
  }
  return v10;
}

void sub_206E60E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void *v30;

  if (a14 < 0)
    operator delete(__p);
  v30 = *(void **)(v28 - 56);
  if (v30)
  {
    *(_QWORD *)(v28 - 48) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirHoistLayersinPEEW::AnalyzePostReductionTranspose(ZinMirHoistLayersinPEEW *this, const ZinPattern *a2)
{
  uint64_t SingleMatch;
  ZinMirHoistLayersinPEEW *v4;
  const ZinIrOpLayer *v5;
  uint64_t DimSet;
  uint64_t MatchGroupIndex;
  unint64_t v8;
  const ZinIrOpLayer *v9;
  ZinMirHoistLayersinPEEW **v10;
  ZinMirHoistLayersinPEEW **v11;
  uint64_t v12;
  unint64_t matched;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  ZinMirHoistLayersinPEEW **v18;
  char v19;

  std::string::basic_string[abi:ne180100]<0>(&__p, "post_reduction_transpose");
  SingleMatch = ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)&__p);
  v4 = (ZinMirHoistLayersinPEEW *)SingleMatch;
  if (v19 < 0)
  {
    operator delete(__p);
    if (!v4)
      return 0;
  }
  else if (!SingleMatch)
  {
    return 0;
  }
  if (v4 != (ZinMirHoistLayersinPEEW *)(*(uint64_t (**)(const ZinPattern *))(*(_QWORD *)a2 + 56))(a2))
  {
    DimSet = ZinMirHoistLayersinPEEW::CreateDimSet(v4, v5);
    std::string::basic_string[abi:ne180100]<0>(&__p, "post_reduction_transpose");
    MatchGroupIndex = ZinPattern::GetMatchGroupIndex((uint64_t)a2, (unsigned __int8 *)&__p);
    if (v19 < 0)
      operator delete(__p);
    if (MatchGroupIndex != -1)
    {
      v8 = MatchGroupIndex + 1;
      if (v8 >= ZinPattern::MatchGroupCount(a2))
        return 1;
      while (1)
      {
        ZinPattern::GetMatch(a2, v8, &__p);
        v10 = (ZinMirHoistLayersinPEEW **)__p;
        v11 = v18;
        if (__p != v18)
          break;
LABEL_14:
        if (v10)
        {
          v18 = v10;
          operator delete(v10);
        }
        ++v8;
        matched = ZinPattern::MatchGroupCount(a2);
        result = 1;
        if (v8 >= matched)
          return result;
      }
      while (1)
      {
        v12 = ZinMirHoistLayersinPEEW::CreateDimSet(*v10, v9);
        v15 = 0;
        v16 = v12 & DimSet;
        if ((std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,5ul>,true,true>(&v16, 0, (uint64_t)&v16, 5u, &v15) & 1) == 0)
          break;
        if (++v10 == v11)
        {
          v10 = (ZinMirHoistLayersinPEEW **)__p;
          goto LABEL_14;
        }
      }
      if (__p)
      {
        v18 = (ZinMirHoistLayersinPEEW **)__p;
        operator delete(__p);
      }
    }
  }
  return 0;
}

void sub_206E610D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirHoistLayersinPEEW::AnalyzeHoistActivations(ZinMirHoistLayersinPEEW *this, const ZinPattern *a2)
{
  uint64_t v3;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(v7, "activations1");
  if ((ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v7) & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "activations2");
    v3 = (uint64_t)ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
  }
  if (v8 < 0)
    operator delete(v7[0]);
  return v3;
}

void sub_206E611A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirHoistLayersinPEEW::CreateDimSet(ZinMirHoistLayersinPEEW *this, const ZinIrOpLayer *a2)
{
  uint64_t v2;
  int v3;
  uint64_t ReshapeInfo;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t result;
  uint64_t *v8;
  unsigned int v9;

  v2 = *((_QWORD *)this + 8);
  v3 = *(_DWORD *)(v2 + 8);
  if (v3 == 18)
  {
    v8 = *(uint64_t **)(v2 + 32);
    if (v8)
    {
      result = 0;
      while (1)
      {
        v9 = *((_DWORD *)v8 + 4);
        if (v9 >= 5)
          break;
        result |= 1 << v9;
        v8 = (uint64_t *)*v8;
        if (!v8)
          return result;
      }
LABEL_14:
      std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
    }
  }
  else if (v3 == 37)
  {
    ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(this);
    v5 = *(_DWORD **)(ReshapeInfo + 16);
    v6 = *(_DWORD **)(ReshapeInfo + 24);
    if (v5 != v6)
    {
      result = 0;
      while (*v5 < 5u)
      {
        result |= 1 << *v5;
        v5 += 2;
        if (v5 == v6)
          return result;
      }
      goto LABEL_14;
    }
  }
  return 0;
}

BOOL ZinMirHoistLayersinPEEW::Hoist(ZinMirHoistLayersinPEEW *this, const ZinPattern *a2, ZinIrOpLayerGraph *a3)
{
  char v6;
  char v7;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *__p[2];
  char v33;

  if (ZinMirHoistLayersinPEEW::AnalyzeHoistActivations(this, a2)
    && (ZinMirHoistLayersinPEEW::HoistActivations(this, a2, a3) & 1) == 0)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ZinMirHoistLayersinPEEW::Hoist(result, v9, v10, v11, v12, v13, v14, v15);
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "pre_reduction_transpose");
  if (ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)__p))
  {
    v6 = ZinMirHoistLayersinPEEW::HoistPreReductionTranspose(this, a2, a3);
    v7 = v6;
    if (v33 < 0)
    {
      operator delete(__p[0]);
      if ((v7 & 1) == 0)
      {
LABEL_18:
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
        ZinMirHoistLayersinPEEW::Hoist(result, v18, v19, v20, v21, v22, v23, v24);
        return 0;
      }
    }
    else if ((v6 & 1) == 0)
    {
      goto LABEL_18;
    }
  }
  else if (v33 < 0)
  {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "post_reduction_transpose");
  if (!ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)__p))
  {
    if (v33 < 0)
      operator delete(__p[0]);
    return 1;
  }
  v16 = ZinMirHoistLayersinPEEW::HoistPostReductionTranspose(this, a2, a3);
  v17 = v16;
  if ((v33 & 0x80000000) == 0)
  {
    if ((v16 & 1) == 0)
      goto LABEL_22;
    return 1;
  }
  operator delete(__p[0]);
  if ((v17 & 1) != 0)
    return 1;
LABEL_22:
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (!result)
    return result;
  ZinMirHoistLayersinPEEW::Hoist(result, v25, v26, v27, v28, v29, v30, v31);
  return 0;
}

void sub_206E613F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirHoistLayersinPEEW::HoistActivations(ZinMirHoistLayersinPEEW *this, const ZinPattern *a2, ZinIrOpLayerGraph *a3)
{
  uint64_t v3;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  _QWORD v13[3];
  ZinIrOpLayerGraph *v14;
  const ZinPattern *v15;

  v14 = a3;
  v15 = a2;
  v13[0] = &v15;
  v13[1] = this;
  v13[2] = &v14;
  std::string::basic_string[abi:ne180100]<0>(v11, "broadcast1");
  std::string::basic_string[abi:ne180100]<0>(v9, "activations1");
  if (ZinMirHoistLayersinPEEW::HoistActivations(ZinPattern const*,ZinIrOpLayerGraph *)::$_0::operator()((uint64_t)v13, (unsigned __int8 *)v11, (unsigned __int8 *)v9))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "broadcast2");
    std::string::basic_string[abi:ne180100]<0>(__p, "activations2");
    v3 = ZinMirHoistLayersinPEEW::HoistActivations(ZinPattern const*,ZinIrOpLayerGraph *)::$_0::operator()((uint64_t)v13, (unsigned __int8 *)v7, (unsigned __int8 *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (v8 < 0)
      operator delete(v7[0]);
  }
  else
  {
    v3 = 0;
  }
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  return v3;
}

void sub_206E614F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirHoistLayersinPEEW::HoistPreReductionTranspose(ZinMirHoistLayersinPEEW *this, const ZinPattern *a2, ZinIrOpLayerGraph *a3)
{
  ZinMirHoist *v5;
  ZinIrOpLayer *SingleMatch;
  ZinIrOpLayer *v7;
  ZinIrOpLayer *v8;
  uint64_t v9;
  ZinIrOpLayer **i;
  ZinIrOpLayer **v11;
  ZinIrOpLayer **v12;
  ZinIrOpLayer **v13;
  ZinIrOpLayer **v14;
  ZinIrOpLayer **j;
  ZinIrOpLayer **v16;
  ZinIrOpLayer **v17;
  ZinIrOpLayer *v18;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void **v48;
  void **v49;
  uint64_t v50;
  _QWORD *v51;
  ZinIrOpLayer **v52;
  char *v53;
  void *v54;
  uint64_t *v55;
  uint64_t *v56;
  ZinIrOpLayer *v57;
  ZinReshapeLayer *v58;
  uint64_t ReshapeInfo;
  ZinIrOpLayer *v60;
  _QWORD *v61;
  ZinMirHoist *v62;
  ZinIrOpLayerGraph *v63;
  uint64_t v64;
  _QWORD *v65;
  int *v66;
  int *v67;
  _QWORD *v68;
  int *v69;
  int *v70;
  uint64_t *v71;
  uint64_t v72;
  _QWORD *v73;
  ZinIrOpLayer **v74;
  ZinIrOpLayer **v75;
  _QWORD *v76;
  ZinIrOpLayer *v77;
  size_t v78;
  _BYTE *v79;
  const void *v80;
  std::string *v81;
  __int128 v82;
  void **v83;
  std::string::size_type v84;
  std::string *v85;
  __int128 v86;
  uint64_t InputTensor;
  __int128 v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  ZinIrOpLayer *Broadcast;
  _BOOL8 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t *v108;
  _BYTE v109[32];
  uint64_t v110;
  std::string v111;
  void *v112[2];
  char *v113;
  void *v114;
  void *v115;
  uint64_t v116;
  char v117;
  ZinIrOpLayer *v118;
  _OWORD v119[2];
  int v120;
  void *v121;
  uint64_t *v122;
  unint64_t v123;
  void *__p;
  ZinIrOpLayer **v125;
  void *v126;
  ZinIrOpLayer **v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  int v135;
  uint64_t v136;

  v5 = this;
  v136 = *MEMORY[0x24BDAC8D0];
  if (!ZinMirHoistLayersinPEEW::AnalyzePreReductionTranspose(this, a2))
    return 1;
  std::string::basic_string[abi:ne180100]<0>(&v128, "scaled_ew");
  SingleMatch = (ZinIrOpLayer *)ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)&v128);
  if (SBYTE7(v129) < 0)
    operator delete((void *)v128);
  std::string::basic_string[abi:ne180100]<0>(&v128, "goc");
  ZinPattern::GetMatch((uint64_t)a2, (unsigned __int8 *)&v128, &v126);
  if (SBYTE7(v129) < 0)
    operator delete((void *)v128);
  std::string::basic_string[abi:ne180100]<0>(&v128, "abs_or_zero_compare");
  v7 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)&v128);
  if (SBYTE7(v129) < 0)
    operator delete((void *)v128);
  std::string::basic_string[abi:ne180100]<0>(&v128, "pre_reduction_transpose");
  ZinPattern::GetMatch((uint64_t)a2, (unsigned __int8 *)&v128, &__p);
  if (SBYTE7(v129) < 0)
    operator delete((void *)v128);
  std::string::basic_string[abi:ne180100]<0>(&v128, "prescale1");
  v8 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)&v128);
  if (SBYTE7(v129) < 0)
  {
    operator delete((void *)v128);
    if (!v7)
      goto LABEL_19;
  }
  else if (!v7)
  {
    goto LABEL_19;
  }
  for (i = (ZinIrOpLayer **)__p; i != v125; ++i)
  {
    if ((ZinMirHoist::SwapLayersAndUpdateTensorDims(v5, a3, v7, *i, 1) & 1) == 0)
    {
LABEL_38:
      v9 = 0;
      goto LABEL_39;
    }
  }
LABEL_19:
  v11 = (ZinIrOpLayer **)v126;
  v12 = v127;
  if (v127 != v126)
  {
    v13 = v125;
    do
    {
      v14 = (ZinIrOpLayer **)__p;
      if (__p != v13)
      {
        do
        {
          if ((ZinMirHoist::SwapLayersAndUpdateTensorDims(v5, a3, *(v12 - 1), *v14, 1) & 1) == 0)
            goto LABEL_38;
          ++v14;
        }
        while (v14 != v125);
        v11 = (ZinIrOpLayer **)v126;
        v13 = v14;
      }
      --v12;
    }
    while (v12 != v11);
  }
  if (SingleMatch)
  {
    for (j = (ZinIrOpLayer **)__p; j != v125; ++j)
    {
      if ((ZinMirHoist::SwapLayersAndUpdateTensorDims(v5, a3, SingleMatch, *j, 1) & 1) == 0)
        goto LABEL_38;
    }
  }
  if (v8)
  {
    v17 = (ZinIrOpLayer **)__p;
    v16 = v125;
    while (v17 != v16)
    {
      v18 = (ZinIrOpLayer *)**((_QWORD **)v8 + 14);
      if (*(_DWORD *)(*((_QWORD *)v18 + 8) + 8) == 37)
      {
        if (!ZinMirHoist::SwapLayersAndUpdateTensorDims(v5, a3, v8, v18, 1))
          goto LABEL_38;
        v16 = v125;
      }
      ++v17;
    }
  }
  v121 = 0;
  v122 = 0;
  v123 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v128, "broadcast1");
  v20 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)&v128);
  v21 = v20;
  if (SBYTE7(v129) < 0)
  {
    operator delete((void *)v128);
    if (!v21)
      goto LABEL_64;
  }
  else if (!v20)
  {
    goto LABEL_64;
  }
  std::string::basic_string[abi:ne180100]<0>(&v128, "broadcast1");
  v22 = ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)&v128);
  v23 = ((char *)v122 - (_BYTE *)v121) >> 3;
  if ((unint64_t)(v23 + 1) >> 61)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v24 = (uint64_t)(v123 - (_QWORD)v121) >> 2;
  if (v24 <= v23 + 1)
    v24 = v23 + 1;
  if (v123 - (unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
    v25 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v25 = v24;
  if (v25)
    v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v123, v25);
  else
    v26 = 0;
  v27 = (uint64_t *)&v26[8 * v23];
  v28 = &v26[8 * v25];
  *v27 = v22;
  v29 = v27 + 1;
  v31 = (char *)v121;
  v30 = (char *)v122;
  if (v122 != v121)
  {
    do
    {
      v32 = *((_QWORD *)v30 - 1);
      v30 -= 8;
      *--v27 = v32;
    }
    while (v30 != v31);
    v30 = (char *)v121;
  }
  v121 = v27;
  v122 = v29;
  v123 = (unint64_t)v28;
  if (v30)
    operator delete(v30);
  v122 = v29;
  if (SBYTE7(v129) < 0)
    operator delete((void *)v128);
LABEL_64:
  std::string::basic_string[abi:ne180100]<0>(&v128, "broadcast2");
  v33 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)&v128);
  v34 = v33;
  if ((SBYTE7(v129) & 0x80000000) == 0)
  {
    if (!v33)
      goto LABEL_86;
LABEL_68:
    std::string::basic_string[abi:ne180100]<0>(&v128, "broadcast2");
    v35 = ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)&v128);
    v36 = v35;
    v37 = v122;
    if ((unint64_t)v122 >= v123)
    {
      v39 = ((char *)v122 - (_BYTE *)v121) >> 3;
      if ((unint64_t)(v39 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v40 = (uint64_t)(v123 - (_QWORD)v121) >> 2;
      if (v40 <= v39 + 1)
        v40 = v39 + 1;
      if (v123 - (unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
        v41 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v41 = v40;
      if (v41)
        v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v123, v41);
      else
        v42 = 0;
      v43 = (uint64_t *)&v42[8 * v39];
      v44 = &v42[8 * v41];
      *v43 = v36;
      v38 = v43 + 1;
      v46 = (char *)v121;
      v45 = (char *)v122;
      if (v122 != v121)
      {
        do
        {
          v47 = *((_QWORD *)v45 - 1);
          v45 -= 8;
          *--v43 = v47;
        }
        while (v45 != v46);
        v45 = (char *)v121;
      }
      v121 = v43;
      v122 = v38;
      v123 = (unint64_t)v44;
      if (v45)
        operator delete(v45);
    }
    else
    {
      *v122 = v35;
      v38 = v37 + 1;
    }
    v122 = v38;
    if (SBYTE7(v129) < 0)
      operator delete((void *)v128);
    goto LABEL_86;
  }
  operator delete((void *)v128);
  if (v34)
    goto LABEL_68;
LABEL_86:
  v49 = (void **)v121;
  v48 = (void **)v122;
  if (v122 == v121)
  {
    v9 = 1;
    goto LABEL_157;
  }
  memset(v119, 0, sizeof(v119));
  v120 = 1065353216;
  do
  {
    v114 = *v49;
    v50 = *((_QWORD *)v114 + 8);
    *(_QWORD *)&v128 = &v114;
    v51 = std::__hash_table<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::__unordered_map_hasher<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::hash<ZinBroadcastLayer *>,std::equal_to<ZinBroadcastLayer *>,true>,std::__unordered_map_equal<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::equal_to<ZinBroadcastLayer *>,std::hash<ZinBroadcastLayer *>,true>,std::allocator<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>>::__emplace_unique_key_args<ZinBroadcastLayer *,std::piecewise_construct_t const&,std::tuple<ZinBroadcastLayer * const&>,std::tuple<>>((uint64_t)v119, &v114, (uint64_t)&std::piecewise_construct, (_QWORD **)&v128);
    if (v51 + 3 != (_QWORD *)(v50 + 16))
    {
      *((_DWORD *)v51 + 14) = *(_DWORD *)(v50 + 48);
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(v51 + 3, *(uint64_t **)(v50 + 32), 0);
    }
    ++v49;
  }
  while (v49 != v48);
  v53 = (char *)__p;
  v52 = v125;
  if (__p == v125)
  {
LABEL_116:
    v74 = (ZinIrOpLayer **)v121;
    v75 = (ZinIrOpLayer **)v122;
    if (v121 != v122)
    {
      do
      {
        v118 = *v74;
        *(_QWORD *)&v128 = &v118;
        v76 = std::__hash_table<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::__unordered_map_hasher<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::hash<ZinBroadcastLayer *>,std::equal_to<ZinBroadcastLayer *>,true>,std::__unordered_map_equal<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::equal_to<ZinBroadcastLayer *>,std::hash<ZinBroadcastLayer *>,true>,std::allocator<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>>::__emplace_unique_key_args<ZinBroadcastLayer *,std::piecewise_construct_t const&,std::tuple<ZinBroadcastLayer * const&>,std::tuple<>>((uint64_t)v119, &v118, (uint64_t)&std::piecewise_construct, (_QWORD **)&v128);
        v77 = v118;
        if (*((char *)v118 + 47) >= 0)
          v78 = *((unsigned __int8 *)v118 + 47);
        else
          v78 = *((_QWORD *)v118 + 4);
        std::string::basic_string[abi:ne180100]((uint64_t)v109, v78 + 1);
        if (v109[23] >= 0)
          v79 = v109;
        else
          v79 = *(_BYTE **)v109;
        if (v78)
        {
          if (*((char *)v77 + 47) >= 0)
            v80 = (char *)v77 + 24;
          else
            v80 = (const void *)*((_QWORD *)v77 + 3);
          memmove(v79, v80, v78);
        }
        *(_WORD *)&v79[v78] = 95;
        std::string::basic_string[abi:ne180100]<0>(&v111, "hoist_swap_bcast");
        v81 = std::string::append(&v111, "_xfm", 4uLL);
        v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
        v113 = (char *)v81->__r_.__value_.__r.__words[2];
        *(_OWORD *)v112 = v82;
        v81->__r_.__value_.__l.__size_ = 0;
        v81->__r_.__value_.__r.__words[2] = 0;
        v81->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v113) >= 0)
          v83 = v112;
        else
          v83 = (void **)v112[0];
        if (SHIBYTE(v113) >= 0)
          v84 = HIBYTE(v113);
        else
          v84 = (std::string::size_type)v112[1];
        v85 = std::string::append((std::string *)v109, (const std::string::value_type *)v83, v84);
        v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
        *(_QWORD *)&v129 = *((_QWORD *)&v85->__r_.__value_.__l + 2);
        v128 = v86;
        v85->__r_.__value_.__l.__size_ = 0;
        v85->__r_.__value_.__r.__words[2] = 0;
        v85->__r_.__value_.__r.__words[0] = 0;
        ZinObjectNameFactory::ZinObjectNameFactory(&v114, &v128);
        if (SBYTE7(v129) < 0)
          operator delete((void *)v128);
        if (SHIBYTE(v113) < 0)
          operator delete(v112[0]);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
        if ((v109[23] & 0x80000000) != 0)
          operator delete(*(void **)v109);
        InputTensor = ZinIrOpLayer::GetInputTensor(v118, 0);
        v88 = *(_OWORD *)(InputTensor + 64);
        *(_OWORD *)v109 = *(_OWORD *)(InputTensor + 48);
        *(_OWORD *)&v109[16] = v88;
        v110 = *(_QWORD *)(InputTensor + 80);
        *(_QWORD *)&v128 = &v118;
        v89 = std::__hash_table<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::__unordered_map_hasher<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::hash<ZinBroadcastLayer *>,std::equal_to<ZinBroadcastLayer *>,true>,std::__unordered_map_equal<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::equal_to<ZinBroadcastLayer *>,std::hash<ZinBroadcastLayer *>,true>,std::allocator<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>>::__emplace_unique_key_args<ZinBroadcastLayer *,std::piecewise_construct_t const&,std::tuple<ZinBroadcastLayer * const&>,std::tuple<>>((uint64_t)v119, &v118, (uint64_t)&std::piecewise_construct, (_QWORD **)&v128);
        v90 = operator new();
        ZinIrBroadcastInfo::ZinIrBroadcastInfo(v90, v89 + 3);
        ZinIrBroadcastInfo::ComputeInputDimensions(v90, (ZinTensorDimensions *)v109);
        v91 = *((_QWORD *)v118 + 2);
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD))(***((_QWORD ***)v118 + 11) + 80))(&v128, **((_QWORD **)v118 + 11), 0, 0);
        v92 = operator new(0x78uLL);
        v112[1] = v92 + 30;
        v113 = (char *)(v92 + 30);
        v92[28] = v135;
        v93 = v134;
        v94 = v132;
        *((_OWORD *)v92 + 5) = v133;
        *((_OWORD *)v92 + 6) = v93;
        v95 = v129;
        *(_OWORD *)v92 = v128;
        *((_OWORD *)v92 + 1) = v95;
        v96 = v131;
        *((_OWORD *)v92 + 2) = v130;
        *((_OWORD *)v92 + 3) = v96;
        *((_OWORD *)v92 + 4) = v94;
        v112[0] = v92;
        v97 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v118 + 32))(v118, 0, 0);
        Broadcast = (ZinIrOpLayer *)ZinBuilder::CreateBroadcast(v91, (uint64_t)&v114, (uint64_t *)v112, (uint64_t)(v76 + 3), *(_DWORD *)(v97 + 88));
        if (v112[0])
        {
          v112[1] = v112[0];
          operator delete(v112[0]);
        }
        *(_QWORD *)&v128 = &unk_24C02BB18;
        v129 = 0uLL;
        *((_QWORD *)&v128 + 1) = 0;
        ZinIrOpLayerGraph::ReplaceNode((uint64_t **)a3, v118, Broadcast, (const Layer2TDMapper::SourceLayer *)&v128);
        *(_QWORD *)&v128 = &unk_24C02BB18;
        if (*((_QWORD *)&v128 + 1))
        {
          *(_QWORD *)&v129 = *((_QWORD *)&v128 + 1);
          operator delete(*((void **)&v128 + 1));
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
        v114 = off_24C01FBB0;
        if (v117 < 0)
          operator delete(v115);
        ++v74;
      }
      while (v74 != v75);
    }
    v9 = 1;
    goto LABEL_156;
  }
  v54 = &std::piecewise_construct;
  while (1)
  {
    v56 = (uint64_t *)v121;
    v55 = v122;
    if (v121 != v122)
      break;
LABEL_115:
    v53 += 8;
    if (v53 == (char *)v52)
      goto LABEL_116;
  }
  v107 = v53;
  v108 = v122;
  while (1)
  {
    v57 = (ZinIrOpLayer *)*v56;
    v58 = **(ZinReshapeLayer ***)(*v56 + 112);
    if (*(_DWORD *)(*((_QWORD *)v58 + 8) + 8) == 37)
      break;
LABEL_113:
    if (++v56 == v55)
    {
      v52 = v125;
      v53 = v107;
      goto LABEL_115;
    }
  }
  v112[0] = (void *)*v56;
  ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(v58);
  v115 = 0;
  v116 = 0;
  v114 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v114, *(const void **)(ReshapeInfo + 16), *(_QWORD *)(ReshapeInfo + 24), (uint64_t)(*(_QWORD *)(ReshapeInfo + 24) - *(_QWORD *)(ReshapeInfo + 16)) >> 3);
  v60 = v57;
  *(_QWORD *)&v128 = v112;
  v61 = std::__hash_table<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::__unordered_map_hasher<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::hash<ZinBroadcastLayer *>,std::equal_to<ZinBroadcastLayer *>,true>,std::__unordered_map_equal<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::equal_to<ZinBroadcastLayer *>,std::hash<ZinBroadcastLayer *>,true>,std::allocator<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>>::__emplace_unique_key_args<ZinBroadcastLayer *,std::piecewise_construct_t const&,std::tuple<ZinBroadcastLayer * const&>,std::tuple<>>((uint64_t)v119, v112, (uint64_t)v54, (_QWORD **)&v128);
  v62 = v5;
  v63 = a3;
  *(_QWORD *)v109 = v112;
  v64 = (uint64_t)v54;
  v65 = std::__hash_table<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::__unordered_map_hasher<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::hash<ZinBroadcastLayer *>,std::equal_to<ZinBroadcastLayer *>,true>,std::__unordered_map_equal<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::equal_to<ZinBroadcastLayer *>,std::hash<ZinBroadcastLayer *>,true>,std::allocator<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>>::__emplace_unique_key_args<ZinBroadcastLayer *,std::piecewise_construct_t const&,std::tuple<ZinBroadcastLayer * const&>,std::tuple<>>((uint64_t)v119, v112, (uint64_t)v54, (_QWORD **)v109);
  std::unordered_map<ZinIrDimension,unsigned long>::unordered_map((uint64_t)&v128, (uint64_t)(v65 + 3));
  v66 = (int *)v114;
  v67 = (int *)v115;
  if (v114 != v115)
  {
    v68 = v61 + 3;
    do
    {
      if (std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v68, v66))
      {
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__erase_unique<ZinIrDimension>(&v128, v66);
      }
      v66 += 2;
    }
    while (v66 != v67);
    v69 = (int *)v114;
    v70 = (int *)v115;
    while (v69 != v70)
    {
      if (std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v68, v69))
      {
        v71 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v68, v69);
        if (!v71)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v72 = v71[3];
        *(_QWORD *)v109 = v69 + 1;
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t)&v128, v69 + 1, v64, (_DWORD **)v109)[3] = v72;
      }
      v69 += 2;
    }
  }
  *(_QWORD *)v109 = v112;
  v54 = (void *)v64;
  v73 = std::__hash_table<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::__unordered_map_hasher<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::hash<ZinBroadcastLayer *>,std::equal_to<ZinBroadcastLayer *>,true>,std::__unordered_map_equal<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::equal_to<ZinBroadcastLayer *>,std::hash<ZinBroadcastLayer *>,true>,std::allocator<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>>::__emplace_unique_key_args<ZinBroadcastLayer *,std::piecewise_construct_t const&,std::tuple<ZinBroadcastLayer * const&>,std::tuple<>>((uint64_t)v119, v112, v64, (_QWORD **)v109);
  a3 = v63;
  v5 = v62;
  if (v73 + 3 != (_QWORD *)&v128)
  {
    *((_DWORD *)v73 + 14) = v130;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(v73 + 3, (uint64_t *)v129, 0);
  }
  if ((ZinMirHoist::SwapLayersAndUpdateTensorDims(v62, a3, v60, v58, 0) & 1) != 0)
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v128);
    if (v114)
    {
      v115 = v114;
      operator delete(v114);
    }
    v55 = v108;
    goto LABEL_113;
  }
  v99 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v99)
    ZinMirHoistLayersinPEEW::HoistPreReductionTranspose(v99, v100, v101, v102, v103, v104, v105, v106);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v128);
  if (v114)
  {
    v115 = v114;
    operator delete(v114);
  }
  v9 = 0;
LABEL_156:
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::~__hash_table((uint64_t)v119);
  v48 = (void **)v121;
LABEL_157:
  if (v48)
  {
    v122 = (uint64_t *)v48;
    operator delete(v48);
  }
LABEL_39:
  if (__p)
  {
    v125 = (ZinIrOpLayer **)__p;
    operator delete(__p);
  }
  if (v126)
  {
    v127 = (ZinIrOpLayer **)v126;
    operator delete(v126);
  }
  return v9;
}

